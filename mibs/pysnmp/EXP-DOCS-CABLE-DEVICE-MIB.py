#
# PySNMP MIB module EXP-DOCS-CABLE-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXP-DOCS-CABLE-DEVICE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
vacmAccessEntry, = mibBuilder.importSymbols("SNMP-VIEW-BASED-ACM-MIB", "vacmAccessEntry")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
zeroDotZero, iso, experimental, Counter32, Bits, ModuleIdentity, IpAddress, mib_2, Gauge32, ObjectIdentity, MibIdentifier, Unsigned32, TimeTicks, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "zeroDotZero", "iso", "experimental", "Counter32", "Bits", "ModuleIdentity", "IpAddress", "mib-2", "Gauge32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "TimeTicks", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DateAndTime, RowPointer, RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowPointer", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
docsDev = ModuleIdentity((1, 3, 6, 1, 3, 83))
docsDev.setRevisions(('2000-07-07 00:00', '1999-08-19 00:00',))
if mibBuilder.loadTexts: docsDev.setLastUpdated('200007070000Z')
if mibBuilder.loadTexts: docsDev.setOrganization('IETF IPCDN Working Group')
docsDevMIBObjects = MibIdentifier((1, 3, 6, 1, 3, 83, 1))
docsDevBase = MibIdentifier((1, 3, 6, 1, 3, 83, 1, 1))
class InterfaceSet(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("allCpe", 2), ("allNetwork", 3), ("allCpeEthernet", 4), ("allCpeUsb", 5), ("allCpeFirewire", 6), ("allExternal", 7), ("allInternal", 8), ("all", 9), ("application1", 10), ("application2", 11), ("application3", 12), ("application4", 13))

class IpV4orV6Address(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
docsDevRole = MibScalar((1, 3, 6, 1, 3, 83, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cm", 1), ("cmtsActive", 2), ("cmtsBackup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevRole.setStatus('current')
docsDevDateTime = MibScalar((1, 3, 6, 1, 3, 83, 1, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevDateTime.setStatus('current')
docsDevResetNow = MibScalar((1, 3, 6, 1, 3, 83, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevResetNow.setStatus('current')
docsDevSerialNumber = MibScalar((1, 3, 6, 1, 3, 83, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevSerialNumber.setStatus('current')
docsDevSTPControl = MibScalar((1, 3, 6, 1, 3, 83, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stEnabled", 1), ("noStFilterBpdu", 2), ("noStPassBpdu", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevSTPControl.setStatus('current')
docsDevNmAccessTable = MibTable((1, 3, 6, 1, 3, 83, 1, 2), )
if mibBuilder.loadTexts: docsDevNmAccessTable.setStatus('deprecated')
docsDevNmAccessEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 2, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessIndex"))
if mibBuilder.loadTexts: docsDevNmAccessEntry.setStatus('deprecated')
docsDevNmAccessIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsDevNmAccessIndex.setStatus('deprecated')
docsDevNmAccessIp = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 2, 1, 2), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevNmAccessIp.setStatus('deprecated')
docsDevNmAccessIpMask = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 2, 1, 3), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevNmAccessIpMask.setStatus('deprecated')
docsDevNmAccessCommunity = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevNmAccessCommunity.setStatus('deprecated')
docsDevNmAccessControl = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("read", 2), ("readWrite", 3), ("roWithTraps", 4), ("rwWithTraps", 5), ("trapsOnly", 6))).clone('read')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevNmAccessControl.setStatus('deprecated')
docsDevNmAccessInterfaces = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevNmAccessInterfaces.setStatus('deprecated')
docsDevNmAccessStatus = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevNmAccessStatus.setStatus('deprecated')
docsDevSoftware = MibIdentifier((1, 3, 6, 1, 3, 83, 1, 3))
docsDevSwServer = MibScalar((1, 3, 6, 1, 3, 83, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevSwServer.setStatus('deprecated')
docsDevSwFilename = MibScalar((1, 3, 6, 1, 3, 83, 1, 3, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevSwFilename.setStatus('current')
docsDevSwAdminStatus = MibScalar((1, 3, 6, 1, 3, 83, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upgradeFromMgt", 1), ("allowProvisioningUpgrade", 2), ("ignoreProvisioningUpgrade", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevSwAdminStatus.setStatus('current')
docsDevSwOperStatus = MibScalar((1, 3, 6, 1, 3, 83, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inProgress", 1), ("completeFromProvisioning", 2), ("completeFromMgt", 3), ("failed", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevSwOperStatus.setStatus('current')
docsDevSwCurrentVers = MibScalar((1, 3, 6, 1, 3, 83, 1, 3, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevSwCurrentVers.setStatus('current')
docsDevSwServerAddress = MibScalar((1, 3, 6, 1, 3, 83, 1, 3, 6), IpV4orV6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevSwServerAddress.setStatus('current')
docsDevServer = MibIdentifier((1, 3, 6, 1, 3, 83, 1, 4))
docsDevServerBootState = MibScalar((1, 3, 6, 1, 3, 83, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("operational", 1), ("disabled", 2), ("waitingForDhcpOffer", 3), ("waitingForDhcpResponse", 4), ("waitingForTimeServer", 5), ("waitingForTftp", 6), ("refusedByCmts", 7), ("forwardingDenied", 8), ("other", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevServerBootState.setStatus('current')
docsDevServerDhcp = MibScalar((1, 3, 6, 1, 3, 83, 1, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevServerDhcp.setStatus('deprecated')
docsDevServerTime = MibScalar((1, 3, 6, 1, 3, 83, 1, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevServerTime.setStatus('deprecated')
docsDevServerTftp = MibScalar((1, 3, 6, 1, 3, 83, 1, 4, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevServerTftp.setStatus('deprecated')
docsDevServerConfigFile = MibScalar((1, 3, 6, 1, 3, 83, 1, 4, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevServerConfigFile.setStatus('current')
docsDevServerDhcpAddress = MibScalar((1, 3, 6, 1, 3, 83, 1, 4, 6), IpV4orV6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevServerDhcpAddress.setStatus('current')
docsDevServerTimeAddress = MibScalar((1, 3, 6, 1, 3, 83, 1, 4, 7), IpV4orV6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevServerTimeAddress.setStatus('current')
docsDevServerConfigTftpAddress = MibScalar((1, 3, 6, 1, 3, 83, 1, 4, 8), IpV4orV6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevServerConfigTftpAddress.setStatus('current')
docsDevEvent = MibIdentifier((1, 3, 6, 1, 3, 83, 1, 5))
docsDevEvControl = MibScalar((1, 3, 6, 1, 3, 83, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetLog", 1), ("useDefaultReporting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevEvControl.setStatus('current')
docsDevEvSyslog = MibScalar((1, 3, 6, 1, 3, 83, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevEvSyslog.setStatus('deprecated')
docsDevEvThrottleAdminStatus = MibScalar((1, 3, 6, 1, 3, 83, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unconstrained", 1), ("maintainBelowThreshold", 2), ("stopAtThreshold", 3), ("inhibited", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevEvThrottleAdminStatus.setStatus('current')
docsDevEvThrottleInhibited = MibScalar((1, 3, 6, 1, 3, 83, 1, 5, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevEvThrottleInhibited.setStatus('current')
docsDevEvThrottleThreshold = MibScalar((1, 3, 6, 1, 3, 83, 1, 5, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevEvThrottleThreshold.setStatus('current')
docsDevEvThrottleInterval = MibScalar((1, 3, 6, 1, 3, 83, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevEvThrottleInterval.setStatus('current')
docsDevEvControlTable = MibTable((1, 3, 6, 1, 3, 83, 1, 5, 7), )
if mibBuilder.loadTexts: docsDevEvControlTable.setStatus('current')
docsDevEvControlEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 5, 7, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvPriority"))
if mibBuilder.loadTexts: docsDevEvControlEntry.setStatus('current')
docsDevEvPriority = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8))))
if mibBuilder.loadTexts: docsDevEvPriority.setStatus('current')
docsDevEvReporting = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 7, 1, 2), Bits().clone(namedValues=NamedValues(("local", 0), ("traps", 1), ("syslog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevEvReporting.setStatus('current')
docsDevEventTable = MibTable((1, 3, 6, 1, 3, 83, 1, 5, 8), )
if mibBuilder.loadTexts: docsDevEventTable.setStatus('current')
docsDevEventEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 5, 8, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvIndex"))
if mibBuilder.loadTexts: docsDevEventEntry.setStatus('current')
docsDevEvIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsDevEvIndex.setStatus('current')
docsDevEvFirstTime = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevEvFirstTime.setStatus('current')
docsDevEvLastTime = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 8, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevEvLastTime.setStatus('current')
docsDevEvCounts = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevEvCounts.setStatus('current')
docsDevEvLevel = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevEvLevel.setStatus('current')
docsDevEvId = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevEvId.setStatus('current')
docsDevEvText = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 5, 8, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevEvText.setStatus('current')
docsDevEvSyslogAddress = MibScalar((1, 3, 6, 1, 3, 83, 1, 5, 9), IpV4orV6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevEvSyslogAddress.setStatus('current')
docsDevFilter = MibIdentifier((1, 3, 6, 1, 3, 83, 1, 6))
docsDevFilterLLCUnmatchedAction = MibScalar((1, 3, 6, 1, 3, 83, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevFilterLLCUnmatchedAction.setStatus('current')
docsDevFilterLLCTable = MibTable((1, 3, 6, 1, 3, 83, 1, 6, 2), )
if mibBuilder.loadTexts: docsDevFilterLLCTable.setStatus('current')
docsDevFilterLLCEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 6, 2, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCIndex"))
if mibBuilder.loadTexts: docsDevFilterLLCEntry.setStatus('current')
docsDevFilterLLCIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsDevFilterLLCIndex.setStatus('current')
docsDevFilterLLCStatus = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterLLCStatus.setStatus('current')
docsDevFilterLLCIfIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterLLCIfIndex.setStatus('deprecated')
docsDevFilterLLCProtocolType = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethertype", 1), ("dsap", 2))).clone('ethertype')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterLLCProtocolType.setStatus('current')
docsDevFilterLLCProtocol = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterLLCProtocol.setStatus('current')
docsDevFilterLLCMatches = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevFilterLLCMatches.setStatus('current')
docsDevFilterLLCInterfaces = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterLLCInterfaces.setStatus('current')
docsDevFilterLLCInterfaceSet = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 2, 1, 8), InterfaceSet().clone('allCpe')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterLLCInterfaceSet.setStatus('current')
docsDevFilterIpDefault = MibScalar((1, 3, 6, 1, 3, 83, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevFilterIpDefault.setStatus('current')
docsDevFilterIpTable = MibTable((1, 3, 6, 1, 3, 83, 1, 6, 4), )
if mibBuilder.loadTexts: docsDevFilterIpTable.setStatus('current')
docsDevFilterIpEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 6, 4, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpIndex"))
if mibBuilder.loadTexts: docsDevFilterIpEntry.setStatus('current')
docsDevFilterIpIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsDevFilterIpIndex.setStatus('current')
docsDevFilterIpStatus = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpStatus.setStatus('current')
docsDevFilterIpControl = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2), ("policy", 3))).clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpControl.setStatus('current')
docsDevFilterIpIfIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpIfIndex.setStatus('deprecated')
docsDevFilterIpDirection = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3))).clone('inbound')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpDirection.setStatus('current')
docsDevFilterIpBroadcast = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpBroadcast.setStatus('current')
docsDevFilterIpSaddr = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpSaddr.setStatus('current')
docsDevFilterIpSmask = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpSmask.setStatus('current')
docsDevFilterIpDaddr = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpDaddr.setStatus('current')
docsDevFilterIpDmask = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 10), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpDmask.setStatus('current')
docsDevFilterIpProtocol = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpProtocol.setStatus('current')
docsDevFilterIpSourcePortLow = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpSourcePortLow.setStatus('current')
docsDevFilterIpSourcePortHigh = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpSourcePortHigh.setStatus('current')
docsDevFilterIpDestPortLow = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpDestPortLow.setStatus('current')
docsDevFilterIpDestPortHigh = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpDestPortHigh.setStatus('current')
docsDevFilterIpMatches = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevFilterIpMatches.setStatus('current')
docsDevFilterIpTos = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpTos.setStatus('current')
docsDevFilterIpTosMask = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpTosMask.setStatus('current')
docsDevFilterIpContinue = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpContinue.setStatus('current')
docsDevFilterIpPolicyId = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpPolicyId.setStatus('current')
docsDevFilterIpInterfaces = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpInterfaces.setStatus('current')
docsDevFilterIpInterfaceSet = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 4, 1, 22), InterfaceSet().clone('allCpe')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpInterfaceSet.setStatus('current')
docsDevFilterPolicyTable = MibTable((1, 3, 6, 1, 3, 83, 1, 6, 5), )
if mibBuilder.loadTexts: docsDevFilterPolicyTable.setStatus('current')
docsDevFilterPolicyEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 6, 5, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterPolicyIndex"))
if mibBuilder.loadTexts: docsDevFilterPolicyEntry.setStatus('current')
docsDevFilterPolicyIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsDevFilterPolicyIndex.setStatus('current')
docsDevFilterPolicyId = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterPolicyId.setStatus('current')
docsDevFilterPolicyStatus = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterPolicyStatus.setStatus('current')
docsDevFilterPolicyPtr = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 5, 1, 6), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterPolicyPtr.setStatus('current')
docsDevFilterTosTable = MibTable((1, 3, 6, 1, 3, 83, 1, 6, 6), )
if mibBuilder.loadTexts: docsDevFilterTosTable.setStatus('current')
docsDevFilterTosEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 6, 6, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterTosIndex"))
if mibBuilder.loadTexts: docsDevFilterTosEntry.setStatus('current')
docsDevFilterTosIndex = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsDevFilterTosIndex.setStatus('current')
docsDevFilterTosStatus = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterTosStatus.setStatus('current')
docsDevFilterTosAndMask = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="ff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterTosAndMask.setStatus('current')
docsDevFilterTosOrMask = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterTosOrMask.setStatus('current')
docsDevFilterIpV6AuxTable = MibTable((1, 3, 6, 1, 3, 83, 1, 6, 7), )
if mibBuilder.loadTexts: docsDevFilterIpV6AuxTable.setStatus('current')
docsDevFilterIpV6AuxEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 6, 7, 1), )
docsDevFilterIpEntry.registerAugmentions(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpV6AuxEntry"))
docsDevFilterIpV6AuxEntry.setIndexNames(*docsDevFilterIpEntry.getIndexNames())
if mibBuilder.loadTexts: docsDevFilterIpV6AuxEntry.setStatus('current')
docsDevFilterIpType = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpType.setStatus('current')
docsDevFilterIpV6Saddr = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 7, 1, 2), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpV6Saddr.setStatus('current')
docsDevFilterIpV6Smask = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 7, 1, 3), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpV6Smask.setStatus('current')
docsDevFilterIpV6Daddr = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 7, 1, 4), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpV6Daddr.setStatus('current')
docsDevFilterIpV6Dmask = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 6, 7, 1, 5), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevFilterIpV6Dmask.setStatus('current')
docsDevCpe = MibIdentifier((1, 3, 6, 1, 3, 83, 1, 7))
docsDevCpeEnroll = MibScalar((1, 3, 6, 1, 3, 83, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("any", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevCpeEnroll.setStatus('current')
docsDevCpeIpMax = MibScalar((1, 3, 6, 1, 3, 83, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevCpeIpMax.setStatus('current')
docsDevCpeTable = MibTable((1, 3, 6, 1, 3, 83, 1, 7, 3), )
if mibBuilder.loadTexts: docsDevCpeTable.setStatus('current')
docsDevCpeEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 7, 3, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeIp"))
if mibBuilder.loadTexts: docsDevCpeEntry.setStatus('current')
docsDevCpeIp = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 7, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: docsDevCpeIp.setStatus('current')
docsDevCpeSource = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("manual", 2), ("learned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevCpeSource.setStatus('current')
docsDevCpeStatus = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 7, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevCpeStatus.setStatus('current')
docsDevCpeV6Table = MibTable((1, 3, 6, 1, 3, 83, 1, 7, 4), )
if mibBuilder.loadTexts: docsDevCpeV6Table.setStatus('current')
docsDevCpeV6Entry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 7, 4, 1), ).setIndexNames((0, "EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeV6Ip"))
if mibBuilder.loadTexts: docsDevCpeV6Entry.setStatus('current')
docsDevCpeV6Ip = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 7, 4, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: docsDevCpeV6Ip.setStatus('current')
docsDevCpeV6Source = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("manual", 2), ("learned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDevCpeV6Source.setStatus('current')
docsDevCpeV6Status = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 7, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevCpeV6Status.setStatus('current')
docsDevVacmAccessExtTable = MibTable((1, 3, 6, 1, 3, 83, 1, 8), )
if mibBuilder.loadTexts: docsDevVacmAccessExtTable.setStatus('current')
docsDevVacmAccessExtEntry = MibTableRow((1, 3, 6, 1, 3, 83, 1, 8, 1), )
vacmAccessEntry.registerAugmentions(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevVacmAccessExtEntry"))
docsDevVacmAccessExtEntry.setIndexNames(*vacmAccessEntry.getIndexNames())
if mibBuilder.loadTexts: docsDevVacmAccessExtEntry.setStatus('current')
docsDevVacmAccessInterfaces = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevVacmAccessInterfaces.setStatus('current')
docsDevVacmAccessInterfaceSet = MibTableColumn((1, 3, 6, 1, 3, 83, 1, 8, 1, 2), InterfaceSet().clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsDevVacmAccessInterfaceSet.setStatus('current')
docsDevNotification = MibIdentifier((1, 3, 6, 1, 3, 83, 2))
docsDevConformanceV2 = MibIdentifier((1, 3, 6, 1, 3, 83, 4))
docsDevGroupsV2 = MibIdentifier((1, 3, 6, 1, 3, 83, 4, 1))
docsDevCompliancesV2 = MibIdentifier((1, 3, 6, 1, 3, 83, 4, 2))
docsDevBasicComplianceV2 = ModuleCompliance((1, 3, 6, 1, 3, 83, 4, 2, 1)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevBaseGroupV2"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEventGroupV2"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterGroupV2"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessGroupV2"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerGroupV2"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSoftwareGroupV2"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeGroupV2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevBasicComplianceV2 = docsDevBasicComplianceV2.setStatus('current')
docsDevBaseGroupV2 = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 1)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevRole"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevDateTime"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevResetNow"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSerialNumber"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSTPControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevBaseGroupV2 = docsDevBaseGroupV2.setStatus('current')
docsDevNmAccessGroupV2 = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 2)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessIp"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessIpMask"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessCommunity"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessControl"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessInterfaces"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevNmAccessStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevNmAccessGroupV2 = docsDevNmAccessGroupV2.setStatus('deprecated')
docsDevSoftwareGroupV2 = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 3)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSwAdminStatus"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSwOperStatus"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSwCurrentVers"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSwServerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevSoftwareGroupV2 = docsDevSoftwareGroupV2.setStatus('current')
docsDevServerGroupV2 = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 4)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerBootState"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerDhcpAddress"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerTimeAddress"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerConfigTftpAddress"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerConfigFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevServerGroupV2 = docsDevServerGroupV2.setStatus('current')
docsDevEventGroupV2 = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 5)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvControl"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvThrottleAdminStatus"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvThrottleInhibited"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvThrottleThreshold"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvThrottleInterval"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvReporting"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvFirstTime"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvLastTime"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvCounts"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvSyslogAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevEventGroupV2 = docsDevEventGroupV2.setStatus('current')
docsDevFilterGroupV2 = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 6)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCUnmatchedAction"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpDefault"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCStatus"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCProtocolType"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCProtocol"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCMatches"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCInterfaces"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCInterfaceSet"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpControl"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpStatus"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpDirection"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpBroadcast"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpSaddr"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpSmask"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpDaddr"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpDmask"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpProtocol"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpSourcePortLow"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpSourcePortHigh"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpDestPortLow"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpDestPortHigh"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpMatches"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpInterfaces"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpInterfaceSet"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpTos"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpTosMask"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpContinue"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpPolicyId"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterPolicyId"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterPolicyStatus"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterPolicyPtr"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterTosStatus"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterTosAndMask"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterTosOrMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevFilterGroupV2 = docsDevFilterGroupV2.setStatus('current')
docsDevCpeGroupV2 = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 7)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeEnroll"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeIpMax"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeSource"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCpeGroupV2 = docsDevCpeGroupV2.setStatus('current')
docsDevDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 8)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterLLCIfIndex"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpIfIndex"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerDhcp"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerTime"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevServerTftp"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevEvSyslog"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevDeprecatedGroup = docsDevDeprecatedGroup.setStatus('deprecated')
docsDevIpV6Group = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 9)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpType"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpV6Saddr"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpV6Smask"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpV6Daddr"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpV6Dmask"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeV6Source"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevCpeV6Status"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevIpV6Group = docsDevIpV6Group.setStatus('current')
docsDevSnmpCoexistGroup = ObjectGroup((1, 3, 6, 1, 3, 83, 4, 1, 10)).setObjects(("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevVacmAccessInterfaces"), ("EXP-DOCS-CABLE-DEVICE-MIB", "docsDevVacmAccessInterfaceSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevSnmpCoexistGroup = docsDevSnmpCoexistGroup.setStatus('current')
mibBuilder.exportSymbols("EXP-DOCS-CABLE-DEVICE-MIB", docsDevNmAccessInterfaces=docsDevNmAccessInterfaces, docsDevFilterTosAndMask=docsDevFilterTosAndMask, docsDevCpeEntry=docsDevCpeEntry, docsDevFilterIpContinue=docsDevFilterIpContinue, docsDevFilterIpDestPortLow=docsDevFilterIpDestPortLow, docsDevNmAccessStatus=docsDevNmAccessStatus, docsDevFilterPolicyIndex=docsDevFilterPolicyIndex, docsDevFilterLLCProtocolType=docsDevFilterLLCProtocolType, docsDevCpeEnroll=docsDevCpeEnroll, docsDevFilterIpInterfaceSet=docsDevFilterIpInterfaceSet, docsDevEvId=docsDevEvId, docsDevFilterIpEntry=docsDevFilterIpEntry, docsDevFilterIpV6Smask=docsDevFilterIpV6Smask, docsDevSwCurrentVers=docsDevSwCurrentVers, docsDevFilterLLCUnmatchedAction=docsDevFilterLLCUnmatchedAction, docsDevFilterLLCInterfaces=docsDevFilterLLCInterfaces, docsDevNmAccessIp=docsDevNmAccessIp, docsDevServer=docsDevServer, docsDevCpeV6Table=docsDevCpeV6Table, docsDevFilterLLCInterfaceSet=docsDevFilterLLCInterfaceSet, docsDevBaseGroupV2=docsDevBaseGroupV2, docsDevEvControlTable=docsDevEvControlTable, docsDevVacmAccessInterfaceSet=docsDevVacmAccessInterfaceSet, docsDevFilterLLCTable=docsDevFilterLLCTable, docsDevServerTftp=docsDevServerTftp, docsDevFilterIpV6AuxTable=docsDevFilterIpV6AuxTable, docsDevEvent=docsDevEvent, docsDevCpeSource=docsDevCpeSource, docsDevBasicComplianceV2=docsDevBasicComplianceV2, docsDevSwAdminStatus=docsDevSwAdminStatus, docsDevFilterLLCIfIndex=docsDevFilterLLCIfIndex, docsDevFilterIpTosMask=docsDevFilterIpTosMask, docsDevFilterIpType=docsDevFilterIpType, docsDevFilterGroupV2=docsDevFilterGroupV2, docsDevCpeV6Source=docsDevCpeV6Source, docsDevEvControlEntry=docsDevEvControlEntry, docsDevVacmAccessInterfaces=docsDevVacmAccessInterfaces, docsDevFilterIpDmask=docsDevFilterIpDmask, docsDevEvThrottleThreshold=docsDevEvThrottleThreshold, docsDevFilterPolicyEntry=docsDevFilterPolicyEntry, docsDevNotification=docsDevNotification, docsDevFilterIpDestPortHigh=docsDevFilterIpDestPortHigh, docsDevFilterIpV6Dmask=docsDevFilterIpV6Dmask, docsDevFilterTosIndex=docsDevFilterTosIndex, docsDevCpe=docsDevCpe, docsDevFilterIpSmask=docsDevFilterIpSmask, docsDevEventEntry=docsDevEventEntry, docsDevFilterLLCStatus=docsDevFilterLLCStatus, docsDevFilterTosStatus=docsDevFilterTosStatus, PYSNMP_MODULE_ID=docsDev, docsDevServerConfigTftpAddress=docsDevServerConfigTftpAddress, docsDevFilterPolicyStatus=docsDevFilterPolicyStatus, docsDevCpeV6Ip=docsDevCpeV6Ip, docsDevFilterIpPolicyId=docsDevFilterIpPolicyId, docsDevFilterLLCIndex=docsDevFilterLLCIndex, docsDevSwServer=docsDevSwServer, docsDevConformanceV2=docsDevConformanceV2, docsDevEvSyslogAddress=docsDevEvSyslogAddress, docsDevFilterTosEntry=docsDevFilterTosEntry, docsDevCpeIp=docsDevCpeIp, docsDevIpV6Group=docsDevIpV6Group, docsDevSoftwareGroupV2=docsDevSoftwareGroupV2, docsDevNmAccessControl=docsDevNmAccessControl, IpV4orV6Address=IpV4orV6Address, docsDevEvPriority=docsDevEvPriority, docsDevSnmpCoexistGroup=docsDevSnmpCoexistGroup, docsDevFilterIpSaddr=docsDevFilterIpSaddr, docsDevFilter=docsDevFilter, docsDevFilterIpInterfaces=docsDevFilterIpInterfaces, docsDevSwOperStatus=docsDevSwOperStatus, docsDevFilterIpSourcePortLow=docsDevFilterIpSourcePortLow, docsDevFilterPolicyTable=docsDevFilterPolicyTable, docsDevDeprecatedGroup=docsDevDeprecatedGroup, docsDevServerGroupV2=docsDevServerGroupV2, docsDevCpeV6Status=docsDevCpeV6Status, docsDevFilterIpTable=docsDevFilterIpTable, docsDevEvLastTime=docsDevEvLastTime, docsDevNmAccessTable=docsDevNmAccessTable, InterfaceSet=InterfaceSet, docsDev=docsDev, docsDevFilterIpV6Daddr=docsDevFilterIpV6Daddr, docsDevEvThrottleInterval=docsDevEvThrottleInterval, docsDevFilterLLCProtocol=docsDevFilterLLCProtocol, docsDevEvFirstTime=docsDevEvFirstTime, docsDevFilterLLCEntry=docsDevFilterLLCEntry, docsDevFilterIpDefault=docsDevFilterIpDefault, docsDevFilterIpTos=docsDevFilterIpTos, docsDevEvThrottleAdminStatus=docsDevEvThrottleAdminStatus, docsDevRole=docsDevRole, docsDevFilterIpDirection=docsDevFilterIpDirection, docsDevFilterLLCMatches=docsDevFilterLLCMatches, docsDevMIBObjects=docsDevMIBObjects, docsDevFilterIpMatches=docsDevFilterIpMatches, docsDevFilterIpControl=docsDevFilterIpControl, docsDevNmAccessIpMask=docsDevNmAccessIpMask, docsDevDateTime=docsDevDateTime, docsDevFilterTosOrMask=docsDevFilterTosOrMask, docsDevSwFilename=docsDevSwFilename, docsDevEvLevel=docsDevEvLevel, docsDevEvThrottleInhibited=docsDevEvThrottleInhibited, docsDevServerTimeAddress=docsDevServerTimeAddress, docsDevCpeV6Entry=docsDevCpeV6Entry, docsDevSerialNumber=docsDevSerialNumber, docsDevFilterIpIfIndex=docsDevFilterIpIfIndex, docsDevFilterPolicyId=docsDevFilterPolicyId, docsDevFilterIpBroadcast=docsDevFilterIpBroadcast, docsDevServerDhcp=docsDevServerDhcp, docsDevNmAccessEntry=docsDevNmAccessEntry, docsDevNmAccessIndex=docsDevNmAccessIndex, docsDevEvIndex=docsDevEvIndex, docsDevGroupsV2=docsDevGroupsV2, docsDevServerTime=docsDevServerTime, docsDevServerDhcpAddress=docsDevServerDhcpAddress, docsDevEvSyslog=docsDevEvSyslog, docsDevCpeStatus=docsDevCpeStatus, docsDevNmAccessGroupV2=docsDevNmAccessGroupV2, docsDevResetNow=docsDevResetNow, docsDevSoftware=docsDevSoftware, docsDevFilterIpV6AuxEntry=docsDevFilterIpV6AuxEntry, docsDevServerBootState=docsDevServerBootState, docsDevCpeTable=docsDevCpeTable, docsDevSTPControl=docsDevSTPControl, docsDevEvReporting=docsDevEvReporting, docsDevFilterIpV6Saddr=docsDevFilterIpV6Saddr, docsDevFilterIpDaddr=docsDevFilterIpDaddr, docsDevFilterIpStatus=docsDevFilterIpStatus, docsDevCpeIpMax=docsDevCpeIpMax, docsDevServerConfigFile=docsDevServerConfigFile, docsDevSwServerAddress=docsDevSwServerAddress, docsDevEvCounts=docsDevEvCounts, docsDevFilterPolicyPtr=docsDevFilterPolicyPtr, docsDevVacmAccessExtTable=docsDevVacmAccessExtTable, docsDevCompliancesV2=docsDevCompliancesV2, docsDevEventTable=docsDevEventTable, docsDevNmAccessCommunity=docsDevNmAccessCommunity, docsDevFilterIpProtocol=docsDevFilterIpProtocol, docsDevFilterTosTable=docsDevFilterTosTable, docsDevEvControl=docsDevEvControl, docsDevBase=docsDevBase, docsDevVacmAccessExtEntry=docsDevVacmAccessExtEntry, docsDevFilterIpSourcePortHigh=docsDevFilterIpSourcePortHigh, docsDevEventGroupV2=docsDevEventGroupV2, docsDevCpeGroupV2=docsDevCpeGroupV2, docsDevEvText=docsDevEvText, docsDevFilterIpIndex=docsDevFilterIpIndex)
