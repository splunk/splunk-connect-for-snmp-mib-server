#
# PySNMP MIB module KERNEL-READER-SUNMANAGEMENTCENTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KERNEL-READER-SUNMANAGEMENTCENTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:54:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, MibIdentifier, Integer32, NotificationType, enterprises, Counter32, ModuleIdentity, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "enterprises", "Counter32", "ModuleIdentity", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Counter64", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
kernelReader = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12))
kernelReader.setRevisions(('1999-07-20 15:05', '1900-09-18 14:35',))
if mibBuilder.loadTexts: kernelReader.setLastUpdated('0009181435Z')
if mibBuilder.loadTexts: kernelReader.setOrganization('Sun Microsystems Inc.')
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
prod = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
sunsymon = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2))
krUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krConsoleUser"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumOfUsers"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumOfSessions"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPrimaryUser"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krUserGroup = krUserGroup.setStatus('current')
krLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSystemLoadAvg1min"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSystemLoadAvg5min"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSystemLoadAvg15min"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSystemUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krLoadGroup = krLoadGroup.setStatus('current')
krDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3))
krFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4))
krCPUDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5))
krMemoryUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotPhyMemAvail"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPhyMemInUse"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPctOfPhyMemInUse"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krFreePhyMem"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPctOfPhyMemFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krMemoryUsageGroup = krMemoryUsageGroup.setStatus('current')
krSwapDetailGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSwapSpaceAvail"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotReservedSwapSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotAllocatedSwapSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotUsedSwapSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSwapSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotPctOfSwapSpaceUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krSwapDetailGroup = krSwapDetailGroup.setStatus('current')
krStreamsDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8))
krIOErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevDevice"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevSoftwareErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevHardwareErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevTransportErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevTotalErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeDevice"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeSoftwareErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeHardwareErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeTransportErrors"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeTotalErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krIOErrorStatsGroup = krIOErrorStatsGroup.setStatus('current')
krKernelMemAllocGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSmallPoolMem"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSmallPoolMemAllocated"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSmallPoolMemFailed"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLargePoolMem"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLargePoolMemAllocated"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLargePoolMemFailed"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krOversizeMem"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krOversizeMemFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krKernelMemAllocGroup = krKernelMemAllocGroup.setStatus('current')
krZoneList = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krZoneId"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krZoneName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStatus"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPath"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIp"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krAutoboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krZoneList = krZoneList.setStatus('current')
krConsoleUser = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krConsoleUser.setStatus('current')
krTotNumOfUsers = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumOfUsers.setStatus('current')
krTotNumOfSessions = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumOfSessions.setStatus('current')
krPrimaryUser = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPrimaryUser.setStatus('current')
krSystemLoadAvg1min = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2, 1), DisplayString()).setUnits('Jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: krSystemLoadAvg1min.setStatus('current')
krSystemLoadAvg5min = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2, 2), DisplayString()).setUnits('Jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: krSystemLoadAvg5min.setStatus('current')
krSystemLoadAvg15min = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2, 3), DisplayString()).setUnits('Jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: krSystemLoadAvg15min.setStatus('current')
krSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSystemUpTime.setStatus('current')
krDiskDetailGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDDDiskName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskAliasName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskReadOpRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskWriteOpRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskOperationRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskDataReadRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskDataWriteRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskDataTransferRate"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskAvgWaitTrans"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskAvgRunTrans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krDiskDetailGroup = krDiskDetailGroup.setStatus('current')
krDiskSrvcTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDSDiskName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskSrvcWaitPctTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskBusyPctTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskSrvcAvgWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskSrvcAvgTransRunTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDiskSrvcAvgTransTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krDiskSrvcTimeGroup = krDiskSrvcTimeGroup.setStatus('current')
krDiskDetailTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1), )
if mibBuilder.loadTexts: krDiskDetailTable.setStatus('current')
krDiskDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDDDiskName"))
if mibBuilder.loadTexts: krDiskDetailEntry.setStatus('current')
krDDDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDDDiskName.setStatus('current')
krDiskAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskAliasName.setStatus('current')
krDiskReadOpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 3), DisplayString()).setUnits('op/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskReadOpRate.setStatus('current')
krDiskWriteOpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 4), DisplayString()).setUnits('op/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskWriteOpRate.setStatus('current')
krDiskOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 5), DisplayString()).setUnits('op/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskOperationRate.setStatus('current')
krDiskDataReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 6), DisplayString()).setUnits('KB/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskDataReadRate.setStatus('current')
krDiskDataWriteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 7), DisplayString()).setUnits('KB/secops').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskDataWriteRate.setStatus('current')
krDiskDataTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 8), DisplayString()).setUnits('KB/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskDataTransferRate.setStatus('current')
krDiskAvgWaitTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskAvgWaitTrans.setStatus('current')
krDiskAvgRunTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskAvgRunTrans.setStatus('current')
krDiskSrvTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1), )
if mibBuilder.loadTexts: krDiskSrvTable.setStatus('current')
krDiskSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDSDiskName"))
if mibBuilder.loadTexts: krDiskSrvEntry.setStatus('current')
krDSDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDSDiskName.setStatus('current')
krDiskSrvcWaitPctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 2), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskSrvcWaitPctTime.setStatus('current')
krDiskBusyPctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 3), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskBusyPctTime.setStatus('current')
krDiskSrvcAvgWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 4), DisplayString()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskSrvcAvgWaitTime.setStatus('current')
krDiskSrvcAvgTransRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 5), DisplayString()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskSrvcAvgTransRunTime.setStatus('current')
krDiskSrvcAvgTransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 3, 2, 1, 1, 6), DisplayString()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: krDiskSrvcAvgTransTime.setStatus('current')
krUFSFileSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemIndex"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemMountPoint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemDiskName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemFreeSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFreeSpaceForNonSU"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemPctUsedSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSTotNumOfInodes"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSTotNumOfInodesAvail"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSPctInodesUsed"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemSize64"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemFreeSpace64"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFreeSpaceForNonSU64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krUFSFileSystemGroup = krUFSFileSystemGroup.setStatus('current')
krVXFSFileSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemIndex"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemMountPoint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemDiskName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemFreeSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFreeSpaceForNonSU"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemPctUsedSpace"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSTotNumOfInodes"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSTotNumOfInodesAvail"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSPctInodesUsed"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemSize64"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemFreeSpace64"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFreeSpaceForNonSU64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krVXFSFileSystemGroup = krVXFSFileSystemGroup.setStatus('current')
krUFSFileTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1), )
if mibBuilder.loadTexts: krUFSFileTable.setStatus('current')
krUFSFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krUFSFileSystemIndex"))
if mibBuilder.loadTexts: krUFSFileEntry.setStatus('current')
krUFSFileSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemIndex.setStatus('current')
krUFSFileSystemMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemMountPoint.setStatus('current')
krUFSFileSystemDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemDiskName.setStatus('current')
krUFSFileSystemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 4), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemSize.setStatus('current')
krUFSFileSystemFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 5), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemFreeSpace.setStatus('current')
krUFSFreeSpaceForNonSU = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 6), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFreeSpaceForNonSU.setStatus('current')
krUFSFileSystemPctUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 7), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemPctUsedSpace.setStatus('current')
krUFSTotNumOfInodes = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 8), Integer32()).setUnits('inodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSTotNumOfInodes.setStatus('current')
krUFSTotNumOfInodesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 9), Integer32()).setUnits('inodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSTotNumOfInodesAvail.setStatus('current')
krUFSPctInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 10), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSPctInodesUsed.setStatus('current')
krUFSFileSystemSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 11), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemSize64.setStatus('current')
krUFSFileSystemFreeSpace64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 12), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFileSystemFreeSpace64.setStatus('current')
krUFSFreeSpaceForNonSU64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 1, 1, 1, 13), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krUFSFreeSpaceForNonSU64.setStatus('current')
krVXFSFileTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1), )
if mibBuilder.loadTexts: krVXFSFileTable.setStatus('current')
krVXFSFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krVXFSFileSystemIndex"))
if mibBuilder.loadTexts: krVXFSFileEntry.setStatus('current')
krVXFSFileSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemIndex.setStatus('current')
krVXFSFileSystemMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemMountPoint.setStatus('current')
krVXFSFileSystemDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemDiskName.setStatus('current')
krVXFSFileSystemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 4), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemSize.setStatus('current')
krVXFSFileSystemFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 5), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemFreeSpace.setStatus('current')
krVXFSFreeSpaceForNonSU = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 6), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFreeSpaceForNonSU.setStatus('current')
krVXFSFileSystemPctUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 7), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemPctUsedSpace.setStatus('current')
krVXFSTotNumOfInodes = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 8), Integer32()).setUnits('inodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSTotNumOfInodes.setStatus('current')
krVXFSTotNumOfInodesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 9), Integer32()).setUnits('inodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSTotNumOfInodesAvail.setStatus('current')
krVXFSPctInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 10), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSPctInodesUsed.setStatus('current')
krVXFSFileSystemSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 11), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemSize64.setStatus('current')
krVXFSFileSystemFreeSpace64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 12), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFileSystemFreeSpace64.setStatus('current')
krVXFSFreeSpaceForNonSU64 = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 4, 2, 1, 1, 13), Counter64()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krVXFSFreeSpaceForNonSU64.setStatus('current')
krCPUUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUDelta"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUIdleTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUUserModeTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUKernelModeTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUTotWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUTotIOWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUTotSwapWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUTotPIOWaitTime"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUNumOfIdleThreadSched"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUUtilGroup = krCPUUtilGroup.setStatus('current')
krCPUProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2))
krCPUIOGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIOCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumPhyBlocksRead"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumPhyBlocksWrite"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumLogBlocksRead"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumLogBlocksWrite"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumRawIOReads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumRawIOWrites"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumBytesRead"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumBytesWritten"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krrcvint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krxmtint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krmdmint"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumTermInputChars"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumCanModeCharsHandled"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumTermOutChars"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumPhyBlocksAsyncWrite"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krphysio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUIOGroup = krCPUIOGroup.setStatus('current')
krCPUInterruptsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIntrCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfContextSwitches"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumberOfTraps"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumberOfDevInterrupts"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfIntrThreads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfInterrupts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUInterruptsGroup = krCPUInterruptsGroup.setStatus('current')
krCPUSyscallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyscCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSysCallsMade"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSysReads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSysWrites"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfForksCalled"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfVForksCalled"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfExecsCalled"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumOfMessages"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumOfSemops"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPnameLookup"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfUfsigetcalls"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfDirBlocksRead"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfInodesTakenWAP"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfInodesTakenWNAP"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfInodeTblOvrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfFileTblOvrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfProcTblOvrFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUSyscallGroup = krCPUSyscallGroup.setStatus('current')
krCPUMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krMiscCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfIvolCSwitches"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfThrCreateCalls"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfCPUMig"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfxcalls"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfFldMutxEntrs"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRWReaderFails"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRWWriterFails"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfModuleLoads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfModuleUnloads"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRWLockTry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUMiscGroup = krCPUMiscGroup.setStatus('current')
krCPURegWindowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krRWCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinUsrOvrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinUsrUndrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinSysOvrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinSysUndrFlow"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfRegWinSysUsrOvrFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPURegWindowGroup = krCPURegWindowGroup.setStatus('current')
krCPUPginfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPgCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPageReclaims"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfFreeListPgReclaims"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPageIns"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPgsPagedIn"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPageOuts"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krkrNumOfPgsPagedOut"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSwapIns"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPgsSwappedIn"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSwapOuts"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPgsSwappedOut"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfZeroFilledPages"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfAutoFreedPages"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumberOfScanedPages"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPDHandsRvln"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfPagerRun"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUPginfoGroup = krCPUPginfoGroup.setStatus('current')
krCPUFaultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krFaultCPUInstance"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfMinorHatPageFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfMinorAsPageFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfMajorPageFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfCopyOnWriteFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfProtectionFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfSWLockFaults"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krNumOfAsFaultsInKSpace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUFaultsGroup = krCPUFaultsGroup.setStatus('current')
krOverAllCPUStatistics = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 10)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krOverAllCpuStatsUtil"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krOverAllCpuStatsIdle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krOverAllCPUStatistics = krOverAllCPUStatistics.setStatus('current')
krCPUUtilTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1), )
if mibBuilder.loadTexts: krCPUUtilTable.setStatus('current')
krCPUUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krCPUInstance"))
if mibBuilder.loadTexts: krCPUUtilEntry.setStatus('current')
krCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUInstance.setStatus('current')
krCPUDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUDelta.setStatus('current')
krCPUIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUIdleTime.setStatus('current')
krCPUUserModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUUserModeTime.setStatus('current')
krCPUKernelModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUKernelModeTime.setStatus('current')
krCPUTotWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUTotWaitTime.setStatus('current')
krCPUTotIOWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUTotIOWaitTime.setStatus('current')
krCPUTotSwapWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUTotSwapWaitTime.setStatus('current')
krCPUTotPIOWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUTotPIOWaitTime.setStatus('current')
krCPUNumOfIdleThreadSched = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krCPUNumOfIdleThreadSched.setStatus('current')
krCPUProcInStatesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotProcInRunQueue"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotProcBlocked"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotProcReadyInSwap"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotNumberOfCPUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krCPUProcInStatesGroup = krCPUProcInStatesGroup.setStatus('current')
krTotProcInRunQueue = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotProcInRunQueue.setStatus('current')
krTotProcBlocked = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotProcBlocked.setStatus('current')
krTotProcReadyInSwap = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotProcReadyInSwap.setStatus('current')
krTotNumberOfCPUs = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumberOfCPUs.setStatus('current')
krCPUIOTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1), )
if mibBuilder.loadTexts: krCPUIOTable.setStatus('current')
krCPUIOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIOCPUInstance"))
if mibBuilder.loadTexts: krCPUIOEntry.setStatus('current')
krIOCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krIOCPUInstance.setStatus('current')
krNumPhyBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumPhyBlocksRead.setStatus('current')
krNumPhyBlocksWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumPhyBlocksWrite.setStatus('current')
krNumLogBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumLogBlocksRead.setStatus('current')
krNumLogBlocksWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumLogBlocksWrite.setStatus('current')
krNumRawIOReads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumRawIOReads.setStatus('current')
krNumRawIOWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumRawIOWrites.setStatus('current')
krNumBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumBytesRead.setStatus('current')
krNumBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumBytesWritten.setStatus('current')
krrcvint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krrcvint.setStatus('current')
krxmtint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krxmtint.setStatus('current')
krmdmint = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krmdmint.setStatus('current')
krNumTermInputChars = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumTermInputChars.setStatus('current')
krNumCanModeCharsHandled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumCanModeCharsHandled.setStatus('current')
krNumTermOutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumTermOutChars.setStatus('current')
krNumPhyBlocksAsyncWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumPhyBlocksAsyncWrite.setStatus('current')
krphysio = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krphysio.setStatus('current')
krCPUIntrTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1), )
if mibBuilder.loadTexts: krCPUIntrTable.setStatus('current')
krCPUIntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krIntrCPUInstance"))
if mibBuilder.loadTexts: krCPUIntrEntry.setStatus('current')
krIntrCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krIntrCPUInstance.setStatus('current')
krNumOfContextSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfContextSwitches.setStatus('current')
krNumberOfTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumberOfTraps.setStatus('current')
krNumberOfDevInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumberOfDevInterrupts.setStatus('current')
krNumOfIntrThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfIntrThreads.setStatus('current')
krNumOfInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfInterrupts.setStatus('current')
krCPUSysTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1), )
if mibBuilder.loadTexts: krCPUSysTable.setStatus('current')
krCPUSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyscCPUInstance"))
if mibBuilder.loadTexts: krCPUSysEntry.setStatus('current')
krSyscCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyscCPUInstance.setStatus('current')
krNumOfSysCallsMade = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSysCallsMade.setStatus('current')
krNumOfSysReads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSysReads.setStatus('current')
krNumOfSysWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSysWrites.setStatus('current')
krNumOfForksCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfForksCalled.setStatus('current')
krNumOfVForksCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfVForksCalled.setStatus('current')
krNumOfExecsCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfExecsCalled.setStatus('current')
krTotNumOfMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumOfMessages.setStatus('current')
krTotNumOfSemops = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotNumOfSemops.setStatus('current')
krNumOfPnameLookup = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPnameLookup.setStatus('current')
krNumOfUfsigetcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfUfsigetcalls.setStatus('current')
krNumOfDirBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfDirBlocksRead.setStatus('current')
krNumOfInodesTakenWAP = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfInodesTakenWAP.setStatus('current')
krNumOfInodesTakenWNAP = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfInodesTakenWNAP.setStatus('current')
krNumOfInodeTblOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfInodeTblOvrFlow.setStatus('current')
krNumOfFileTblOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfFileTblOvrFlow.setStatus('current')
krNumOfProcTblOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 5, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfProcTblOvrFlow.setStatus('current')
krCPUMiscTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1), )
if mibBuilder.loadTexts: krCPUMiscTable.setStatus('current')
krCPUMiscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krMiscCPUInstance"))
if mibBuilder.loadTexts: krCPUMiscEntry.setStatus('current')
krMiscCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krMiscCPUInstance.setStatus('current')
krNumOfIvolCSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfIvolCSwitches.setStatus('current')
krNumOfThrCreateCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfThrCreateCalls.setStatus('current')
krNumOfCPUMig = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfCPUMig.setStatus('current')
krNumOfxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfxcalls.setStatus('current')
krNumOfFldMutxEntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfFldMutxEntrs.setStatus('current')
krNumOfRWReaderFails = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRWReaderFails.setStatus('current')
krNumOfRWWriterFails = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRWWriterFails.setStatus('current')
krNumOfModuleLoads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfModuleLoads.setStatus('current')
krNumOfModuleUnloads = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfModuleUnloads.setStatus('current')
krNumOfRWLockTry = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 6, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRWLockTry.setStatus('current')
krCPURegTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1), )
if mibBuilder.loadTexts: krCPURegTable.setStatus('current')
krCPURegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krRWCPUInstance"))
if mibBuilder.loadTexts: krCPURegEntry.setStatus('current')
krRWCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krRWCPUInstance.setStatus('current')
krNumOfRegWinUsrOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinUsrOvrFlow.setStatus('current')
krNumOfRegWinUsrUndrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinUsrUndrFlow.setStatus('current')
krNumOfRegWinSysOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinSysOvrFlow.setStatus('current')
krNumOfRegWinSysUndrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinSysUndrFlow.setStatus('current')
krNumOfRegWinSysUsrOvrFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 7, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfRegWinSysUsrOvrFlow.setStatus('current')
krCPUPgTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1), )
if mibBuilder.loadTexts: krCPUPgTable.setStatus('current')
krCPUPgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krPgCPUInstance"))
if mibBuilder.loadTexts: krCPUPgEntry.setStatus('current')
krPgCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPgCPUInstance.setStatus('current')
krNumOfPageReclaims = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPageReclaims.setStatus('current')
krNumOfFreeListPgReclaims = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfFreeListPgReclaims.setStatus('current')
krNumOfPageIns = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPageIns.setStatus('current')
krNumOfPgsPagedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPgsPagedIn.setStatus('current')
krNumOfPageOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPageOuts.setStatus('current')
krkrNumOfPgsPagedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krkrNumOfPgsPagedOut.setStatus('current')
krNumOfSwapIns = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSwapIns.setStatus('current')
krNumOfPgsSwappedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPgsSwappedIn.setStatus('current')
krNumOfSwapOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSwapOuts.setStatus('current')
krNumOfPgsSwappedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPgsSwappedOut.setStatus('current')
krNumOfZeroFilledPages = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfZeroFilledPages.setStatus('current')
krNumOfAutoFreedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfAutoFreedPages.setStatus('current')
krNumberOfScanedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumberOfScanedPages.setStatus('current')
krNumOfPDHandsRvln = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPDHandsRvln.setStatus('current')
krNumOfPagerRun = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 8, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfPagerRun.setStatus('current')
krCPUFaultTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1), )
if mibBuilder.loadTexts: krCPUFaultTable.setStatus('current')
krCPUFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krFaultCPUInstance"))
if mibBuilder.loadTexts: krCPUFaultEntry.setStatus('current')
krFaultCPUInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: krFaultCPUInstance.setStatus('current')
krNumOfMinorHatPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfMinorHatPageFaults.setStatus('current')
krNumOfMinorAsPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfMinorAsPageFaults.setStatus('current')
krNumOfMajorPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfMajorPageFaults.setStatus('current')
krNumOfCopyOnWriteFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfCopyOnWriteFaults.setStatus('current')
krNumOfProtectionFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfProtectionFaults.setStatus('current')
krNumOfSWLockFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfSWLockFaults.setStatus('current')
krNumOfAsFaultsInKSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 9, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krNumOfAsFaultsInKSpace.setStatus('current')
krOverAllCpuStatsUtil = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 10, 1), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krOverAllCpuStatsUtil.setStatus('current')
krOverAllCpuStatsIdle = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 5, 10, 2), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krOverAllCpuStatsIdle.setStatus('current')
krTotPhyMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 1), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotPhyMemAvail.setStatus('current')
krPhyMemInUse = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 2), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krPhyMemInUse.setStatus('current')
krPctOfPhyMemInUse = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPctOfPhyMemInUse.setStatus('current')
krFreePhyMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 4), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: krFreePhyMem.setStatus('current')
krPctOfPhyMemFree = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPctOfPhyMemFree.setStatus('current')
krTotSwapSpaceAvail = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 1), Integer32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSwapSpaceAvail.setStatus('current')
krTotReservedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 2), Integer32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotReservedSwapSpace.setStatus('current')
krTotAllocatedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 3), Integer32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotAllocatedSwapSpace.setStatus('current')
krTotUsedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 4), Unsigned32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotUsedSwapSpace.setStatus('current')
krTotSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 5), Integer32()).setUnits('Kilo Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSwapSpace.setStatus('current')
krTotPctOfSwapSpaceUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 7, 6), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotPctOfSwapSpaceUsed.setStatus('current')
krStreamHeadCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrHeadCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrHeadCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrHeadCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSHCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSHAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrHeadCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krStreamHeadCacheGroup = krStreamHeadCacheGroup.setStatus('current')
krQueueCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQueueCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQueueCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQueueCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotQCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotQAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQueueCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krQueueCacheGroup = krQueueCacheGroup.setStatus('current')
krStreamsMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrMsgCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrMsgCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrMsgCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSMCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSMAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrMsgCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krStreamsMsgGroup = krStreamsMsgGroup.setStatus('current')
krLinkinfoCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLinkinfoCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLinkinfoCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLinkinfoCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotLICacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotLIAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krLinkinfoCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krLinkinfoCacheGroup = krLinkinfoCacheGroup.setStatus('current')
krStreventCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrEventCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrEventCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrEventCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSECacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSEAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krStrEventCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krStreventCacheGroup = krStreventCacheGroup.setStatus('current')
krSyncqCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyncCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyncCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyncCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSyCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotSyAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krSyncCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krSyncqCacheGroup = krSyncqCacheGroup.setStatus('current')
krQbandCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7)).setObjects(("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQbandCacheName"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQbandCacheCurrUsage"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQbandCacheSize"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotQBCacheAllocation"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTotQBAllocFailures"), ("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krQbandCachePctUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    krQbandCacheGroup = krQbandCacheGroup.setStatus('current')
krStrHeadCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrHeadCacheName.setStatus('current')
krStrHeadCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrHeadCacheCurrUsage.setStatus('current')
krStrHeadCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrHeadCacheSize.setStatus('current')
krTotSHCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSHCacheAllocation.setStatus('current')
krTotSHAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSHAllocFailures.setStatus('current')
krStrHeadCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrHeadCachePctUsed.setStatus('current')
krQueueCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQueueCacheName.setStatus('current')
krQueueCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQueueCacheCurrUsage.setStatus('current')
krQueueCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQueueCacheSize.setStatus('current')
krTotQCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotQCacheAllocation.setStatus('current')
krTotQAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotQAllocFailures.setStatus('current')
krQueueCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQueueCachePctUsed.setStatus('current')
krStrMsgCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrMsgCacheName.setStatus('current')
krStrMsgCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrMsgCacheCurrUsage.setStatus('current')
krStrMsgCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrMsgCacheSize.setStatus('current')
krTotSMCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSMCacheAllocation.setStatus('current')
krTotSMAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSMAllocFailures.setStatus('current')
krStrMsgCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrMsgCachePctUsed.setStatus('current')
krLinkinfoCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLinkinfoCacheName.setStatus('current')
krLinkinfoCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLinkinfoCacheCurrUsage.setStatus('current')
krLinkinfoCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLinkinfoCacheSize.setStatus('current')
krTotLICacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotLICacheAllocation.setStatus('current')
krTotLIAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotLIAllocFailures.setStatus('current')
krLinkinfoCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLinkinfoCachePctUsed.setStatus('current')
krStrEventCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrEventCacheName.setStatus('current')
krStrEventCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrEventCacheCurrUsage.setStatus('current')
krStrEventCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrEventCacheSize.setStatus('current')
krTotSECacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSECacheAllocation.setStatus('current')
krTotSEAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSEAllocFailures.setStatus('current')
krStrEventCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStrEventCachePctUsed.setStatus('current')
krSyncCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyncCacheName.setStatus('current')
krSyncCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyncCacheCurrUsage.setStatus('current')
krSyncCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyncCacheSize.setStatus('current')
krTotSyCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSyCacheAllocation.setStatus('current')
krTotSyAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotSyAllocFailures.setStatus('current')
krSyncCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 6, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSyncCachePctUsed.setStatus('current')
krQbandCacheName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQbandCacheName.setStatus('current')
krQbandCacheCurrUsage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQbandCacheCurrUsage.setStatus('current')
krQbandCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQbandCacheSize.setStatus('current')
krTotQBCacheAllocation = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotQBCacheAllocation.setStatus('current')
krTotQBAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTotQBAllocFailures.setStatus('current')
krQbandCachePctUsed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 8, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krQbandCachePctUsed.setStatus('current')
krDeviceErrorTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1), )
if mibBuilder.loadTexts: krDeviceErrorTable.setStatus('current')
krDeviceErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krDevDevice"))
if mibBuilder.loadTexts: krDeviceErrorEntry.setStatus('current')
krDevDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevDevice.setStatus('current')
krDevSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevSoftwareErrors.setStatus('current')
krDevHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevHardwareErrors.setStatus('current')
krDevTransportErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevTransportErrors.setStatus('current')
krDevTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krDevTotalErrors.setStatus('current')
krTapeErrorTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2), )
if mibBuilder.loadTexts: krTapeErrorTable.setStatus('current')
krTapeErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krTapeDevice"))
if mibBuilder.loadTexts: krTapeErrorEntry.setStatus('current')
krTapeDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeDevice.setStatus('current')
krTapeSoftwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeSoftwareErrors.setStatus('current')
krTapeHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeHardwareErrors.setStatus('current')
krTapeTransportErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeTransportErrors.setStatus('current')
krTapeTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krTapeTotalErrors.setStatus('current')
krSmallPoolMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSmallPoolMem.setStatus('current')
krSmallPoolMemAllocated = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSmallPoolMemAllocated.setStatus('current')
krSmallPoolMemFailed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krSmallPoolMemFailed.setStatus('current')
krLargePoolMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLargePoolMem.setStatus('current')
krLargePoolMemAllocated = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLargePoolMemAllocated.setStatus('current')
krLargePoolMemFailed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krLargePoolMemFailed.setStatus('current')
krOversizeMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krOversizeMem.setStatus('current')
krOversizeMemFailed = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krOversizeMemFailed.setStatus('current')
krZoneListTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1), )
if mibBuilder.loadTexts: krZoneListTable.setStatus('current')
krZoneListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1), ).setIndexNames((0, "KERNEL-READER-SUNMANAGEMENTCENTER-MIB", "krZoneName"))
if mibBuilder.loadTexts: krZoneListEntry.setStatus('current')
krZoneId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krZoneId.setStatus('current')
krZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krZoneName.setStatus('current')
krStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krStatus.setStatus('current')
krPath = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krPath.setStatus('current')
krIp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krIp.setStatus('current')
krAutoboot = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 12, 14, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: krAutoboot.setStatus('current')
mibBuilder.exportSymbols("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", krQueueCacheCurrUsage=krQueueCacheCurrUsage, krTotNumberOfCPUs=krTotNumberOfCPUs, krNumLogBlocksWrite=krNumLogBlocksWrite, krCPUIdleTime=krCPUIdleTime, krVXFSFileSystemFreeSpace=krVXFSFileSystemFreeSpace, krStrHeadCacheName=krStrHeadCacheName, sun=sun, krNumOfUfsigetcalls=krNumOfUfsigetcalls, krCPUSysEntry=krCPUSysEntry, krZoneList=krZoneList, krUFSFileSystemPctUsedSpace=krUFSFileSystemPctUsedSpace, krNumOfSysWrites=krNumOfSysWrites, krNumOfRegWinUsrOvrFlow=krNumOfRegWinUsrOvrFlow, krOverAllCpuStatsIdle=krOverAllCpuStatsIdle, krNumOfRegWinSysUndrFlow=krNumOfRegWinSysUndrFlow, krTotSyCacheAllocation=krTotSyCacheAllocation, krxmtint=krxmtint, krZoneId=krZoneId, krCPUUserModeTime=krCPUUserModeTime, krNumOfMinorHatPageFaults=krNumOfMinorHatPageFaults, krNumOfPnameLookup=krNumOfPnameLookup, krDiskDetailEntry=krDiskDetailEntry, krDiskDetailGroup=krDiskDetailGroup, krNumOfInterrupts=krNumOfInterrupts, krNumOfDirBlocksRead=krNumOfDirBlocksRead, krCPUPgTable=krCPUPgTable, krLinkinfoCacheName=krLinkinfoCacheName, krDiskSrvcAvgWaitTime=krDiskSrvcAvgWaitTime, krCPUMiscTable=krCPUMiscTable, krStrEventCacheCurrUsage=krStrEventCacheCurrUsage, krTotSEAllocFailures=krTotSEAllocFailures, krZoneName=krZoneName, krCPUMiscEntry=krCPUMiscEntry, krNumOfAsFaultsInKSpace=krNumOfAsFaultsInKSpace, krVXFSFreeSpaceForNonSU=krVXFSFreeSpaceForNonSU, krIOErrorStatsGroup=krIOErrorStatsGroup, krCPUPginfoGroup=krCPUPginfoGroup, krVXFSFileSystemMountPoint=krVXFSFileSystemMountPoint, krNumOfThrCreateCalls=krNumOfThrCreateCalls, krTotNumOfSessions=krTotNumOfSessions, krMiscCPUInstance=krMiscCPUInstance, krDiskAvgRunTrans=krDiskAvgRunTrans, krCPUIOTable=krCPUIOTable, krNumberOfScanedPages=krNumberOfScanedPages, krNumOfPDHandsRvln=krNumOfPDHandsRvln, krUFSFileSystemDiskName=krUFSFileSystemDiskName, krDiskSrvcAvgTransTime=krDiskSrvcAvgTransTime, krTotReservedSwapSpace=krTotReservedSwapSpace, krSyncCacheCurrUsage=krSyncCacheCurrUsage, krVXFSFileTable=krVXFSFileTable, krPctOfPhyMemFree=krPctOfPhyMemFree, krNumOfFileTblOvrFlow=krNumOfFileTblOvrFlow, krDiskDetailTable=krDiskDetailTable, krUFSFileSystemFreeSpace=krUFSFileSystemFreeSpace, krQbandCacheCurrUsage=krQbandCacheCurrUsage, krVXFSFileSystemSize64=krVXFSFileSystemSize64, krDiskSrvcWaitPctTime=krDiskSrvcWaitPctTime, krUFSFileSystemGroup=krUFSFileSystemGroup, krNumCanModeCharsHandled=krNumCanModeCharsHandled, krFaultCPUInstance=krFaultCPUInstance, krNumPhyBlocksWrite=krNumPhyBlocksWrite, krDiskWriteOpRate=krDiskWriteOpRate, krTapeTransportErrors=krTapeTransportErrors, krNumOfContextSwitches=krNumOfContextSwitches, krNumOfExecsCalled=krNumOfExecsCalled, krCPUProcess=krCPUProcess, krNumOfMajorPageFaults=krNumOfMajorPageFaults, krTotQCacheAllocation=krTotQCacheAllocation, prod=prod, krStrEventCacheName=krStrEventCacheName, krTotSECacheAllocation=krTotSECacheAllocation, krLargePoolMemAllocated=krLargePoolMemAllocated, krNumOfModuleUnloads=krNumOfModuleUnloads, krDiskAliasName=krDiskAliasName, krPrimaryUser=krPrimaryUser, krDiskSrvcTimeGroup=krDiskSrvcTimeGroup, sunsymon=sunsymon, krNumOfPageOuts=krNumOfPageOuts, krVXFSFileEntry=krVXFSFileEntry, krCPUInstance=krCPUInstance, krNumPhyBlocksAsyncWrite=krNumPhyBlocksAsyncWrite, krNumOfRWWriterFails=krNumOfRWWriterFails, krNumOfRWLockTry=krNumOfRWLockTry, krNumOfAutoFreedPages=krNumOfAutoFreedPages, krStreamsMsgGroup=krStreamsMsgGroup, krNumberOfTraps=krNumberOfTraps, krDiskDataReadRate=krDiskDataReadRate, krphysio=krphysio, krQueueCacheSize=krQueueCacheSize, krZoneListEntry=krZoneListEntry, krKernelMemAllocGroup=krKernelMemAllocGroup, krCPUIntrTable=krCPUIntrTable, krUFSFileTable=krUFSFileTable, krVXFSFileSystemSize=krVXFSFileSystemSize, krCPUIOEntry=krCPUIOEntry, krTotAllocatedSwapSpace=krTotAllocatedSwapSpace, krNumOfIvolCSwitches=krNumOfIvolCSwitches, krNumOfInodesTakenWAP=krNumOfInodesTakenWAP, krUFSFileSystemMountPoint=krUFSFileSystemMountPoint, krUFSPctInodesUsed=krUFSPctInodesUsed, krPhyMemInUse=krPhyMemInUse, krStreamsDetail=krStreamsDetail, krStreventCacheGroup=krStreventCacheGroup, krIp=krIp, krVXFSFileSystemDiskName=krVXFSFileSystemDiskName, krCPUTotSwapWaitTime=krCPUTotSwapWaitTime, modules=modules, krCPUIOGroup=krCPUIOGroup, krTotProcReadyInSwap=krTotProcReadyInSwap, krStrHeadCacheSize=krStrHeadCacheSize, krNumOfPageReclaims=krNumOfPageReclaims, krVXFSFileSystemGroup=krVXFSFileSystemGroup, krTapeDevice=krTapeDevice, krSmallPoolMemFailed=krSmallPoolMemFailed, krCPUPgEntry=krCPUPgEntry, krNumOfInodesTakenWNAP=krNumOfInodesTakenWNAP, agent=agent, krFileSystem=krFileSystem, krDiskBusyPctTime=krDiskBusyPctTime, krStrHeadCachePctUsed=krStrHeadCachePctUsed, krTotQBAllocFailures=krTotQBAllocFailures, krDevDevice=krDevDevice, krTapeErrorTable=krTapeErrorTable, krSystemLoadAvg5min=krSystemLoadAvg5min, krNumTermInputChars=krNumTermInputChars, krVXFSFileSystemPctUsedSpace=krVXFSFileSystemPctUsedSpace, krTotSMAllocFailures=krTotSMAllocFailures, krTapeHardwareErrors=krTapeHardwareErrors, krQueueCacheGroup=krQueueCacheGroup, krQbandCacheName=krQbandCacheName, krTotQBCacheAllocation=krTotQBCacheAllocation, krLargePoolMemFailed=krLargePoolMemFailed, krDiskReadOpRate=krDiskReadOpRate, krCPUUtilGroup=krCPUUtilGroup, krTotSHAllocFailures=krTotSHAllocFailures, krOversizeMem=krOversizeMem, krTotPhyMemAvail=krTotPhyMemAvail, krSyscCPUInstance=krSyscCPUInstance, krDiskSrvcAvgTransRunTime=krDiskSrvcAvgTransRunTime, krDevHardwareErrors=krDevHardwareErrors, krLinkinfoCacheCurrUsage=krLinkinfoCacheCurrUsage, krVXFSFileSystemIndex=krVXFSFileSystemIndex, krDeviceErrorTable=krDeviceErrorTable, krIOCPUInstance=krIOCPUInstance, krNumOfFldMutxEntrs=krNumOfFldMutxEntrs, krUFSFileSystemSize=krUFSFileSystemSize, krCPUUtilTable=krCPUUtilTable, krCPUIntrEntry=krCPUIntrEntry, krIntrCPUInstance=krIntrCPUInstance, krTotLICacheAllocation=krTotLICacheAllocation, krStrHeadCacheCurrUsage=krStrHeadCacheCurrUsage, krCPUTotIOWaitTime=krCPUTotIOWaitTime, krCPUMiscGroup=krCPUMiscGroup, krStreamHeadCacheGroup=krStreamHeadCacheGroup, krNumBytesRead=krNumBytesRead, krTotSwapSpaceAvail=krTotSwapSpaceAvail, krNumLogBlocksRead=krNumLogBlocksRead, krSyncCacheName=krSyncCacheName, krmdmint=krmdmint, krStrMsgCachePctUsed=krStrMsgCachePctUsed, krDevTransportErrors=krDevTransportErrors, krStatus=krStatus, krSmallPoolMemAllocated=krSmallPoolMemAllocated, krTotProcBlocked=krTotProcBlocked, krQbandCacheGroup=krQbandCacheGroup, krTotPctOfSwapSpaceUsed=krTotPctOfSwapSpaceUsed, krUFSFreeSpaceForNonSU=krUFSFreeSpaceForNonSU, krNumRawIOReads=krNumRawIOReads, krNumOfRegWinSysUsrOvrFlow=krNumOfRegWinSysUsrOvrFlow, krNumOfIntrThreads=krNumOfIntrThreads, krNumBytesWritten=krNumBytesWritten, krOverAllCPUStatistics=krOverAllCPUStatistics, krNumOfForksCalled=krNumOfForksCalled, krTapeTotalErrors=krTapeTotalErrors, krDeviceErrorEntry=krDeviceErrorEntry, krNumOfPageIns=krNumOfPageIns, krCPUTotWaitTime=krCPUTotWaitTime, krTotSMCacheAllocation=krTotSMCacheAllocation, krTapeErrorEntry=krTapeErrorEntry, krrcvint=krrcvint, krDisk=krDisk, krNumOfFreeListPgReclaims=krNumOfFreeListPgReclaims, krNumOfSwapIns=krNumOfSwapIns, krOverAllCpuStatsUtil=krOverAllCpuStatsUtil, krSystemLoadAvg1min=krSystemLoadAvg1min, krSystemLoadAvg15min=krSystemLoadAvg15min, kernelReader=kernelReader, krNumOfSWLockFaults=krNumOfSWLockFaults, krNumberOfDevInterrupts=krNumberOfDevInterrupts, krQbandCachePctUsed=krQbandCachePctUsed, krNumOfRegWinUsrUndrFlow=krNumOfRegWinUsrUndrFlow, krNumOfPgsSwappedOut=krNumOfPgsSwappedOut, krTapeSoftwareErrors=krTapeSoftwareErrors, krTotNumOfMessages=krTotNumOfMessages, krTotQAllocFailures=krTotQAllocFailures, krNumOfSysReads=krNumOfSysReads, krSystemUpTime=krSystemUpTime, krUFSFileEntry=krUFSFileEntry, krConsoleUser=krConsoleUser, krLinkinfoCacheSize=krLinkinfoCacheSize, krDevTotalErrors=krDevTotalErrors, krCPUNumOfIdleThreadSched=krCPUNumOfIdleThreadSched, krUFSFreeSpaceForNonSU64=krUFSFreeSpaceForNonSU64, krCPUDelta=krCPUDelta, krNumOfVForksCalled=krNumOfVForksCalled, krNumOfPagerRun=krNumOfPagerRun, krCPUFaultTable=krCPUFaultTable, krNumOfSysCallsMade=krNumOfSysCallsMade, krDiskSrvEntry=krDiskSrvEntry, krLoadGroup=krLoadGroup, krNumPhyBlocksRead=krNumPhyBlocksRead, krUFSTotNumOfInodesAvail=krUFSTotNumOfInodesAvail, krNumOfPgsPagedIn=krNumOfPgsPagedIn, krLinkinfoCacheGroup=krLinkinfoCacheGroup, krStrMsgCacheCurrUsage=krStrMsgCacheCurrUsage, krDSDiskName=krDSDiskName, krTotNumOfUsers=krTotNumOfUsers, krCPUKernelModeTime=krCPUKernelModeTime, krCPURegTable=krCPURegTable, krCPUDetail=krCPUDetail, krCPUSysTable=krCPUSysTable, krSyncCachePctUsed=krSyncCachePctUsed, krNumOfZeroFilledPages=krNumOfZeroFilledPages, krVXFSFreeSpaceForNonSU64=krVXFSFreeSpaceForNonSU64, krQueueCachePctUsed=krQueueCachePctUsed, krTotSyAllocFailures=krTotSyAllocFailures, krNumTermOutChars=krNumTermOutChars, krCPURegEntry=krCPURegEntry, krkrNumOfPgsPagedOut=krkrNumOfPgsPagedOut, krSwapDetailGroup=krSwapDetailGroup, krCPUFaultEntry=krCPUFaultEntry, krFreePhyMem=krFreePhyMem, krDevSoftwareErrors=krDevSoftwareErrors, krLinkinfoCachePctUsed=krLinkinfoCachePctUsed, krNumOfProcTblOvrFlow=krNumOfProcTblOvrFlow, krTotSHCacheAllocation=krTotSHCacheAllocation, krMemoryUsageGroup=krMemoryUsageGroup, krUserGroup=krUserGroup, krZoneListTable=krZoneListTable, krUFSTotNumOfInodes=krUFSTotNumOfInodes, krNumRawIOWrites=krNumRawIOWrites, krStrMsgCacheName=krStrMsgCacheName, krStrEventCachePctUsed=krStrEventCachePctUsed, krAutoboot=krAutoboot, krSmallPoolMem=krSmallPoolMem, krUFSFileSystemSize64=krUFSFileSystemSize64, krNumOfPgsSwappedIn=krNumOfPgsSwappedIn, krPgCPUInstance=krPgCPUInstance, krUFSFileSystemFreeSpace64=krUFSFileSystemFreeSpace64, krTotSwapSpace=krTotSwapSpace, krDiskDataTransferRate=krDiskDataTransferRate, krCPUInterruptsGroup=krCPUInterruptsGroup, krVXFSTotNumOfInodes=krVXFSTotNumOfInodes, krPctOfPhyMemInUse=krPctOfPhyMemInUse)
mibBuilder.exportSymbols("KERNEL-READER-SUNMANAGEMENTCENTER-MIB", krCPUFaultsGroup=krCPUFaultsGroup, krLargePoolMem=krLargePoolMem, krSyncqCacheGroup=krSyncqCacheGroup, krCPUUtilEntry=krCPUUtilEntry, krUFSFileSystemIndex=krUFSFileSystemIndex, krNumOfMinorAsPageFaults=krNumOfMinorAsPageFaults, krNumOfRegWinSysOvrFlow=krNumOfRegWinSysOvrFlow, krNumOfInodeTblOvrFlow=krNumOfInodeTblOvrFlow, krDiskDataWriteRate=krDiskDataWriteRate, krVXFSPctInodesUsed=krVXFSPctInodesUsed, krQueueCacheName=krQueueCacheName, krDiskSrvTable=krDiskSrvTable, krTotNumOfSemops=krTotNumOfSemops, krNumOfModuleLoads=krNumOfModuleLoads, krCPUProcInStatesGroup=krCPUProcInStatesGroup, krNumOfRWReaderFails=krNumOfRWReaderFails, krNumOfCopyOnWriteFaults=krNumOfCopyOnWriteFaults, krTotLIAllocFailures=krTotLIAllocFailures, krCPUTotPIOWaitTime=krCPUTotPIOWaitTime, krPath=krPath, krNumOfxcalls=krNumOfxcalls, krNumOfProtectionFaults=krNumOfProtectionFaults, krSyncCacheSize=krSyncCacheSize, krOversizeMemFailed=krOversizeMemFailed, krRWCPUInstance=krRWCPUInstance, krCPURegWindowGroup=krCPURegWindowGroup, krTotUsedSwapSpace=krTotUsedSwapSpace, krDiskOperationRate=krDiskOperationRate, krVXFSFileSystemFreeSpace64=krVXFSFileSystemFreeSpace64, krNumOfCPUMig=krNumOfCPUMig, krTotProcInRunQueue=krTotProcInRunQueue, PYSNMP_MODULE_ID=kernelReader, krNumOfSwapOuts=krNumOfSwapOuts, krQbandCacheSize=krQbandCacheSize, krDiskAvgWaitTrans=krDiskAvgWaitTrans, krStrMsgCacheSize=krStrMsgCacheSize, krVXFSTotNumOfInodesAvail=krVXFSTotNumOfInodesAvail, krDDDiskName=krDDDiskName, krStrEventCacheSize=krStrEventCacheSize, krCPUSyscallGroup=krCPUSyscallGroup)
