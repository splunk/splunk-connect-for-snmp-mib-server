#
# PySNMP MIB module INTEL-MPLINK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-MPLINK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, Bits, TimeTicks, IpAddress, NotificationType, MibIdentifier, Integer32, Gauge32, Unsigned32, Counter32, ObjectIdentity, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Bits", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "Integer32", "Gauge32", "Unsigned32", "Counter32", "ObjectIdentity", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class OnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class Attachment(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("none", 1), ("tenbase-t", 2), ("aui", 3), ("id0", 4), ("id1", 5), ("id2", 6), ("id3", 7), ("eia530-dce", 8), ("test-plug", 9), ("v11-dce", 10), ("v24-dce", 11), ("v35-dce", 12), ("v36-dce", 13), ("eia530-dte", 14), ("v11-dte", 15), ("v24-dte", 16), ("v35-dte", 17), ("v36-dte", 18), ("empty", 19), ("isdn", 20), ("pcmcia-async", 21), ("isdn-e1-rj45", 22), ("isdn-e1-bnc", 23), ("isdn-t1-rj45", 24))

class CompType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("proprietary", 1), ("stac", 2))

class Direction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3))

class DataState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("down", 1), ("timeCut", 2), ("up", 3))

class ConnectState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("create", 1), ("down", 2), ("outgoingCall", 3), ("incomingCall", 4), ("incomingDisconnect", 5), ("outgoingDisconnect", 6), ("waitDisconnectConfirm", 7), ("error", 8), ("destroy", 9), ("timeCut", 10), ("idle", 11), ("up", 12), ("empty", 13))

class UserEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("all", 1), ("ip", 2), ("ipx", 3), ("br", 4))

class ProtoEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("ip-all", 1), ("ip-ftp", 2), ("ip-telnet", 3), ("ip-smtp", 4), ("ip-dns", 5), ("ip-bootp", 6), ("ip-http", 7), ("ip-snmp", 8), ("ip-rip", 9), ("ip-tunnel", 10), ("ip-other", 11), ("ipx-all", 12), ("ipx-ncp", 13), ("ipx-spx", 14), ("ipx-rip", 15), ("ipx-sap", 16), ("ipx-type20", 17), ("ipx-other", 18), ("br-all", 19), ("br-bpdu", 20), ("br-other", 21))

mpl = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20))
mplService = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 1))
mplLanSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 2))
mplWanSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 3))
mplIfSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 4))
mplGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 5))
mplUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 6))
mplServiceTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1), )
if mibBuilder.loadTexts: mplServiceTable.setStatus('mandatory')
mplServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplServiceNumber"))
if mibBuilder.loadTexts: mplServiceEntry.setStatus('mandatory')
mplServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceNumber.setStatus('mandatory')
mplServiceSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceSlotNumber.setStatus('mandatory')
mplServicePlugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServicePlugNumber.setStatus('mandatory')
mplServicePlugName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServicePlugName.setStatus('mandatory')
mplServiceAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 5), Attachment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceAttachment.setStatus('mandatory')
mplServiceProvider = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("lan", 1), ("lapbHdlc", 2), ("pppHdlc", 3), ("frHdlc", 4), ("frAttachment", 5), ("lapbIsdn", 6), ("pppIsdn", 7), ("isdnAttachment", 8), ("x25Lapb", 9), ("x25Attachment", 10), ("slip", 11), ("pppMultiMaster", 12), ("pppAodi", 13), ("pppX25", 14), ("pppPcmcia", 15), ("pppTcpTunnel", 16), ("pppPcmciaModem", 17), ("padX25", 18), ("pppAsync", 19), ("asyncAttachment", 20), ("pppX31", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceProvider.setStatus('mandatory')
mplServiceBytesSentUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceBytesSentUpper.setStatus('mandatory')
mplServiceBytesSentLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceBytesSentLower.setStatus('mandatory')
mplServiceBytesReceivedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceBytesReceivedUpper.setStatus('mandatory')
mplServiceBytesReceivedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceBytesReceivedLower.setStatus('mandatory')
mplServiceLock = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 11), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplServiceLock.setStatus('mandatory')
mplLanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1), )
if mibBuilder.loadTexts: mplLanTable.setStatus('mandatory')
mplLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplLanNumber"))
if mibBuilder.loadTexts: mplLanEntry.setStatus('mandatory')
mplLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanNumber.setStatus('mandatory')
mplLanRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxCRCErrors.setStatus('mandatory')
mplLanRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxOverrun.setStatus('mandatory')
mplLanRxLong = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxLong.setStatus('mandatory')
mplLanRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxOverflow.setStatus('mandatory')
mplLanRxAlnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxAlnErrors.setStatus('mandatory')
mplLanRxOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxOuts.setStatus('mandatory')
mplLanRxShort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxShort.setStatus('mandatory')
mplLanTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxDeferred.setStatus('mandatory')
mplLanTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxUnderrun.setStatus('mandatory')
mplLanTxSQEFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxSQEFailure.setStatus('mandatory')
mplLanTxExcDeferral = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxExcDeferral.setStatus('mandatory')
mplLanTxCollExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxCollExceed.setStatus('mandatory')
mplLanTxLateColl = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxLateColl.setStatus('mandatory')
mplLanTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxCollisions.setStatus('mandatory')
mplLanTxNoCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxNoCarrier.setStatus('mandatory')
mplWanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1), )
if mibBuilder.loadTexts: mplWanTable.setStatus('mandatory')
mplWanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplWanNumber"))
if mibBuilder.loadTexts: mplWanEntry.setStatus('mandatory')
mplWanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanNumber.setStatus('mandatory')
mplWanDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 2), DataState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanDataState.setStatus('mandatory')
mplWanDataStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanDataStateTimer.setStatus('mandatory')
mplWanConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 4), ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanConnectState.setStatus('mandatory')
mplWanConnectStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanConnectStateTimer.setStatus('mandatory')
mplWanCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 6), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCompression.setStatus('mandatory')
mplWanCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 7), CompType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCompressionType.setStatus('mandatory')
mplWanCallsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCallsSucceeded.setStatus('mandatory')
mplWanCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCallsFailed.setStatus('mandatory')
mplWanCallsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCallsAccepted.setStatus('mandatory')
mplWanCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCallsRejected.setStatus('mandatory')
mplWanRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplWanRetries.setStatus('mandatory')
mplWanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 13), Direction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanDirection.setStatus('mandatory')
mplWanHasBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 14), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanHasBackup.setStatus('mandatory')
mplWanBackupFor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanBackupFor.setStatus('mandatory')
mplWanBackupForAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 16), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanBackupForAttachment.setStatus('mandatory')
mplWanFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanFlags.setStatus('mandatory')
mplWanPppMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanPppMaster.setStatus('mandatory')
mplWanPppSlaveUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanPppSlaveUpCount.setStatus('mandatory')
mplWanActivityTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanActivityTimeLeft.setStatus('mandatory')
mplWanActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 21), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplWanActivity.setStatus('mandatory')
mplWanTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 22), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanTimer.setStatus('mandatory')
mplWanTimeTillTimecut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanTimeTillTimecut.setStatus('mandatory')
mplWanLastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanLastPacket.setStatus('mandatory')
mplWanInCallsPlaced = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanInCallsPlaced.setStatus('mandatory')
mplWanOutCallsPlaced = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanOutCallsPlaced.setStatus('mandatory')
mplWanInTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanInTimeActive.setStatus('mandatory')
mplWanOutTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanOutTimeActive.setStatus('mandatory')
mplWanTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanTotalTime.setStatus('mandatory')
mplCompTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2), )
if mibBuilder.loadTexts: mplCompTable.setStatus('mandatory')
mplCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplCompNumber"))
if mibBuilder.loadTexts: mplCompEntry.setStatus('mandatory')
mplCompNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompNumber.setStatus('mandatory')
mplCompRxDecRxBytesTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRxBytesTotalUpper.setStatus('mandatory')
mplCompRxDecRxBytesTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRxBytesTotalLower.setStatus('mandatory')
mplCompRxDecRxBytesDecompUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRxBytesDecompUpper.setStatus('mandatory')
mplCompRxDecRxBytesDecompLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRxBytesDecompLower.setStatus('mandatory')
mplCompRxDecDecompressedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecDecompressedUpper.setStatus('mandatory')
mplCompRxDecDecompressedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecDecompressedLower.setStatus('mandatory')
mplCompRxDecAllocErrorsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecAllocErrorsUpper.setStatus('mandatory')
mplCompRxDecAllocErrorsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecAllocErrorsLower.setStatus('mandatory')
mplCompRxDecRemoteInits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRemoteInits.setStatus('mandatory')
mplCompTxEncInBytesTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncInBytesTotalUpper.setStatus('mandatory')
mplCompTxEncInBytesTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncInBytesTotalLower.setStatus('mandatory')
mplCompTxEncTxBytesCompUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncTxBytesCompUpper.setStatus('mandatory')
mplCompTxEncTxBytesCompLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncTxBytesCompLower.setStatus('mandatory')
mplCompTxEncCompressedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncCompressedUpper.setStatus('mandatory')
mplCompTxEncCompressedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncCompressedLower.setStatus('mandatory')
mplCompTxEncAllocErrorsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncAllocErrorsUpper.setStatus('mandatory')
mplCompTxEncAllocErrorsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncAllocErrorsLower.setStatus('mandatory')
mplCompTxEncLocalInits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncLocalInits.setStatus('mandatory')
mplCompTxEncTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncTransmitErrors.setStatus('mandatory')
mplCompTxEncQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncQueueLength.setStatus('mandatory')
mplIfStackTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 4, 1), )
if mibBuilder.loadTexts: mplIfStackTable.setStatus('mandatory')
mplIfStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 4, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplIfStackNumber"))
if mibBuilder.loadTexts: mplIfStackEntry.setStatus('mandatory')
mplIfStackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplIfStackNumber.setStatus('mandatory')
mplIfStackLowerLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplIfStackLowerLayer.setStatus('mandatory')
mplGeneralOverviewChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 20, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplGeneralOverviewChange.setStatus('mandatory')
mplGeneralIfgroupStatus = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 20, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplGeneralIfgroupStatus.setStatus('mandatory')
mplUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1), )
if mibBuilder.loadTexts: mplUtilizationTable.setStatus('mandatory')
mplUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplUtilizationPlugNumber"), (0, "INTEL-MPLINK-MIB", "mplUtilizationMplink"), (0, "INTEL-MPLINK-MIB", "mplUtilizationUser"), (0, "INTEL-MPLINK-MIB", "mplUtilizationProtocol"))
if mibBuilder.loadTexts: mplUtilizationEntry.setStatus('mandatory')
mplUtilizationPlugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationPlugNumber.setStatus('mandatory')
mplUtilizationMplink = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationMplink.setStatus('mandatory')
mplUtilizationUser = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 3), UserEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationUser.setStatus('mandatory')
mplUtilizationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 4), ProtoEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationProtocol.setStatus('mandatory')
mplUtilizationRxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationRxUtil.setStatus('mandatory')
mplUtilizationTxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationTxUtil.setStatus('mandatory')
mplLockEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 20) + (0,1)).setObjects(("INTEL-MPLINK-MIB", "mplServiceNumber"), ("INTEL-MPLINK-MIB", "mplServiceLock"))
mplWanRetriesEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 20) + (0,2)).setObjects(("INTEL-MPLINK-MIB", "mplWanNumber"), ("INTEL-MPLINK-MIB", "mplWanRetries"))
mplWanActivityEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 20) + (0,3)).setObjects(("INTEL-MPLINK-MIB", "mplWanNumber"), ("INTEL-MPLINK-MIB", "mplWanActivity"))
mplWanTimerEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 20) + (0,4)).setObjects(("INTEL-MPLINK-MIB", "mplWanNumber"), ("INTEL-MPLINK-MIB", "mplWanTimer"))
mibBuilder.exportSymbols("INTEL-MPLINK-MIB", mplLanEntry=mplLanEntry, mplLanSpecific=mplLanSpecific, mplServiceProvider=mplServiceProvider, mplServiceBytesReceivedLower=mplServiceBytesReceivedLower, mplCompTxEncCompressedLower=mplCompTxEncCompressedLower, mplCompTxEncQueueLength=mplCompTxEncQueueLength, mplCompRxDecRxBytesDecompUpper=mplCompRxDecRxBytesDecompUpper, mplUtilizationTable=mplUtilizationTable, mplCompRxDecDecompressedLower=mplCompRxDecDecompressedLower, mplServiceBytesReceivedUpper=mplServiceBytesReceivedUpper, mplWanActivity=mplWanActivity, mplLanRxShort=mplLanRxShort, mplIfStackNumber=mplIfStackNumber, mplServiceSlotNumber=mplServiceSlotNumber, mplUtilizationPlugNumber=mplUtilizationPlugNumber, mpl=mpl, mplServiceNumber=mplServiceNumber, ProtoEnum=ProtoEnum, mplGeneralIfgroupStatus=mplGeneralIfgroupStatus, mplCompRxDecRxBytesTotalLower=mplCompRxDecRxBytesTotalLower, mplWanBackupForAttachment=mplWanBackupForAttachment, mplWanTimerEvent=mplWanTimerEvent, mplWanInCallsPlaced=mplWanInCallsPlaced, mplCompTxEncCompressedUpper=mplCompTxEncCompressedUpper, mplWanPppSlaveUpCount=mplWanPppSlaveUpCount, mplCompRxDecAllocErrorsUpper=mplCompRxDecAllocErrorsUpper, mplIfStackLowerLayer=mplIfStackLowerLayer, mplLanRxCRCErrors=mplLanRxCRCErrors, mplWanDataStateTimer=mplWanDataStateTimer, mplWanActivityTimeLeft=mplWanActivityTimeLeft, mplUtilizationTxUtil=mplUtilizationTxUtil, mplLanTxSQEFailure=mplLanTxSQEFailure, mplLanTxNoCarrier=mplLanTxNoCarrier, mplWanRetriesEvent=mplWanRetriesEvent, mplLockEvent=mplLockEvent, mplUtilization=mplUtilization, mplCompTxEncTransmitErrors=mplCompTxEncTransmitErrors, mplWanCallsSucceeded=mplWanCallsSucceeded, mplUtilizationUser=mplUtilizationUser, mplCompTxEncTxBytesCompLower=mplCompTxEncTxBytesCompLower, mplCompNumber=mplCompNumber, mplServiceBytesSentUpper=mplServiceBytesSentUpper, mplWanPppMaster=mplWanPppMaster, mplCompEntry=mplCompEntry, Direction=Direction, Attachment=Attachment, mplIfSpecific=mplIfSpecific, mplWanInTimeActive=mplWanInTimeActive, mplWanOutCallsPlaced=mplWanOutCallsPlaced, mplCompRxDecAllocErrorsLower=mplCompRxDecAllocErrorsLower, mplLanTxCollisions=mplLanTxCollisions, mplCompTxEncTxBytesCompUpper=mplCompTxEncTxBytesCompUpper, mplWanCompressionType=mplWanCompressionType, mplWanFlags=mplWanFlags, mplLanTxExcDeferral=mplLanTxExcDeferral, mplWanConnectStateTimer=mplWanConnectStateTimer, mplWanTimeTillTimecut=mplWanTimeTillTimecut, mplIfStackTable=mplIfStackTable, mplUtilizationMplink=mplUtilizationMplink, mplServicePlugName=mplServicePlugName, DataState=DataState, mplCompTxEncAllocErrorsUpper=mplCompTxEncAllocErrorsUpper, mplServiceLock=mplServiceLock, mplLanNumber=mplLanNumber, mplLanRxOverflow=mplLanRxOverflow, mplLanRxAlnErrors=mplLanRxAlnErrors, mplWanConnectState=mplWanConnectState, mplWanCallsFailed=mplWanCallsFailed, mplWanLastPacket=mplWanLastPacket, mplServiceTable=mplServiceTable, mplServiceAttachment=mplServiceAttachment, mplCompTxEncLocalInits=mplCompTxEncLocalInits, OnOff=OnOff, mplIfStackEntry=mplIfStackEntry, mplCompRxDecRxBytesTotalUpper=mplCompRxDecRxBytesTotalUpper, mplUtilizationEntry=mplUtilizationEntry, mplUtilizationProtocol=mplUtilizationProtocol, mplWanSpecific=mplWanSpecific, mplWanCallsAccepted=mplWanCallsAccepted, mplLanTxUnderrun=mplLanTxUnderrun, mplCompTxEncInBytesTotalLower=mplCompTxEncInBytesTotalLower, mplCompTxEncInBytesTotalUpper=mplCompTxEncInBytesTotalUpper, mplWanCompression=mplWanCompression, mplWanTimer=mplWanTimer, mplGeneralOverviewChange=mplGeneralOverviewChange, mplWanTable=mplWanTable, mplLanRxOuts=mplLanRxOuts, mplWanCallsRejected=mplWanCallsRejected, CompType=CompType, mplService=mplService, mplCompRxDecDecompressedUpper=mplCompRxDecDecompressedUpper, mplCompTxEncAllocErrorsLower=mplCompTxEncAllocErrorsLower, ConnectState=ConnectState, mplServiceBytesSentLower=mplServiceBytesSentLower, mplWanOutTimeActive=mplWanOutTimeActive, mplCompRxDecRxBytesDecompLower=mplCompRxDecRxBytesDecompLower, mplWanTotalTime=mplWanTotalTime, mplWanActivityEvent=mplWanActivityEvent, mplWanBackupFor=mplWanBackupFor, mplServiceEntry=mplServiceEntry, mplLanRxOverrun=mplLanRxOverrun, mplWanEntry=mplWanEntry, mplWanDirection=mplWanDirection, mplLanTxLateColl=mplLanTxLateColl, mplLanRxLong=mplLanRxLong, mplServicePlugNumber=mplServicePlugNumber, mplGeneral=mplGeneral, mplCompRxDecRemoteInits=mplCompRxDecRemoteInits, mplCompTable=mplCompTable, UserEnum=UserEnum, mplWanHasBackup=mplWanHasBackup, mplWanNumber=mplWanNumber, mplLanTable=mplLanTable, mplWanDataState=mplWanDataState, mplLanTxCollExceed=mplLanTxCollExceed, mplWanRetries=mplWanRetries, mplLanTxDeferred=mplLanTxDeferred, mplUtilizationRxUtil=mplUtilizationRxUtil)
