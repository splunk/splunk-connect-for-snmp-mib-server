#
# PySNMP MIB module LEXMARK-MPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEXMARK-MPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
lexmarkModules, lexmark = mibBuilder.importSymbols("LEXMARK-ROOT-MIB", "lexmarkModules", "lexmark")
PaperSizeTC, StatusTC, KeyValueTC, UnitsTC, AdminStatusTC, PaperTypeTC = mibBuilder.importSymbols("LEXMARK-TC-MIB", "PaperSizeTC", "StatusTC", "KeyValueTC", "UnitsTC", "AdminStatusTC", "PaperTypeTC")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, TimeTicks, iso, Counter64, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, IpAddress, Gauge32, MibIdentifier, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "iso", "Counter64", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "IpAddress", "Gauge32", "MibIdentifier", "Bits", "Counter32")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
mpsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 641, 4, 4))
mpsMibModule.setRevisions(('2011-04-04 12:57', '2010-12-22 20:06', '2010-12-01 23:00', '2009-11-24 20:40',))
if mibBuilder.loadTexts: mpsMibModule.setLastUpdated('201104041257Z')
if mibBuilder.loadTexts: mpsMibModule.setOrganization('Lexmark International, Inc.')
mps = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6))
mpsMIBAdminInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 1))
mpsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 1, 1))
mpsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 1, 2))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 2))
inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 3))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 4))
alerts = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 5))
logs = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 6))
applications = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 7))
generalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 4, 1))
paperStats = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 4, 2))
scanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 4, 3))
supplyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 4, 4))
class SupplyTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("inkCartridge", 3), ("inkBottle", 4), ("inkPrinthead", 5), ("toner", 6), ("photoconductor", 7), ("transferModule", 8), ("fuser", 9), ("wastetonerBox", 10), ("staples", 11), ("holepunchBox", 12))

class CartridgeTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 21, 22, 23, 37, 38, 39, 53, 54, 55))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("invalid", 3), ("shipWith", 4), ("standard", 5), ("highYieldStandard", 6), ("extraHighYieldStandard", 7), ("returnProgram", 21), ("highYieldReturnProgram", 22), ("extraHighYieldReturnProgram", 23), ("refilledStandard", 37), ("refilledHighYieldStandard", 38), ("refilledExtraHighYieldStandard", 39), ("refilledReturnProgram", 53), ("refilledHighYieldReturnProgram", 54), ("refilledExtraHighYieldReturnProgram", 55))

class SeverityTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("informational", 3), ("warning", 4), ("critical", 5), ("serviceRequired", 6))

class AlertCodeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 300, 301, 302, 303, 304, 305, 400, 401, 402, 403, 404, 500, 501, 600, 601, 602, 603, 604, 605, 606, 607, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 800, 801, 802, 803, 804, 805, 900, 901, 1000, 1001, 1002, 20000))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("coverOpen", 3), ("coverClosed", 4), ("interlockOpen", 5), ("interlockClosed", 6), ("doorOpen", 7), ("doorClosed", 8), ("calibrating", 9), ("alignmentFailed", 10), ("warrantyOverrideRequired", 11), ("printHeadCarrierPathObstructed", 12), ("heldJobsMayNotBeRestored", 13), ("busy", 14), ("waiting", 15), ("subunitErrorOther", 100), ("subunitLifeAlmostOver", 101), ("subunitLifeOver", 102), ("subunitJammed", 103), ("subunitUnderTemperature", 104), ("subunitOverTemperature", 105), ("subunitInsufficientMemory", 106), ("subunitMemoryFull", 107), ("subunitNVFailure", 108), ("subunitDisabled", 109), ("subunitCommunicationError", 110), ("supplyErrorOther", 200), ("supplyOk", 201), ("supplyEarlyWarning", 202), ("supplyNearFull", 203), ("supplyFull", 205), ("supplyNearLow", 206), ("supplyLow", 207), ("supplyNearEmpty", 208), ("supplyEmpty", 209), ("supplyLifeAlmostOver", 210), ("supplyLifeOver", 211), ("supplyNearReplace", 212), ("supplyReplace", 213), ("supplyMissing", 214), ("supplyInvalid", 215), ("supplyDefective", 216), ("supplyImproperInstall", 217), ("supplyUnsupported", 218), ("supplyUncalibrated", 219), ("inputMediaErrorOther", 300), ("inputMediaTrayMissing", 301), ("inputMediaSupplyLow", 302), ("inputMediaSupplyEmpty", 303), ("inputMediaChangeRequest", 304), ("inputMediaLoadRequest", 305), ("outputMediaErrorOther", 400), ("outputMediaTrayMissing", 401), ("outputMediaNearFull", 402), ("outputMediaFull", 403), ("outputMediaEmptyRequest", 404), ("mediaPathErrorOther", 500), ("mediaPathPaperJam", 501), ("scannerErrorOther", 600), ("scannerLampWarming", 601), ("scannerLampLifeWarning", 602), ("scannerLampError", 603), ("scannerADFJam", 604), ("scannerStalled", 605), ("scannerLocked", 606), ("scannerDisabled", 607), ("faxErrorOther", 700), ("faxStorageNearFull", 701), ("faxStorageFull", 702), ("faxStorageSendNearFull", 703), ("faxStorageSendFull", 704), ("faxStorageReceiveNearFull", 705), ("faxStorageReceiveFull", 706), ("faxPhoneLineDisconnected", 707), ("faxDisabled", 708), ("faxConfigurationError", 709), ("interpreterErrorOther", 800), ("interpreterInsufficientMemory", 801), ("interpreterOutOfMemory", 802), ("interpreterComplexPage", 803), ("interpreterJobHardwareMismatch", 804), ("interpreterPrintDataExceedsMediaSize", 805), ("emailErrorOther", 900), ("emailConfigurationError", 901), ("storageErrorOther", 1000), ("storageUnformatted", 1001), ("storageFull", 1002), ("neverError", 20000))

deviceMibLocalization = MibScalar((1, 3, 6, 1, 4, 1, 641, 6, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMibLocalization.setStatus('current')
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 2, 3), )
if mibBuilder.loadTexts: deviceTable.setStatus('current')
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"))
if mibBuilder.loadTexts: deviceEntry.setStatus('current')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: deviceIndex.setStatus('current')
devicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePort.setStatus('current')
deviceHrDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHrDeviceIndex.setStatus('current')
deviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceModel.setStatus('current')
deviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNumber.setStatus('current')
deviceMibVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMibVersion.setStatus('current')
deviceInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInstallDate.setStatus('current')
deviceMibSupportLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 16, 32, 48))).clone(namedValues=NamedValues(("none", 0), ("minimum", 1), ("value", 16), ("feature", 32), ("enterprise", 48)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMibSupportLevel.setStatus('current')
hwInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 3, 1), )
if mibBuilder.loadTexts: hwInventoryTable.setStatus('current')
hwInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "hwInventoryIndex"))
if mibBuilder.loadTexts: hwInventoryEntry.setStatus('current')
hwInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwInventoryIndex.setStatus('current')
hwInventoryParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInventoryParentIndex.setStatus('current')
hwInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("printEngine", 3), ("electronicCard", 4), ("duplexer", 5), ("inputTray", 6), ("outputTray", 7), ("finishingDevice", 8), ("scanner", 9), ("faxCard", 10), ("memory", 11), ("nonVolitileMemory", 12), ("keyboard", 13), ("panel", 14), ("cardSwipe", 15), ("transferUnit", 16), ("optionUnknown", 257), ("optionOther", 258), ("optionDuplexer", 261), ("optionInputTray", 262), ("optionOutputTray", 263), ("optionFinishingDevice", 264), ("optionScanner", 265), ("optionFaxCard", 266), ("optionMemory", 267), ("optionNonVolitileMemory", 268), ("optionKeyboard", 269), ("optionPanel", 270), ("optionCardSwipe", 271), ("optionTransferUnit", 272)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInventoryType.setStatus('current')
hwInventoryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 4), AdminStatusTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwInventoryAdminStatus.setStatus('current')
hwInventoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 5), StatusTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInventoryStatus.setStatus('current')
hwInventoryPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInventoryPartNumber.setStatus('current')
hwInventorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInventorySerialNumber.setStatus('current')
hwInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInventoryDescription.setStatus('current')
hwInventoryData = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 1, 1, 9), KeyValueTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInventoryData.setStatus('current')
supplyInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 3, 2), )
if mibBuilder.loadTexts: supplyInventoryTable.setStatus('current')
supplyInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 3, 2, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "supplyInventoryIndex"))
if mibBuilder.loadTexts: supplyInventoryEntry.setStatus('current')
supplyInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: supplyInventoryIndex.setStatus('current')
supplyInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 2, 1, 2), SupplyTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyInventoryType.setStatus('current')
supplyInventoryColorantValue = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyInventoryColorantValue.setStatus('current')
supplyInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyInventoryDescription.setStatus('current')
swInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 3, 3), )
if mibBuilder.loadTexts: swInventoryTable.setStatus('current')
swInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "swInventoryIndex"))
if mibBuilder.loadTexts: swInventoryEntry.setStatus('current')
swInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: swInventoryIndex.setStatus('current')
swInventoryParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swInventoryParentIndex.setStatus('current')
swInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("operatingSystem", 3), ("hardware", 4), ("application", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swInventoryType.setStatus('current')
swInventoryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 4), AdminStatusTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swInventoryAdminStatus.setStatus('current')
swInventoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 5), StatusTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swInventoryStatus.setStatus('current')
swInventoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swInventoryName.setStatus('current')
swInventoryRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swInventoryRevision.setStatus('current')
swInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swInventoryDescription.setStatus('current')
swInventoryHWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swInventoryHWIndex.setStatus('current')
swInventoryData = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 3, 3, 1, 10), KeyValueTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swInventoryData.setStatus('current')
genCountTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 1, 1), )
if mibBuilder.loadTexts: genCountTable.setStatus('current')
genCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 1, 1, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "genCountIndex"))
if mibBuilder.loadTexts: genCountEntry.setStatus('current')
genCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: genCountIndex.setStatus('current')
genCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 32, 33, 34, 35, 36, 37, 38, 64, 65, 66, 67, 96, 97, 98, 99, 100, 101, 128))).clone(namedValues=NamedValues(("porCount", 1), ("sleepCount", 2), ("hibernateCount", 3), ("printCalibrateCount", 4), ("powerOnTime", 32), ("powerActiveTime", 33), ("powerIdleTime", 34), ("powerSleepTime", 35), ("powerHibernateTime", 36), ("powerOffTime", 37), ("warmupTotalTime", 38), ("lifetimeBlackCoverage", 64), ("lifetimeCyanCoverage", 65), ("lifetimeYellowCoverage", 66), ("lifetimeMagentaCoverage", 67), ("faxesSent", 96), ("paperJams", 97), ("scannerJams", 98), ("loadPaperPrompts", 99), ("changePaperPrompts", 100), ("coverOpens", 101), ("usbInsertions", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCountType.setStatus('current')
genCountUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 1, 1, 1, 3), UnitsTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCountUnits.setStatus('current')
genCountValue = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCountValue.setStatus('current')
paperGeneralCountTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 1), )
if mibBuilder.loadTexts: paperGeneralCountTable.setStatus('current')
paperGeneralCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 1, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "paperGeneralCountIndex"))
if mibBuilder.loadTexts: paperGeneralCountEntry.setStatus('current')
paperGeneralCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: paperGeneralCountIndex.setStatus('current')
paperGeneralCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16, 17, 18, 32, 33, 34, 48, 49, 50, 64, 65, 66, 67, 80, 81))).clone(namedValues=NamedValues(("totalPicked", 1), ("totalSafe", 2), ("totalMonoSafe", 3), ("totalColorSafe", 4), ("printNHold", 5), ("usbDirect", 6), ("printTotal", 16), ("printMono", 17), ("printColor", 18), ("copyTotal", 32), ("copyMono", 33), ("copyColor", 34), ("faxTotal", 48), ("faxMono", 49), ("faxColor", 50), ("blankTotal", 64), ("blankPrint", 65), ("blankCopy", 66), ("blankFax", 67), ("printerPageCount", 80), ("modularPageCount", 81)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperGeneralCountType.setStatus('current')
paperGeneralCountUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 1, 1, 3), UnitsTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperGeneralCountUnits.setStatus('current')
paperGeneralCountValue = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperGeneralCountValue.setStatus('current')
paperSidesCountTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2), )
if mibBuilder.loadTexts: paperSidesCountTable.setStatus('current')
paperSidesCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "paperSidesCountIndex"))
if mibBuilder.loadTexts: paperSidesCountEntry.setStatus('current')
paperSidesCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: paperSidesCountIndex.setStatus('current')
paperSidesPaperSize = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2, 1, 2), PaperSizeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSidesPaperSize.setStatus('current')
paperSidesPaperType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2, 1, 3), PaperTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSidesPaperType.setStatus('current')
paperSidesMonoPicked = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSidesMonoPicked.setStatus('current')
paperSidesColorPicked = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSidesColorPicked.setStatus('current')
paperSidesMonoSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSidesMonoSafe.setStatus('current')
paperSidesColorSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSidesColorSafe.setStatus('current')
paperSheetsCountTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 3), )
if mibBuilder.loadTexts: paperSheetsCountTable.setStatus('current')
paperSheetsCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 3, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "paperSheetsCountIndex"))
if mibBuilder.loadTexts: paperSheetsCountEntry.setStatus('current')
paperSheetsCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: paperSheetsCountIndex.setStatus('current')
paperSheetsPaperSize = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 3, 1, 2), PaperSizeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSheetsPaperSize.setStatus('current')
paperSheetsPaperType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 3, 1, 3), PaperTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSheetsPaperType.setStatus('current')
paperSheetsPicked = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSheetsPicked.setStatus('current')
paperSheetsSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperSheetsSafe.setStatus('current')
paperNupCountTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 4), )
if mibBuilder.loadTexts: paperNupCountTable.setStatus('current')
paperNupCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 4, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "paperNupCountIndex"))
if mibBuilder.loadTexts: paperNupCountEntry.setStatus('current')
paperNupCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: paperNupCountIndex.setStatus('current')
paperNupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 9, 12, 16))).clone(namedValues=NamedValues(("off", 1), ("twoUp", 2), ("threeUp", 3), ("fourUp", 4), ("sixUp", 6), ("nineUp", 9), ("twelveUp", 12), ("sixteenUp", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperNupNumber.setStatus('current')
paperNupSides = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperNupSides.setStatus('current')
paperNupLogicalSides = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperNupLogicalSides.setStatus('current')
paperJobSizeTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 5), )
if mibBuilder.loadTexts: paperJobSizeTable.setStatus('current')
paperJobSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 5, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "paperJobSizeIndex"))
if mibBuilder.loadTexts: paperJobSizeEntry.setStatus('current')
paperJobSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: paperJobSizeIndex.setStatus('current')
paperJobSizeMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperJobSizeMinimum.setStatus('current')
paperJobSizeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperJobSizeMaximum.setStatus('current')
paperJobSizeSideCount = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperJobSizeSideCount.setStatus('current')
paperJobSizeJobCount = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paperJobSizeJobCount.setStatus('current')
scanCountTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 3, 1), )
if mibBuilder.loadTexts: scanCountTable.setStatus('current')
scanCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 3, 1, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "scanCountIndex"))
if mibBuilder.loadTexts: scanCountEntry.setStatus('current')
scanCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: scanCountIndex.setStatus('current')
scanCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 257, 258, 259, 260, 261, 769, 770, 771, 772, 773))).clone(namedValues=NamedValues(("copyAdf", 1), ("faxAdf", 2), ("scanToEmailAdf", 3), ("scanToNetAdf", 4), ("scanToLocalHostAdf", 5), ("copyFlatbed", 257), ("faxFlatbed", 258), ("scanToEmailFlatbed", 259), ("scanToNetFlatbed", 260), ("scanToLocalHostFlatbed", 261), ("copyDuplex", 769), ("faxDuplex", 770), ("scanToEmailDuplex", 771), ("scanToNetDuplex", 772), ("scanToLocalHostDuplex", 773)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanCountType.setStatus('current')
scanCountSize = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 3, 1, 1, 3), PaperSizeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanCountSize.setStatus('current')
scanCountSides = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanCountSides.setStatus('current')
scanCountSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scanCountSheets.setStatus('current')
currentSuppliesTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1), )
if mibBuilder.loadTexts: currentSuppliesTable.setStatus('current')
currentSuppliesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "currentSupplyIndex"))
if mibBuilder.loadTexts: currentSuppliesEntry.setStatus('current')
currentSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: currentSupplyIndex.setStatus('current')
currentSupplyInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyInventoryIndex.setStatus('current')
currentSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 3), SupplyTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyType.setStatus('current')
currentSupplyColorantValue = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyColorantValue.setStatus('current')
currentSupplyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyDescription.setStatus('current')
currentSupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplySerialNumber.setStatus('current')
currentSupplyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyPartNumber.setStatus('current')
currentSupplyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filled", 1), ("consumed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyClass.setStatus('current')
currentSupplyCartridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 9), CartridgeTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyCartridgeType.setStatus('current')
currentSupplyInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyInstallDate.setStatus('current')
currentSupplyPageCountAtInstall = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyPageCountAtInstall.setStatus('current')
currentSupplyCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("low", 4), ("empty", 5), ("invalid", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyCurrentStatus.setStatus('current')
currentSupplyCapacityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 13), UnitsTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyCapacityUnit.setStatus('current')
currentSupplyCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyCapacity.setStatus('current')
currentSupplyFirstKnownLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyFirstKnownLevel.setStatus('current')
currentSupplyCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyCurrentLevel.setStatus('current')
currentSupplyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyUsage.setStatus('current')
currentSupplyCalibrations = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyCalibrations.setStatus('current')
currentSupplyCoverage = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSupplyCoverage.setStatus('current')
supplyHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2), )
if mibBuilder.loadTexts: supplyHistoryTable.setStatus('current')
supplyHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "supplyHistoryIndex"))
if mibBuilder.loadTexts: supplyHistoryEntry.setStatus('current')
supplyHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: supplyHistoryIndex.setStatus('current')
supplyHistoryInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryInventoryIndex.setStatus('current')
supplyHistorySupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 3), SupplyTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistorySupplyType.setStatus('current')
supplyHistoryColorantValue = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryColorantValue.setStatus('current')
supplyHistoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryDescription.setStatus('current')
supplyHistorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistorySerialNumber.setStatus('current')
supplyHistoryCartridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 7), CartridgeTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryCartridgeType.setStatus('current')
supplyHistoryInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryInstallDate.setStatus('current')
supplyHistoryPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryPageCount.setStatus('current')
supplyHistoryCapacityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 10), UnitsTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryCapacityUnit.setStatus('current')
supplyHistoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryCapacity.setStatus('current')
supplyHistoryLastLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryLastLevel.setStatus('current')
supplyHistoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryUsage.setStatus('current')
supplyHistoryCalibrations = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryCalibrations.setStatus('current')
supplyHistoryCoverage = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistoryCoverage.setStatus('current')
supplyHistogramTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3), )
if mibBuilder.loadTexts: supplyHistogramTable.setStatus('current')
supplyHistogramEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "supplyHistogramIndex"))
if mibBuilder.loadTexts: supplyHistogramEntry.setStatus('current')
supplyHistogramIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: supplyHistogramIndex.setStatus('current')
supplyHistogramInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistogramInventoryIndex.setStatus('current')
supplyHistogramSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 3), SupplyTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistogramSupplyType.setStatus('current')
supplyHistogramColorantValue = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistogramColorantValue.setStatus('current')
supplyHistogramDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistogramDescription.setStatus('current')
supplyHistogramCapacityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 6), UnitsTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistogramCapacityUnit.setStatus('current')
supplyHistogramCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistogramCapacity.setStatus('current')
supplyHistogramCount = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistogramCount.setStatus('current')
supplyHistogramCountUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 4, 4, 3, 1, 9), UnitsTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyHistogramCountUnits.setStatus('current')
deviceAlertTable = MibTable((1, 3, 6, 1, 4, 1, 641, 6, 5, 1), )
if mibBuilder.loadTexts: deviceAlertTable.setStatus('current')
deviceAlertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1), ).setIndexNames((0, "LEXMARK-MPS-MIB", "deviceIndex"), (0, "LEXMARK-MPS-MIB", "deviceAlertIndex"))
if mibBuilder.loadTexts: deviceAlertEntry.setStatus('current')
deviceAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlertIndex.setStatus('current')
deviceAlertConfigTableNode = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("hwInventoryTable", 2), ("supplyInventoryTable", 3), ("swInventoryTable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlertConfigTableNode.setStatus('current')
deviceAlertConfigTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlertConfigTableIndex.setStatus('current')
deviceAlertSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1, 4), SeverityTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlertSeverity.setStatus('current')
deviceAlertCode = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1, 5), AlertCodeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlertCode.setStatus('current')
deviceAlertDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlertDescription.setStatus('current')
deviceAlertData = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1, 7), KeyValueTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlertData.setStatus('current')
deviceAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 6, 5, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlertTime.setStatus('current')
deviceV1AlertMPS = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 5, 2))
deviceV2AlertMPSPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 6, 5, 2, 0))
deviceV2AlertMPS = NotificationType((1, 3, 6, 1, 4, 1, 641, 6, 5, 2, 0, 1)).setObjects(("LEXMARK-MPS-MIB", "deviceAlertIndex"), ("LEXMARK-MPS-MIB", "deviceAlertConfigTableNode"), ("LEXMARK-MPS-MIB", "deviceAlertConfigTableIndex"), ("LEXMARK-MPS-MIB", "deviceAlertSeverity"), ("LEXMARK-MPS-MIB", "deviceAlertCode"), ("LEXMARK-MPS-MIB", "deviceAlertDescription"), ("LEXMARK-MPS-MIB", "deviceAlertData"), ("LEXMARK-MPS-MIB", "deviceAlertTime"))
if mibBuilder.loadTexts: deviceV2AlertMPS.setStatus('current')
deviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 1)).setObjects(("LEXMARK-MPS-MIB", "deviceMibLocalization"), ("LEXMARK-MPS-MIB", "devicePort"), ("LEXMARK-MPS-MIB", "deviceHrDeviceIndex"), ("LEXMARK-MPS-MIB", "deviceModel"), ("LEXMARK-MPS-MIB", "deviceSerialNumber"), ("LEXMARK-MPS-MIB", "deviceMibVersion"), ("LEXMARK-MPS-MIB", "deviceInstallDate"), ("LEXMARK-MPS-MIB", "deviceMibSupportLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deviceGroup = deviceGroup.setStatus('current')
hwInventoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 2)).setObjects(("LEXMARK-MPS-MIB", "hwInventoryParentIndex"), ("LEXMARK-MPS-MIB", "hwInventoryType"), ("LEXMARK-MPS-MIB", "hwInventoryAdminStatus"), ("LEXMARK-MPS-MIB", "hwInventoryStatus"), ("LEXMARK-MPS-MIB", "hwInventoryPartNumber"), ("LEXMARK-MPS-MIB", "hwInventorySerialNumber"), ("LEXMARK-MPS-MIB", "hwInventoryDescription"), ("LEXMARK-MPS-MIB", "hwInventoryData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwInventoryGroup = hwInventoryGroup.setStatus('current')
supplyInventoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 3)).setObjects(("LEXMARK-MPS-MIB", "supplyInventoryType"), ("LEXMARK-MPS-MIB", "supplyInventoryColorantValue"), ("LEXMARK-MPS-MIB", "supplyInventoryDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    supplyInventoryGroup = supplyInventoryGroup.setStatus('current')
swInventoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 4)).setObjects(("LEXMARK-MPS-MIB", "swInventoryParentIndex"), ("LEXMARK-MPS-MIB", "swInventoryType"), ("LEXMARK-MPS-MIB", "swInventoryName"), ("LEXMARK-MPS-MIB", "swInventoryRevision"), ("LEXMARK-MPS-MIB", "swInventoryAdminStatus"), ("LEXMARK-MPS-MIB", "swInventoryStatus"), ("LEXMARK-MPS-MIB", "swInventoryDescription"), ("LEXMARK-MPS-MIB", "swInventoryHWIndex"), ("LEXMARK-MPS-MIB", "swInventoryData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    swInventoryGroup = swInventoryGroup.setStatus('current')
statsGeneralCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 5)).setObjects(("LEXMARK-MPS-MIB", "genCountType"), ("LEXMARK-MPS-MIB", "genCountUnits"), ("LEXMARK-MPS-MIB", "genCountValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsGeneralCountGroup = statsGeneralCountGroup.setStatus('current')
statsPaperGeneralCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 6)).setObjects(("LEXMARK-MPS-MIB", "paperGeneralCountType"), ("LEXMARK-MPS-MIB", "paperGeneralCountUnits"), ("LEXMARK-MPS-MIB", "paperGeneralCountValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsPaperGeneralCountGroup = statsPaperGeneralCountGroup.setStatus('current')
statsPaperSidesCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 7)).setObjects(("LEXMARK-MPS-MIB", "paperSidesPaperSize"), ("LEXMARK-MPS-MIB", "paperSidesPaperType"), ("LEXMARK-MPS-MIB", "paperSidesMonoPicked"), ("LEXMARK-MPS-MIB", "paperSidesColorPicked"), ("LEXMARK-MPS-MIB", "paperSidesMonoSafe"), ("LEXMARK-MPS-MIB", "paperSidesColorSafe"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsPaperSidesCountGroup = statsPaperSidesCountGroup.setStatus('current')
statsPaperSheetsCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 8)).setObjects(("LEXMARK-MPS-MIB", "paperSheetsPaperSize"), ("LEXMARK-MPS-MIB", "paperSheetsPaperType"), ("LEXMARK-MPS-MIB", "paperSheetsPicked"), ("LEXMARK-MPS-MIB", "paperSheetsSafe"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsPaperSheetsCountGroup = statsPaperSheetsCountGroup.setStatus('current')
statsPaperNupCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 9)).setObjects(("LEXMARK-MPS-MIB", "paperNupNumber"), ("LEXMARK-MPS-MIB", "paperNupSides"), ("LEXMARK-MPS-MIB", "paperNupLogicalSides"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsPaperNupCountGroup = statsPaperNupCountGroup.setStatus('current')
statsPaperJobSizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 10)).setObjects(("LEXMARK-MPS-MIB", "paperJobSizeMinimum"), ("LEXMARK-MPS-MIB", "paperJobSizeMaximum"), ("LEXMARK-MPS-MIB", "paperJobSizeSideCount"), ("LEXMARK-MPS-MIB", "paperJobSizeJobCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsPaperJobSizeGroup = statsPaperJobSizeGroup.setStatus('current')
statsScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 11)).setObjects(("LEXMARK-MPS-MIB", "scanCountType"), ("LEXMARK-MPS-MIB", "scanCountSize"), ("LEXMARK-MPS-MIB", "scanCountSides"), ("LEXMARK-MPS-MIB", "scanCountSheets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsScanGroup = statsScanGroup.setStatus('current')
statsCurrentSuppliesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 12)).setObjects(("LEXMARK-MPS-MIB", "currentSupplyInventoryIndex"), ("LEXMARK-MPS-MIB", "currentSupplyType"), ("LEXMARK-MPS-MIB", "currentSupplyColorantValue"), ("LEXMARK-MPS-MIB", "currentSupplySerialNumber"), ("LEXMARK-MPS-MIB", "currentSupplyPartNumber"), ("LEXMARK-MPS-MIB", "currentSupplyCapacity"), ("LEXMARK-MPS-MIB", "currentSupplyPageCountAtInstall"), ("LEXMARK-MPS-MIB", "currentSupplyCapacityUnit"), ("LEXMARK-MPS-MIB", "currentSupplyClass"), ("LEXMARK-MPS-MIB", "currentSupplyCartridgeType"), ("LEXMARK-MPS-MIB", "currentSupplyInstallDate"), ("LEXMARK-MPS-MIB", "currentSupplyDescription"), ("LEXMARK-MPS-MIB", "currentSupplyCurrentLevel"), ("LEXMARK-MPS-MIB", "currentSupplyCurrentStatus"), ("LEXMARK-MPS-MIB", "currentSupplyUsage"), ("LEXMARK-MPS-MIB", "currentSupplyCoverage"), ("LEXMARK-MPS-MIB", "currentSupplyCalibrations"), ("LEXMARK-MPS-MIB", "currentSupplyFirstKnownLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsCurrentSuppliesGroup = statsCurrentSuppliesGroup.setStatus('current')
statsSupplyHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 13)).setObjects(("LEXMARK-MPS-MIB", "supplyHistoryInventoryIndex"), ("LEXMARK-MPS-MIB", "supplyHistorySupplyType"), ("LEXMARK-MPS-MIB", "supplyHistoryColorantValue"), ("LEXMARK-MPS-MIB", "supplyHistoryDescription"), ("LEXMARK-MPS-MIB", "supplyHistorySerialNumber"), ("LEXMARK-MPS-MIB", "supplyHistoryCartridgeType"), ("LEXMARK-MPS-MIB", "supplyHistoryInstallDate"), ("LEXMARK-MPS-MIB", "supplyHistoryPageCount"), ("LEXMARK-MPS-MIB", "supplyHistoryCapacityUnit"), ("LEXMARK-MPS-MIB", "supplyHistoryCapacity"), ("LEXMARK-MPS-MIB", "supplyHistoryLastLevel"), ("LEXMARK-MPS-MIB", "supplyHistoryUsage"), ("LEXMARK-MPS-MIB", "supplyHistoryCalibrations"), ("LEXMARK-MPS-MIB", "supplyHistoryCoverage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsSupplyHistoryGroup = statsSupplyHistoryGroup.setStatus('current')
statsSupplyHistogramGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 14)).setObjects(("LEXMARK-MPS-MIB", "supplyHistogramInventoryIndex"), ("LEXMARK-MPS-MIB", "supplyHistogramSupplyType"), ("LEXMARK-MPS-MIB", "supplyHistogramColorantValue"), ("LEXMARK-MPS-MIB", "supplyHistogramDescription"), ("LEXMARK-MPS-MIB", "supplyHistogramCapacityUnit"), ("LEXMARK-MPS-MIB", "supplyHistogramCapacity"), ("LEXMARK-MPS-MIB", "supplyHistogramCount"), ("LEXMARK-MPS-MIB", "supplyHistogramCountUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statsSupplyHistogramGroup = statsSupplyHistogramGroup.setStatus('current')
deviceAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 641, 6, 1, 2, 16)).setObjects(("LEXMARK-MPS-MIB", "deviceAlertIndex"), ("LEXMARK-MPS-MIB", "deviceAlertConfigTableNode"), ("LEXMARK-MPS-MIB", "deviceAlertConfigTableIndex"), ("LEXMARK-MPS-MIB", "deviceAlertSeverity"), ("LEXMARK-MPS-MIB", "deviceAlertCode"), ("LEXMARK-MPS-MIB", "deviceAlertDescription"), ("LEXMARK-MPS-MIB", "deviceAlertData"), ("LEXMARK-MPS-MIB", "deviceAlertTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deviceAlertGroup = deviceAlertGroup.setStatus('current')
mpsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 641, 6, 1, 1, 1)).setObjects(("LEXMARK-MPS-MIB", "deviceGroup"), ("LEXMARK-MPS-MIB", "deviceGroup"), ("LEXMARK-MPS-MIB", "hwInventoryGroup"), ("LEXMARK-MPS-MIB", "supplyInventoryGroup"), ("LEXMARK-MPS-MIB", "swInventoryGroup"), ("LEXMARK-MPS-MIB", "statsGeneralCountGroup"), ("LEXMARK-MPS-MIB", "statsPaperGeneralCountGroup"), ("LEXMARK-MPS-MIB", "statsPaperSidesCountGroup"), ("LEXMARK-MPS-MIB", "statsPaperSheetsCountGroup"), ("LEXMARK-MPS-MIB", "statsPaperNupCountGroup"), ("LEXMARK-MPS-MIB", "statsPaperJobSizeGroup"), ("LEXMARK-MPS-MIB", "statsScanGroup"), ("LEXMARK-MPS-MIB", "statsCurrentSuppliesGroup"), ("LEXMARK-MPS-MIB", "statsSupplyHistoryGroup"), ("LEXMARK-MPS-MIB", "statsSupplyHistogramGroup"), ("LEXMARK-MPS-MIB", "deviceAlertGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mpsMIBCompliance = mpsMIBCompliance.setStatus('current')
mibBuilder.exportSymbols("LEXMARK-MPS-MIB", supplyInventoryGroup=supplyInventoryGroup, supplyHistogramIndex=supplyHistogramIndex, deviceAlertGroup=deviceAlertGroup, statsSupplyHistoryGroup=statsSupplyHistoryGroup, paperNupCountEntry=paperNupCountEntry, scanCountTable=scanCountTable, deviceAlertConfigTableNode=deviceAlertConfigTableNode, paperJobSizeTable=paperJobSizeTable, paperJobSizeSideCount=paperJobSizeSideCount, statsPaperGeneralCountGroup=statsPaperGeneralCountGroup, generalStats=generalStats, hwInventoryType=hwInventoryType, supplyInventoryColorantValue=supplyInventoryColorantValue, currentSupplyColorantValue=currentSupplyColorantValue, deviceV2AlertMPS=deviceV2AlertMPS, swInventoryRevision=swInventoryRevision, supplyHistoryCapacity=supplyHistoryCapacity, paperSheetsCountEntry=paperSheetsCountEntry, statsPaperJobSizeGroup=statsPaperJobSizeGroup, deviceAlertEntry=deviceAlertEntry, supplyInventoryType=supplyInventoryType, supplyHistoryCartridgeType=supplyHistoryCartridgeType, scanCountSheets=scanCountSheets, deviceModel=deviceModel, swInventoryStatus=swInventoryStatus, scanCountIndex=scanCountIndex, paperJobSizeEntry=paperJobSizeEntry, paperJobSizeMaximum=paperJobSizeMaximum, paperSidesCountIndex=paperSidesCountIndex, scanCountEntry=scanCountEntry, scanCountType=scanCountType, supplyInventoryTable=supplyInventoryTable, swInventoryAdminStatus=swInventoryAdminStatus, paperJobSizeMinimum=paperJobSizeMinimum, currentSupplyClass=currentSupplyClass, swInventoryDescription=swInventoryDescription, supplyHistoryInventoryIndex=supplyHistoryInventoryIndex, currentSuppliesEntry=currentSuppliesEntry, supplyHistoryCapacityUnit=supplyHistoryCapacityUnit, deviceAlertData=deviceAlertData, alerts=alerts, paperSidesCountEntry=paperSidesCountEntry, deviceV1AlertMPS=deviceV1AlertMPS, currentSupplyCapacity=currentSupplyCapacity, supplyStats=supplyStats, inventory=inventory, hwInventoryEntry=hwInventoryEntry, paperSidesMonoPicked=paperSidesMonoPicked, supplyHistoryColorantValue=supplyHistoryColorantValue, hwInventoryGroup=hwInventoryGroup, genCountIndex=genCountIndex, supplyHistoryEntry=supplyHistoryEntry, mps=mps, supplyHistoryPageCount=supplyHistoryPageCount, deviceAlertSeverity=deviceAlertSeverity, statsGeneralCountGroup=statsGeneralCountGroup, deviceAlertTime=deviceAlertTime, CartridgeTypeTC=CartridgeTypeTC, currentSupplyCapacityUnit=currentSupplyCapacityUnit, hwInventoryAdminStatus=hwInventoryAdminStatus, currentSupplyDescription=currentSupplyDescription, paperStats=paperStats, PYSNMP_MODULE_ID=mpsMibModule, paperNupSides=paperNupSides, paperGeneralCountEntry=paperGeneralCountEntry, paperSheetsPaperType=paperSheetsPaperType, genCountTable=genCountTable, statsSupplyHistogramGroup=statsSupplyHistogramGroup, supplyHistogramCount=supplyHistogramCount, currentSupplySerialNumber=currentSupplySerialNumber, swInventoryIndex=swInventoryIndex, paperGeneralCountUnits=paperGeneralCountUnits, paperNupCountTable=paperNupCountTable, swInventoryParentIndex=swInventoryParentIndex, supplyHistogramSupplyType=supplyHistogramSupplyType, supplyHistogramCapacity=supplyHistogramCapacity, genCountEntry=genCountEntry, currentSupplyIndex=currentSupplyIndex, currentSupplyCoverage=currentSupplyCoverage, paperNupLogicalSides=paperNupLogicalSides, paperGeneralCountType=paperGeneralCountType, paperSidesPaperSize=paperSidesPaperSize, deviceInstallDate=deviceInstallDate, currentSupplyInventoryIndex=currentSupplyInventoryIndex, supplyHistoryCoverage=supplyHistoryCoverage, deviceAlertIndex=deviceAlertIndex, mpsMIBAdminInfo=mpsMIBAdminInfo, swInventoryTable=swInventoryTable, genCountType=genCountType, mpsMIBCompliance=mpsMIBCompliance, supplyInventoryIndex=supplyInventoryIndex, currentSupplyCalibrations=currentSupplyCalibrations, SupplyTypeTC=SupplyTypeTC, paperJobSizeIndex=paperJobSizeIndex, supplyHistoryIndex=supplyHistoryIndex, hwInventoryDescription=hwInventoryDescription, swInventoryGroup=swInventoryGroup, deviceAlertTable=deviceAlertTable, supplyHistorySerialNumber=supplyHistorySerialNumber, paperSidesPaperType=paperSidesPaperType, paperSheetsCountTable=paperSheetsCountTable, paperSheetsCountIndex=paperSheetsCountIndex, supplyHistogramEntry=supplyHistogramEntry, device=device, statsPaperNupCountGroup=statsPaperNupCountGroup, deviceAlertConfigTableIndex=deviceAlertConfigTableIndex, supplyHistogramTable=supplyHistogramTable, deviceMibLocalization=deviceMibLocalization, paperGeneralCountValue=paperGeneralCountValue, mpsMIBCompliances=mpsMIBCompliances, currentSupplyFirstKnownLevel=currentSupplyFirstKnownLevel, swInventoryType=swInventoryType, paperSidesCountTable=paperSidesCountTable, swInventoryHWIndex=swInventoryHWIndex, paperNupCountIndex=paperNupCountIndex, currentSupplyInstallDate=currentSupplyInstallDate, paperSheetsPicked=paperSheetsPicked, currentSupplyUsage=currentSupplyUsage, devicePort=devicePort, deviceV2AlertMPSPrefix=deviceV2AlertMPSPrefix, currentSupplyCartridgeType=currentSupplyCartridgeType, hwInventoryParentIndex=hwInventoryParentIndex, hwInventorySerialNumber=hwInventorySerialNumber, paperSidesColorSafe=paperSidesColorSafe, currentSuppliesTable=currentSuppliesTable, supplyHistoryInstallDate=supplyHistoryInstallDate, supplyHistoryCalibrations=supplyHistoryCalibrations, deviceMibVersion=deviceMibVersion, hwInventoryStatus=hwInventoryStatus, swInventoryName=swInventoryName, scanCountSize=scanCountSize, supplyHistoryDescription=supplyHistoryDescription, supplyHistogramCountUnits=supplyHistogramCountUnits, statsPaperSheetsCountGroup=statsPaperSheetsCountGroup, SeverityTC=SeverityTC, genCountValue=genCountValue, paperGeneralCountIndex=paperGeneralCountIndex, mpsMibModule=mpsMibModule, statsCurrentSuppliesGroup=statsCurrentSuppliesGroup, deviceSerialNumber=deviceSerialNumber, supplyHistoryLastLevel=supplyHistoryLastLevel, mpsMIBGroups=mpsMIBGroups, stats=stats, paperGeneralCountTable=paperGeneralCountTable, paperSheetsSafe=paperSheetsSafe, currentSupplyPartNumber=currentSupplyPartNumber, deviceMibSupportLevel=deviceMibSupportLevel, swInventoryEntry=swInventoryEntry, paperNupNumber=paperNupNumber, paperSidesColorPicked=paperSidesColorPicked, hwInventoryPartNumber=hwInventoryPartNumber, hwInventoryTable=hwInventoryTable, currentSupplyPageCountAtInstall=currentSupplyPageCountAtInstall, currentSupplyType=currentSupplyType, paperJobSizeJobCount=paperJobSizeJobCount, scanCountSides=scanCountSides, supplyHistoryTable=supplyHistoryTable, supplyHistoryUsage=supplyHistoryUsage, scanStats=scanStats, supplyHistogramInventoryIndex=supplyHistogramInventoryIndex, paperSheetsPaperSize=paperSheetsPaperSize, AlertCodeTC=AlertCodeTC, statsScanGroup=statsScanGroup, deviceTable=deviceTable, supplyHistogramDescription=supplyHistogramDescription, logs=logs, currentSupplyCurrentStatus=currentSupplyCurrentStatus, supplyHistorySupplyType=supplyHistorySupplyType, applications=applications, supplyHistogramColorantValue=supplyHistogramColorantValue, supplyHistogramCapacityUnit=supplyHistogramCapacityUnit, deviceAlertDescription=deviceAlertDescription, genCountUnits=genCountUnits, deviceEntry=deviceEntry, supplyInventoryEntry=supplyInventoryEntry, swInventoryData=swInventoryData, deviceHrDeviceIndex=deviceHrDeviceIndex, statsPaperSidesCountGroup=statsPaperSidesCountGroup, deviceIndex=deviceIndex, deviceGroup=deviceGroup, deviceAlertCode=deviceAlertCode, supplyInventoryDescription=supplyInventoryDescription, hwInventoryIndex=hwInventoryIndex, paperSidesMonoSafe=paperSidesMonoSafe, hwInventoryData=hwInventoryData, currentSupplyCurrentLevel=currentSupplyCurrentLevel)
