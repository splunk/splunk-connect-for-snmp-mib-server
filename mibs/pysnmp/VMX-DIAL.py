#
# PySNMP MIB module VMX-DIAL (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VMX-DIAL
# Produced by pysmi-0.3.4 at Mon Apr 29 21:28:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
sysDescr, = mibBuilder.importSymbols("RFC1158-MIB", "sysDescr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, NotificationType, Integer32, ModuleIdentity, Counter64, MibIdentifier, Gauge32, iso, IpAddress, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "NotificationType", "Integer32", "ModuleIdentity", "Counter64", "MibIdentifier", "Gauge32", "iso", "IpAddress", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
octel = MibIdentifier((1, 3, 6, 1, 4, 1, 662))
octelOIDs = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 1))
octelPlatforms = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 1, 1))
vmx200 = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 1, 1, 3))
vmx300 = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 1, 1, 4))
octelProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3))
vmxDial = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 1))
dNetstat = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 2))
location = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 3))
hwerr = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 4))
message = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1))
lanCh = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2))
lanConn = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3))
systemName = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemName.setStatus('mandatory')
sysSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNum.setStatus('mandatory')
systemID = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemID.setStatus('mandatory')
sentVoiceMsgs = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sentVoiceMsgs.setStatus('mandatory')
recvVoiceMsgs = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recvVoiceMsgs.setStatus('mandatory')
sentFaxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sentFaxMsgs.setStatus('mandatory')
recvFaxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recvFaxMsgs.setStatus('mandatory')
recvNames = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recvNames.setStatus('mandatory')
playedRtNames = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: playedRtNames.setStatus('mandatory')
secSent = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secSent.setStatus('mandatory')
secRecv = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secRecv.setStatus('mandatory')
lchNumber = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lchNumber.setStatus('mandatory')
sec50pct = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sec50pct.setStatus('mandatory')
sec75pct = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sec75pct.setStatus('mandatory')
sec100pct = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sec100pct.setStatus('mandatory')
lchInSendSec = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lchInSendSec.setStatus('mandatory')
lchInRecvSec = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lchInRecvSec.setStatus('mandatory')
outAttempts = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outAttempts.setStatus('mandatory')
outRejects = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outRejects.setStatus('mandatory')
outGotBusys = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outGotBusys.setStatus('mandatory')
inAttempts = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inAttempts.setStatus('mandatory')
inRejects = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inRejects.setStatus('mandatory')
inGotBusys = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inGotBusys.setStatus('mandatory')
lanAvailPct = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanAvailPct.setStatus('mandatory')
locTable = MibTable((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1), )
if mibBuilder.loadTexts: locTable.setStatus('mandatory')
locEntry = MibTableRow((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1), ).setIndexNames((0, "VMX-DIAL", "locIndex"))
if mibBuilder.loadTexts: locEntry.setStatus('mandatory')
locIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIndex.setStatus('mandatory')
locName = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locName.setStatus('mandatory')
locIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIpAddr.setStatus('mandatory')
locLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowspeed", 1), ("highspeed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkType.setStatus('mandatory')
locInDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locInDomain.setStatus('mandatory')
locColocated = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locColocated.setStatus('mandatory')
locroute = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 7))
route1 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: route1.setStatus('mandatory')
route2 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: route2.setStatus('mandatory')
route3 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: route3.setStatus('mandatory')
locConn = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8))
cattempts = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cattempts.setStatus('mandatory')
cfailures = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfailures.setStatus('mandatory')
cdroppeds = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdroppeds.setStatus('mandatory')
cbusys = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbusys.setStatus('mandatory')
cdayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdayMin.setStatus('mandatory')
cnightMin = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnightMin.setStatus('mandatory')
msgDelivery = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9))
mdvcAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdvcAttempts.setStatus('mandatory')
mdvcFails = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdvcFails.setStatus('mandatory')
mdvcRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdvcRetries.setStatus('mandatory')
mdfxAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdfxAttempts.setStatus('mandatory')
mdfxFails = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdfxFails.setStatus('mandatory')
mdfxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdfxRetries.setStatus('mandatory')
mdDiskfulls = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdDiskfulls.setStatus('mandatory')
mdMbxfails = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdMbxfails.setStatus('mandatory')
mdMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdMinute.setStatus('mandatory')
locPlayedNames = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locPlayedNames.setStatus('mandatory')
locLinkdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkdrops.setStatus('mandatory')
locAnalogstndbys = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locAnalogstndbys.setStatus('mandatory')
hwerrTable = MibTable((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1), )
if mibBuilder.loadTexts: hwerrTable.setStatus('mandatory')
hwerrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1), ).setIndexNames((0, "VMX-DIAL", "heIdx"))
if mibBuilder.loadTexts: hwerrEntry.setStatus('mandatory')
heIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heIdx.setStatus('mandatory')
heType = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heType.setStatus('mandatory')
heSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heSlot.setStatus('mandatory')
heMon = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heMon.setStatus('mandatory')
heDay = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heDay.setStatus('mandatory')
heHour = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heHour.setStatus('mandatory')
heMin = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heMin.setStatus('mandatory')
heCh = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heCh.setStatus('mandatory')
hePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hePrio.setStatus('mandatory')
heCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heCnt.setStatus('mandatory')
heData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heData1.setStatus('mandatory')
heData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heData2.setStatus('mandatory')
heData3 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heData3.setStatus('mandatory')
heData4 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heData4.setStatus('mandatory')
hwerrTrap = NotificationType((1, 3, 6, 1, 4, 1, 662) + (0,1)).setObjects(("RFC1158-MIB", "sysDescr"), ("VMX-DIAL", "heType"), ("VMX-DIAL", "heSlot"), ("VMX-DIAL", "heMon"), ("VMX-DIAL", "heDay"), ("VMX-DIAL", "heHour"), ("VMX-DIAL", "heMin"), ("VMX-DIAL", "heCh"), ("VMX-DIAL", "hePrio"), ("VMX-DIAL", "heCnt"), ("VMX-DIAL", "heData1"), ("VMX-DIAL", "heData2"), ("VMX-DIAL", "heData3"), ("VMX-DIAL", "heData4"))
mibBuilder.exportSymbols("VMX-DIAL", msgDelivery=msgDelivery, mdDiskfulls=mdDiskfulls, inAttempts=inAttempts, lanCh=lanCh, heIdx=heIdx, cbusys=cbusys, sec50pct=sec50pct, sec100pct=sec100pct, cnightMin=cnightMin, secRecv=secRecv, config=config, mdfxFails=mdfxFails, cdroppeds=cdroppeds, mdvcRetries=mdvcRetries, lanConn=lanConn, mdfxRetries=mdfxRetries, heCnt=heCnt, inGotBusys=inGotBusys, locLinkType=locLinkType, cdayMin=cdayMin, locName=locName, octelProducts=octelProducts, outRejects=outRejects, heMon=heMon, locEntry=locEntry, locColocated=locColocated, hwerrTrap=hwerrTrap, heHour=heHour, locConn=locConn, heCh=heCh, heData1=heData1, mdMinute=mdMinute, locLinkdrops=locLinkdrops, octelOIDs=octelOIDs, hwerr=hwerr, mdvcAttempts=mdvcAttempts, hwerrEntry=hwerrEntry, cattempts=cattempts, recvFaxMsgs=recvFaxMsgs, hePrio=hePrio, outGotBusys=outGotBusys, recvVoiceMsgs=recvVoiceMsgs, heData3=heData3, heDay=heDay, message=message, vmxDial=vmxDial, mdfxAttempts=mdfxAttempts, lchInRecvSec=lchInRecvSec, vmx200=vmx200, playedRtNames=playedRtNames, hwerrTable=hwerrTable, secSent=secSent, lchNumber=lchNumber, lanAvailPct=lanAvailPct, locAnalogstndbys=locAnalogstndbys, heMin=heMin, locroute=locroute, locPlayedNames=locPlayedNames, sentVoiceMsgs=sentVoiceMsgs, route1=route1, inRejects=inRejects, sysSerialNum=sysSerialNum, locInDomain=locInDomain, heType=heType, mdMbxfails=mdMbxfails, heSlot=heSlot, route2=route2, lchInSendSec=lchInSendSec, outAttempts=outAttempts, mdvcFails=mdvcFails, locIpAddr=locIpAddr, recvNames=recvNames, locIndex=locIndex, dNetstat=dNetstat, systemName=systemName, systemID=systemID, cfailures=cfailures, heData4=heData4, octelPlatforms=octelPlatforms, sentFaxMsgs=sentFaxMsgs, sec75pct=sec75pct, route3=route3, locTable=locTable, vmx300=vmx300, octel=octel, heData2=heData2, location=location)
