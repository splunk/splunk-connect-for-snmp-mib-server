#
# PySNMP MIB module HP-SN-APPLETALK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SN-APPLETALK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ATName, ATNetworkNumber, DdpNodeAddress = mibBuilder.importSymbols("APPLETALK-MIB", "ATName", "ATNetworkNumber", "DdpNodeAddress")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
RowSts, PortIndex, Action, RtrStatus, ClearStatus = mibBuilder.importSymbols("HP-SN-IP-MIB", "RowSts", "PortIndex", "Action", "RtrStatus", "ClearStatus")
snAppleTalk, = mibBuilder.importSymbols("HP-SN-ROOT-MIB", "snAppleTalk")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, NotificationType, Unsigned32, IpAddress, TimeTicks, Integer32, iso, ObjectIdentity, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "NotificationType", "Unsigned32", "IpAddress", "TimeTicks", "Integer32", "iso", "ObjectIdentity", "Counter64", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snRtATGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1))
snRtATRoutingEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 1), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATRoutingEnable.setStatus('mandatory')
snRtATClearArpCache = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 2), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATClearArpCache.setStatus('mandatory')
snRtATClearFwdCache = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 3), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATClearFwdCache.setStatus('mandatory')
snRtATClearRoute = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 4), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATClearRoute.setStatus('mandatory')
snRtATClearTrafficCounters = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 5), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATClearTrafficCounters.setStatus('mandatory')
snRtATArpRetransmitCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATArpRetransmitCount.setStatus('mandatory')
snRtATArpRetransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATArpRetransmitInterval.setStatus('mandatory')
snRtATGleanPacketsEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 8), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATGleanPacketsEnable.setStatus('mandatory')
snRtATRtmpUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATRtmpUpdateInterval.setStatus('mandatory')
snRtATZipQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATZipQueryInterval.setStatus('mandatory')
snRtATInRtmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInRtmpPkts.setStatus('mandatory')
snRtATOutRtmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutRtmpPkts.setStatus('mandatory')
snRtATFilteredRtmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFilteredRtmpPkts.setStatus('mandatory')
snRtATInZipPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInZipPkts.setStatus('mandatory')
snRtATOutZipPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutZipPkts.setStatus('mandatory')
snRtATInZipGZLPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInZipGZLPkts.setStatus('mandatory')
snRtATOutZipGZLPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutZipGZLPkts.setStatus('mandatory')
snRtATInZipNetInfoPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInZipNetInfoPkts.setStatus('mandatory')
snRtATOutZipNetInfoPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutZipNetInfoPkts.setStatus('mandatory')
snRtATInDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInDdpPkts.setStatus('mandatory')
snRtATOutDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutDdpPkts.setStatus('mandatory')
snRtATForwardedDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATForwardedDdpPkts.setStatus('mandatory')
snRtATInDeliveredDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInDeliveredDdpPkts.setStatus('mandatory')
snRtATDroppedNoRouteDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATDroppedNoRouteDdpPkts.setStatus('mandatory')
snRtATDroppedBadHopCountsDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATDroppedBadHopCountsDdpPkts.setStatus('mandatory')
snRtATDroppedOtherReasonsDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATDroppedOtherReasonsDdpPkts.setStatus('mandatory')
snRtATInAarpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInAarpPkts.setStatus('mandatory')
snRtATOutAarpPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutAarpPkts.setStatus('mandatory')
snRtATSocketPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 2), )
if mibBuilder.loadTexts: snRtATSocketPriorityTable.setStatus('mandatory')
snRtATSocketPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 2, 1), ).setIndexNames((0, "HP-SN-APPLETALK-MIB", "snRtATSocketPrioritySocket"))
if mibBuilder.loadTexts: snRtATSocketPriorityEntry.setStatus('mandatory')
snRtATSocketPrioritySocket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATSocketPrioritySocket.setStatus('mandatory')
snRtATSocketPriorityPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATSocketPriorityPriority.setStatus('mandatory')
snRtATPortZoneFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 3), )
if mibBuilder.loadTexts: snRtATPortZoneFilterTable.setStatus('mandatory')
snRtATPortZoneFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 3, 1), ).setIndexNames((0, "HP-SN-APPLETALK-MIB", "snRtATPortZoneFilterPortIndex"), (0, "HP-SN-APPLETALK-MIB", "snRtATPortZoneFilterZone"))
if mibBuilder.loadTexts: snRtATPortZoneFilterEntry.setStatus('mandatory')
snRtATPortZoneFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 3, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortZoneFilterPortIndex.setStatus('mandatory')
snRtATPortZoneFilterZone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 3, 1, 2), ATName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortZoneFilterZone.setStatus('mandatory')
snRtATPortZoneFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 3, 1, 3), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATPortZoneFilterAction.setStatus('mandatory')
snRtATPortZoneFilterRtmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 3, 1, 4), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATPortZoneFilterRtmpEnable.setStatus('mandatory')
snRtATPortZoneFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 3, 1, 5), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATPortZoneFilterRowStatus.setStatus('mandatory')
snRtATPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 4), )
if mibBuilder.loadTexts: snRtATPortTable.setStatus('mandatory')
snRtATPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 4, 1), ).setIndexNames((0, "HP-SN-APPLETALK-MIB", "snRtATPortIndex"))
if mibBuilder.loadTexts: snRtATPortEntry.setStatus('mandatory')
snRtATPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 4, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortIndex.setStatus('mandatory')
snRtATPortArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATPortArpAge.setStatus('mandatory')
snRtATPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortState.setStatus('mandatory')
snRtATPortSeedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("seedRouter", 2), ("nonSeedRouter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortSeedRouter.setStatus('mandatory')
snRtATPortOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("seedRouter", 2), ("nonSeedRouter", 3), ("notOperational", 4), ("routingDisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortOperationMode.setStatus('mandatory')
snRtATFwdCacheTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5), )
if mibBuilder.loadTexts: snRtATFwdCacheTable.setStatus('mandatory')
snRtATFwdCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1), ).setIndexNames((0, "HP-SN-APPLETALK-MIB", "snRtATFwdCacheIndex"))
if mibBuilder.loadTexts: snRtATFwdCacheEntry.setStatus('mandatory')
snRtATFwdCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheIndex.setStatus('mandatory')
snRtATFwdCacheNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1, 2), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheNetAddr.setStatus('mandatory')
snRtATFwdCacheMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheMacAddr.setStatus('mandatory')
snRtATFwdCacheNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1, 4), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheNextHop.setStatus('mandatory')
snRtATFwdCacheOutgoingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheOutgoingPort.setStatus('mandatory')
snRtATFwdCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheType.setStatus('mandatory')
snRtATFwdCacheAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("forward", 2), ("forUs", 3), ("waitForArp", 4), ("dropPacket", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheAction.setStatus('mandatory')
snRtATFwdCacheVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheVLanId.setStatus('mandatory')
snRtATZoneTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 6), )
if mibBuilder.loadTexts: snRtATZoneTable.setStatus('mandatory')
snRtATZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 6, 1), ).setIndexNames((0, "HP-SN-APPLETALK-MIB", "snRtATZoneIndex"))
if mibBuilder.loadTexts: snRtATZoneEntry.setStatus('mandatory')
snRtATZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATZoneIndex.setStatus('mandatory')
snRtATZoneNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 6, 1, 2), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATZoneNetStart.setStatus('mandatory')
snRtATZoneNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 6, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATZoneNetEnd.setStatus('mandatory')
snRtATZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 6, 1, 4), ATName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATZoneName.setStatus('mandatory')
snRtATAddZoneFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 7), )
if mibBuilder.loadTexts: snRtATAddZoneFilterTable.setStatus('mandatory')
snRtATAddZoneFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 7, 1), ).setIndexNames((0, "HP-SN-APPLETALK-MIB", "snRtATAddZoneFilterPortIndex"))
if mibBuilder.loadTexts: snRtATAddZoneFilterEntry.setStatus('mandatory')
snRtATAddZoneFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 7, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATAddZoneFilterPortIndex.setStatus('mandatory')
snRtATAddZoneFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 7, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATAddZoneFilterAction.setStatus('mandatory')
snRtATAddZoneFilterRtmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 10, 7, 1, 3), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATAddZoneFilterRtmpEnable.setStatus('mandatory')
mibBuilder.exportSymbols("HP-SN-APPLETALK-MIB", snRtATFwdCacheNetAddr=snRtATFwdCacheNetAddr, snRtATGeneral=snRtATGeneral, snRtATFwdCacheTable=snRtATFwdCacheTable, snRtATForwardedDdpPkts=snRtATForwardedDdpPkts, snRtATPortSeedRouter=snRtATPortSeedRouter, snRtATInZipNetInfoPkts=snRtATInZipNetInfoPkts, snRtATInRtmpPkts=snRtATInRtmpPkts, snRtATAddZoneFilterEntry=snRtATAddZoneFilterEntry, snRtATPortZoneFilterRowStatus=snRtATPortZoneFilterRowStatus, snRtATOutAarpPkts=snRtATOutAarpPkts, snRtATAddZoneFilterAction=snRtATAddZoneFilterAction, snRtATRtmpUpdateInterval=snRtATRtmpUpdateInterval, snRtATZoneName=snRtATZoneName, snRtATPortState=snRtATPortState, snRtATSocketPrioritySocket=snRtATSocketPrioritySocket, snRtATFwdCacheEntry=snRtATFwdCacheEntry, snRtATInDdpPkts=snRtATInDdpPkts, snRtATPortArpAge=snRtATPortArpAge, snRtATOutRtmpPkts=snRtATOutRtmpPkts, snRtATPortZoneFilterZone=snRtATPortZoneFilterZone, snRtATPortOperationMode=snRtATPortOperationMode, snRtATFwdCacheOutgoingPort=snRtATFwdCacheOutgoingPort, snRtATZoneNetStart=snRtATZoneNetStart, snRtATAddZoneFilterTable=snRtATAddZoneFilterTable, snRtATOutZipPkts=snRtATOutZipPkts, snRtATPortEntry=snRtATPortEntry, snRtATArpRetransmitCount=snRtATArpRetransmitCount, snRtATClearTrafficCounters=snRtATClearTrafficCounters, snRtATSocketPriorityPriority=snRtATSocketPriorityPriority, snRtATInZipPkts=snRtATInZipPkts, snRtATPortTable=snRtATPortTable, snRtATZoneNetEnd=snRtATZoneNetEnd, snRtATDroppedBadHopCountsDdpPkts=snRtATDroppedBadHopCountsDdpPkts, snRtATZoneEntry=snRtATZoneEntry, snRtATFwdCacheIndex=snRtATFwdCacheIndex, snRtATPortZoneFilterTable=snRtATPortZoneFilterTable, snRtATAddZoneFilterRtmpEnable=snRtATAddZoneFilterRtmpEnable, snRtATZoneTable=snRtATZoneTable, snRtATSocketPriorityEntry=snRtATSocketPriorityEntry, snRtATPortZoneFilterPortIndex=snRtATPortZoneFilterPortIndex, snRtATFilteredRtmpPkts=snRtATFilteredRtmpPkts, snRtATOutZipNetInfoPkts=snRtATOutZipNetInfoPkts, snRtATZoneIndex=snRtATZoneIndex, snRtATDroppedOtherReasonsDdpPkts=snRtATDroppedOtherReasonsDdpPkts, snRtATSocketPriorityTable=snRtATSocketPriorityTable, snRtATInZipGZLPkts=snRtATInZipGZLPkts, snRtATOutZipGZLPkts=snRtATOutZipGZLPkts, snRtATPortZoneFilterRtmpEnable=snRtATPortZoneFilterRtmpEnable, snRtATPortZoneFilterEntry=snRtATPortZoneFilterEntry, snRtATFwdCacheMacAddr=snRtATFwdCacheMacAddr, snRtATDroppedNoRouteDdpPkts=snRtATDroppedNoRouteDdpPkts, snRtATFwdCacheAction=snRtATFwdCacheAction, snRtATClearArpCache=snRtATClearArpCache, snRtATClearFwdCache=snRtATClearFwdCache, snRtATArpRetransmitInterval=snRtATArpRetransmitInterval, snRtATAddZoneFilterPortIndex=snRtATAddZoneFilterPortIndex, snRtATInDeliveredDdpPkts=snRtATInDeliveredDdpPkts, snRtATInAarpPkts=snRtATInAarpPkts, snRtATClearRoute=snRtATClearRoute, snRtATFwdCacheVLanId=snRtATFwdCacheVLanId, snRtATGleanPacketsEnable=snRtATGleanPacketsEnable, snRtATFwdCacheType=snRtATFwdCacheType, snRtATOutDdpPkts=snRtATOutDdpPkts, snRtATPortIndex=snRtATPortIndex, snRtATPortZoneFilterAction=snRtATPortZoneFilterAction, snRtATFwdCacheNextHop=snRtATFwdCacheNextHop, snRtATZipQueryInterval=snRtATZipQueryInterval, snRtATRoutingEnable=snRtATRoutingEnable)
