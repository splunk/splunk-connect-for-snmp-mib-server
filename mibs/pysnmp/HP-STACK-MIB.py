#
# PySNMP MIB module HP-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-STACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:24:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
hpSwitchBaseMACAddress, = mibBuilder.importSymbols("NETSWITCH-MIB", "hpSwitchBaseMACAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, TimeTicks, Integer32, Gauge32, Counter64, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, iso, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Integer32", "Gauge32", "Counter64", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
hpStackMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69))
hpStackMIB.setRevisions(('2010-01-03 00:00',))
if mibBuilder.loadTexts: hpStackMIB.setLastUpdated('201001030000Z')
if mibBuilder.loadTexts: hpStackMIB.setOrganization('HP Networking')
hpStackNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0))
hpStackObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1))
hpStackConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2))
hpStackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1))
hpStackId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackId.setStatus('current')
hpStackOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unAvailable", 0), ("disabled", 1), ("active", 2), ("fragmentInactive", 3), ("fragmentActive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackOperStatus.setStatus('current')
hpStackSetStacking = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSetStacking.setStatus('current')
hpStackTopology = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unKnown", 0), ("chain", 1), ("ring", 2), ("mesh", 3), ("partialMesh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackTopology.setStatus('current')
hpStackTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackTrapEnable.setStatus('current')
hpStackSplitPolicy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneFragmentUp", 1), ("allFragmentsUp", 2))).clone('oneFragmentUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSplitPolicy.setStatus('current')
hpStackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2), )
if mibBuilder.loadTexts: hpStackConfigTable.setStatus('current')
hpStackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1), ).setIndexNames((0, "HP-STACK-MIB", "hpStackSequenceNum"))
if mibBuilder.loadTexts: hpStackConfigEntry.setStatus('current')
hpStackSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hpStackSequenceNum.setStatus('current')
hpStackSwitchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSwitchAdminStatus.setStatus('current')
hpStackSwitchPreferredPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSwitchPreferredPriority.setStatus('current')
hpStackSwitchPreferredMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSwitchPreferredMemberId.setStatus('current')
hpStackMemberTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3), )
if mibBuilder.loadTexts: hpStackMemberTable.setStatus('current')
hpStackMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1), ).setIndexNames((0, "HP-STACK-MIB", "hpStackMemberId"))
if mibBuilder.loadTexts: hpStackMemberEntry.setStatus('current')
hpStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpStackMemberId.setStatus('current')
hpStackMemberProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberProductId.setStatus('current')
hpStackMemberMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberMacAddr.setStatus('current')
hpStackMemberShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberShutdown.setStatus('current')
hpStackMemberReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberReboot.setStatus('current')
hpStackMemberAdminPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberAdminPriority.setStatus('current')
hpStackMemberEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberEntryStatus.setStatus('current')
hpStackMemberEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 8), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberEntPhysicalIndex.setStatus('current')
hpStackMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unusedId", 0), ("missing", 1), ("provision", 2), ("commander", 3), ("standby", 4), ("member", 5), ("shutdown", 6), ("booting", 7), ("communicationFailure", 8), ("incompatibleOs", 9), ("unknownState", 10), ("standbyBooting", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberState.setStatus('current')
hpStackMemberProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberProductName.setStatus('current')
hpStackMemberUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberUpTime.setStatus('current')
hpStackMemberSysOid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberSysOid.setStatus('current')
hpStackMemberIdForTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpStackMemberIdForTrap.setStatus('current')
hpStackMemberSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberSerialNum.setStatus('current')
hpStackMemberCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberCpuUtil.setStatus('current')
hpStackMemberTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberTotalMemory.setStatus('current')
hpStackMemberFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberFreeMemory.setStatus('current')
hpStackMemberBootRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberBootRomVersion.setStatus('current')
hpStackMemberOsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberOsVersion.setStatus('current')
hpStackMemberBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberBootImage.setStatus('current')
hpStackPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5), )
if mibBuilder.loadTexts: hpStackPortTable.setStatus('current')
hpStackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1), ).setIndexNames((0, "HP-STACK-MIB", "hpStackMemberId"), (0, "HP-STACK-MIB", "hpStackPortId"), (0, "HP-STACK-MIB", "hpStackPortType"))
if mibBuilder.loadTexts: hpStackPortEntry.setStatus('current')
hpStackPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpStackPortId.setStatus('current')
hpStackPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backPlane", 1), ("frontPlane", 2))))
if mibBuilder.loadTexts: hpStackPortType.setStatus('current')
hpStackPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("blocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackPortOperStatus.setStatus('current')
hpStackPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackPortNeighbor.setStatus('current')
hpStackPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackPortCost.setStatus('current')
hpStackPortIdForTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpStackPortIdForTrap.setStatus('current')
hpStackPortTypeForTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backPlane", 1), ("frontPlane", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpStackPortTypeForTrap.setStatus('current')
hpStackPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackPortAdminStatus.setStatus('current')
hpStackPortChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 1)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackPortIdForTrap"), ("HP-STACK-MIB", "hpStackPortTypeForTrap"), ("HP-STACK-MIB", "hpStackPortOperStatus"), ("HP-STACK-MIB", "hpStackPortNeighbor"))
if mibBuilder.loadTexts: hpStackPortChange.setStatus('current')
hpStackCommanderChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 2)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberState"))
if mibBuilder.loadTexts: hpStackCommanderChange.setStatus('current')
hpStackMemberChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 3)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberState"))
if mibBuilder.loadTexts: hpStackMemberChange.setStatus('current')
hpStackMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 4)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("NETSWITCH-MIB", "hpSwitchBaseMACAddress"), ("HP-STACK-MIB", "hpStackMemberState"))
if mibBuilder.loadTexts: hpStackMemberStatusChange.setStatus('current')
hpStackMergeFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 5)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberState"), ("HP-STACK-MIB", "hpStackId"))
if mibBuilder.loadTexts: hpStackMergeFailed.setStatus('current')
hpStackMergeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 6)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberState"), ("HP-STACK-MIB", "hpStackId"))
if mibBuilder.loadTexts: hpStackMergeSuccess.setStatus('current')
hpStackCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 1))
hpStackGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2))
hpStackCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 1, 1)).setObjects(("HP-STACK-MIB", "hpStackConfigScalarGroup"), ("HP-STACK-MIB", "hpStackMemberGroup"), ("HP-STACK-MIB", "hpStackPortGroup"), ("HP-STACK-MIB", "hpStackNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackCompliance = hpStackCompliance.setStatus('current')
hpStackConfigScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2, 1)).setObjects(("HP-STACK-MIB", "hpStackId"), ("HP-STACK-MIB", "hpStackOperStatus"), ("HP-STACK-MIB", "hpStackSetStacking"), ("HP-STACK-MIB", "hpStackTopology"), ("HP-STACK-MIB", "hpStackTrapEnable"), ("HP-STACK-MIB", "hpStackSwitchAdminStatus"), ("HP-STACK-MIB", "hpStackSwitchPreferredPriority"), ("HP-STACK-MIB", "hpStackSwitchPreferredMemberId"), ("HP-STACK-MIB", "hpStackSplitPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackConfigScalarGroup = hpStackConfigScalarGroup.setStatus('current')
hpStackMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2, 2)).setObjects(("HP-STACK-MIB", "hpStackMemberProductId"), ("HP-STACK-MIB", "hpStackMemberMacAddr"), ("HP-STACK-MIB", "hpStackMemberShutdown"), ("HP-STACK-MIB", "hpStackMemberReboot"), ("HP-STACK-MIB", "hpStackMemberAdminPriority"), ("HP-STACK-MIB", "hpStackMemberEntryStatus"), ("HP-STACK-MIB", "hpStackMemberEntPhysicalIndex"), ("HP-STACK-MIB", "hpStackMemberState"), ("HP-STACK-MIB", "hpStackMemberProductName"), ("HP-STACK-MIB", "hpStackMemberUpTime"), ("HP-STACK-MIB", "hpStackMemberSysOid"), ("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberSerialNum"), ("HP-STACK-MIB", "hpStackMemberCpuUtil"), ("HP-STACK-MIB", "hpStackMemberTotalMemory"), ("HP-STACK-MIB", "hpStackMemberFreeMemory"), ("HP-STACK-MIB", "hpStackMemberBootRomVersion"), ("HP-STACK-MIB", "hpStackMemberOsVersion"), ("HP-STACK-MIB", "hpStackMemberBootImage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackMemberGroup = hpStackMemberGroup.setStatus('current')
hpStackPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2, 3)).setObjects(("HP-STACK-MIB", "hpStackPortOperStatus"), ("HP-STACK-MIB", "hpStackPortNeighbor"), ("HP-STACK-MIB", "hpStackPortCost"), ("HP-STACK-MIB", "hpStackPortIdForTrap"), ("HP-STACK-MIB", "hpStackPortTypeForTrap"), ("HP-STACK-MIB", "hpStackPortAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackPortGroup = hpStackPortGroup.setStatus('current')
hpStackNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2, 4)).setObjects(("HP-STACK-MIB", "hpStackPortChange"), ("HP-STACK-MIB", "hpStackCommanderChange"), ("HP-STACK-MIB", "hpStackMemberChange"), ("HP-STACK-MIB", "hpStackMemberStatusChange"), ("HP-STACK-MIB", "hpStackMergeFailed"), ("HP-STACK-MIB", "hpStackMergeSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackNotificationsGroup = hpStackNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("HP-STACK-MIB", hpStackConfigScalarGroup=hpStackConfigScalarGroup, hpStackCommanderChange=hpStackCommanderChange, hpStackMemberTable=hpStackMemberTable, hpStackMemberEntPhysicalIndex=hpStackMemberEntPhysicalIndex, hpStackCompliance=hpStackCompliance, hpStackId=hpStackId, hpStackMemberMacAddr=hpStackMemberMacAddr, hpStackPortIdForTrap=hpStackPortIdForTrap, hpStackPortNeighbor=hpStackPortNeighbor, hpStackOperStatus=hpStackOperStatus, hpStackMemberCpuUtil=hpStackMemberCpuUtil, hpStackSplitPolicy=hpStackSplitPolicy, hpStackConfigEntry=hpStackConfigEntry, hpStackPortCost=hpStackPortCost, hpStackSwitchPreferredMemberId=hpStackSwitchPreferredMemberId, hpStackMemberProductId=hpStackMemberProductId, hpStackMemberChange=hpStackMemberChange, hpStackMemberEntry=hpStackMemberEntry, hpStackPortId=hpStackPortId, hpStackGroups=hpStackGroups, hpStackPortChange=hpStackPortChange, hpStackMergeSuccess=hpStackMergeSuccess, hpStackMemberUpTime=hpStackMemberUpTime, hpStackPortType=hpStackPortType, hpStackConformance=hpStackConformance, hpStackMemberStatusChange=hpStackMemberStatusChange, PYSNMP_MODULE_ID=hpStackMIB, hpStackSwitchPreferredPriority=hpStackSwitchPreferredPriority, hpStackMemberReboot=hpStackMemberReboot, hpStackMemberEntryStatus=hpStackMemberEntryStatus, hpStackMemberOsVersion=hpStackMemberOsVersion, hpStackMergeFailed=hpStackMergeFailed, hpStackCompliances=hpStackCompliances, hpStackMemberBootRomVersion=hpStackMemberBootRomVersion, hpStackSwitchAdminStatus=hpStackSwitchAdminStatus, hpStackMIB=hpStackMIB, hpStackMemberBootImage=hpStackMemberBootImage, hpStackObjects=hpStackObjects, hpStackMemberState=hpStackMemberState, hpStackTopology=hpStackTopology, hpStackPortGroup=hpStackPortGroup, hpStackMemberTotalMemory=hpStackMemberTotalMemory, hpStackMemberId=hpStackMemberId, hpStackMemberGroup=hpStackMemberGroup, hpStackMemberProductName=hpStackMemberProductName, hpStackSetStacking=hpStackSetStacking, hpStackPortEntry=hpStackPortEntry, hpStackPortTypeForTrap=hpStackPortTypeForTrap, hpStackMemberAdminPriority=hpStackMemberAdminPriority, hpStackSequenceNum=hpStackSequenceNum, hpStackMemberFreeMemory=hpStackMemberFreeMemory, hpStackNotificationsGroup=hpStackNotificationsGroup, hpStackMemberIdForTrap=hpStackMemberIdForTrap, hpStackConfig=hpStackConfig, hpStackConfigTable=hpStackConfigTable, hpStackTrapEnable=hpStackTrapEnable, hpStackPortOperStatus=hpStackPortOperStatus, hpStackPortTable=hpStackPortTable, hpStackMemberSysOid=hpStackMemberSysOid, hpStackMemberShutdown=hpStackMemberShutdown, hpStackPortAdminStatus=hpStackPortAdminStatus, hpStackNotifications=hpStackNotifications, hpStackMemberSerialNum=hpStackMemberSerialNum)
