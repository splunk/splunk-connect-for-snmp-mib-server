#
# PySNMP MIB module CXFrameRelay-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXFrameRelay-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
cxModuleHwPhysSlot, = mibBuilder.importSymbols("CXModuleHardware-MIB", "cxModuleHwPhysSlot")
SapIndex, Alias, cxFrameRelay = mibBuilder.importSymbols("CXProduct-SMI", "SapIndex", "Alias", "cxFrameRelay")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, NotificationType, TimeTicks, IpAddress, MibIdentifier, Counter64, NotificationType, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "NotificationType", "TimeTicks", "IpAddress", "MibIdentifier", "Counter64", "NotificationType", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "ObjectIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DLCI(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1022)

frpSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1), )
if mibBuilder.loadTexts: frpSapTable.setStatus('mandatory')
frpSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1), ).setIndexNames((0, "CXFrameRelay-MIB", "frpSapNumber"))
if mibBuilder.loadTexts: frpSapEntry.setStatus('mandatory')
frpSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapNumber.setStatus('mandatory')
frpSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapRowStatus.setStatus('mandatory')
frpSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapAlias.setStatus('mandatory')
frpSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapCompanionAlias.setStatus('mandatory')
frpSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapType.setStatus('mandatory')
frpSapAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4))).clone('two-octets')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapAddressLength.setStatus('mandatory')
frpSapMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapMaxSupportedVCs.setStatus('deprecated')
frpSapVCBase = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapVCBase.setStatus('deprecated')
frpSapOutCongestionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapOutCongestionManagement.setStatus('mandatory')
frpSapResourceAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapResourceAllocation.setStatus('mandatory')
frpSapLinkManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("frameRelayForum", 2), ("ansiAnnexD", 3), ("ccittAnnexA", 4), ("dama1", 5), ("dama2", 6), ("auto", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapLinkManagement.setStatus('mandatory')
frpSapInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uniUser", 1), ("uniNetwork", 2), ("nni", 3))).clone('uniUser')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapInterfaceType.setStatus('mandatory')
frpSapPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPollingInterval.setStatus('mandatory')
frpSapPollingVerification = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPollingVerification.setStatus('mandatory')
frpSapFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapFullEnquiryInterval.setStatus('mandatory')
frpSapErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapErrorThreshold.setStatus('mandatory')
frpSapMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapMonitoredEvents.setStatus('mandatory')
frpSapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frameRelay", 1), ("transparent", 2), ("frameRelayAtmNIwf", 3))).clone('frameRelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapMode.setStatus('mandatory')
frpSapPrioQueue1HitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPrioQueue1HitRatio.setStatus('mandatory')
frpSapPrioQueue2HitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPrioQueue2HitRatio.setStatus('mandatory')
frpSapPrioQueue3HitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPrioQueue3HitRatio.setStatus('mandatory')
frpSapPrioQueue4HitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPrioQueue4HitRatio.setStatus('mandatory')
frpSapDialEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapDialEntry.setStatus('mandatory')
frpSapFilterBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapFilterBitMap.setStatus('mandatory')
frpSapLmiFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("strict", 2), ("tolerant", 3))).clone('tolerant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapLmiFlavor.setStatus('mandatory')
frpSapGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("retrigger", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGenerator.setStatus('mandatory')
frpSapGeneratorDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 34), DLCI().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGeneratorDlciNumber.setStatus('mandatory')
frpSapGeneratorFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4096)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGeneratorFrameSize.setStatus('mandatory')
frpSapGeneratorNumberOfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGeneratorNumberOfFrames.setStatus('mandatory')
frpSapGeneratorInterFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 60000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGeneratorInterFrameDelay.setStatus('mandatory')
frpSapBillingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 525600)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapBillingTimer.setStatus('mandatory')
frpSapSdLmMessageInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapSdLmMessageInterval.setStatus('obsolete')
frpSapSdLmActiveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapSdLmActiveTimer.setStatus('obsolete')
frpSaptrapTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSaptrapTrap1.setStatus('mandatory')
frpSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("retriggerBillingTimer", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frpSapControl.setStatus('mandatory')
frpSapControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearSapStats", 1), ("clearAllCircuitStats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frpSapControlStats.setStatus('mandatory')
frpSapstatLinkManagementState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkDown", 1), ("linkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLinkManagementState.setStatus('mandatory')
frpSapstatCurrentLinkManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("frameRelayForum", 2), ("ansiAnnexD", 3), ("ccittAnnexA", 4), ("dama1", 5), ("dama2", 6), ("discovering", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatCurrentLinkManagementType.setStatus('mandatory')
frpSapstatTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatTxDataFrames.setStatus('mandatory')
frpSapstatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxDataFrames.setStatus('mandatory')
frpSapstatTxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatTxDataOctets.setStatus('mandatory')
frpSapstatRxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxDataOctets.setStatus('mandatory')
frpSapstatTxLmiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatTxLmiFrames.setStatus('mandatory')
frpSapstatRxLmiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxLmiFrames.setStatus('mandatory')
frpSapstatTxQueuedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatTxQueuedDiscards.setStatus('mandatory')
frpSapstatRxCIRExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxCIRExceededDiscards.setStatus('mandatory')
frpSapstatRxSysCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxSysCongestionDiscards.setStatus('mandatory')
frpSapstatRxUnavailInboundDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxUnavailInboundDiscards.setStatus('mandatory')
frpSapstatRxUnavailOutboundDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxUnavailOutboundDiscards.setStatus('mandatory')
frpSapstatRxInvalidVCDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxInvalidVCDiscards.setStatus('mandatory')
frpSapstatRxBadStatusDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxBadStatusDiscards.setStatus('mandatory')
frpSapstatRxMiscellaneousDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxMiscellaneousDiscards.setStatus('mandatory')
frpSapstatRxCIRExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxCIRExceeds.setStatus('mandatory')
frpSapstatRxShortFrameDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxShortFrameDiscards.setStatus('mandatory')
frpSapstatLmiInvalidFieldDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidFieldDiscards.setStatus('mandatory')
frpSapstatLmiInvalidSequenceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidSequenceDiscards.setStatus('mandatory')
frpSapstatLmiTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiTimeouts.setStatus('mandatory')
frpSapstatLmiInvalidStatusDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidStatusDiscards.setStatus('mandatory')
frpSapstatLmiInvalidStatusEnqDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidStatusEnqDiscards.setStatus('mandatory')
frpSapstatLmiInvalidUpdStatusDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidUpdStatusDiscards.setStatus('mandatory')
frpCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2), )
if mibBuilder.loadTexts: frpCircuitTable.setStatus('mandatory')
frpCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1), ).setIndexNames((0, "CXFrameRelay-MIB", "frpCircuitSapNumber"), (0, "CXFrameRelay-MIB", "frpCircuitDlci"))
if mibBuilder.loadTexts: frpCircuitEntry.setStatus('mandatory')
frpCircuitSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitSapNumber.setStatus('mandatory')
frpCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitDlci.setStatus('mandatory')
frpCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitRowStatus.setStatus('mandatory')
frpCircuitPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("veryHigh", 1), ("high", 2), ("medium", 3), ("low", 4))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitPriorityLevel.setStatus('mandatory')
frpCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCommittedBurst.setStatus('mandatory')
frpCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitExcessBurst.setStatus('mandatory')
frpCircuitCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCommittedInformationRate.setStatus('mandatory')
frpCircuitCIRManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-inbound", 2), ("monitor-inbound", 3), ("enabled-outbound", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCIRManagement.setStatus('mandatory')
frpCircuitMultiProtEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitMultiProtEncaps.setStatus('mandatory')
frpCircuitHighPriorityBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitHighPriorityBurst.setStatus('mandatory')
frpCircuitLowPriorityBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitLowPriorityBurst.setStatus('mandatory')
frpCircuitFragmentationSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitFragmentationSize.setStatus('mandatory')
frpCircuitAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 19), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitAlias.setStatus('mandatory')
frpCircuitCompanionSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCompanionSapNumber.setStatus('mandatory')
frpCircuitCompanionDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCompanionDlci.setStatus('mandatory')
frpCircuitAlternateSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitAlternateSapNumber.setStatus('mandatory')
frpCircuitAlternateDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitAlternateDlci.setStatus('mandatory')
frpCircuitMulticastGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitMulticastGroupId.setStatus('mandatory')
frpCircuitMulticastType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noMulticastAssociation", 1), ("rootOneWay", 2), ("leafOneWay", 3), ("rootTwoWay", 4), ("leafTwoWay", 5), ("rootNWay", 6), ("rootTwoWaySinglePass", 7), ("leafTwoWaySinglePass", 8))).clone('noMulticastAssociation')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitMulticastType.setStatus('mandatory')
frpCircuitCompressionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCompressionPort.setStatus('mandatory')
frpCircuitExpressService = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitExpressService.setStatus('mandatory')
frpCircuittrapTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuittrapTrap1.setStatus('mandatory')
frpCircuittrapTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuittrapTrap2.setStatus('mandatory')
frpCircuitControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearCircuitStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frpCircuitControlStats.setStatus('mandatory')
frpCircuitstatReportedState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notReported", 1), ("reportedActive", 2), ("reportedInactive", 3))).clone('notReported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatReportedState.setStatus('mandatory')
frpCircuitstatRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRoute", 1), ("routeNotOperational", 2), ("routeOperational", 3))).clone('noRoute')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRouteState.setStatus('mandatory')
frpCircuitstatAlternateRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noRoute", 1), ("routeNotOperational", 2), ("routeOperational", 3), ("alternateCircuit", 4))).clone('noRoute')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatAlternateRouteState.setStatus('mandatory')
frpCircuitstatLocalCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 47), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatLocalCreationTime.setStatus('mandatory')
frpCircuitstatRemoteCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 48), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRemoteCreationTime.setStatus('mandatory')
frpCircuitstatTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxFrames.setStatus('mandatory')
frpCircuitstatRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxFrames.setStatus('mandatory')
frpCircuitstatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxOctets.setStatus('mandatory')
frpCircuitstatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxOctets.setStatus('mandatory')
frpCircuitstatTxFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxFECNs.setStatus('mandatory')
frpCircuitstatRxFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxFECNs.setStatus('mandatory')
frpCircuitstatTxBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxBECNs.setStatus('mandatory')
frpCircuitstatRxBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxBECNs.setStatus('mandatory')
frpCircuitstatTxQueuedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxQueuedDiscards.setStatus('mandatory')
frpCircuitstatRxCIRExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxCIRExceededDiscards.setStatus('mandatory')
frpCircuitstatRxSysCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxSysCongestionDiscards.setStatus('mandatory')
frpCircuitstatRxUnavailInboundDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxUnavailInboundDiscards.setStatus('mandatory')
frpCircuitstatRxUnavailOutboundDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxUnavailOutboundDiscards.setStatus('mandatory')
frpCircuitstatRxCIRExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxCIRExceeds.setStatus('mandatory')
frpCircuitstatFragmentationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatFragmentationFailures.setStatus('mandatory')
frpCircuitstatDeFragmentationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatDeFragmentationFailures.setStatus('mandatory')
frpReportedPvcTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3), )
if mibBuilder.loadTexts: frpReportedPvcTable.setStatus('mandatory')
frpReportedPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1), ).setIndexNames((0, "CXFrameRelay-MIB", "frpReportedPvcSapNumber"))
if mibBuilder.loadTexts: frpReportedPvcEntry.setStatus('mandatory')
frpReportedPvcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpReportedPvcSapNumber.setStatus('mandatory')
frpReportedPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpReportedPvcDlci.setStatus('mandatory')
frpReportedPvcLocallyConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpReportedPvcLocallyConfigured.setStatus('mandatory')
frpReportedPvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpReportedPvcStatus.setStatus('mandatory')
frpMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4), )
if mibBuilder.loadTexts: frpMulticastTable.setStatus('mandatory')
frpMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1), ).setIndexNames((0, "CXFrameRelay-MIB", "frpMulticastGroupId"), (0, "CXFrameRelay-MIB", "frpMulticastSapNumber"), (0, "CXFrameRelay-MIB", "frpMulticastDlci"))
if mibBuilder.loadTexts: frpMulticastEntry.setStatus('mandatory')
frpMulticastGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMulticastGroupId.setStatus('mandatory')
frpMulticastSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 2), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMulticastSapNumber.setStatus('mandatory')
frpMulticastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 3), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMulticastDlci.setStatus('mandatory')
frpMulticastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpMulticastRowStatus.setStatus('mandatory')
frpMulticastMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("root", 1), ("leaf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpMulticastMemberType.setStatus('mandatory')
frpMulticastServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneWay", 1), ("twoWay", 2), ("nWay", 3), ("twoWaySinglePass", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpMulticastServiceType.setStatus('mandatory')
frpMulticastMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMulticastMemberStatus.setStatus('mandatory')
frpMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMibLevel.setStatus('mandatory')
frpSapInterfaceStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3) + (0,1)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXFrameRelay-MIB", "frpSapNumber"), ("CXFrameRelay-MIB", "frpSapstatLinkManagementState"))
frpPvcReportedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3) + (0,2)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXFrameRelay-MIB", "frpCircuitSapNumber"), ("CXFrameRelay-MIB", "frpCircuitDlci"), ("CXFrameRelay-MIB", "frpCircuitstatReportedState"))
frpPvcBillingStats = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3) + (0,3)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXFrameRelay-MIB", "frpCircuitSapNumber"), ("CXFrameRelay-MIB", "frpCircuitDlci"), ("CXFrameRelay-MIB", "frpCircuitstatTxFrames"), ("CXFrameRelay-MIB", "frpCircuitstatRxFrames"), ("CXFrameRelay-MIB", "frpCircuitstatTxOctets"), ("CXFrameRelay-MIB", "frpCircuitstatRxOctets"))
mibBuilder.exportSymbols("CXFrameRelay-MIB", frpCircuitstatRxCIRExceededDiscards=frpCircuitstatRxCIRExceededDiscards, frpSapGenerator=frpSapGenerator, frpSapstatLinkManagementState=frpSapstatLinkManagementState, frpPvcBillingStats=frpPvcBillingStats, frpSapInterfaceType=frpSapInterfaceType, frpMulticastTable=frpMulticastTable, frpCircuitstatRxBECNs=frpCircuitstatRxBECNs, frpSapstatRxUnavailOutboundDiscards=frpSapstatRxUnavailOutboundDiscards, frpSapstatLmiTimeouts=frpSapstatLmiTimeouts, frpSapControlStats=frpSapControlStats, frpCircuitstatRouteState=frpCircuitstatRouteState, frpCircuitstatRemoteCreationTime=frpCircuitstatRemoteCreationTime, frpSapSdLmMessageInterval=frpSapSdLmMessageInterval, frpCircuitstatDeFragmentationFailures=frpCircuitstatDeFragmentationFailures, frpSapPrioQueue1HitRatio=frpSapPrioQueue1HitRatio, frpSapTable=frpSapTable, frpSapstatRxDataOctets=frpSapstatRxDataOctets, frpCircuitLowPriorityBurst=frpCircuitLowPriorityBurst, frpMulticastDlci=frpMulticastDlci, frpCircuitCompanionSapNumber=frpCircuitCompanionSapNumber, frpSapGeneratorFrameSize=frpSapGeneratorFrameSize, frpReportedPvcEntry=frpReportedPvcEntry, frpSapControl=frpSapControl, frpSapGeneratorInterFrameDelay=frpSapGeneratorInterFrameDelay, frpMibLevel=frpMibLevel, frpSapGeneratorNumberOfFrames=frpSapGeneratorNumberOfFrames, frpMulticastRowStatus=frpMulticastRowStatus, frpSapstatLmiInvalidUpdStatusDiscards=frpSapstatLmiInvalidUpdStatusDiscards, frpMulticastGroupId=frpMulticastGroupId, frpSapPollingInterval=frpSapPollingInterval, frpSapstatRxLmiFrames=frpSapstatRxLmiFrames, frpSapNumber=frpSapNumber, frpSapFilterBitMap=frpSapFilterBitMap, frpCircuitFragmentationSize=frpCircuitFragmentationSize, frpCircuitstatAlternateRouteState=frpCircuitstatAlternateRouteState, frpSapMode=frpSapMode, frpSapLinkManagement=frpSapLinkManagement, frpCircuitstatRxOctets=frpCircuitstatRxOctets, frpCircuittrapTrap2=frpCircuittrapTrap2, frpSapstatRxMiscellaneousDiscards=frpSapstatRxMiscellaneousDiscards, frpSapRowStatus=frpSapRowStatus, frpCircuitRowStatus=frpCircuitRowStatus, frpSapstatRxSysCongestionDiscards=frpSapstatRxSysCongestionDiscards, frpSapPrioQueue4HitRatio=frpSapPrioQueue4HitRatio, frpSapstatRxDataFrames=frpSapstatRxDataFrames, frpSapOutCongestionManagement=frpSapOutCongestionManagement, frpSapstatTxDataFrames=frpSapstatTxDataFrames, frpCircuitExpressService=frpCircuitExpressService, frpCircuitAlternateSapNumber=frpCircuitAlternateSapNumber, frpCircuitCompanionDlci=frpCircuitCompanionDlci, frpSapAddressLength=frpSapAddressLength, frpSapPollingVerification=frpSapPollingVerification, frpCircuitCommittedBurst=frpCircuitCommittedBurst, frpCircuitSapNumber=frpCircuitSapNumber, frpPvcReportedStatusChange=frpPvcReportedStatusChange, frpReportedPvcDlci=frpReportedPvcDlci, frpSapstatRxCIRExceededDiscards=frpSapstatRxCIRExceededDiscards, frpSapPrioQueue3HitRatio=frpSapPrioQueue3HitRatio, frpReportedPvcTable=frpReportedPvcTable, frpCircuitstatRxFrames=frpCircuitstatRxFrames, frpCircuitExcessBurst=frpCircuitExcessBurst, frpCircuitstatFragmentationFailures=frpCircuitstatFragmentationFailures, frpCircuitstatLocalCreationTime=frpCircuitstatLocalCreationTime, frpSapstatLmiInvalidStatusEnqDiscards=frpSapstatLmiInvalidStatusEnqDiscards, frpSapstatTxLmiFrames=frpSapstatTxLmiFrames, frpReportedPvcStatus=frpReportedPvcStatus, frpSapGeneratorDlciNumber=frpSapGeneratorDlciNumber, frpMulticastServiceType=frpMulticastServiceType, frpSapMonitoredEvents=frpSapMonitoredEvents, frpReportedPvcSapNumber=frpReportedPvcSapNumber, frpSaptrapTrap1=frpSaptrapTrap1, frpSapstatLmiInvalidStatusDiscards=frpSapstatLmiInvalidStatusDiscards, frpCircuitCommittedInformationRate=frpCircuitCommittedInformationRate, frpCircuittrapTrap1=frpCircuittrapTrap1, frpReportedPvcLocallyConfigured=frpReportedPvcLocallyConfigured, frpCircuitstatRxSysCongestionDiscards=frpCircuitstatRxSysCongestionDiscards, frpMulticastMemberType=frpMulticastMemberType, frpSapstatLmiInvalidFieldDiscards=frpSapstatLmiInvalidFieldDiscards, frpSapstatRxBadStatusDiscards=frpSapstatRxBadStatusDiscards, frpSapstatCurrentLinkManagementType=frpSapstatCurrentLinkManagementType, frpSapstatRxCIRExceeds=frpSapstatRxCIRExceeds, frpSapErrorThreshold=frpSapErrorThreshold, frpSapAlias=frpSapAlias, frpSapMaxSupportedVCs=frpSapMaxSupportedVCs, frpCircuitstatTxFECNs=frpCircuitstatTxFECNs, frpSapResourceAllocation=frpSapResourceAllocation, frpSapBillingTimer=frpSapBillingTimer, frpSapEntry=frpSapEntry, frpSapstatRxInvalidVCDiscards=frpSapstatRxInvalidVCDiscards, frpSapstatTxDataOctets=frpSapstatTxDataOctets, frpSapVCBase=frpSapVCBase, frpCircuitAlias=frpCircuitAlias, frpCircuitstatRxFECNs=frpCircuitstatRxFECNs, frpSapstatLmiInvalidSequenceDiscards=frpSapstatLmiInvalidSequenceDiscards, frpCircuitstatReportedState=frpCircuitstatReportedState, frpMulticastEntry=frpMulticastEntry, DLCI=DLCI, frpMulticastSapNumber=frpMulticastSapNumber, frpCircuitstatRxUnavailOutboundDiscards=frpCircuitstatRxUnavailOutboundDiscards, frpMulticastMemberStatus=frpMulticastMemberStatus, frpCircuitMulticastType=frpCircuitMulticastType, frpCircuitMultiProtEncaps=frpCircuitMultiProtEncaps, frpSapPrioQueue2HitRatio=frpSapPrioQueue2HitRatio, frpCircuitTable=frpCircuitTable, frpCircuitCIRManagement=frpCircuitCIRManagement, frpSapstatTxQueuedDiscards=frpSapstatTxQueuedDiscards, frpCircuitstatRxCIRExceeds=frpCircuitstatRxCIRExceeds, frpSapSdLmActiveTimer=frpSapSdLmActiveTimer, frpCircuitPriorityLevel=frpCircuitPriorityLevel, frpCircuitHighPriorityBurst=frpCircuitHighPriorityBurst, frpCircuitstatRxUnavailInboundDiscards=frpCircuitstatRxUnavailInboundDiscards, frpSapInterfaceStatusChange=frpSapInterfaceStatusChange, frpSapFullEnquiryInterval=frpSapFullEnquiryInterval, frpSapCompanionAlias=frpSapCompanionAlias, frpCircuitAlternateDlci=frpCircuitAlternateDlci, frpCircuitMulticastGroupId=frpCircuitMulticastGroupId, frpCircuitControlStats=frpCircuitControlStats, frpCircuitEntry=frpCircuitEntry, frpCircuitstatTxOctets=frpCircuitstatTxOctets, frpCircuitstatTxFrames=frpCircuitstatTxFrames, frpSapstatRxShortFrameDiscards=frpSapstatRxShortFrameDiscards, frpSapDialEntry=frpSapDialEntry, frpCircuitDlci=frpCircuitDlci, frpCircuitstatTxQueuedDiscards=frpCircuitstatTxQueuedDiscards, frpSapstatRxUnavailInboundDiscards=frpSapstatRxUnavailInboundDiscards, frpCircuitstatTxBECNs=frpCircuitstatTxBECNs, frpSapLmiFlavor=frpSapLmiFlavor, frpSapType=frpSapType, frpCircuitCompressionPort=frpCircuitCompressionPort)
