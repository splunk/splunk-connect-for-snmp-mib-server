#
# PySNMP MIB module A3COM-HUAWEI-MPLSOAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-MPLSOAM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:51:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, Integer32, Unsigned32, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, MibIdentifier, ObjectIdentity, NotificationType, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Unsigned32", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "MibIdentifier", "ObjectIdentity", "NotificationType", "TimeTicks", "ModuleIdentity")
TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
h3cMplsOam = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79))
if mibBuilder.loadTexts: h3cMplsOam.setLastUpdated('200703310000Z')
if mibBuilder.loadTexts: h3cMplsOam.setOrganization('Huawei 3Com Technologies Co., Ltd.')
class H3cMplsOAMDefectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSIMismatch", 4), ("dTTSIMismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dRlsnDown", 8), ("dLspDown", 9), ("dME", 10), ("noDefect", 11))

class H3cMplsOAMDetectFreq(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("ffd10ms", 1), ("ffd20ms", 2), ("ffd50ms", 3), ("ffd100ms", 4), ("ffd200ms", 5), ("ffd500ms", 6), ("cv1000ms", 7))

h3cMplsOamScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 1))
h3cMplsOamCapability = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMplsOamCapability.setStatus('current')
h3cMplsOamTrapOpen = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMplsOamTrapOpen.setStatus('current')
h3cMplsOamTable = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2))
h3cMplsOamIgrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1), )
if mibBuilder.loadTexts: h3cMplsOamIgrTable.setStatus('current')
h3cMplsOamIgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamIgrIndex"))
if mibBuilder.loadTexts: h3cMplsOamIgrEntry.setStatus('current')
h3cMplsOamIgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cMplsOamIgrIndex.setStatus('current')
h3cMplsOamIgrLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamIgrLspName.setStatus('current')
h3cMplsOamIgrDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamIgrDetectType.setStatus('current')
h3cMplsOamIgrDetectFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 4), H3cMplsOAMDetectFreq()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamIgrDetectFreq.setStatus('current')
h3cMplsOamIgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamIgrRevType.setStatus('current')
h3cMplsOamIgrRevLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamIgrRevLspName.setStatus('current')
h3cMplsOamIgrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamIgrLspId.setStatus('current')
h3cMplsOamIgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamIgrEnable.setStatus('current')
h3cMplsOamIgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 9), H3cMplsOAMDefectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMplsOamIgrDefectType.setStatus('current')
h3cMplsOamIgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamIgrRowStatus.setStatus('current')
h3cMplsOamEgrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2), )
if mibBuilder.loadTexts: h3cMplsOamEgrTable.setStatus('current')
h3cMplsOamEgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamEgrIndex"))
if mibBuilder.loadTexts: h3cMplsOamEgrEntry.setStatus('current')
h3cMplsOamEgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cMplsOamEgrIndex.setStatus('current')
h3cMplsOamEgrLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrLspName.setStatus('current')
h3cMplsOamEgrDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrDetectType.setStatus('current')
h3cMplsOamEgrDetectFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 4), H3cMplsOAMDetectFreq()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrDetectFreq.setStatus('current')
h3cMplsOamEgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrRevType.setStatus('current')
h3cMplsOamEgrRevLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrRevLspName.setStatus('current')
h3cMplsOamEgrLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrLsrId.setStatus('current')
h3cMplsOamEgrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrLspId.setStatus('current')
h3cMplsOamEgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrEnable.setStatus('current')
h3cMplsOamEgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 10), H3cMplsOAMDefectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMplsOamEgrDefectType.setStatus('current')
h3cMplsOamEgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 2, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMplsOamEgrRowStatus.setStatus('current')
h3cMplsOamNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 3))
h3cMplsOamIgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 3, 1)).setObjects(("A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamIgrLspName"), ("A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamIgrDefectType"))
if mibBuilder.loadTexts: h3cMplsOamIgrLSPOutDefect.setStatus('current')
h3cMplsOamIgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 3, 2)).setObjects(("A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamIgrLspName"), ("A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamIgrDefectType"))
if mibBuilder.loadTexts: h3cMplsOamIgrLSPInDefect.setStatus('current')
h3cMplsOamEgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 3, 3)).setObjects(("A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamEgrLspName"), ("A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamEgrDefectType"))
if mibBuilder.loadTexts: h3cMplsOamEgrLSPOutDefect.setStatus('current')
h3cMplsOamEgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 79, 3, 4)).setObjects(("A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamEgrLspName"), ("A3COM-HUAWEI-MPLSOAM-MIB", "h3cMplsOamEgrDefectType"))
if mibBuilder.loadTexts: h3cMplsOamEgrLSPInDefect.setStatus('current')
mibBuilder.exportSymbols("A3COM-HUAWEI-MPLSOAM-MIB", h3cMplsOamEgrEntry=h3cMplsOamEgrEntry, h3cMplsOamNotifications=h3cMplsOamNotifications, H3cMplsOAMDetectFreq=H3cMplsOAMDetectFreq, h3cMplsOamIgrEntry=h3cMplsOamIgrEntry, h3cMplsOamIgrTable=h3cMplsOamIgrTable, h3cMplsOamIgrRevType=h3cMplsOamIgrRevType, h3cMplsOamIgrDefectType=h3cMplsOamIgrDefectType, h3cMplsOamEgrLspName=h3cMplsOamEgrLspName, h3cMplsOamTrapOpen=h3cMplsOamTrapOpen, h3cMplsOamEgrEnable=h3cMplsOamEgrEnable, h3cMplsOamTable=h3cMplsOamTable, h3cMplsOamCapability=h3cMplsOamCapability, H3cMplsOAMDefectType=H3cMplsOAMDefectType, h3cMplsOamEgrLSPOutDefect=h3cMplsOamEgrLSPOutDefect, h3cMplsOamEgrRevType=h3cMplsOamEgrRevType, h3cMplsOamEgrIndex=h3cMplsOamEgrIndex, h3cMplsOamEgrDetectFreq=h3cMplsOamEgrDetectFreq, h3cMplsOamEgrLsrId=h3cMplsOamEgrLsrId, h3cMplsOamEgrDetectType=h3cMplsOamEgrDetectType, h3cMplsOamScalarGroup=h3cMplsOamScalarGroup, h3cMplsOamIgrLSPInDefect=h3cMplsOamIgrLSPInDefect, h3cMplsOamIgrRowStatus=h3cMplsOamIgrRowStatus, h3cMplsOamEgrLspId=h3cMplsOamEgrLspId, h3cMplsOamIgrDetectFreq=h3cMplsOamIgrDetectFreq, h3cMplsOamEgrDefectType=h3cMplsOamEgrDefectType, h3cMplsOamIgrLSPOutDefect=h3cMplsOamIgrLSPOutDefect, h3cMplsOamEgrTable=h3cMplsOamEgrTable, h3cMplsOamIgrDetectType=h3cMplsOamIgrDetectType, h3cMplsOamEgrRevLspName=h3cMplsOamEgrRevLspName, h3cMplsOamEgrRowStatus=h3cMplsOamEgrRowStatus, h3cMplsOamIgrIndex=h3cMplsOamIgrIndex, h3cMplsOamIgrLspId=h3cMplsOamIgrLspId, h3cMplsOamIgrEnable=h3cMplsOamIgrEnable, h3cMplsOam=h3cMplsOam, h3cMplsOamIgrRevLspName=h3cMplsOamIgrRevLspName, h3cMplsOamEgrLSPInDefect=h3cMplsOamEgrLSPInDefect, PYSNMP_MODULE_ID=h3cMplsOam, h3cMplsOamIgrLspName=h3cMplsOamIgrLspName)
