#
# PySNMP MIB module ERI-DNX-STM1-OC3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-STM1-OC3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NestSlotAddress, trapSequence, OneByteField, LinkPortAddress, PortStatus, LinkCmdStatus, devices = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "NestSlotAddress", "trapSequence", "OneByteField", "LinkPortAddress", "PortStatus", "LinkCmdStatus", "devices")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, Counter32, TimeTicks, ModuleIdentity, Gauge32, IpAddress, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "Counter32", "TimeTicks", "ModuleIdentity", "Gauge32", "IpAddress", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eriDNXStm1Oc3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 9))
eriDNXStm1Oc3MIB.setRevisions(('2003-05-05 00:00', '2003-02-27 00:00', '2002-04-19 00:00', '2002-04-12 00:00', '2002-03-01 00:00', '2002-01-04 00:00', '2001-11-12 00:00', '2001-08-30 00:00',))
if mibBuilder.loadTexts: eriDNXStm1Oc3MIB.setLastUpdated('200305050000Z')
if mibBuilder.loadTexts: eriDNXStm1Oc3MIB.setOrganization('Eastern Research, Inc.')
dnxStm1Oc3 = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7))
opticalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1))
opticalDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2))
class PayLoadGroupType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("e1", 0), ("t1", 1))

opticalDevConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1), )
if mibBuilder.loadTexts: opticalDevConfigTable.setStatus('current')
opticalDevConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optDevCfgAddr"))
if mibBuilder.loadTexts: opticalDevConfigEntry.setStatus('current')
optDevCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 1), NestSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optDevCfgAddr.setStatus('current')
optDevCfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optDevCfgResource.setStatus('current')
optDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("stm1", 0), ("oc3", 1), ("stm1X", 2), ("oc3X", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optDevType.setStatus('current')
optDevMultiplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("au3", 0), ("au4", 1), ("sts-3", 2), ("sts-3c", 3), ("au4-vc3-Seq", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevMultiplexMode.setStatus('current')
optLineTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("loop", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optLineTiming.setStatus('current')
optDevPayload1 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 6), PayLoadGroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevPayload1.setStatus('current')
optDevPayload2 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 7), PayLoadGroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevPayload2.setStatus('current')
optDevPayload3 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 8), PayLoadGroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevPayload3.setStatus('current')
optDevCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 400, 402, 403, 414, 415, 416, 419, 421, 424, 427, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-config", 1), ("update-successful", 101), ("err-general-opt-config-error", 400), ("err-au4Seq-cannot-be-mixed-framing", 402), ("err-invalid-opt-dev-command", 403), ("err-device-is-protection-module", 414), ("err-invalid-multiplex-map", 415), ("err-invalid-payload-framing", 416), ("err-invalid-xlink-nest-num", 419), ("err-invalid-line-timing", 421), ("err-ts-alloc-not-applicable", 424), ("err-xlink-pair-not-applicable", 427), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevCmdStatus.setStatus('current')
optDevTsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alternate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevTsAlloc.setStatus('current')
optDevAssignedToNest = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevAssignedToNest.setStatus('current')
optT1E1LinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2), )
if mibBuilder.loadTexts: optT1E1LinkConfigTable.setStatus('current')
optT1E1LinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optT1E1CfgLinkAddr"))
if mibBuilder.loadTexts: optT1E1LinkConfigEntry.setStatus('current')
optT1E1CfgLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optT1E1CfgLinkAddr.setStatus('current')
optT1E1CfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optT1E1CfgResource.setStatus('current')
optT1E1CfgLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1CfgLinkName.setStatus('current')
optT1E1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 4), PortStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1Status.setStatus('current')
optT1E1Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("framed", 1), ("unframed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1Clear.setStatus('current')
optT1E1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e1", 0), ("e1Crc", 1), ("e1Cas", 2), ("e1CasCrc", 3), ("e1Unframed", 4), ("t1Esf", 5), ("t1D4", 6), ("t1Unframed", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1Framing.setStatus('current')
optT1E1RecoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 10, 15))).clone(namedValues=NamedValues(("timeout-3-secs", 3), ("timeout-10-secs", 10), ("timeout-15-secs", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1RecoverTime.setStatus('current')
optT1E1EsfFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("att-54016", 0), ("ansi-t1-403", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1EsfFormat.setStatus('current')
optT1E1UnusedTSs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("busy", 0), ("idle", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1UnusedTSs.setStatus('current')
optT1E1CfgCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 10), LinkCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1CfgCmdStatus.setStatus('current')
optT1E1NationalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 11), OneByteField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1NationalBits.setStatus('current')
optT1E1InterNational = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 12), OneByteField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1InterNational.setStatus('current')
opticalTUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1), )
if mibBuilder.loadTexts: opticalTUStatusTable.setStatus('current')
opticalTUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optTUStatusAddr"))
if mibBuilder.loadTexts: opticalTUStatusEntry.setStatus('current')
optTUStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusAddr.setStatus('current')
optTUStatusResrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusResrcId.setStatus('current')
optTUStatusLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 8, 32, 64, 2048, 4096, 65535, 2097152, 4194304, 8388608, 6291456, 1073741824, 2147483647))).clone(namedValues=NamedValues(("ok", 0), ("yel", 2), ("ais", 8), ("lof", 32), ("los", 64), ("red", 2048), ("cfa", 4096), ("oos", 65535), ("txSlip", 2097152), ("rxSlip", 4194304), ("sef", 8388608), ("slip", 6291456), ("underTest", 1073741824), ("errors", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusLinkState.setStatus('current')
optTUStatusErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusErrSecs.setStatus('current')
optTUStatusAisErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusAisErrs.setStatus('current')
optTUStatusLopErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusLopErrs.setStatus('current')
optTUStatusRdiTUErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusRdiTUErrs.setStatus('current')
optTUStatusRfiTUErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusRfiTUErrs.setStatus('current')
optTUStatusPSLMErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusPSLMErrs.setStatus('current')
optTUStatusPSLUErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusPSLUErrs.setStatus('current')
optTUStatusErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusErrFreeSecs.setStatus('current')
opticalMapperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2), )
if mibBuilder.loadTexts: opticalMapperStatusTable.setStatus('current')
opticalMapperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optMapperStatusAddr"))
if mibBuilder.loadTexts: opticalMapperStatusEntry.setStatus('current')
optMapperStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperStatusAddr.setStatus('current')
optMapperStatusResrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperStatusResrcId.setStatus('current')
optMapperState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 8, 16, 32, 64, 128, 2048, 4096, 65535, 2097152, 4194304, 8388608, 6291456, 1073741824, 2147483647))).clone(namedValues=NamedValues(("ok", 0), ("yel", 2), ("ais", 8), ("lop", 16), ("lof", 32), ("los", 64), ("rdi", 128), ("red", 2048), ("cfa", 4096), ("oos", 65535), ("txSlip", 2097152), ("rxSlip", 4194304), ("sef", 8388608), ("slip", 6291456), ("underTest", 1073741824), ("errors", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperState.setStatus('current')
optMapperErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperErrSecs.setStatus('current')
optMapperErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperErrFreeSecs.setStatus('current')
optMapperLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("off", 0), ("local", 1), ("line", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optMapperLoop.setStatus('current')
optMapperPathLOPErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperPathLOPErrs.setStatus('current')
optMapperPathAISErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperPathAISErrs.setStatus('current')
optMapperPathRDIErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperPathRDIErrs.setStatus('current')
optMapperCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 101, 114, 200, 202, 206, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("updateTest", 1), ("clearErrors", 14), ("update-successful", 101), ("clear-successful", 114), ("err-general-test-error", 200), ("err-invalid-loop-type", 202), ("err-field-cannot-be-set", 206), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optMapperCmdStatus.setStatus('current')
opticalTransportStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3), )
if mibBuilder.loadTexts: opticalTransportStatusTable.setStatus('current')
opticalTransportStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optTransportStatusAddr"))
if mibBuilder.loadTexts: opticalTransportStatusEntry.setStatus('current')
optTransportStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 1), NestSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportStatusAddr.setStatus('current')
optTransportStatusResrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportStatusResrcId.setStatus('current')
optTransportLaserState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optTransportLaserState.setStatus('current')
optTransportErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportErrSecs.setStatus('current')
optTransportErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportErrFreeSecs.setStatus('current')
optTransportLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("terminal", 1), ("facility", 2), ("pathFacility", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optTransportLoop.setStatus('current')
optTransportLineAISErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineAISErrs.setStatus('current')
optTransportLineRDIErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineRDIErrs.setStatus('current')
optTransportLineOOFErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineOOFErrs.setStatus('current')
optTransportLineLOFErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineLOFErrs.setStatus('current')
optTransportLineLOSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineLOSErrs.setStatus('current')
optTransportCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 101, 114, 400, 402, 406, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("updateTest", 1), ("clearErrors", 14), ("update-successful", 101), ("clear-successful", 114), ("err-general-test-error", 400), ("err-invalid-loop-type", 402), ("err-field-cannot-be-set", 406), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optTransportCmdStatus.setStatus('current')
dnxStm1Oc3Enterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 0))
if mibBuilder.loadTexts: dnxStm1Oc3Enterprise.setStatus('current')
optDevConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 0, 1)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-STM1-OC3-MIB", "optDevCfgAddr"), ("ERI-DNX-STM1-OC3-MIB", "optDevCmdStatus"))
if mibBuilder.loadTexts: optDevConfigTrap.setStatus('current')
optT1E1ConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 0, 2)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-STM1-OC3-MIB", "optT1E1CfgLinkAddr"), ("ERI-DNX-STM1-OC3-MIB", "optT1E1CfgCmdStatus"))
if mibBuilder.loadTexts: optT1E1ConfigTrap.setStatus('current')
mibBuilder.exportSymbols("ERI-DNX-STM1-OC3-MIB", optTransportLineLOFErrs=optTransportLineLOFErrs, dnxStm1Oc3=dnxStm1Oc3, optDevCmdStatus=optDevCmdStatus, optTransportErrSecs=optTransportErrSecs, opticalConfig=opticalConfig, optTUStatusRdiTUErrs=optTUStatusRdiTUErrs, optT1E1CfgLinkAddr=optT1E1CfgLinkAddr, optT1E1CfgLinkName=optT1E1CfgLinkName, optTUStatusLopErrs=optTUStatusLopErrs, optMapperPathAISErrs=optMapperPathAISErrs, opticalTUStatusTable=opticalTUStatusTable, optT1E1Clear=optT1E1Clear, optTransportErrFreeSecs=optTransportErrFreeSecs, optTUStatusErrSecs=optTUStatusErrSecs, optTransportLineAISErrs=optTransportLineAISErrs, optTransportLineOOFErrs=optTransportLineOOFErrs, optTransportLaserState=optTransportLaserState, optT1E1ConfigTrap=optT1E1ConfigTrap, opticalDiag=opticalDiag, optDevPayload1=optDevPayload1, optTUStatusPSLMErrs=optTUStatusPSLMErrs, optDevPayload3=optDevPayload3, optMapperStatusResrcId=optMapperStatusResrcId, optMapperCmdStatus=optMapperCmdStatus, optT1E1CfgCmdStatus=optT1E1CfgCmdStatus, optT1E1Framing=optT1E1Framing, optT1E1EsfFormat=optT1E1EsfFormat, optTUStatusPSLUErrs=optTUStatusPSLUErrs, optDevCfgAddr=optDevCfgAddr, optTUStatusErrFreeSecs=optTUStatusErrFreeSecs, optTransportStatusAddr=optTransportStatusAddr, optTransportLineLOSErrs=optTransportLineLOSErrs, PYSNMP_MODULE_ID=eriDNXStm1Oc3MIB, optDevType=optDevType, optTUStatusResrcId=optTUStatusResrcId, opticalMapperStatusEntry=opticalMapperStatusEntry, optMapperStatusAddr=optMapperStatusAddr, dnxStm1Oc3Enterprise=dnxStm1Oc3Enterprise, optT1E1NationalBits=optT1E1NationalBits, optDevTsAlloc=optDevTsAlloc, optT1E1UnusedTSs=optT1E1UnusedTSs, optT1E1InterNational=optT1E1InterNational, optT1E1LinkConfigTable=optT1E1LinkConfigTable, optTransportStatusResrcId=optTransportStatusResrcId, optLineTiming=optLineTiming, optTUStatusRfiTUErrs=optTUStatusRfiTUErrs, optT1E1Status=optT1E1Status, optTUStatusLinkState=optTUStatusLinkState, optTransportLineRDIErrs=optTransportLineRDIErrs, opticalDevConfigTable=opticalDevConfigTable, optTUStatusAddr=optTUStatusAddr, optDevCfgResource=optDevCfgResource, optTransportCmdStatus=optTransportCmdStatus, optDevPayload2=optDevPayload2, opticalTransportStatusTable=opticalTransportStatusTable, optDevMultiplexMode=optDevMultiplexMode, optDevAssignedToNest=optDevAssignedToNest, optMapperState=optMapperState, eriDNXStm1Oc3MIB=eriDNXStm1Oc3MIB, optMapperPathRDIErrs=optMapperPathRDIErrs, opticalDevConfigEntry=opticalDevConfigEntry, opticalTUStatusEntry=opticalTUStatusEntry, optTUStatusAisErrs=optTUStatusAisErrs, optT1E1RecoverTime=optT1E1RecoverTime, optMapperLoop=optMapperLoop, PayLoadGroupType=PayLoadGroupType, opticalMapperStatusTable=opticalMapperStatusTable, optMapperErrFreeSecs=optMapperErrFreeSecs, optDevConfigTrap=optDevConfigTrap, opticalTransportStatusEntry=opticalTransportStatusEntry, optMapperErrSecs=optMapperErrSecs, optTransportLoop=optTransportLoop, optT1E1CfgResource=optT1E1CfgResource, optMapperPathLOPErrs=optMapperPathLOPErrs, optT1E1LinkConfigEntry=optT1E1LinkConfigEntry)
