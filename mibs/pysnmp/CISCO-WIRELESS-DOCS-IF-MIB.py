#
# PySNMP MIB module CISCO-WIRELESS-DOCS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WIRELESS-DOCS-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:05:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CwrdBm, = mibBuilder.importSymbols("CISCO-WIRELESS-TC-MIB", "CwrdBm")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Bits, Gauge32, ModuleIdentity, Counter32, Integer32, NotificationType, ObjectIdentity, Counter64, TimeTicks, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Bits", "Gauge32", "ModuleIdentity", "Counter32", "Integer32", "NotificationType", "ObjectIdentity", "Counter64", "TimeTicks", "iso", "MibIdentifier")
TimeStamp, TextualConvention, TimeInterval, TruthValue, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TimeInterval", "TruthValue", "RowStatus", "MacAddress", "DisplayString")
ciscoWirelessDocsIfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 167))
ciscoWirelessDocsIfMib.setRevisions(('2005-12-27 10:03', '2000-06-07 10:03',))
if mibBuilder.loadTexts: ciscoWirelessDocsIfMib.setLastUpdated('200512271003Z')
if mibBuilder.loadTexts: ciscoWirelessDocsIfMib.setOrganization('Cisco Systems - Wireless Engineering')
cwdIfMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 167, 1))
cwdIfBaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1))
cwdIfSuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2))
cwdIfHeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3))
cwdIfChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 1), )
if mibBuilder.loadTexts: cwdIfChannelTable.setStatus('current')
cwdIfChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwdIfChannelEntry.setStatus('current')
cwdIfChannelUpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfChannelUpFrequency.setStatus('current')
cwdIfChannelUpWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000))).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfChannelUpWidth.setStatus('current')
cwdIfChannelDownFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfChannelDownFrequency.setStatus('current')
cwdIfChannelDownWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000))).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfChannelDownWidth.setStatus('current')
cwdIfChannelMiniSlotTimeBaseTick = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 102400000))).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfChannelMiniSlotTimeBaseTick.setStatus('current')
cwdIfChannelSubChannelPlanVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfChannelSubChannelPlanVer.setStatus('current')
cwdIfDownstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 2), )
if mibBuilder.loadTexts: cwdIfDownstreamChannelTable.setStatus('current')
cwdIfDownstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwdIfDownstreamChannelEntry.setStatus('current')
cwdIfDownChannelSubChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfDownChannelSubChannelNumber.setStatus('current')
cwdIfDownChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfDownChannelId.setStatus('current')
cwdIfDownChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfDownChannelFrequency.setStatus('current')
cwdIfDownChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000))).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfDownChannelWidth.setStatus('current')
cwdIfDownChannelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 50))).setUnits('dBm - decibel milliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfDownChannelPower.setStatus('current')
cwdIfDownChannelModProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfDownChannelModProfileIndex.setStatus('current')
cwdIfUpstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4), )
if mibBuilder.loadTexts: cwdIfUpstreamChannelTable.setStatus('current')
cwdIfUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwdIfUpstreamChannelEntry.setStatus('current')
cwdIfUpChannelSubChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfUpChannelSubChannelNumber.setStatus('current')
cwdIfUpChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfUpChannelId.setStatus('current')
cwdIfUpChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfUpChannelFrequency.setStatus('current')
cwdIfUpChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000))).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfUpChannelWidth.setStatus('current')
cwdIfUpChannelTargetPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 50))).setUnits('dBm - decibel milliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfUpChannelTargetPower.setStatus('current')
cwdIfUpChannelModProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfUpChannelModProfileIndex.setStatus('current')
cwdIfUpChannelSlotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfUpChannelSlotSize.setStatus('current')
cwdIfUpChannelTxTimingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfUpChannelTxTimingOffset.setStatus('current')
cwdIfUpChannelRangBackoffStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfUpChannelRangBackoffStart.setStatus('current')
cwdIfUpChannelRangBackoffEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfUpChannelRangBackoffEnd.setStatus('current')
cwdIfUpChannelTxBackoffStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfUpChannelTxBackoffStart.setStatus('current')
cwdIfUpChannelTxBackoffEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfUpChannelTxBackoffEnd.setStatus('current')
cwdIfQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5), )
if mibBuilder.loadTexts: cwdIfQosProfileTable.setStatus('current')
cwdIfQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosProfIndex"))
if mibBuilder.loadTexts: cwdIfQosProfileEntry.setStatus('current')
cwdIfQosProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: cwdIfQosProfIndex.setStatus('current')
cwdIfQosProfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfQosProfPriority.setStatus('current')
cwdIfQosProfMaxUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfQosProfMaxUpBandwidth.setStatus('current')
cwdIfQosProfGuarUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfQosProfGuarUpBandwidth.setStatus('current')
cwdIfQosProfMaxDownBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfQosProfMaxDownBandwidth.setStatus('current')
cwdIfQosProfMaxTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfQosProfMaxTxBurst.setStatus('current')
cwdIfQosProfBaselinePrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfQosProfBaselinePrivacy.setStatus('current')
cwdIfQosProfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfQosProfStatus.setStatus('current')
cwdIfSignalQualityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 6), )
if mibBuilder.loadTexts: cwdIfSignalQualityTable.setStatus('current')
cwdIfSignalQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwdIfSignalQualityEntry.setStatus('current')
cwdIfSigQIncludesContention = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSigQIncludesContention.setStatus('current')
cwdIfSigQUnerroreds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSigQUnerroreds.setStatus('current')
cwdIfSigQCorrecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSigQCorrecteds.setStatus('current')
cwdIfSigQUncorrectables = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSigQUncorrectables.setStatus('current')
cwdIfSigQSignalNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 6, 1, 5), CwrdBm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSigQSignalNoise.setStatus('current')
cwdIfModulationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 7), )
if mibBuilder.loadTexts: cwdIfModulationTable.setStatus('current')
cwdIfModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfModIndex"))
if mibBuilder.loadTexts: cwdIfModulationEntry.setStatus('current')
cwdIfModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cwdIfModIndex.setStatus('current')
cwdIfModRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfModRowStatus.setStatus('current')
cwdIfModBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000)).clone(6000)).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfModBandwidth.setStatus('current')
cwdIfModThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfModThroughput.setStatus('current')
cwdIfModBurstLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("veryShort", 1), ("short", 2), ("medium", 3), ("long", 4))).clone('medium')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfModBurstLength.setStatus('current')
cwdIfModMultipathRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("high", 2))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwdIfModMultipathRobustness.setStatus('current')
cwdIfSuMacTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 1), )
if mibBuilder.loadTexts: cwdIfSuMacTable.setStatus('current')
cwdIfSuMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwdIfSuMacEntry.setStatus('current')
cwdIfSuHeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuHeAddress.setStatus('current')
cwdIfSuCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("atmCells", 0), ("concatenation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuCapabilities.setStatus('current')
cwdIfSuRangingRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 1, 1, 3), TimeInterval().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfSuRangingRespTimeout.setStatus('current')
cwdIfSuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2), )
if mibBuilder.loadTexts: cwdIfSuStatusTable.setStatus('current')
cwdIfSuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwdIfSuStatusEntry.setStatus('current')
cwdIfSuStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("notReady", 2), ("notSynchronized", 3), ("phySynchronized", 4), ("usParametersAcquired", 5), ("rangingComplete", 6), ("ipComplete", 7), ("todEstablished", 8), ("securityEstablished", 9), ("paramTransferComplete", 10), ("registrationComplete", 11), ("operational", 12), ("accessDenied", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusValue.setStatus('current')
cwdIfSuStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusCode.setStatus('current')
cwdIfSuStatusTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 50))).setUnits('dBm - decibel milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusTxPower.setStatus('current')
cwdIfSuStatusResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusResets.setStatus('current')
cwdIfSuStatusLostSyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusLostSyncs.setStatus('current')
cwdIfSuStatusInvalidMaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusInvalidMaps.setStatus('current')
cwdIfSuStatusInvalidUcds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusInvalidUcds.setStatus('current')
cwdIfSuStatusInvalidRangingResp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusInvalidRangingResp.setStatus('current')
cwdIfSuStatusInvalidRegResp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusInvalidRegResp.setStatus('current')
cwdIfSuStatusT1Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusT1Timeouts.setStatus('current')
cwdIfSuStatusT2Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusT2Timeouts.setStatus('current')
cwdIfSuStatusT3Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusT3Timeouts.setStatus('current')
cwdIfSuStatusT4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusT4Timeouts.setStatus('current')
cwdIfSuStatusRangingAborteds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuStatusRangingAborteds.setStatus('current')
cwdIfSuServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3), )
if mibBuilder.loadTexts: cwdIfSuServiceTable.setStatus('current')
cwdIfSuServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuServiceId"))
if mibBuilder.loadTexts: cwdIfSuServiceEntry.setStatus('current')
cwdIfSuServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: cwdIfSuServiceId.setStatus('current')
cwdIfSuServiceQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuServiceQosProfile.setStatus('current')
cwdIfSuServiceTxSlotsImmed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuServiceTxSlotsImmed.setStatus('current')
cwdIfSuServiceTxSlotsDed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuServiceTxSlotsDed.setStatus('current')
cwdIfSuServiceTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuServiceTxRetries.setStatus('current')
cwdIfSuServiceTxExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuServiceTxExceeded.setStatus('current')
cwdIfSuServiceRqRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuServiceRqRetries.setStatus('current')
cwdIfSuServiceRqExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfSuServiceRqExceeded.setStatus('current')
cwdIfHeMacTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 1), )
if mibBuilder.loadTexts: cwdIfHeMacTable.setStatus('current')
cwdIfHeMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwdIfHeMacEntry.setStatus('current')
cwdIfHeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 1, 1, 1), Bits().clone(namedValues=NamedValues(("atmCells", 0), ("concatenation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeCapabilities.setStatus('current')
cwdIfHeSyncInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfHeSyncInterval.setStatus('current')
cwdIfHeUcdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfHeUcdInterval.setStatus('current')
cwdIfHeMaxServiceIds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeMaxServiceIds.setStatus('current')
cwdIfHeInsertionInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 1, 1, 5), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfHeInsertionInterval.setStatus('current')
cwdIfHeInvitedRangingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfHeInvitedRangingAttempts.setStatus('current')
cwdIfHeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 2), )
if mibBuilder.loadTexts: cwdIfHeStatusTable.setStatus('current')
cwdIfHeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwdIfHeStatusEntry.setStatus('current')
cwdIfHeStatusInvalidRangeReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeStatusInvalidRangeReqs.setStatus('current')
cwdIfHeStatusRangingAborteds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeStatusRangingAborteds.setStatus('current')
cwdIfHeStatusInvalidRegReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeStatusInvalidRegReqs.setStatus('current')
cwdIfHeStatusFailedRegReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeStatusFailedRegReqs.setStatus('current')
cwdIfHeStatusInvalidDataReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeStatusInvalidDataReqs.setStatus('current')
cwdIfHeStatusT5Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeStatusT5Timeouts.setStatus('current')
cwdIfHeSuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3), )
if mibBuilder.loadTexts: cwdIfHeSuStatusTable.setStatus('current')
cwdIfHeSuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusIndex"))
if mibBuilder.loadTexts: cwdIfHeSuStatusEntry.setStatus('current')
cwdIfHeSuStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cwdIfHeSuStatusIndex.setStatus('current')
cwdIfHeSuStatusMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusMacAddress.setStatus('current')
cwdIfHeSuStatusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusIpAddress.setStatus('current')
cwdIfHeSuStatusDownChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusDownChanIfIndex.setStatus('current')
cwdIfHeSuStatusUpChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusUpChanIfIndex.setStatus('current')
cwdIfHeSuStatusRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 33))).setUnits('dBm Decibel milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusRxPower.setStatus('current')
cwdIfHeSuStatusTimingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusTimingOffset.setStatus('current')
cwdIfHeSuStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ranging", 2), ("rangingAborted", 3), ("rangingComplete", 4), ("ipComplete", 5), ("registrationComplete", 6), ("accessDenied", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusValue.setStatus('current')
cwdIfHeSuStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusIfIndex.setStatus('current')
cwdIfHeSuStatusServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeSuStatusServiceId.setStatus('current')
cwdIfHeServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4), )
if mibBuilder.loadTexts: cwdIfHeServiceTable.setStatus('current')
cwdIfHeServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeServiceId"))
if mibBuilder.loadTexts: cwdIfHeServiceEntry.setStatus('current')
cwdIfHeServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: cwdIfHeServiceId.setStatus('current')
cwdIfHeServiceSuStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeServiceSuStatusIndex.setStatus('current')
cwdIfHeServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("destroyed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfHeServiceAdminStatus.setStatus('current')
cwdIfHeServiceQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeServiceQosProfile.setStatus('current')
cwdIfHeServiceCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeServiceCreateTime.setStatus('current')
cwdIfHeServiceInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeServiceInOctets.setStatus('current')
cwdIfHeServiceInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwdIfHeServiceInPackets.setStatus('current')
cwdIfHeQosProfilePermissions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 167, 1, 3, 6), Bits().clone(namedValues=NamedValues(("createByManagement", 0), ("updateByManagement", 1), ("createBySubscriberUnits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwdIfHeQosProfilePermissions.setStatus('current')
cwdIfNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 167, 2))
cwdIfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 167, 3))
cwdIfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 1))
cwdIfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 2))
cwdIfBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 1, 2)).setObjects(("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfBasicGroup"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuGroup"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeGroup"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosGroup"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosHeGroup"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfModGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwdIfBasicCompliance = cwdIfBasicCompliance.setStatus('current')
cwdIfBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 2, 1)).setObjects(("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfChannelUpFrequency"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfChannelUpWidth"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfChannelDownFrequency"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfChannelDownWidth"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfChannelMiniSlotTimeBaseTick"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfChannelSubChannelPlanVer"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfDownChannelSubChannelNumber"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfDownChannelId"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfDownChannelFrequency"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfDownChannelWidth"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfDownChannelPower"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfDownChannelModProfileIndex"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelSubChannelNumber"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelId"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelFrequency"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelWidth"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelTargetPower"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelModProfileIndex"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelSlotSize"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelTxTimingOffset"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelRangBackoffStart"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelRangBackoffEnd"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelTxBackoffStart"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfUpChannelTxBackoffEnd"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSigQIncludesContention"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSigQUnerroreds"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSigQCorrecteds"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSigQUncorrectables"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSigQSignalNoise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwdIfBasicGroup = cwdIfBasicGroup.setStatus('current')
cwdIfHeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 2, 7)).setObjects(("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeCapabilities"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSyncInterval"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeUcdInterval"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeMaxServiceIds"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeInsertionInterval"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeInvitedRangingAttempts"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeStatusInvalidRangeReqs"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeStatusRangingAborteds"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeStatusInvalidRegReqs"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeStatusFailedRegReqs"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeStatusInvalidDataReqs"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeStatusT5Timeouts"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusMacAddress"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusIpAddress"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusDownChanIfIndex"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusUpChanIfIndex"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusRxPower"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusTimingOffset"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusValue"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusIfIndex"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeSuStatusServiceId"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeServiceSuStatusIndex"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeServiceAdminStatus"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeServiceQosProfile"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeServiceCreateTime"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeServiceInOctets"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeServiceInPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwdIfHeGroup = cwdIfHeGroup.setStatus('current')
cwdIfSuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 2, 2)).setObjects(("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuHeAddress"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuCapabilities"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuRangingRespTimeout"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusValue"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusCode"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusTxPower"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusResets"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusLostSyncs"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusInvalidMaps"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusInvalidUcds"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusInvalidRangingResp"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusInvalidRegResp"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusT1Timeouts"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusT2Timeouts"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusT3Timeouts"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusT4Timeouts"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuStatusRangingAborteds"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuServiceQosProfile"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuServiceTxSlotsImmed"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuServiceTxSlotsDed"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuServiceTxRetries"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuServiceTxExceeded"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuServiceRqRetries"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfSuServiceRqExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwdIfSuGroup = cwdIfSuGroup.setStatus('current')
cwdIfQosGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 2, 3)).setObjects(("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosProfPriority"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosProfMaxUpBandwidth"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosProfGuarUpBandwidth"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosProfMaxDownBandwidth"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosProfMaxTxBurst"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosProfBaselinePrivacy"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfQosProfStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwdIfQosGroup = cwdIfQosGroup.setStatus('current')
cwdIfQosHeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 2, 4)).setObjects(("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfHeQosProfilePermissions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwdIfQosHeGroup = cwdIfQosHeGroup.setStatus('current')
cwdIfModGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 167, 3, 2, 5)).setObjects(("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfModRowStatus"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfModBandwidth"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfModThroughput"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfModBurstLength"), ("CISCO-WIRELESS-DOCS-IF-MIB", "cwdIfModMultipathRobustness"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwdIfModGroup = cwdIfModGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WIRELESS-DOCS-IF-MIB", cwdIfHeQosProfilePermissions=cwdIfHeQosProfilePermissions, cwdIfSuServiceTxSlotsImmed=cwdIfSuServiceTxSlotsImmed, cwdIfBaseObjects=cwdIfBaseObjects, cwdIfModIndex=cwdIfModIndex, PYSNMP_MODULE_ID=ciscoWirelessDocsIfMib, cwdIfUpChannelTxBackoffEnd=cwdIfUpChannelTxBackoffEnd, cwdIfHeSuStatusServiceId=cwdIfHeSuStatusServiceId, cwdIfHeServiceTable=cwdIfHeServiceTable, cwdIfDownstreamChannelEntry=cwdIfDownstreamChannelEntry, cwdIfHeSuStatusValue=cwdIfHeSuStatusValue, cwdIfHeServiceQosProfile=cwdIfHeServiceQosProfile, cwdIfUpChannelRangBackoffEnd=cwdIfUpChannelRangBackoffEnd, cwdIfBasicCompliance=cwdIfBasicCompliance, cwdIfSuStatusT4Timeouts=cwdIfSuStatusT4Timeouts, cwdIfHeServiceInPackets=cwdIfHeServiceInPackets, cwdIfHeSuStatusIpAddress=cwdIfHeSuStatusIpAddress, cwdIfHeStatusEntry=cwdIfHeStatusEntry, cwdIfSuServiceTable=cwdIfSuServiceTable, cwdIfUpChannelSubChannelNumber=cwdIfUpChannelSubChannelNumber, cwdIfUpChannelId=cwdIfUpChannelId, cwdIfQosProfStatus=cwdIfQosProfStatus, cwdIfQosHeGroup=cwdIfQosHeGroup, cwdIfChannelUpWidth=cwdIfChannelUpWidth, cwdIfSuStatusInvalidUcds=cwdIfSuStatusInvalidUcds, cwdIfHeCapabilities=cwdIfHeCapabilities, cwdIfUpChannelTxTimingOffset=cwdIfUpChannelTxTimingOffset, cwdIfQosProfileTable=cwdIfQosProfileTable, cwdIfSuStatusCode=cwdIfSuStatusCode, cwdIfSignalQualityEntry=cwdIfSignalQualityEntry, cwdIfHeMaxServiceIds=cwdIfHeMaxServiceIds, cwdIfChannelMiniSlotTimeBaseTick=cwdIfChannelMiniSlotTimeBaseTick, cwdIfHeServiceInOctets=cwdIfHeServiceInOctets, cwdIfSuStatusT1Timeouts=cwdIfSuStatusT1Timeouts, cwdIfSuServiceTxRetries=cwdIfSuServiceTxRetries, cwdIfHeUcdInterval=cwdIfHeUcdInterval, cwdIfHeSuStatusMacAddress=cwdIfHeSuStatusMacAddress, cwdIfSuStatusEntry=cwdIfSuStatusEntry, cwdIfSigQIncludesContention=cwdIfSigQIncludesContention, cwdIfSuCapabilities=cwdIfSuCapabilities, cwdIfSignalQualityTable=cwdIfSignalQualityTable, cwdIfSuMacTable=cwdIfSuMacTable, cwdIfUpstreamChannelEntry=cwdIfUpstreamChannelEntry, cwdIfSuServiceTxSlotsDed=cwdIfSuServiceTxSlotsDed, cwdIfModGroup=cwdIfModGroup, cwdIfHeSuStatusTable=cwdIfHeSuStatusTable, cwdIfHeStatusInvalidDataReqs=cwdIfHeStatusInvalidDataReqs, cwdIfUpChannelSlotSize=cwdIfUpChannelSlotSize, cwdIfQosProfMaxUpBandwidth=cwdIfQosProfMaxUpBandwidth, cwdIfQosProfGuarUpBandwidth=cwdIfQosProfGuarUpBandwidth, cwdIfModulationEntry=cwdIfModulationEntry, cwdIfHeStatusInvalidRangeReqs=cwdIfHeStatusInvalidRangeReqs, cwdIfHeStatusInvalidRegReqs=cwdIfHeStatusInvalidRegReqs, cwdIfSuStatusInvalidMaps=cwdIfSuStatusInvalidMaps, cwdIfCompliances=cwdIfCompliances, cwdIfHeSuStatusEntry=cwdIfHeSuStatusEntry, cwdIfQosProfIndex=cwdIfQosProfIndex, cwdIfUpChannelTargetPower=cwdIfUpChannelTargetPower, cwdIfHeServiceSuStatusIndex=cwdIfHeServiceSuStatusIndex, cwdIfModMultipathRobustness=cwdIfModMultipathRobustness, cwdIfHeStatusTable=cwdIfHeStatusTable, cwdIfSuStatusLostSyncs=cwdIfSuStatusLostSyncs, cwdIfSuStatusRangingAborteds=cwdIfSuStatusRangingAborteds, cwdIfSuStatusTxPower=cwdIfSuStatusTxPower, cwdIfChannelSubChannelPlanVer=cwdIfChannelSubChannelPlanVer, cwdIfSuServiceEntry=cwdIfSuServiceEntry, cwdIfSigQCorrecteds=cwdIfSigQCorrecteds, cwdIfSuStatusT3Timeouts=cwdIfSuStatusT3Timeouts, cwdIfSuStatusInvalidRangingResp=cwdIfSuStatusInvalidRangingResp, cwdIfQosGroup=cwdIfQosGroup, cwdIfSuStatusT2Timeouts=cwdIfSuStatusT2Timeouts, cwdIfModRowStatus=cwdIfModRowStatus, cwdIfHeSuStatusIfIndex=cwdIfHeSuStatusIfIndex, cwdIfSuStatusResets=cwdIfSuStatusResets, cwdIfModulationTable=cwdIfModulationTable, cwdIfModThroughput=cwdIfModThroughput, cwdIfHeMacTable=cwdIfHeMacTable, cwdIfSuServiceRqExceeded=cwdIfSuServiceRqExceeded, cwdIfHeStatusFailedRegReqs=cwdIfHeStatusFailedRegReqs, cwdIfDownChannelPower=cwdIfDownChannelPower, cwdIfChannelDownWidth=cwdIfChannelDownWidth, cwdIfUpstreamChannelTable=cwdIfUpstreamChannelTable, cwdIfHeSyncInterval=cwdIfHeSyncInterval, cwdIfSuMacEntry=cwdIfSuMacEntry, cwdIfNotification=cwdIfNotification, cwdIfSuServiceRqRetries=cwdIfSuServiceRqRetries, cwdIfSuServiceId=cwdIfSuServiceId, cwdIfSuStatusValue=cwdIfSuStatusValue, cwdIfModBandwidth=cwdIfModBandwidth, cwdIfHeServiceEntry=cwdIfHeServiceEntry, cwdIfHeSuStatusDownChanIfIndex=cwdIfHeSuStatusDownChanIfIndex, cwdIfConformance=cwdIfConformance, cwdIfHeServiceAdminStatus=cwdIfHeServiceAdminStatus, cwdIfChannelTable=cwdIfChannelTable, cwdIfModBurstLength=cwdIfModBurstLength, cwdIfSigQSignalNoise=cwdIfSigQSignalNoise, cwdIfUpChannelModProfileIndex=cwdIfUpChannelModProfileIndex, cwdIfBasicGroup=cwdIfBasicGroup, cwdIfDownChannelModProfileIndex=cwdIfDownChannelModProfileIndex, cwdIfQosProfBaselinePrivacy=cwdIfQosProfBaselinePrivacy, cwdIfUpChannelWidth=cwdIfUpChannelWidth, cwdIfHeMacEntry=cwdIfHeMacEntry, cwdIfMibObjects=cwdIfMibObjects, cwdIfQosProfMaxDownBandwidth=cwdIfQosProfMaxDownBandwidth, cwdIfHeServiceCreateTime=cwdIfHeServiceCreateTime, cwdIfQosProfMaxTxBurst=cwdIfQosProfMaxTxBurst, cwdIfHeSuStatusTimingOffset=cwdIfHeSuStatusTimingOffset, cwdIfUpChannelFrequency=cwdIfUpChannelFrequency, cwdIfHeGroup=cwdIfHeGroup, cwdIfSigQUnerroreds=cwdIfSigQUnerroreds, cwdIfChannelEntry=cwdIfChannelEntry, cwdIfDownChannelId=cwdIfDownChannelId, cwdIfHeSuStatusIndex=cwdIfHeSuStatusIndex, cwdIfSuGroup=cwdIfSuGroup, cwdIfSigQUncorrectables=cwdIfSigQUncorrectables, cwdIfSuHeAddress=cwdIfSuHeAddress, cwdIfHeInvitedRangingAttempts=cwdIfHeInvitedRangingAttempts, ciscoWirelessDocsIfMib=ciscoWirelessDocsIfMib, cwdIfUpChannelRangBackoffStart=cwdIfUpChannelRangBackoffStart, cwdIfHeObjects=cwdIfHeObjects, cwdIfDownChannelWidth=cwdIfDownChannelWidth, cwdIfUpChannelTxBackoffStart=cwdIfUpChannelTxBackoffStart, cwdIfDownstreamChannelTable=cwdIfDownstreamChannelTable, cwdIfChannelDownFrequency=cwdIfChannelDownFrequency, cwdIfDownChannelFrequency=cwdIfDownChannelFrequency, cwdIfSuServiceQosProfile=cwdIfSuServiceQosProfile, cwdIfSuStatusInvalidRegResp=cwdIfSuStatusInvalidRegResp, cwdIfSuServiceTxExceeded=cwdIfSuServiceTxExceeded, cwdIfQosProfPriority=cwdIfQosProfPriority, cwdIfGroups=cwdIfGroups, cwdIfHeSuStatusUpChanIfIndex=cwdIfHeSuStatusUpChanIfIndex, cwdIfHeServiceId=cwdIfHeServiceId, cwdIfHeStatusT5Timeouts=cwdIfHeStatusT5Timeouts, cwdIfChannelUpFrequency=cwdIfChannelUpFrequency, cwdIfSuObjects=cwdIfSuObjects, cwdIfHeSuStatusRxPower=cwdIfHeSuStatusRxPower, cwdIfHeStatusRangingAborteds=cwdIfHeStatusRangingAborteds, cwdIfDownChannelSubChannelNumber=cwdIfDownChannelSubChannelNumber, cwdIfHeInsertionInterval=cwdIfHeInsertionInterval, cwdIfQosProfileEntry=cwdIfQosProfileEntry, cwdIfSuRangingRespTimeout=cwdIfSuRangingRespTimeout, cwdIfSuStatusTable=cwdIfSuStatusTable)
