#
# PySNMP MIB module MULTIPLE-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MULTIPLE-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:06:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, TimeTicks, Unsigned32, iso, Bits, Counter32, mib_2, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, ObjectIdentity, Integer32, IpAddress, NotificationType, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "TimeTicks", "Unsigned32", "iso", "Bits", "Counter32", "mib-2", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Integer32", "IpAddress", "NotificationType", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

ati = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
mibobjs = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
atiSwitchObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 3))
atiSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 3, 1))
atiSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 3, 3))
atiSysSerialno = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiSysSerialno.setStatus('mandatory')
atiSysTftpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSysTftpIPAddress.setStatus('mandatory')
atiSysTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSysTftpFilename.setStatus('mandatory')
atiSysPowerupCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiSysPowerupCount.setStatus('mandatory')
atiSysBrcastCutoffRate = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSysBrcastCutoffRate.setStatus('mandatory')
atiSysGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSysGatewayIPAddress.setStatus('mandatory')
atiPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 3, 2), )
if mibBuilder.loadTexts: atiPortTable.setStatus('mandatory')
atiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 3, 2, 1), ).setIndexNames((0, "MULTIPLE-BRIDGE-MIB", "atiPort"))
if mibBuilder.loadTexts: atiPortEntry.setStatus('mandatory')
atiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiPort.setStatus('mandatory')
atiPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiPortStatus.setStatus('mandatory')
atiPortDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiPortDuplexStatus.setStatus('mandatory')
atiPortForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiPortForwardedFrames.setStatus('mandatory')
atiPortRcvdLocalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiPortRcvdLocalFrames.setStatus('mandatory')
atiSwitchIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchIPAddress.setStatus('mandatory')
atiSwitchSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchSubnetMask.setStatus('mandatory')
atiActiveAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiActiveAgingTime.setStatus('mandatory')
atiPurgeAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiPurgeAgingTime.setStatus('mandatory')
atiSwitchSTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchSTPStatus.setStatus('mandatory')
atiSwitchManager = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 6))
atiSwitchTrapRcvr1 = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchTrapRcvr1.setStatus('mandatory')
atiSwitchTrapRcvr2 = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchTrapRcvr2.setStatus('mandatory')
atiSwitchTrapRcvr3 = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchTrapRcvr3.setStatus('mandatory')
atiSwitchTrapRcvr4 = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchTrapRcvr4.setStatus('mandatory')
atiSwitchPortMirroring = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchPortMirroring.setStatus('mandatory')
atiSwitchMirroredPort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 3, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiSwitchMirroredPort.setStatus('mandatory')
mibBuilder.exportSymbols("MULTIPLE-BRIDGE-MIB", atiSystemConfig=atiSystemConfig, atiSwitchTrapRcvr2=atiSwitchTrapRcvr2, atiSwitchIPAddress=atiSwitchIPAddress, atiSwitchSubnetMask=atiSwitchSubnetMask, atiSysGatewayIPAddress=atiSysGatewayIPAddress, atiSwitchTrapRcvr4=atiSwitchTrapRcvr4, atiPortRcvdLocalFrames=atiPortRcvdLocalFrames, atiPort=atiPort, atiSysBrcastCutoffRate=atiSysBrcastCutoffRate, ati=ati, BridgeId=BridgeId, atiSysSerialno=atiSysSerialno, atiSysTftpIPAddress=atiSysTftpIPAddress, atiSwitchTrapRcvr3=atiSwitchTrapRcvr3, atiActiveAgingTime=atiActiveAgingTime, atiPortStatus=atiPortStatus, atiSysPowerupCount=atiSysPowerupCount, atiSwitchTrapRcvr1=atiSwitchTrapRcvr1, atiSysTftpFilename=atiSysTftpFilename, atiPortTable=atiPortTable, atiPurgeAgingTime=atiPurgeAgingTime, atiPortForwardedFrames=atiPortForwardedFrames, atiSwitchMirroredPort=atiSwitchMirroredPort, Timeout=Timeout, atiSwitch=atiSwitch, MacAddress=MacAddress, atiSwitchObjs=atiSwitchObjs, atiPortDuplexStatus=atiPortDuplexStatus, atiSwitchSTPStatus=atiSwitchSTPStatus, atiPortEntry=atiPortEntry, atiSwitchManager=atiSwitchManager, atiSwitchPortMirroring=atiSwitchPortMirroring, mibobjs=mibobjs)
