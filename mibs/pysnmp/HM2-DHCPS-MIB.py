#
# PySNMP MIB module HM2-DHCPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-DHCPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
HmEnabledStatus, hm2ConfigurationMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus", "hm2ConfigurationMibs")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, TimeTicks, Gauge32, Counter64, MibIdentifier, NotificationType, Bits, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "TimeTicks", "Gauge32", "Counter64", "MibIdentifier", "NotificationType", "Bits", "IpAddress", "Integer32")
DisplayString, TextualConvention, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "MacAddress")
hm2DhcpsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 91))
hm2DhcpsMib.setRevisions(('2012-03-16 00:00',))
if mibBuilder.loadTexts: hm2DhcpsMib.setLastUpdated('201203160000Z')
if mibBuilder.loadTexts: hm2DhcpsMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2DHCPServerMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 91, 0))
hm2DHCPServerMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 91, 1))
hm2DHCPServerSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 91, 3))
hm2DHCPServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1))
hm2DHCPServerConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1))
hm2DHCPServerLeaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2))
hm2DHCPServerInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 3))
hm2DHCPServerCounterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4))
hm2DHCPServerMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DHCPServerMode.setStatus('current')
hm2DHCPServerMaxPoolEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerMaxPoolEntries.setStatus('current')
hm2DHCPServerMaxLeaseEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerMaxLeaseEntries.setStatus('current')
hm2DHCPServerPoolTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5), )
if mibBuilder.loadTexts: hm2DHCPServerPoolTable.setStatus('current')
hm2DHCPServerPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1), ).setIndexNames((0, "HM2-DHCPS-MIB", "hm2DHCPServerPoolIndex"))
if mibBuilder.loadTexts: hm2DHCPServerPoolEntry.setStatus('current')
hm2DHCPServerPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerPoolIndex.setStatus('current')
hm2DHCPServerPoolStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolStartIpAddress.setStatus('current')
hm2DHCPServerPoolEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolEndIpAddress.setStatus('current')
hm2DHCPServerPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 4), Unsigned32().clone(86400)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolLeaseTime.setStatus('current')
hm2DHCPServerPoolFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 5), Bits().clone(namedValues=NamedValues(("interface", 0), ("mac", 1), ("gateway", 2), ("clientid", 3), ("remoteid", 4), ("circuitid", 5), ("dynamic", 6), ("vlanid", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolFlags.setStatus('current')
hm2DHCPServerPoolIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolIfIndex.setStatus('current')
hm2DHCPServerPoolMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolMacAddress.setStatus('current')
hm2DHCPServerPoolGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolGateway.setStatus('current')
hm2DHCPServerPoolClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 9), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolClientId.setStatus('current')
hm2DHCPServerPoolRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 10), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolRemoteId.setStatus('current')
hm2DHCPServerPoolCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 11), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolCircuitId.setStatus('current')
hm2DHCPServerPoolHirschmannClient = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 12), HmEnabledStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolHirschmannClient.setStatus('current')
hm2DHCPServerPoolVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolVlanId.setStatus('current')
hm2DHCPServerPoolOptionConfFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolOptionConfFileName.setStatus('current')
hm2DHCPServerPoolOptionGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 31), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolOptionGateway.setStatus('current')
hm2DHCPServerPoolOptionNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 32), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolOptionNetmask.setStatus('current')
hm2DHCPServerPoolOptionWINS = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 33), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolOptionWINS.setStatus('current')
hm2DHCPServerPoolOptionDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 34), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolOptionDNS.setStatus('current')
hm2DHCPServerPoolOptionHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolOptionHostname.setStatus('current')
hm2DHCPServerPoolMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("config", 2), ("ttdp", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DHCPServerPoolMethod.setStatus('current')
hm2DHCPServerPoolErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerPoolErrorStatus.setStatus('current')
hm2DHCPServerPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 1, 5, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DHCPServerPoolRowStatus.setStatus('current')
hm2DHCPServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hm2DHCPServerLeaseTable.setStatus('current')
hm2DHCPServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1), ).setIndexNames((0, "HM2-DHCPS-MIB", "hm2DHCPServerLeasePoolIndex"), (0, "HM2-DHCPS-MIB", "hm2DHCPServerLeaseIpAddress"))
if mibBuilder.loadTexts: hm2DHCPServerLeaseEntry.setStatus('current')
hm2DHCPServerLeasePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeasePoolIndex.setStatus('current')
hm2DHCPServerLeaseIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseIpAddress.setStatus('current')
hm2DHCPServerLeaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bootp", 1), ("offering", 2), ("requesting", 3), ("bound", 4), ("renewing", 5), ("rebinding", 6), ("declined", 7), ("released", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseState.setStatus('current')
hm2DHCPServerLeaseTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseTimeRemaining.setStatus('current')
hm2DHCPServerLeaseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseIfIndex.setStatus('current')
hm2DHCPServerLeaseClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseClientMacAddress.setStatus('current')
hm2DHCPServerLeaseGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseGateway.setStatus('current')
hm2DHCPServerLeaseClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseClientId.setStatus('current')
hm2DHCPServerLeaseRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseRemoteId.setStatus('current')
hm2DHCPServerLeaseCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseCircuitId.setStatus('current')
hm2DHCPServerLeaseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseStartTime.setStatus('current')
hm2DHCPServerLeaseAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("release", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DHCPServerLeaseAction.setStatus('current')
hm2DHCPServerLeaseVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerLeaseVlanId.setStatus('current')
hm2DHCPServerIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 3, 1), )
if mibBuilder.loadTexts: hm2DHCPServerIfConfigTable.setStatus('current')
hm2DHCPServerIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 3, 1, 1), ).setIndexNames((0, "HM2-DHCPS-MIB", "hm2DHCPServerIfConfigIndex"))
if mibBuilder.loadTexts: hm2DHCPServerIfConfigEntry.setStatus('current')
hm2DHCPServerIfConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerIfConfigIndex.setStatus('current')
hm2DHCPServerIfConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 3, 1, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DHCPServerIfConfigMode.setStatus('current')
hm2DHCPServerCounterIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2), )
if mibBuilder.loadTexts: hm2DHCPServerCounterIfTable.setStatus('current')
hm2DHCPServerCounterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1), ).setIndexNames((0, "HM2-DHCPS-MIB", "hm2DHCPServerCounterIfIndex"))
if mibBuilder.loadTexts: hm2DHCPServerCounterIfEntry.setStatus('current')
hm2DHCPServerCounterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterIfIndex.setStatus('current')
hm2DHCPServerCounterBootpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterBootpRequests.setStatus('current')
hm2DHCPServerCounterBootpInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterBootpInvalids.setStatus('current')
hm2DHCPServerCounterBootpReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterBootpReplies.setStatus('current')
hm2DHCPServerCounterBootpDroppedUnknownClients = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterBootpDroppedUnknownClients.setStatus('current')
hm2DHCPServerCounterBootpDroppedNotServingSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterBootpDroppedNotServingSubnet.setStatus('current')
hm2DHCPServerCounterDhcpv4Discovers = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Discovers.setStatus('current')
hm2DHCPServerCounterDhcpv4Offers = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Offers.setStatus('current')
hm2DHCPServerCounterDhcpv4Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Requests.setStatus('current')
hm2DHCPServerCounterDhcpv4Declines = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Declines.setStatus('current')
hm2DHCPServerCounterDhcpv4Acks = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Acks.setStatus('current')
hm2DHCPServerCounterDhcpv4Naks = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Naks.setStatus('current')
hm2DHCPServerCounterDhcpv4Releases = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Releases.setStatus('current')
hm2DHCPServerCounterDhcpv4Informs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Informs.setStatus('current')
hm2DHCPServerCounterDhcpv4ForcedRenews = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4ForcedRenews.setStatus('current')
hm2DHCPServerCounterDhcpv4Invalids = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4Invalids.setStatus('current')
hm2DHCPServerCounterDhcpv4DroppedUnknownClient = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4DroppedUnknownClient.setStatus('current')
hm2DHCPServerCounterDhcpv4DroppedNotServingSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterDhcpv4DroppedNotServingSubnet.setStatus('current')
hm2DHCPServerCounterMiscOtherDhcpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 91, 1, 1, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DHCPServerCounterMiscOtherDhcpServer.setStatus('current')
hm2DHCPServerRowStatusInvalidConfigurationErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 91, 3, 1))
if mibBuilder.loadTexts: hm2DHCPServerRowStatusInvalidConfigurationErrorReturn.setStatus('current')
hm2DHCPServerConflictDHCPRrelayErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 91, 3, 2))
if mibBuilder.loadTexts: hm2DHCPServerConflictDHCPRrelayErrorReturn.setStatus('current')
mibBuilder.exportSymbols("HM2-DHCPS-MIB", hm2DHCPServerCounterGroup=hm2DHCPServerCounterGroup, hm2DHCPServerGroup=hm2DHCPServerGroup, hm2DHCPServerCounterIfEntry=hm2DHCPServerCounterIfEntry, hm2DHCPServerIfConfigEntry=hm2DHCPServerIfConfigEntry, hm2DHCPServerPoolGateway=hm2DHCPServerPoolGateway, hm2DHCPServerCounterIfTable=hm2DHCPServerCounterIfTable, hm2DhcpsMib=hm2DhcpsMib, hm2DHCPServerRowStatusInvalidConfigurationErrorReturn=hm2DHCPServerRowStatusInvalidConfigurationErrorReturn, hm2DHCPServerConfigGroup=hm2DHCPServerConfigGroup, hm2DHCPServerCounterDhcpv4Requests=hm2DHCPServerCounterDhcpv4Requests, hm2DHCPServerCounterBootpInvalids=hm2DHCPServerCounterBootpInvalids, hm2DHCPServerLeaseRemoteId=hm2DHCPServerLeaseRemoteId, hm2DHCPServerSNMPExtensionGroup=hm2DHCPServerSNMPExtensionGroup, hm2DHCPServerLeaseClientId=hm2DHCPServerLeaseClientId, hm2DHCPServerPoolOptionWINS=hm2DHCPServerPoolOptionWINS, hm2DHCPServerCounterBootpDroppedNotServingSubnet=hm2DHCPServerCounterBootpDroppedNotServingSubnet, hm2DHCPServerLeaseGroup=hm2DHCPServerLeaseGroup, hm2DHCPServerCounterDhcpv4DroppedNotServingSubnet=hm2DHCPServerCounterDhcpv4DroppedNotServingSubnet, hm2DHCPServerLeaseClientMacAddress=hm2DHCPServerLeaseClientMacAddress, hm2DHCPServerConflictDHCPRrelayErrorReturn=hm2DHCPServerConflictDHCPRrelayErrorReturn, hm2DHCPServerIfConfigMode=hm2DHCPServerIfConfigMode, hm2DHCPServerCounterDhcpv4ForcedRenews=hm2DHCPServerCounterDhcpv4ForcedRenews, hm2DHCPServerPoolEntry=hm2DHCPServerPoolEntry, hm2DHCPServerIfConfigTable=hm2DHCPServerIfConfigTable, hm2DHCPServerLeaseState=hm2DHCPServerLeaseState, hm2DHCPServerPoolOptionNetmask=hm2DHCPServerPoolOptionNetmask, hm2DHCPServerPoolOptionGateway=hm2DHCPServerPoolOptionGateway, hm2DHCPServerLeaseGateway=hm2DHCPServerLeaseGateway, hm2DHCPServerLeaseTimeRemaining=hm2DHCPServerLeaseTimeRemaining, hm2DHCPServerPoolIfIndex=hm2DHCPServerPoolIfIndex, hm2DHCPServerMode=hm2DHCPServerMode, hm2DHCPServerCounterDhcpv4Releases=hm2DHCPServerCounterDhcpv4Releases, hm2DHCPServerPoolEndIpAddress=hm2DHCPServerPoolEndIpAddress, hm2DHCPServerLeaseTable=hm2DHCPServerLeaseTable, hm2DHCPServerCounterDhcpv4DroppedUnknownClient=hm2DHCPServerCounterDhcpv4DroppedUnknownClient, hm2DHCPServerMibObjects=hm2DHCPServerMibObjects, hm2DHCPServerMibNotifications=hm2DHCPServerMibNotifications, hm2DHCPServerCounterIfIndex=hm2DHCPServerCounterIfIndex, hm2DHCPServerLeaseIpAddress=hm2DHCPServerLeaseIpAddress, hm2DHCPServerCounterDhcpv4Acks=hm2DHCPServerCounterDhcpv4Acks, hm2DHCPServerLeaseVlanId=hm2DHCPServerLeaseVlanId, hm2DHCPServerPoolRowStatus=hm2DHCPServerPoolRowStatus, hm2DHCPServerPoolErrorStatus=hm2DHCPServerPoolErrorStatus, hm2DHCPServerCounterBootpRequests=hm2DHCPServerCounterBootpRequests, hm2DHCPServerPoolOptionConfFileName=hm2DHCPServerPoolOptionConfFileName, hm2DHCPServerMaxPoolEntries=hm2DHCPServerMaxPoolEntries, hm2DHCPServerPoolStartIpAddress=hm2DHCPServerPoolStartIpAddress, hm2DHCPServerPoolMacAddress=hm2DHCPServerPoolMacAddress, PYSNMP_MODULE_ID=hm2DhcpsMib, hm2DHCPServerCounterDhcpv4Naks=hm2DHCPServerCounterDhcpv4Naks, hm2DHCPServerPoolClientId=hm2DHCPServerPoolClientId, hm2DHCPServerCounterBootpDroppedUnknownClients=hm2DHCPServerCounterBootpDroppedUnknownClients, hm2DHCPServerLeaseCircuitId=hm2DHCPServerLeaseCircuitId, hm2DHCPServerMaxLeaseEntries=hm2DHCPServerMaxLeaseEntries, hm2DHCPServerLeaseAction=hm2DHCPServerLeaseAction, hm2DHCPServerPoolRemoteId=hm2DHCPServerPoolRemoteId, hm2DHCPServerLeaseIfIndex=hm2DHCPServerLeaseIfIndex, hm2DHCPServerPoolIndex=hm2DHCPServerPoolIndex, hm2DHCPServerPoolVlanId=hm2DHCPServerPoolVlanId, hm2DHCPServerLeaseStartTime=hm2DHCPServerLeaseStartTime, hm2DHCPServerCounterDhcpv4Informs=hm2DHCPServerCounterDhcpv4Informs, hm2DHCPServerCounterDhcpv4Invalids=hm2DHCPServerCounterDhcpv4Invalids, hm2DHCPServerLeasePoolIndex=hm2DHCPServerLeasePoolIndex, hm2DHCPServerCounterBootpReplies=hm2DHCPServerCounterBootpReplies, hm2DHCPServerPoolMethod=hm2DHCPServerPoolMethod, hm2DHCPServerCounterMiscOtherDhcpServer=hm2DHCPServerCounterMiscOtherDhcpServer, hm2DHCPServerPoolOptionDNS=hm2DHCPServerPoolOptionDNS, hm2DHCPServerCounterDhcpv4Discovers=hm2DHCPServerCounterDhcpv4Discovers, hm2DHCPServerCounterDhcpv4Offers=hm2DHCPServerCounterDhcpv4Offers, hm2DHCPServerCounterDhcpv4Declines=hm2DHCPServerCounterDhcpv4Declines, hm2DHCPServerInterfaceGroup=hm2DHCPServerInterfaceGroup, hm2DHCPServerPoolTable=hm2DHCPServerPoolTable, hm2DHCPServerPoolCircuitId=hm2DHCPServerPoolCircuitId, hm2DHCPServerPoolLeaseTime=hm2DHCPServerPoolLeaseTime, hm2DHCPServerLeaseEntry=hm2DHCPServerLeaseEntry, hm2DHCPServerPoolOptionHostname=hm2DHCPServerPoolOptionHostname, hm2DHCPServerPoolHirschmannClient=hm2DHCPServerPoolHirschmannClient, hm2DHCPServerIfConfigIndex=hm2DHCPServerIfConfigIndex, hm2DHCPServerPoolFlags=hm2DHCPServerPoolFlags)
