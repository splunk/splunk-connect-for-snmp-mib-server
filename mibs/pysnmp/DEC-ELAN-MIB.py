#
# PySNMP MIB module DEC-ELAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEC-ELAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:22:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Unsigned32, IpAddress, Bits, ModuleIdentity, Counter32, enterprises, TimeTicks, Counter64, Gauge32, NotificationType, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Unsigned32", "IpAddress", "Bits", "ModuleIdentity", "Counter32", "enterprises", "TimeTicks", "Counter64", "Gauge32", "NotificationType", "MibIdentifier", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
decMIBextension = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18))
elanext = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1))
efddi = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1))
esystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2))
einterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3))
ebridge = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4))
eauth = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5))
efddiSMT = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 1))
efddiMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2))
efddiPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3))
efddiFDX = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 4))
efddiSMTTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 1, 1), )
if mibBuilder.loadTexts: efddiSMTTable.setStatus('mandatory')
efddiSMTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 1, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "eSMTIndex"))
if mibBuilder.loadTexts: efddiSMTEntry.setStatus('mandatory')
eSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSMTIndex.setStatus('mandatory')
eSMTStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sas", 1), ("dac", 2), ("sac", 3), ("nac", 4), ("das", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSMTStationType.setStatus('mandatory')
eSMTTracesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSMTTracesReceived.setStatus('mandatory')
efddiMACTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1), )
if mibBuilder.loadTexts: efddiMACTable.setStatus('mandatory')
efddiMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "eMACSMTIndex"), (0, "DEC-ELAN-MIB", "eMACIndex"))
if mibBuilder.loadTexts: efddiMACEntry.setStatus('mandatory')
eMACSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACSMTIndex.setStatus('mandatory')
eMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACIndex.setStatus('mandatory')
eMACLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACLinkIndex.setStatus('mandatory')
eMACLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("offMaint", 1), ("offReady", 2), ("offFaultRecovery", 3), ("onRingInit", 4), ("onRingRun", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACLinkState.setStatus('mandatory')
eMACRingPurgerState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("purgerOff", 1), ("candidate", 2), ("nonPurger", 3), ("purger", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACRingPurgerState.setStatus('mandatory')
eMACRingPurgerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMACRingPurgerEnable.setStatus('mandatory')
eMACRingPurgeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACRingPurgeErrors.setStatus('mandatory')
eMACFrameStripMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saMatch", 1), ("bridgeStrip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACFrameStripMode.setStatus('mandatory')
eMACFCIStripErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACFCIStripErrors.setStatus('mandatory')
eMACRingErrorReason = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noReason", 1), ("ringInitInitiated", 6), ("ringInitReceived", 7), ("ringBeaconingInitiated", 8), ("daDetected", 9), ("duplicateTokenDetected", 10), ("ringPurgeError", 11), ("bridgeStripError", 12), ("ringOpOscillation", 13), ("directedBeaconReceived", 14), ("pcTraceInitiated", 15), ("pcTraceReceived", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACRingErrorReason.setStatus('mandatory')
eMACRingInitializationsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACRingInitializationsInitiated.setStatus('mandatory')
eMACRingInitializationsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACRingInitializationsReceived.setStatus('mandatory')
eMACRingBeaconingInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACRingBeaconingInitiated.setStatus('mandatory')
eMACDuplicateAddressTestFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACDuplicateAddressTestFailures.setStatus('mandatory')
eMACDuplicateTokensDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACDuplicateTokensDetected.setStatus('mandatory')
eMACUpstreamNbrDuplAddressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACUpstreamNbrDuplAddressFlag.setStatus('mandatory')
eMACTracesInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACTracesInitiated.setStatus('mandatory')
eMACRestrictedTokenTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMACRestrictedTokenTimeout.setStatus('mandatory')
eMACFrameStatusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACFrameStatusErrors.setStatus('mandatory')
eMACFrameAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACFrameAlignmentErrors.setStatus('mandatory')
eMACTransmitUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMACTransmitUnderruns.setStatus('mandatory')
efddiPORTTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1), )
if mibBuilder.loadTexts: efddiPORTTable.setStatus('mandatory')
efddiPORTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ePORTSMTIndex"), (0, "DEC-ELAN-MIB", "ePORTIndex"))
if mibBuilder.loadTexts: efddiPORTEntry.setStatus('mandatory')
ePORTSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTSMTIndex.setStatus('mandatory')
ePORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTIndex.setStatus('mandatory')
ePORTPHYIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTPHYIndex.setStatus('mandatory')
ePORTPMDType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("pmdNone", 1), ("pmdMM", 2), ("pmdSM", 3), ("pmdLC", 4), ("pmdTHN", 5), ("pmdSTP", 6), ("pmdUTP", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTPMDType.setStatus('mandatory')
ePORTPHYState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("offmaintenance", 1), ("broken", 2), ("offready", 3), ("wait", 4), ("starting", 5), ("failed", 6), ("watch", 7), ("inuse", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTPHYState.setStatus('mandatory')
ePORTRejectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noReason", 1), ("lctLocal", 2), ("lctRemote", 3), ("lctBoth", 4), ("lemFailure", 5), ("topologyRules", 6), ("tneExpired", 7), ("remoteReject", 8), ("tracesInProgress", 9), ("tracesReceived", 10), ("standby", 11), ("lctProtocol", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTRejectReason.setStatus('mandatory')
ePORTConnectionsCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTConnectionsCompleted.setStatus('mandatory')
ePORTTNEExpRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTTNEExpRejects.setStatus('mandatory')
ePORTElasticityBufferErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePORTElasticityBufferErrors.setStatus('mandatory')
efddiFDXTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 4, 1), )
if mibBuilder.loadTexts: efddiFDXTable.setStatus('mandatory')
efddiFDXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 4, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "eFDXSMTIndex"), (0, "DEC-ELAN-MIB", "eFDXMACIndex"))
if mibBuilder.loadTexts: efddiFDXEntry.setStatus('mandatory')
eFDXSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFDXSMTIndex.setStatus('mandatory')
eFDXMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFDXMACIndex.setStatus('mandatory')
eFDXEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eFDXEnable.setStatus('mandatory')
eFDXOp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFDXOp.setStatus('mandatory')
eFDXState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fdxIdle", 1), ("fdxRequest", 2), ("fdxConfirm", 3), ("fdxOperation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFDXState.setStatus('mandatory')
esysChar = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1))
esysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 2))
esysCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 3))
esysConcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4))
esysRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysRomVersion.setStatus('mandatory')
esysInitSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("resetWithDefaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esysInitSwitch.setStatus('mandatory')
esysResetDefaultsSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysResetDefaultsSwitch.setStatus('mandatory')
esysGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esysGatewayAddress.setStatus('mandatory')
esysTrapAddressTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 5), )
if mibBuilder.loadTexts: esysTrapAddressTable.setStatus('mandatory')
esysTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 5, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "esysTrapAddress"))
if mibBuilder.loadTexts: esysTrapEntry.setStatus('mandatory')
esysTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esysTrapAddress.setStatus('mandatory')
esysUpdateSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esysUpdateSwitch.setStatus('mandatory')
esysLastLoadHost = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysLastLoadHost.setStatus('mandatory')
esysDeviceState = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("operate", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysDeviceState.setStatus('mandatory')
esysDeviceBrokenReason = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("selftestFail", 2), ("onlineDiagFail", 3), ("firmwareFail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysDeviceBrokenReason.setStatus('mandatory')
esysNvramFailed = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysNvramFailed.setStatus('mandatory')
esysPowerups = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysPowerups.setStatus('mandatory')
esysMgmtResets = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysMgmtResets.setStatus('mandatory')
esysUnsolicitedResets = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysUnsolicitedResets.setStatus('mandatory')
esysFRUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 1), )
if mibBuilder.loadTexts: esysFRUConfigTable.setStatus('mandatory')
esysFRUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "esysFRUIndex"))
if mibBuilder.loadTexts: esysFRUConfigEntry.setStatus('mandatory')
esysFRUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysFRUIndex.setStatus('mandatory')
esysFRUSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysFRUSlot.setStatus('mandatory')
esysFRUDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysFRUDesc.setStatus('mandatory')
esysFRUType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29))).clone(namedValues=NamedValues(("empty", 1), ("ansiMgmtCard", 2), ("ansiPortCard4line", 3), ("fan", 4), ("apCard", 5), ("niCard", 6), ("fddiCard", 7), ("controllerBackplane", 8), ("qmCard", 9), ("lowPowerPortCard4line", 10), ("singleModeAnsiPortCard4line", 11), ("thinwirePortCard6line", 12), ("lowPowerPortCard6line", 13), ("stpCopperPortCard6line", 14), ("singleModeMgmtCard", 15), ("ansi-SingleModeMgmtCard", 16), ("singleMode-ANSIMgmtCard", 17), ("upgradeApCard", 19), ("threeNiCard", 20), ("dasAnsiFddiCard", 21), ("dasAnsiASingleModeBfiCard", 22), ("dasSingleModeAAnsiBfiCard", 23), ("dasSingleModeFddiCard", 24), ("sasSingleModeFddiCard", 25), ("opticalBypass", 26), ("obmUartCard", 27), ("ansiPortCard6line", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysFRUType.setStatus('mandatory')
esysFRURev = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysFRURev.setStatus('mandatory')
esysFRUState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("empty", 1), ("working", 2), ("marginal", 3), ("broken", 4), ("obrNotSupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esysFRUState.setStatus('mandatory')
esysFddiPortTrapSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esysFddiPortTrapSwitch.setStatus('mandatory')
eifTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3, 1), )
if mibBuilder.loadTexts: eifTable.setStatus('mandatory')
eifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "eifIndex"))
if mibBuilder.loadTexts: eifEntry.setStatus('mandatory')
eifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eifIndex.setStatus('mandatory')
eifBadFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eifBadFramesReceived.setStatus('mandatory')
eifReceiveOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eifReceiveOverrun.setStatus('mandatory')
eifOversizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eifOversizeFrames.setStatus('mandatory')
eifTransmitFramesError = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eifTransmitFramesError.setStatus('mandatory')
eifMgmtSetsAllowedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eifMgmtSetsAllowedSwitch.setStatus('mandatory')
ebrChar = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1))
ebrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2))
ebrCoun = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 3))
ebrSpan = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4))
ebrInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5))
ebrTwoPortStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 6))
ebrMultiPortStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 7))
ebrTwoProtoFilt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8))
ebrMultiProtoFilt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9))
ebrMultiFiltSw = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 10))
ebrNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 11))
ebrRateLimiting = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 12))
ebrLB100SpanningTreeVer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrLB100SpanningTreeVer.setStatus('mandatory')
ebr802SpanningTreeVer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebr802SpanningTreeVer.setStatus('mandatory')
ebrMaxForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrMaxForwardingDBEntries.setStatus('mandatory')
ebrMaxNVForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrMaxNVForwardingDBEntries.setStatus('mandatory')
ebrMaxProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrMaxProtocolDBEntries.setStatus('mandatory')
ebrMaxNVProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrMaxNVProtocolDBEntries.setStatus('mandatory')
ebrForwardingDBPurgeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrForwardingDBPurgeThreshold.setStatus('mandatory')
ebrPortTestPassedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrPortTestPassedThreshold.setStatus('mandatory')
ebrPortTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrPortTestInterval.setStatus('mandatory')
ebrTopologyChangeTimer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrTopologyChangeTimer.setStatus('mandatory')
ebrManualFilterSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrManualFilterSwitch.setStatus('mandatory')
ebrFragmentationSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrFragmentationSwitch.setStatus('mandatory')
ebrRemoveMgmtAddress = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrRemoveMgmtAddress.setStatus('mandatory')
ebrRemoveMgmtProto = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrRemoveMgmtProto.setStatus('mandatory')
ebrCurrForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrCurrForwardingDBEntries.setStatus('mandatory')
ebrCurrNVForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrCurrNVForwardingDBEntries.setStatus('mandatory')
ebrCurrProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrCurrProtocolDBEntries.setStatus('mandatory')
ebrCurrNVProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrCurrNVProtocolDBEntries.setStatus('mandatory')
ebrMgmtHeardPort = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrMgmtHeardPort.setStatus('mandatory')
ebrLB100BeingPolled = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrLB100BeingPolled.setStatus('mandatory')
ebrInactiveForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrInactiveForwardingDBEntries.setStatus('mandatory')
ebrTimeSinceForwardingDBPurged = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrTimeSinceForwardingDBPurged.setStatus('mandatory')
ebrTimeSinceLastHello = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrTimeSinceLastHello.setStatus('mandatory')
ebrDeviceFramesLost = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrDeviceFramesLost.setStatus('mandatory')
ebrSpanningTreeModeChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrSpanningTreeModeChanges.setStatus('mandatory')
ebrBestRootAge = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrBestRootAge.setStatus('mandatory')
ebrTopologyChangeFlag = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrTopologyChangeFlag.setStatus('mandatory')
ebrTellParentFlag = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrTellParentFlag.setStatus('mandatory')
ebrForwardingDBShortAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrForwardingDBShortAgingTime.setStatus('mandatory')
ebrBadHelloLimit = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrBadHelloLimit.setStatus('mandatory')
ebrBadHelloResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrBadHelloResetTimer.setStatus('mandatory')
ebrNoFrameInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNoFrameInterval.setStatus('mandatory')
ebrLB100PollTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrLB100PollTime.setStatus('mandatory')
ebrLB100ResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrLB100ResponseTimeout.setStatus('mandatory')
ebrLB100SpanningTreeCompat = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoSelect", 1), ("ieee802", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrLB100SpanningTreeCompat.setStatus('mandatory')
ebrIfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1), )
if mibBuilder.loadTexts: ebrIfTable.setStatus('mandatory')
ebrIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrIfIndex"))
if mibBuilder.loadTexts: ebrIfEntry.setStatus('mandatory')
ebrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfIndex.setStatus('mandatory')
ebrIfLinkBrokenReason = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noFault", 1), ("possibleInternalFault", 2), ("possibleExternalFault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfLinkBrokenReason.setStatus('mandatory')
ebrIfPortRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfPortRestarts.setStatus('mandatory')
ebrIfUnknownDAReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfUnknownDAReceived.setStatus('mandatory')
ebrIfFramesAddrFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfFramesAddrFiltered.setStatus('mandatory')
ebrIfMultiFramesFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfMultiFramesFiltered.setStatus('mandatory')
ebrIfFramesProtocolFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfFramesProtocolFiltered.setStatus('mandatory')
ebrIfDeviceFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfDeviceFramesSent.setStatus('mandatory')
ebrIfDeviceFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfDeviceFramesReceived.setStatus('mandatory')
ebrIfDeviceBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfDeviceBytesSent.setStatus('mandatory')
ebrIfDeviceBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfDeviceBytesReceived.setStatus('mandatory')
ebrIfDeviceFramesLost = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfDeviceFramesLost.setStatus('mandatory')
ebrIfMultiBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfMultiBytesSent.setStatus('mandatory')
ebrIfMultiBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfMultiBytesReceived.setStatus('mandatory')
ebrIfMultiDeviceFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfMultiDeviceFramesSent.setStatus('mandatory')
ebrIfMultiDeviceFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfMultiDeviceFramesReceived.setStatus('mandatory')
ebrIfMultiDeviceBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfMultiDeviceBytesSent.setStatus('mandatory')
ebrIfMultiDeviceBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfMultiDeviceBytesReceived.setStatus('mandatory')
ebrIfBadBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfBadBytesReceived.setStatus('mandatory')
ebrIfBadHelloLimitExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfBadHelloLimitExceeded.setStatus('mandatory')
ebrIfEtherTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2), )
if mibBuilder.loadTexts: ebrIfEtherTable.setStatus('mandatory')
ebrIfEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrIfIndex"))
if mibBuilder.loadTexts: ebrIfEtherEntry.setStatus('mandatory')
ebrIfEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfEthIndex.setStatus('mandatory')
ebrIfEthPhysicalMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 8, 9, 10, 11, 24))).clone(namedValues=NamedValues(("stdAUIInterface", 1), ("thinwireInterface", 2), ("ieeeFiberInterRepeaterLink", 6), ("fiberOpticLink850nmNoIdle", 7), ("fiberOpticLink850nmDualIdle", 8), ("dConnAuiIf", 9), ("thinwireInterfaceNoLoop", 10), ("twistedPairInterface", 11), ("fullDuplexFiberOptic1300nm", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfEthPhysicalMediumType.setStatus('mandatory')
ebrIfEthCollisionPresenceTestSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrIfEthCollisionPresenceTestSwitch.setStatus('mandatory')
ebrIfEthCollisionTestFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfEthCollisionTestFailed.setStatus('mandatory')
ebrIfEthFramingError = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfEthFramingError.setStatus('mandatory')
ebrIfEthLengthError = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfEthLengthError.setStatus('mandatory')
ebrIfEthTransmitMultipleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfEthTransmitMultipleCollisions.setStatus('mandatory')
ebrIfEthCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfEthCarrierLoss.setStatus('mandatory')
ebrIfEthCollisionLimitExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfEthCollisionLimitExceeded.setStatus('mandatory')
ebrIfFddiTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 3), )
if mibBuilder.loadTexts: ebrIfFddiTable.setStatus('mandatory')
ebrIfFddiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrIfIndex"))
if mibBuilder.loadTexts: ebrIfFddiEntry.setStatus('mandatory')
ebrIfFddiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfFddiIndex.setStatus('mandatory')
ebrIfFddiUnprocessedErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfFddiUnprocessedErrorPackets.setStatus('mandatory')
ebrIfFddiIpDatagramsFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfFddiIpDatagramsFragmented.setStatus('mandatory')
ebrIfFddiIpDontFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfFddiIpDontFragment.setStatus('mandatory')
ebrIfFddiIpIllegalHeaderLength = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfFddiIpIllegalHeaderLength.setStatus('mandatory')
ebrIfFddiIpIllegalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfFddiIpIllegalSize.setStatus('mandatory')
ebrIfSpanTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 4), )
if mibBuilder.loadTexts: ebrIfSpanTable.setStatus('mandatory')
ebrIfSpanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 4, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrIfIndex"))
if mibBuilder.loadTexts: ebrIfSpanEntry.setStatus('mandatory')
ebrIfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfSpIndex.setStatus('mandatory')
ebrIfSpDesigRootAge = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfSpDesigRootAge.setStatus('mandatory')
ebrIfSpForwardDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfSpForwardDelayTimer.setStatus('mandatory')
ebrIfSpBadHelloCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfSpBadHelloCount.setStatus('mandatory')
ebrIfSpPossibleLoopFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfSpPossibleLoopFlag.setStatus('mandatory')
ebrIfSpTopologyChangeAckFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrIfSpTopologyChangeAckFlag.setStatus('mandatory')
ebrTwoPortStaticTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 6, 1), )
if mibBuilder.loadTexts: ebrTwoPortStaticTable.setStatus('mandatory')
ebrTwoPortStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 6, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrTwoPortAddress"))
if mibBuilder.loadTexts: ebrTwoPortStaticEntry.setStatus('mandatory')
ebrTwoPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoPortAddress.setStatus('mandatory')
ebrTwoPortPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoPortPortNum.setStatus('mandatory')
ebrTwoPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lockDown", 1), ("hello", 2), ("invalid", 3), ("filter", 4), ("forward", 5), ("rateLimit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoPortStatus.setStatus('mandatory')
ebrMultiPortStaticTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 7, 1), )
if mibBuilder.loadTexts: ebrMultiPortStaticTable.setStatus('mandatory')
ebrMultiPortStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 7, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrMultiPortAddress"), (0, "DEC-ELAN-MIB", "ebrMultiPortReceivePort"))
if mibBuilder.loadTexts: ebrMultiPortStaticEntry.setStatus('mandatory')
ebrMultiPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 7, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiPortAddress.setStatus('mandatory')
ebrMultiPortReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiPortReceivePort.setStatus('mandatory')
ebrMultiPortAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 7, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiPortAllowedToGoTo.setStatus('mandatory')
ebrMultiPortPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiPortPortNum.setStatus('mandatory')
ebrMultiPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portMask", 1), ("lockDown", 2), ("maskAndLock", 3), ("hello", 4), ("filter", 5), ("invalid", 6), ("rateLimit", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiPortStatus.setStatus('mandatory')
ebrTwoProtoEnetFilterOther = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoProtoEnetFilterOther.setStatus('mandatory')
ebrTwoProtoSapFilterOther = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoProtoSapFilterOther.setStatus('mandatory')
ebrTwoProtoSnapFilterOther = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoProtoSnapFilterOther.setStatus('mandatory')
ebrTwoEnetProtoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 4), )
if mibBuilder.loadTexts: ebrTwoEnetProtoTable.setStatus('mandatory')
ebrTwoEnetProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 4, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrTwoEnetProtoType"))
if mibBuilder.loadTexts: ebrTwoEnetProtoEntry.setStatus('mandatory')
ebrTwoEnetProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoEnetProtoType.setStatus('mandatory')
ebrTwoEnetProtoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2), ("invalid", 3), ("rateLimit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoEnetProtoStatus.setStatus('mandatory')
ebrTwoSapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 5), )
if mibBuilder.loadTexts: ebrTwoSapProtoTable.setStatus('mandatory')
ebrTwoSapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 5, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrTwoSapIndex"))
if mibBuilder.loadTexts: ebrTwoSapProtoEntry.setStatus('mandatory')
ebrTwoSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrTwoSapIndex.setStatus('mandatory')
ebrTwoSapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoSapValue.setStatus('mandatory')
ebrTwoSapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2), ("invalid", 3), ("rateLimit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoSapStatus.setStatus('mandatory')
ebrTwoSnapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 6), )
if mibBuilder.loadTexts: ebrTwoSnapProtoTable.setStatus('mandatory')
ebrTwoSnapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 6, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrTwoSnapIndex"))
if mibBuilder.loadTexts: ebrTwoSnapProtoEntry.setStatus('mandatory')
ebrTwoSnapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrTwoSnapIndex.setStatus('mandatory')
ebrTwoSnapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoSnapValue.setStatus('mandatory')
ebrTwoSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2), ("invalid", 3), ("rateLimit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrTwoSnapStatus.setStatus('mandatory')
ebrMultiEnetProtoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 1), )
if mibBuilder.loadTexts: ebrMultiEnetProtoTable.setStatus('mandatory')
ebrMultiEnetProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrMultiEnetProtoType"), (0, "DEC-ELAN-MIB", "ebrMultiEnetReceivePort"))
if mibBuilder.loadTexts: ebrMultiEnetProtoEntry.setStatus('mandatory')
ebrMultiEnetProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiEnetProtoType.setStatus('mandatory')
ebrMultiEnetReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiEnetReceivePort.setStatus('mandatory')
ebrMultiEnetAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiEnetAllowedToGoTo.setStatus('mandatory')
ebrMultiEnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portMask", 1), ("invalid", 2), ("filter", 3), ("forward", 4), ("rateLimit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiEnetStatus.setStatus('mandatory')
ebrMultiSapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 2), )
if mibBuilder.loadTexts: ebrMultiSapProtoTable.setStatus('mandatory')
ebrMultiSapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrMultiSapValue"), (0, "DEC-ELAN-MIB", "ebrMultiSapReceivePort"))
if mibBuilder.loadTexts: ebrMultiSapProtoEntry.setStatus('mandatory')
ebrMultiSapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSapValue.setStatus('mandatory')
ebrMultiSapReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSapReceivePort.setStatus('mandatory')
ebrMultiSapAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSapAllowedToGoTo.setStatus('mandatory')
ebrMultiSapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portMask", 1), ("invalid", 2), ("filter", 3), ("forward", 4), ("rateLimit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSapStatus.setStatus('mandatory')
ebrMultiSnapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 3), )
if mibBuilder.loadTexts: ebrMultiSnapProtoTable.setStatus('mandatory')
ebrMultiSnapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrMultiSnapValue"), (0, "DEC-ELAN-MIB", "ebrMultiSnapReceivePort"))
if mibBuilder.loadTexts: ebrMultiSnapProtoEntry.setStatus('mandatory')
ebrMultiSnapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSnapValue.setStatus('mandatory')
ebrMultiSnapReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSnapReceivePort.setStatus('mandatory')
ebrMultiSnapAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSnapAllowedToGoTo.setStatus('mandatory')
ebrMultiSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portMask", 1), ("invalid", 2), ("filter", 3), ("forward", 4), ("rateLimit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSnapStatus.setStatus('mandatory')
ebrMultiSwTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 10, 1), )
if mibBuilder.loadTexts: ebrMultiSwTable.setStatus('mandatory')
ebrMultiSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 10, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrMultiSwIndex"))
if mibBuilder.loadTexts: ebrMultiSwEntry.setStatus('mandatory')
ebrMultiSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrMultiSwIndex.setStatus('mandatory')
ebrMultiSwManualFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSwManualFilter.setStatus('mandatory')
ebrMultiSwProtoEnetOther = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSwProtoEnetOther.setStatus('mandatory')
ebrMultiSwProtoSapOther = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSwProtoSapOther.setStatus('mandatory')
ebrMultiSwProtoSnapOther = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrMultiSwProtoSnapOther.setStatus('mandatory')
ebrNTPTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 11, 1), )
if mibBuilder.loadTexts: ebrNTPTable.setStatus('mandatory')
ebrNTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 11, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNTPtype"))
if mibBuilder.loadTexts: ebrNTPEntry.setStatus('mandatory')
ebrNTPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 11, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNTPtype.setStatus('mandatory')
ebrNTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNTPStatus.setStatus('mandatory')
esysIPXSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esysIPXSwitch.setStatus('mandatory')
ebrRateLimitSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrRateLimitSwitch.setStatus('mandatory')
ebrRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrRateLimit.setStatus('mandatory')
ebrRateLimitCounterTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 12, 3), )
if mibBuilder.loadTexts: ebrRateLimitCounterTable.setStatus('mandatory')
ebrRateLimitCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 12, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrRateLimitPort"))
if mibBuilder.loadTexts: ebrRateLimitCounterEntry.setStatus('mandatory')
ebrRateLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrRateLimitPort.setStatus('mandatory')
ebrRateLimitAddressFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 12, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrRateLimitAddressFrames.setStatus('mandatory')
ebrRateLimitProtocolFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 4, 12, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrRateLimitProtocolFrames.setStatus('mandatory')
eauth1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1))
eauthTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthTrapCommunity.setStatus('mandatory')
eauthTrapUserTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 2), )
if mibBuilder.loadTexts: eauthTrapUserTable.setStatus('mandatory')
eauthTrapUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "eauthTrapUserAddr"))
if mibBuilder.loadTexts: eauthTrapUserEntry.setStatus('mandatory')
eauthTrapUserAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthTrapUserAddr.setStatus('mandatory')
eauthTrapUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthTrapUserStatus.setStatus('mandatory')
eauthReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthReadOnlyCommunity.setStatus('mandatory')
eauthReadOnlyUserTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 4), )
if mibBuilder.loadTexts: eauthReadOnlyUserTable.setStatus('mandatory')
eauthReadOnlyUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 4, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "eauthReadOnlyUserAddr"))
if mibBuilder.loadTexts: eauthReadOnlyUserEntry.setStatus('mandatory')
eauthReadOnlyUserAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthReadOnlyUserAddr.setStatus('mandatory')
eauthReadOnlyUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthReadOnlyUserMask.setStatus('mandatory')
eauthReadOnlyUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthReadOnlyUserStatus.setStatus('mandatory')
eauthReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthReadWriteCommunity.setStatus('mandatory')
eauthReadWriteUserTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 6), )
if mibBuilder.loadTexts: eauthReadWriteUserTable.setStatus('mandatory')
eauthReadWriteUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 6, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "eauthReadWriteUserAddr"))
if mibBuilder.loadTexts: eauthReadWriteUserEntry.setStatus('mandatory')
eauthReadWriteUserAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthReadWriteUserAddr.setStatus('mandatory')
eauthReadWriteUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthReadWriteUserMask.setStatus('mandatory')
eauthReadWriteUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 1, 5, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eauthReadWriteUserStatus.setStatus('mandatory')
sysobjid = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15))
bridges = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3))
gigaswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3))
minimumGIGAswitchMIBVersionSupported = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minimumGIGAswitchMIBVersionSupported.setStatus('mandatory')
maximumGIGAswitchMIBVersionSupported = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumGIGAswitchMIBVersionSupported.setStatus('mandatory')
gigaversion1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3))
gigaBox = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1))
gigaBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2))
gigaUpgradeSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3))
gigaIP = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4))
gigaSets = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5))
gigaSnmpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 6))
gigaXglEthernetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7))
serviceClassAssignments = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5))
filterByReferencedExpression = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1))
ebrNportMatrixNameTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 1), )
if mibBuilder.loadTexts: ebrNportMatrixNameTable.setStatus('mandatory')
ebrNportMatrixNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportMatrixName"))
if mibBuilder.loadTexts: ebrNportMatrixNameEntry.setStatus('mandatory')
ebrNportMatrixName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportMatrixName.setStatus('mandatory')
ebrNportMatrixValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportMatrixValue.setStatus('mandatory')
ebrNportMatrixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportMatrixStatus.setStatus('mandatory')
ebrNportMatrixFppnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportMatrixFppnValue.setStatus('mandatory')
ebrNportSapNameTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 2), )
if mibBuilder.loadTexts: ebrNportSapNameTable.setStatus('mandatory')
ebrNportSapNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSapName"))
if mibBuilder.loadTexts: ebrNportSapNameEntry.setStatus('mandatory')
ebrNportSapName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportSapName.setStatus('mandatory')
ebrNportSapNameSap = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapNameSap.setStatus('mandatory')
ebrNportSapMatrixName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapMatrixName.setStatus('mandatory')
ebrNportSapNameDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filter", 1), ("alwaysFilter", 2), ("alwaysForward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapNameDisp.setStatus('mandatory')
ebrNportSapNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapNameStatus.setStatus('mandatory')
ebrNportSnapNameTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 3), )
if mibBuilder.loadTexts: ebrNportSnapNameTable.setStatus('mandatory')
ebrNportSnapNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSnapName"))
if mibBuilder.loadTexts: ebrNportSnapNameEntry.setStatus('mandatory')
ebrNportSnapName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportSnapName.setStatus('mandatory')
ebrNportSnapNameSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapNameSnap.setStatus('mandatory')
ebrNportSnapMatrixName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapMatrixName.setStatus('mandatory')
ebrNportSnapNameDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filter", 1), ("alwaysFilter", 2), ("alwaysForward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapNameDisp.setStatus('mandatory')
ebrNportSnapNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapNameStatus.setStatus('mandatory')
ebrNportDANameTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 4), )
if mibBuilder.loadTexts: ebrNportDANameTable.setStatus('mandatory')
ebrNportDANameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 4, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportDAName"))
if mibBuilder.loadTexts: ebrNportDANameEntry.setStatus('mandatory')
ebrNportDAName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportDAName.setStatus('mandatory')
ebrNportDANameDA = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDANameDA.setStatus('mandatory')
ebrNportDAMatrixName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDAMatrixName.setStatus('mandatory')
ebrNportDANameDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filter", 1), ("alwaysFilter", 2), ("alwaysForward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDANameDisp.setStatus('mandatory')
ebrNportDANameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDANameStatus.setStatus('mandatory')
ebrNportSANameTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 5), )
if mibBuilder.loadTexts: ebrNportSANameTable.setStatus('mandatory')
ebrNportSANameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 5, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSAName"))
if mibBuilder.loadTexts: ebrNportSANameEntry.setStatus('mandatory')
ebrNportSAName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportSAName.setStatus('mandatory')
ebrNportSANameSA = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSANameSA.setStatus('mandatory')
ebrNportSAMatrixName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSAMatrixName.setStatus('mandatory')
ebrNportSANameDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("portMask", 1), ("alwaysFilter", 2), ("alwaysForward", 3), ("lockdown", 4), ("lockdownportmask", 5), ("filter", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSANameDisp.setStatus('mandatory')
ebrNportSANameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSANameStatus.setStatus('mandatory')
ebrNportMatrixNameRowTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 8), )
if mibBuilder.loadTexts: ebrNportMatrixNameRowTable.setStatus('mandatory')
ebrNportMatrixNameRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 8, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportmatrixName"), (0, "DEC-ELAN-MIB", "ebrNportMatrixReceivePort"))
if mibBuilder.loadTexts: ebrNportMatrixNameRowEntry.setStatus('mandatory')
ebrNportmatrixName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportmatrixName.setStatus('mandatory')
ebrNportMatrixReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportMatrixReceivePort.setStatus('mandatory')
ebrNportMatrixAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportMatrixAllowedToGoTo.setStatus('mandatory')
ebrNportMatrixNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportMatrixNameRowStatus.setStatus('mandatory')
ebrNportMatrixFppnRowTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 11), )
if mibBuilder.loadTexts: ebrNportMatrixFppnRowTable.setStatus('mandatory')
ebrNportMatrixFppnRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 11, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportmatrixname"), (0, "DEC-ELAN-MIB", "ebrNportMatrixFppnReceivePort"))
if mibBuilder.loadTexts: ebrNportMatrixFppnRowEntry.setStatus('mandatory')
ebrNportmatrixname = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportmatrixname.setStatus('mandatory')
ebrNportMatrixFppnReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportMatrixFppnReceivePort.setStatus('mandatory')
ebrNportMatrixFppnAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportMatrixFppnAllowedToGoTo.setStatus('mandatory')
ebrNportMatrixFppnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportMatrixFppnRowStatus.setStatus('mandatory')
ebrNportDefaultMatrixValue = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDefaultMatrixValue.setStatus('mandatory')
ebrNportDefaultMatrixFppnValue = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDefaultMatrixFppnValue.setStatus('mandatory')
ebrNportNamedDefaultMatrix = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportNamedDefaultMatrix.setStatus('mandatory')
ebrNportDefaultMatrixRowTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 13), )
if mibBuilder.loadTexts: ebrNportDefaultMatrixRowTable.setStatus('mandatory')
ebrNportDefaultMatrixRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 13, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportDefaultMatrixReceivePort"))
if mibBuilder.loadTexts: ebrNportDefaultMatrixRowEntry.setStatus('mandatory')
ebrNportDefaultMatrixReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportDefaultMatrixReceivePort.setStatus('mandatory')
ebrNportDefaultMatrixAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportDefaultMatrixAllowedToGoTo.setStatus('mandatory')
ebrNportManualFilter = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportManualFilter.setStatus('mandatory')
ebrNportFppnManualFilter = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportFppnManualFilter.setStatus('mandatory')
ebrNportFloodMatrixValue = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportFloodMatrixValue.setStatus('mandatory')
ebrNportFloodMatrixFppnValue = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportFloodMatrixFppnValue.setStatus('mandatory')
ebrNportNamedFloodMatrix = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportNamedFloodMatrix.setStatus('mandatory')
ebrNportFloodMatrixRowTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 17), )
if mibBuilder.loadTexts: ebrNportFloodMatrixRowTable.setStatus('mandatory')
ebrNportFloodMatrixRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 17, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportFloodMatrixReceivePort"))
if mibBuilder.loadTexts: ebrNportFloodMatrixRowEntry.setStatus('mandatory')
ebrNportFloodMatrixReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportFloodMatrixReceivePort.setStatus('mandatory')
ebrNportFloodMatrixAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 1, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebrNportFloodMatrixAllowedToGoTo.setStatus('mandatory')
filterByBitmapValue = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2))
ebrNportStaticDATable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 5), )
if mibBuilder.loadTexts: ebrNportStaticDATable.setStatus('mandatory')
ebrNportStaticDAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 5, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportDAAddress"), (0, "DEC-ELAN-MIB", "ebrNportDAReceivePort"))
if mibBuilder.loadTexts: ebrNportStaticDAEntry.setStatus('mandatory')
ebrNportDAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDAAddress.setStatus('mandatory')
ebrNportDAReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDAReceivePort.setStatus('mandatory')
ebrNportDAAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDAAllowedToGoTo.setStatus('mandatory')
ebrNportStaticDAFilterCharacteristicsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 6), )
if mibBuilder.loadTexts: ebrNportStaticDAFilterCharacteristicsTable.setStatus('mandatory')
ebrNportStaticDAFilterCharacteristicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 6, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportDestinationAddress"))
if mibBuilder.loadTexts: ebrNportStaticDAFilterCharacteristicsEntry.setStatus('mandatory')
ebrNportDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDestinationAddress.setStatus('mandatory')
ebrNportDADisp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filter", 1), ("alwaysFilter", 2), ("alwaysForward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDADisp.setStatus('mandatory')
ebrNportDAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportDAStatus.setStatus('mandatory')
ebrNportDASvcTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 3), )
if mibBuilder.loadTexts: ebrNportDASvcTable.setStatus('mandatory')
ebrNportDASvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSvcAddress"))
if mibBuilder.loadTexts: ebrNportDASvcEntry.setStatus('mandatory')
ebrNportSvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSvcAddress.setStatus('mandatory')
ebrNportSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSvc.setStatus('mandatory')
ebrNportSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSvcStatus.setStatus('mandatory')
ebrNportPortNumTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 3), )
if mibBuilder.loadTexts: ebrNportPortNumTable.setStatus('mandatory')
ebrNportPortNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportPortNumAddress"))
if mibBuilder.loadTexts: ebrNportPortNumEntry.setStatus('mandatory')
ebrNportPortNumAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportPortNumAddress.setStatus('mandatory')
ebrNportPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportPortNum.setStatus('mandatory')
ebrNportPortNumStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportPortNumStatus.setStatus('mandatory')
ebrNportFppnPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportFppnPortNum.setStatus('mandatory')
ebrNportStaticSATable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 7), )
if mibBuilder.loadTexts: ebrNportStaticSATable.setStatus('mandatory')
ebrNportStaticSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 7, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSAAddress"), (0, "DEC-ELAN-MIB", "ebrNportSAReceivePort"))
if mibBuilder.loadTexts: ebrNportStaticSAEntry.setStatus('mandatory')
ebrNportSAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSAAddress.setStatus('mandatory')
ebrNportSAReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSAReceivePort.setStatus('mandatory')
ebrNportSAAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSAAllowedToGoTo.setStatus('mandatory')
ebrNportStaticSAFilterCharacteristicsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 8), )
if mibBuilder.loadTexts: ebrNportStaticSAFilterCharacteristicsTable.setStatus('mandatory')
ebrNportStaticSAFilterCharacteristicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 8, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSourceAddress"))
if mibBuilder.loadTexts: ebrNportStaticSAFilterCharacteristicsEntry.setStatus('mandatory')
ebrNportSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSourceAddress.setStatus('mandatory')
ebrNportSADisp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("portMask", 1), ("alwaysFilter", 2), ("alwaysForward", 3), ("lockdown", 4), ("lockdownportmask", 5), ("filter", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSADisp.setStatus('mandatory')
ebrNportSAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSAStatus.setStatus('mandatory')
ebrNportSapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 1), )
if mibBuilder.loadTexts: ebrNportSapProtoTable.setStatus('mandatory')
ebrNportSapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSapValue"), (0, "DEC-ELAN-MIB", "ebrNportSapReceivePort"))
if mibBuilder.loadTexts: ebrNportSapProtoEntry.setStatus('mandatory')
ebrNportSapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapValue.setStatus('mandatory')
ebrNportSapReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapReceivePort.setStatus('mandatory')
ebrNportSapAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapAllowedToGoTo.setStatus('mandatory')
ebrNportSapSvcTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 1), )
if mibBuilder.loadTexts: ebrNportSapSvcTable.setStatus('mandatory')
ebrNportSapSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSapSvcSapValue"))
if mibBuilder.loadTexts: ebrNportSapSvcEntry.setStatus('mandatory')
ebrNportSapSvcSapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapSvcSapValue.setStatus('mandatory')
ebrNportSapSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapSvc.setStatus('mandatory')
ebrNportSapSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapSvcStatus.setStatus('mandatory')
ebrNportSapSinglePath = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapSinglePath.setStatus('mandatory')
ebrNportSapFilterCharacteristicsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 2), )
if mibBuilder.loadTexts: ebrNportSapFilterCharacteristicsTable.setStatus('mandatory')
ebrNportSapFilterCharacteristicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSapFilterCharacteristicsSapValue"))
if mibBuilder.loadTexts: ebrNportSapFilterCharacteristicsEntry.setStatus('mandatory')
ebrNportSapFilterCharacteristicsSapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapFilterCharacteristicsSapValue.setStatus('mandatory')
ebrNportSapDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filter", 1), ("alwaysFilter", 2), ("alwaysForward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapDisp.setStatus('mandatory')
ebrNportSapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSapStatus.setStatus('mandatory')
ebrNportSnapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 3), )
if mibBuilder.loadTexts: ebrNportSnapProtoTable.setStatus('mandatory')
ebrNportSnapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSnapValue"), (0, "DEC-ELAN-MIB", "ebrNportSnapReceivePort"))
if mibBuilder.loadTexts: ebrNportSnapProtoEntry.setStatus('mandatory')
ebrNportSnapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapValue.setStatus('mandatory')
ebrNportSnapReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapReceivePort.setStatus('mandatory')
ebrNportSnapAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapAllowedToGoTo.setStatus('mandatory')
ebrNportSnapSvcTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 2), )
if mibBuilder.loadTexts: ebrNportSnapSvcTable.setStatus('mandatory')
ebrNportSnapSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSnapSvcSnapValue"))
if mibBuilder.loadTexts: ebrNportSnapSvcEntry.setStatus('mandatory')
ebrNportSnapSvcSnapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapSvcSnapValue.setStatus('mandatory')
ebrNportSnapSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapSvc.setStatus('mandatory')
ebrNportSnapSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapSvcStatus.setStatus('mandatory')
ebrNportSnapSinglePath = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 5, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapSinglePath.setStatus('mandatory')
ebrNportSnapFilterCharacteristicsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 4), )
if mibBuilder.loadTexts: ebrNportSnapFilterCharacteristicsTable.setStatus('mandatory')
ebrNportSnapFilterCharacteristicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 4, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSnapFilterCharacteristicsSnapValue"))
if mibBuilder.loadTexts: ebrNportSnapFilterCharacteristicsEntry.setStatus('mandatory')
ebrNportSnapFilterCharacteristicsSnapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapFilterCharacteristicsSnapValue.setStatus('mandatory')
ebrNportSnapDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filter", 1), ("alwaysFilter", 2), ("alwaysForward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapDisp.setStatus('mandatory')
ebrNportSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSnapStatus.setStatus('mandatory')
ebrNportSwTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 9), )
if mibBuilder.loadTexts: ebrNportSwTable.setStatus('mandatory')
ebrNportSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 9, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ebrNportSwReceivePort"))
if mibBuilder.loadTexts: ebrNportSwEntry.setStatus('mandatory')
ebrNportSwReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSwReceivePort.setStatus('mandatory')
ebrNportSwAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSwAllowedToGoTo.setStatus('mandatory')
ebrNportSwManualFilter = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebrNportSwManualFilter.setStatus('mandatory')
cutThrough = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7))
cutThroughTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 1), )
if mibBuilder.loadTexts: cutThroughTable.setStatus('mandatory')
cutThroughEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "cutThroughBridgePort"))
if mibBuilder.loadTexts: cutThroughEntry.setStatus('mandatory')
cutThroughBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cutThroughBridgePort.setStatus('mandatory')
cutThroughInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cutThroughInbound.setStatus('mandatory')
cutThroughOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cutThroughOutbound.setStatus('mandatory')
cutThroughFppnTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 2), )
if mibBuilder.loadTexts: cutThroughFppnTable.setStatus('mandatory')
cutThroughFppnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "cutThroughFppnPort"))
if mibBuilder.loadTexts: cutThroughFppnEntry.setStatus('mandatory')
cutThroughFppnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cutThroughFppnPort.setStatus('mandatory')
cutThroughFppnInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cutThroughFppnInbound.setStatus('mandatory')
cutThroughFppnOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cutThroughFppnOutbound.setStatus('mandatory')
clockCard = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 1))
psc = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2))
powerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 3))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4))
fan = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 5))
battery = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 6))
fppn = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 7))
lineCard = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 8))
led = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9))
mgmtMemoryAvail = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtMemoryAvail.setStatus('mandatory')
mgmtMemoryAction = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rewrite", 2), ("rewriting", 3), ("clearAndLock", 4), ("locked", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtMemoryAction.setStatus('mandatory')
mgmtMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 1, 3), )
if mibBuilder.loadTexts: mgmtMemoryTable.setStatus('mandatory')
mgmtMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 1, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "mgmtMemoryIndex"))
if mibBuilder.loadTexts: mgmtMemoryEntry.setStatus('mandatory')
mgmtMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtMemoryIndex.setStatus('mandatory')
mgmtMemoryData = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtMemoryData.setStatus('mandatory')
pscStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscStatus.setStatus('mandatory')
pscFwRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscFwRev.setStatus('mandatory')
pscHwRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscHwRev.setStatus('mandatory')
keyswitchPosition = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fault", 1), ("secure", 2), ("local", 3), ("remote", 4), ("worldAccess", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyswitchPosition.setStatus('mandatory')
pscFwImageStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("downloadRequired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscFwImageStatus.setStatus('mandatory')
pscBackplaneStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscBackplaneStatus.setStatus('mandatory')
cabinetTemperature = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("excessivelyHigh", 3), ("low", 4), ("excessivelyLow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabinetTemperature.setStatus('mandatory')
temperatureWarning = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("heedWarning", 1), ("ignoreWarning", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureWarning.setStatus('mandatory')
rightPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rightPowerStatus.setStatus('mandatory')
rightPowerInputSource = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acLine", 1), ("dc48V", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rightPowerInputSource.setStatus('mandatory')
rightPowerOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rightPowerOutputPower.setStatus('mandatory')
leftPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: leftPowerStatus.setStatus('mandatory')
leftPowerInputSource = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acLine", 1), ("dc48V", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: leftPowerInputSource.setStatus('mandatory')
leftPowerOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leftPowerOutputPower.setStatus('mandatory')
slotNumber = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNumber.setStatus('mandatory')
scpSlot = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpSlot.setStatus('mandatory')
slotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 3), )
if mibBuilder.loadTexts: slotTable.setStatus('mandatory')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "slotIndex"))
if mibBuilder.loadTexts: slotEntry.setStatus('mandatory')
slotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndex.setStatus('mandatory')
slotCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notPresent", 1), ("powerDown", 2), ("powerUp", 3), ("powerDownThenUp", 4), ("fault", 5), ("revisionMismatch", 6), ("selfTestInProgress", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotCardStatus.setStatus('mandatory')
slotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("fgl2", 2), ("cbs36", 3), ("switchEngine", 4), ("clockCard", 5), ("agl-2", 6), ("fgl4", 7), ("agl-2-plus", 8), ("xgl2", 9), ("xgl4", 10), ("gs2000", 11), ("gs2000-plus", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardType.setStatus('mandatory')
slotCardHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardHwRev.setStatus('mandatory')
slotCardFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardFwRev.setStatus('mandatory')
hostSlotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 4), )
if mibBuilder.loadTexts: hostSlotTable.setStatus('mandatory')
hostSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 4, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "hostSlotIndex"))
if mibBuilder.loadTexts: hostSlotEntry.setStatus('mandatory')
hostSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSlotIndex.setStatus('mandatory')
hostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 4, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIP.setStatus('mandatory')
fanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("maximum", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanSpeed.setStatus('mandatory')
rightFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rightFanStatus.setStatus('mandatory')
leftFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: leftFanStatus.setStatus('mandatory')
batteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryStatus.setStatus('mandatory')
batteryUsing = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("batteryPower", 1), ("externalPower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryUsing.setStatus('mandatory')
batteryCharge = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullyCharged", 1), ("okay", 2), ("low", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCharge.setStatus('mandatory')
batteryTest = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTest.setStatus('mandatory')
fppnTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 7, 1), )
if mibBuilder.loadTexts: fppnTable.setStatus('mandatory')
fppnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 7, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "fppnSlotNumber"), (0, "DEC-ELAN-MIB", "fppnPortOfThatSlot"))
if mibBuilder.loadTexts: fppnEntry.setStatus('mandatory')
fppnSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fppnSlotNumber.setStatus('mandatory')
fppnPortOfThatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fppnPortOfThatSlot.setStatus('mandatory')
fppnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fppnIfIndex.setStatus('mandatory')
fppnBridgePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fppnBridgePortNumber.setStatus('mandatory')
mPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 8, 1), )
if mibBuilder.loadTexts: mPortTable.setStatus('mandatory')
mPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 8, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "mPortSMTIndex"), (0, "DEC-ELAN-MIB", "mPortMACIndex"))
if mibBuilder.loadTexts: mPortEntry.setStatus('mandatory')
mPortSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mPortSMTIndex.setStatus('mandatory')
mPortMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mPortMACIndex.setStatus('mandatory')
mPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mPortEnable.setStatus('mandatory')
ledTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 1), )
if mibBuilder.loadTexts: ledTable.setStatus('mandatory')
ledTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ledTableIndex"))
if mibBuilder.loadTexts: ledTableEntry.setStatus('mandatory')
ledTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledTableIndex.setStatus('mandatory')
ledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledCount.setStatus('mandatory')
ledSlotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 2), )
if mibBuilder.loadTexts: ledSlotTable.setStatus('mandatory')
ledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ledSlotIndex"), (0, "DEC-ELAN-MIB", "ledLedIndex"))
if mibBuilder.loadTexts: ledEntry.setStatus('mandatory')
ledSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSlotIndex.setStatus('mandatory')
ledLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledLedIndex.setStatus('mandatory')
ledDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledDescr.setStatus('mandatory')
ledProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 1, 9, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledProgram.setStatus('mandatory')
flooding = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6))
floodUnknownUnicastRate = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: floodUnknownUnicastRate.setStatus('mandatory')
floodMulticastRate = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: floodMulticastRate.setStatus('mandatory')
floodTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3), )
if mibBuilder.loadTexts: floodTable.setStatus('mandatory')
floodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "floodQuotaQualifier"), (0, "DEC-ELAN-MIB", "floodQuotaClass"))
if mibBuilder.loadTexts: floodEntry.setStatus('mandatory')
floodQuotaQualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodQuotaQualifier.setStatus('mandatory')
floodQuotaClass = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodQuotaClass.setStatus('mandatory')
floodBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodBytesSent.setStatus('mandatory')
floodPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodPacketsSent.setStatus('mandatory')
floodGeezers = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodGeezers.setStatus('mandatory')
floodLosers = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodLosers.setStatus('mandatory')
floodHogs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodHogs.setStatus('mandatory')
floodSinglePathDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodSinglePathDiscards.setStatus('mandatory')
floodPacketsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodPacketsFiltered.setStatus('mandatory')
floodPacketsPurged = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodPacketsPurged.setStatus('mandatory')
floodBytesPurged = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodBytesPurged.setStatus('mandatory')
floodLocalCopyPacketsDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodLocalCopyPacketsDelivered.setStatus('mandatory')
floodLocalCopyPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floodLocalCopyPacketsDiscarded.setStatus('mandatory')
commitFails = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitFails.setStatus('mandatory')
doTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 1))
useTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 2))
tftpDestination = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpDestination.setStatus('mandatory')
mopDestination = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mopDestination.setStatus('mandatory')
transferFileName = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferFileName.setStatus('mandatory')
transferAction = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("doMOP", 2), ("doTFTP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferAction.setStatus('mandatory')
transferStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("requested", 2), ("inProgress", 3), ("failed", 4), ("success", 5), ("failedDueToCheckSum", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferStatus.setStatus('mandatory')
transferSize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSize.setStatus('mandatory')
copyToSlot = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: copyToSlot.setStatus('mandatory')
copyType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("scp", 2), ("fgl2", 3), ("clock", 4), ("powerSystemController", 5), ("agl-2", 6), ("fgl4", 7), ("agl-2-plus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: copyType.setStatus('mandatory')
copyAction = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("doUpgrade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: copyAction.setStatus('mandatory')
copyStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("requested", 2), ("inProgress", 3), ("failed", 4), ("success", 5), ("failedDueToCardType", 6), ("failedDueToHwRev", 7), ("failedDueToFwRev", 8), ("failedDueToBadImage", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: copyStatus.setStatus('mandatory')
deleteTransfer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exists", 1), ("notExist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteTransfer.setStatus('mandatory')
arpTimingMechanism = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 1))
arpTimeoutInSeconds = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpTimeoutInSeconds.setStatus('mandatory')
arpPeriodBetweenRequests = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpPeriodBetweenRequests.setStatus('mandatory')
arpRequestRetries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpRequestRetries.setStatus('mandatory')
arpControlParams = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 3))
arpAgent = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpAgent.setStatus('mandatory')
arpStatisticalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4))
arpStatisticalTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4, 1), )
if mibBuilder.loadTexts: arpStatisticalTable.setStatus('mandatory')
arpStatisticalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "arpStatisticalIfIndex"))
if mibBuilder.loadTexts: arpStatisticalEntry.setStatus('mandatory')
arpStatisticalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatisticalIfIndex.setStatus('mandatory')
arpUnicastReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpUnicastReceived.setStatus('mandatory')
arpBroadcastReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpBroadcastReceived.setStatus('mandatory')
arpRepliesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpRepliesTransmitted.setStatus('mandatory')
arpFramesFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpFramesFlooded.setStatus('mandatory')
arpFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpFramesDiscarded.setStatus('mandatory')
snmpParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 2))
snmpDuplicateDiscardInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDuplicateDiscardInterval.setStatus('mandatory')
gigaStp = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 8))
gigaStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 8, 1), )
if mibBuilder.loadTexts: gigaStpPortTable.setStatus('mandatory')
gigaStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 8, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "gigaStpPortIfIndex"))
if mibBuilder.loadTexts: gigaStpPortEntry.setStatus('mandatory')
gigaStpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigaStpPortIfIndex.setStatus('mandatory')
gigaStpPortSpanningTreeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("trueNoDelay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigaStpPortSpanningTreeEnable.setStatus('mandatory')
gigaStpDemandLearningEnable = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigaStpDemandLearningEnable.setStatus('mandatory')
translationTableParams = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 9))
ttSize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttSize.setStatus('mandatory')
xacInDiscardCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 10))
xacInDiscardUnknownDAUCast = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xacInDiscardUnknownDAUCast.setStatus('mandatory')
xacInDiscardMulticast = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xacInDiscardMulticast.setStatus('mandatory')
xacInDiscardIPForwarding = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xacInDiscardIPForwarding.setStatus('mandatory')
communityString = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 11))
communityStringDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 2, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityStringDelimiter.setStatus('mandatory')
ipSwitching = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5))
ipSwitchEnable = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSwitchEnable.setStatus('mandatory')
ipSwitchPortsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 2), )
if mibBuilder.loadTexts: ipSwitchPortsTable.setStatus('mandatory')
ipSwitchPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "ipRangeStartAddr"), (0, "DEC-ELAN-MIB", "ipRangeEndAddr"))
if mibBuilder.loadTexts: ipSwitchPortsEntry.setStatus('mandatory')
ipRangeStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRangeStartAddr.setStatus('mandatory')
ipRangeEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRangeEndAddr.setStatus('mandatory')
ipIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIPAddr.setStatus('mandatory')
ipStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticPorts.setStatus('mandatory')
ipDynamicPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDynamicPorts.setStatus('mandatory')
ipPrimaryPorts = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPrimaryPorts.setStatus('mandatory')
ipDynamicPrimaryPorts = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDynamicPrimaryPorts.setStatus('mandatory')
ipDynamicEnabledPorts = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 4, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDynamicEnabledPorts.setStatus('mandatory')
agl = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4))
aglConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 1))
aglSonet = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 2))
aglDS3E3 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 3))
aglAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4))
aglInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 1, 1), )
if mibBuilder.loadTexts: aglInterfaceConfTable.setStatus('mandatory')
aglInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 1, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglInterfaceIndex"))
if mibBuilder.loadTexts: aglInterfaceConfEntry.setStatus('mandatory')
aglInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglInterfaceIndex.setStatus('mandatory')
aglInterfacePhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sts3cStm1", 1), ("ds3e3", 2), ("unKnown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglInterfacePhyType.setStatus('mandatory')
aglInterfaceTrafficRateGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglInterfaceTrafficRateGranularity.setStatus('mandatory')
aglInterfaceSonetTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 2, 1), )
if mibBuilder.loadTexts: aglInterfaceSonetTable.setStatus('mandatory')
aglInterfaceSonetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 2, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglInterfaceSonetIndex"))
if mibBuilder.loadTexts: aglInterfaceSonetEntry.setStatus('mandatory')
aglInterfaceSonetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglInterfaceSonetIndex.setStatus('mandatory')
aglInterfaceSonetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonetSTS3c", 1), ("sdhSTM1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglInterfaceSonetMode.setStatus('mandatory')
aglInterfaceSonetTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglInterfaceSonetTiming.setStatus('mandatory')
aglInterfaceDS3E3Table = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 3, 1), )
if mibBuilder.loadTexts: aglInterfaceDS3E3Table.setStatus('mandatory')
aglInterfaceDS3E3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 3, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglInterfaceDS3E3Index"))
if mibBuilder.loadTexts: aglInterfaceDS3E3Entry.setStatus('mandatory')
aglInterfaceDS3E3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglInterfaceDS3E3Index.setStatus('mandatory')
aglInterfaceDS3E3Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low-power", 1), ("high-power", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglInterfaceDS3E3Mode.setStatus('mandatory')
aglInterfaceDS3E3Plcp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglInterfaceDS3E3Plcp.setStatus('mandatory')
aglVCConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1), )
if mibBuilder.loadTexts: aglVCConnectionTable.setStatus('mandatory')
aglVCConnectionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglVCConnectionPortA"), (0, "DEC-ELAN-MIB", "aglVCConnectionPortAVpi"), (0, "DEC-ELAN-MIB", "aglVCConnectionPortAVci"), (0, "DEC-ELAN-MIB", "aglVCConnectionPortB"), (0, "DEC-ELAN-MIB", "aglVCConnectionPortBVpi"), (0, "DEC-ELAN-MIB", "aglVCConnectionPortBVci"))
if mibBuilder.loadTexts: aglVCConnectionTableEntry.setStatus('mandatory')
aglVCConnectionPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglVCConnectionPortA.setStatus('mandatory')
aglVCConnectionPortAVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglVCConnectionPortAVpi.setStatus('mandatory')
aglVCConnectionPortAVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglVCConnectionPortAVci.setStatus('mandatory')
aglVCConnectionPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglVCConnectionPortB.setStatus('mandatory')
aglVCConnectionPortBVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglVCConnectionPortBVpi.setStatus('mandatory')
aglVCConnectionPortBVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglVCConnectionPortBVci.setStatus('mandatory')
aglVCConnectionTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglVCConnectionTableEntryStatus.setStatus('mandatory')
aglVCConnectionTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fddi-bridged", 1), ("atm-to-atm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglVCConnectionTrafficType.setStatus('mandatory')
aglVCConnectionAALType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal34", 1), ("aal5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglVCConnectionAALType.setStatus('mandatory')
aglVCConnectionOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglVCConnectionOperStatus.setStatus('mandatory')
aglVCConnectionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglVCConnectionAdminStatus.setStatus('mandatory')
aglVCConnectionTrafficShaperPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglVCConnectionTrafficShaperPeakRate.setStatus('mandatory')
aglVCConnectionTrafficShaperAvgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglVCConnectionTrafficShaperAvgRate.setStatus('mandatory')
aglVCConnectionTrafficShaperMinGuaranteedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglVCConnectionTrafficShaperMinGuaranteedRate.setStatus('mandatory')
aglVCConnectionTrafficShaperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglVCConnectionTrafficShaperPriority.setStatus('mandatory')
aglInterfaceATMTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 2), )
if mibBuilder.loadTexts: aglInterfaceATMTable.setStatus('mandatory')
aglInterfaceATMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglInterfaceATMIndex"))
if mibBuilder.loadTexts: aglInterfaceATMTableEntry.setStatus('mandatory')
aglInterfaceATMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglInterfaceATMIndex.setStatus('mandatory')
aglInterfaceATMScrambeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglInterfaceATMScrambeStatus.setStatus('mandatory')
aglInterfaceATMOAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglInterfaceATMOAMStatus.setStatus('mandatory')
aglatmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5))
aglatmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1))
aglatmInterfaceTrafficEnforcementTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1))
aglatmInterfaceNoTrafficEnforcement = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceNoTrafficEnforcement.setStatus('mandatory')
aglatmInterfaceTrafficEnforcementType1 = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceTrafficEnforcementType1.setStatus('mandatory')
aglatmInterfaceTrafficEnforcementType2 = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceTrafficEnforcementType2.setStatus('mandatory')
aglatmInterfaceTrafficEnforcementType3 = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceTrafficEnforcementType3.setStatus('mandatory')
aglatmInterfaceTrafficEnforcementType4 = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceTrafficEnforcementType4.setStatus('mandatory')
aglatmInterfaceTrafficEnforcementType5 = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceTrafficEnforcementType5.setStatus('mandatory')
aglatmInterfaceTrafficEnforcementType6 = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceTrafficEnforcementType6.setStatus('mandatory')
aglatmInterfaceTrafficEnforcementType7 = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceTrafficEnforcementType7.setStatus('mandatory')
aglatmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2), )
if mibBuilder.loadTexts: aglatmInterfaceConfTable.setStatus('mandatory')
aglatmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglatmInterfaceIndex"))
if mibBuilder.loadTexts: aglatmInterfaceConfEntry.setStatus('mandatory')
aglatmInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: aglatmInterfaceIndex.setStatus('mandatory')
aglatmInterfaceMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceMaxVpcs.setStatus('mandatory')
aglatmInterfaceMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceMaxVccs.setStatus('mandatory')
aglatmInterfaceConfVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceConfVpcs.setStatus('mandatory')
aglatmInterfaceConfVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceConfVccs.setStatus('mandatory')
aglatmInterfaceMaxActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceMaxActiveVpiBits.setStatus('mandatory')
aglatmInterfaceMaxActiveVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceMaxActiveVciBits.setStatus('mandatory')
aglatmInterfaceIlmiVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceIlmiVpiVci.setStatus('mandatory')
aglatmInterfaceSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceSpecific.setStatus('mandatory')
aglatmInterfaceDs3PlcpTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 3), )
if mibBuilder.loadTexts: aglatmInterfaceDs3PlcpTable.setStatus('mandatory')
aglatmInterfaceDs3PlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglatmInterfaceDs3PlcpIndex"))
if mibBuilder.loadTexts: aglatmInterfaceDs3PlcpEntry.setStatus('mandatory')
aglatmInterfaceDs3PlcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aglatmInterfaceDs3PlcpIndex.setStatus('mandatory')
aglatmInterfaceDs3PlcpSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceDs3PlcpSEFSs.setStatus('mandatory')
aglatmInterfaceDs3PlcpAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAlarm", 1), ("receivedFarEndAlarm", 2), ("incomingLOF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceDs3PlcpAlarmState.setStatus('mandatory')
aglatmInterfaceDs3PlcpUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceDs3PlcpUASs.setStatus('mandatory')
aglatmInterfaceSonetTCTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 4), )
if mibBuilder.loadTexts: aglatmInterfaceSonetTCTable.setStatus('mandatory')
aglatmInterfaceSonetTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 4, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglatmInterfaceSonetTCIndex"))
if mibBuilder.loadTexts: aglatmInterfaceSonetTCEntry.setStatus('mandatory')
aglatmInterfaceSonetTCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: aglatmInterfaceSonetTCIndex.setStatus('mandatory')
aglatmInterfaceSonetTCOCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceSonetTCOCDEvents.setStatus('mandatory')
aglatmInterfaceSonetTCAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAlarm", 1), ("lcdFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglatmInterfaceSonetTCAlarmState.setStatus('mandatory')
aglsonetMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6))
aglsonetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1))
aglsonetObjectsPath = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2))
aglsonetMedium = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1))
aglsonetSection = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2))
aglsonetLine = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3))
aglsonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1))
aglsonetMediumTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1), )
if mibBuilder.loadTexts: aglsonetMediumTable.setStatus('mandatory')
aglsonetMediumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglsonetMediumIfIndex"))
if mibBuilder.loadTexts: aglsonetMediumEntry.setStatus('mandatory')
aglsonetMediumIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: aglsonetMediumIfIndex.setStatus('mandatory')
aglsonetMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetMediumType.setStatus('mandatory')
aglsonetMediumTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetMediumTimeElapsed.setStatus('mandatory')
aglsonetMediumValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetMediumValidIntervals.setStatus('mandatory')
aglsonetMediumLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonetMediumOther", 1), ("sonetMediumB3ZS", 2), ("sonetMediumCMI", 3), ("sonetMediumNRZ", 4), ("sonetMediumRZ", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetMediumLineCoding.setStatus('mandatory')
aglsonetMediumLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sonetOther", 1), ("sonetShortSingleMode", 2), ("sonetLongSingleMode", 3), ("sonetMultiMode", 4), ("sonetCoax", 5), ("sonetUTP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetMediumLineType.setStatus('mandatory')
aglsonetMediumCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetMediumCircuitIdentifier.setStatus('mandatory')
aglsonetSectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2, 1), )
if mibBuilder.loadTexts: aglsonetSectionCurrentTable.setStatus('mandatory')
aglsonetSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglsonetSectionCurrentIfIndex"))
if mibBuilder.loadTexts: aglsonetSectionCurrentEntry.setStatus('mandatory')
aglsonetSectionCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: aglsonetSectionCurrentIfIndex.setStatus('mandatory')
aglsonetSectionCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetSectionCurrentStatus.setStatus('mandatory')
aglsonetSectionCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetSectionCurrentESs.setStatus('mandatory')
aglsonetSectionCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetSectionCurrentSESs.setStatus('mandatory')
aglsonetSectionCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetSectionCurrentSEFSs.setStatus('mandatory')
aglsonetSectionCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetSectionCurrentCVs.setStatus('mandatory')
aglsonetLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3, 1), )
if mibBuilder.loadTexts: aglsonetLineCurrentTable.setStatus('mandatory')
aglsonetLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglsonetLineCurrentIfIndex"))
if mibBuilder.loadTexts: aglsonetLineCurrentEntry.setStatus('mandatory')
aglsonetLineCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: aglsonetLineCurrentIfIndex.setStatus('mandatory')
aglsonetLineCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetLineCurrentStatus.setStatus('mandatory')
aglsonetLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetLineCurrentESs.setStatus('mandatory')
aglsonetLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetLineCurrentSESs.setStatus('mandatory')
aglsonetLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetLineCurrentCVs.setStatus('mandatory')
aglsonetLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 1, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetLineCurrentUASs.setStatus('mandatory')
aglsonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1), )
if mibBuilder.loadTexts: aglsonetPathCurrentTable.setStatus('mandatory')
aglsonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "aglsonetPathCurrentIfIndex"))
if mibBuilder.loadTexts: aglsonetPathCurrentEntry.setStatus('mandatory')
aglsonetPathCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: aglsonetPathCurrentIfIndex.setStatus('mandatory')
aglsonetPathCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sts1", 1), ("sts3cSTM1", 2), ("sts12cSTM4", 3), ("sts24c", 4), ("sts48cSTM16", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aglsonetPathCurrentWidth.setStatus('mandatory')
aglsonetPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetPathCurrentStatus.setStatus('mandatory')
aglsonetPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetPathCurrentESs.setStatus('mandatory')
aglsonetPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetPathCurrentSESs.setStatus('mandatory')
aglsonetPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetPathCurrentCVs.setStatus('mandatory')
aglsonetPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 6, 2, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aglsonetPathCurrentUASs.setStatus('mandatory')
portGroupMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 1), )
if mibBuilder.loadTexts: portGroupMembershipTable.setStatus('mandatory')
portGroupMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 1, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "portGroupBridgePort"))
if mibBuilder.loadTexts: portGroupMembershipEntry.setStatus('mandatory')
portGroupBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupBridgePort.setStatus('mandatory')
portGroupMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupMembership.setStatus('mandatory')
portGroupMembershipWorkBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGroupMembershipWorkBuf.setStatus('mandatory')
portGroupPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("huntGroup", 1), ("reliabilityGroup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupPortType.setStatus('mandatory')
portGroupPortTypeWorkBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("huntGroup", 1), ("reliabilityGroup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGroupPortTypeWorkBuf.setStatus('mandatory')
portGroupPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uninitializedPort", 1), ("preBridging", 2), ("bridging", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupPortOperStatus.setStatus('mandatory')
portGroupFppnMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 2), )
if mibBuilder.loadTexts: portGroupFppnMembershipTable.setStatus('mandatory')
portGroupFppnMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 2, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "portGroupFppnPort"))
if mibBuilder.loadTexts: portGroupFppnMembershipEntry.setStatus('mandatory')
portGroupFppnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupFppnPort.setStatus('mandatory')
portGroupFppnMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupFppnMembership.setStatus('mandatory')
portGroupFppnMembershipWorkBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGroupFppnMembershipWorkBuf.setStatus('mandatory')
portGroupFppnPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("huntGroup", 1), ("reliabilityGroup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupFppnPortType.setStatus('mandatory')
portGroupFppnPortTypeWorkBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("huntGroup", 1), ("reliabilityGroup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGroupFppnPortTypeWorkBuf.setStatus('mandatory')
portGroupFppnPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uninitializedPort", 1), ("preBridging", 2), ("bridging", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupFppnPortOperStatus.setStatus('mandatory')
portGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 3), )
if mibBuilder.loadTexts: portGroupStatusTable.setStatus('mandatory')
portGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 3, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "portGroupStatusBridgePort"))
if mibBuilder.loadTexts: portGroupStatusEntry.setStatus('mandatory')
portGroupStatusBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupStatusBridgePort.setStatus('mandatory')
portGroupStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupStatusPortNumber.setStatus('mandatory')
portGroupStatusPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleton", 1), ("huntGroupMember", 2), ("reliabilityGroupMember", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupStatusPortType.setStatus('mandatory')
portGroupStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uninitializedPort", 1), ("portInitializing", 2), ("preBridging", 3), ("bridging", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupStatusOperStatus.setStatus('mandatory')
learningDomainMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 4), )
if mibBuilder.loadTexts: learningDomainMembershipTable.setStatus('mandatory')
learningDomainMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 4, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "learningDomainNumber"))
if mibBuilder.loadTexts: learningDomainMembershipEntry.setStatus('mandatory')
learningDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learningDomainNumber.setStatus('mandatory')
learningDomainMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learningDomainMembership.setStatus('mandatory')
learningDomainMembershipWorkBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: learningDomainMembershipWorkBuf.setStatus('mandatory')
learningQuotaTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 11), )
if mibBuilder.loadTexts: learningQuotaTable.setStatus('mandatory')
learningQuotaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 11, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "learningQuotaNumber"))
if mibBuilder.loadTexts: learningQuotaEntry.setStatus('mandatory')
learningQuotaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learningQuotaNumber.setStatus('mandatory')
learningQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 11, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: learningQuota.setStatus('mandatory')
portTargetDomainListMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 5), )
if mibBuilder.loadTexts: portTargetDomainListMembershipTable.setStatus('mandatory')
portTargetDomainListMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 5, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "portTargetDomainListIndex"))
if mibBuilder.loadTexts: portTargetDomainListMembershipEntry.setStatus('mandatory')
portTargetDomainListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTargetDomainListIndex.setStatus('mandatory')
portTargetDomainListMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTargetDomainListMembership.setStatus('mandatory')
portTargetDomainListMembershipWorkBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTargetDomainListMembershipWorkBuf.setStatus('mandatory')
lBDomainMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 6), )
if mibBuilder.loadTexts: lBDomainMembershipTable.setStatus('mandatory')
lBDomainMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 6, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "lBDomainNumber"))
if mibBuilder.loadTexts: lBDomainMembershipEntry.setStatus('mandatory')
lBDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lBDomainNumber.setStatus('mandatory')
lBDomainMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lBDomainMembership.setStatus('mandatory')
lBDomainMembershipWorkBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lBDomainMembershipWorkBuf.setStatus('mandatory')
portGroupAction = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("doUpdate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGroupAction.setStatus('mandatory')
portGroupActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("success", 1), ("failedDueToOthers", 2), ("failedDueToPGSpec", 3), ("failedDueToLDSpec", 4), ("failedDueToTLDSpec", 5), ("failedDueToLBDSpec", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupActionStatus.setStatus('mandatory')
trafficGroupMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 9), )
if mibBuilder.loadTexts: trafficGroupMembershipTable.setStatus('mandatory')
trafficGroupMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 9, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "trafficGroupNumber"))
if mibBuilder.loadTexts: trafficGroupMembershipEntry.setStatus('mandatory')
trafficGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficGroupNumber.setStatus('mandatory')
trafficGroupMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficGroupMembership.setStatus('mandatory')
trafficGroupAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 10), )
if mibBuilder.loadTexts: trafficGroupAttributeTable.setStatus('mandatory')
trafficGroupAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 10, 1), ).setIndexNames((0, "DEC-ELAN-MIB", "trafficGroupNum"), (0, "DEC-ELAN-MIB", "trafficGroupHgNumber"))
if mibBuilder.loadTexts: trafficGroupAttributeEntry.setStatus('mandatory')
trafficGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficGroupNum.setStatus('mandatory')
trafficGroupHgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficGroupHgNumber.setStatus('mandatory')
trafficGroupHgMember = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficGroupHgMember.setStatus('mandatory')
trafficGroupCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("reconfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficGroupCategory.setStatus('mandatory')
xglTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7, 1), )
if mibBuilder.loadTexts: xglTable.setStatus('mandatory')
xglEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xglEntry.setStatus('mandatory')
xglCompliantMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xglCompliantMtu.setStatus('mandatory')
xglDisableIcmpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xglDisableIcmpErrors.setStatus('mandatory')
xglTxErrorsToIcmpFifo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xglTxErrorsToIcmpFifo.setStatus('mandatory')
xglRxErrorsToIcmpFifo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xglRxErrorsToIcmpFifo.setStatus('mandatory')
xglEnableAppletalkArpII = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xglEnableAppletalkArpII.setStatus('mandatory')
xglEnableRawIPX = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 15, 3, 3, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xglEnableRawIPX.setStatus('mandatory')
mibBuilder.exportSymbols("DEC-ELAN-MIB", eMACRingInitializationsInitiated=eMACRingInitializationsInitiated, lBDomainNumber=lBDomainNumber, ebrSpan=ebrSpan, ebrNportSapProtoTable=ebrNportSapProtoTable, learningDomainNumber=learningDomainNumber, portGroupFppnPortOperStatus=portGroupFppnPortOperStatus, ebrNportDefaultMatrixFppnValue=ebrNportDefaultMatrixFppnValue, ebrIfFddiTable=ebrIfFddiTable, fppnTable=fppnTable, slotEntry=slotEntry, ebrNportSapFilterCharacteristicsSapValue=ebrNportSapFilterCharacteristicsSapValue, ebrMultiSnapAllowedToGoTo=ebrMultiSnapAllowedToGoTo, ebrNportMatrixReceivePort=ebrNportMatrixReceivePort, eMACRestrictedTokenTimeout=eMACRestrictedTokenTimeout, psc=psc, aglatmInterfaceDs3PlcpSEFSs=aglatmInterfaceDs3PlcpSEFSs, esysResetDefaultsSwitch=esysResetDefaultsSwitch, batteryStatus=batteryStatus, ebrNportSvcStatus=ebrNportSvcStatus, aglInterfaceConfTable=aglInterfaceConfTable, eFDXOp=eFDXOp, gigaversion1=gigaversion1, cutThroughBridgePort=cutThroughBridgePort, aglatmInterfaceConfVccs=aglatmInterfaceConfVccs, portGroupStatusPortNumber=portGroupStatusPortNumber, ebrMultiPortAddress=ebrMultiPortAddress, efddiPORTTable=efddiPORTTable, ipSwitchEnable=ipSwitchEnable, ebrTwoProtoFilt=ebrTwoProtoFilt, floodPacketsFiltered=floodPacketsFiltered, aglatmInterfaceSonetTCTable=aglatmInterfaceSonetTCTable, aglatmInterfaceMaxActiveVpiBits=aglatmInterfaceMaxActiveVpiBits, fanSpeed=fanSpeed, snmpParameters=snmpParameters, ebrRateLimitCounterTable=ebrRateLimitCounterTable, cutThroughInbound=cutThroughInbound, pscBackplaneStatus=pscBackplaneStatus, ebrManualFilterSwitch=ebrManualFilterSwitch, floodQuotaQualifier=floodQuotaQualifier, aglInterfaceDS3E3Mode=aglInterfaceDS3E3Mode, aglatmInterfaceTrafficEnforcementType6=aglatmInterfaceTrafficEnforcementType6, ebrForwardingDBPurgeThreshold=ebrForwardingDBPurgeThreshold, ebrIfMultiDeviceBytesReceived=ebrIfMultiDeviceBytesReceived, ebrMultiSwEntry=ebrMultiSwEntry, esysIPXSwitch=esysIPXSwitch, aglInterfaceSonetTiming=aglInterfaceSonetTiming, ebrTopologyChangeTimer=ebrTopologyChangeTimer, ebrNportSnapFilterCharacteristicsSnapValue=ebrNportSnapFilterCharacteristicsSnapValue, xglTable=xglTable, ipRangeEndAddr=ipRangeEndAddr, fppn=fppn, esysStatus=esysStatus, ebrIfDeviceBytesSent=ebrIfDeviceBytesSent, floodQuotaClass=floodQuotaClass, aglInterfaceDS3E3Plcp=aglInterfaceDS3E3Plcp, aglInterfaceATMIndex=aglInterfaceATMIndex, aglsonetPathCurrentIfIndex=aglsonetPathCurrentIfIndex, aglsonetMIB=aglsonetMIB, ebrCurrNVForwardingDBEntries=ebrCurrNVForwardingDBEntries, aglatmInterfaceSonetTCEntry=aglatmInterfaceSonetTCEntry, aglatmInterfaceMaxVccs=aglatmInterfaceMaxVccs, esysFRUIndex=esysFRUIndex, ebrRateLimit=ebrRateLimit, ebrNportMatrixFppnValue=ebrNportMatrixFppnValue, eFDXState=eFDXState, aglInterfaceATMTable=aglInterfaceATMTable, ebrMultiPortReceivePort=ebrMultiPortReceivePort, efddiFDX=efddiFDX, ebrCurrForwardingDBEntries=ebrCurrForwardingDBEntries, fppnPortOfThatSlot=fppnPortOfThatSlot, arpStatisticalTable=arpStatisticalTable, ledTableIndex=ledTableIndex, arpTimeoutInSeconds=arpTimeoutInSeconds, hostSlotEntry=hostSlotEntry, ttSize=ttSize, portGroupStatusEntry=portGroupStatusEntry, ebrNportFloodMatrixRowEntry=ebrNportFloodMatrixRowEntry, ebrNportMatrixFppnReceivePort=ebrNportMatrixFppnReceivePort, ebrRateLimitCounterEntry=ebrRateLimitCounterEntry, ebrMultiSapValue=ebrMultiSapValue, ebrMultiSwIndex=ebrMultiSwIndex, aglatmInterfaceTrafficEnforcementTypes=aglatmInterfaceTrafficEnforcementTypes, eMACSMTIndex=eMACSMTIndex, aglInterfaceSonetMode=aglInterfaceSonetMode, aglatmInterfaceConfVpcs=aglatmInterfaceConfVpcs, aglsonetMediumValidIntervals=aglsonetMediumValidIntervals, esysFRURev=esysFRURev, ePORTRejectReason=ePORTRejectReason, cutThroughFppnOutbound=cutThroughFppnOutbound, aglsonetLine=aglsonetLine, ledLedIndex=ledLedIndex, aglsonetPathCurrentSESs=aglsonetPathCurrentSESs, ebrNportMatrixNameRowEntry=ebrNportMatrixNameRowEntry, ebrIfEntry=ebrIfEntry, cabinetTemperature=cabinetTemperature, ebrTimeSinceForwardingDBPurged=ebrTimeSinceForwardingDBPurged, ebrBadHelloResetTimer=ebrBadHelloResetTimer, ebrNportMatrixAllowedToGoTo=ebrNportMatrixAllowedToGoTo, ebrMultiSnapStatus=ebrMultiSnapStatus, aglsonetSectionCurrentTable=aglsonetSectionCurrentTable, ebrNportFloodMatrixFppnValue=ebrNportFloodMatrixFppnValue, esysNvramFailed=esysNvramFailed, ebrTwoSapStatus=ebrTwoSapStatus, minimumGIGAswitchMIBVersionSupported=minimumGIGAswitchMIBVersionSupported, ebrIfDeviceBytesReceived=ebrIfDeviceBytesReceived, floodGeezers=floodGeezers, esysFRUConfigTable=esysFRUConfigTable, learningQuotaTable=learningQuotaTable, ebrNportSnapProtoEntry=ebrNportSnapProtoEntry, ebrPortTestPassedThreshold=ebrPortTestPassedThreshold, ebrIfEthPhysicalMediumType=ebrIfEthPhysicalMediumType, ebrMultiSapStatus=ebrMultiSapStatus, aglInterfaceTrafficRateGranularity=aglInterfaceTrafficRateGranularity, ebrNTPStatus=ebrNTPStatus, aglatmMIBObjects=aglatmMIBObjects, ebrTwoEnetProtoEntry=ebrTwoEnetProtoEntry, ebrNoFrameInterval=ebrNoFrameInterval, ebrIfSpDesigRootAge=ebrIfSpDesigRootAge, aglInterfaceSonetEntry=aglInterfaceSonetEntry, aglsonetMediumTimeElapsed=aglsonetMediumTimeElapsed, portGroupPortType=portGroupPortType, esysFRUSlot=esysFRUSlot, ebrNportSnapValue=ebrNportSnapValue, ebrDeviceFramesLost=ebrDeviceFramesLost, arpUnicastReceived=arpUnicastReceived, eauthTrapCommunity=eauthTrapCommunity, efddiMACEntry=efddiMACEntry, ebrNportmatrixname=ebrNportmatrixname, ebrNportSapSinglePath=ebrNportSapSinglePath, ebrNportDAAllowedToGoTo=ebrNportDAAllowedToGoTo, portGroupFppnMembershipEntry=portGroupFppnMembershipEntry, learningQuotaNumber=learningQuotaNumber, ebrTwoEnetProtoTable=ebrTwoEnetProtoTable, aglVCConnectionPortAVpi=aglVCConnectionPortAVpi, aglatmInterfaceDs3PlcpAlarmState=aglatmInterfaceDs3PlcpAlarmState, gigaIP=gigaIP, gigaStp=gigaStp, ebrNportMatrixName=ebrNportMatrixName, trafficGroupHgMember=trafficGroupHgMember, esysMgmtResets=esysMgmtResets, tftpDestination=tftpDestination, ebrTwoEnetProtoType=ebrTwoEnetProtoType, ebrNportDefaultMatrixReceivePort=ebrNportDefaultMatrixReceivePort, ebrMgmtHeardPort=ebrMgmtHeardPort, floodLocalCopyPacketsDiscarded=floodLocalCopyPacketsDiscarded, ebrNportSnapFilterCharacteristicsTable=ebrNportSnapFilterCharacteristicsTable, aglsonetMedium=aglsonetMedium, trafficGroupAttributeEntry=trafficGroupAttributeEntry, ebrMultiSwTable=ebrMultiSwTable, mgmtMemoryAvail=mgmtMemoryAvail, ebrNportFppnManualFilter=ebrNportFppnManualFilter, arpRepliesTransmitted=arpRepliesTransmitted, portGroupPortOperStatus=portGroupPortOperStatus, arpStatisticalCounters=arpStatisticalCounters, ebrRateLimitSwitch=ebrRateLimitSwitch, ipSwitching=ipSwitching, ebrTwoPortStatus=ebrTwoPortStatus, leftPowerInputSource=leftPowerInputSource, xglTxErrorsToIcmpFifo=xglTxErrorsToIcmpFifo, ebrNportSapFilterCharacteristicsEntry=ebrNportSapFilterCharacteristicsEntry, ebrTwoPortPortNum=ebrTwoPortPortNum, ebrTwoSapProtoEntry=ebrTwoSapProtoEntry, aglVCConnectionTableEntry=aglVCConnectionTableEntry, aglsonetPathCurrentESs=aglsonetPathCurrentESs, ebrNportSnapReceivePort=ebrNportSnapReceivePort, aglatmInterfaceDs3PlcpEntry=aglatmInterfaceDs3PlcpEntry, ebrIfMultiDeviceFramesSent=ebrIfMultiDeviceFramesSent, ebrIfEthFramingError=ebrIfEthFramingError, aglsonetLineCurrentIfIndex=aglsonetLineCurrentIfIndex, cutThroughFppnEntry=cutThroughFppnEntry, eifBadFramesReceived=eifBadFramesReceived, ebrNportSnapNameEntry=ebrNportSnapNameEntry, translationTableParams=translationTableParams, aglVCConnectionPortB=aglVCConnectionPortB, floodHogs=floodHogs, transferStatus=transferStatus, ebrNportSapFilterCharacteristicsTable=ebrNportSapFilterCharacteristicsTable, ebrNportSANameTable=ebrNportSANameTable, ebrRateLimitAddressFrames=ebrRateLimitAddressFrames, ebrIfEtherEntry=ebrIfEtherEntry, eifReceiveOverrun=eifReceiveOverrun, ebrMaxNVProtocolDBEntries=ebrMaxNVProtocolDBEntries, gigaStpDemandLearningEnable=gigaStpDemandLearningEnable, eauthTrapUserAddr=eauthTrapUserAddr, dec=dec, learningDomainMembershipEntry=learningDomainMembershipEntry, learningDomainMembershipWorkBuf=learningDomainMembershipWorkBuf, ebrRemoveMgmtProto=ebrRemoveMgmtProto, portGroupMembershipWorkBuf=portGroupMembershipWorkBuf, trafficGroupNum=trafficGroupNum, ebrNportFloodMatrixValue=ebrNportFloodMatrixValue, floodPacketsSent=floodPacketsSent, ebrTwoEnetProtoStatus=ebrTwoEnetProtoStatus, led=led, ebrMaxNVForwardingDBEntries=ebrMaxNVForwardingDBEntries, temperatureWarning=temperatureWarning, ebrTwoProtoSapFilterOther=ebrTwoProtoSapFilterOther, ebrNportSnapNameTable=ebrNportSnapNameTable, transferAction=transferAction, aglsonetSectionCurrentSEFSs=aglsonetSectionCurrentSEFSs, ebrIfDeviceFramesSent=ebrIfDeviceFramesSent, ebrIfSpForwardDelayTimer=ebrIfSpForwardDelayTimer, portGroupStatusPortType=portGroupStatusPortType, aglVCConnectionPortBVpi=aglVCConnectionPortBVpi, ebrIfPortRestarts=ebrIfPortRestarts, aglAtm=aglAtm, ebrIfBadHelloLimitExceeded=ebrIfBadHelloLimitExceeded, eMACFCIStripErrors=eMACFCIStripErrors, ebrCurrProtocolDBEntries=ebrCurrProtocolDBEntries, eauthTrapUserEntry=eauthTrapUserEntry, aglVCConnectionAALType=aglVCConnectionAALType, rightPowerInputSource=rightPowerInputSource, filterByReferencedExpression=filterByReferencedExpression, batteryCharge=batteryCharge, xglEnableAppletalkArpII=xglEnableAppletalkArpII, aglsonetSectionCurrentStatus=aglsonetSectionCurrentStatus, aglVCConnectionTrafficShaperAvgRate=aglVCConnectionTrafficShaperAvgRate, ebrMultiPortPortNum=ebrMultiPortPortNum, communityString=communityString, eMACUpstreamNbrDuplAddressFlag=eMACUpstreamNbrDuplAddressFlag, lBDomainMembershipTable=lBDomainMembershipTable, aglInterfaceDS3E3Table=aglInterfaceDS3E3Table, floodMulticastRate=floodMulticastRate, ebrForwardingDBShortAgingTime=ebrForwardingDBShortAgingTime, portGroupStatusOperStatus=portGroupStatusOperStatus, ledSlotTable=ledSlotTable, efddiFDXTable=efddiFDXTable, filterByBitmapValue=filterByBitmapValue, aglVCConnectionTrafficType=aglVCConnectionTrafficType, ebrNportMatrixFppnAllowedToGoTo=ebrNportMatrixFppnAllowedToGoTo, ebrNportMatrixNameRowStatus=ebrNportMatrixNameRowStatus, ebrNportSwAllowedToGoTo=ebrNportSwAllowedToGoTo, ebrTwoPortStatic=ebrTwoPortStatic, cutThroughOutbound=cutThroughOutbound, esysInitSwitch=esysInitSwitch, ebrNportSourceAddress=ebrNportSourceAddress, flooding=flooding, ebrMultiEnetProtoType=ebrMultiEnetProtoType, eMACRingPurgerEnable=eMACRingPurgerEnable, aglsonetPathCurrentStatus=aglsonetPathCurrentStatus, ebrNportSAStatus=ebrNportSAStatus, aglatmInterfaceTrafficEnforcementType3=aglatmInterfaceTrafficEnforcementType3, esysPowerups=esysPowerups, bridges=bridges, eMACRingInitializationsReceived=eMACRingInitializationsReceived, ebrLB100SpanningTreeVer=ebrLB100SpanningTreeVer, ledProgram=ledProgram, lBDomainMembership=lBDomainMembership, ebrNTPTable=ebrNTPTable, ebrNportMatrixNameRowTable=ebrNportMatrixNameRowTable, ebrNportSANameEntry=ebrNportSANameEntry, eFDXMACIndex=eFDXMACIndex, aglsonetLineCurrentStatus=aglsonetLineCurrentStatus, ebrMultiSwManualFilter=ebrMultiSwManualFilter)
mibBuilder.exportSymbols("DEC-ELAN-MIB", aglsonetSectionCurrentIfIndex=aglsonetSectionCurrentIfIndex, eFDXEnable=eFDXEnable, ledEntry=ledEntry, hostSlotIndex=hostSlotIndex, aglsonetSection=aglsonetSection, communityStringDelimiter=communityStringDelimiter, ebrNportDASvcEntry=ebrNportDASvcEntry, efddi=efddi, esysDeviceState=esysDeviceState, arpBroadcastReceived=arpBroadcastReceived, ebrMultiPortStaticTable=ebrMultiPortStaticTable, eMACLinkState=eMACLinkState, ebrNportNamedDefaultMatrix=ebrNportNamedDefaultMatrix, ebrNportStaticDATable=ebrNportStaticDATable, ebrMultiSapProtoTable=ebrMultiSapProtoTable, cutThroughEntry=cutThroughEntry, ebrNportSapSvcEntry=ebrNportSapSvcEntry, ebrIfSpanTable=ebrIfSpanTable, ledCount=ledCount, ebrNportDANameStatus=ebrNportDANameStatus, esysChar=esysChar, ebrNportSapStatus=ebrNportSapStatus, ebrIfSpanEntry=ebrIfSpanEntry, eauthReadOnlyCommunity=eauthReadOnlyCommunity, ebrNportSapNameStatus=ebrNportSapNameStatus, ebrTimeSinceLastHello=ebrTimeSinceLastHello, xacInDiscardIPForwarding=xacInDiscardIPForwarding, pscStatus=pscStatus, eauthReadWriteUserTable=eauthReadWriteUserTable, ebrLB100ResponseTimeout=ebrLB100ResponseTimeout, ledSlotIndex=ledSlotIndex, ebrIfEthIndex=ebrIfEthIndex, aglInterfaceDS3E3Entry=aglInterfaceDS3E3Entry, slotCardHwRev=slotCardHwRev, eMACFrameAlignmentErrors=eMACFrameAlignmentErrors, gigaStpPortEntry=gigaStpPortEntry, esysFRUType=esysFRUType, ebrTwoSnapValue=ebrTwoSnapValue, eifMgmtSetsAllowedSwitch=eifMgmtSetsAllowedSwitch, pscHwRev=pscHwRev, ebrMultiSnapValue=ebrMultiSnapValue, keyswitchPosition=keyswitchPosition, ledDescr=ledDescr, ebrIfMultiBytesSent=ebrIfMultiBytesSent, ebrNportStaticSAFilterCharacteristicsEntry=ebrNportStaticSAFilterCharacteristicsEntry, eauthReadWriteUserEntry=eauthReadWriteUserEntry, aglInterfaceATMTableEntry=aglInterfaceATMTableEntry, ebrTwoSnapProtoEntry=ebrTwoSnapProtoEntry, efddiFDXEntry=efddiFDXEntry, gigaswitch=gigaswitch, ebrBadHelloLimit=ebrBadHelloLimit, aglatmInterfaceMaxActiveVciBits=aglatmInterfaceMaxActiveVciBits, pscFwRev=pscFwRev, ebrNportSapMatrixName=ebrNportSapMatrixName, ebrIfFddiIpIllegalHeaderLength=ebrIfFddiIpIllegalHeaderLength, ebrTwoSnapProtoTable=ebrTwoSnapProtoTable, ebrNportMatrixValue=ebrNportMatrixValue, ePORTPHYState=ePORTPHYState, portGroupStatusTable=portGroupStatusTable, eifTable=eifTable, ebrNportMatrixNameEntry=ebrNportMatrixNameEntry, powerSupply=powerSupply, aglInterfaceDS3E3Index=aglInterfaceDS3E3Index, trafficGroupMembershipEntry=trafficGroupMembershipEntry, ebrMultiEnetProtoEntry=ebrMultiEnetProtoEntry, ebrIfUnknownDAReceived=ebrIfUnknownDAReceived, einterfaces=einterfaces, ebrNportMatrixFppnRowStatus=ebrNportMatrixFppnRowStatus, xacInDiscardMulticast=xacInDiscardMulticast, aglsonetSectionCurrentSESs=aglsonetSectionCurrentSESs, ebrNportSAReceivePort=ebrNportSAReceivePort, learningDomainMembershipTable=learningDomainMembershipTable, ebridge=ebridge, aglatmInterfaceDs3PlcpTable=aglatmInterfaceDs3PlcpTable, mPortTable=mPortTable, eFDXSMTIndex=eFDXSMTIndex, sysobjid=sysobjid, trafficGroupCategory=trafficGroupCategory, ebrNportSnapSvcSnapValue=ebrNportSnapSvcSnapValue, aglVCConnectionPortBVci=aglVCConnectionPortBVci, aglVCConnectionOperStatus=aglVCConnectionOperStatus, ebrFragmentationSwitch=ebrFragmentationSwitch, eauthReadWriteUserMask=eauthReadWriteUserMask, ebrIfLinkBrokenReason=ebrIfLinkBrokenReason, rightFanStatus=rightFanStatus, aglsonetPathCurrentEntry=aglsonetPathCurrentEntry, ebrIfEthLengthError=ebrIfEthLengthError, aglsonetMediumEntry=aglsonetMediumEntry, eSMTIndex=eSMTIndex, eifEntry=eifEntry, ePORTTNEExpRejects=ePORTTNEExpRejects, ebrNportSnapNameSnap=ebrNportSnapNameSnap, esysUnsolicitedResets=esysUnsolicitedResets, ebrMaxForwardingDBEntries=ebrMaxForwardingDBEntries, maximumGIGAswitchMIBVersionSupported=maximumGIGAswitchMIBVersionSupported, ebrNportDAAddress=ebrNportDAAddress, ebrNportDADisp=ebrNportDADisp, battery=battery, mPortEntry=mPortEntry, aglVCConnectionPortAVci=aglVCConnectionPortAVci, ebrNportDASvcTable=ebrNportDASvcTable, fan=fan, aglsonetLineCurrentTable=aglsonetLineCurrentTable, mPortEnable=mPortEnable, ebrMultiSwProtoSnapOther=ebrMultiSwProtoSnapOther, rightPowerStatus=rightPowerStatus, aglsonetObjects=aglsonetObjects, floodBytesSent=floodBytesSent, ebrNportSwReceivePort=ebrNportSwReceivePort, eMACFrameStatusErrors=eMACFrameStatusErrors, aglInterfaceATMOAMStatus=aglInterfaceATMOAMStatus, aglsonetPath=aglsonetPath, esysRomVersion=esysRomVersion, ebrNportSnapMatrixName=ebrNportSnapMatrixName, ebrRateLimiting=ebrRateLimiting, ebrNportSapNameDisp=ebrNportSapNameDisp, ebrIfIndex=ebrIfIndex, ebrNportSnapNameStatus=ebrNportSnapNameStatus, portGroupFppnPort=portGroupFppnPort, eMACRingPurgeErrors=eMACRingPurgeErrors, trafficGroupAttributeTable=trafficGroupAttributeTable, aglsonetObjectsPath=aglsonetObjectsPath, elanext=elanext, efddiMACTable=efddiMACTable, ebrPortTestInterval=ebrPortTestInterval, aglatmMIB=aglatmMIB, ebrNportPortNumStatus=ebrNportPortNumStatus, ebrNportSnapDisp=ebrNportSnapDisp, aglVCConnectionPortA=aglVCConnectionPortA, portGroupFppnPortTypeWorkBuf=portGroupFppnPortTypeWorkBuf, esysTrapAddress=esysTrapAddress, ebrMultiProtoFilt=ebrMultiProtoFilt, arpStatisticalIfIndex=arpStatisticalIfIndex, esysFRUDesc=esysFRUDesc, ebrNportMatrixFppnRowEntry=ebrNportMatrixFppnRowEntry, aglsonetMediumTable=aglsonetMediumTable, aglatmInterfaceTrafficEnforcementType4=aglatmInterfaceTrafficEnforcementType4, ebrIfEthCollisionLimitExceeded=ebrIfEthCollisionLimitExceeded, aglSonet=aglSonet, ebrNportFloodMatrixAllowedToGoTo=ebrNportFloodMatrixAllowedToGoTo, efddiPORT=efddiPORT, gigaBridge=gigaBridge, ebrNportDANameDA=ebrNportDANameDA, ebrNportSapSvcTable=ebrNportSapSvcTable, ePORTPHYIndex=ePORTPHYIndex, ebrNportSapNameTable=ebrNportSapNameTable, slotCardFwRev=slotCardFwRev, esysGatewayAddress=esysGatewayAddress, aglConfig=aglConfig, portGroupPortTypeWorkBuf=portGroupPortTypeWorkBuf, slot=slot, ebrNportSapNameSap=ebrNportSapNameSap, eMACRingErrorReason=eMACRingErrorReason, ebrRateLimitPort=ebrRateLimitPort, ebrIfFddiIpIllegalSize=ebrIfFddiIpIllegalSize, agl=agl, aglDS3E3=aglDS3E3, ebrNportSANameDisp=ebrNportSANameDisp, ebrNportDefaultMatrixAllowedToGoTo=ebrNportDefaultMatrixAllowedToGoTo, portGroupFppnMembershipWorkBuf=portGroupFppnMembershipWorkBuf, eMACDuplicateAddressTestFailures=eMACDuplicateAddressTestFailures, aglsonetLineCurrentSESs=aglsonetLineCurrentSESs, ebrNportSANameStatus=ebrNportSANameStatus, aglsonetPathCurrentWidth=aglsonetPathCurrentWidth, lBDomainMembershipEntry=lBDomainMembershipEntry, ebrMultiPortStatic=ebrMultiPortStatic, ebrNportSvcAddress=ebrNportSvcAddress, trafficGroupHgNumber=trafficGroupHgNumber, ebrMultiSnapProtoEntry=ebrMultiSnapProtoEntry, ebrNportSapValue=ebrNportSapValue, aglInterfaceSonetTable=aglInterfaceSonetTable, floodBytesPurged=floodBytesPurged, ledTable=ledTable, gigaUpgradeSoftware=gigaUpgradeSoftware, aglVCConnectionTrafficShaperPriority=aglVCConnectionTrafficShaperPriority, portTargetDomainListIndex=portTargetDomainListIndex, eauthTrapUserTable=eauthTrapUserTable, efddiSMTEntry=efddiSMTEntry, ebrIfFddiIpDatagramsFragmented=ebrIfFddiIpDatagramsFragmented, ebrTwoSnapIndex=ebrTwoSnapIndex, ipStaticPorts=ipStaticPorts, arpPeriodBetweenRequests=arpPeriodBetweenRequests, ebrNportSapAllowedToGoTo=ebrNportSapAllowedToGoTo, ipPrimaryPorts=ipPrimaryPorts, ebrMultiSapAllowedToGoTo=ebrMultiSapAllowedToGoTo, portTargetDomainListMembership=portTargetDomainListMembership, ebrNportDefaultMatrixRowTable=ebrNportDefaultMatrixRowTable, portGroupActionStatus=portGroupActionStatus, ebrNportStaticSATable=ebrNportStaticSATable, learningDomainMembership=learningDomainMembership, ebrNportSAAllowedToGoTo=ebrNportSAAllowedToGoTo, ipRangeStartAddr=ipRangeStartAddr, learningQuotaEntry=learningQuotaEntry, ebrMultiEnetProtoTable=ebrMultiEnetProtoTable, ebrMultiEnetReceivePort=ebrMultiEnetReceivePort, eMACLinkIndex=eMACLinkIndex, ebrNportSwEntry=ebrNportSwEntry, ebrIfMultiDeviceBytesSent=ebrIfMultiDeviceBytesSent, eMACTransmitUnderruns=eMACTransmitUnderruns, esysFddiPortTrapSwitch=esysFddiPortTrapSwitch, eauth1=eauth1, leftFanStatus=leftFanStatus, ebrMultiPortStaticEntry=ebrMultiPortStaticEntry, arpFramesDiscarded=arpFramesDiscarded, aglInterfaceIndex=aglInterfaceIndex, portGroupBridgePort=portGroupBridgePort, ebrTwoSapProtoTable=ebrTwoSapProtoTable, esysFRUConfigEntry=esysFRUConfigEntry, gigaSnmpDebug=gigaSnmpDebug, cutThroughFppnPort=cutThroughFppnPort, ebrNportSapProtoEntry=ebrNportSapProtoEntry, ebrIfMultiDeviceFramesReceived=ebrIfMultiDeviceFramesReceived, ebrLB100PollTime=ebrLB100PollTime, ebr802SpanningTreeVer=ebr802SpanningTreeVer, arpControlParams=arpControlParams, ebrNportSnapStatus=ebrNportSnapStatus, ebrIfSpTopologyChangeAckFlag=ebrIfSpTopologyChangeAckFlag, ebrMaxProtocolDBEntries=ebrMaxProtocolDBEntries, xglRxErrorsToIcmpFifo=xglRxErrorsToIcmpFifo, ebrIfEthTransmitMultipleCollisions=ebrIfEthTransmitMultipleCollisions, aglVCConnectionTrafficShaperMinGuaranteedRate=aglVCConnectionTrafficShaperMinGuaranteedRate, ebrTwoPortAddress=ebrTwoPortAddress, ePORTPMDType=ePORTPMDType, ebrIfDeviceFramesReceived=ebrIfDeviceFramesReceived, ebrMultiSnapReceivePort=ebrMultiSnapReceivePort, eMACIndex=eMACIndex, ebrNportSADisp=ebrNportSADisp, ebrTwoSnapStatus=ebrTwoSnapStatus, slotIndex=slotIndex, arpRequestRetries=arpRequestRetries, aglsonetMediumIfIndex=aglsonetMediumIfIndex, mgmtMemoryData=mgmtMemoryData, aglsonetSectionCurrentEntry=aglsonetSectionCurrentEntry, ebrTwoPortStaticEntry=ebrTwoPortStaticEntry, commitFails=commitFails, ePORTIndex=ePORTIndex, aglVCConnectionTable=aglVCConnectionTable, eauthReadOnlyUserAddr=eauthReadOnlyUserAddr, efddiSMTTable=efddiSMTTable, aglatmInterfaceConfEntry=aglatmInterfaceConfEntry, esysFRUState=esysFRUState, portGroupMembershipEntry=portGroupMembershipEntry, ebrTopologyChangeFlag=ebrTopologyChangeFlag, aglsonetMediumLineCoding=aglsonetMediumLineCoding, ebrNportDANameEntry=ebrNportDANameEntry, ipDynamicPrimaryPorts=ipDynamicPrimaryPorts, slotTable=slotTable, ebrLB100BeingPolled=ebrLB100BeingPolled, ebrNTP=ebrNTP, ebrNportSnapSvcStatus=ebrNportSnapSvcStatus, aglsonetPathCurrentUASs=aglsonetPathCurrentUASs, ebrNportSAMatrixName=ebrNportSAMatrixName, ebrIfMultiFramesFiltered=ebrIfMultiFramesFiltered, ebrNportStaticDAFilterCharacteristicsTable=ebrNportStaticDAFilterCharacteristicsTable)
mibBuilder.exportSymbols("DEC-ELAN-MIB", ebrNportSnapSvcTable=ebrNportSnapSvcTable, xglDisableIcmpErrors=xglDisableIcmpErrors, ebrMultiSnapProtoTable=ebrMultiSnapProtoTable, leftPowerStatus=leftPowerStatus, ebrSpanningTreeModeChanges=ebrSpanningTreeModeChanges, slotCardStatus=slotCardStatus, hostIP=hostIP, ebrNportStaticDAEntry=ebrNportStaticDAEntry, ebrMultiFiltSw=ebrMultiFiltSw, transferSize=transferSize, aglatmInterfaceSonetTCOCDEvents=aglatmInterfaceSonetTCOCDEvents, ePORTSMTIndex=ePORTSMTIndex, ebrNportFloodMatrixRowTable=ebrNportFloodMatrixRowTable, ebrNportFloodMatrixReceivePort=ebrNportFloodMatrixReceivePort, serviceClassAssignments=serviceClassAssignments, ebrNportFppnPortNum=ebrNportFppnPortNum, ebrNportSAAddress=ebrNportSAAddress, aglsonetLineCurrentCVs=aglsonetLineCurrentCVs, aglatmInterfaceDs3PlcpIndex=aglatmInterfaceDs3PlcpIndex, ebrIfFddiIndex=ebrIfFddiIndex, fppnIfIndex=fppnIfIndex, ebrNportSnapNameDisp=ebrNportSnapNameDisp, ebrIfDeviceFramesLost=ebrIfDeviceFramesLost, eauthReadWriteUserStatus=eauthReadWriteUserStatus, aglatmInterfaceTrafficEnforcementType7=aglatmInterfaceTrafficEnforcementType7, eauthReadOnlyUserTable=eauthReadOnlyUserTable, copyStatus=copyStatus, deleteTransfer=deleteTransfer, ebrNportSnapFilterCharacteristicsEntry=ebrNportSnapFilterCharacteristicsEntry, aglInterfaceSonetIndex=aglInterfaceSonetIndex, aglsonetMediumLineType=aglsonetMediumLineType, aglsonetMediumType=aglsonetMediumType, aglatmInterfaceIndex=aglatmInterfaceIndex, ebrNportSapSvcSapValue=ebrNportSapSvcSapValue, ebrIfSpIndex=ebrIfSpIndex, aglatmInterfaceConfTable=aglatmInterfaceConfTable, ebrTwoProtoEnetFilterOther=ebrTwoProtoEnetFilterOther, ebrNportMatrixFppnRowTable=ebrNportMatrixFppnRowTable, esysTrapAddressTable=esysTrapAddressTable, ebrNportStaticSAEntry=ebrNportStaticSAEntry, eMACDuplicateTokensDetected=eMACDuplicateTokensDetected, batteryTest=batteryTest, batteryUsing=batteryUsing, ePORTElasticityBufferErrors=ePORTElasticityBufferErrors, ebrNportDAMatrixName=ebrNportDAMatrixName, eauthReadOnlyUserEntry=eauthReadOnlyUserEntry, ebrInactiveForwardingDBEntries=ebrInactiveForwardingDBEntries, floodEntry=floodEntry, eMACTracesInitiated=eMACTracesInitiated, ebrIfFramesProtocolFiltered=ebrIfFramesProtocolFiltered, ebrBestRootAge=ebrBestRootAge, ebrNTPtype=ebrNTPtype, ebrTwoProtoSnapFilterOther=ebrTwoProtoSnapFilterOther, eifTransmitFramesError=eifTransmitFramesError, floodUnknownUnicastRate=floodUnknownUnicastRate, ebrInterfaces=ebrInterfaces, eifOversizeFrames=eifOversizeFrames, arpFramesFlooded=arpFramesFlooded, learningQuota=learningQuota, ebrNportDAReceivePort=ebrNportDAReceivePort, cutThroughTable=cutThroughTable, lineCard=lineCard, arpStatisticalEntry=arpStatisticalEntry, ebrNTPEntry=ebrNTPEntry, mopDestination=mopDestination, portGroupFppnMembershipTable=portGroupFppnMembershipTable, lBDomainMembershipWorkBuf=lBDomainMembershipWorkBuf, aglatmInterfaceIlmiVpiVci=aglatmInterfaceIlmiVpiVci, portTargetDomainListMembershipEntry=portTargetDomainListMembershipEntry, aglatmInterfaceNoTrafficEnforcement=aglatmInterfaceNoTrafficEnforcement, aglVCConnectionTrafficShaperPeakRate=aglVCConnectionTrafficShaperPeakRate, eMACRingPurgerState=eMACRingPurgerState, ebrNportDefaultMatrixValue=ebrNportDefaultMatrixValue, slotCardType=slotCardType, aglatmInterfaceSonetTCAlarmState=aglatmInterfaceSonetTCAlarmState, gigaSets=gigaSets, eSMTStationType=eSMTStationType, efddiMAC=efddiMAC, aglInterfaceConfEntry=aglInterfaceConfEntry, copyToSlot=copyToSlot, aglInterfaceATMScrambeStatus=aglInterfaceATMScrambeStatus, ebrRateLimitProtocolFrames=ebrRateLimitProtocolFrames, ebrIfTable=ebrIfTable, aglsonetLineCurrentEntry=aglsonetLineCurrentEntry, portGroupStatusBridgePort=portGroupStatusBridgePort, eauthReadWriteCommunity=eauthReadWriteCommunity, gigaStpPortIfIndex=gigaStpPortIfIndex, ebrIfFramesAddrFiltered=ebrIfFramesAddrFiltered, ebrNportPortNum=ebrNportPortNum, snmpDuplicateDiscardInterval=snmpDuplicateDiscardInterval, aglatmInterfaceTrafficEnforcementType2=aglatmInterfaceTrafficEnforcementType2, esysConcConfig=esysConcConfig, gigaBox=gigaBox, ebrCurrNVProtocolDBEntries=ebrCurrNVProtocolDBEntries, copyAction=copyAction, trafficGroupMembership=trafficGroupMembership, ebrCoun=ebrCoun, eMACRingBeaconingInitiated=eMACRingBeaconingInitiated, ebrIfMultiBytesReceived=ebrIfMultiBytesReceived, aglsonetSectionCurrentESs=aglsonetSectionCurrentESs, ema=ema, aglsonetLineCurrentESs=aglsonetLineCurrentESs, aglsonetMediumCircuitIdentifier=aglsonetMediumCircuitIdentifier, decMIBextension=decMIBextension, ebrNportSnapProtoTable=ebrNportSnapProtoTable, ebrIfFddiUnprocessedErrorPackets=ebrIfFddiUnprocessedErrorPackets, gigaXglEthernetGroup=gigaXglEthernetGroup, ebrNportNamedFloodMatrix=ebrNportNamedFloodMatrix, ipIPAddr=ipIPAddr, cutThrough=cutThrough, slotNumber=slotNumber, aglInterfacePhyType=aglInterfacePhyType, aglatmInterfaceSpecific=aglatmInterfaceSpecific, portGroupFppnPortType=portGroupFppnPortType, ebrNportSnapSvc=ebrNportSnapSvc, cutThroughFppnTable=cutThroughFppnTable, floodLosers=floodLosers, aglsonetPathCurrentTable=aglsonetPathCurrentTable, eauth=eauth, ipSwitchPortsTable=ipSwitchPortsTable, ebrNportSapDisp=ebrNportSapDisp, cutThroughFppnInbound=cutThroughFppnInbound, aglsonetSectionCurrentCVs=aglsonetSectionCurrentCVs, aglatmInterfaceTrafficEnforcementType1=aglatmInterfaceTrafficEnforcementType1, portGroupAction=portGroupAction, doTransfer=doTransfer, ebrMultiPortStatus=ebrMultiPortStatus, mPortSMTIndex=mPortSMTIndex, ebrStat=ebrStat, xglCompliantMtu=xglCompliantMtu, ebrNportSAName=ebrNportSAName, useTransfer=useTransfer, ipSwitchPortsEntry=ipSwitchPortsEntry, eauthReadOnlyUserStatus=eauthReadOnlyUserStatus, ebrNportPortNumAddress=ebrNportPortNumAddress, eauthTrapUserStatus=eauthTrapUserStatus, eauthReadOnlyUserMask=eauthReadOnlyUserMask, ePORTConnectionsCompleted=ePORTConnectionsCompleted, ebrNportPortNumEntry=ebrNportPortNumEntry, mgmtMemoryTable=mgmtMemoryTable, efddiPORTEntry=efddiPORTEntry, eauthReadWriteUserAddr=eauthReadWriteUserAddr, aglatmInterfaceDs3PlcpUASs=aglatmInterfaceDs3PlcpUASs, ebrTellParentFlag=ebrTellParentFlag, ebrNportmatrixName=ebrNportmatrixName, portGroupFppnMembership=portGroupFppnMembership, fppnSlotNumber=fppnSlotNumber, ebrNportDAName=ebrNportDAName, ledTableEntry=ledTableEntry, gigaStpPortSpanningTreeEnable=gigaStpPortSpanningTreeEnable, ebrNportManualFilter=ebrNportManualFilter, aglVCConnectionAdminStatus=aglVCConnectionAdminStatus, rightPowerOutputPower=rightPowerOutputPower, ebrIfFddiEntry=ebrIfFddiEntry, ebrIfEthCollisionPresenceTestSwitch=ebrIfEthCollisionPresenceTestSwitch, ebrNportStaticDAFilterCharacteristicsEntry=ebrNportStaticDAFilterCharacteristicsEntry, floodTable=floodTable, ebrChar=ebrChar, ebrMultiSapReceivePort=ebrMultiSapReceivePort, floodLocalCopyPacketsDelivered=floodLocalCopyPacketsDelivered, eifIndex=eifIndex, ebrNportSapReceivePort=ebrNportSapReceivePort, ebrNportSnapSvcEntry=ebrNportSnapSvcEntry, mgmtMemoryAction=mgmtMemoryAction, ebrIfSpPossibleLoopFlag=ebrIfSpPossibleLoopFlag, xacInDiscardCounters=xacInDiscardCounters, ebrIfBadBytesReceived=ebrIfBadBytesReceived, ebrNportSapSvc=ebrNportSapSvc, ebrNportMatrixStatus=ebrNportMatrixStatus, trafficGroupNumber=trafficGroupNumber, ebrNportDestinationAddress=ebrNportDestinationAddress, ebrRemoveMgmtAddress=ebrRemoveMgmtAddress, trafficGroupMembershipTable=trafficGroupMembershipTable, leftPowerOutputPower=leftPowerOutputPower, ebrNportSapNameEntry=ebrNportSapNameEntry, ebrMultiEnetAllowedToGoTo=ebrMultiEnetAllowedToGoTo, ebrMultiSapProtoEntry=ebrMultiSapProtoEntry, ebrNportDAStatus=ebrNportDAStatus, ebrNportSnapName=ebrNportSnapName, clockCard=clockCard, mgmtMemoryIndex=mgmtMemoryIndex, portTargetDomainListMembershipWorkBuf=portTargetDomainListMembershipWorkBuf, ebrTwoPortStaticTable=ebrTwoPortStaticTable, aglatmInterfaceSonetTCIndex=aglatmInterfaceSonetTCIndex, ebrNportSANameSA=ebrNportSANameSA, ebrMultiSwProtoSapOther=ebrMultiSwProtoSapOther, esysDeviceBrokenReason=esysDeviceBrokenReason, efddiSMT=efddiSMT, ebrIfEtherTable=ebrIfEtherTable, aglatmInterfaceTrafficEnforcementType5=aglatmInterfaceTrafficEnforcementType5, ebrNportMatrixNameTable=ebrNportMatrixNameTable, portTargetDomainListMembershipTable=portTargetDomainListMembershipTable, ipDynamicEnabledPorts=ipDynamicEnabledPorts, ipDynamicPorts=ipDynamicPorts, mgmtMemoryEntry=mgmtMemoryEntry, ebrTwoSapIndex=ebrTwoSapIndex, ebrNportSapSvcStatus=ebrNportSapSvcStatus, aglVCConnectionTableEntryStatus=aglVCConnectionTableEntryStatus, ebrNportPortNumTable=ebrNportPortNumTable, ebrNportSvc=ebrNportSvc, pscFwImageStatus=pscFwImageStatus, ebrNportDANameDisp=ebrNportDANameDisp, ebrTwoSapValue=ebrTwoSapValue, floodPacketsPurged=floodPacketsPurged, aglsonetLineCurrentUASs=aglsonetLineCurrentUASs, esysUpdateSwitch=esysUpdateSwitch, ebrIfSpBadHelloCount=ebrIfSpBadHelloCount, ebrIfEthCollisionTestFailed=ebrIfEthCollisionTestFailed, ebrMultiEnetStatus=ebrMultiEnetStatus, ebrNportSwManualFilter=ebrNportSwManualFilter, floodSinglePathDiscards=floodSinglePathDiscards, ebrNportSnapSinglePath=ebrNportSnapSinglePath, arpTimingMechanism=arpTimingMechanism, mPortMACIndex=mPortMACIndex, hostSlotTable=hostSlotTable, ebrNportDANameTable=ebrNportDANameTable, esysLastLoadHost=esysLastLoadHost, fppnBridgePortNumber=fppnBridgePortNumber, esystem=esystem, aglatmInterfaceMaxVpcs=aglatmInterfaceMaxVpcs, portGroupMembership=portGroupMembership, ebrNportSwTable=ebrNportSwTable, ebrIfFddiIpDontFragment=ebrIfFddiIpDontFragment, ebrMultiPortAllowedToGoTo=ebrMultiPortAllowedToGoTo, gigaStpPortTable=gigaStpPortTable, fppnEntry=fppnEntry, esysCounters=esysCounters, xacInDiscardUnknownDAUCast=xacInDiscardUnknownDAUCast, aglsonetPathCurrentCVs=aglsonetPathCurrentCVs, xglEntry=xglEntry, xglEnableRawIPX=xglEnableRawIPX, esysTrapEntry=esysTrapEntry, ebrNportSnapAllowedToGoTo=ebrNportSnapAllowedToGoTo, scpSlot=scpSlot, ebrLB100SpanningTreeCompat=ebrLB100SpanningTreeCompat, arpAgent=arpAgent, ebrMultiSwProtoEnetOther=ebrMultiSwProtoEnetOther, transferFileName=transferFileName, ebrNportStaticSAFilterCharacteristicsTable=ebrNportStaticSAFilterCharacteristicsTable, ebrNportDefaultMatrixRowEntry=ebrNportDefaultMatrixRowEntry, ebrIfEthCarrierLoss=ebrIfEthCarrierLoss, eSMTTracesReceived=eSMTTracesReceived, ebrNportSapName=ebrNportSapName, copyType=copyType, eMACFrameStripMode=eMACFrameStripMode, portGroupMembershipTable=portGroupMembershipTable)
