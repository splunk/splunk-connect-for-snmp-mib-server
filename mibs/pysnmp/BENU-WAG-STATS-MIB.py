#
# PySNMP MIB module BENU-WAG-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BENU-WAG-STATS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:20:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
benuWAG, = mibBuilder.importSymbols("BENU-WAG-MIB", "benuWAG")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Integer32, Unsigned32, ModuleIdentity, ObjectIdentity, Bits, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, IpAddress, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Bits", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "IpAddress", "iso", "TimeTicks")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
benuWagStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3))
benuWagStatsMIB.setRevisions(('1970-01-01 00:00', '2017-01-31 00:00', '2017-01-20 00:00', '2016-07-05 00:00', '2016-07-05 00:00', '2016-05-30 00:00', '2016-05-27 00:00', '2016-03-03 00:00', '2015-10-05 00:00', '2015-09-30 00:00', '2015-09-29 00:00', '2015-09-26 00:00', '2015-09-24 00:00', '2015-09-24 00:01', '2015-09-22 00:01', '2015-09-22 00:00', '2015-09-21 00:00', '2015-09-15 00:00', '2015-09-08 00:00', '2015-08-06 00:00', '2015-07-15 00:00', '2015-06-26 00:00', '2015-06-24 00:00', '2015-06-12 00:00', '2015-05-21 00:00', '2015-05-20 00:00', '2015-05-12 00:00', '2015-04-15 00:00', '2015-04-13 00:00', '2015-04-12 00:00', '2015-03-27 00:00', '2015-02-27 00:00', '2015-02-25 00:00', '2015-02-20 00:00', '2015-02-18 00:00', '2015-02-17 00:00', '2015-02-16 00:00', '2015-01-28 00:00', '2015-01-12 00:00', '2015-01-08 00:00', '2015-01-05 00:00', '2015-01-02 00:00', '2014-09-09 00:00', '2014-04-28 00:00', '2014-03-05 00:00', '2014-02-25 00:00', '2014-02-19 00:00', '2014-02-14 00:00', '2014-01-17 00:00', '2014-01-16 00:00', '2014-01-09 00:00', '2013-12-31 00:00', '2013-12-23 00:01', '2013-12-17 00:01', '2013-12-10 00:01', '2013-12-10 00:00', '2013-11-29 00:00', '2013-11-23 00:00', '2013-11-21 00:00', '2013-11-13 00:00', '2013-09-13 00:00', '2016-07-08 00:00',))
if mibBuilder.loadTexts: benuWagStatsMIB.setLastUpdated('201702020000Z')
if mibBuilder.loadTexts: benuWagStatsMIB.setOrganization('Benu Networks,Inc')
bWagStatsNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0))
if mibBuilder.loadTexts: bWagStatsNotifications.setStatus('current')
bWagRadiusMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1))
if mibBuilder.loadTexts: bWagRadiusMIBObjects.setStatus('current')
bWagRadiusNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 2))
if mibBuilder.loadTexts: bWagRadiusNotifObjects.setStatus('current')
bWagDhcpMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3))
if mibBuilder.loadTexts: bWagDhcpMIBObjects.setStatus('current')
bWagDhcpNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 4))
if mibBuilder.loadTexts: bWagDhcpNotifObjects.setStatus('current')
bWagSubscriberMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5))
if mibBuilder.loadTexts: bWagSubscriberMIBObjects.setStatus('current')
bWagSubscriberNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 6))
if mibBuilder.loadTexts: bWagSubscriberNotifObjects.setStatus('current')
bWagTunnelStatsMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7))
if mibBuilder.loadTexts: bWagTunnelStatsMIBObjects.setStatus('current')
bWagTunnelNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 8))
if mibBuilder.loadTexts: bWagTunnelNotifObjects.setStatus('current')
bWagCgnatMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9))
if mibBuilder.loadTexts: bWagCgnatMIBObjects.setStatus('current')
bWagCgnatNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10))
if mibBuilder.loadTexts: bWagCgnatNotifObjects.setStatus('current')
bWagProcessingLatencyMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11))
if mibBuilder.loadTexts: bWagProcessingLatencyMIBObjects.setStatus('current')
bWagProcessingLatencyNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 12))
if mibBuilder.loadTexts: bWagProcessingLatencyNotifObjects.setStatus('current')
bWagDhcpv6MIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13))
if mibBuilder.loadTexts: bWagDhcpv6MIBObjects.setStatus('current')
bWagMHNMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14))
if mibBuilder.loadTexts: bWagMHNMIBObjects.setStatus('current')
bWagVrgApiNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15))
if mibBuilder.loadTexts: bWagVrgApiNotifObjects.setStatus('current')
bWagDsLiteMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16))
if mibBuilder.loadTexts: bWagDsLiteMIBObjects.setStatus('current')
bWagDsLiteNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 17))
if mibBuilder.loadTexts: bWagDsLiteNotifObjects.setStatus('current')
bWagIpSystemStatsMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18))
if mibBuilder.loadTexts: bWagIpSystemStatsMIBObjects.setStatus('current')
bWagRadiusTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: bWagRadiusTable.setStatus('current')
bWagRadiusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagRadiusStatsInterval"))
if mibBuilder.loadTexts: bWagRadiusEntry.setStatus('current')
bWagRadiusStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagRadiusStatsInterval.setStatus('current')
bWagRadiusIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusIntervalDuration.setStatus('current')
bWagRadiusAuthLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAuthLatencyMin.setStatus('current')
bWagRadiusAuthLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAuthLatencyMax.setStatus('current')
bWagRadiusAuthLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAuthLatencyAvg.setStatus('current')
bWagRadiusAuthLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAuthLatencyLast.setStatus('current')
bWagRadiusAcctLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctLatencyMin.setStatus('current')
bWagRadiusAcctLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctLatencyMax.setStatus('current')
bWagRadiusAcctLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctLatencyAvg.setStatus('current')
bWagRadiusAcctLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctLatencyLast.setStatus('current')
bWagRadiusAccessRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAccessRequestSent.setStatus('current')
bWagRadiusAccessAcceptReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAccessAcceptReceived.setStatus('current')
bWagRadiusAccessRejectReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAccessRejectReceived.setStatus('current')
bWagRadiusAcctRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctRequestSent.setStatus('current')
bWagRadiusAcctResponseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctResponseReceived.setStatus('current')
bWagRadiusCoAAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoAAckSent.setStatus('current')
bWagRadiusCoANackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoANackSent.setStatus('current')
bWagRadiusCoARequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoARequestReceived.setStatus('current')
bWagRadiusCoALatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoALatencyMin.setStatus('current')
bWagRadiusCoALatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoALatencyMax.setStatus('current')
bWagRadiusCoALatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoALatencyAvg.setStatus('current')
bWagRadiusCoALatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoALatencyLast.setStatus('current')
bWagRadiusDMLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMLatencyMin.setStatus('current')
bWagRadiusDMLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMLatencyMax.setStatus('current')
bWagRadiusDMLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMLatencyAvg.setStatus('current')
bWagRadiusDMLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMLatencyLast.setStatus('current')
bWagRadiusDMAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMAckSent.setStatus('current')
bWagRadiusDMNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMNackSent.setStatus('current')
bWagRadiusDMRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMRequestReceived.setStatus('current')
bWagDhcpTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1), )
if mibBuilder.loadTexts: bWagDhcpTable.setStatus('current')
bWagDhcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagDhcpStatsInterval"))
if mibBuilder.loadTexts: bWagDhcpEntry.setStatus('current')
bWagDhcpStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagDhcpStatsInterval.setStatus('current')
bWagDhcpIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpIntervalDuration.setStatus('current')
bWagDhcpDiscoverAckIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalMin.setStatus('current')
bWagDhcpDiscoverAckIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalMax.setStatus('current')
bWagDhcpDiscoverAckIntervalAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalAvg.setStatus('current')
bWagDhcpDiscoverAckIntervalLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalLast.setStatus('current')
bWagDhcpRequestAckLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyMin.setStatus('current')
bWagDhcpRequestAckLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyMax.setStatus('current')
bWagDhcpRequestAckLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyAvg.setStatus('current')
bWagDhcpRequestAckLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyLast.setStatus('current')
bWagDhcpDiscoverOfferLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyMin.setStatus('current')
bWagDhcpDiscoverOfferLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyMax.setStatus('current')
bWagDhcpDiscoverOfferLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyAvg.setStatus('current')
bWagDhcpDiscoverOfferLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyLast.setStatus('current')
bWagDhcpDiscoverReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverReceived.setStatus('current')
bWagDhcpOfferSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferSent.setStatus('current')
bWagDhcpRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestReceived.setStatus('current')
bWagDhcpAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpAckSent.setStatus('current')
bWagDhcpNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpNackSent.setStatus('current')
bWagDhcpOfferRequestIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalMin.setStatus('current')
bWagDhcpOfferRequestIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalMax.setStatus('current')
bWagDhcpOfferRequestIntervalAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalAvg.setStatus('current')
bWagDhcpOfferRequestIntervalLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalLast.setStatus('current')
bWagDhcpTPSTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2), )
if mibBuilder.loadTexts: bWagDhcpTPSTable.setStatus('current')
bWagDhcpTPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagDhcpTPSInterval"))
if mibBuilder.loadTexts: bWagDhcpTPSEntry.setStatus('current')
bWagDhcpTPSInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagDhcpTPSInterval.setStatus('current')
bWagDhcpTPSIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpTPSIntervalDuration.setStatus('current')
bWagDhcpTPSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpTPSLow.setStatus('current')
bWagDhcpTPSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpTPSHigh.setStatus('current')
bWagDhcpTPS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpTPS.setStatus('current')
bWagSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1), )
if mibBuilder.loadTexts: bWagSubscriberTable.setStatus('current')
bWagSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagSubscriberStatsInterval"))
if mibBuilder.loadTexts: bWagSubscriberEntry.setStatus('current')
bWagSubscriberStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagSubscriberStatsInterval.setStatus('current')
bWagSubscriberIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberIntervalDuration.setStatus('current')
bWagSubscriberActivationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberActivationsCount.setStatus('current')
bWagSubscriberDeletionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberDeletionsCount.setStatus('current')
bWagSubscriberAuthenticationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCount.setStatus('current')
bWagSubscriberRedirectionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberRedirectionsCount.setStatus('current')
bWagSubscriberRedirectionsByAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberRedirectionsByAcl.setStatus('obsolete')
bWagSubscriberAPMobilityOccurencesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAPMobilityOccurencesCount.setStatus('current')
bWagSubscriberDeletionsByDMCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberDeletionsByDMCount.setStatus('current')
bWagSubscriberIdleTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberIdleTimeoutCount.setStatus('current')
bWagSubscriberSessionTimeoutPreauthCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutPreauthCount.setStatus('current')
bWagSubscriberSessionTimeoutAuthviaportalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutAuthviaportalCount.setStatus('current')
bWagSubscriberDroppedByLicenseManagerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberDroppedByLicenseManagerCount.setStatus('current')
bWagSubscriberThrottlingOccurrencesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberThrottlingOccurrencesCount.setStatus('obsolete')
bWagSubscriberThrottledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberThrottledCount.setStatus('obsolete')
bWagSubscriberAbsoluteTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAbsoluteTimeoutCount.setStatus('current')
bWagSubscriberAuthsViaPortalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthsViaPortalCount.setStatus('current')
bWagSubscriberAuthenticationsCountVia8021x = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountVia8021x.setStatus('current')
bWagSubscriberAuthenticationsCountViaSingleStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountViaSingleStatic.setStatus('current')
bWagSubscriberAuthenticationsCountViaRoutedSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountViaRoutedSubnet.setStatus('current')
bWagSubscriberSessionTimeoutAuthVia8021x = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutAuthVia8021x.setStatus('current')
bWagSubscriberHomeTotalSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeTotalSubsDeleted.setStatus('current')
bWagSubscriberHomeTransientSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeTransientSubsDeleted.setStatus('current')
bWagSubscriberHomeUserStaticSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeUserStaticSubsDeleted.setStatus('current')
bWagSubscriberHomeDhcpStaticSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeDhcpStaticSubsDeleted.setStatus('current')
bWagSubscriberHomeDhcpDynSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeDhcpDynSubsDeleted.setStatus('current')
bWagSubscriberHomePubStaticSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomePubStaticSubsDeleted.setStatus('current')
bWagSubscriberSpWifiActivationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberSpWifiActivationsCount.setStatus('current')
bWagSubscriberHomeActivationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeActivationsCount.setStatus('current')
bWagSubscriberDsLiteActivationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberDsLiteActivationsCount.setStatus('current')
bWagNumCurrentSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentSubscribers.setStatus('current')
bWagNumAuthenticatedSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumAuthenticatedSubscribers.setStatus('current')
bWagNumUnauthenticatedSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumUnauthenticatedSubscribers.setStatus('current')
bWagNumSubsWithPrivateIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumSubsWithPrivateIPAddress.setStatus('current')
bWagNumAuthSubsWithPublicIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumAuthSubsWithPublicIPAddress.setStatus('current')
bWagNumUnAuthSubsWithPublicIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumUnAuthSubsWithPublicIPAddress.setStatus('current')
bWagNumMigrantSubscribersCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumMigrantSubscribersCount.setStatus('current')
bWagNumRedirectedSubscribersCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumRedirectedSubscribersCount.setStatus('current')
bWagNumSubsAuthenticatedWithIPv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumSubsAuthenticatedWithIPv6Prefix.setStatus('current')
bWagNumCurrent8021xSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrent8021xSubscribers.setStatus('current')
bWagNumPreAuthenticatedSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumPreAuthenticatedSubscribers.setStatus('current')
bWagNumCurrentSingleStaticSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentSingleStaticSubscribers.setStatus('current')
bWagNumCurrentRoutedSubnetSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentRoutedSubnetSubscribers.setStatus('current')
bWagNumSubsUnauthenticatedWithIPv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumSubsUnauthenticatedWithIPv6Prefix.setStatus('current')
bWagNumSubsViaStaticAuthPolicy = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumSubsViaStaticAuthPolicy.setStatus('current')
bWagNumCurrentHomeSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeSubscribers.setStatus('current')
bWagNumCurrentSPWiFiSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentSPWiFiSubscribers.setStatus('current')
bWagNumCurrentHomeTransientSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeTransientSubs.setStatus('current')
bWagNumCurrentHomeUserStatSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeUserStatSubs.setStatus('current')
bWagNumCurrentHomeDhcpStatSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeDhcpStatSubs.setStatus('current')
bWagNumCurrentHomeDhcpDynSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeDhcpDynSubs.setStatus('current')
bWagNumCurrentHomePubStatSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomePubStatSubs.setStatus('current')
bWagNumPreAuthSpwifiSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumPreAuthSpwifiSubscribers.setStatus('current')
bWagNumPreAuthHomeSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumPreAuthHomeSubscribers.setStatus('current')
bWagNumPreAuthenticatedSubscribersS2aPmip6 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumPreAuthenticatedSubscribersS2aPmip6.setStatus('current')
bWagNumCurrentSSIDS2aSubscribersPmip6 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentSSIDS2aSubscribersPmip6.setStatus('current')
bWagNumCurrentDSLiteSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentDSLiteSubscribers.setStatus('current')
bWagPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10), )
if mibBuilder.loadTexts: bWagPolicyTable.setStatus('current')
bWagPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagPolicyType"), (0, "BENU-WAG-STATS-MIB", "bWagPolicyIndex"))
if mibBuilder.loadTexts: bWagPolicyEntry.setStatus('current')
bWagPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("qos", 1), ("li", 2), ("acl", 3))))
if mibBuilder.loadTexts: bWagPolicyType.setStatus('current')
bWagPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 2), Integer32())
if mibBuilder.loadTexts: bWagPolicyIndex.setStatus('current')
bWagPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagPolicyName.setStatus('current')
bWagNumOfSubscribersWithPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumOfSubscribersWithPolicy.setStatus('current')
bWagNumOfAuthSubscribersWithPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumOfAuthSubscribersWithPolicy.setStatus('current')
bWagNumOfUnAuthSubscribersWithPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumOfUnAuthSubscribersWithPolicy.setStatus('current')
bWagTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1), )
if mibBuilder.loadTexts: bWagTunnelTable.setStatus('current')
bWagTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagTunnelStatsInterval"))
if mibBuilder.loadTexts: bWagTunnelEntry.setStatus('current')
bWagTunnelStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagTunnelStatsInterval.setStatus('current')
bWagTunnelIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelIntervalDuration.setStatus('current')
bWagTunnelPktsRxdGRE = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdGRE.setStatus('current')
bWagTunnelPktsRxdGREPayloadTEB = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdGREPayloadTEB.setStatus('current')
bWagTunnelPktsRxdGREPayloadMPLS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdGREPayloadMPLS.setStatus('current')
bWagTunnelPktsEncapsulatedGRE = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsEncapsulatedGRE.setStatus('current')
bWagTunnelPktsDecapsulatedGRE = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsDecapsulatedGRE.setStatus('current')
bWagTunnelPktsRxdARP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdARP.setStatus('current')
bWagTunnelPktsRxdDHCP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdDHCP.setStatus('current')
bWagTunnelPktsRxdDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdDNS.setStatus('obsolete')
bWagTunnelPktsRxdHTTP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTP.setStatus('obsolete')
bWagTunnelPktsRxdHTTPGetReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTPGetReq.setStatus('obsolete')
bWagTunnelPktsTxdHTTP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdHTTP.setStatus('obsolete')
bWagTunnelPktsTxdHTTPRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdHTTPRedir.setStatus('obsolete')
bWagTunnelPktsRxdHTTPS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTPS.setStatus('obsolete')
bWagTunnelPktsRxdTCPSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdTCPSyn.setStatus('obsolete')
bWagTunnelPktsTxdTCPSynAck = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPSynAck.setStatus('obsolete')
bWagTunnelPktsTxdTCPFin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPFin.setStatus('obsolete')
bWagTunnelPktsRxdTCPFinAck = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdTCPFinAck.setStatus('obsolete')
bWagTunnelPktsTxdTCPAck2Fin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPAck2Fin.setStatus('obsolete')
bWagTunnelCreatedDynamically = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelCreatedDynamically.setStatus('current')
bWagTunnelCreatedStatically = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelCreatedStatically.setStatus('current')
bWagTunnelDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeleted.setStatus('current')
bWagTunnelDeletedDueToInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToInactivity.setStatus('current')
bWagTunnelDeletedByCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedByCommand.setStatus('current')
bWagTunnelMaxSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelMaxSupported.setStatus('current')
bWagTunnelMaxCountReached = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelMaxCountReached.setStatus('current')
bWagTunnelTunnelsLookupFound = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelTunnelsLookupFound.setStatus('current')
bWagTunnelTunnelsLookupNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelTunnelsLookupNotFound.setStatus('current')
bWagTunnelCountHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelCountHighThreshold.setStatus('current')
bWagTunnelCountLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelCountLowThreshold.setStatus('current')
bWagTunnelDeletedDueToReject = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToReject.setStatus('current')
bWagTunnelDeletedDueToAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToAbort.setStatus('current')
bWagTunnelDeletedDueToMacResFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToMacResFail.setStatus('current')
bWagTunnelDeletedDueToLifDown = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToLifDown.setStatus('current')
bWagTunnelDeletedDueToB2bSubsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToB2bSubsDelete.setStatus('current')
bWagL2tpv3TunnelPktsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxd.setStatus('current')
bWagL2tpv3TunnelPktsEncapsulated = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsEncapsulated.setStatus('current')
bWagL2tpv3TunnelPktsDecapsulated = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsDecapsulated.setStatus('current')
bWagL2tpv3TunnelPktsRxdARP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdARP.setStatus('current')
bWagL2tpv3TunnelPktsRxdDHCP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdDHCP.setStatus('current')
bWagL2tpv3TunnelPktsRxdDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdDNS.setStatus('obsolete')
bWagL2tpv3TunnelCreatedDynamically = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelCreatedDynamically.setStatus('current')
bWagL2tpv3TunnelDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeleted.setStatus('current')
bWagL2tpv3TunnelDeletedDueToInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedDueToInactivity.setStatus('current')
bWagL2tpv3TunnelDeletedByCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedByCommand.setStatus('current')
bWagL2tpv3TunnelDeletedDueToLifDown = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedDueToLifDown.setStatus('current')
bWagNumCurrentTunnels = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnels.setStatus('current')
bWagNumTunnelsCreatedDynamically = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsCreatedDynamically.setStatus('current')
bWagNumTunnelsCreatedStatically = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsCreatedStatically.setStatus('current')
bWagNumTunnelsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsDeleted.setStatus('current')
bWagNumTunnelsInactiveDeleted = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsInactiveDeleted.setStatus('current')
bWagNumTunnelsDeletedByCommand = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsDeletedByCommand.setStatus('current')
bWagNumTunnelsSubsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsSubsAssociated.setStatus('current')
bWagNumTunnelsSchedDeletion = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsSchedDeletion.setStatus('current')
bWagNumCurrentTunnelsIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsIPv4.setStatus('current')
bWagNumCurrentTunnelsIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsIPv6.setStatus('current')
bWagNumTunnelsDeletedByB2B = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsDeletedByB2B.setStatus('current')
bWagNumTunnelsDeletedDuetoLIFDown = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsDeletedDuetoLIFDown.setStatus('current')
bWagNumCurrentTunnelsSpWiFi = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsSpWiFi.setStatus('current')
bWagNumCurrentTunnelsHome = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsHome.setStatus('current')
bWagNumCurrTunnHomeAndSpWiFi = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrTunnHomeAndSpWiFi.setStatus('current')
bWagNumCurrentTunnHomeInactive = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnHomeInactive.setStatus('current')
bWagNumCurrentTunnHomeAccept = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnHomeAccept.setStatus('current')
bWagNumL2tpv3TunnelsCreatedDynamically = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsCreatedDynamically.setStatus('current')
bWagNumL2tpv3TunnelsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeleted.setStatus('current')
bWagNumL2tpv3TunnelsInactiveDeleted = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsInactiveDeleted.setStatus('current')
bWagNumL2tpv3TunnelsDeletedByCommand = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeletedByCommand.setStatus('current')
bWagNumL2tpv3TunnelsSubsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsSubsAssociated.setStatus('current')
bWagNumCurrentL2tpv3TunnelsIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentL2tpv3TunnelsIPv4.setStatus('current')
bWagNumL2tpv3TunnelsDeletedDuetoLIFDown = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeletedDuetoLIFDown.setStatus('current')
bWagNumCurrentL2tpv3TunnelsSpWiFi = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentL2tpv3TunnelsSpWiFi.setStatus('current')
bWagNumCurrentTunnelsDSLite = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsDSLite.setStatus('current')
bWagCgnatProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1), )
if mibBuilder.loadTexts: bWagCgnatProfileStatsTable.setStatus('current')
bWagCgnatProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatProfileStatsIndex"))
if mibBuilder.loadTexts: bWagCgnatProfileStatsEntry.setStatus('current')
bWagCgnatProfileStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatProfileStatsIndex.setStatus('current')
bWagCgnatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileName.setStatus('current')
bWagCgnatProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileType.setStatus('current')
bWagCgnatProfileNATIPPoolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileNATIPPoolGroup.setStatus('current')
bWagCgnatProfileSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileSubscribers.setStatus('current')
bWagCgnatProfileMaxIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileMaxIPAddresses.setStatus('current')
bWagCgnatProfileUsedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileUsedIPAddresses.setStatus('current')
bWagCgnatProfileReservedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileReservedIPAddresses.setStatus('current')
bWagCgnatProfileTotalPortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileTotalPortBlocks.setStatus('current')
bWagCgnatProfilePortBlocksUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfilePortBlocksUsed.setStatus('obsolete')
bWagCgnatProfilePortBlocksReused = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfilePortBlocksReused.setStatus('obsolete')
bWagCgnatProfileTotalPoolIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileTotalPoolIPAddresses.setStatus('current')
bWagMHNProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1), )
if mibBuilder.loadTexts: bWagMHNProfileStatsTable.setStatus('current')
bWagMHNProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagMHNProfileStatsIndex"))
if mibBuilder.loadTexts: bWagMHNProfileStatsEntry.setStatus('current')
bWagMHNProfileStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagMHNProfileStatsIndex.setStatus('current')
bWagMHNProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileName.setStatus('current')
bWagMHNProfileNATIPPoolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileNATIPPoolGroup.setStatus('current')
bWagMHNProfileMaxSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileMaxSubscribers.setStatus('current')
bWagMHNProfileMaxIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileMaxIPAddresses.setStatus('current')
bWagMHNProfileUsedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileUsedIPAddresses.setStatus('current')
bWagMHNProfileTotalPortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileTotalPortBlocks.setStatus('current')
bWagMHNProfileTotalPoolIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileTotalPoolIPAddresses.setStatus('current')
bWagCgnatIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2), )
if mibBuilder.loadTexts: bWagCgnatIPStatsTable.setStatus('current')
bWagCgnatIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatIPStatsIndex"))
if mibBuilder.loadTexts: bWagCgnatIPStatsEntry.setStatus('current')
bWagCgnatIPStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatIPStatsIndex.setStatus('current')
bWagCgnatPublicIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPublicIPAddressType.setStatus('current')
bWagCgnatPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPublicIPAddress.setStatus('current')
bWagCgnatIPPortBlocksUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksUsed.setStatus('obsolete')
bWagCgnatIPPortBlocksFree = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksFree.setStatus('current')
bWagCgnatIPPortBlocksReused = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksReused.setStatus('obsolete')
bWagCgnatIPSubActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPSubActiveCount.setStatus('current')
bWagCgnatIPPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPPacketsDropped.setStatus('obsolete')
bWagCgnatPeriodIpTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3), )
if mibBuilder.loadTexts: bWagCgnatPeriodIpTable.setStatus('obsolete')
bWagCgnatPeriodIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatPeriodIpInterval"), (0, "BENU-WAG-STATS-MIB", "bWagCgnatPeriodIpIndex"))
if mibBuilder.loadTexts: bWagCgnatPeriodIpEntry.setStatus('obsolete')
bWagCgnatPeriodIpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatPeriodIpInterval.setStatus('obsolete')
bWagCgnatPeriodIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: bWagCgnatPeriodIpIndex.setStatus('obsolete')
bWagCgnatIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPAddressType.setStatus('obsolete')
bWagCgnatIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPAddress.setStatus('obsolete')
bWagCgnatPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPacketsDropped.setStatus('obsolete')
bWagCgnatPortBlockMaxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPortBlockMaxUtil.setStatus('obsolete')
bWagCgnatPortBlockMinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPortBlockMinUtil.setStatus('obsolete')
bWagCgnatIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIntervalDuration.setStatus('obsolete')
bWagCgnatUnauthIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4), )
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsTable.setStatus('current')
bWagCgnatUnauthIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatUnauthIPStatsIndex"))
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsEntry.setStatus('current')
bWagCgnatUnauthIPStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsIndex.setStatus('current')
bWagCgnatUnauthPublicIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthPublicIPAddressType.setStatus('current')
bWagCgnatUnauthPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthPublicIPAddress.setStatus('current')
bWagCgnatUnauthIPPortBlocksUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksUsed.setStatus('obsolete')
bWagCgnatUnauthIPPortBlocksFree = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksFree.setStatus('current')
bWagCgnatUnauthIPPortBlocksReused = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksReused.setStatus('obsolete')
bWagCgnatUnauthIPSubActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPSubActiveCount.setStatus('current')
bWagCgnatUnauthPeriodIpTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5), )
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpTable.setStatus('obsolete')
bWagCgnatUnauthPeriodIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatUnauthPeriodIpInterval"), (0, "BENU-WAG-STATS-MIB", "bWagCgnatUnauthPeriodIpIndex"))
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpEntry.setStatus('obsolete')
bWagCgnatUnauthPeriodIpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpInterval.setStatus('obsolete')
bWagCgnatUnauthPeriodIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpIndex.setStatus('obsolete')
bWagCgnatUnauthIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPAddressType.setStatus('obsolete')
bWagCgnatUnauthIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPAddress.setStatus('obsolete')
bWagCgnatUnauthPortBlockMaxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthPortBlockMaxUtil.setStatus('obsolete')
bWagCgnatUnauthPortBlockMinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthPortBlockMinUtil.setStatus('obsolete')
bWagCgnatUnauthIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIntervalDuration.setStatus('obsolete')
bWagCgnatAuthPortUtilTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 6), )
if mibBuilder.loadTexts: bWagCgnatAuthPortUtilTable.setStatus('obsolete')
bWagCgnatAuthPortUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 6, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatAuthSubscriberMac"))
if mibBuilder.loadTexts: bWagCgnatAuthPortUtilEntry.setStatus('obsolete')
bWagCgnatAuthSubscriberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: bWagCgnatAuthSubscriberMac.setStatus('obsolete')
bWagCgnatAuthSubscriberPortsUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatAuthSubscriberPortsUtil.setStatus('obsolete')
bWagCgnatPoolGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8), )
if mibBuilder.loadTexts: bWagCgnatPoolGroupStatsTable.setStatus('current')
bWagCgnatPoolGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatPoolGroupType"), (0, "BENU-WAG-STATS-MIB", "bWagCgnatPoolGroupIndex"))
if mibBuilder.loadTexts: bWagCgnatPoolGroupStatsEntry.setStatus('current')
bWagCgnatPoolGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("unAuthNapt", 1), ("authNapt", 2))))
if mibBuilder.loadTexts: bWagCgnatPoolGroupType.setStatus('current')
bWagCgnatPoolGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: bWagCgnatPoolGroupIndex.setStatus('current')
bWagCgnatPoolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupName.setStatus('current')
bWagCgnatPoolGroupSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupSubscribers.setStatus('current')
bWagCgnatPoolGroupUsedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupUsedIPAddresses.setStatus('current')
bWagCgnatPoolGroupReservedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupReservedIPAddresses.setStatus('current')
bWagCgnatPoolGroupTotalIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupTotalIPAddresses.setStatus('current')
bWagDHCPv6Table = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1), )
if mibBuilder.loadTexts: bWagDHCPv6Table.setStatus('current')
bWagDHCPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagDHCPv6StatsInterval"))
if mibBuilder.loadTexts: bWagDHCPv6Entry.setStatus('current')
bWagDHCPv6StatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagDHCPv6StatsInterval.setStatus('current')
bWagDHCPv6IntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6IntervalDuration.setStatus('current')
bWagDHCPv6SolicitReplyIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalMin.setStatus('current')
bWagDHCPv6SolicitReplyIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalMax.setStatus('current')
bWagDHCPv6SolicitReplyIntervalAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalAvg.setStatus('current')
bWagDHCPv6SolicitReplyIntervalLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalLast.setStatus('current')
bWagDHCPv6RequestReplyLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyMin.setStatus('current')
bWagDHCPv6RequestReplyLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyMax.setStatus('current')
bWagDHCPv6RequestReplyLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyAvg.setStatus('current')
bWagDHCPv6RequestReplyLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyLast.setStatus('current')
bWagDHCPv6SolicitAdvLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyMin.setStatus('current')
bWagDHCPv6SolicitAdvLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyMax.setStatus('current')
bWagDHCPv6SolicitAdvLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyAvg.setStatus('current')
bWagDHCPv6SolicitAdvLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyLast.setStatus('current')
bWagDHCPv6AdvRequestIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalMin.setStatus('current')
bWagDHCPv6AdvRequestIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalMax.setStatus('current')
bWagDHCPv6AdvRequestIntervalAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalAvg.setStatus('current')
bWagDHCPv6AdvRequestIntervalLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalLast.setStatus('current')
bWagDHCPv6SolicitReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReceived.setStatus('current')
bWagDHCPv6AdvertisementSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvertisementSent.setStatus('current')
bWagDHCPv6RequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReceived.setStatus('current')
bWagDHCPv6ReplySent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6ReplySent.setStatus('current')
bWagCgnatAuthPortRisingThresholdCrossedSubCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatAuthPortRisingThresholdCrossedSubCount.setStatus('obsolete')
bWagUpstreamProcessingLatencyPktCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyPktCount.setStatus('obsolete')
bWagUpstreamProcessingLatencyMax = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyMax.setStatus('obsolete')
bWagUpstreamProcessingLatencyMin = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyMin.setStatus('obsolete')
bWagUpstreamProcessingLatencyAvg = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyAvg.setStatus('obsolete')
bWagDownstreamProcessingLatencyPktCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyPktCount.setStatus('obsolete')
bWagDownstreamProcessingLatencyMax = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyMax.setStatus('obsolete')
bWagDownstreamProcessingLatencyMin = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyMin.setStatus('obsolete')
bWagDownstreamProcessingLatencyAvg = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyAvg.setStatus('obsolete')
bWagCgnatProfileIPPoolGroup = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatProfileIPPoolGroup.setStatus('current')
bWagCgnatTotalPoolIPAddresses = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatTotalPoolIPAddresses.setStatus('current')
bWagCgnatAuthIpAddrUsedHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrUsedHighThreshold.setStatus('current')
bWagCgnatAuthIpAddrUsedLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrUsedLowThreshold.setStatus('current')
bWagCgnatAuthIpAddrHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 1)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatProfileIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPoolIPAddresses"), ("BENU-WAG-STATS-MIB", "bWagCgnatAuthIpAddrUsedHighThreshold"))
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrHighThresholdReached.setStatus('current')
bWagCgnatAuthIpAddrLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 2)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatProfileIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPoolIPAddresses"), ("BENU-WAG-STATS-MIB", "bWagCgnatAuthIpAddrUsedLowThreshold"))
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrLowThresholdReached.setStatus('current')
bWagCgnatAuthIpAddressesExhausted = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 3)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatProfileIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPoolIPAddresses"))
if mibBuilder.loadTexts: bWagCgnatAuthIpAddressesExhausted.setStatus('current')
bWagCgnatSubscriberMac = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatSubscriberMac.setStatus('obsolete')
bWagCgnatTotalPortBlocksPerSubscriber = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatTotalPortBlocksPerSubscriber.setStatus('obsolete')
bWagCgnatPortBlocksUsedHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 7), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedHighThreshold.setStatus('obsolete')
bWagCgnatPortBlocksUsedLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedLowThreshold.setStatus('obsolete')
bWagCgnatPortBlocksUsedHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 4)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatSubscriberMac"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPortBlocksPerSubscriber"), ("BENU-WAG-STATS-MIB", "bWagCgnatPortBlocksUsedHighThreshold"))
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedHighThresholdReached.setStatus('obsolete')
bWagCgnatPortBlocksUsedLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 5)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatSubscriberMac"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPortBlocksPerSubscriber"), ("BENU-WAG-STATS-MIB", "bWagCgnatPortBlocksUsedLowThreshold"))
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedLowThresholdReached.setStatus('obsolete')
bWagDhcpTPSLowReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 7)).setObjects(("BENU-WAG-STATS-MIB", "bWagDhcpTPS"))
if mibBuilder.loadTexts: bWagDhcpTPSLowReached.setStatus('current')
bWagDhcpTPSHighReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 6)).setObjects(("BENU-WAG-STATS-MIB", "bWagDhcpTPS"))
if mibBuilder.loadTexts: bWagDhcpTPSHighReached.setStatus('current')
bWagVrgApiIpAddrUsedHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedHighThreshold.setStatus('current')
bWagVrgApiIpAddrUsedLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedLowThreshold.setStatus('current')
bWagrgApiIPPoolGroup = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagrgApiIPPoolGroup.setStatus('current')
bWagVRGApiIPoolIPAddresses = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagVRGApiIPoolIPAddresses.setStatus('current')
bWagVrgApiIpAddrUsedHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 8)).setObjects(("BENU-WAG-STATS-MIB", "bWagrgApiIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagVRGApiIPoolIPAddresses"), ("BENU-WAG-STATS-MIB", "bWagVrgApiIpAddrUsedHighThreshold"))
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedHighThresholdReached.setStatus('current')
bWagVrgApiIpAddrUsedLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 9)).setObjects(("BENU-WAG-STATS-MIB", "bWagrgApiIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagVRGApiIPoolIPAddresses"), ("BENU-WAG-STATS-MIB", "bWagVrgApiIpAddrUsedLowThreshold"))
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedLowThresholdReached.setStatus('current')
bWagVrgApiIpAddressesExhausted = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 10)).setObjects(("BENU-WAG-STATS-MIB", "bWagrgApiIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagVRGApiIPoolIPAddresses"))
if mibBuilder.loadTexts: bWagVrgApiIpAddressesExhausted.setStatus('current')
bWagDsLiteProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1), )
if mibBuilder.loadTexts: bWagDsLiteProfileStatsTable.setStatus('current')
bWagDsLiteProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagDsLiteProfileStatsIndex"))
if mibBuilder.loadTexts: bWagDsLiteProfileStatsEntry.setStatus('current')
bWagDsLiteProfileStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagDsLiteProfileStatsIndex.setStatus('current')
bWagDsLiteProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileName.setStatus('current')
bWagDsLiteProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileType.setStatus('current')
bWagDsLiteProfileNATIPPoolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileNATIPPoolGroup.setStatus('current')
bWagDsLiteProfileMaxIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileMaxIPAddresses.setStatus('current')
bWagDsLiteProfileUsedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileUsedIPAddresses.setStatus('current')
bWagDsLiteProfileReservedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileReservedIPAddresses.setStatus('current')
bWagDsLiteProfileTotalPoolIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileTotalPoolIPAddresses.setStatus('current')
bWagDsLiteProfileMaxSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileMaxSubscribers.setStatus('current')
bWagDsLiteProfileMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileMaxTunnels.setStatus('obsolete')
bDSLitePortBlocksTotal = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLitePortBlocksTotal.setStatus('current')
bDSLitePortBlocksInUse = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLitePortBlocksInUse.setStatus('current')
bDSLiteTunnelsUsingOnePortBlock = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingOnePortBlock.setStatus('current')
bDSLiteTunnelsUsingTwoPortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingTwoPortBlocks.setStatus('current')
bDSLiteTunnelsUsingThreePortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingThreePortBlocks.setStatus('current')
bDSLiteTunnelsUsingFourPortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingFourPortBlocks.setStatus('current')
bDSLiteTunnelsUsingFivePortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingFivePortBlocks.setStatus('current')
bWagIpSystemStatsReasmReqds = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpSystemStatsReasmReqds.setStatus('current')
bWagIpIfStatsOutFragOKs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpIfStatsOutFragOKs.setStatus('current')
bWagIpSystemStatsReasmFails = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpSystemStatsReasmFails.setStatus('current')
bWagIpv6IfStatsReasmReqds = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpv6IfStatsReasmReqds.setStatus('current')
bWagIpv6IfStatsOutFragOKs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpv6IfStatsOutFragOKs.setStatus('current')
bWagIpv6IfStatsReasmFails = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpv6IfStatsReasmFails.setStatus('current')
mibBuilder.exportSymbols("BENU-WAG-STATS-MIB", bWagDhcpRequestAckLatencyLast=bWagDhcpRequestAckLatencyLast, bWagNumPreAuthSpwifiSubscribers=bWagNumPreAuthSpwifiSubscribers, bWagL2tpv3TunnelDeletedDueToInactivity=bWagL2tpv3TunnelDeletedDueToInactivity, bWagCgnatPoolGroupUsedIPAddresses=bWagCgnatPoolGroupUsedIPAddresses, bWagTunnelPktsTxdHTTPRedir=bWagTunnelPktsTxdHTTPRedir, bWagDsLiteMIBObjects=bWagDsLiteMIBObjects, bWagRadiusAcctLatencyLast=bWagRadiusAcctLatencyLast, bWagTunnelTunnelsLookupFound=bWagTunnelTunnelsLookupFound, bWagrgApiIPPoolGroup=bWagrgApiIPPoolGroup, bWagCgnatPoolGroupStatsEntry=bWagCgnatPoolGroupStatsEntry, bWagNumOfAuthSubscribersWithPolicy=bWagNumOfAuthSubscribersWithPolicy, bWagNumCurrentTunnHomeInactive=bWagNumCurrentTunnHomeInactive, bWagDsLiteProfileNATIPPoolGroup=bWagDsLiteProfileNATIPPoolGroup, bWagDHCPv6AdvertisementSent=bWagDHCPv6AdvertisementSent, bDSLiteTunnelsUsingFourPortBlocks=bDSLiteTunnelsUsingFourPortBlocks, bWagDsLiteProfileMaxIPAddresses=bWagDsLiteProfileMaxIPAddresses, bWagNumCurrentTunnelsSpWiFi=bWagNumCurrentTunnelsSpWiFi, bWagCgnatProfileStatsTable=bWagCgnatProfileStatsTable, bWagCgnatPortBlocksUsedLowThresholdReached=bWagCgnatPortBlocksUsedLowThresholdReached, bWagDHCPv6SolicitAdvLatencyAvg=bWagDHCPv6SolicitAdvLatencyAvg, bWagRadiusCoAAckSent=bWagRadiusCoAAckSent, bWagNumCurrentHomeTransientSubs=bWagNumCurrentHomeTransientSubs, bWagRadiusNotifObjects=bWagRadiusNotifObjects, bWagNumSubsUnauthenticatedWithIPv6Prefix=bWagNumSubsUnauthenticatedWithIPv6Prefix, bWagDhcpRequestReceived=bWagDhcpRequestReceived, bWagCgnatIntervalDuration=bWagCgnatIntervalDuration, bWagCgnatUnauthPublicIPAddress=bWagCgnatUnauthPublicIPAddress, bWagNumCurrentSingleStaticSubscribers=bWagNumCurrentSingleStaticSubscribers, bWagCgnatUnauthPeriodIpIndex=bWagCgnatUnauthPeriodIpIndex, bWagDownstreamProcessingLatencyPktCount=bWagDownstreamProcessingLatencyPktCount, bWagCgnatUnauthIntervalDuration=bWagCgnatUnauthIntervalDuration, bWagSubscriberEntry=bWagSubscriberEntry, bWagSubscriberThrottlingOccurrencesCount=bWagSubscriberThrottlingOccurrencesCount, bWagIpIfStatsOutFragOKs=bWagIpIfStatsOutFragOKs, bWagNumCurrentTunnelsIPv4=bWagNumCurrentTunnelsIPv4, bWagDHCPv6SolicitAdvLatencyMin=bWagDHCPv6SolicitAdvLatencyMin, bWagCgnatIPPortBlocksReused=bWagCgnatIPPortBlocksReused, bWagCgnatIPStatsEntry=bWagCgnatIPStatsEntry, bWagPolicyType=bWagPolicyType, bWagPolicyTable=bWagPolicyTable, bWagDhcpTPSHighReached=bWagDhcpTPSHighReached, bWagRadiusDMAckSent=bWagRadiusDMAckSent, bWagRadiusCoANackSent=bWagRadiusCoANackSent, bWagSubscriberIntervalDuration=bWagSubscriberIntervalDuration, bWagDHCPv6RequestReplyLatencyAvg=bWagDHCPv6RequestReplyLatencyAvg, bWagCgnatUnauthIPStatsEntry=bWagCgnatUnauthIPStatsEntry, bWagSubscriberAuthenticationsCount=bWagSubscriberAuthenticationsCount, bWagRadiusAcctRequestSent=bWagRadiusAcctRequestSent, bWagNumCurrentTunnelsHome=bWagNumCurrentTunnelsHome, bWagNumMigrantSubscribersCount=bWagNumMigrantSubscribersCount, bWagTunnelPktsTxdHTTP=bWagTunnelPktsTxdHTTP, bWagDhcpMIBObjects=bWagDhcpMIBObjects, bWagDhcpDiscoverOfferLatencyMax=bWagDhcpDiscoverOfferLatencyMax, bWagTunnelPktsTxdTCPSynAck=bWagTunnelPktsTxdTCPSynAck, bWagDHCPv6SolicitReplyIntervalLast=bWagDHCPv6SolicitReplyIntervalLast, bWagRadiusDMRequestReceived=bWagRadiusDMRequestReceived, bWagSubscriberAbsoluteTimeoutCount=bWagSubscriberAbsoluteTimeoutCount, bWagRadiusCoARequestReceived=bWagRadiusCoARequestReceived, bWagDHCPv6RequestReplyLatencyMax=bWagDHCPv6RequestReplyLatencyMax, bWagNumL2tpv3TunnelsCreatedDynamically=bWagNumL2tpv3TunnelsCreatedDynamically, bWagNumAuthenticatedSubscribers=bWagNumAuthenticatedSubscribers, bWagTunnelDeletedDueToAbort=bWagTunnelDeletedDueToAbort, bWagCgnatPoolGroupTotalIPAddresses=bWagCgnatPoolGroupTotalIPAddresses, bWagCgnatNotifObjects=bWagCgnatNotifObjects, bDSLitePortBlocksTotal=bDSLitePortBlocksTotal, bWagTunnelEntry=bWagTunnelEntry, bWagCgnatUnauthIPStatsTable=bWagCgnatUnauthIPStatsTable, bWagL2tpv3TunnelPktsRxd=bWagL2tpv3TunnelPktsRxd, bWagTunnelPktsEncapsulatedGRE=bWagTunnelPktsEncapsulatedGRE, bWagCgnatIPAddressType=bWagCgnatIPAddressType, bWagUpstreamProcessingLatencyMax=bWagUpstreamProcessingLatencyMax, bWagNumL2tpv3TunnelsSubsAssociated=bWagNumL2tpv3TunnelsSubsAssociated, bWagUpstreamProcessingLatencyMin=bWagUpstreamProcessingLatencyMin, bWagDsLiteProfileStatsTable=bWagDsLiteProfileStatsTable, bWagMHNMIBObjects=bWagMHNMIBObjects, bWagRadiusDMLatencyLast=bWagRadiusDMLatencyLast, bWagSubscriberAuthenticationsCountViaRoutedSubnet=bWagSubscriberAuthenticationsCountViaRoutedSubnet, bWagDHCPv6RequestReplyLatencyLast=bWagDHCPv6RequestReplyLatencyLast, bWagL2tpv3TunnelDeletedByCommand=bWagL2tpv3TunnelDeletedByCommand, bWagCgnatIPAddress=bWagCgnatIPAddress, bWagNumSubsViaStaticAuthPolicy=bWagNumSubsViaStaticAuthPolicy, bWagRadiusDMLatencyMin=bWagRadiusDMLatencyMin, bWagTunnelPktsRxdHTTPS=bWagTunnelPktsRxdHTTPS, bWagCgnatUnauthPeriodIpEntry=bWagCgnatUnauthPeriodIpEntry, bWagCgnatPeriodIpTable=bWagCgnatPeriodIpTable, bWagDhcpOfferRequestIntervalMax=bWagDhcpOfferRequestIntervalMax, bWagSubscriberHomeTotalSubsDeleted=bWagSubscriberHomeTotalSubsDeleted, bWagPolicyName=bWagPolicyName, bWagCgnatPacketsDropped=bWagCgnatPacketsDropped, bWagSubscriberAuthsViaPortalCount=bWagSubscriberAuthsViaPortalCount, bWagDHCPv6SolicitReplyIntervalMax=bWagDHCPv6SolicitReplyIntervalMax, bWagMHNProfileName=bWagMHNProfileName, bWagCgnatAuthPortUtilTable=bWagCgnatAuthPortUtilTable, bWagCgnatPoolGroupSubscribers=bWagCgnatPoolGroupSubscribers, bWagSubscriberTable=bWagSubscriberTable, bWagMHNProfileMaxSubscribers=bWagMHNProfileMaxSubscribers, bWagCgnatUnauthPublicIPAddressType=bWagCgnatUnauthPublicIPAddressType, bWagDsLiteProfileType=bWagDsLiteProfileType, bWagDhcpv6MIBObjects=bWagDhcpv6MIBObjects, bWagDHCPv6Entry=bWagDHCPv6Entry, bWagMHNProfileUsedIPAddresses=bWagMHNProfileUsedIPAddresses, bWagCgnatProfileStatsEntry=bWagCgnatProfileStatsEntry, bWagCgnatProfileType=bWagCgnatProfileType, bWagCgnatUnauthPortBlockMinUtil=bWagCgnatUnauthPortBlockMinUtil, bWagTunnelDeletedDueToInactivity=bWagTunnelDeletedDueToInactivity, bWagNumTunnelsDeletedByB2B=bWagNumTunnelsDeletedByB2B, bWagCgnatIPStatsIndex=bWagCgnatIPStatsIndex, bWagSubscriberHomeTransientSubsDeleted=bWagSubscriberHomeTransientSubsDeleted, bWagDhcpTPSLow=bWagDhcpTPSLow, bWagUpstreamProcessingLatencyPktCount=bWagUpstreamProcessingLatencyPktCount, bWagRadiusAuthLatencyAvg=bWagRadiusAuthLatencyAvg, bDSLiteTunnelsUsingFivePortBlocks=bDSLiteTunnelsUsingFivePortBlocks, bWagDhcpDiscoverAckIntervalMax=bWagDhcpDiscoverAckIntervalMax, bWagTunnelPktsRxdGREPayloadMPLS=bWagTunnelPktsRxdGREPayloadMPLS, bWagNumUnAuthSubsWithPublicIPAddress=bWagNumUnAuthSubsWithPublicIPAddress, bWagRadiusDMNackSent=bWagRadiusDMNackSent, bWagMHNProfileMaxIPAddresses=bWagMHNProfileMaxIPAddresses, bWagRadiusMIBObjects=bWagRadiusMIBObjects, bWagCgnatPoolGroupIndex=bWagCgnatPoolGroupIndex, bWagNumCurrentHomeDhcpDynSubs=bWagNumCurrentHomeDhcpDynSubs, bWagDhcpTPSIntervalDuration=bWagDhcpTPSIntervalDuration, bWagSubscriberSessionTimeoutAuthviaportalCount=bWagSubscriberSessionTimeoutAuthviaportalCount, bWagL2tpv3TunnelPktsRxdARP=bWagL2tpv3TunnelPktsRxdARP, bWagNumCurrentSubscribers=bWagNumCurrentSubscribers, bWagSubscriberHomeDhcpDynSubsDeleted=bWagSubscriberHomeDhcpDynSubsDeleted, bWagL2tpv3TunnelPktsRxdDNS=bWagL2tpv3TunnelPktsRxdDNS, bWagNumPreAuthenticatedSubscribers=bWagNumPreAuthenticatedSubscribers, bWagDHCPv6Table=bWagDHCPv6Table, bWagDhcpDiscoverAckIntervalLast=bWagDhcpDiscoverAckIntervalLast, bWagNumL2tpv3TunnelsDeletedDuetoLIFDown=bWagNumL2tpv3TunnelsDeletedDuetoLIFDown, bWagNumCurrentTunnels=bWagNumCurrentTunnels, bWagSubscriberRedirectionsByAcl=bWagSubscriberRedirectionsByAcl, bWagSubscriberHomeDhcpStaticSubsDeleted=bWagSubscriberHomeDhcpStaticSubsDeleted, bWagCgnatProfileUsedIPAddresses=bWagCgnatProfileUsedIPAddresses, bWagCgnatUnauthPeriodIpTable=bWagCgnatUnauthPeriodIpTable, bWagRadiusAuthLatencyLast=bWagRadiusAuthLatencyLast, bWagNumCurrentHomeSubscribers=bWagNumCurrentHomeSubscribers, bWagIpSystemStatsMIBObjects=bWagIpSystemStatsMIBObjects, bWagL2tpv3TunnelPktsDecapsulated=bWagL2tpv3TunnelPktsDecapsulated, bWagL2tpv3TunnelPktsEncapsulated=bWagL2tpv3TunnelPktsEncapsulated, bWagCgnatAuthIpAddrLowThresholdReached=bWagCgnatAuthIpAddrLowThresholdReached, bWagDHCPv6RequestReplyLatencyMin=bWagDHCPv6RequestReplyLatencyMin, bWagCgnatPublicIPAddress=bWagCgnatPublicIPAddress, bWagDsLiteProfileUsedIPAddresses=bWagDsLiteProfileUsedIPAddresses, bWagDHCPv6IntervalDuration=bWagDHCPv6IntervalDuration, bWagCgnatTotalPortBlocksPerSubscriber=bWagCgnatTotalPortBlocksPerSubscriber, bWagSubscriberAuthenticationsCountVia8021x=bWagSubscriberAuthenticationsCountVia8021x, bWagCgnatPeriodIpInterval=bWagCgnatPeriodIpInterval, bWagTunnelIntervalDuration=bWagTunnelIntervalDuration, bWagNumCurrTunnHomeAndSpWiFi=bWagNumCurrTunnHomeAndSpWiFi, bWagIpv6IfStatsOutFragOKs=bWagIpv6IfStatsOutFragOKs, bWagRadiusIntervalDuration=bWagRadiusIntervalDuration, bWagIpSystemStatsReasmFails=bWagIpSystemStatsReasmFails, bWagNumCurrentHomeDhcpStatSubs=bWagNumCurrentHomeDhcpStatSubs, bWagRadiusDMLatencyAvg=bWagRadiusDMLatencyAvg, bWagCgnatProfileSubscribers=bWagCgnatProfileSubscribers, bWagTunnelDeletedDueToMacResFail=bWagTunnelDeletedDueToMacResFail, bWagSubscriberDeletionsCount=bWagSubscriberDeletionsCount, bWagIpv6IfStatsReasmReqds=bWagIpv6IfStatsReasmReqds, bWagMHNProfileStatsEntry=bWagMHNProfileStatsEntry, bWagTunnelPktsRxdTCPSyn=bWagTunnelPktsRxdTCPSyn, bWagCgnatAuthPortRisingThresholdCrossedSubCount=bWagCgnatAuthPortRisingThresholdCrossedSubCount, bWagDhcpRequestAckLatencyMax=bWagDhcpRequestAckLatencyMax, bWagVrgApiIpAddrUsedLowThreshold=bWagVrgApiIpAddrUsedLowThreshold, bWagVrgApiIpAddrUsedHighThreshold=bWagVrgApiIpAddrUsedHighThreshold, bWagRadiusDMLatencyMax=bWagRadiusDMLatencyMax, bWagRadiusTable=bWagRadiusTable, bWagTunnelNotifObjects=bWagTunnelNotifObjects, bWagTunnelTunnelsLookupNotFound=bWagTunnelTunnelsLookupNotFound, bWagNumCurrent8021xSubscribers=bWagNumCurrent8021xSubscribers, bWagRadiusEntry=bWagRadiusEntry, bWagDhcpEntry=bWagDhcpEntry, bWagCgnatUnauthPortBlockMaxUtil=bWagCgnatUnauthPortBlockMaxUtil, bWagCgnatProfileTotalPortBlocks=bWagCgnatProfileTotalPortBlocks, bWagNumOfUnAuthSubscribersWithPolicy=bWagNumOfUnAuthSubscribersWithPolicy, bWagCgnatProfilePortBlocksUsed=bWagCgnatProfilePortBlocksUsed, bWagCgnatSubscriberMac=bWagCgnatSubscriberMac, bWagCgnatMIBObjects=bWagCgnatMIBObjects, bWagVrgApiIpAddrUsedHighThresholdReached=bWagVrgApiIpAddrUsedHighThresholdReached, bWagDsLiteProfileReservedIPAddresses=bWagDsLiteProfileReservedIPAddresses, bWagCgnatPeriodIpIndex=bWagCgnatPeriodIpIndex, bWagSubscriberSpWifiActivationsCount=bWagSubscriberSpWifiActivationsCount, bWagNumUnauthenticatedSubscribers=bWagNumUnauthenticatedSubscribers, bWagMHNProfileStatsTable=bWagMHNProfileStatsTable, bWagNumCurrentSSIDS2aSubscribersPmip6=bWagNumCurrentSSIDS2aSubscribersPmip6, bWagNumCurrentTunnHomeAccept=bWagNumCurrentTunnHomeAccept, bWagTunnelPktsDecapsulatedGRE=bWagTunnelPktsDecapsulatedGRE, bWagCgnatProfileNATIPPoolGroup=bWagCgnatProfileNATIPPoolGroup, bWagCgnatProfileReservedIPAddresses=bWagCgnatProfileReservedIPAddresses, bWagTunnelPktsRxdTCPFinAck=bWagTunnelPktsRxdTCPFinAck, bWagUpstreamProcessingLatencyAvg=bWagUpstreamProcessingLatencyAvg, bWagSubscriberAuthenticationsCountViaSingleStatic=bWagSubscriberAuthenticationsCountViaSingleStatic, bWagRadiusAccessRejectReceived=bWagRadiusAccessRejectReceived, bWagDhcpRequestAckLatencyMin=bWagDhcpRequestAckLatencyMin, bWagTunnelPktsRxdHTTPGetReq=bWagTunnelPktsRxdHTTPGetReq, bWagDhcpOfferRequestIntervalAvg=bWagDhcpOfferRequestIntervalAvg, bWagCgnatUnauthIPAddress=bWagCgnatUnauthIPAddress, bWagTunnelPktsRxdGREPayloadTEB=bWagTunnelPktsRxdGREPayloadTEB, bWagDHCPv6SolicitReplyIntervalAvg=bWagDHCPv6SolicitReplyIntervalAvg, bWagNumCurrentSPWiFiSubscribers=bWagNumCurrentSPWiFiSubscribers, bWagTunnelCountHighThreshold=bWagTunnelCountHighThreshold, bWagRadiusAcctResponseReceived=bWagRadiusAcctResponseReceived, bWagMHNProfileTotalPoolIPAddresses=bWagMHNProfileTotalPoolIPAddresses, bWagDownstreamProcessingLatencyAvg=bWagDownstreamProcessingLatencyAvg, bWagVrgApiIpAddressesExhausted=bWagVrgApiIpAddressesExhausted, bWagNumCurrentRoutedSubnetSubscribers=bWagNumCurrentRoutedSubnetSubscribers, bWagIpv6IfStatsReasmFails=bWagIpv6IfStatsReasmFails, bWagSubscriberAPMobilityOccurencesCount=bWagSubscriberAPMobilityOccurencesCount, bWagTunnelStatsInterval=bWagTunnelStatsInterval, bWagDhcpTPSHigh=bWagDhcpTPSHigh, bWagNumRedirectedSubscribersCount=bWagNumRedirectedSubscribersCount, bWagTunnelCreatedStatically=bWagTunnelCreatedStatically, bWagSubscriberHomePubStaticSubsDeleted=bWagSubscriberHomePubStaticSubsDeleted, bWagTunnelTable=bWagTunnelTable, bWagRadiusAcctLatencyMin=bWagRadiusAcctLatencyMin, bWagNumCurrentL2tpv3TunnelsIPv4=bWagNumCurrentL2tpv3TunnelsIPv4, bWagMHNProfileStatsIndex=bWagMHNProfileStatsIndex, bWagCgnatIPStatsTable=bWagCgnatIPStatsTable, bWagNumL2tpv3TunnelsDeleted=bWagNumL2tpv3TunnelsDeleted, bWagProcessingLatencyMIBObjects=bWagProcessingLatencyMIBObjects, bWagNumCurrentTunnelsDSLite=bWagNumCurrentTunnelsDSLite, bWagCgnatTotalPoolIPAddresses=bWagCgnatTotalPoolIPAddresses, bWagDhcpOfferRequestIntervalLast=bWagDhcpOfferRequestIntervalLast, bWagSubscriberDeletionsByDMCount=bWagSubscriberDeletionsByDMCount, bWagTunnelDeletedByCommand=bWagTunnelDeletedByCommand, bWagTunnelCountLowThreshold=bWagTunnelCountLowThreshold, bWagCgnatPortBlocksUsedHighThreshold=bWagCgnatPortBlocksUsedHighThreshold, bWagNumTunnelsSchedDeletion=bWagNumTunnelsSchedDeletion, bWagDhcpTable=bWagDhcpTable, bWagL2tpv3TunnelDeletedDueToLifDown=bWagL2tpv3TunnelDeletedDueToLifDown, bWagCgnatProfileMaxIPAddresses=bWagCgnatProfileMaxIPAddresses, bWagTunnelMaxSupported=bWagTunnelMaxSupported, bWagCgnatPortBlocksUsedHighThresholdReached=bWagCgnatPortBlocksUsedHighThresholdReached, bWagCgnatProfilePortBlocksReused=bWagCgnatProfilePortBlocksReused, bWagDsLiteProfileTotalPoolIPAddresses=bWagDsLiteProfileTotalPoolIPAddresses, bWagCgnatUnauthIPStatsIndex=bWagCgnatUnauthIPStatsIndex, bWagDhcpDiscoverAckIntervalAvg=bWagDhcpDiscoverAckIntervalAvg, bWagNumCurrentTunnelsIPv6=bWagNumCurrentTunnelsIPv6, bWagDhcpIntervalDuration=bWagDhcpIntervalDuration, bDSLitePortBlocksInUse=bDSLitePortBlocksInUse, bWagDhcpDiscoverReceived=bWagDhcpDiscoverReceived, bWagSubscriberDsLiteActivationsCount=bWagSubscriberDsLiteActivationsCount, bWagVrgApiIpAddrUsedLowThresholdReached=bWagVrgApiIpAddrUsedLowThresholdReached, bWagCgnatAuthIpAddrUsedHighThreshold=bWagCgnatAuthIpAddrUsedHighThreshold, bWagNumTunnelsCreatedStatically=bWagNumTunnelsCreatedStatically, benuWagStatsMIB=benuWagStatsMIB, bWagTunnelDeletedDueToLifDown=bWagTunnelDeletedDueToLifDown, bWagRadiusAuthLatencyMax=bWagRadiusAuthLatencyMax, bWagCgnatAuthIpAddressesExhausted=bWagCgnatAuthIpAddressesExhausted, bWagTunnelPktsRxdDHCP=bWagTunnelPktsRxdDHCP, bDSLiteTunnelsUsingThreePortBlocks=bDSLiteTunnelsUsingThreePortBlocks, bWagNumPreAuthHomeSubscribers=bWagNumPreAuthHomeSubscribers, bWagDhcpDiscoverOfferLatencyMin=bWagDhcpDiscoverOfferLatencyMin, bWagSubscriberHomeActivationsCount=bWagSubscriberHomeActivationsCount)
mibBuilder.exportSymbols("BENU-WAG-STATS-MIB", bWagCgnatIPPortBlocksUsed=bWagCgnatIPPortBlocksUsed, bWagRadiusCoALatencyMin=bWagRadiusCoALatencyMin, bWagDHCPv6StatsInterval=bWagDHCPv6StatsInterval, bWagRadiusCoALatencyLast=bWagRadiusCoALatencyLast, bWagL2tpv3TunnelDeleted=bWagL2tpv3TunnelDeleted, bWagDHCPv6SolicitReplyIntervalMin=bWagDHCPv6SolicitReplyIntervalMin, bWagNumTunnelsDeleted=bWagNumTunnelsDeleted, bWagCgnatIPSubActiveCount=bWagCgnatIPSubActiveCount, bWagDhcpAckSent=bWagDhcpAckSent, bWagVRGApiIPoolIPAddresses=bWagVRGApiIPoolIPAddresses, bWagCgnatIPPacketsDropped=bWagCgnatIPPacketsDropped, bWagDsLiteProfileStatsEntry=bWagDsLiteProfileStatsEntry, bWagCgnatUnauthIPSubActiveCount=bWagCgnatUnauthIPSubActiveCount, bWagDsLiteProfileName=bWagDsLiteProfileName, bWagStatsNotifications=bWagStatsNotifications, bWagRadiusAuthLatencyMin=bWagRadiusAuthLatencyMin, bWagTunnelMaxCountReached=bWagTunnelMaxCountReached, bWagSubscriberSessionTimeoutAuthVia8021x=bWagSubscriberSessionTimeoutAuthVia8021x, bWagNumTunnelsInactiveDeleted=bWagNumTunnelsInactiveDeleted, bWagDsLiteProfileMaxSubscribers=bWagDsLiteProfileMaxSubscribers, bWagTunnelCreatedDynamically=bWagTunnelCreatedDynamically, bWagSubscriberRedirectionsCount=bWagSubscriberRedirectionsCount, bWagNumSubsWithPrivateIPAddress=bWagNumSubsWithPrivateIPAddress, bWagSubscriberMIBObjects=bWagSubscriberMIBObjects, bWagNumL2tpv3TunnelsDeletedByCommand=bWagNumL2tpv3TunnelsDeletedByCommand, bWagSubscriberHomeUserStaticSubsDeleted=bWagSubscriberHomeUserStaticSubsDeleted, bWagCgnatPoolGroupType=bWagCgnatPoolGroupType, bWagCgnatUnauthIPPortBlocksFree=bWagCgnatUnauthIPPortBlocksFree, bWagDhcpTPSLowReached=bWagDhcpTPSLowReached, bWagVrgApiNotifObjects=bWagVrgApiNotifObjects, bWagCgnatAuthIpAddrHighThresholdReached=bWagCgnatAuthIpAddrHighThresholdReached, bWagMHNProfileNATIPPoolGroup=bWagMHNProfileNATIPPoolGroup, bWagDhcpDiscoverAckIntervalMin=bWagDhcpDiscoverAckIntervalMin, bWagDhcpNackSent=bWagDhcpNackSent, bWagNumSubsAuthenticatedWithIPv6Prefix=bWagNumSubsAuthenticatedWithIPv6Prefix, bWagCgnatPeriodIpEntry=bWagCgnatPeriodIpEntry, bDSLiteTunnelsUsingOnePortBlock=bDSLiteTunnelsUsingOnePortBlock, bWagTunnelDeletedDueToB2bSubsDelete=bWagTunnelDeletedDueToB2bSubsDelete, bWagCgnatProfileTotalPoolIPAddresses=bWagCgnatProfileTotalPoolIPAddresses, bWagProcessingLatencyNotifObjects=bWagProcessingLatencyNotifObjects, bWagRadiusCoALatencyAvg=bWagRadiusCoALatencyAvg, bWagCgnatProfileStatsIndex=bWagCgnatProfileStatsIndex, bWagNumTunnelsCreatedDynamically=bWagNumTunnelsCreatedDynamically, bWagCgnatPoolGroupReservedIPAddresses=bWagCgnatPoolGroupReservedIPAddresses, bWagTunnelDeleted=bWagTunnelDeleted, bWagCgnatUnauthIPPortBlocksUsed=bWagCgnatUnauthIPPortBlocksUsed, bWagTunnelPktsTxdTCPFin=bWagTunnelPktsTxdTCPFin, bWagL2tpv3TunnelPktsRxdDHCP=bWagL2tpv3TunnelPktsRxdDHCP, bWagCgnatUnauthIPPortBlocksReused=bWagCgnatUnauthIPPortBlocksReused, bWagTunnelPktsRxdARP=bWagTunnelPktsRxdARP, bWagDhcpTPSTable=bWagDhcpTPSTable, bWagSubscriberThrottledCount=bWagSubscriberThrottledCount, bWagDhcpDiscoverOfferLatencyLast=bWagDhcpDiscoverOfferLatencyLast, bWagTunnelDeletedDueToReject=bWagTunnelDeletedDueToReject, bWagCgnatAuthPortUtilEntry=bWagCgnatAuthPortUtilEntry, bWagNumPreAuthenticatedSubscribersS2aPmip6=bWagNumPreAuthenticatedSubscribersS2aPmip6, bWagDHCPv6SolicitAdvLatencyLast=bWagDHCPv6SolicitAdvLatencyLast, bWagDhcpDiscoverOfferLatencyAvg=bWagDhcpDiscoverOfferLatencyAvg, bWagDHCPv6ReplySent=bWagDHCPv6ReplySent, bWagDhcpTPS=bWagDhcpTPS, bWagDHCPv6SolicitAdvLatencyMax=bWagDHCPv6SolicitAdvLatencyMax, bWagDsLiteNotifObjects=bWagDsLiteNotifObjects, bWagTunnelStatsMIBObjects=bWagTunnelStatsMIBObjects, bWagCgnatPoolGroupStatsTable=bWagCgnatPoolGroupStatsTable, bWagNumTunnelsSubsAssociated=bWagNumTunnelsSubsAssociated, bWagCgnatProfileName=bWagCgnatProfileName, bWagCgnatIPPortBlocksFree=bWagCgnatIPPortBlocksFree, bWagNumCurrentL2tpv3TunnelsSpWiFi=bWagNumCurrentL2tpv3TunnelsSpWiFi, bWagRadiusCoALatencyMax=bWagRadiusCoALatencyMax, bWagCgnatAuthSubscriberMac=bWagCgnatAuthSubscriberMac, bWagDhcpOfferRequestIntervalMin=bWagDhcpOfferRequestIntervalMin, bWagIpSystemStatsReasmReqds=bWagIpSystemStatsReasmReqds, bWagRadiusAcctLatencyAvg=bWagRadiusAcctLatencyAvg, bWagDHCPv6AdvRequestIntervalLast=bWagDHCPv6AdvRequestIntervalLast, bWagSubscriberStatsInterval=bWagSubscriberStatsInterval, bWagRadiusStatsInterval=bWagRadiusStatsInterval, PYSNMP_MODULE_ID=benuWagStatsMIB, bWagCgnatPublicIPAddressType=bWagCgnatPublicIPAddressType, bWagCgnatAuthIpAddrUsedLowThreshold=bWagCgnatAuthIpAddrUsedLowThreshold, bWagTunnelPktsRxdGRE=bWagTunnelPktsRxdGRE, bWagCgnatAuthSubscriberPortsUtil=bWagCgnatAuthSubscriberPortsUtil, bWagRadiusAccessAcceptReceived=bWagRadiusAccessAcceptReceived, bWagDhcpTPSInterval=bWagDhcpTPSInterval, bWagNumTunnelsDeletedDuetoLIFDown=bWagNumTunnelsDeletedDuetoLIFDown, bWagDHCPv6AdvRequestIntervalMin=bWagDHCPv6AdvRequestIntervalMin, bWagCgnatPoolGroupName=bWagCgnatPoolGroupName, bWagTunnelPktsRxdDNS=bWagTunnelPktsRxdDNS, bWagDHCPv6RequestReceived=bWagDHCPv6RequestReceived, bWagRadiusAccessRequestSent=bWagRadiusAccessRequestSent, bWagPolicyIndex=bWagPolicyIndex, bWagSubscriberSessionTimeoutPreauthCount=bWagSubscriberSessionTimeoutPreauthCount, bWagNumTunnelsDeletedByCommand=bWagNumTunnelsDeletedByCommand, bWagCgnatPortBlockMaxUtil=bWagCgnatPortBlockMaxUtil, bWagTunnelPktsRxdHTTP=bWagTunnelPktsRxdHTTP, bWagDsLiteProfileStatsIndex=bWagDsLiteProfileStatsIndex, bWagDhcpNotifObjects=bWagDhcpNotifObjects, bWagCgnatUnauthIPAddressType=bWagCgnatUnauthIPAddressType, bWagDHCPv6AdvRequestIntervalMax=bWagDHCPv6AdvRequestIntervalMax, bWagNumAuthSubsWithPublicIPAddress=bWagNumAuthSubsWithPublicIPAddress, bWagNumOfSubscribersWithPolicy=bWagNumOfSubscribersWithPolicy, bWagMHNProfileTotalPortBlocks=bWagMHNProfileTotalPortBlocks, bWagDhcpOfferSent=bWagDhcpOfferSent, bWagTunnelPktsTxdTCPAck2Fin=bWagTunnelPktsTxdTCPAck2Fin, bWagDownstreamProcessingLatencyMax=bWagDownstreamProcessingLatencyMax, bWagRadiusAcctLatencyMax=bWagRadiusAcctLatencyMax, bWagDHCPv6SolicitReceived=bWagDHCPv6SolicitReceived, bWagCgnatProfileIPPoolGroup=bWagCgnatProfileIPPoolGroup, bWagCgnatPortBlockMinUtil=bWagCgnatPortBlockMinUtil, bWagDhcpRequestAckLatencyAvg=bWagDhcpRequestAckLatencyAvg, bWagNumL2tpv3TunnelsInactiveDeleted=bWagNumL2tpv3TunnelsInactiveDeleted, bWagDownstreamProcessingLatencyMin=bWagDownstreamProcessingLatencyMin, bWagDhcpStatsInterval=bWagDhcpStatsInterval, bWagL2tpv3TunnelCreatedDynamically=bWagL2tpv3TunnelCreatedDynamically, bWagCgnatPortBlocksUsedLowThreshold=bWagCgnatPortBlocksUsedLowThreshold, bWagDhcpTPSEntry=bWagDhcpTPSEntry, bWagSubscriberActivationsCount=bWagSubscriberActivationsCount, bWagNumCurrentHomePubStatSubs=bWagNumCurrentHomePubStatSubs, bWagSubscriberDroppedByLicenseManagerCount=bWagSubscriberDroppedByLicenseManagerCount, bWagSubscriberIdleTimeoutCount=bWagSubscriberIdleTimeoutCount, bWagDsLiteProfileMaxTunnels=bWagDsLiteProfileMaxTunnels, bWagSubscriberNotifObjects=bWagSubscriberNotifObjects, bDSLiteTunnelsUsingTwoPortBlocks=bDSLiteTunnelsUsingTwoPortBlocks, bWagNumCurrentDSLiteSubscribers=bWagNumCurrentDSLiteSubscribers, bWagNumCurrentHomeUserStatSubs=bWagNumCurrentHomeUserStatSubs, bWagPolicyEntry=bWagPolicyEntry, bWagCgnatUnauthPeriodIpInterval=bWagCgnatUnauthPeriodIpInterval, bWagDHCPv6AdvRequestIntervalAvg=bWagDHCPv6AdvRequestIntervalAvg)
