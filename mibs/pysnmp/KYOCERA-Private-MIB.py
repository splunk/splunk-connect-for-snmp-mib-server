#
# PySNMP MIB module KYOCERA-Private-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KYOCERA-Private-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:54:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
hrDeviceIndex, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrDeviceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, Counter64, Integer32, enterprises, ModuleIdentity, Gauge32, Unsigned32, iso, MibIdentifier, ObjectIdentity, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "Counter64", "Integer32", "enterprises", "ModuleIdentity", "Gauge32", "Unsigned32", "iso", "MibIdentifier", "ObjectIdentity", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
kyocera = MibIdentifier((1, 3, 6, 1, 4, 1, 1347))
kcPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43))
kcprtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 5))
kcprtOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 9))
kcprtMarker = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 10))
kcprtChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 14))
kcprtMemoryResource = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 20))
kcprtGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1), )
if mibBuilder.loadTexts: kcprtGeneralTable.setStatus('mandatory')
kcprtGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: kcprtGeneralEntry.setStatus('mandatory')
kcprtGeneralModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtGeneralModelName.setStatus('mandatory')
kcprtOptionDescription = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOptionDescription.setStatus('mandatory')
kcprtKpdlLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtKpdlLevel.setStatus('mandatory')
kcprtSystemUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtSystemUpTime.setStatus('mandatory')
kcprtBinNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtBinNumber.setStatus('mandatory')
kcprtCardSlotCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtCardSlotCapacity.setStatus('mandatory')
kcprtRomSlotCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtRomSlotCapacity.setStatus('mandatory')
kcprtSimmSlotCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtSimmSlotCapacity.setStatus('mandatory')
kcprtSimmSlotUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtSimmSlotUsed.setStatus('mandatory')
kcprtOriginalMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOriginalMemorySize.setStatus('mandatory')
kcprtTotalMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtTotalMemorySize.setStatus('mandatory')
kcprtUserMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtUserMemorySize.setStatus('mandatory')
kcprtVirtualMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSupported", 0), ("support", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtVirtualMemory.setStatus('mandatory')
kcprtPageMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("size-128KB", 1), ("size-256KB", 2), ("size-512KB", 3), ("size-A4orLetter", 4), ("size-Legal", 5), ("size-doubleA4orLetter", 6), ("size-doubleLegal", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtPageMemorySize.setStatus('mandatory')
kcprtHostBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBufferSize.setStatus('mandatory')
kcprtHostBuffer1stRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBuffer1stRate.setStatus('mandatory')
kcprtHostBuffer2ndRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBuffer2ndRate.setStatus('mandatory')
kcprtHostBuffer3rdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBuffer3rdRate.setStatus('mandatory')
kcprtHostBufferOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("automatic", 0), ("fixed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBufferOption.setStatus('mandatory')
kcprtBufferXoffLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtBufferXoffLevel.setStatus('mandatory')
kcprtBufferXonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtBufferXonLevel.setStatus('mandatory')
kcprtFFTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtFFTimeout.setStatus('mandatory')
kcprtSleepTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtSleepTimer.setStatus('mandatory')
kcprtWakeupStatusPage = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtWakeupStatusPage.setStatus('mandatory')
kcprtOnlineControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offLine", 0), ("onLine", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtOnlineControl.setStatus('mandatory')
kcprtCopyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtCopyCount.setStatus('mandatory')
kcprtCpuTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4), )
if mibBuilder.loadTexts: kcprtCpuTable.setStatus('mandatory')
kcprtCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtCpuIndex"))
if mibBuilder.loadTexts: kcprtCpuEntry.setStatus('mandatory')
kcprtCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtCpuIndex.setStatus('mandatory')
kcprtCpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtCpuName.setStatus('mandatory')
kcprtCpuClock = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtCpuClock.setStatus('mandatory')
kcprtCpuRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("engine", 0), ("controller", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtCpuRole.setStatus('mandatory')
kcprtFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFirmwareVersion.setStatus('mandatory')
kcprtFirmwareUpdata = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFirmwareUpdata.setStatus('mandatory')
kcprtOutputTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1), )
if mibBuilder.loadTexts: kcprtOutputTable.setStatus('mandatory')
kcprtOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtOutputIndex"))
if mibBuilder.loadTexts: kcprtOutputEntry.setStatus('mandatory')
kcprtOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtOutputIndex.setStatus('mandatory')
kcprtOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sorter", 0), ("collator", 1), ("stacker", 2), ("mailbox", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtOutputMode.setStatus('mandatory')
kcprtOutputMultiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("id-specific", 1), ("if-specific", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtOutputMultiMode.setStatus('mandatory')
kcprtOutputGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputGroupNumber.setStatus('mandatory')
kcprtOutputDefaultGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtOutputDefaultGroup.setStatus('mandatory')
kcprtOutputBulkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notFull", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputBulkStatus.setStatus('mandatory')
kcprtOutputTrayMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputTrayMaxCapacity.setStatus('mandatory')
kcprtTrayGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2), )
if mibBuilder.loadTexts: kcprtTrayGroupTable.setStatus('mandatory')
kcprtTrayGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtOutputIndex"), (0, "KYOCERA-Private-MIB", "kcprtTrayGroupIndex"))
if mibBuilder.loadTexts: kcprtTrayGroupEntry.setStatus('mandatory')
kcprtTrayGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtTrayGroupIndex.setStatus('mandatory')
kcprtTrayGroupBeginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtTrayGroupBeginIndex.setStatus('mandatory')
kcprtTrayGroupEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtTrayGroupEndIndex.setStatus('mandatory')
kcprtOutputTrayTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3), )
if mibBuilder.loadTexts: kcprtOutputTrayTable.setStatus('mandatory')
kcprtOutputTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtOutputIndex"), (0, "KYOCERA-Private-MIB", "kcprtOutputTrayIndex"))
if mibBuilder.loadTexts: kcprtOutputTrayEntry.setStatus('mandatory')
kcprtOutputTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtOutputTrayIndex.setStatus('mandatory')
kcprtOutputTrayOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputTrayOrder.setStatus('mandatory')
kcprtOutputTrayGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputTrayGroup.setStatus('mandatory')
kcprtOutputTrayCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputTrayCount.setStatus('mandatory')
kcprtMarkerTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1), )
if mibBuilder.loadTexts: kcprtMarkerTable.setStatus('mandatory')
kcprtMarkerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "prtMarkerIndex"))
if mibBuilder.loadTexts: kcprtMarkerEntry.setStatus('mandatory')
kcprtMarkerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtMarkerIndex.setStatus('mandatory')
kcprtMarkerKirLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("offOrNotSupport", 0), ("light", 1), ("medium", 2), ("dark", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtMarkerKirLevel.setStatus('mandatory')
kcprtMarkerEcoprintLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("offOrNotSupport", 0), ("light", 1), ("medium", 2), ("dark", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtMarkerEcoprintLevel.setStatus('mandatory')
kcprtMarkerAddressabilityFeedDirDeclared = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtMarkerAddressabilityFeedDirDeclared.setStatus('mandatory')
kcprtMarkerAddressabilityXFeedDirDeclared = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtMarkerAddressabilityXFeedDirDeclared.setStatus('mandatory')
kcprtMarkerAddressablilityFeedDirChosen = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMarkerAddressablilityFeedDirChosen.setStatus('mandatory')
kcprtMarkerAddressablilityXFeedDirChosen = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMarkerAddressablilityXFeedDirChosen.setStatus('mandatory')
kcprtChannelTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 14, 1), )
if mibBuilder.loadTexts: kcprtChannelTable.setStatus('mandatory')
kcprtChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 14, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtChannelIndex"))
if mibBuilder.loadTexts: kcprtChannelEntry.setStatus('mandatory')
kcprtChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtChannelIndex.setStatus('mandatory')
kcprtChannelFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("through", 0), ("hexDump", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtChannelFunction.setStatus('mandatory')
kcprtMemoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1), )
if mibBuilder.loadTexts: kcprtMemoryDeviceTable.setStatus('mandatory')
kcprtMemoryDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtMemoryDeviceIndex"))
if mibBuilder.loadTexts: kcprtMemoryDeviceEntry.setStatus('mandatory')
kcprtMemoryDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtMemoryDeviceIndex.setStatus('mandatory')
kcprtMemoryDeviceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("icCardSlot-A", 0), ("icCardslot-B", 1), ("optionROMsocket", 2), ("residentFont", 3), ("downloadArea", 4), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceLocation.setStatus('mandatory')
kcprtMemoryDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("rom", 0), ("flash", 1), ("sram", 2), ("dram", 3), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceType.setStatus('mandatory')
kcprtMemoryDeviceTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceTotalSize.setStatus('mandatory')
kcprtMemoryDeviceUsedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceUsedSize.setStatus('mandatory')
kcprtMemoryDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("readyReadWrite", 0), ("readyReadOnly", 1), ("notAccessible", 2), ("lowBattery", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceStatus.setStatus('mandatory')
kcprtPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2), )
if mibBuilder.loadTexts: kcprtPartitionTable.setStatus('mandatory')
kcprtPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtPartitionIndex"))
if mibBuilder.loadTexts: kcprtPartitionEntry.setStatus('mandatory')
kcprtPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtPartitionIndex.setStatus('mandatory')
kcprtPartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionSize.setStatus('mandatory')
kcprtPartitionLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionLocation.setStatus('mandatory')
kcprtPartitionResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("void", 0), ("macro", 3), ("hostData", 4), ("programData", 5), ("messageData", 6), ("fontData", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionResourceType.setStatus('mandatory')
kcprtPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionName.setStatus('mandatory')
kcprtPartitionLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notLoaded", 0), ("loaded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionLoad.setStatus('mandatory')
kcprtMacroDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3), )
if mibBuilder.loadTexts: kcprtMacroDataTable.setStatus('mandatory')
kcprtMacroDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtMacroDataIndex"))
if mibBuilder.loadTexts: kcprtMacroDataEntry.setStatus('mandatory')
kcprtMacroDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtMacroDataIndex.setStatus('mandatory')
kcprtMacroDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataName.setStatus('mandatory')
kcprtMacroDataID = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataID.setStatus('mandatory')
kcprtMacroDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("prescribe", 1), ("pcl", 2), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataType.setStatus('mandatory')
kcprtMacroDataAutoLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onWithInitialize", 1), ("onWithoutInitialize", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataAutoLoad.setStatus('mandatory')
kcprtMacroDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataLocation.setStatus('mandatory')
kcprtMacroDataAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataAttribute.setStatus('mandatory')
kcprtHostDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4), )
if mibBuilder.loadTexts: kcprtHostDataTable.setStatus('mandatory')
kcprtHostDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtHostDataIndex"))
if mibBuilder.loadTexts: kcprtHostDataEntry.setStatus('mandatory')
kcprtHostDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtHostDataIndex.setStatus('mandatory')
kcprtHostDataName = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtHostDataName.setStatus('mandatory')
kcprtHostDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtHostDataLocation.setStatus('mandatory')
kcprtHostDataAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtHostDataAttribute.setStatus('mandatory')
kcprtProgramDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5), )
if mibBuilder.loadTexts: kcprtProgramDataTable.setStatus('mandatory')
kcprtProgramDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtProgramDataIndex"))
if mibBuilder.loadTexts: kcprtProgramDataEntry.setStatus('mandatory')
kcprtProgramDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtProgramDataIndex.setStatus('mandatory')
kcprtProgramDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtProgramDataName.setStatus('mandatory')
kcprtProgramDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("emulation", 0), ("prescribe", 1), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtProgramDataType.setStatus('mandatory')
kcprtProgramDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtProgramDataLocation.setStatus('mandatory')
kcprtProgramDataAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtProgramDataAttribute.setStatus('mandatory')
kcprtMessageDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6), )
if mibBuilder.loadTexts: kcprtMessageDataTable.setStatus('mandatory')
kcprtMessageDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtMessageDataIndex"))
if mibBuilder.loadTexts: kcprtMessageDataEntry.setStatus('mandatory')
kcprtMessageDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtMessageDataIndex.setStatus('mandatory')
kcprtMessageDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMessageDataName.setStatus('mandatory')
kcprtMessageDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMessageDataLocation.setStatus('mandatory')
kcprtMessageDataAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMessageDataAttribute.setStatus('mandatory')
kcprtFontDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7), )
if mibBuilder.loadTexts: kcprtFontDataTable.setStatus('mandatory')
kcprtFontDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtFontDataIndex"))
if mibBuilder.loadTexts: kcprtFontDataEntry.setStatus('mandatory')
kcprtFontDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtFontDataIndex.setStatus('mandatory')
kcprtTypeFaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtTypeFaceName.setStatus('mandatory')
kcprtFontID = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFontID.setStatus('mandatory')
kcprtFontType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("bitmap", 0), ("scalable", 1), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFontType.setStatus('mandatory')
kcprtFontLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFontLocation.setStatus('mandatory')
kcprtFontAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFontAttribute.setStatus('mandatory')
mibBuilder.exportSymbols("KYOCERA-Private-MIB", kcprtProgramDataEntry=kcprtProgramDataEntry, kcprtTrayGroupEndIndex=kcprtTrayGroupEndIndex, kcprtMacroDataAutoLoad=kcprtMacroDataAutoLoad, kcprtMessageDataEntry=kcprtMessageDataEntry, kcprtPartitionResourceType=kcprtPartitionResourceType, kcprtMemoryDeviceEntry=kcprtMemoryDeviceEntry, kcprtSystemUpTime=kcprtSystemUpTime, kcprtOnlineControl=kcprtOnlineControl, kcprtMarkerAddressabilityFeedDirDeclared=kcprtMarkerAddressabilityFeedDirDeclared, kcprtOutputTable=kcprtOutputTable, kcprtProgramDataAttribute=kcprtProgramDataAttribute, kcprtFontType=kcprtFontType, kcprtMemoryDeviceType=kcprtMemoryDeviceType, kcprtMarker=kcprtMarker, kcprtTotalMemorySize=kcprtTotalMemorySize, kcprtCpuEntry=kcprtCpuEntry, kcprtCopyCount=kcprtCopyCount, kcprtFirmwareUpdata=kcprtFirmwareUpdata, kcprtMemoryDeviceTotalSize=kcprtMemoryDeviceTotalSize, kcprtHostDataLocation=kcprtHostDataLocation, kcprtWakeupStatusPage=kcprtWakeupStatusPage, kcprtOutput=kcprtOutput, kcprtPageMemorySize=kcprtPageMemorySize, kcprtOutputIndex=kcprtOutputIndex, kcprtBinNumber=kcprtBinNumber, kcprtHostBuffer3rdRate=kcprtHostBuffer3rdRate, kcprtMacroDataType=kcprtMacroDataType, kcprtHostDataTable=kcprtHostDataTable, kcprtChannel=kcprtChannel, kcprtHostBuffer1stRate=kcprtHostBuffer1stRate, kcprtProgramDataTable=kcprtProgramDataTable, kcprtHostBufferOption=kcprtHostBufferOption, kcprtSimmSlotUsed=kcprtSimmSlotUsed, kcprtSleepTimer=kcprtSleepTimer, kcprtHostDataAttribute=kcprtHostDataAttribute, kcprtFontLocation=kcprtFontLocation, kcprtPartitionName=kcprtPartitionName, kcprtMarkerEcoprintLevel=kcprtMarkerEcoprintLevel, kcprtMarkerAddressablilityFeedDirChosen=kcprtMarkerAddressablilityFeedDirChosen, kcprtPartitionTable=kcprtPartitionTable, kcprtOutputBulkStatus=kcprtOutputBulkStatus, kcprtUserMemorySize=kcprtUserMemorySize, kcprtMemoryDeviceUsedSize=kcprtMemoryDeviceUsedSize, kcprtTrayGroupEntry=kcprtTrayGroupEntry, kcprtMessageDataAttribute=kcprtMessageDataAttribute, kcprtOutputTrayIndex=kcprtOutputTrayIndex, kcprtOriginalMemorySize=kcprtOriginalMemorySize, kcprtMacroDataTable=kcprtMacroDataTable, kcprtPartitionIndex=kcprtPartitionIndex, kcprtTrayGroupIndex=kcprtTrayGroupIndex, kcprtOptionDescription=kcprtOptionDescription, kcprtMarkerIndex=kcprtMarkerIndex, kcprtFontDataTable=kcprtFontDataTable, kcprtFontDataIndex=kcprtFontDataIndex, kcprtFontID=kcprtFontID, kcprtMarkerKirLevel=kcprtMarkerKirLevel, kcprtCpuClock=kcprtCpuClock, kcprtFontDataEntry=kcprtFontDataEntry, kcprtProgramDataType=kcprtProgramDataType, kcprtCpuRole=kcprtCpuRole, kcprtPartitionLoad=kcprtPartitionLoad, kcprtBufferXoffLevel=kcprtBufferXoffLevel, kcprtTypeFaceName=kcprtTypeFaceName, kcprtMessageDataIndex=kcprtMessageDataIndex, kcprtPartitionLocation=kcprtPartitionLocation, kcprtMacroDataName=kcprtMacroDataName, kcprtMacroDataAttribute=kcprtMacroDataAttribute, kyocera=kyocera, kcprtOutputMode=kcprtOutputMode, kcprtMarkerAddressabilityXFeedDirDeclared=kcprtMarkerAddressabilityXFeedDirDeclared, kcprtMarkerAddressablilityXFeedDirChosen=kcprtMarkerAddressablilityXFeedDirChosen, kcprtMemoryDeviceIndex=kcprtMemoryDeviceIndex, kcprtCpuTable=kcprtCpuTable, kcprtChannelFunction=kcprtChannelFunction, kcprtOutputTrayCount=kcprtOutputTrayCount, kcprtMessageDataLocation=kcprtMessageDataLocation, kcprtMemoryDeviceLocation=kcprtMemoryDeviceLocation, kcprtOutputTrayOrder=kcprtOutputTrayOrder, kcprtMessageDataTable=kcprtMessageDataTable, kcprtSimmSlotCapacity=kcprtSimmSlotCapacity, kcprtProgramDataIndex=kcprtProgramDataIndex, kcprtProgramDataLocation=kcprtProgramDataLocation, kcprtOutputTrayMaxCapacity=kcprtOutputTrayMaxCapacity, kcprtTrayGroupTable=kcprtTrayGroupTable, kcprtHostBuffer2ndRate=kcprtHostBuffer2ndRate, kcprtMemoryDeviceTable=kcprtMemoryDeviceTable, kcprtPartitionEntry=kcprtPartitionEntry, kcprtKpdlLevel=kcprtKpdlLevel, kcprtOutputGroupNumber=kcprtOutputGroupNumber, kcprtPartitionSize=kcprtPartitionSize, kcPrinter=kcPrinter, kcprtMemoryResource=kcprtMemoryResource, kcprtOutputDefaultGroup=kcprtOutputDefaultGroup, kcprtGeneral=kcprtGeneral, kcprtTrayGroupBeginIndex=kcprtTrayGroupBeginIndex, kcprtHostBufferSize=kcprtHostBufferSize, kcprtMacroDataLocation=kcprtMacroDataLocation, kcprtOutputTrayEntry=kcprtOutputTrayEntry, kcprtHostDataEntry=kcprtHostDataEntry, kcprtFFTimeout=kcprtFFTimeout, kcprtOutputMultiMode=kcprtOutputMultiMode, kcprtGeneralEntry=kcprtGeneralEntry, kcprtMacroDataID=kcprtMacroDataID, kcprtMarkerTable=kcprtMarkerTable, kcprtBufferXonLevel=kcprtBufferXonLevel, kcprtOutputTrayGroup=kcprtOutputTrayGroup, kcprtCpuName=kcprtCpuName, kcprtFirmwareVersion=kcprtFirmwareVersion, kcprtGeneralModelName=kcprtGeneralModelName, kcprtGeneralTable=kcprtGeneralTable, kcprtCardSlotCapacity=kcprtCardSlotCapacity, kcprtCpuIndex=kcprtCpuIndex, kcprtOutputTrayTable=kcprtOutputTrayTable, kcprtFontAttribute=kcprtFontAttribute, kcprtChannelEntry=kcprtChannelEntry, kcprtMemoryDeviceStatus=kcprtMemoryDeviceStatus, kcprtChannelIndex=kcprtChannelIndex, kcprtHostDataName=kcprtHostDataName, kcprtRomSlotCapacity=kcprtRomSlotCapacity, kcprtMarkerEntry=kcprtMarkerEntry, kcprtMessageDataName=kcprtMessageDataName, kcprtVirtualMemory=kcprtVirtualMemory, kcprtMacroDataEntry=kcprtMacroDataEntry, kcprtMacroDataIndex=kcprtMacroDataIndex, kcprtChannelTable=kcprtChannelTable, kcprtHostDataIndex=kcprtHostDataIndex, kcprtOutputEntry=kcprtOutputEntry, kcprtProgramDataName=kcprtProgramDataName)
