#
# PySNMP MIB module Wellfleet-TFTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-TFTP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Gauge32, ModuleIdentity, IpAddress, iso, ObjectIdentity, MibIdentifier, Unsigned32, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Gauge32", "ModuleIdentity", "IpAddress", "iso", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Counter32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfInternet, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfInternet")
wfTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6))
wfTftpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpDisable.setStatus('mandatory')
wfTftpDefaultVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 65, 100, 101, 200, 201, 300, 301, 400, 401, 500, 501, 600, 601, 700, 701, 800, 801, 900, 901, 1000, 1001, 1100, 1101, 1200, 1201, 1300, 1301, 1400, 1401))).clone(namedValues=NamedValues(("volume1", 1), ("volume2", 2), ("volume3", 3), ("volume4", 4), ("volume5", 5), ("volume6", 6), ("volume7", 7), ("volume8", 8), ("volume9", 9), ("volume10", 10), ("volume11", 11), ("volume12", 12), ("volume13", 13), ("volume14", 14), ("volumea", 65), ("volume1a", 100), ("volume1b", 101), ("volume2a", 200), ("volume2b", 201), ("volume3a", 300), ("volume3b", 301), ("volume4a", 400), ("volume4b", 401), ("volume5a", 500), ("volume5b", 501), ("volume6a", 600), ("volume6b", 601), ("volume7a", 700), ("volume7b", 701), ("volume8a", 800), ("volume8b", 801), ("volume9a", 900), ("volume9b", 901), ("volume10a", 1000), ("volume10b", 1001), ("volume11a", 1100), ("volume11b", 1101), ("volume12a", 1200), ("volume12b", 1201), ("volume13a", 1300), ("volume13b", 1301), ("volume14a", 1400), ("volume14b", 1401))).clone('volume2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpDefaultVolume.setStatus('mandatory')
wfTftpXfers = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpXfers.setStatus('mandatory')
wfTftpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpTimeOut.setStatus('mandatory')
wfTftpCloseTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpCloseTimeOut.setStatus('mandatory')
wfTftpRexmit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpRexmit.setStatus('mandatory')
wfTftpIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("lowdelay", 2))).clone('lowdelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpIpTos.setStatus('obsolete')
wfTftpInFiles = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpInFiles.setStatus('mandatory')
wfTftpOutFiles = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpOutFiles.setStatus('mandatory')
wfTftpInWRQ = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpInWRQ.setStatus('mandatory')
wfTftpOutWRQ = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpOutWRQ.setStatus('mandatory')
wfTftpInRRQ = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpInRRQ.setStatus('mandatory')
wfTftpOutRRQ = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpOutRRQ.setStatus('mandatory')
wfTftpRexmitPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpRexmitPkts.setStatus('mandatory')
wfTftpInErr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpInErr.setStatus('mandatory')
wfTftpOutErr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpOutErr.setStatus('mandatory')
wfTftpAborts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpAborts.setStatus('mandatory')
wfTftpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpDelete.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-TFTP-MIB", wfTftpDisable=wfTftpDisable, wfTftpXfers=wfTftpXfers, wfTftpInWRQ=wfTftpInWRQ, wfTftpAborts=wfTftpAborts, wfTftpDelete=wfTftpDelete, wfTftpInRRQ=wfTftpInRRQ, wfTftpOutErr=wfTftpOutErr, wfTftpRexmit=wfTftpRexmit, wfTftpInFiles=wfTftpInFiles, wfTftpInErr=wfTftpInErr, wfTftpCloseTimeOut=wfTftpCloseTimeOut, wfTftpOutFiles=wfTftpOutFiles, wfTftpTimeOut=wfTftpTimeOut, wfTftpIpTos=wfTftpIpTos, wfTftpRexmitPkts=wfTftpRexmitPkts, wfTftpDefaultVolume=wfTftpDefaultVolume, wfTftpOutWRQ=wfTftpOutWRQ, wfTftpOutRRQ=wfTftpOutRRQ, wfTftp=wfTftp)
