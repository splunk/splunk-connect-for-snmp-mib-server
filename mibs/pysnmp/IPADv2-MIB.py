#
# PySNMP MIB module IPADv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPADv2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
t1e1AISCount, serialDteDTRAlarmStatus, t1e1OOFSCount, ddsNetOOFCount, ddsNetOOSCount, t1e1CSSCount, t1e1SESCount, t1e1RASCount, t1e1ESCount, t1e1UASCount, t1e1BPVSCount, ddsNetLOSCount, ddsNetFDLCount, t1e1LOSSCount, ddsNetBPVCount = mibBuilder.importSymbols("DS8200v2-MIB", "t1e1AISCount", "serialDteDTRAlarmStatus", "t1e1OOFSCount", "ddsNetOOFCount", "ddsNetOOSCount", "t1e1CSSCount", "t1e1SESCount", "t1e1RASCount", "t1e1ESCount", "t1e1UASCount", "t1e1BPVSCount", "ddsNetLOSCount", "ddsNetFDLCount", "t1e1LOSSCount", "ddsNetBPVCount")
hbu, verilink = mibBuilder.importSymbols("DS8200v2-TC-MIB", "hbu", "verilink")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, Counter32, ModuleIdentity, Bits, NotificationType, iso, IpAddress, Integer32, MibIdentifier, Gauge32, enterprises, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Counter32", "ModuleIdentity", "Bits", "NotificationType", "iso", "IpAddress", "Integer32", "MibIdentifier", "Gauge32", "enterprises", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ipad = ModuleIdentity((1, 3, 6, 1, 4, 1, 321, 100, 1))
if mibBuilder.loadTexts: ipad.setLastUpdated('0011210000Z')
if mibBuilder.loadTexts: ipad.setOrganization('Verilink Corporation')
ipadFrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 1))
ipadService = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 2))
ipadChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 3))
ipadDLCI = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 4))
ipadEndpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 5))
ipadUser = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 6))
ipadPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 7))
ipadModem = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 8))
ipadSvcAware = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 9))
ipadPktSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 10))
ipadTrapDest = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 11))
ipadMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 12))
ipadRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 13))
ipadSoftKey = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 14))
ipadTCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 15))
ipadTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 999))
ipadTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0))
ipadSCADAConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 16))
ipadSCADAStats = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 17))
ipadSCADADevLst = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 18))
ipadDS0Config = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 19))
ipadDS0Hist24 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 20))
ipadDS0Hist30 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 21))
ipadHDLCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 22))
ipadHDLCHist24 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 23))
ipadHDLCHist30 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 24))
ipadAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 25))
ipadNat = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 26))
ipadDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 27))
ipadBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 28))
ipadSmtp = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 29))
ipadEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 30))
ipadAutoLearnDS0 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 31))
ipadUnitAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 32))
ipadTFTPDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 33))
ipadDataLineMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 34))
ipadOrigPing = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 35))
ipadFrPortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1), )
if mibBuilder.loadTexts: ipadFrPortTable.setStatus('current')
ipadFrPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadFrPortService"))
if mibBuilder.loadTexts: ipadFrPortTableEntry.setStatus('current')
ipadFrPortService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortService.setStatus('current')
ipadFrPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortActive.setStatus('current')
ipadFrPortLMIType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ccitt", 2), ("ansi", 3), ("lmi", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortLMIType.setStatus('current')
ipadFrPortLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sourcing", 2), ("monitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortLMIMode.setStatus('current')
ipadFrPortRxInvAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortRxInvAlmThreshold.setStatus('current')
ipadFrPortRxInvAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortRxInvAlmAlarm.setStatus('current')
ipadFrPortTxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortTxAlmThreshold.setStatus('current')
ipadFrPortTxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortTxAlmAlarm.setStatus('current')
ipadFrPortRxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortRxAlmThreshold.setStatus('current')
ipadFrPortRxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortRxAlmAlarm.setStatus('current')
ipadFrPortAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frPortAlarmResetOther", 1), ("frPortAlarmResetClearAlarms", 2), ("frPortAlarmResetClearStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortAlarmReset.setStatus('current')
ipadServiceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1), )
if mibBuilder.loadTexts: ipadServiceTable.setStatus('current')
ipadServiceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadServiceIndex"))
if mibBuilder.loadTexts: ipadServiceTableEntry.setStatus('current')
ipadServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadServiceIndex.setStatus('current')
ipadServiceifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100))).clone(namedValues=NamedValues(("disabled", 0), ("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6), ("auxiliary", 7), ("network3", 8), ("atmCES", 9), ("modem", 10), ("virtual", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceifIndex.setStatus('current')
ipadServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 1), ("tdm", 2), ("ppp", 3), ("pppMonitor", 4), ("frameRelay", 5), ("frameRelayMonitor", 6), ("ip", 7), ("serial", 8), ("tty", 9), ("scada", 10), ("parallelIO", 11), ("atm", 12), ("hdlcPPP", 13), ("atmCES", 14), ("modem", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceType.setStatus('current')
ipadServicePair = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServicePair.setStatus('current')
ipadServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("down", 3), ("physicalUp", 4), ("protocolUp", 5), ("dead", 6), ("changed", 7), ("training", 8), ("connecting", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadServiceStatus.setStatus('current')
ipadServiceAddService = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("addService", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceAddService.setStatus('current')
ipadServiceDeleteService = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceDeleteService.setStatus('current')
ipadChannelTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1), )
if mibBuilder.loadTexts: ipadChannelTable.setStatus('current')
ipadChannelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadChannelifIndex"), (0, "IPADv2-MIB", "ipadChannelIndex"))
if mibBuilder.loadTexts: ipadChannelTableEntry.setStatus('current')
ipadChannelifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelifIndex.setStatus('current')
ipadChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelIndex.setStatus('current')
ipadChannelService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelService.setStatus('current')
ipadChannelPair = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelPair.setStatus('current')
ipadChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("rate56", 2), ("rate64", 3), ("rate8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelRate.setStatus('current')
ipadChannelIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelIdlePattern.setStatus('current')
ipadDLCITable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1), )
if mibBuilder.loadTexts: ipadDLCITable.setStatus('current')
ipadDLCITableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDLCIservice"), (0, "IPADv2-MIB", "ipadDLCInumber"))
if mibBuilder.loadTexts: ipadDLCITableEntry.setStatus('current')
ipadDLCIservice = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIservice.setStatus('current')
ipadDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCInumber.setStatus('current')
ipadDLCIactive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3), ("pending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIactive.setStatus('current')
ipadDLCIcongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIcongestion.setStatus('current')
ipadDLCIremote = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremote.setStatus('current')
ipadDLCIremoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremoteUnit.setStatus('current')
ipadDLCIremoteEquipActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("sosAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremoteEquipActive.setStatus('current')
ipadDLCIencapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rfc1490", 2), ("proprietary", 3), ("rfc1490withEncryption", 4), ("rfc1490withCompression", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIencapsulation.setStatus('current')
ipadDLCIproprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("ipx", 3), ("ethertype", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIproprietary.setStatus('current')
ipadDLCIpropOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIpropOffset.setStatus('current')
ipadDLCIinBand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIinBand.setStatus('current')
ipadDLCICIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCICIR.setStatus('current')
ipadDLCIBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIBe.setStatus('current')
ipadDLCIminBC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIminBC.setStatus('current')
ipadDLCIrxMon = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIrxMon.setStatus('current')
ipadDLCIdEctrl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIdEctrl.setStatus('current')
ipadDLCIenableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIenableDelay.setStatus('current')
ipadDLCItxExCIRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCItxExCIRThreshold.setStatus('current')
ipadDLCItxExCIRAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCItxExCIRAlarm.setStatus('current')
ipadDLCItxExBeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCItxExBeThreshold.setStatus('current')
ipadDLCItxExBeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCItxExBeAlarm.setStatus('current')
ipadDLCIrxCongThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIrxCongThreshold.setStatus('current')
ipadDLCIrxCongAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIrxCongAlarm.setStatus('current')
ipadDLCIrxBECNinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("alarmCondition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIrxBECNinCIR.setStatus('current')
ipadDLCIUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIUASThreshold.setStatus('current')
ipadDLCIUASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIUASAlarm.setStatus('current')
ipadDLCIAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dlciAlarmResetOther", 1), ("dlciAlarmResetClearAlarms", 2), ("dlciAlarmResetClearStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIAlarmReset.setStatus('current')
ipadDLCIRoundTripDelaySize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIRoundTripDelaySize.setStatus('current')
ipadDLCIRoundTripDelayRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIRoundTripDelayRate.setStatus('current')
ipadDLCIRemoteFramesOfferedWithinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteFramesOfferedWithinCIR.setStatus('current')
ipadDLCIRemoteFramesOfferedWithinBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteFramesOfferedWithinBE.setStatus('current')
ipadDLCIFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIFramesReceived.setStatus('current')
ipadDLCIRemoteDataOfferedWithinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteDataOfferedWithinCIR.setStatus('current')
ipadDLCIRemoteDataOfferedWithinBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteDataOfferedWithinBE.setStatus('current')
ipadDLCIDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIDataReceived.setStatus('current')
ipadDLCIRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteIPAddress.setStatus('current')
ipadDLCICompressionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabledAndNegotiated", 3), ("enabledButNotNegotiated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionStatus.setStatus('current')
ipadDLCICompressionTxOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionTxOctetsIn.setStatus('current')
ipadDLCICompressionTxOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionTxOctetsOut.setStatus('current')
ipadDLCICompressionRxOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionRxOctetsIn.setStatus('current')
ipadDLCICompressionRxOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionRxOctetsOut.setStatus('current')
ipadDLCILastChange = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCILastChange.setStatus('current')
ipadEndpointTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1), )
if mibBuilder.loadTexts: ipadEndpointTable.setStatus('current')
ipadEndpointTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadEndpointIndex"))
if mibBuilder.loadTexts: ipadEndpointTableEntry.setStatus('current')
ipadEndpointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadEndpointIndex.setStatus('current')
ipadEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointName.setStatus('current')
ipadEndpointService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointService.setStatus('current')
ipadEndpointDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointDLCInumber.setStatus('current')
ipadEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("frLocal", 2), ("frSwitched", 3), ("ipRoute", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointType.setStatus('current')
ipadEndpointForward = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointForward.setStatus('current')
ipadEndpointBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointBackup.setStatus('current')
ipadEndpointRefSLP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRefSLP.setStatus('current')
ipadEndpointRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRemoteIpAddr.setStatus('current')
ipadEndpointRemoteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRemoteIpMask.setStatus('current')
ipadEndpointAddEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointAddEndpoint.setStatus('current')
ipadEndpointDeleteEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointDeleteEndpoint.setStatus('current')
ipadEndpointLastChange = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadEndpointLastChange.setStatus('current')
ipadUserTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1), )
if mibBuilder.loadTexts: ipadUserTable.setStatus('current')
ipadUserTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadUserIndex"))
if mibBuilder.loadTexts: ipadUserTableEntry.setStatus('current')
ipadUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIndex.setStatus('current')
ipadUserFilterByDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByDLCI.setStatus('current')
ipadUserService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserService.setStatus('current')
ipadUserDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserDLCI.setStatus('current')
ipadUserFilterByIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByIPAddress.setStatus('current')
ipadUserIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPAddress.setStatus('current')
ipadUserIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPMask.setStatus('current')
ipadUserFilterByIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByIPPort.setStatus('current')
ipadUserIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 7, 11, 17, 20, 21, 23, 25, 31, 37, 42, 53, 66, 69, 70, 79, 80, 88, 92, 101, 107, 109, 110, 111, 113, 119, 137, 138, 139, 153, 161, 162, 163, 164, 169, 179, 194, 201, 202, 204, 206, 213, 395, 396, 444, 494, 533, 540, 541, 600, 749))).clone(namedValues=NamedValues(("rje", 5), ("echo", 7), ("systat", 11), ("qotd", 17), ("ftpdata", 20), ("ftp", 21), ("telnet", 23), ("smtp", 25), ("msgauth", 31), ("time", 37), ("nameserver", 42), ("domain", 53), ("sqlnet", 66), ("tftp", 69), ("gopher", 70), ("finger", 79), ("http", 80), ("kerberos", 88), ("npp", 92), ("hostname", 101), ("rtelnet", 107), ("pop2", 109), ("pop3", 110), ("sunrpc", 111), ("auth", 113), ("nntp", 119), ("netbiosns", 137), ("netbiosdgm", 138), ("netbiosssn", 139), ("sgmp", 153), ("snmp", 161), ("snmptrap", 162), ("cmipman", 163), ("cmipagent", 164), ("send", 169), ("bgp", 179), ("irc", 194), ("atrtmp", 201), ("atnbp", 202), ("atecho", 204), ("atzis", 206), ("ipx", 213), ("netcp", 395), ("netwareip", 396), ("snpp", 444), ("povray", 494), ("netwall", 533), ("uucp", 540), ("uucprlogin", 541), ("ipcserver", 600), ("kerberosadm", 749)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPPort.setStatus('current')
ipadUserTxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserTxAlmThreshold.setStatus('current')
ipadUserTxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserTxAlmAlarm.setStatus('current')
ipadUserAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userAlarmResetOther", 1), ("userAlarmResetClearAlarms", 2), ("userAlarmResetClearStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserAlarmReset.setStatus('current')
ipadUserVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserVpi.setStatus('current')
ipadUserVci = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserVci.setStatus('current')
ipadUserFilterByVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByVpiVci.setStatus('current')
ipadUserIPStatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatTimeRemaining.setStatus('current')
ipadUserIPStatTimeDuration = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatTimeDuration.setStatus('current')
ipadUserIPStatStartTime = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatStartTime.setStatus('current')
ipadUserIPStatRequestedReportSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatRequestedReportSize.setStatus('current')
ipadUserIPStatGrantedReportSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatGrantedReportSize.setStatus('current')
ipadUserIPStatReportNumber = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatReportNumber.setStatus('current')
ipadUserIPStatDiscardType = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byTime", 1), ("byFrames", 2), ("byOctets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatDiscardType.setStatus('current')
ipadPPPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1), )
if mibBuilder.loadTexts: ipadPPPCfgTable.setStatus('current')
ipadPPPCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadPPPCfgService"))
if mibBuilder.loadTexts: ipadPPPCfgTableEntry.setStatus('current')
ipadPPPCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPCfgService.setStatus('current')
ipadPPPCfgDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("direct", 2), ("dialup", 3), ("demanddial", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgDialMode.setStatus('current')
ipadPPPCfgInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgInactivityTimer.setStatus('current')
ipadPPPCfgNegotiationInit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegotiationInit.setStatus('current')
ipadPPPCfgMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgMRU.setStatus('current')
ipadPPPCfgACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgACCM.setStatus('current')
ipadPPPCfgNegMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegMRU.setStatus('current')
ipadPPPCfgNegACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegACCM.setStatus('current')
ipadPPPCfgNegMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegMagic.setStatus('current')
ipadPPPCfgNegCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegCompression.setStatus('current')
ipadPPPCfgNegAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegAddress.setStatus('current')
ipadPPPCfgNegPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegPAP.setStatus('current')
ipadPPPCfgNegCHAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegCHAP.setStatus('current')
ipadPPPCfgAllowPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAllowPAP.setStatus('current')
ipadPPPCfgAllowCHAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAllowCHAP.setStatus('current')
ipadPPPCfgPAPUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPAPUsername.setStatus('current')
ipadPPPCfgPAPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPAPPassword.setStatus('current')
ipadPPPCfgCHAPUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgCHAPUsername.setStatus('current')
ipadPPPCfgCHAPSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgCHAPSecret.setStatus('current')
ipadPPPCfgPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPortIpAddress.setStatus('current')
ipadPPPCfgPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPeerIpAddress.setStatus('current')
ipadPPPCfgNegIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIpAddress.setStatus('current')
ipadPPPCfgNegIPCPCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIPCPCompression.setStatus('current')
ipadPPPCfgSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgSubnetMask.setStatus('current')
ipadPPPCfgAuthChallengeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAuthChallengeInterval.setStatus('current')
ipadPPPCfgEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgEndpoint.setStatus('current')
ipadPPPCfgNegIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIpMask.setStatus('current')
ipadPPPCfgNegDNSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegDNSAddress.setStatus('current')
ipadPPPPAPTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2), )
if mibBuilder.loadTexts: ipadPPPPAPTable.setStatus('current')
ipadPPPPAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadPPPPAPTableIndex"))
if mibBuilder.loadTexts: ipadPPPPAPTableEntry.setStatus('current')
ipadPPPPAPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPPAPTableIndex.setStatus('current')
ipadPPPPAPTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPPAPTableUsername.setStatus('current')
ipadPPPPAPTablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPPAPTablePassword.setStatus('current')
ipadPPPCHAPTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3), )
if mibBuilder.loadTexts: ipadPPPCHAPTable.setStatus('current')
ipadPPPCHAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadPPPCHAPTableIndex"))
if mibBuilder.loadTexts: ipadPPPCHAPTableEntry.setStatus('current')
ipadPPPCHAPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPCHAPTableIndex.setStatus('current')
ipadPPPCHAPTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCHAPTableUsername.setStatus('current')
ipadPPPCHAPTableSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCHAPTableSecret.setStatus('current')
ipadModemDialTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1), )
if mibBuilder.loadTexts: ipadModemDialTable.setStatus('current')
ipadModemDialTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadModemDialTableIndex"))
if mibBuilder.loadTexts: ipadModemDialTableEntry.setStatus('current')
ipadModemDialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDialTableIndex.setStatus('current')
ipadModemDialDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialDataIndex.setStatus('current')
ipadModemDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialNumber.setStatus('current')
ipadModemDialAbortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialAbortTimer.setStatus('current')
ipadModemDialRedialAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialRedialAttempts.setStatus('current')
ipadModemDialDelayBeforeRedial = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialDelayBeforeRedial.setStatus('current')
ipadModemDialLoginScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialLoginScript.setStatus('current')
ipadModemDialUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialUsername.setStatus('current')
ipadModemDialPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialPassword.setStatus('current')
ipadModemDialChallengeScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialChallengeScript.setStatus('current')
ipadModemDialAnswerRings = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialAnswerRings.setStatus('current')
ipadModemDialCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("setupNow", 2), ("dialNow", 3), ("answerNow", 4), ("disconnectNow", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCommand.setStatus('current')
ipadModemDialStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("idle", 3), ("dialing", 4), ("answering", 5), ("negotiating", 6), ("online", 7), ("disconnecting", 8), ("error", 9), ("setup", 10), ("awaitingCallback", 11), ("dialWait", 12), ("ringing", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDialStatus.setStatus('current')
ipadModemDialSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("password", 3), ("callback", 4), ("callbackVerify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialSecurity.setStatus('current')
ipadModemDialCallbackRedialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCallbackRedialDelay.setStatus('current')
ipadModemDialCallbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCallbackTimeout.setStatus('current')
ipadModemDialCallbackChalScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCallbackChalScript.setStatus('current')
ipadModemDialCallbackRspScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCallbackRspScript.setStatus('current')
ipadModemDataTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2), )
if mibBuilder.loadTexts: ipadModemDataTable.setStatus('current')
ipadModemDataTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadModemDataTableIndex"))
if mibBuilder.loadTexts: ipadModemDataTableEntry.setStatus('current')
ipadModemDataTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDataTableIndex.setStatus('current')
ipadModemDataModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataModemName.setStatus('current')
ipadModemDataSetupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript.setStatus('current')
ipadModemDataDialingScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataDialingScript.setStatus('current')
ipadModemDataAnswerScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataAnswerScript.setStatus('current')
ipadModemDataHangupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataHangupScript.setStatus('current')
ipadModemDataSyncScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSyncScript.setStatus('current')
ipadModemDataSyncMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("sync", 3), ("v80", 4), ("rfc1662", 5), ("v80crc", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSyncMethod.setStatus('current')
ipadModemDataSetupScript2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript2.setStatus('current')
ipadModemDataSetupScript3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript3.setStatus('current')
ipadModemDataSetupScript4 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript4.setStatus('current')
ipadModemDataSetupScript5 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript5.setStatus('current')
ipadDbuTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3), )
if mibBuilder.loadTexts: ipadDbuTable.setStatus('current')
ipadDbuTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDbuIndex"))
if mibBuilder.loadTexts: ipadDbuTableEntry.setStatus('current')
ipadDbuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDbuIndex.setStatus('current')
ipadDbuOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("automatic", 3), ("automaticDaily", 4), ("forceBackup", 5), ("testOriginate", 6), ("testAnswer", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuOperation.setStatus('current')
ipadDbuMonitoredifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuMonitoredifIndex.setStatus('current')
ipadDbuActivator1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("any", 3), ("carrier", 4), ("es", 5), ("ses", 6), ("uas", 7), ("los", 8), ("cs", 9), ("bpv", 10), ("oof", 11), ("ais", 12), ("ras", 13), ("oos", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuActivator1.setStatus('current')
ipadDbuActivator2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("any", 3), ("carrier", 4), ("es", 5), ("ses", 6), ("uas", 7), ("los", 8), ("cs", 9), ("bpv", 10), ("oof", 11), ("ais", 12), ("ras", 13), ("oos", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuActivator2.setStatus('current')
ipadDbuRevertDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuRevertDelay.setStatus('current')
ipadDbuTrapDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuTrapDelay.setStatus('current')
ipadDbuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("standby", 3), ("disallowed", 4), ("dialing", 5), ("answering", 6), ("negotiating", 7), ("awaitingCallback", 8), ("active", 9), ("disconnecting", 10), ("testWaiting", 11), ("testPassed", 12), ("testFailed", 13), ("error", 14), ("setup", 15), ("dialWait", 16), ("ringing", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDbuStatus.setStatus('current')
ipadDbuTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuTrap.setStatus('current')
ipadDbuDailyTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4), )
if mibBuilder.loadTexts: ipadDbuDailyTable.setStatus('current')
ipadDbuDailyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDbuDailyIndex"), (0, "IPADv2-MIB", "ipadDbuDailyDayOfWeek"))
if mibBuilder.loadTexts: ipadDbuDailyTableEntry.setStatus('current')
ipadDbuDailyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDbuDailyIndex.setStatus('current')
ipadDbuDailyDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDbuDailyDayOfWeek.setStatus('current')
ipadDbuDailyStart = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("hour00", 1), ("hour01", 2), ("hour02", 3), ("hour03", 4), ("hour04", 5), ("hour05", 6), ("hour06", 7), ("hour07", 8), ("hour08", 9), ("hour09", 10), ("hour10", 11), ("hour11", 12), ("hour12", 13), ("hour13", 14), ("hour14", 15), ("hour15", 16), ("hour16", 17), ("hour17", 18), ("hour18", 19), ("hour19", 20), ("hour20", 21), ("hour21", 22), ("hour22", 23), ("hour23", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuDailyStart.setStatus('current')
ipadDbuDailyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("disable", 1), ("hour01", 2), ("hour02", 3), ("hour03", 4), ("hour04", 5), ("hour05", 6), ("hour06", 7), ("hour07", 8), ("hour08", 9), ("hour09", 10), ("hour10", 11), ("hour11", 12), ("hour12", 13), ("hour13", 14), ("hour14", 15), ("hour15", 16), ("hour16", 17), ("hour17", 18), ("hour18", 19), ("hour19", 20), ("hour20", 21), ("hour21", 22), ("hour22", 23), ("hour23", 24), ("hour24", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuDailyLength.setStatus('current')
ipadFrPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1), )
if mibBuilder.loadTexts: ipadFrPortStatsTable.setStatus('current')
ipadFrPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadFrPortStatsService"), (0, "IPADv2-MIB", "ipadFrPortStatsPeriod"))
if mibBuilder.loadTexts: ipadFrPortStatsEntry.setStatus('current')
ipadFrPortStatsService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsService.setStatus('current')
ipadFrPortStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("portStatsSummary", 1), ("portStatsCurrent", 2), ("portStatsperiod1", 3), ("portStatsperiod2", 4), ("portStatsperiod3", 5), ("portStatsperiod4", 6), ("portStatsperiod5", 7), ("portStatsperiod6", 8), ("portStatsperiod7", 9), ("portStatsperiod8", 10), ("portStatsperiod9", 11), ("portStatsperiod10", 12), ("portStatsperiod11", 13), ("portStatsperiod12", 14), ("portStatsperiod13", 15), ("portStatsperiod14", 16), ("portStatsperiod15", 17), ("portStatsperiod16", 18), ("portStatsperiod17", 19), ("portStatsperiod18", 20), ("portStatsperiod19", 21), ("portStatsperiod20", 22), ("portStatsperiod21", 23), ("portStatsperiod22", 24), ("portStatsperiod23", 25), ("portStatsperiod24", 26), ("portStatsperiod25", 27), ("portStatsperiod26", 28), ("portStatsperiod27", 29), ("portStatsperiod28", 30), ("portStatsperiod29", 31), ("portStatsperiod30", 32), ("portStatsperiod31", 33), ("portStatsperiod32", 34), ("portStatsperiod33", 35), ("portStatsperiod34", 36), ("portStatsperiod35", 37), ("portStatsperiod36", 38), ("portStatsperiod37", 39), ("portStatsperiod38", 40), ("portStatsperiod39", 41), ("portStatsperiod40", 42), ("portStatsperiod41", 43), ("portStatsperiod42", 44), ("portStatsperiod43", 45), ("portStatsperiod44", 46), ("portStatsperiod45", 47), ("portStatsperiod46", 48), ("portStatsperiod47", 49), ("portStatsperiod48", 50), ("portStatsperiod49", 51), ("portStatsperiod50", 52), ("portStatsperiod51", 53), ("portStatsperiod52", 54), ("portStatsperiod53", 55), ("portStatsperiod54", 56), ("portStatsperiod55", 57), ("portStatsperiod56", 58), ("portStatsperiod57", 59), ("portStatsperiod58", 60), ("portStatsperiod59", 61), ("portStatsperiod60", 62), ("portStatsperiod61", 63), ("portStatsperiod62", 64), ("portStatsperiod63", 65), ("portStatsperiod64", 66), ("portStatsperiod65", 67), ("portStatsperiod66", 68), ("portStatsperiod67", 69), ("portStatsperiod68", 70), ("portStatsperiod69", 71), ("portStatsperiod70", 72), ("portStatsperiod71", 73), ("portStatsperiod72", 74), ("portStatsperiod73", 75), ("portStatsperiod74", 76), ("portStatsperiod75", 77), ("portStatsperiod76", 78), ("portStatsperiod77", 79), ("portStatsperiod78", 80), ("portStatsperiod79", 81), ("portStatsperiod80", 82), ("portStatsperiod81", 83), ("portStatsperiod82", 84), ("portStatsperiod83", 85), ("portStatsperiod84", 86), ("portStatsperiod85", 87), ("portStatsperiod86", 88), ("portStatsperiod87", 89), ("portStatsperiod88", 90), ("portStatsperiod89", 91), ("portStatsperiod90", 92), ("portStatsperiod91", 93), ("portStatsperiod92", 94), ("portStatsperiod93", 95), ("portStatsperiod94", 96), ("portStatsperiod95", 97), ("portStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsPeriod.setStatus('current')
ipadFrPortStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxFrames.setStatus('current')
ipadFrPortStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxFrames.setStatus('current')
ipadFrPortStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxOctets.setStatus('current')
ipadFrPortStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxOctets.setStatus('current')
ipadFrPortStatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtFrames.setStatus('current')
ipadFrPortStatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtFrames.setStatus('current')
ipadFrPortStatsTxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtOctets.setStatus('current')
ipadFrPortStatsRxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtOctets.setStatus('current')
ipadFrPortStatsRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxFECN.setStatus('current')
ipadFrPortStatsRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxBECN.setStatus('current')
ipadFrPortStatsRxInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInvalid.setStatus('current')
ipadFrPortStatsTxStatInq = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxStatInq.setStatus('current')
ipadFrPortStatsRxStatInq = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxStatInq.setStatus('current')
ipadFrPortStatsTxStatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxStatResp.setStatus('current')
ipadFrPortStatsRxStatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxStatResp.setStatus('current')
ipadFrPortStatsRxInvLMI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInvLMI.setStatus('current')
ipadFrPortStatsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsPeak.setStatus('current')
ipadFrPortStatsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsAverage.setStatus('current')
ipadFrPortStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTimeStamp.setStatus('current')
ipadFrPortStatsTxAvgPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxAvgPercent.setStatus('current')
ipadFrPortStatsTxMaxPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMaxPercent.setStatus('current')
ipadFrPortStatsTxInstantPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxInstantPercent.setStatus('current')
ipadFrPortStatsTx20PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx20PercentSec.setStatus('current')
ipadFrPortStatsTx40PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx40PercentSec.setStatus('current')
ipadFrPortStatsTx60PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx60PercentSec.setStatus('current')
ipadFrPortStatsTx80PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx80PercentSec.setStatus('current')
ipadFrPortStatsTx100PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx100PercentSec.setStatus('current')
ipadFrPortStatsRxAvgPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxAvgPercent.setStatus('current')
ipadFrPortStatsRxMaxPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMaxPercent.setStatus('current')
ipadFrPortStatsRxInstantPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInstantPercent.setStatus('current')
ipadFrPortStatsRx20PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx20PercentSec.setStatus('current')
ipadFrPortStatsRx40PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx40PercentSec.setStatus('current')
ipadFrPortStatsRx60PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx60PercentSec.setStatus('current')
ipadFrPortStatsRx80PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx80PercentSec.setStatus('current')
ipadFrPortStatsRx100PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx100PercentSec.setStatus('current')
ipadFrPortStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsValidIntervals.setStatus('current')
ipadDLCIstatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2), )
if mibBuilder.loadTexts: ipadDLCIstatsTable.setStatus('current')
ipadDLCIstatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDLCIstatsService"), (0, "IPADv2-MIB", "ipadDLCIstatsDLCI"), (0, "IPADv2-MIB", "ipadDLCIstatsPeriod"))
if mibBuilder.loadTexts: ipadDLCIstatsEntry.setStatus('current')
ipadDLCIstatsService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsService.setStatus('current')
ipadDLCIstatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDLCI.setStatus('current')
ipadDLCIstatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("dlciStatsSummary", 1), ("dlciStatsCurrent", 2), ("dlciStatsperiod1", 3), ("dlciStatsperiod2", 4), ("dlciStatsperiod3", 5), ("dlciStatsperiod4", 6), ("dlciStatsperiod5", 7), ("dlciStatsperiod6", 8), ("dlciStatsperiod7", 9), ("dlciStatsperiod8", 10), ("dlciStatsperiod9", 11), ("dlciStatsperiod10", 12), ("dlciStatsperiod11", 13), ("dlciStatsperiod12", 14), ("dlciStatsperiod13", 15), ("dlciStatsperiod14", 16), ("dlciStatsperiod15", 17), ("dlciStatsperiod16", 18), ("dlciStatsperiod17", 19), ("dlciStatsperiod18", 20), ("dlciStatsperiod19", 21), ("dlciStatsperiod20", 22), ("dlciStatsperiod21", 23), ("dlciStatsperiod22", 24), ("dlciStatsperiod23", 25), ("dlciStatsperiod24", 26), ("dlciStatsperiod25", 27), ("dlciStatsperiod26", 28), ("dlciStatsperiod27", 29), ("dlciStatsperiod28", 30), ("dlciStatsperiod29", 31), ("dlciStatsperiod30", 32), ("dlciStatsperiod31", 33), ("dlciStatsperiod32", 34), ("dlciStatsperiod33", 35), ("dlciStatsperiod34", 36), ("dlciStatsperiod35", 37), ("dlciStatsperiod36", 38), ("dlciStatsperiod37", 39), ("dlciStatsperiod38", 40), ("dlciStatsperiod39", 41), ("dlciStatsperiod40", 42), ("dlciStatsperiod41", 43), ("dlciStatsperiod42", 44), ("dlciStatsperiod43", 45), ("dlciStatsperiod44", 46), ("dlciStatsperiod45", 47), ("dlciStatsperiod46", 48), ("dlciStatsperiod47", 49), ("dlciStatsperiod48", 50), ("dlciStatsperiod49", 51), ("dlciStatsperiod50", 52), ("dlciStatsperiod51", 53), ("dlciStatsperiod52", 54), ("dlciStatsperiod53", 55), ("dlciStatsperiod54", 56), ("dlciStatsperiod55", 57), ("dlciStatsperiod56", 58), ("dlciStatsperiod57", 59), ("dlciStatsperiod58", 60), ("dlciStatsperiod59", 61), ("dlciStatsperiod60", 62), ("dlciStatsperiod61", 63), ("dlciStatsperiod62", 64), ("dlciStatsperiod63", 65), ("dlciStatsperiod64", 66), ("dlciStatsperiod65", 67), ("dlciStatsperiod66", 68), ("dlciStatsperiod67", 69), ("dlciStatsperiod68", 70), ("dlciStatsperiod69", 71), ("dlciStatsperiod70", 72), ("dlciStatsperiod71", 73), ("dlciStatsperiod72", 74), ("dlciStatsperiod73", 75), ("dlciStatsperiod74", 76), ("dlciStatsperiod75", 77), ("dlciStatsperiod76", 78), ("dlciStatsperiod77", 79), ("dlciStatsperiod78", 80), ("dlciStatsperiod79", 81), ("dlciStatsperiod80", 82), ("dlciStatsperiod81", 83), ("dlciStatsperiod82", 84), ("dlciStatsperiod83", 85), ("dlciStatsperiod84", 86), ("dlciStatsperiod85", 87), ("dlciStatsperiod86", 88), ("dlciStatsperiod87", 89), ("dlciStatsperiod88", 90), ("dlciStatsperiod89", 91), ("dlciStatsperiod90", 92), ("dlciStatsperiod91", 93), ("dlciStatsperiod92", 94), ("dlciStatsperiod93", 95), ("dlciStatsperiod94", 96), ("dlciStatsperiod95", 97), ("dlciStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsPeriod.setStatus('current')
ipadDLCIstatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxFrames.setStatus('current')
ipadDLCIstatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxFrames.setStatus('current')
ipadDLCIstatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxOctets.setStatus('current')
ipadDLCIstatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxOctets.setStatus('current')
ipadDLCIstatsRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxFECN.setStatus('current')
ipadDLCIstatsRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxBECN.setStatus('current')
ipadDLCIstatsRxDE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxDE.setStatus('current')
ipadDLCIstatsTxExcessCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessCIR.setStatus('current')
ipadDLCIstatsTxExcessBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessBe.setStatus('current')
ipadDLCIstatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtFrames.setStatus('current')
ipadDLCIstatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtFrames.setStatus('current')
ipadDLCIstatsTxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtOctets.setStatus('current')
ipadDLCIstatsRxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtOctets.setStatus('current')
ipadDLCIstatsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsPeak.setStatus('current')
ipadDLCIstatsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsAverage.setStatus('current')
ipadDLCIstatsDelayPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDelayPeak.setStatus('current')
ipadDLCIstatsDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDelayAverage.setStatus('current')
ipadDLCIstatsRoundTripTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRoundTripTimeouts.setStatus('current')
ipadDLCIstatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsUAS.setStatus('current')
ipadDLCIstatsFdrCir = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFdrCir.setStatus('current')
ipadDLCIstatsDdrCir = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDdrCir.setStatus('current')
ipadDLCIstatsFdrBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFdrBe.setStatus('current')
ipadDLCIstatsDdrBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDdrBe.setStatus('current')
ipadDLCIstatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTimeStamp.setStatus('current')
ipadDLCIstatsRemoteFramesOfferedWithinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRemoteFramesOfferedWithinCIR.setStatus('current')
ipadDLCIstatsRemoteFramesOfferedWithinBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRemoteFramesOfferedWithinBE.setStatus('current')
ipadDLCIstatsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFramesReceived.setStatus('current')
ipadDLCIstatsFDRCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFDRCIR.setStatus('current')
ipadDLCIstatsFDRBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFDRBE.setStatus('current')
ipadDLCIstatsRemoteDataOfferedWithinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRemoteDataOfferedWithinCIR.setStatus('current')
ipadDLCIstatsRemoteDataOfferedWithinBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRemoteDataOfferedWithinBE.setStatus('current')
ipadDLCIstatsDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDataReceived.setStatus('current')
ipadDLCIstatsDDRCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDDRCIR.setStatus('current')
ipadDLCIstatsDDRBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDDRBE.setStatus('current')
ipadDLCIstatsAvgPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsAvgPercent.setStatus('current')
ipadDLCIstatsMaxPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsMaxPercent.setStatus('current')
ipadDLCIstatsInstantPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsInstantPercent.setStatus('current')
ipadDLCIstats20PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats20PercentSec.setStatus('current')
ipadDLCIstats40PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats40PercentSec.setStatus('current')
ipadDLCIstats60PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats60PercentSec.setStatus('current')
ipadDLCIstats80PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats80PercentSec.setStatus('current')
ipadDLCIstats100PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats100PercentSec.setStatus('current')
ipadDLCIstatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsValidIntervals.setStatus('current')
ipadDLCIstatsCompressionTxOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxOctetsIn.setStatus('current')
ipadDLCIstatsCompressionTxOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxOctetsOut.setStatus('current')
ipadDLCIstatsCompressionRxOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxOctetsIn.setStatus('current')
ipadDLCIstatsCompressionRxOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxOctetsOut.setStatus('current')
ipadDLCIstatsCompressionTxRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxRatio.setStatus('current')
ipadDLCIstatsCompressionRxRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxRatio.setStatus('current')
ipadUserStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3), )
if mibBuilder.loadTexts: ipadUserStatsTable.setStatus('current')
ipadUserStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadUserStatsIndex"), (0, "IPADv2-MIB", "ipadUserStatsPeriod"))
if mibBuilder.loadTexts: ipadUserStatsEntry.setStatus('current')
ipadUserStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsIndex.setStatus('current')
ipadUserStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("userStatsSummary", 1), ("userStatsCurrent", 2), ("userStatsperiod1", 3), ("userStatsperiod2", 4), ("userStatsperiod3", 5), ("userStatsperiod4", 6), ("userStatsperiod5", 7), ("userStatsperiod6", 8), ("userStatsperiod7", 9), ("userStatsperiod8", 10), ("userStatsperiod9", 11), ("userStatsperiod10", 12), ("userStatsperiod11", 13), ("userStatsperiod12", 14), ("userStatsperiod13", 15), ("userStatsperiod14", 16), ("userStatsperiod15", 17), ("userStatsperiod16", 18), ("userStatsperiod17", 19), ("userStatsperiod18", 20), ("userStatsperiod19", 21), ("userStatsperiod20", 22), ("userStatsperiod21", 23), ("userStatsperiod22", 24), ("userStatsperiod23", 25), ("userStatsperiod24", 26), ("userStatsperiod25", 27), ("userStatsperiod26", 28), ("userStatsperiod27", 29), ("userStatsperiod28", 30), ("userStatsperiod29", 31), ("userStatsperiod30", 32), ("userStatsperiod31", 33), ("userStatsperiod32", 34), ("userStatsperiod33", 35), ("userStatsperiod34", 36), ("userStatsperiod35", 37), ("userStatsperiod36", 38), ("userStatsperiod37", 39), ("userStatsperiod38", 40), ("userStatsperiod39", 41), ("userStatsperiod40", 42), ("userStatsperiod41", 43), ("userStatsperiod42", 44), ("userStatsperiod43", 45), ("userStatsperiod44", 46), ("userStatsperiod45", 47), ("userStatsperiod46", 48), ("userStatsperiod47", 49), ("userStatsperiod48", 50), ("userStatsperiod49", 51), ("userStatsperiod50", 52), ("userStatsperiod51", 53), ("userStatsperiod52", 54), ("userStatsperiod53", 55), ("userStatsperiod54", 56), ("userStatsperiod55", 57), ("userStatsperiod56", 58), ("userStatsperiod57", 59), ("userStatsperiod58", 60), ("userStatsperiod59", 61), ("userStatsperiod60", 62), ("userStatsperiod61", 63), ("userStatsperiod62", 64), ("userStatsperiod63", 65), ("userStatsperiod64", 66), ("userStatsperiod65", 67), ("userStatsperiod66", 68), ("userStatsperiod67", 69), ("userStatsperiod68", 70), ("userStatsperiod69", 71), ("userStatsperiod70", 72), ("userStatsperiod71", 73), ("userStatsperiod72", 74), ("userStatsperiod73", 75), ("userStatsperiod74", 76), ("userStatsperiod75", 77), ("userStatsperiod76", 78), ("userStatsperiod77", 79), ("userStatsperiod78", 80), ("userStatsperiod79", 81), ("userStatsperiod80", 82), ("userStatsperiod81", 83), ("userStatsperiod82", 84), ("userStatsperiod83", 85), ("userStatsperiod84", 86), ("userStatsperiod85", 87), ("userStatsperiod86", 88), ("userStatsperiod87", 89), ("userStatsperiod88", 90), ("userStatsperiod89", 91), ("userStatsperiod90", 92), ("userStatsperiod91", 93), ("userStatsperiod92", 94), ("userStatsperiod93", 95), ("userStatsperiod94", 96), ("userStatsperiod95", 97), ("userStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsPeriod.setStatus('current')
ipadUserStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxFrames.setStatus('current')
ipadUserStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsRxFrames.setStatus('current')
ipadUserStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxOctets.setStatus('current')
ipadUserStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsRxOctets.setStatus('current')
ipadUserStatsTxRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxRatePeak.setStatus('current')
ipadUserStatsTxRateAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxRateAverage.setStatus('current')
ipadUserStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTimeStamp.setStatus('current')
ipadIPTopNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4), )
if mibBuilder.loadTexts: ipadIPTopNStatsTable.setStatus('current')
ipadIPTopNStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadIPTopNStatsIndex"))
if mibBuilder.loadTexts: ipadIPTopNStatsEntry.setStatus('current')
ipadIPTopNStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsIndex.setStatus('current')
ipadIPTopNStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsAddress.setStatus('current')
ipadIPTopNStatsTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTimestamp.setStatus('current')
ipadIPTopNStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsRxFrames.setStatus('current')
ipadIPTopNStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsRxOctets.setStatus('current')
ipadIPTopNStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTxFrames.setStatus('current')
ipadIPTopNStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTxOctets.setStatus('current')
ipadPktSwOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("other", 1), ("tdm", 2), ("monitor", 3), ("packet", 4), ("remoteConfig", 5), ("profile2", 6), ("profile3", 7), ("profile4", 8), ("profile5", 9), ("profile6", 10), ("profile7", 11), ("profile8", 12), ("profile9", 13), ("profile10", 14), ("profile11", 15), ("profile12", 16), ("profile13", 17), ("profile14", 18), ("profile15", 19), ("profile16", 20), ("profile17", 21), ("profile18", 22), ("profile19", 23), ("profile20", 24), ("profile21", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwOperatingMode.setStatus('current')
ipadPktSwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2), )
if mibBuilder.loadTexts: ipadPktSwCfgTable.setStatus('current')
ipadPktSwCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadPktSwCfgService"))
if mibBuilder.loadTexts: ipadPktSwCfgTableEntry.setStatus('current')
ipadPktSwCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPktSwCfgService.setStatus('current')
ipadPktSwCfgInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uni", 1), ("ni", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgInterfaceType.setStatus('current')
ipadPktSwCfgLnkMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("ccitt", 3), ("ansi", 4), ("lmi", 5), ("none", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgLnkMgmtType.setStatus('current')
ipadPktSwCfgMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgMaxFrameSize.setStatus('current')
ipadPktSwCfgnN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN1.setStatus('current')
ipadPktSwCfgnN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN2.setStatus('current')
ipadPktSwCfgnN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN3.setStatus('current')
ipadPktSwCfgnT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnT1.setStatus('current')
ipadPktSwCfgDefCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDefCIR.setStatus('current')
ipadPktSwCfgDefExBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDefExBurst.setStatus('current')
ipadPktSwCfgCIREE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgCIREE.setStatus('current')
ipadPktSwCfgLinkInjection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("buffered", 3), ("forced", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgLinkInjection.setStatus('current')
ipadPktSwCfgAutoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiagnostic.setStatus('current')
ipadPktSwCfgAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiscovery.setStatus('current')
ipadPktSwCfgMgmtDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgMgmtDLCI.setStatus('current')
ipadPktSwCfgRoundTripDelaySize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgRoundTripDelaySize.setStatus('current')
ipadPktSwCfgRoundTripDelayRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgRoundTripDelayRate.setStatus('current')
ipadPktSwCfgAutoIPMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoIPMgmtAddr.setStatus('current')
ipadPktSwCfgNormalTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgNormalTxQueueSize.setStatus('current')
ipadPktSwCfgAddDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAddDLCI.setStatus('current')
ipadPktSwCfgDeleteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDeleteDLCI.setStatus('current')
ipadTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1), )
if mibBuilder.loadTexts: ipadTrapDestTable.setStatus('current')
ipadTrapDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadTrapDestIndex"))
if mibBuilder.loadTexts: ipadTrapDestTableEntry.setStatus('current')
ipadTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTrapDestIndex.setStatus('current')
ipadTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTrapDestination.setStatus('current')
ipadFrPortRxInvalidFramesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25000)).setObjects(("IPADv2-MIB", "ipadFrPortRxInvAlmAlarm"))
if mibBuilder.loadTexts: ipadFrPortRxInvalidFramesExceeded.setStatus('current')
ipadFrPortRxThroughputExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25001)).setObjects(("IPADv2-MIB", "ipadFrPortRxAlmAlarm"))
if mibBuilder.loadTexts: ipadFrPortRxThroughputExceeded.setStatus('current')
ipadFrPortTxThroughputExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25002)).setObjects(("IPADv2-MIB", "ipadFrPortTxAlmAlarm"))
if mibBuilder.loadTexts: ipadFrPortTxThroughputExceeded.setStatus('current')
ipadDLCItxCIRexceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25003)).setObjects(("IPADv2-MIB", "ipadDLCItxExCIRAlarm"))
if mibBuilder.loadTexts: ipadDLCItxCIRexceeded.setStatus('current')
ipadDLCItxBEexceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25004)).setObjects(("IPADv2-MIB", "ipadDLCItxExBeAlarm"))
if mibBuilder.loadTexts: ipadDLCItxBEexceeded.setStatus('current')
ipadDLCIRxCongestionExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25005)).setObjects(("IPADv2-MIB", "ipadDLCIrxCongAlarm"))
if mibBuilder.loadTexts: ipadDLCIRxCongestionExceeded.setStatus('current')
ipadUserTxExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25006)).setObjects(("IPADv2-MIB", "ipadUserTxAlmAlarm"))
if mibBuilder.loadTexts: ipadUserTxExceeded.setStatus('current')
ipadDlciRxBECNinCIRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25007)).setObjects(("IPADv2-MIB", "ipadDLCIrxBECNinCIR"))
if mibBuilder.loadTexts: ipadDlciRxBECNinCIRAlarm.setStatus('current')
ipadDlciUASExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25008)).setObjects(("IPADv2-MIB", "ipadDLCIUASAlarm"))
if mibBuilder.loadTexts: ipadDlciUASExceeded.setStatus('current')
ipadserialDteDTRAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25009)).setObjects(("DS8200v2-MIB", "serialDteDTRAlarmStatus"))
if mibBuilder.loadTexts: ipadserialDteDTRAlarmExists.setStatus('current')
ipadt1e1ESAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25010)).setObjects(("DS8200v2-MIB", "t1e1ESCount"))
if mibBuilder.loadTexts: ipadt1e1ESAlarmDeclared.setStatus('current')
ipadt1e1SESAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25011)).setObjects(("DS8200v2-MIB", "t1e1SESCount"))
if mibBuilder.loadTexts: ipadt1e1SESAlarmDeclared.setStatus('current')
ipadt1e1LOSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25012)).setObjects(("DS8200v2-MIB", "t1e1LOSSCount"))
if mibBuilder.loadTexts: ipadt1e1LOSSAlarmDeclared.setStatus('current')
ipadt1e1UASAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25013)).setObjects(("DS8200v2-MIB", "t1e1UASCount"))
if mibBuilder.loadTexts: ipadt1e1UASAlarmDeclared.setStatus('current')
ipadt1e1CSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25014)).setObjects(("DS8200v2-MIB", "t1e1CSSCount"))
if mibBuilder.loadTexts: ipadt1e1CSSAlarmDeclared.setStatus('current')
ipadt1e1BPVSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25015)).setObjects(("DS8200v2-MIB", "t1e1BPVSCount"))
if mibBuilder.loadTexts: ipadt1e1BPVSAlarmDeclared.setStatus('current')
ipadt1e1OOFSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25016)).setObjects(("DS8200v2-MIB", "t1e1OOFSCount"))
if mibBuilder.loadTexts: ipadt1e1OOFSAlarmDeclared.setStatus('current')
ipadt1e1AISAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25017)).setObjects(("DS8200v2-MIB", "t1e1AISCount"))
if mibBuilder.loadTexts: ipadt1e1AISAlarmExists.setStatus('current')
ipadt1e1RASAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25018)).setObjects(("DS8200v2-MIB", "t1e1RASCount"))
if mibBuilder.loadTexts: ipadt1e1RASAlarmExists.setStatus('current')
ipadDLCIremoteSOSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25019)).setObjects(("IPADv2-MIB", "ipadDLCIremoteEquipActive"))
if mibBuilder.loadTexts: ipadDLCIremoteSOSAlarm.setStatus('current')
ipadDdsLOSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25020)).setObjects(("DS8200v2-MIB", "ddsNetLOSCount"))
if mibBuilder.loadTexts: ipadDdsLOSSAlarmDeclared.setStatus('current')
ipadDdsOOFSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25021)).setObjects(("DS8200v2-MIB", "ddsNetOOFCount"))
if mibBuilder.loadTexts: ipadDdsOOFSAlarmDeclared.setStatus('current')
ipadDdsOOSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25022)).setObjects(("DS8200v2-MIB", "ddsNetOOSCount"))
if mibBuilder.loadTexts: ipadDdsOOSSAlarmDeclared.setStatus('current')
ipadDdsFDLSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25023)).setObjects(("DS8200v2-MIB", "ddsNetFDLCount"))
if mibBuilder.loadTexts: ipadDdsFDLSAlarmDeclared.setStatus('current')
ipadDdsBPVSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25024)).setObjects(("DS8200v2-MIB", "ddsNetBPVCount"))
if mibBuilder.loadTexts: ipadDdsBPVSAlarmDeclared.setStatus('current')
ipadDS0HighAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25025)).setObjects(("IPADv2-MIB", "ipadDS0ConfigHighUtilCount"))
if mibBuilder.loadTexts: ipadDS0HighAlarmDeclared.setStatus('current')
ipadDS0LowAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25026)).setObjects(("IPADv2-MIB", "ipadDS0ConfigLowUtilAlarm"))
if mibBuilder.loadTexts: ipadDS0LowAlarmDeclared.setStatus('current')
ipadHDLCRxHighAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25027)).setObjects(("IPADv2-MIB", "ipadHDLCConfigRxHighUtilCount"))
if mibBuilder.loadTexts: ipadHDLCRxHighAlarmDeclared.setStatus('current')
ipadHDLCRxLowAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25028)).setObjects(("IPADv2-MIB", "ipadHDLCConfigRxLowUtilAlarm"))
if mibBuilder.loadTexts: ipadHDLCRxLowAlarmDeclared.setStatus('current')
ipadHDLCTxHighAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25029)).setObjects(("IPADv2-MIB", "ipadHDLCConfigTxHighUtilCount"))
if mibBuilder.loadTexts: ipadHDLCTxHighAlarmDeclared.setStatus('current')
ipadHDLCTxLowAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25030)).setObjects(("IPADv2-MIB", "ipadHDLCConfigTxLowUtilAlarm"))
if mibBuilder.loadTexts: ipadHDLCTxLowAlarmDeclared.setStatus('current')
ipadDbuActivated = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25031)).setObjects(("IPADv2-MIB", "ipadDbuStatus"))
if mibBuilder.loadTexts: ipadDbuActivated.setStatus('current')
ipadMiscPortSettings = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1), )
if mibBuilder.loadTexts: ipadMiscPortSettings.setStatus('current')
ipadMiscPortSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadMiscPortSettingsIndex"))
if mibBuilder.loadTexts: ipadMiscPortSettingsEntry.setStatus('current')
ipadMiscPortSettingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscPortSettingsIndex.setStatus('current')
ipadMiscPortSettingsSerialType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dce", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscPortSettingsSerialType.setStatus('current')
ipadMiscPortSettingsModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscPortSettingsModemControl.setStatus('current')
ipadMiscClearStatusCounts = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clearAll", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscClearStatusCounts.setStatus('current')
ipadMiscEnableServiceAware = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscEnableServiceAware.setStatus('current')
ipadMiscShdslConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4), )
if mibBuilder.loadTexts: ipadMiscShdslConfigTable.setStatus('current')
ipadMiscShdslConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadMiscShdslConfigIndex"))
if mibBuilder.loadTexts: ipadMiscShdslConfigEntry.setStatus('current')
ipadMiscShdslConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslConfigIndex.setStatus('current')
ipadMiscShdslTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("isXtuC", 2), ("isXtuR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslTerminalType.setStatus('current')
ipadMiscShdslTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("shdslTimingOther", 1), ("shdslTimingInternal", 2), ("shdslTimingNetwork", 3), ("shdslTimingEqDTE", 4), ("shdslTimingStation", 5), ("shdslTimingPort1", 6), ("shdslTimingPort2", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslTiming.setStatus('current')
ipadMiscShdslStationInTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shdslStationInTimingOther", 1), ("shdslStationInTimingNX64", 2), ("shdslStationInTiming1544", 3), ("shdslStationInTiming2048", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslStationInTiming.setStatus('current')
ipadMiscShdslStationTimingNxMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslStationTimingNxMultiple.setStatus('current')
ipadMiscShdslAutomaticRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslAutomaticRetrain.setStatus('current')
ipadMiscShdslStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5), )
if mibBuilder.loadTexts: ipadMiscShdslStatusTable.setStatus('current')
ipadMiscShdslStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadMiscShdslStatusIndex"))
if mibBuilder.loadTexts: ipadMiscShdslStatusEntry.setStatus('current')
ipadMiscShdslStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslStatusIndex.setStatus('current')
ipadMiscShdslConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("handshake", 2), ("training", 3), ("data", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslConnectionStatus.setStatus('current')
ipadMiscShdslDetailedConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslDetailedConnectionStatus.setStatus('current')
ipadMiscShdslEOCInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslEOCInMessages.setStatus('current')
ipadMiscShdslEOCOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslEOCOutMessages.setStatus('current')
ipadMiscShdslConnectionStatusPair2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("handshake", 2), ("training", 3), ("data", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslConnectionStatusPair2.setStatus('current')
ipadMiscShdslDetailedConnectionStatusPair2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslDetailedConnectionStatusPair2.setStatus('current')
ipadMiscEnableSupervisoryPort = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscEnableSupervisoryPort.setStatus('current')
ipadMiscEnableButtons = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscEnableButtons.setStatus('current')
ipadMiscBootupConsoleAvail = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscBootupConsoleAvail.setStatus('current')
ipadMiscEnableLEDs = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscEnableLEDs.setStatus('current')
ipadMiscDisableLAN = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("half10", 4), ("full10", 5), ("half100", 6), ("full100", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscDisableLAN.setStatus('current')
ipadMiscLANStatus = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("half10", 2), ("full10", 3), ("half100", 4), ("full100", 5), ("na", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscLANStatus.setStatus('current')
ipadSoftKeyTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1), )
if mibBuilder.loadTexts: ipadSoftKeyTable.setStatus('current')
ipadSoftKeyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadSoftKeyIndex"))
if mibBuilder.loadTexts: ipadSoftKeyTableEntry.setStatus('current')
ipadSoftKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyIndex.setStatus('current')
ipadSoftKeyAcronym = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyAcronym.setStatus('current')
ipadSoftKeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyDescription.setStatus('current')
ipadSoftKeyExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyExpirationDate.setStatus('current')
ipadSoftKeyEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSoftKeyEntry.setStatus('current')
ipadTCPServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerEnable.setStatus('current')
ipadTCPServerConnTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2), )
if mibBuilder.loadTexts: ipadTCPServerConnTable.setStatus('current')
ipadTCPServerConnTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadTCPServerConnIndex"))
if mibBuilder.loadTexts: ipadTCPServerConnTableEntry.setStatus('current')
ipadTCPServerConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTCPServerConnIndex.setStatus('current')
ipadTCPServerConnEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerConnEndpoint.setStatus('current')
ipadTCPServerConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerConnLocalPort.setStatus('current')
ipadTCPServerConnEnableEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerConnEnableEntry.setStatus('current')
ipadTCPServerAddConnEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("addnew", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerAddConnEntry.setStatus('current')
ipadTCPServerDeleteConnEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerDeleteConnEntry.setStatus('current')
ipadTCPServerHostAccessTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 5), )
if mibBuilder.loadTexts: ipadTCPServerHostAccessTable.setStatus('current')
ipadTCPServerHostAccessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 5, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadTCPServerHostAccessIndex"))
if mibBuilder.loadTexts: ipadTCPServerHostAccessTableEntry.setStatus('current')
ipadTCPServerHostAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTCPServerHostAccessIndex.setStatus('current')
ipadTCPServerHostAccessIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerHostAccessIPAddr.setStatus('current')
ipadSCADAConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1), )
if mibBuilder.loadTexts: ipadSCADAConfigTable.setStatus('current')
ipadSCADAConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadSCADACfgIndex"))
if mibBuilder.loadTexts: ipadSCADAConfigTableEntry.setStatus('current')
ipadSCADACfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADACfgIndex.setStatus('current')
ipadSCADACfgMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgMessageSize.setStatus('current')
ipadSCADACfgIdleCharDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgIdleCharDelay.setStatus('current')
ipadSCADACfgInputTerminator = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgInputTerminator.setStatus('current')
ipadSCADACfgAddDevLst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("addnew", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgAddDevLst.setStatus('current')
ipadSCADACfgDeleteDevLst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgDeleteDevLst.setStatus('current')
ipadSCADACfgDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("both", 2), ("output", 3), ("input", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgDataDirection.setStatus('current')
ipadSCADACfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("async", 2), ("syncVancommHost", 3), ("syncVancommRTU", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgProtocol.setStatus('current')
ipadSCADACfgLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("network", 2), ("port", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgLoopback.setStatus('current')
ipadSCADAStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1), )
if mibBuilder.loadTexts: ipadSCADAStatsTable.setStatus('current')
ipadSCADAStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadSCADAStatsIndex"))
if mibBuilder.loadTexts: ipadSCADAStatsTableEntry.setStatus('current')
ipadSCADAStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsIndex.setStatus('current')
ipadSCADAStatsTxChars = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsTxChars.setStatus('current')
ipadSCADAStatsRxChars = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsRxChars.setStatus('current')
ipadSCADAStatsTxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsTxMsgs.setStatus('current')
ipadSCADAStatsRxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsRxMsgs.setStatus('current')
ipadSCADAStatsRxParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsRxParityErrors.setStatus('current')
ipadSCADAStatsRxFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsRxFramingErrors.setStatus('current')
ipadSCADAStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipadSCADAStatsClearOther", 1), ("ipadSCADAStatsClearNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADAStatsClear.setStatus('current')
ipadSCADADevLstTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1), )
if mibBuilder.loadTexts: ipadSCADADevLstTable.setStatus('current')
ipadSCADADevLstTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadSCADADevLstIndex"), (0, "IPADv2-MIB", "ipadSCADADevLstDevIndex"))
if mibBuilder.loadTexts: ipadSCADADevLstTableEntry.setStatus('current')
ipadSCADADevLstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADADevLstIndex.setStatus('current')
ipadSCADADevLstDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADADevLstDevIndex.setStatus('current')
ipadSCADADevLstEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADADevLstEndpointName.setStatus('current')
ipadSCADADevLstEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADADevLstEntryStatus.setStatus('current')
ipadDS0ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1), )
if mibBuilder.loadTexts: ipadDS0ConfigTable.setStatus('current')
ipadDS0ConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDS0ConfigIndex"))
if mibBuilder.loadTexts: ipadDS0ConfigTableEntry.setStatus('current')
ipadDS0ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigIndex.setStatus('current')
ipadDS0ConfigNumberDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigNumberDS0.setStatus('current')
ipadDS0ConfigResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigResetTimer.setStatus('current')
ipadDS0ConfigHighUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtil.setStatus('current')
ipadDS0ConfigHighUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilThreshold.setStatus('current')
ipadDS0ConfigHighUtilStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notExist", 2), ("exists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilStatus.setStatus('current')
ipadDS0ConfigHighUtilCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilCount.setStatus('current')
ipadDS0ConfigHighUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilAlarm.setStatus('current')
ipadDS0ConfigLowUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigLowUtil.setStatus('current')
ipadDS0ConfigLowUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigLowUtilAlarm.setStatus('current')
ipadDS0ConfigReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clearAlarms", 2), ("clearHistory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigReset.setStatus('current')
ipadDS0Hist24Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1), )
if mibBuilder.loadTexts: ipadDS0Hist24Table.setStatus('current')
ipadDS0Hist24TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDS0Hist24Index"), (0, "IPADv2-MIB", "ipadDS0Hist24HistoricalIndex"))
if mibBuilder.loadTexts: ipadDS0Hist24TableEntry.setStatus('current')
ipadDS0Hist24Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24Index.setStatus('current')
ipadDS0Hist24HistoricalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("statSummary", 1), ("statCurrent", 2), ("statPeriod1", 3), ("statPeriod2", 4), ("statPeriod3", 5), ("statPeriod4", 6), ("statPeriod5", 7), ("statPeriod6", 8), ("statPeriod7", 9), ("statPeriod8", 10), ("statPeriod9", 11), ("statPeriod10", 12), ("statPeriod11", 13), ("statPeriod12", 14), ("statPeriod13", 15), ("statPeriod14", 16), ("statPeriod15", 17), ("statPeriod16", 18), ("statPeriod17", 19), ("statPeriod18", 20), ("statPeriod19", 21), ("statPeriod20", 22), ("statPeriod21", 23), ("statPeriod22", 24), ("statPeriod23", 25), ("statPeriod24", 26), ("statPeriod25", 27), ("statPeriod26", 28), ("statPeriod27", 29), ("statPeriod28", 30), ("statPeriod29", 31), ("statPeriod30", 32), ("statPeriod31", 33), ("statPeriod32", 34), ("statPeriod33", 35), ("statPeriod34", 36), ("statPeriod35", 37), ("statPeriod36", 38), ("statPeriod37", 39), ("statPeriod38", 40), ("statPeriod39", 41), ("statPeriod40", 42), ("statPeriod41", 43), ("statPeriod42", 44), ("statPeriod43", 45), ("statPeriod44", 46), ("statPeriod45", 47), ("statPeriod46", 48), ("statPeriod47", 49), ("statPeriod48", 50), ("statPeriod49", 51), ("statPeriod50", 52), ("statPeriod51", 53), ("statPeriod52", 54), ("statPeriod53", 55), ("statPeriod54", 56), ("statPeriod55", 57), ("statPeriod56", 58), ("statPeriod57", 59), ("statPeriod58", 60), ("statPeriod59", 61), ("statPeriod60", 62), ("statPeriod61", 63), ("statPeriod62", 64), ("statPeriod63", 65), ("statPeriod64", 66), ("statPeriod65", 67), ("statPeriod66", 68), ("statPeriod67", 69), ("statPeriod68", 70), ("statPeriod69", 71), ("statPeriod70", 72), ("statPeriod71", 73), ("statPeriod72", 74), ("statPeriod73", 75), ("statPeriod74", 76), ("statPeriod75", 77), ("statPeriod76", 78), ("statPeriod77", 79), ("statPeriod78", 80), ("statPeriod79", 81), ("statPeriod80", 82), ("statPeriod81", 83), ("statPeriod82", 84), ("statPeriod83", 85), ("statPeriod84", 86), ("statPeriod85", 87), ("statPeriod86", 88), ("statPeriod87", 89), ("statPeriod88", 90), ("statPeriod89", 91), ("statPeriod90", 92), ("statPeriod91", 93), ("statPeriod92", 94), ("statPeriod93", 95), ("statPeriod94", 96), ("statPeriod95", 97), ("statPeriod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24HistoricalIndex.setStatus('current')
ipadDS0Hist24Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24Timestamp.setStatus('current')
ipadDS0Hist24HighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24HighUtilSeconds.setStatus('current')
ipadDS0Hist24Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24Utilization.setStatus('current')
ipadDS0Hist30Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1), )
if mibBuilder.loadTexts: ipadDS0Hist30Table.setStatus('current')
ipadDS0Hist30TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDS0Hist30Index"), (0, "IPADv2-MIB", "ipadDS0Hist30HistoricalIndex"))
if mibBuilder.loadTexts: ipadDS0Hist30TableEntry.setStatus('current')
ipadDS0Hist30Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30Index.setStatus('current')
ipadDS0Hist30HistoricalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("statSummary", 1), ("statDay1", 2), ("statDay2", 3), ("statDay3", 4), ("statDay4", 5), ("statDay5", 6), ("statDay6", 7), ("statDay7", 8), ("statDay8", 9), ("statDay9", 10), ("statDay10", 11), ("statDay11", 12), ("statDay12", 13), ("statDay13", 14), ("statDay14", 15), ("statDay15", 16), ("statDay16", 17), ("statDay17", 18), ("statDay18", 19), ("statDay19", 20), ("statDay20", 21), ("statDay21", 22), ("statDay22", 23), ("statDay23", 24), ("statDay24", 25), ("statDay25", 26), ("statDay26", 27), ("statDay27", 28), ("statDay28", 29), ("statDay29", 30), ("statDay30", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30HistoricalIndex.setStatus('current')
ipadDS0Hist30Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30Timestamp.setStatus('current')
ipadDS0Hist30HighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30HighUtilSeconds.setStatus('current')
ipadDS0Hist30Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30Utilization.setStatus('current')
ipadHDLCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1), )
if mibBuilder.loadTexts: ipadHDLCConfigTable.setStatus('current')
ipadHDLCConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadHDLCConfigIndex"))
if mibBuilder.loadTexts: ipadHDLCConfigTableEntry.setStatus('current')
ipadHDLCConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigIndex.setStatus('current')
ipadHDLCConfigService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigService.setStatus('current')
ipadHDLCConfigServiceBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigServiceBPS.setStatus('current')
ipadHDLCConfigResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigResetTimer.setStatus('current')
ipadHDLCConfigRxHighUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtil.setStatus('current')
ipadHDLCConfigRxHighUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilThreshold.setStatus('current')
ipadHDLCConfigRxHighUtilStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notExist", 2), ("exists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilStatus.setStatus('current')
ipadHDLCConfigRxHighUtilCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilCount.setStatus('current')
ipadHDLCConfigRxHighUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilAlarm.setStatus('current')
ipadHDLCConfigRxLowUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigRxLowUtil.setStatus('current')
ipadHDLCConfigRxLowUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigRxLowUtilAlarm.setStatus('current')
ipadHDLCConfigTxHighUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtil.setStatus('current')
ipadHDLCConfigTxHighUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilThreshold.setStatus('current')
ipadHDLCConfigTxHighUtilStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notExist", 2), ("exists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilStatus.setStatus('current')
ipadHDLCConfigTxHighUtilCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilCount.setStatus('current')
ipadHDLCConfigTxHighUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilAlarm.setStatus('current')
ipadHDLCConfigTxLowUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigTxLowUtil.setStatus('current')
ipadHDLCConfigTxLowUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigTxLowUtilAlarm.setStatus('current')
ipadHDLCConfigReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clearAlarms", 2), ("clearHistory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigReset.setStatus('current')
ipadHDLCHist24Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1), )
if mibBuilder.loadTexts: ipadHDLCHist24Table.setStatus('current')
ipadHDLCHist24TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadHDLCHist24Index"), (0, "IPADv2-MIB", "ipadHDLCHist24HistoricalIndex"))
if mibBuilder.loadTexts: ipadHDLCHist24TableEntry.setStatus('current')
ipadHDLCHist24Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24Index.setStatus('current')
ipadHDLCHist24HistoricalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("statSummary", 1), ("statCurrent", 2), ("statPeriod1", 3), ("statPeriod2", 4), ("statPeriod3", 5), ("statPeriod4", 6), ("statPeriod5", 7), ("statPeriod6", 8), ("statPeriod7", 9), ("statPeriod8", 10), ("statPeriod9", 11), ("statPeriod10", 12), ("statPeriod11", 13), ("statPeriod12", 14), ("statPeriod13", 15), ("statPeriod14", 16), ("statPeriod15", 17), ("statPeriod16", 18), ("statPeriod17", 19), ("statPeriod18", 20), ("statPeriod19", 21), ("statPeriod20", 22), ("statPeriod21", 23), ("statPeriod22", 24), ("statPeriod23", 25), ("statPeriod24", 26), ("statPeriod25", 27), ("statPeriod26", 28), ("statPeriod27", 29), ("statPeriod28", 30), ("statPeriod29", 31), ("statPeriod30", 32), ("statPeriod31", 33), ("statPeriod32", 34), ("statPeriod33", 35), ("statPeriod34", 36), ("statPeriod35", 37), ("statPeriod36", 38), ("statPeriod37", 39), ("statPeriod38", 40), ("statPeriod39", 41), ("statPeriod40", 42), ("statPeriod41", 43), ("statPeriod42", 44), ("statPeriod43", 45), ("statPeriod44", 46), ("statPeriod45", 47), ("statPeriod46", 48), ("statPeriod47", 49), ("statPeriod48", 50), ("statPeriod49", 51), ("statPeriod50", 52), ("statPeriod51", 53), ("statPeriod52", 54), ("statPeriod53", 55), ("statPeriod54", 56), ("statPeriod55", 57), ("statPeriod56", 58), ("statPeriod57", 59), ("statPeriod58", 60), ("statPeriod59", 61), ("statPeriod60", 62), ("statPeriod61", 63), ("statPeriod62", 64), ("statPeriod63", 65), ("statPeriod64", 66), ("statPeriod65", 67), ("statPeriod66", 68), ("statPeriod67", 69), ("statPeriod68", 70), ("statPeriod69", 71), ("statPeriod70", 72), ("statPeriod71", 73), ("statPeriod72", 74), ("statPeriod73", 75), ("statPeriod74", 76), ("statPeriod75", 77), ("statPeriod76", 78), ("statPeriod77", 79), ("statPeriod78", 80), ("statPeriod79", 81), ("statPeriod80", 82), ("statPeriod81", 83), ("statPeriod82", 84), ("statPeriod83", 85), ("statPeriod84", 86), ("statPeriod85", 87), ("statPeriod86", 88), ("statPeriod87", 89), ("statPeriod88", 90), ("statPeriod89", 91), ("statPeriod90", 92), ("statPeriod91", 93), ("statPeriod92", 94), ("statPeriod93", 95), ("statPeriod94", 96), ("statPeriod95", 97), ("statPeriod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24HistoricalIndex.setStatus('current')
ipadHDLCHist24Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24Timestamp.setStatus('current')
ipadHDLCHist24RxHighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24RxHighUtilSeconds.setStatus('current')
ipadHDLCHist24RxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24RxUtilization.setStatus('current')
ipadHDLCHist24TxHighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24TxHighUtilSeconds.setStatus('current')
ipadHDLCHist24TxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24TxUtilization.setStatus('current')
ipadHDLCHist30Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1), )
if mibBuilder.loadTexts: ipadHDLCHist30Table.setStatus('current')
ipadHDLCHist30TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadHDLCHist30Index"), (0, "IPADv2-MIB", "ipadHDLCHist30HistoricalIndex"))
if mibBuilder.loadTexts: ipadHDLCHist30TableEntry.setStatus('current')
ipadHDLCHist30Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30Index.setStatus('current')
ipadHDLCHist30HistoricalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("statSummary", 1), ("statDay1", 2), ("statDay2", 3), ("statDay3", 4), ("statDay4", 5), ("statDay5", 6), ("statDay6", 7), ("statDay7", 8), ("statDay8", 9), ("statDay9", 10), ("statDay10", 11), ("statDay11", 12), ("statDay12", 13), ("statDay13", 14), ("statDay14", 15), ("statDay15", 16), ("statDay16", 17), ("statDay17", 18), ("statDay18", 19), ("statDay19", 20), ("statDay20", 21), ("statDay21", 22), ("statDay22", 23), ("statDay23", 24), ("statDay24", 25), ("statDay25", 26), ("statDay26", 27), ("statDay27", 28), ("statDay28", 29), ("statDay29", 30), ("statDay30", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30HistoricalIndex.setStatus('current')
ipadHDLCHist30Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30Timestamp.setStatus('current')
ipadHDLCHist30RxHighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30RxHighUtilSeconds.setStatus('current')
ipadHDLCHist30RxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30RxUtilization.setStatus('current')
ipadHDLCHist30TxHighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30TxHighUtilSeconds.setStatus('current')
ipadHDLCHist30TxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30TxUtilization.setStatus('current')
ipadSmtpMailServer = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpMailServer.setStatus('current')
ipadSmtpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpDomainName.setStatus('current')
ipadSmtpMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpMailFrom.setStatus('current')
ipadSmtpRecipient1 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient1.setStatus('current')
ipadSmtpRecipient2 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient2.setStatus('current')
ipadSmtpRecipient3 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient3.setStatus('current')
ipadSmtpRecipient4 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient4.setStatus('current')
ipadSmtpRecipient5 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient5.setStatus('current')
ipadEncryptionEnable = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionEnable.setStatus('current')
ipadEncryptionStartupKey = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionStartupKey.setStatus('current')
ipadEncryptionStartupKeyConfirm = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionStartupKeyConfirm.setStatus('current')
ipadEncryptionType = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blowfish", 1), ("des", 2), ("triple-des", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionType.setStatus('current')
ipadEncryptionKey1 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey1.setStatus('current')
ipadEncryptionKey2 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey2.setStatus('current')
ipadEncryptionKey3 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey3.setStatus('current')
ipadEncryptionKey4 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey4.setStatus('current')
ipadEncryptionKey5 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey5.setStatus('current')
ipadEncryptionKey6 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey6.setStatus('current')
ipadEncryptionKey7 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey7.setStatus('current')
ipadEncryptionKey8 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey8.setStatus('current')
ipadEncryptionKey9 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey9.setStatus('current')
ipadEncryptionKey10 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey10.setStatus('current')
ipadEncryptionKeyLife = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKeyLife.setStatus('current')
ipadAutoLearnDS0Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1), )
if mibBuilder.loadTexts: ipadAutoLearnDS0Table.setStatus('current')
ipadAutoLearnDS0TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadAutoLearnDS0Index"))
if mibBuilder.loadTexts: ipadAutoLearnDS0TableEntry.setStatus('current')
ipadAutoLearnDS0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAutoLearnDS0Index.setStatus('current')
ipadAutoLearnDS0Boot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("carrierDown", 4), ("serviceDown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAutoLearnDS0Boot.setStatus('current')
ipadAutoLearnDS0Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("learnAs56K", 3), ("learnAs64K", 4), ("learnAsVoice", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAutoLearnDS0Rate.setStatus('current')
ipadAutoLearnDS0Command = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("learnNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAutoLearnDS0Command.setStatus('current')
ipadUnitAccessTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1), )
if mibBuilder.loadTexts: ipadUnitAccessTable.setStatus('current')
ipadUnitAccessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadAutoLearnDS0Index"))
if mibBuilder.loadTexts: ipadUnitAccessTableEntry.setStatus('current')
ipadUnitAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUnitAccessIndex.setStatus('current')
ipadUnitAccessIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUnitAccessIpa.setStatus('current')
ipadUnitAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUnitAccessMask.setStatus('current')
ipadTFTPDownloadServerIpa = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 33, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTFTPDownloadServerIpa.setStatus('current')
ipadTFTPDownloadFileName = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 33, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTFTPDownloadFileName.setStatus('current')
ipadTFTPDownloadAction = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 33, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("getfile", 1), ("putfile", 2), ("abort", 3), ("idle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTFTPDownloadAction.setStatus('current')
ipadTFTPDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 33, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("gettingfile", 2), ("puttingfile", 3), ("aborting", 4), ("successful", 5), ("invalidFileName", 6), ("fileAccessFailed", 7), ("invalidFile", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTFTPDownloadStatus.setStatus('current')
ipadDLMConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 1))
ipadDLMConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("analyze", 2), ("live", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMConfigMode.setStatus('current')
ipadDLMConfigBufferManagement = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("wrap", 2), ("stopOnFull", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMConfigBufferManagement.setStatus('current')
ipadDLMTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2), )
if mibBuilder.loadTexts: ipadDLMTable.setStatus('current')
ipadDLMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDLMServiceIndex"))
if mibBuilder.loadTexts: ipadDLMTableEntry.setStatus('current')
ipadDLMServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMServiceIndex.setStatus('current')
ipadDLMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMEnable.setStatus('current')
ipadDLMTxRxFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("all", 2), ("transmitOnly", 3), ("receiveOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMTxRxFilter.setStatus('current')
ipadDLMPatternEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMPatternEnable.setStatus('current')
ipadDLMPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMPattern.setStatus('current')
ipadDLMPatternMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMPatternMask.setStatus('current')
ipadDLMPatternOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMPatternOffset.setStatus('current')
ipadDLMPacketTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3), )
if mibBuilder.loadTexts: ipadDLMPacketTable.setStatus('current')
ipadDLMPacketTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDLMPacketIndex"))
if mibBuilder.loadTexts: ipadDLMPacketTableEntry.setStatus('current')
ipadDLMPacketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketIndex.setStatus('current')
ipadDLMPacketServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketServiceIndex.setStatus('current')
ipadDLMPacketTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketTimestamp.setStatus('current')
ipadDLMPacketDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketDataDirection.setStatus('current')
ipadDLMPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketSize.setStatus('current')
ipadDLMPacketData = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketData.setStatus('current')
ipadOrigPingCommand = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("stop", 2), ("start", 3), ("clearStats", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingCommand.setStatus('current')
ipadOrigPingDestIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingDestIPAddr.setStatus('current')
ipadOrigPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingTimeout.setStatus('current')
ipadOrigPingSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingSize.setStatus('current')
ipadOrigPingToSend = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingToSend.setStatus('current')
ipadOrigPingSent = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingSent.setStatus('current')
ipadOrigPingReplies = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingReplies.setStatus('current')
ipadOrigPingDelayMin = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingDelayMin.setStatus('current')
ipadOrigPingDelayAvg = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingDelayAvg.setStatus('current')
ipadOrigPingDelayMax = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingDelayMax.setStatus('current')
ipadOrigPingReport = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingReport.setStatus('current')
ipadOrigPingExceptReport = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingExceptReport.setStatus('current')
mibBuilder.exportSymbols("IPADv2-MIB", ipadSCADAStatsRxParityErrors=ipadSCADAStatsRxParityErrors, ipadTFTPDownloadFileName=ipadTFTPDownloadFileName, ipadPPPCfgNegIPCPCompression=ipadPPPCfgNegIPCPCompression, ipadSmtpRecipient5=ipadSmtpRecipient5, ipadDLCIRemoteFramesOfferedWithinCIR=ipadDLCIRemoteFramesOfferedWithinCIR, ipadFrPortStatsTx80PercentSec=ipadFrPortStatsTx80PercentSec, ipadPPPCfgNegCHAP=ipadPPPCfgNegCHAP, ipadFrPortRxAlmAlarm=ipadFrPortRxAlmAlarm, ipadSCADADevLstTable=ipadSCADADevLstTable, ipadFrPortStatsRxInvalid=ipadFrPortStatsRxInvalid, ipadPPPPAPTableUsername=ipadPPPPAPTableUsername, ipadDS0Hist24HighUtilSeconds=ipadDS0Hist24HighUtilSeconds, ipadSoftKeyTableEntry=ipadSoftKeyTableEntry, ipadDbuTable=ipadDbuTable, ipadDLCIservice=ipadDLCIservice, ipadFrPortStatsTxFrames=ipadFrPortStatsTxFrames, ipadChannelService=ipadChannelService, ipadPPPCfgPeerIpAddress=ipadPPPCfgPeerIpAddress, ipadHDLCHist24TxUtilization=ipadHDLCHist24TxUtilization, ipadPPPCfgNegAddress=ipadPPPCfgNegAddress, ipadFrPortStatsRx40PercentSec=ipadFrPortStatsRx40PercentSec, ipadPktSwCfgAddDLCI=ipadPktSwCfgAddDLCI, ipadIPTopNStatsRxFrames=ipadIPTopNStatsRxFrames, ipadOrigPingSent=ipadOrigPingSent, ipadDLMTableEntry=ipadDLMTableEntry, ipadDLCIRemoteIPAddress=ipadDLCIRemoteIPAddress, ipadPPPCfgPAPUsername=ipadPPPCfgPAPUsername, ipadHDLCConfigRxHighUtilThreshold=ipadHDLCConfigRxHighUtilThreshold, ipadUserStatsPeriod=ipadUserStatsPeriod, ipadFrPortStatsTxMgmtOctets=ipadFrPortStatsTxMgmtOctets, ipadDlciRxBECNinCIRAlarm=ipadDlciRxBECNinCIRAlarm, ipadDLCIRemoteDataOfferedWithinBE=ipadDLCIRemoteDataOfferedWithinBE, ipadFrPortStatsTxMgmtFrames=ipadFrPortStatsTxMgmtFrames, ipadFrPortStatsAverage=ipadFrPortStatsAverage, ipadt1e1SESAlarmDeclared=ipadt1e1SESAlarmDeclared, ipadPPPCHAPTableUsername=ipadPPPCHAPTableUsername, ipadSCADAConfigTable=ipadSCADAConfigTable, ipadFrPort=ipadFrPort, ipadDbuRevertDelay=ipadDbuRevertDelay, ipadFrPortTable=ipadFrPortTable, ipadDLCIstats60PercentSec=ipadDLCIstats60PercentSec, ipadPPPCfgMRU=ipadPPPCfgMRU, ipadDLMPacketSize=ipadDLMPacketSize, ipadHDLCHist24Table=ipadHDLCHist24Table, ipadPPPCfgACCM=ipadPPPCfgACCM, ipadDS0Config=ipadDS0Config, ipadTrapDestTable=ipadTrapDestTable, ipadPPPCfgNegACCM=ipadPPPCfgNegACCM, ipadDdsOOSSAlarmDeclared=ipadDdsOOSSAlarmDeclared, ipadModemDialCommand=ipadModemDialCommand, ipadModemDialTableIndex=ipadModemDialTableIndex, ipadHDLCConfigService=ipadHDLCConfigService, ipadDLMPacketServiceIndex=ipadDLMPacketServiceIndex, ipadEncryptionKey6=ipadEncryptionKey6, ipadDLCIstats20PercentSec=ipadDLCIstats20PercentSec, ipadDLCIstatsTxExcessCIR=ipadDLCIstatsTxExcessCIR, ipadDS0Hist24TableEntry=ipadDS0Hist24TableEntry, ipadUnitAccessTableEntry=ipadUnitAccessTableEntry, ipadEndpointForward=ipadEndpointForward, ipadTCPServerHostAccessTableEntry=ipadTCPServerHostAccessTableEntry, ipadHDLCHist24RxHighUtilSeconds=ipadHDLCHist24RxHighUtilSeconds, ipadSoftKeyDescription=ipadSoftKeyDescription, ipadFrPortStatsTx100PercentSec=ipadFrPortStatsTx100PercentSec, ipadDLCItxCIRexceeded=ipadDLCItxCIRexceeded, ipadPktSwCfgLnkMgmtType=ipadPktSwCfgLnkMgmtType, ipadHDLCConfigTxLowUtilAlarm=ipadHDLCConfigTxLowUtilAlarm, ipadOrigPingSize=ipadOrigPingSize, ipadHDLCHist30Index=ipadHDLCHist30Index, ipadPktSwCfgnN3=ipadPktSwCfgnN3, ipadHDLCHist30TxUtilization=ipadHDLCHist30TxUtilization, ipadHDLCHist30=ipadHDLCHist30, ipadPPPCfgAllowPAP=ipadPPPCfgAllowPAP, ipadPPPCfgNegIpAddress=ipadPPPCfgNegIpAddress, ipadPktSwCfgMgmtDLCI=ipadPktSwCfgMgmtDLCI, ipadModemDataSyncMethod=ipadModemDataSyncMethod, ipadPPPCfgNegMRU=ipadPPPCfgNegMRU, ipadIPTopNStatsTable=ipadIPTopNStatsTable, ipadModemDialCallbackRspScript=ipadModemDialCallbackRspScript, ipadPPPCHAPTableIndex=ipadPPPCHAPTableIndex, ipadDS0ConfigLowUtilAlarm=ipadDS0ConfigLowUtilAlarm, ipadUserIPStatReportNumber=ipadUserIPStatReportNumber, ipadUserStatsTxRatePeak=ipadUserStatsTxRatePeak, ipadMiscPortSettingsIndex=ipadMiscPortSettingsIndex, ipadDbuTrap=ipadDbuTrap, ipadFrPortTxAlmAlarm=ipadFrPortTxAlmAlarm, ipadHDLCHist24=ipadHDLCHist24, ipadUser=ipadUser, ipadPPPCHAPTableSecret=ipadPPPCHAPTableSecret, ipadSoftKeyTable=ipadSoftKeyTable, ipadEndpointType=ipadEndpointType, ipadChannelIdlePattern=ipadChannelIdlePattern, ipadFrPortStatsTxInstantPercent=ipadFrPortStatsTxInstantPercent, ipadFrPortTxThroughputExceeded=ipadFrPortTxThroughputExceeded, ipadEndpointLastChange=ipadEndpointLastChange, ipadt1e1CSSAlarmDeclared=ipadt1e1CSSAlarmDeclared, ipadHDLCRxLowAlarmDeclared=ipadHDLCRxLowAlarmDeclared, ipadFrPortStatsEntry=ipadFrPortStatsEntry, ipadDLMServiceIndex=ipadDLMServiceIndex, ipadAutoLearnDS0Boot=ipadAutoLearnDS0Boot, ipadDLCILastChange=ipadDLCILastChange, ipadSCADADevLstDevIndex=ipadSCADADevLstDevIndex, ipadOrigPingCommand=ipadOrigPingCommand, ipadUserAlarmReset=ipadUserAlarmReset, ipadDLCIstatsRxMgmtOctets=ipadDLCIstatsRxMgmtOctets, ipadFrPortStatsRx100PercentSec=ipadFrPortStatsRx100PercentSec, ipadHDLCHist30Timestamp=ipadHDLCHist30Timestamp, ipad=ipad, ipadServiceifIndex=ipadServiceifIndex, ipadFrPortStatsRxStatResp=ipadFrPortStatsRxStatResp, ipadMiscEnableServiceAware=ipadMiscEnableServiceAware, ipadSCADACfgDataDirection=ipadSCADACfgDataDirection, ipadHDLCConfigResetTimer=ipadHDLCConfigResetTimer, ipadDLCIUASAlarm=ipadDLCIUASAlarm, ipadDLCIactive=ipadDLCIactive, ipadDLCItxBEexceeded=ipadDLCItxBEexceeded, ipadMiscShdslStatusTable=ipadMiscShdslStatusTable, ipadPPPCfgNegotiationInit=ipadPPPCfgNegotiationInit, ipadPPPCfgNegIpMask=ipadPPPCfgNegIpMask, ipadTCPServerHostAccessIPAddr=ipadTCPServerHostAccessIPAddr, ipadDLCIstatsPeak=ipadDLCIstatsPeak, ipadPktSwCfgTableEntry=ipadPktSwCfgTableEntry, ipadModemDataSyncScript=ipadModemDataSyncScript, ipadFrPortStatsTxOctets=ipadFrPortStatsTxOctets, ipadUserIPStatRequestedReportSize=ipadUserIPStatRequestedReportSize, ipadDLCICompressionRxOctetsOut=ipadDLCICompressionRxOctetsOut, ipadFrPortStatsTxAvgPercent=ipadFrPortStatsTxAvgPercent, ipadTrapDestIndex=ipadTrapDestIndex, ipadDS0ConfigTableEntry=ipadDS0ConfigTableEntry, ipadUserIPPort=ipadUserIPPort, ipadDLCItxExBeThreshold=ipadDLCItxExBeThreshold, ipadPktSwCfgCIREE=ipadPktSwCfgCIREE, ipadUserIPStatGrantedReportSize=ipadUserIPStatGrantedReportSize, ipadFrPortLMIType=ipadFrPortLMIType, ipadSoftKeyIndex=ipadSoftKeyIndex, ipadHDLCHist24Timestamp=ipadHDLCHist24Timestamp, ipadRouter=ipadRouter, ipadDLCIstatsCompressionRxRatio=ipadDLCIstatsCompressionRxRatio, ipadMiscShdslConnectionStatus=ipadMiscShdslConnectionStatus, ipadUserStatsTable=ipadUserStatsTable, ipadDlciUASExceeded=ipadDlciUASExceeded, ipadFrPortStatsRxMgmtOctets=ipadFrPortStatsRxMgmtOctets, ipadHDLCRxHighAlarmDeclared=ipadHDLCRxHighAlarmDeclared, ipadTrapDest=ipadTrapDest, ipadModemDataSetupScript2=ipadModemDataSetupScript2, ipadDLCIremote=ipadDLCIremote, ipadPPPCfgAllowCHAP=ipadPPPCfgAllowCHAP, ipadDLCIstatsCompressionRxOctetsIn=ipadDLCIstatsCompressionRxOctetsIn, ipadChannelTableEntry=ipadChannelTableEntry, ipadEndpointService=ipadEndpointService, ipadFrPortStatsPeak=ipadFrPortStatsPeak, ipadDbuDailyLength=ipadDbuDailyLength, ipadModemDataTable=ipadModemDataTable, ipadTCPServerConnTableEntry=ipadTCPServerConnTableEntry, ipadPktSwCfgnT1=ipadPktSwCfgnT1, ipadDS0ConfigHighUtilStatus=ipadDS0ConfigHighUtilStatus, ipadAtm=ipadAtm, ipadUserService=ipadUserService, ipadSCADACfgDeleteDevLst=ipadSCADACfgDeleteDevLst, ipadDbuDailyTable=ipadDbuDailyTable, ipadPPPCHAPTableEntry=ipadPPPCHAPTableEntry, ipadDbuActivator1=ipadDbuActivator1, ipadFrPortStatsTimeStamp=ipadFrPortStatsTimeStamp, ipadFrPortStatsRxMaxPercent=ipadFrPortStatsRxMaxPercent, ipadDLCIstatsDelayPeak=ipadDLCIstatsDelayPeak, ipadModemDataHangupScript=ipadModemDataHangupScript, ipadDS0Hist24Index=ipadDS0Hist24Index, ipadDLCIstatsTxMgmtFrames=ipadDLCIstatsTxMgmtFrames, ipadTFTPDownload=ipadTFTPDownload, ipadPPPCfgService=ipadPPPCfgService, ipadDLCIstatsRemoteDataOfferedWithinCIR=ipadDLCIstatsRemoteDataOfferedWithinCIR, ipadTCPServerAddConnEntry=ipadTCPServerAddConnEntry, ipadDLCIRemoteDataOfferedWithinCIR=ipadDLCIRemoteDataOfferedWithinCIR, ipadDS0Hist24HistoricalIndex=ipadDS0Hist24HistoricalIndex, ipadAutoLearnDS0Rate=ipadAutoLearnDS0Rate, ipadHDLCHist30RxUtilization=ipadHDLCHist30RxUtilization, ipadDLCIproprietary=ipadDLCIproprietary, ipadModemDialPassword=ipadModemDialPassword, ipadDLCIstatsAvgPercent=ipadDLCIstatsAvgPercent, ipadOrigPingDestIPAddr=ipadOrigPingDestIPAddr, ipadModemDialTableEntry=ipadModemDialTableEntry, ipadPktSwCfgInterfaceType=ipadPktSwCfgInterfaceType, ipadDLMPacketTable=ipadDLMPacketTable, ipadUserStatsRxFrames=ipadUserStatsRxFrames, ipadDLCIstatsTimeStamp=ipadDLCIstatsTimeStamp, ipadPPPCfgCHAPUsername=ipadPPPCfgCHAPUsername, ipadPktSwCfgDefCIR=ipadPktSwCfgDefCIR, ipadModemDataTableIndex=ipadModemDataTableIndex, ipadHDLCHist30TxHighUtilSeconds=ipadHDLCHist30TxHighUtilSeconds, ipadDLCIrxMon=ipadDLCIrxMon, ipadUserFilterByVpiVci=ipadUserFilterByVpiVci, ipadHDLCHist24TxHighUtilSeconds=ipadHDLCHist24TxHighUtilSeconds, ipadDLCIstatsMaxPercent=ipadDLCIstatsMaxPercent, ipadEndpointName=ipadEndpointName, ipadDLCIstats100PercentSec=ipadDLCIstats100PercentSec, ipadDLCIstatsTxOctets=ipadDLCIstatsTxOctets, ipadEndpointTableEntry=ipadEndpointTableEntry, ipadPPPCfgNegCompression=ipadPPPCfgNegCompression, ipadDLMPatternMask=ipadDLMPatternMask, ipadModemDataTableEntry=ipadModemDataTableEntry, ipadEncryptionKey8=ipadEncryptionKey8, ipadAutoLearnDS0TableEntry=ipadAutoLearnDS0TableEntry, ipadUserIPStatTimeRemaining=ipadUserIPStatTimeRemaining, ipadPktSwCfgAutoDiscovery=ipadPktSwCfgAutoDiscovery, ipadMiscLANStatus=ipadMiscLANStatus, ipadUserStatsTxOctets=ipadUserStatsTxOctets, ipadDLCItxExCIRThreshold=ipadDLCItxExCIRThreshold, ipadSCADAStatsTxChars=ipadSCADAStatsTxChars, ipadOrigPingDelayAvg=ipadOrigPingDelayAvg, ipadMiscShdslConfigTable=ipadMiscShdslConfigTable, ipadDS0Hist30TableEntry=ipadDS0Hist30TableEntry, ipadUserFilterByIPPort=ipadUserFilterByIPPort, ipadUserTable=ipadUserTable, ipadMiscShdslAutomaticRetrain=ipadMiscShdslAutomaticRetrain, ipadFrPortStatsService=ipadFrPortStatsService, ipadDLCIstatsDdrBe=ipadDLCIstatsDdrBe, ipadModemDataSetupScript3=ipadModemDataSetupScript3, ipadModemDialUsername=ipadModemDialUsername, ipadDS0Hist30Timestamp=ipadDS0Hist30Timestamp, ipadServiceDeleteService=ipadServiceDeleteService, ipadMiscEnableButtons=ipadMiscEnableButtons, ipadUserDLCI=ipadUserDLCI, ipadIPTopNStatsTimestamp=ipadIPTopNStatsTimestamp, ipadMiscEnableSupervisoryPort=ipadMiscEnableSupervisoryPort, ipadMiscShdslStatusIndex=ipadMiscShdslStatusIndex, ipadDS0Hist30Utilization=ipadDS0Hist30Utilization, ipadFrPortStatsTx40PercentSec=ipadFrPortStatsTx40PercentSec, ipadDLCIstatsRxBECN=ipadDLCIstatsRxBECN, ipadSmtpRecipient1=ipadSmtpRecipient1, ipadPPPCfgNegDNSAddress=ipadPPPCfgNegDNSAddress, ipadDLCIstatsDataReceived=ipadDLCIstatsDataReceived, ipadPPP=ipadPPP, ipadDbuDailyTableEntry=ipadDbuDailyTableEntry, ipadDS0ConfigTable=ipadDS0ConfigTable, ipadEncryptionKey1=ipadEncryptionKey1, ipadModemDialTable=ipadModemDialTable, ipadDLCIenableDelay=ipadDLCIenableDelay, ipadService=ipadService, ipadDLCIstatsRxOctets=ipadDLCIstatsRxOctets, ipadPPPPAPTablePassword=ipadPPPPAPTablePassword, ipadSoftKey=ipadSoftKey, ipadServiceAddService=ipadServiceAddService, ipadSCADACfgLoopback=ipadSCADACfgLoopback, ipadMiscShdslDetailedConnectionStatus=ipadMiscShdslDetailedConnectionStatus, ipadServiceTable=ipadServiceTable, ipadFrPortStatsTx60PercentSec=ipadFrPortStatsTx60PercentSec, ipadTraps=ipadTraps, ipadDS0Hist30HistoricalIndex=ipadDS0Hist30HistoricalIndex, ipadDS0Hist30Table=ipadDS0Hist30Table, ipadSCADAStatsRxFramingErrors=ipadSCADAStatsRxFramingErrors, ipadPPPCHAPTable=ipadPPPCHAPTable, ipadTCPServerEnable=ipadTCPServerEnable, ipadDS0HighAlarmDeclared=ipadDS0HighAlarmDeclared, ipadHDLCConfigTable=ipadHDLCConfigTable, ipadFrPortRxAlmThreshold=ipadFrPortRxAlmThreshold)
mibBuilder.exportSymbols("IPADv2-MIB", ipadTFTPDownloadAction=ipadTFTPDownloadAction, ipadSoftKeyExpirationDate=ipadSoftKeyExpirationDate, ipadDLMPacketTimestamp=ipadDLMPacketTimestamp, ipadDLCIstatsRemoteFramesOfferedWithinCIR=ipadDLCIstatsRemoteFramesOfferedWithinCIR, ipadSmtpRecipient2=ipadSmtpRecipient2, ipadDLMConfigMode=ipadDLMConfigMode, ipadModemDataSetupScript4=ipadModemDataSetupScript4, ipadMiscBootupConsoleAvail=ipadMiscBootupConsoleAvail, ipadDLCIrxBECNinCIR=ipadDLCIrxBECNinCIR, ipadSmtpRecipient3=ipadSmtpRecipient3, ipadDbuDailyIndex=ipadDbuDailyIndex, ipadDLCItxExCIRAlarm=ipadDLCItxExCIRAlarm, ipadDLCIstatsCompressionTxOctetsIn=ipadDLCIstatsCompressionTxOctetsIn, ipadEncryptionKeyLife=ipadEncryptionKeyLife, ipadChannelIndex=ipadChannelIndex, ipadModemDialNumber=ipadModemDialNumber, ipadEncryptionKey7=ipadEncryptionKey7, ipadFrPortStatsRx20PercentSec=ipadFrPortStatsRx20PercentSec, ipadDLCIDataReceived=ipadDLCIDataReceived, ipadDLCIstatsFdrCir=ipadDLCIstatsFdrCir, ipadHDLCConfigTxHighUtilStatus=ipadHDLCConfigTxHighUtilStatus, ipadHDLCTxLowAlarmDeclared=ipadHDLCTxLowAlarmDeclared, ipadModemDialCallbackChalScript=ipadModemDialCallbackChalScript, ipadDhcp=ipadDhcp, ipadDLCIstatsTxMgmtOctets=ipadDLCIstatsTxMgmtOctets, ipadDLCIstatsFdrBe=ipadDLCIstatsFdrBe, ipadDLCIstats80PercentSec=ipadDLCIstats80PercentSec, ipadSoftKeyAcronym=ipadSoftKeyAcronym, ipadEncryptionEnable=ipadEncryptionEnable, ipadUnitAccessIpa=ipadUnitAccessIpa, ipadDLCIinBand=ipadDLCIinBand, ipadSoftKeyEntry=ipadSoftKeyEntry, ipadHDLCConfig=ipadHDLCConfig, ipadPPPCfgEndpoint=ipadPPPCfgEndpoint, ipadMiscShdslConfigIndex=ipadMiscShdslConfigIndex, ipadDLCICompressionTxOctetsOut=ipadDLCICompressionTxOctetsOut, ipadUserIPMask=ipadUserIPMask, ipadPPPCfgAuthChallengeInterval=ipadPPPCfgAuthChallengeInterval, ipadDLCIminBC=ipadDLCIminBC, ipadDS0Hist24Timestamp=ipadDS0Hist24Timestamp, ipadHDLCConfigTxHighUtilThreshold=ipadHDLCConfigTxHighUtilThreshold, ipadPPPCfgInactivityTimer=ipadPPPCfgInactivityTimer, ipadServicePair=ipadServicePair, ipadUserTableEntry=ipadUserTableEntry, ipadDLMTxRxFilter=ipadDLMTxRxFilter, ipadDLCIstatsTxExcessBe=ipadDLCIstatsTxExcessBe, ipadModemDialSecurity=ipadModemDialSecurity, ipadMiscShdslStationTimingNxMultiple=ipadMiscShdslStationTimingNxMultiple, ipadModemDialRedialAttempts=ipadModemDialRedialAttempts, ipadSCADAStats=ipadSCADAStats, ipadOrigPingReport=ipadOrigPingReport, ipadFrPortStatsTxMaxPercent=ipadFrPortStatsTxMaxPercent, ipadDLCICompressionRxOctetsIn=ipadDLCICompressionRxOctetsIn, ipadFrPortStatsRxOctets=ipadFrPortStatsRxOctets, ipadTCPServerConnEnableEntry=ipadTCPServerConnEnableEntry, ipadUserVpi=ipadUserVpi, ipadModemDialChallengeScript=ipadModemDialChallengeScript, ipadMiscShdslStatusEntry=ipadMiscShdslStatusEntry, ipadHDLCConfigRxHighUtilStatus=ipadHDLCConfigRxHighUtilStatus, ipadserialDteDTRAlarmExists=ipadserialDteDTRAlarmExists, ipadFrPortStatsRxStatInq=ipadFrPortStatsRxStatInq, ipadEncryptionStartupKeyConfirm=ipadEncryptionStartupKeyConfirm, ipadEncryptionKey2=ipadEncryptionKey2, ipadHDLCHist30RxHighUtilSeconds=ipadHDLCHist30RxHighUtilSeconds, ipadSCADADevLstTableEntry=ipadSCADADevLstTableEntry, ipadFrPortActive=ipadFrPortActive, ipadModemDialStatus=ipadModemDialStatus, ipadDLCIFramesReceived=ipadDLCIFramesReceived, ipadEncryptionKey5=ipadEncryptionKey5, ipadDLMPattern=ipadDLMPattern, ipadPPPCfgCHAPSecret=ipadPPPCfgCHAPSecret, ipadUserIPStatStartTime=ipadUserIPStatStartTime, ipadPPPCfgTable=ipadPPPCfgTable, ipadSmtpDomainName=ipadSmtpDomainName, ipadHDLCConfigTxLowUtil=ipadHDLCConfigTxLowUtil, ipadDbuTableEntry=ipadDbuTableEntry, ipadSmtpRecipient4=ipadSmtpRecipient4, ipadUserTxAlmThreshold=ipadUserTxAlmThreshold, ipadHDLCConfigRxHighUtilAlarm=ipadHDLCConfigRxHighUtilAlarm, ipadDLCITableEntry=ipadDLCITableEntry, ipadDLCItxExBeAlarm=ipadDLCItxExBeAlarm, ipadHDLCHist30Table=ipadHDLCHist30Table, ipadDLCIstatsCompressionTxRatio=ipadDLCIstatsCompressionTxRatio, ipadPktSwCfgTable=ipadPktSwCfgTable, ipadIPTopNStatsIndex=ipadIPTopNStatsIndex, ipadDLCIstatsRxMgmtFrames=ipadDLCIstatsRxMgmtFrames, ipadDLCIstatsRoundTripTimeouts=ipadDLCIstatsRoundTripTimeouts, ipadModemDialDelayBeforeRedial=ipadModemDialDelayBeforeRedial, ipadIPTopNStatsTxOctets=ipadIPTopNStatsTxOctets, ipadDbuActivated=ipadDbuActivated, ipadModemDataDialingScript=ipadModemDataDialingScript, ipadSCADAStatsTableEntry=ipadSCADAStatsTableEntry, ipadOrigPingReplies=ipadOrigPingReplies, ipadUnitAccessTable=ipadUnitAccessTable, ipadDLCICompressionTxOctetsIn=ipadDLCICompressionTxOctetsIn, ipadTCPServerDeleteConnEntry=ipadTCPServerDeleteConnEntry, ipadt1e1BPVSAlarmDeclared=ipadt1e1BPVSAlarmDeclared, ipadAutoLearnDS0Index=ipadAutoLearnDS0Index, ipadOrigPingTimeout=ipadOrigPingTimeout, ipadDLCIstatsFramesReceived=ipadDLCIstatsFramesReceived, ipadTCPServerConnEndpoint=ipadTCPServerConnEndpoint, ipadEndpointBackup=ipadEndpointBackup, ipadPPPCfgTableEntry=ipadPPPCfgTableEntry, ipadFrPortStatsTxStatInq=ipadFrPortStatsTxStatInq, ipadAutoLearnDS0=ipadAutoLearnDS0, ipadHDLCConfigTxHighUtil=ipadHDLCConfigTxHighUtil, ipadHDLCConfigRxLowUtilAlarm=ipadHDLCConfigRxLowUtilAlarm, ipadt1e1UASAlarmDeclared=ipadt1e1UASAlarmDeclared, ipadUserFilterByIPAddress=ipadUserFilterByIPAddress, ipadDLCIstatsInstantPercent=ipadDLCIstatsInstantPercent, ipadHDLCHist30HistoricalIndex=ipadHDLCHist30HistoricalIndex, ipadDLMPacketDataDirection=ipadDLMPacketDataDirection, ipadHDLCHist30TableEntry=ipadHDLCHist30TableEntry, ipadUserTxExceeded=ipadUserTxExceeded, ipadDataLineMonitor=ipadDataLineMonitor, ipadFrPortStatsTxStatResp=ipadFrPortStatsTxStatResp, ipadHDLCHist24TableEntry=ipadHDLCHist24TableEntry, ipadMiscShdslTiming=ipadMiscShdslTiming, ipadMiscShdslStationInTiming=ipadMiscShdslStationInTiming, ipadUnitAccessMask=ipadUnitAccessMask, ipadPPPCfgPAPPassword=ipadPPPCfgPAPPassword, ipadHDLCConfigReset=ipadHDLCConfigReset, ipadSCADAConfigTableEntry=ipadSCADAConfigTableEntry, ipadDS0ConfigHighUtilCount=ipadDS0ConfigHighUtilCount, ipadDLCI=ipadDLCI, ipadSCADADevLstEntryStatus=ipadSCADADevLstEntryStatus, ipadDdsOOFSAlarmDeclared=ipadDdsOOFSAlarmDeclared, ipadServiceTableEntry=ipadServiceTableEntry, ipadPktSwCfgnN1=ipadPktSwCfgnN1, ipadDbuIndex=ipadDbuIndex, ipadDLCIstatsEntry=ipadDLCIstatsEntry, ipadNat=ipadNat, ipadEndpointRemoteIpMask=ipadEndpointRemoteIpMask, ipadFrPortTableEntry=ipadFrPortTableEntry, ipadDLCIrxCongThreshold=ipadDLCIrxCongThreshold, ipadSCADAStatsClear=ipadSCADAStatsClear, ipadDbuStatus=ipadDbuStatus, ipadDS0ConfigHighUtil=ipadDS0ConfigHighUtil, ipadChannelRate=ipadChannelRate, ipadFrPortStatsRxInstantPercent=ipadFrPortStatsRxInstantPercent, ipadFrPortAlarmReset=ipadFrPortAlarmReset, ipadSCADACfgIdleCharDelay=ipadSCADACfgIdleCharDelay, ipadPktSwCfgNormalTxQueueSize=ipadPktSwCfgNormalTxQueueSize, ipadTrapsPrefix=ipadTrapsPrefix, ipadHDLCConfigRxHighUtil=ipadHDLCConfigRxHighUtil, ipadUserIPStatDiscardType=ipadUserIPStatDiscardType, ipadDLMPacketTableEntry=ipadDLMPacketTableEntry, ipadDLCIstatsRemoteFramesOfferedWithinBE=ipadDLCIstatsRemoteFramesOfferedWithinBE, ipadDS0Hist24=ipadDS0Hist24, ipadEndpointRemoteIpAddr=ipadEndpointRemoteIpAddr, ipadFrPortStatsPeriod=ipadFrPortStatsPeriod, ipadt1e1ESAlarmDeclared=ipadt1e1ESAlarmDeclared, ipadPPPCfgSubnetMask=ipadPPPCfgSubnetMask, ipadPktSwCfgLinkInjection=ipadPktSwCfgLinkInjection, ipadFrPortRxInvAlmAlarm=ipadFrPortRxInvAlmAlarm, ipadFrPortService=ipadFrPortService, ipadSCADACfgMessageSize=ipadSCADACfgMessageSize, ipadAutoLearnDS0Command=ipadAutoLearnDS0Command, ipadDS0Hist30Index=ipadDS0Hist30Index, ipadTCPServerConnIndex=ipadTCPServerConnIndex, ipadDLMTable=ipadDLMTable, ipadEndpointDLCInumber=ipadEndpointDLCInumber, ipadDS0ConfigHighUtilAlarm=ipadDS0ConfigHighUtilAlarm, ipadModemDialCallbackRedialDelay=ipadModemDialCallbackRedialDelay, ipadDLCIpropOffset=ipadDLCIpropOffset, ipadServiceType=ipadServiceType, ipadSCADACfgAddDevLst=ipadSCADACfgAddDevLst, ipadPktSwCfgAutoIPMgmtAddr=ipadPktSwCfgAutoIPMgmtAddr, ipadTrapDestTableEntry=ipadTrapDestTableEntry, ipadMiscShdslDetailedConnectionStatusPair2=ipadMiscShdslDetailedConnectionStatusPair2, ipadPPPPAPTableIndex=ipadPPPPAPTableIndex, ipadIPTopNStatsRxOctets=ipadIPTopNStatsRxOctets, ipadUserStatsEntry=ipadUserStatsEntry, ipadChannelPair=ipadChannelPair, ipadHDLCConfigServiceBPS=ipadHDLCConfigServiceBPS, ipadEncryptionType=ipadEncryptionType, ipadUserStatsRxOctets=ipadUserStatsRxOctets, ipadOrigPingDelayMax=ipadOrigPingDelayMax, ipadEncryptionKey9=ipadEncryptionKey9, ipadMiscShdslConfigEntry=ipadMiscShdslConfigEntry, ipadPktSwCfgRoundTripDelaySize=ipadPktSwCfgRoundTripDelaySize, ipadModemDialCallbackTimeout=ipadModemDialCallbackTimeout, ipadPPPPAPTableEntry=ipadPPPPAPTableEntry, ipadPktSwCfgAutoDiagnostic=ipadPktSwCfgAutoDiagnostic, ipadFrPortLMIMode=ipadFrPortLMIMode, ipadDLCIstatsUAS=ipadDLCIstatsUAS, ipadDS0LowAlarmDeclared=ipadDS0LowAlarmDeclared, ipadDLCIstatsDDRCIR=ipadDLCIstatsDDRCIR, ipadDdsBPVSAlarmDeclared=ipadDdsBPVSAlarmDeclared, ipadIPTopNStatsAddress=ipadIPTopNStatsAddress, ipadDLMPatternEnable=ipadDLMPatternEnable, ipadBridge=ipadBridge, ipadPktSwCfgRoundTripDelayRate=ipadPktSwCfgRoundTripDelayRate, ipadDdsFDLSAlarmDeclared=ipadDdsFDLSAlarmDeclared, ipadDLCIstatsRemoteDataOfferedWithinBE=ipadDLCIstatsRemoteDataOfferedWithinBE, ipadDLCICompressionStatus=ipadDLCICompressionStatus, ipadDbuTrapDelay=ipadDbuTrapDelay, ipadDLCIBe=ipadDLCIBe, ipadPktSwCfgDeleteDLCI=ipadPktSwCfgDeleteDLCI, ipadUserIndex=ipadUserIndex, ipadDbuDailyStart=ipadDbuDailyStart, ipadDbuDailyDayOfWeek=ipadDbuDailyDayOfWeek, ipadUserStatsTxFrames=ipadUserStatsTxFrames, ipadSvcAware=ipadSvcAware, ipadDLCIstatsAverage=ipadDLCIstatsAverage, ipadDLCIstatsRxFrames=ipadDLCIstatsRxFrames, ipadSmtpMailFrom=ipadSmtpMailFrom, ipadPPPCfgDialMode=ipadPPPCfgDialMode, ipadTCPServerConnTable=ipadTCPServerConnTable, ipadSCADAStatsRxChars=ipadSCADAStatsRxChars, ipadSCADAConfig=ipadSCADAConfig, ipadDLCIremoteEquipActive=ipadDLCIremoteEquipActive, ipadModemDataModemName=ipadModemDataModemName, ipadDS0Hist30=ipadDS0Hist30, ipadDLCITable=ipadDLCITable, ipadUserVci=ipadUserVci, ipadDbuActivator2=ipadDbuActivator2, ipadUserStatsTxRateAverage=ipadUserStatsTxRateAverage, ipadMisc=ipadMisc, ipadSCADADevLstIndex=ipadSCADADevLstIndex, ipadDdsLOSSAlarmDeclared=ipadDdsLOSSAlarmDeclared, ipadDLCIdEctrl=ipadDLCIdEctrl, ipadSCADAStatsTable=ipadSCADAStatsTable, ipadEncryptionStartupKey=ipadEncryptionStartupKey, ipadEncryption=ipadEncryption, ipadFrPortRxInvalidFramesExceeded=ipadFrPortRxInvalidFramesExceeded, ipadFrPortStatsRx80PercentSec=ipadFrPortStatsRx80PercentSec, ipadMiscShdslEOCOutMessages=ipadMiscShdslEOCOutMessages, ipadEncryptionKey4=ipadEncryptionKey4, ipadTrapDestination=ipadTrapDestination, ipadHDLCConfigIndex=ipadHDLCConfigIndex, ipadFrPortStatsTx20PercentSec=ipadFrPortStatsTx20PercentSec, ipadSCADACfgInputTerminator=ipadSCADACfgInputTerminator, ipadTCPServer=ipadTCPServer, ipadMiscShdslTerminalType=ipadMiscShdslTerminalType, ipadSmtpMailServer=ipadSmtpMailServer, ipadt1e1OOFSAlarmDeclared=ipadt1e1OOFSAlarmDeclared, ipadDLCIcongestion=ipadDLCIcongestion, ipadModemDataSetupScript=ipadModemDataSetupScript, ipadTFTPDownloadServerIpa=ipadTFTPDownloadServerIpa, ipadDLCIremoteSOSAlarm=ipadDLCIremoteSOSAlarm, ipadSCADAStatsRxMsgs=ipadSCADAStatsRxMsgs, ipadServiceStatus=ipadServiceStatus, ipadTCPServerHostAccessTable=ipadTCPServerHostAccessTable, ipadUserIPStatTimeDuration=ipadUserIPStatTimeDuration, ipadDLCIRemoteFramesOfferedWithinBE=ipadDLCIRemoteFramesOfferedWithinBE, ipadPPPCfgNegPAP=ipadPPPCfgNegPAP, ipadEndpoint=ipadEndpoint, ipadAutoLearnDS0Table=ipadAutoLearnDS0Table, ipadEndpointAddEndpoint=ipadEndpointAddEndpoint, ipadHDLCConfigTxHighUtilCount=ipadHDLCConfigTxHighUtilCount, ipadUserFilterByDLCI=ipadUserFilterByDLCI, ipadMiscClearStatusCounts=ipadMiscClearStatusCounts, ipadDbuMonitoredifIndex=ipadDbuMonitoredifIndex)
mibBuilder.exportSymbols("IPADv2-MIB", ipadDLCIstats40PercentSec=ipadDLCIstats40PercentSec, ipadHDLCConfigTxHighUtilAlarm=ipadHDLCConfigTxHighUtilAlarm, ipadDS0ConfigHighUtilThreshold=ipadDS0ConfigHighUtilThreshold, ipadDLCIAlarmReset=ipadDLCIAlarmReset, ipadDLCIstatsCompressionRxOctetsOut=ipadDLCIstatsCompressionRxOctetsOut, ipadModem=ipadModem, ipadMiscShdslEOCInMessages=ipadMiscShdslEOCInMessages, ipadDLCIrxCongAlarm=ipadDLCIrxCongAlarm, ipadDS0ConfigLowUtil=ipadDS0ConfigLowUtil, ipadDLCIencapsulation=ipadDLCIencapsulation, ipadOrigPing=ipadOrigPing, ipadPPPPAPTable=ipadPPPPAPTable, ipadDS0ConfigIndex=ipadDS0ConfigIndex, ipadDLCIstatsFDRCIR=ipadDLCIstatsFDRCIR, ipadChannelifIndex=ipadChannelifIndex, ipadMiscShdslConnectionStatusPair2=ipadMiscShdslConnectionStatusPair2, ipadUnitAccessIndex=ipadUnitAccessIndex, ipadFrPortStatsRxFECN=ipadFrPortStatsRxFECN, ipadIPTopNStatsTxFrames=ipadIPTopNStatsTxFrames, ipadDLCICIR=ipadDLCICIR, ipadPktSwCfgDefExBurst=ipadPktSwCfgDefExBurst, ipadOrigPingExceptReport=ipadOrigPingExceptReport, ipadDLMPatternOffset=ipadDLMPatternOffset, ipadFrPortStatsRxMgmtFrames=ipadFrPortStatsRxMgmtFrames, ipadDLCIRoundTripDelaySize=ipadDLCIRoundTripDelaySize, ipadDS0ConfigResetTimer=ipadDS0ConfigResetTimer, ipadMiscPortSettingsModemControl=ipadMiscPortSettingsModemControl, ipadDLCInumber=ipadDLCInumber, ipadUnitAccess=ipadUnitAccess, ipadPktSwOperatingMode=ipadPktSwOperatingMode, ipadTCPServerConnLocalPort=ipadTCPServerConnLocalPort, ipadDLMPacketIndex=ipadDLMPacketIndex, ipadEndpointDeleteEndpoint=ipadEndpointDeleteEndpoint, ipadEndpointRefSLP=ipadEndpointRefSLP, ipadDLCIstatsFDRBE=ipadDLCIstatsFDRBE, ipadDbuOperation=ipadDbuOperation, ipadFrPortRxInvAlmThreshold=ipadFrPortRxInvAlmThreshold, ipadDLCIstatsService=ipadDLCIstatsService, PYSNMP_MODULE_ID=ipad, ipadMiscEnableLEDs=ipadMiscEnableLEDs, ipadMiscDisableLAN=ipadMiscDisableLAN, ipadSCADACfgIndex=ipadSCADACfgIndex, ipadDLMPacketData=ipadDLMPacketData, ipadOrigPingDelayMin=ipadOrigPingDelayMin, ipadPktSwCfgnN2=ipadPktSwCfgnN2, ipadDS0ConfigNumberDS0=ipadDS0ConfigNumberDS0, ipadModemDataSetupScript5=ipadModemDataSetupScript5, ipadHDLCHist24HistoricalIndex=ipadHDLCHist24HistoricalIndex, ipadHDLCHist24Index=ipadHDLCHist24Index, ipadChannelTable=ipadChannelTable, ipadHDLCConfigRxLowUtil=ipadHDLCConfigRxLowUtil, ipadFrPortStatsRxFrames=ipadFrPortStatsRxFrames, ipadSCADACfgProtocol=ipadSCADACfgProtocol, ipadFrPortStatsTable=ipadFrPortStatsTable, ipadMiscPortSettingsEntry=ipadMiscPortSettingsEntry, ipadEndpointIndex=ipadEndpointIndex, ipadFrPortStatsRxInvLMI=ipadFrPortStatsRxInvLMI, ipadDLMEnable=ipadDLMEnable, ipadModemDialLoginScript=ipadModemDialLoginScript, ipadt1e1AISAlarmExists=ipadt1e1AISAlarmExists, ipadDS0Hist30HighUtilSeconds=ipadDS0Hist30HighUtilSeconds, ipadMiscPortSettingsSerialType=ipadMiscPortSettingsSerialType, ipadDLCIRoundTripDelayRate=ipadDLCIRoundTripDelayRate, ipadt1e1LOSSAlarmDeclared=ipadt1e1LOSSAlarmDeclared, ipadDLCIUASThreshold=ipadDLCIUASThreshold, ipadHDLCConfigTableEntry=ipadHDLCConfigTableEntry, ipadEndpointTable=ipadEndpointTable, ipadModemDialAnswerRings=ipadModemDialAnswerRings, ipadDLCIstatsTable=ipadDLCIstatsTable, ipadModemDialDataIndex=ipadModemDialDataIndex, ipadDLCIstatsDLCI=ipadDLCIstatsDLCI, ipadDLCIstatsCompressionTxOctetsOut=ipadDLCIstatsCompressionTxOctetsOut, ipadFrPortStatsRxBECN=ipadFrPortStatsRxBECN, ipadTFTPDownloadStatus=ipadTFTPDownloadStatus, ipadDLCIremoteUnit=ipadDLCIremoteUnit, ipadt1e1RASAlarmExists=ipadt1e1RASAlarmExists, ipadChannel=ipadChannel, ipadFrPortStatsRxAvgPercent=ipadFrPortStatsRxAvgPercent, ipadPktSwCfgService=ipadPktSwCfgService, ipadEncryptionKey3=ipadEncryptionKey3, ipadFrPortTxAlmThreshold=ipadFrPortTxAlmThreshold, ipadOrigPingToSend=ipadOrigPingToSend, ipadSCADADevLst=ipadSCADADevLst, ipadDS0Hist24Table=ipadDS0Hist24Table, ipadDLCIstatsRxFECN=ipadDLCIstatsRxFECN, ipadModemDataAnswerScript=ipadModemDataAnswerScript, ipadTCPServerHostAccessIndex=ipadTCPServerHostAccessIndex, ipadHDLCHist24RxUtilization=ipadHDLCHist24RxUtilization, ipadUserStatsIndex=ipadUserStatsIndex, ipadFrPortStatsRx60PercentSec=ipadFrPortStatsRx60PercentSec, ipadDLCIstatsPeriod=ipadDLCIstatsPeriod, ipadUserTxAlmAlarm=ipadUserTxAlmAlarm, ipadMiscPortSettings=ipadMiscPortSettings, ipadSCADADevLstEndpointName=ipadSCADADevLstEndpointName, ipadDLCIRxCongestionExceeded=ipadDLCIRxCongestionExceeded, ipadSmtp=ipadSmtp, ipadDLCIstatsValidIntervals=ipadDLCIstatsValidIntervals, ipadUserIPAddress=ipadUserIPAddress, ipadSCADAStatsTxMsgs=ipadSCADAStatsTxMsgs, ipadEncryptionKey10=ipadEncryptionKey10, ipadDLCIstatsDdrCir=ipadDLCIstatsDdrCir, ipadDLCIstatsTxFrames=ipadDLCIstatsTxFrames, ipadPPPCfgPortIpAddress=ipadPPPCfgPortIpAddress, ipadSCADAStatsIndex=ipadSCADAStatsIndex, ipadFrPortStatsValidIntervals=ipadFrPortStatsValidIntervals, ipadDLCIstatsDelayAverage=ipadDLCIstatsDelayAverage, ipadIPTopNStatsEntry=ipadIPTopNStatsEntry, ipadDLMConfigBufferManagement=ipadDLMConfigBufferManagement, ipadFrPortRxThroughputExceeded=ipadFrPortRxThroughputExceeded, ipadDLCIstatsRxDE=ipadDLCIstatsRxDE, ipadDLCIstatsDDRBE=ipadDLCIstatsDDRBE, ipadDS0Hist24Utilization=ipadDS0Hist24Utilization, ipadDS0ConfigReset=ipadDS0ConfigReset, ipadPPPCfgNegMagic=ipadPPPCfgNegMagic, ipadModemDialAbortTimer=ipadModemDialAbortTimer, ipadPktSwCfgMaxFrameSize=ipadPktSwCfgMaxFrameSize, ipadServiceIndex=ipadServiceIndex, ipadUserStatsTimeStamp=ipadUserStatsTimeStamp, ipadHDLCTxHighAlarmDeclared=ipadHDLCTxHighAlarmDeclared, ipadPktSwitch=ipadPktSwitch, ipadHDLCConfigRxHighUtilCount=ipadHDLCConfigRxHighUtilCount, ipadDLMConfig=ipadDLMConfig)
