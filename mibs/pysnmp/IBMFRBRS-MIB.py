#
# PySNMP MIB module IBMFRBRS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMFRBRS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, MibIdentifier, NotificationType, iso, Bits, ObjectIdentity, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, enterprises, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "MibIdentifier", "NotificationType", "iso", "Bits", "ObjectIdentity", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "enterprises", "ModuleIdentity", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibmfrBRS = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4))
ibmfrBRSOperational = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1))
ibmfrBRSAdministravive = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 2))
ibmfrBRSInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 1), )
if mibBuilder.loadTexts: ibmfrBRSInterfaceTable.setStatus('mandatory')
ibmfrBRSInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmfrBRSInterfaceEntry.setStatus('mandatory')
ibmfrBRSInterfaceMaxQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSInterfaceMaxQueue.setStatus('mandatory')
ibmfrBRSInterfaceMinQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSInterfaceMinQueue.setStatus('mandatory')
ibmfrBRSInterfaceTotalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSInterfaceTotalBandwidth.setStatus('mandatory')
ibmfrBRSInterfaceTotalCircuitClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSInterfaceTotalCircuitClasses.setStatus('mandatory')
ibmfrBRSInterfaceDefaultCircuitClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSInterfaceDefaultCircuitClassName.setStatus('mandatory')
ibmfrBRSCircuitClassTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2), )
if mibBuilder.loadTexts: ibmfrBRSCircuitClassTable.setStatus('mandatory')
ibmfrBRSCircuitClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IBMFRBRS-MIB", "ibmfrBRSCircuitClassName"))
if mibBuilder.loadTexts: ibmfrBRSCircuitClassEntry.setStatus('mandatory')
ibmfrBRSCircuitClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: ibmfrBRSCircuitClassName.setStatus('mandatory')
ibmfrBRSCircuitClassBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitClassBandwidth.setStatus('mandatory')
ibmfrBRSCircuitClassPacketXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitClassPacketXmit.setStatus('mandatory')
ibmfrBRSCircuitClassBytesXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitClassBytesXmit.setStatus('mandatory')
ibmfrBRSCircuitClassBytesOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitClassBytesOverflow.setStatus('mandatory')
ibmfrBRSCircuitClassLastPacketXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitClassLastPacketXmit.setStatus('mandatory')
ibmfrBRSCircuitClassLastBytesXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitClassLastBytesXmit.setStatus('mandatory')
ibmfrBRSCircuitClassLastBytesOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitClassLastBytesOverflow.setStatus('mandatory')
ibmfrBRSCircuitClassClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmfrBRSCircuitClassClearCounters.setStatus('mandatory')
ibmfrBRSCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3), )
if mibBuilder.loadTexts: ibmfrBRSCircuitTable.setStatus('mandatory')
ibmfrBRSCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IBMFRBRS-MIB", "ibmfrBRSCircuitClassName"), (0, "IBMFRBRS-MIB", "ibmfrBRSCircuitNumber"))
if mibBuilder.loadTexts: ibmfrBRSCircuitEntry.setStatus('mandatory')
ibmfrBRSCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: ibmfrBRSCircuitNumber.setStatus('mandatory')
ibmfrBRSCircuitMaxQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitMaxQueue.setStatus('mandatory')
ibmfrBRSCircuitMinQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitMinQueue.setStatus('mandatory')
ibmfrBRSCircuitTotalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitTotalBandwidth.setStatus('mandatory')
ibmfrBRSCircuitTotalTrafficClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitTotalTrafficClasses.setStatus('mandatory')
ibmfrBRSCircuitDefaultTrafficClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitDefaultTrafficClassName.setStatus('mandatory')
ibmfrBRSCircuitDefaultTrafficClassPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("normal", 2), ("high", 3), ("urgent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitDefaultTrafficClassPrio.setStatus('mandatory')
ibmfrBRSCircuitSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("defaults", 1), ("specific", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitSpecification.setStatus('mandatory')
ibmfrBRSCircuitSuperClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitSuperClassName.setStatus('mandatory')
ibmfrBRSCircuitSVCName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSCircuitSVCName.setStatus('mandatory')
ibmfrBRSTrafficClassTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4), )
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTable.setStatus('mandatory')
ibmfrBRSTrafficClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IBMFRBRS-MIB", "ibmfrBRSCircuitClassName"), (0, "IBMFRBRS-MIB", "ibmfrBRSCircuitNumber"), (0, "IBMFRBRS-MIB", "ibmfrBRSTrafficClassName"))
if mibBuilder.loadTexts: ibmfrBRSTrafficClassEntry.setStatus('mandatory')
ibmfrBRSTrafficClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: ibmfrBRSTrafficClassName.setStatus('mandatory')
ibmfrBRSTrafficClassBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBandwidth.setStatus('mandatory')
ibmfrBRSTrafficClassTotalPacketXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTotalPacketXmit.setStatus('mandatory')
ibmfrBRSTrafficClassPacketXmitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassPacketXmitLow.setStatus('mandatory')
ibmfrBRSTrafficClassPacketXmitNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassPacketXmitNormal.setStatus('mandatory')
ibmfrBRSTrafficClassPacketXmitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassPacketXmitHigh.setStatus('mandatory')
ibmfrBRSTrafficClassPacketXmitUrgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassPacketXmitUrgent.setStatus('mandatory')
ibmfrBRSTrafficClassTotalBytesXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTotalBytesXmit.setStatus('mandatory')
ibmfrBRSTrafficClassBytesXmitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBytesXmitLow.setStatus('mandatory')
ibmfrBRSTrafficClassBytesXmitNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBytesXmitNormal.setStatus('mandatory')
ibmfrBRSTrafficClassBytesXmitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBytesXmitHigh.setStatus('mandatory')
ibmfrBRSTrafficClassBytesXmitUrgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBytesXmitUrgent.setStatus('mandatory')
ibmfrBRSTrafficClassTotalBytesOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTotalBytesOverflow.setStatus('mandatory')
ibmfrBRSTrafficClassBytesOverflowLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBytesOverflowLow.setStatus('mandatory')
ibmfrBRSTrafficClassBytesOverflowNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBytesOverflowNormal.setStatus('mandatory')
ibmfrBRSTrafficClassBytesOverflowHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBytesOverflowHigh.setStatus('mandatory')
ibmfrBRSTrafficClassBytesOverflowUrgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassBytesOverflowUrgent.setStatus('mandatory')
ibmfrBRSTrafficClassTotalPacketOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTotalPacketOverflow.setStatus('mandatory')
ibmfrBRSTrafficClassPacketOverflowLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassPacketOverflowLow.setStatus('mandatory')
ibmfrBRSTrafficClassPacketOverflowNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassPacketOverflowNormal.setStatus('mandatory')
ibmfrBRSTrafficClassPacketOverflowHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassPacketOverflowHigh.setStatus('mandatory')
ibmfrBRSTrafficClassPacketOverflowUrgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassPacketOverflowUrgent.setStatus('mandatory')
ibmfrBRSTrafficClassTotalLastPacketXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTotalLastPacketXmit.setStatus('mandatory')
ibmfrBRSTrafficClassLastPacketXmitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastPacketXmitLow.setStatus('mandatory')
ibmfrBRSTrafficClassLastPacketXmitNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastPacketXmitNormal.setStatus('mandatory')
ibmfrBRSTrafficClassLastPacketXmitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastPacketXmitHigh.setStatus('mandatory')
ibmfrBRSTrafficClassLastPacketXmitUrgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastPacketXmitUrgent.setStatus('mandatory')
ibmfrBRSTrafficClassTotalLastBytesXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTotalLastBytesXmit.setStatus('mandatory')
ibmfrBRSTrafficClassLastBytesXmitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastBytesXmitLow.setStatus('mandatory')
ibmfrBRSTrafficClassLastBytesXmitNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastBytesXmitNormal.setStatus('mandatory')
ibmfrBRSTrafficClassLastBytesXmitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastBytesXmitHigh.setStatus('mandatory')
ibmfrBRSTrafficClassLastBytesXmitUrgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastBytesXmitUrgent.setStatus('mandatory')
ibmfrBRSTrafficClassTotalLastBytesOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTotalLastBytesOverflow.setStatus('mandatory')
ibmfrBRSTrafficClassLastBytesOverflowLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastBytesOverflowLow.setStatus('mandatory')
ibmfrBRSTrafficClassLastBytesOverflowNmal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastBytesOverflowNmal.setStatus('mandatory')
ibmfrBRSTrafficClassLastBytesOverflowHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastBytesOverflowHigh.setStatus('mandatory')
ibmfrBRSTrafficClassLastBytesOverflowUgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastBytesOverflowUgent.setStatus('mandatory')
ibmfrBRSTrafficClassTotalLastPacketOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassTotalLastPacketOverflow.setStatus('mandatory')
ibmfrBRSTrafficClassLastPacketOverflowLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastPacketOverflowLow.setStatus('mandatory')
ibmfrBRSTrafficClassLastPacketOverflowNmal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastPacketOverflowNmal.setStatus('mandatory')
ibmfrBRSTrafficClassLastPacketOverflowHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastPacketOverflowHigh.setStatus('mandatory')
ibmfrBRSTrafficClassLastPacketOverflowUgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassLastPacketOverflowUgent.setStatus('mandatory')
ibmfrBRSTrafficClassClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassClearCounters.setStatus('mandatory')
ibmfrBRSTrafficClassSVCName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 4, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSTrafficClassSVCName.setStatus('mandatory')
ibmfrBRSProtFiltTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 5), )
if mibBuilder.loadTexts: ibmfrBRSProtFiltTable.setStatus('mandatory')
ibmfrBRSProtFiltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IBMFRBRS-MIB", "ibmfrBRSCircuitClassName"), (0, "IBMFRBRS-MIB", "ibmfrBRSCircuitNumber"), (0, "IBMFRBRS-MIB", "ibmfrBRSTrafficClassName"), (0, "IBMFRBRS-MIB", "ibmfrBRSProtFiltId"))
if mibBuilder.loadTexts: ibmfrBRSProtFiltEntry.setStatus('mandatory')
ibmfrBRSProtFiltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 5, 1, 1), DisplayString())
if mibBuilder.loadTexts: ibmfrBRSProtFiltId.setStatus('mandatory')
ibmfrBRSProtFiltPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("normal", 2), ("high", 3), ("urgent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSProtFiltPrio.setStatus('mandatory')
ibmfrBRSProtFiltDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSProtFiltDE.setStatus('mandatory')
ibmfrBRSProtFiltSVCName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrBRSProtFiltSVCName.setStatus('mandatory')
mibBuilder.exportSymbols("IBMFRBRS-MIB", ibmfrBRSCircuitSuperClassName=ibmfrBRSCircuitSuperClassName, ibmfrBRSInterfaceMaxQueue=ibmfrBRSInterfaceMaxQueue, ibmfrBRSCircuitTable=ibmfrBRSCircuitTable, ibmfrBRSTrafficClassPacketXmitHigh=ibmfrBRSTrafficClassPacketXmitHigh, ibmfrBRSProtFiltTable=ibmfrBRSProtFiltTable, ibmfrBRSCircuitTotalBandwidth=ibmfrBRSCircuitTotalBandwidth, ibmfrBRSTrafficClassPacketOverflowHigh=ibmfrBRSTrafficClassPacketOverflowHigh, ibmfrBRSTrafficClassTable=ibmfrBRSTrafficClassTable, ibmfrBRSProtFiltPrio=ibmfrBRSProtFiltPrio, ibmfrBRSTrafficClassBandwidth=ibmfrBRSTrafficClassBandwidth, ibmfrBRSCircuitSVCName=ibmfrBRSCircuitSVCName, ibmfrBRSInterfaceMinQueue=ibmfrBRSInterfaceMinQueue, ibmfrBRSProtFiltSVCName=ibmfrBRSProtFiltSVCName, ibmfrBRSCircuitClassEntry=ibmfrBRSCircuitClassEntry, ibmfrBRSTrafficClassTotalLastBytesXmit=ibmfrBRSTrafficClassTotalLastBytesXmit, ibmfrBRSProtFiltId=ibmfrBRSProtFiltId, ibmfrBRSTrafficClassLastBytesOverflowHigh=ibmfrBRSTrafficClassLastBytesOverflowHigh, ibmfrBRSTrafficClassLastPacketXmitUrgent=ibmfrBRSTrafficClassLastPacketXmitUrgent, ibmfrBRSCircuitEntry=ibmfrBRSCircuitEntry, ibmfrBRSProtFiltEntry=ibmfrBRSProtFiltEntry, ibmfrBRSInterfaceTotalBandwidth=ibmfrBRSInterfaceTotalBandwidth, ibmfrBRSTrafficClassLastBytesXmitHigh=ibmfrBRSTrafficClassLastBytesXmitHigh, ibmfrBRSTrafficClassLastPacketXmitLow=ibmfrBRSTrafficClassLastPacketXmitLow, ibmfrBRSTrafficClassLastBytesOverflowUgent=ibmfrBRSTrafficClassLastBytesOverflowUgent, ibmfrBRSInterfaceTable=ibmfrBRSInterfaceTable, ibmfrBRSTrafficClassTotalLastPacketXmit=ibmfrBRSTrafficClassTotalLastPacketXmit, ibmfrBRSCircuitClassBytesXmit=ibmfrBRSCircuitClassBytesXmit, ibmfrBRSTrafficClassPacketOverflowUrgent=ibmfrBRSTrafficClassPacketOverflowUrgent, ibmfrBRSCircuitClassLastPacketXmit=ibmfrBRSCircuitClassLastPacketXmit, ibmfrBRS=ibmfrBRS, ibmfrBRSTrafficClassBytesXmitHigh=ibmfrBRSTrafficClassBytesXmitHigh, ibmfrBRSTrafficClassTotalBytesXmit=ibmfrBRSTrafficClassTotalBytesXmit, ibmfrBRSTrafficClassPacketXmitUrgent=ibmfrBRSTrafficClassPacketXmitUrgent, ibmfrBRSCircuitClassBandwidth=ibmfrBRSCircuitClassBandwidth, ibmfrBRSTrafficClassLastBytesXmitNormal=ibmfrBRSTrafficClassLastBytesXmitNormal, ibmfrBRSTrafficClassSVCName=ibmfrBRSTrafficClassSVCName, ibmfrBRSTrafficClassClearCounters=ibmfrBRSTrafficClassClearCounters, ibmfrBRSCircuitClassClearCounters=ibmfrBRSCircuitClassClearCounters, ibmfrBRSCircuitClassTable=ibmfrBRSCircuitClassTable, ibmfrBRSTrafficClassTotalLastBytesOverflow=ibmfrBRSTrafficClassTotalLastBytesOverflow, ibmfrBRSTrafficClassTotalPacketOverflow=ibmfrBRSTrafficClassTotalPacketOverflow, ibmfrBRSTrafficClassBytesOverflowHigh=ibmfrBRSTrafficClassBytesOverflowHigh, ibmfrBRSCircuitMaxQueue=ibmfrBRSCircuitMaxQueue, ibmfrBRSTrafficClassLastBytesOverflowLow=ibmfrBRSTrafficClassLastBytesOverflowLow, ibmfrBRSAdministravive=ibmfrBRSAdministravive, ibmfrBRSCircuitClassBytesOverflow=ibmfrBRSCircuitClassBytesOverflow, ibmfrBRSCircuitSpecification=ibmfrBRSCircuitSpecification, ibmfrBRSTrafficClassBytesOverflowUrgent=ibmfrBRSTrafficClassBytesOverflowUrgent, ibmfrBRSTrafficClassBytesOverflowNormal=ibmfrBRSTrafficClassBytesOverflowNormal, ibmfrBRSTrafficClassLastPacketOverflowNmal=ibmfrBRSTrafficClassLastPacketOverflowNmal, ibmfrBRSTrafficClassEntry=ibmfrBRSTrafficClassEntry, ibmfrBRSTrafficClassLastPacketXmitHigh=ibmfrBRSTrafficClassLastPacketXmitHigh, ibmfrBRSTrafficClassLastPacketOverflowUgent=ibmfrBRSTrafficClassLastPacketOverflowUgent, ibmfrBRSTrafficClassTotalLastPacketOverflow=ibmfrBRSTrafficClassTotalLastPacketOverflow, ibmfrBRSTrafficClassBytesXmitLow=ibmfrBRSTrafficClassBytesXmitLow, ibmfrBRSCircuitClassName=ibmfrBRSCircuitClassName, ibmfrBRSTrafficClassTotalBytesOverflow=ibmfrBRSTrafficClassTotalBytesOverflow, ibmfrBRSInterfaceEntry=ibmfrBRSInterfaceEntry, ibmfrBRSCircuitTotalTrafficClasses=ibmfrBRSCircuitTotalTrafficClasses, ibmfrBRSTrafficClassLastPacketXmitNormal=ibmfrBRSTrafficClassLastPacketXmitNormal, ibmfrBRSTrafficClassPacketOverflowLow=ibmfrBRSTrafficClassPacketOverflowLow, ibmfrBRSTrafficClassPacketOverflowNormal=ibmfrBRSTrafficClassPacketOverflowNormal, ibmfrBRSTrafficClassLastPacketOverflowLow=ibmfrBRSTrafficClassLastPacketOverflowLow, ibmfrBRSTrafficClassLastBytesOverflowNmal=ibmfrBRSTrafficClassLastBytesOverflowNmal, ibmfrBRSTrafficClassLastBytesXmitLow=ibmfrBRSTrafficClassLastBytesXmitLow, ibmfrBRSCircuitDefaultTrafficClassPrio=ibmfrBRSCircuitDefaultTrafficClassPrio, ibmfrBRSCircuitClassPacketXmit=ibmfrBRSCircuitClassPacketXmit, ibmfrBRSTrafficClassPacketXmitNormal=ibmfrBRSTrafficClassPacketXmitNormal, ibmfrBRSTrafficClassBytesOverflowLow=ibmfrBRSTrafficClassBytesOverflowLow, ibmfrBRSTrafficClassLastPacketOverflowHigh=ibmfrBRSTrafficClassLastPacketOverflowHigh, ibmfrBRSCircuitClassLastBytesXmit=ibmfrBRSCircuitClassLastBytesXmit, ibmfrBRSCircuitClassLastBytesOverflow=ibmfrBRSCircuitClassLastBytesOverflow, ibmfrBRSTrafficClassBytesXmitUrgent=ibmfrBRSTrafficClassBytesXmitUrgent, ibmfrBRSOperational=ibmfrBRSOperational, ibmfrBRSCircuitDefaultTrafficClassName=ibmfrBRSCircuitDefaultTrafficClassName, ibmfrBRSTrafficClassLastBytesXmitUrgent=ibmfrBRSTrafficClassLastBytesXmitUrgent, ibmfrBRSTrafficClassBytesXmitNormal=ibmfrBRSTrafficClassBytesXmitNormal, ibmfrBRSTrafficClassTotalPacketXmit=ibmfrBRSTrafficClassTotalPacketXmit, ibmfrBRSProtFiltDE=ibmfrBRSProtFiltDE, ibmfrBRSTrafficClassPacketXmitLow=ibmfrBRSTrafficClassPacketXmitLow, ibmfrBRSInterfaceDefaultCircuitClassName=ibmfrBRSInterfaceDefaultCircuitClassName, ibmfrBRSCircuitNumber=ibmfrBRSCircuitNumber, ibmfrBRSInterfaceTotalCircuitClasses=ibmfrBRSInterfaceTotalCircuitClasses, ibmfrBRSTrafficClassName=ibmfrBRSTrafficClassName, ibmfrBRSCircuitMinQueue=ibmfrBRSCircuitMinQueue)
