#
# PySNMP MIB module NAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NAS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:07:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, iso, enterprises, Bits, Integer32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Unsigned32, IpAddress, Gauge32, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "enterprises", "Bits", "Integer32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Unsigned32", "IpAddress", "Gauge32", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50))
projectID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1))
modelID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 5))
submodelID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1))
nasAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1))
dns345AgentVer = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345AgentVer.setStatus('current')
dns345SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345SoftwareVersion.setStatus('current')
dns345HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345HostName.setStatus('current')
dns345FTPServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345FTPServer.setStatus('current')
dns345NetType = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345NetType.setStatus('current')
dns345Temperature = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345Temperature.setStatus('current')
dns345FanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345FanStatus.setStatus('current')
dns345VolumeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9), )
if mibBuilder.loadTexts: dns345VolumeTable.setStatus('current')
dns345VolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1), ).setIndexNames((0, "NAS-MIB", "dns345VolumeNum"))
if mibBuilder.loadTexts: dns345VolumeEntry.setStatus('current')
dns345VolumeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeNum.setStatus('current')
dns345VolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeName.setStatus('current')
dns345VolumeFsType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeFsType.setStatus('current')
dns345VolumeRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeRaidLevel.setStatus('current')
dns345VolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeSize.setStatus('current')
dns345VolumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeFreeSpace.setStatus('current')
dns345DiskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10), )
if mibBuilder.loadTexts: dns345DiskTable.setStatus('current')
dns345DiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1), ).setIndexNames((0, "NAS-MIB", "dns345DiskNum"))
if mibBuilder.loadTexts: dns345DiskEntry.setStatus('current')
dns345DiskNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskNum.setStatus('current')
dns345DiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskVendor.setStatus('current')
dns345DiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskModel.setStatus('current')
dns345DiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskSerialNumber.setStatus('current')
dns345DiskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskTemperature.setStatus('current')
dns345DiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskCapacity.setStatus('current')
notifyEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200))
notifyPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200, 1))
if mibBuilder.loadTexts: notifyPasswdChanged.setStatus('current')
notifyFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200, 2))
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setStatus('current')
notifyNetworkChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200, 3))
if mibBuilder.loadTexts: notifyNetworkChanged.setStatus('current')
notifyTemperatureExceeded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200, 4))
if mibBuilder.loadTexts: notifyTemperatureExceeded.setStatus('current')
mibBuilder.exportSymbols("NAS-MIB", dns345FanStatus=dns345FanStatus, notifyFirmwareUpgraded=notifyFirmwareUpgraded, dns345DiskCapacity=dns345DiskCapacity, dns345DiskTemperature=dns345DiskTemperature, dns345Temperature=dns345Temperature, dns345VolumeName=dns345VolumeName, dns345DiskModel=dns345DiskModel, productID=productID, d_link=d_link, notifyNetworkChanged=notifyNetworkChanged, notifyEvts=notifyEvts, dns345DiskSerialNumber=dns345DiskSerialNumber, dns345DiskNum=dns345DiskNum, dns345VolumeTable=dns345VolumeTable, dns345VolumeEntry=dns345VolumeEntry, dns345VolumeSize=dns345VolumeSize, modelID=modelID, dns345VolumeRaidLevel=dns345VolumeRaidLevel, dns345DiskEntry=dns345DiskEntry, notifyPasswdChanged=notifyPasswdChanged, dns345VolumeFsType=dns345VolumeFsType, submodelID=submodelID, notifyTemperatureExceeded=notifyTemperatureExceeded, dns345AgentVer=dns345AgentVer, dns345VolumeFreeSpace=dns345VolumeFreeSpace, projectID=projectID, dns345HostName=dns345HostName, nasAgent=nasAgent, dns345FTPServer=dns345FTPServer, dns345DiskTable=dns345DiskTable, dns345DiskVendor=dns345DiskVendor, dns345VolumeNum=dns345VolumeNum, dns345NetType=dns345NetType, dns345SoftwareVersion=dns345SoftwareVersion)
