#
# PySNMP MIB module CISCO-TS-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TS-STACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:58:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
Timeout, = mibBuilder.importSymbols("BRIDGE-MIB", "Timeout")
workgroup, cisco = mibBuilder.importSymbols("CISCO-SMI", "workgroup", "cisco")
ifName, = mibBuilder.importSymbols("IF-MIB", "ifName")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysLocation")
ModuleIdentity, Unsigned32, Gauge32, NotificationType, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, NotificationType, enterprises, TimeTicks, MibIdentifier, ObjectIdentity, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "Gauge32", "NotificationType", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "NotificationType", "enterprises", "TimeTicks", "MibIdentifier", "ObjectIdentity", "iso", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ringStationIfIndex, ringStationMacAddress = mibBuilder.importSymbols("TOKEN-RING-RMON-MIB", "ringStationIfIndex", "ringStationMacAddress")
tsStack = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32))
class MacAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

ciscoTsMain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 1))
ciscoTsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1))
ciscoTsStack = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 2))
ciscoTsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 3))
ciscoTsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 4))
ciscoTsProbe = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 5))
ciscoTsVLANS = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 6))
ciscoTsTChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 7))
ciscoTsFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 8))
ciscoTsUplinkMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32, 9))
ciscoTsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsIpAddr.setStatus('mandatory')
ciscoTsNetMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsNetMask.setStatus('mandatory')
ciscoTsDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsDefaultGateway.setStatus('mandatory')
ciscoTsSysCurTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsSysCurTime.setStatus('mandatory')
ciscoTsConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stand-alone", 1), ("back-to-back", 2), ("prostack-matrix", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsConfiguration.setStatus('mandatory')
ciscoTsNumSwitches = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsNumSwitches.setStatus('mandatory')
ciscoTsStackStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("updating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackStatus.setStatus('mandatory')
ciscoTsTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTftpServer.setStatus('mandatory')
ciscoTsTftpServerTrBRF = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTftpServerTrBRF.setStatus('mandatory')
ciscoTsTftpFileLoc = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTftpFileLoc.setStatus('mandatory')
ciscoTsTftpDownload = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTftpDownload.setStatus('mandatory')
ciscoTsTftpDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("writing", 1), ("complete", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTftpDownloadStatus.setStatus('mandatory')
ciscoTsProStackMatrixStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("none", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsProStackMatrixStatus.setStatus('mandatory')
ciscoTsNumMatrixModules = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsNumMatrixModules.setStatus('mandatory')
ciscoTsStackReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackReset.setStatus('mandatory')
ciscoTsStackRMONStatistics = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackRMONStatistics.setStatus('mandatory')
ciscoTsTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 25), )
if mibBuilder.loadTexts: ciscoTsTrapRcvrTable.setStatus('mandatory')
ciscoTsTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 25, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsTrapRcvrIndex"))
if mibBuilder.loadTexts: ciscoTsTrapRcvrEntry.setStatus('mandatory')
ciscoTsTrapRcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTrapRcvrIndex.setStatus('mandatory')
ciscoTsTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrapRcvrStatus.setStatus('mandatory')
ciscoTsTrapRcvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 25, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrapRcvrIpAddress.setStatus('mandatory')
ciscoTsTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 25, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrapRcvrComm.setStatus('mandatory')
ciscoTsTrapRcvrTrBRFs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1, 25, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrapRcvrTrBRFs.setStatus('mandatory')
ciscoTsStackTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1), )
if mibBuilder.loadTexts: ciscoTsStackTable.setStatus('mandatory')
ciscoTsStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsStackSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsStackSwitchBIAddr"))
if mibBuilder.loadTexts: ciscoTsStackEntry.setStatus('mandatory')
ciscoTsStackSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchNumber.setStatus('mandatory')
ciscoTsStackSwitchBIAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 2), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchBIAddr.setStatus('mandatory')
ciscoTsStackSwitchLAAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 3), MacAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackSwitchLAAddr.setStatus('mandatory')
ciscoTsStackSwitchFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchFwVersion.setStatus('mandatory')
ciscoTsStackSwitchHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchHwVersion.setStatus('mandatory')
ciscoTsStackSwitchUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchUptime.setStatus('mandatory')
ciscoTsStackSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackSwitchStatus.setStatus('mandatory')
ciscoTsStackSwitchTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchTemperature.setStatus('mandatory')
ciscoTsStackSwitchMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchMemory.setStatus('mandatory')
ciscoTsStackSwitchSPANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackSwitchSPANPort.setStatus('mandatory')
ciscoTsStackSwitchSPANMonitoredPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackSwitchSPANMonitoredPort.setStatus('mandatory')
ciscoTsStackSwitchFeatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("enhanced", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchFeatureStatus.setStatus('mandatory')
ciscoTsStackSwitchFeatureKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackSwitchFeatureKey.setStatus('mandatory')
ciscoTsStackSwitchPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchPorts.setStatus('mandatory')
ciscoTsStackSwitchAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackSwitchAgingTime.setStatus('mandatory')
ciscoTsStackSwitchAgingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackSwitchAgingLevel.setStatus('mandatory')
ciscoTsStackSwitchXmitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchXmitFrames.setStatus('mandatory')
ciscoTsStackSwitchRcvdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchRcvdFrames.setStatus('mandatory')
ciscoTsStackSwitchRcvdErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchRcvdErrFrames.setStatus('mandatory')
ciscoTsStackSwitchLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchLostFrames.setStatus('mandatory')
ciscoTsStackSwitchPendingSendRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchPendingSendRqsts.setStatus('mandatory')
ciscoTsStackSwitchXmitErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchXmitErrFrames.setStatus('mandatory')
ciscoTsStackSwitchCurrActStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchCurrActStations.setStatus('mandatory')
ciscoTsStackSwitchLargestNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchLargestNumStations.setStatus('mandatory')
ciscoTsStackSwitchMaxAddressChain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchMaxAddressChain.setStatus('mandatory')
ciscoTsStackSwitchAddressTblFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchAddressTblFulls.setStatus('mandatory')
ciscoTsStackSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 28), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchId.setStatus('mandatory')
ciscoTsStackSwitchSPANMonitoredTrCRFs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsStackSwitchSPANMonitoredTrCRFs.setStatus('mandatory')
ciscoTsStackSwitchPwrSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("internal-only", 2), ("internal-no-backup", 3), ("internal-backup-will-reset", 4), ("external-no-backup", 5), ("external-backup-no-reset", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsStackSwitchPwrSupplyStatus.setStatus('mandatory')
ciscoTsModTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1), )
if mibBuilder.loadTexts: ciscoTsModTable.setStatus('mandatory')
ciscoTsModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsModSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsModNumber"))
if mibBuilder.loadTexts: ciscoTsModEntry.setStatus('mandatory')
ciscoTsModSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsModSwitchNumber.setStatus('mandatory')
ciscoTsModNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsModNumber.setStatus('mandatory')
ciscoTsModState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nomodule", 1), ("running", 2), ("faulty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsModState.setStatus('mandatory')
ciscoTsModType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 11))).clone(namedValues=NamedValues(("system", 1), ("proStack", 2), ("proPort4TR", 3), ("proPort4Fiber", 4), ("proPortISL-FX", 5), ("proPortISL-TX", 6), ("proPortATM155Fiber", 8), ("proPortATM155UTP", 9), ("unknown", 10), ("none", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsModType.setStatus('mandatory')
ciscoTsModRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsModRevision.setStatus('mandatory')
ciscoTsModFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsModFwVer.setStatus('mandatory')
ciscoTsModNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsModNumPorts.setStatus('mandatory')
ciscoTsModUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 3, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsModUptime.setStatus('mandatory')
ciscoTsPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1), )
if mibBuilder.loadTexts: ciscoTsPortCfgTable.setStatus('mandatory')
ciscoTsPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsStackSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsPortCfgNumber"))
if mibBuilder.loadTexts: ciscoTsPortCfgEntry.setStatus('mandatory')
ciscoTsPortCfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortCfgNumber.setStatus('mandatory')
ciscoTsPortCfgModNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortCfgModNumber.setStatus('mandatory')
ciscoTsPortCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortCfgIfIndex.setStatus('mandatory')
ciscoTsPortCfgResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgResetStats.setStatus('mandatory')
ciscoTsPortCfgResetAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgResetAddrs.setStatus('mandatory')
ciscoTsPortCfgAddrAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgAddrAgingTime.setStatus('mandatory')
ciscoTsPortCfgDemandAgingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgDemandAgingLevel.setStatus('mandatory')
ciscoTsPortCfgErrLoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgErrLoThreshold.setStatus('mandatory')
ciscoTsPortCfgErrHiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgErrHiThreshold.setStatus('mandatory')
ciscoTsPortCfgErrSampling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgErrSampling.setStatus('mandatory')
ciscoTsPortCfgMaxTransmitUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgMaxTransmitUnit.setStatus('mandatory')
ciscoTsPortCfgMaxExplorerRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgMaxExplorerRate.setStatus('mandatory')
ciscoTsPortCfgSetACbits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgSetACbits.setStatus('mandatory')
ciscoTsPortCfgEarlyTokenRlse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgEarlyTokenRlse.setStatus('mandatory')
ciscoTsPortCfgForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("storeandforward", 2), ("cutthru", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgForwardingMode.setStatus('mandatory')
ciscoTsPortCfgActualForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("storeandforward", 1), ("cutthru", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortCfgActualForwardingMode.setStatus('mandatory')
ciscoTsPortCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 1), ("hdx-Port", 2), ("hdx-Station", 3), ("fdx-Port", 4), ("fdx-Station", 5), ("ri-ro", 6), ("passive-probe", 7), ("unknown", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgPortMode.setStatus('mandatory')
ciscoTsPortCfgActualPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("hdx-Port", 1), ("hdx-Station", 2), ("fdx-Port", 3), ("fdx-Station", 4), ("ri-ro", 5), ("passive-probe", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortCfgActualPortMode.setStatus('mandatory')
ciscoTsPortCfgPriorityThres = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgPriorityThres.setStatus('mandatory')
ciscoTsPortCfgMinXmitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgMinXmitPriority.setStatus('mandatory')
ciscoTsPortCfgCfgLossThres = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgCfgLossThres.setStatus('mandatory')
ciscoTsPortCfgCfgLossInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgCfgLossInterval.setStatus('mandatory')
ciscoTsPortCfgBcastSuppresion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgBcastSuppresion.setStatus('mandatory')
ciscoTsPortCfgCDPTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgCDPTimeToLive.setStatus('mandatory')
ciscoTsPortCfgSpanningTreeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("forwarding", 2), ("blocking", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgSpanningTreeMode.setStatus('mandatory')
ciscoTsPortCfgSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("secure-src-addrs", 2), ("secure-dest-addrs", 3), ("secure-src-and-dest-addrs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgSecurityMode.setStatus('mandatory')
ciscoTsPortCfgSoftErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgSoftErrThreshold.setStatus('mandatory')
ciscoTsPortCfgSoftErrReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgSoftErrReportInterval.setStatus('mandatory')
ciscoTsPortCfgSoftErrorMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPortCfgSoftErrorMonitoring.setStatus('mandatory')
ciscoTsPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2), )
if mibBuilder.loadTexts: ciscoTsPortStatsTable.setStatus('mandatory')
ciscoTsPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsStackSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsPortStatsNumber"))
if mibBuilder.loadTexts: ciscoTsPortStatsEntry.setStatus('mandatory')
ciscoTsPortStatsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsNumber.setStatus('mandatory')
ciscoTsPortStatsModNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsModNumber.setStatus('mandatory')
ciscoTsPortStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsIfIndex.setStatus('mandatory')
ciscoTsPortStatsRcvLocalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsRcvLocalFrames.setStatus('mandatory')
ciscoTsPortStatsForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsForwardedFrames.setStatus('mandatory')
ciscoTsPortStatsStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsStations.setStatus('mandatory')
ciscoTsPortStatsSWHandledFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsSWHandledFrames.setStatus('mandatory')
ciscoTsPortStatsLocalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsLocalStations.setStatus('mandatory')
ciscoTsPortStatsRemoteStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsRemoteStations.setStatus('mandatory')
ciscoTsPortStatsUnknownStaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsUnknownStaFrames.setStatus('mandatory')
ciscoTsPortStatsResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsResetTimer.setStatus('mandatory')
ciscoTsPortStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsInFrames.setStatus('mandatory')
ciscoTsPortStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsOutFrames.setStatus('mandatory')
ciscoTsPortStatsLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsLongFrames.setStatus('mandatory')
ciscoTsPortStatsShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsShortFrames.setStatus('mandatory')
ciscoTsPortStatsInBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsInBufOverflows.setStatus('mandatory')
ciscoTsPortStatsOutBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsOutBufOverflows.setStatus('mandatory')
ciscoTsPortStatsRcvBcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsRcvBcasts.setStatus('mandatory')
ciscoTsPortStatsRcvMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsRcvMcasts.setStatus('mandatory')
ciscoTsPortStatsSwitchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsSwitchedFrames.setStatus('mandatory')
ciscoTsPortStatsPktsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsPktsInErrors.setStatus('mandatory')
ciscoTsPortStatsAddrChainOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsAddrChainOverflows.setStatus('mandatory')
ciscoTsPortStatsTableOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsTableOverflows.setStatus('mandatory')
ciscoTsPortStatsCfgLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsCfgLoss.setStatus('mandatory')
ciscoTsPortStatsCfgLossRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wire-fault", 1), ("lobe-test-fail", 2), ("tkp-mac-frame-rcv-in-txi-mode", 3), ("heart-beat-fail", 4), ("txi-new-station", 5), ("txi-protocol-error", 6), ("no-cfg-loss", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsCfgLossRC.setStatus('mandatory')
ciscoTsPortStatsTrCRF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsTrCRF.setStatus('mandatory')
ciscoTsPortStatsAutoDisableRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-disabled", 1), ("unknown", 2), ("speed-error", 3), ("remove-received", 4), ("disabled-by-DRiP", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPortStatsAutoDisableRC.setStatus('mandatory')
ciscoTsPassiveProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 5, 1), )
if mibBuilder.loadTexts: ciscoTsPassiveProbeTable.setStatus('mandatory')
ciscoTsPassiveProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 5, 1, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsStackSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsPassiveProbeIndex"))
if mibBuilder.loadTexts: ciscoTsPassiveProbeEntry.setStatus('mandatory')
ciscoTsPassiveProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPassiveProbeIndex.setStatus('mandatory')
ciscoTsPassiveProbePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPassiveProbePort.setStatus('mandatory')
ciscoTsPassiveProbeMonitoredPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsPassiveProbeMonitoredPort.setStatus('mandatory')
ciscoTsPassiveProbeDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2), ("both", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsPassiveProbeDirection.setStatus('mandatory')
ciscoTsTrCRFInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1), )
if mibBuilder.loadTexts: ciscoTsTrCRFInfoTable.setStatus('mandatory')
ciscoTsTrCRFInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsTrCRFInfoTrCRFNumber"))
if mibBuilder.loadTexts: ciscoTsTrCRFInfoEntry.setStatus('mandatory')
ciscoTsTrCRFInfoTrCRFNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTrCRFInfoTrCRFNumber.setStatus('mandatory')
ciscoTsTrCRFInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTrCRFInfoName.setStatus('mandatory')
ciscoTsTrCRFInfoSpanningTreeProtoSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("cisco", 2), ("ieee", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrCRFInfoSpanningTreeProtoSpecification.setStatus('mandatory')
ciscoTsTrCRFInfoSpanningTreeBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1, 1, 4), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrCRFInfoSpanningTreeBridgeForwardDelay.setStatus('mandatory')
ciscoTsTrCRFInfoSpanningTreeBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1, 1, 5), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrCRFInfoSpanningTreeBridgeHelloTime.setStatus('mandatory')
ciscoTsTrCRFInfoSpanningTreeBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1, 1, 6), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrCRFInfoSpanningTreeBridgeMaxAge.setStatus('mandatory')
ciscoTsTrCRFInfoSpanningTreeInternalPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("forwarding", 2), ("blocking", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrCRFInfoSpanningTreeInternalPortMode.setStatus('mandatory')
ciscoTsTrBRFInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2), )
if mibBuilder.loadTexts: ciscoTsTrBRFInfoTable.setStatus('mandatory')
ciscoTsTrBRFInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsTrBRFInfoTrBRFNumber"))
if mibBuilder.loadTexts: ciscoTsTrBRFInfoEntry.setStatus('mandatory')
ciscoTsTrBRFInfoTrBRFNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTrBRFInfoTrBRFNumber.setStatus('mandatory')
ciscoTsTrBRFInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTrBRFInfoName.setStatus('mandatory')
ciscoTsTrBRFInfoIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-disabled", 1), ("bootp-when-needed", 2), ("bootp-always", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrBRFInfoIpState.setStatus('mandatory')
ciscoTsTrBRFInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrBRFInfoIpAddress.setStatus('mandatory')
ciscoTsTrBRFInfoIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrBRFInfoIpSubnetMask.setStatus('mandatory')
ciscoTsTrBRFInfoIpDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrBRFInfoIpDefaultGateway.setStatus('mandatory')
ciscoTsTrBRFInfoStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrBRFInfoStpMode.setStatus('mandatory')
ciscoTsTrBRFInfoIEEEStpUsesBridgeFuncAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrBRFInfoIEEEStpUsesBridgeFuncAddr.setStatus('mandatory')
ciscoTsTransitedConfiguredTrCRFs = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTransitedConfiguredTrCRFs.setStatus('mandatory')
ciscoTsTransitedTrCRFs = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTransitedTrCRFs.setStatus('mandatory')
ciscoTsTransitedConfiguredTrBRFs = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTransitedConfiguredTrBRFs.setStatus('mandatory')
ciscoTsTransitedTrBRFs = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 32, 6, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTransitedTrBRFs.setStatus('mandatory')
ciscoTsTCTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 7, 1), )
if mibBuilder.loadTexts: ciscoTsTCTable.setStatus('mandatory')
ciscoTsTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 7, 1, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsTCSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsTCNumber"))
if mibBuilder.loadTexts: ciscoTsTCEntry.setStatus('mandatory')
ciscoTsTCSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTCSwitchNumber.setStatus('mandatory')
ciscoTsTCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTCNumber.setStatus('mandatory')
ciscoTsTCPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTCPorts.setStatus('mandatory')
ciscoTsTCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("reduced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTCStatus.setStatus('mandatory')
ciscoTsTCActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 7, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTCActivePorts.setStatus('mandatory')
ciscoTsProtocolClassFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 1), )
if mibBuilder.loadTexts: ciscoTsProtocolClassFilterTable.setStatus('mandatory')
ciscoTsProtocolClassFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 1, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsProtocolClassFilterIndex"))
if mibBuilder.loadTexts: ciscoTsProtocolClassFilterEntry.setStatus('mandatory')
ciscoTsProtocolClassFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsProtocolClassFilterIndex.setStatus('mandatory')
ciscoTsProtocolClassFilterEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsProtocolClassFilterEtype.setStatus('mandatory')
ciscoTsProtocolClassFilterDSAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsProtocolClassFilterDSAPs.setStatus('mandatory')
ciscoTsProtocolFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 2), )
if mibBuilder.loadTexts: ciscoTsProtocolFilterTable.setStatus('mandatory')
ciscoTsProtocolFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 2, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsStackSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsProtocolFilterPort"), (0, "CISCO-TS-STACK-MIB", "ciscoTsProtocolClassFilterIndex"))
if mibBuilder.loadTexts: ciscoTsProtocolFilterEntry.setStatus('mandatory')
ciscoTsProtocolFilterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsProtocolFilterPort.setStatus('mandatory')
ciscoTsProtocolFilterBlockingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("sr", 2), ("nsr", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsProtocolFilterBlockingMode.setStatus('mandatory')
ciscoTsProtocolFilterTranspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsProtocolFilterTranspMode.setStatus('mandatory')
ciscoTsMACDestFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3), )
if mibBuilder.loadTexts: ciscoTsMACDestFilterTable.setStatus('mandatory')
ciscoTsMACDestFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsMACDestFilterSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsMACDestFilterStationAddress"), (0, "CISCO-TS-STACK-MIB", "ciscoTsMACDestFilterType"))
if mibBuilder.loadTexts: ciscoTsMACDestFilterEntry.setStatus('mandatory')
ciscoTsMACDestFilterSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsMACDestFilterSwitchNumber.setStatus('mandatory')
ciscoTsMACDestFilterStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1, 2), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsMACDestFilterStationAddress.setStatus('mandatory')
ciscoTsMACDestFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("block-dest", 1), ("allow-dest", 2), ("limited-multicast", 3), ("force-dest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACDestFilterType.setStatus('mandatory')
ciscoTsMACDestFilterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACDestFilterPorts.setStatus('mandatory')
ciscoTsMACDestFilterExitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACDestFilterExitMask.setStatus('mandatory')
ciscoTsMACDestFilterRemoteBox = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACDestFilterRemoteBox.setStatus('mandatory')
ciscoTsMACDestFilterRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACDestFilterRemotePort.setStatus('mandatory')
ciscoTsMACDestFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACDestFilterStatus.setStatus('mandatory')
ciscoTsMACSourceFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 4), )
if mibBuilder.loadTexts: ciscoTsMACSourceFilterTable.setStatus('mandatory')
ciscoTsMACSourceFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 4, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsMACSourceFilterSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsMACSourceFilterStationAddress"), (0, "CISCO-TS-STACK-MIB", "ciscoTsMACSourceFilterType"))
if mibBuilder.loadTexts: ciscoTsMACSourceFilterEntry.setStatus('mandatory')
ciscoTsMACSourceFilterSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsMACSourceFilterSwitchNumber.setStatus('mandatory')
ciscoTsMACSourceFilterStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 4, 1, 2), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsMACSourceFilterStationAddress.setStatus('mandatory')
ciscoTsMACSourceFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block-source", 1), ("allow-source", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACSourceFilterType.setStatus('mandatory')
ciscoTsMACSourceFilterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACSourceFilterPorts.setStatus('mandatory')
ciscoTsMACSourceFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsMACSourceFilterStatus.setStatus('mandatory')
ciscoTsDupAddrFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 5), )
if mibBuilder.loadTexts: ciscoTsDupAddrFilterTable.setStatus('mandatory')
ciscoTsDupAddrFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 5, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsDupAddrFilterSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsDupAddrFilterStationAddress"))
if mibBuilder.loadTexts: ciscoTsDupAddrFilterEntry.setStatus('mandatory')
ciscoTsDupAddrFilterSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsDupAddrFilterSwitchNumber.setStatus('mandatory')
ciscoTsDupAddrFilterStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 5, 1, 2), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsDupAddrFilterStationAddress.setStatus('mandatory')
ciscoTsDupAddrFilterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsDupAddrFilterPorts.setStatus('mandatory')
ciscoTsTrunkProtocolFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 6), )
if mibBuilder.loadTexts: ciscoTsTrunkProtocolFilterTable.setStatus('mandatory')
ciscoTsTrunkProtocolFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 6, 1), ).setIndexNames((0, "CISCO-TS-STACK-MIB", "ciscoTsStackSwitchNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsTrunkProtocolFilterPort"), (0, "CISCO-TS-STACK-MIB", "ciscoTsTrCRFInfoTrCRFNumber"), (0, "CISCO-TS-STACK-MIB", "ciscoTsProtocolClassFilterIndex"))
if mibBuilder.loadTexts: ciscoTsTrunkProtocolFilterEntry.setStatus('mandatory')
ciscoTsTrunkProtocolFilterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoTsTrunkProtocolFilterPort.setStatus('mandatory')
ciscoTsTrunkProtocolFilterBlockingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("sr", 2), ("nsr", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrunkProtocolFilterBlockingMode.setStatus('mandatory')
ciscoTsTrunkProtocolFilterTranspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 32, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoTsTrunkProtocolFilterTranspMode.setStatus('mandatory')
ciscoTsStackCfgChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsNumSwitches"))
ciscoTsStackProStackMatrixChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 1, 1) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsProStackMatrixStatus"))
ciscoTsStackTempChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 2) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsStackSwitchTemperature"))
ciscoTsStackPwrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 2) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsStackSwitchPwrSupplyStatus"))
ciscoTsPortStrNFwdEntry = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 4) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsPortCfgActualForwardingMode"))
ciscoTsPortCfgLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 4) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsPortStatsCfgLoss"))
ciscoTsBeaconStart = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 4) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsPortCfgNumber"))
ciscoTsBeaconEnd = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 4) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsPortCfgNumber"))
ciscoTsDuplicateMACAddr = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 4) + (0,5)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsPortCfgNumber"))
ciscoTsPortSoftErrExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 4) + (0,6)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsStackSwitchNumber"), ("CISCO-TS-STACK-MIB", "ciscoTsPortCfgNumber"), ("TOKEN-RING-RMON-MIB", "ringStationIfIndex"), ("TOKEN-RING-RMON-MIB", "ringStationMacAddress"), ("IF-MIB", "ifName"))
ciscoTsTrCRFNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 6) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsTrCRFInfoTrCRFNumber"))
ciscoTsTrCRFTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 6) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsTrCRFInfoTrCRFNumber"))
ciscoTsTrBRFNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 6) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsTrBRFInfoTrBRFNumber"))
ciscoTsTrBRFTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 6) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsTrBRFInfoTrBRFNumber"))
ciscoTsTokenChannelFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 7) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsTCPorts"))
ciscoTsTokenChannelStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 32, 7) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-TS-STACK-MIB", "ciscoTsTCStatus"), ("CISCO-TS-STACK-MIB", "ciscoTsTCPorts"), ("CISCO-TS-STACK-MIB", "ciscoTsTCActivePorts"))
mibBuilder.exportSymbols("CISCO-TS-STACK-MIB", ciscoTsPortCfgSoftErrThreshold=ciscoTsPortCfgSoftErrThreshold, ciscoTsModule=ciscoTsModule, ciscoTsPortStatsRcvLocalFrames=ciscoTsPortStatsRcvLocalFrames, ciscoTsTrCRFInfoSpanningTreeBridgeHelloTime=ciscoTsTrCRFInfoSpanningTreeBridgeHelloTime, ciscoTsPortCfgBcastSuppresion=ciscoTsPortCfgBcastSuppresion, ciscoTsTrCRFInfoSpanningTreeProtoSpecification=ciscoTsTrCRFInfoSpanningTreeProtoSpecification, ciscoTsTrBRFInfoEntry=ciscoTsTrBRFInfoEntry, ciscoTsTrCRFInfoName=ciscoTsTrCRFInfoName, ciscoTsStackSwitchMaxAddressChain=ciscoTsStackSwitchMaxAddressChain, ciscoTsPortCfgMinXmitPriority=ciscoTsPortCfgMinXmitPriority, ciscoTsTokenChannelFailed=ciscoTsTokenChannelFailed, ciscoTsTrapRcvrIpAddress=ciscoTsTrapRcvrIpAddress, ciscoTsStackRMONStatistics=ciscoTsStackRMONStatistics, ciscoTsPortCfgActualForwardingMode=ciscoTsPortCfgActualForwardingMode, ciscoTsStackProStackMatrixChange=ciscoTsStackProStackMatrixChange, ciscoTsStackSwitchPendingSendRqsts=ciscoTsStackSwitchPendingSendRqsts, ciscoTsPassiveProbeTable=ciscoTsPassiveProbeTable, ciscoTsUplinkMIBs=ciscoTsUplinkMIBs, ciscoTsNetMask=ciscoTsNetMask, ciscoTsTrBRFInfoIpAddress=ciscoTsTrBRFInfoIpAddress, ciscoTsMACDestFilterSwitchNumber=ciscoTsMACDestFilterSwitchNumber, ciscoTsStackSwitchTemperature=ciscoTsStackSwitchTemperature, ciscoTsPortStatsRcvBcasts=ciscoTsPortStatsRcvBcasts, ciscoTsMACDestFilterPorts=ciscoTsMACDestFilterPorts, ciscoTsPortStatsSWHandledFrames=ciscoTsPortStatsSWHandledFrames, ciscoTsStackSwitchStatus=ciscoTsStackSwitchStatus, ciscoTsPortCfgSetACbits=ciscoTsPortCfgSetACbits, ciscoTsTrCRFInfoTrCRFNumber=ciscoTsTrCRFInfoTrCRFNumber, ciscoTsStackSwitchAgingTime=ciscoTsStackSwitchAgingTime, ciscoTsStackSwitchUptime=ciscoTsStackSwitchUptime, ciscoTsProtocolFilterEntry=ciscoTsProtocolFilterEntry, ciscoTsStackSwitchFwVersion=ciscoTsStackSwitchFwVersion, ciscoTsDupAddrFilterStationAddress=ciscoTsDupAddrFilterStationAddress, ciscoTsStackSwitchId=ciscoTsStackSwitchId, ciscoTsTrunkProtocolFilterTable=ciscoTsTrunkProtocolFilterTable, ciscoTsStackSwitchFeatureKey=ciscoTsStackSwitchFeatureKey, ciscoTsPortStatsOutFrames=ciscoTsPortStatsOutFrames, ciscoTsSysCurTime=ciscoTsSysCurTime, tsStack=tsStack, ciscoTsTrapRcvrTrBRFs=ciscoTsTrapRcvrTrBRFs, ciscoTsModNumPorts=ciscoTsModNumPorts, ciscoTsTrBRFInfoIpSubnetMask=ciscoTsTrBRFInfoIpSubnetMask, ciscoTsPortCfgErrHiThreshold=ciscoTsPortCfgErrHiThreshold, ciscoTsDupAddrFilterPorts=ciscoTsDupAddrFilterPorts, ciscoTsPortCfgErrSampling=ciscoTsPortCfgErrSampling, ciscoTsPortStatsRemoteStations=ciscoTsPortStatsRemoteStations, ciscoTsModFwVer=ciscoTsModFwVer, ciscoTsPortCfgSoftErrorMonitoring=ciscoTsPortCfgSoftErrorMonitoring, ciscoTsTrCRFInfoEntry=ciscoTsTrCRFInfoEntry, ciscoTsStackSwitchPorts=ciscoTsStackSwitchPorts, ciscoTsPortCfgSecurityMode=ciscoTsPortCfgSecurityMode, ciscoTsPortCfgSoftErrReportInterval=ciscoTsPortCfgSoftErrReportInterval, ciscoTsTransitedTrCRFs=ciscoTsTransitedTrCRFs, ciscoTsStackSwitchCurrActStations=ciscoTsStackSwitchCurrActStations, ciscoTsPortCfgMaxTransmitUnit=ciscoTsPortCfgMaxTransmitUnit, ciscoTsPassiveProbeDirection=ciscoTsPassiveProbeDirection, ciscoTsStackSwitchAgingLevel=ciscoTsStackSwitchAgingLevel, ciscoTsStackReset=ciscoTsStackReset, ciscoTsTCStatus=ciscoTsTCStatus, ciscoTsTftpServerTrBRF=ciscoTsTftpServerTrBRF, ciscoTsPortStatsResetTimer=ciscoTsPortStatsResetTimer, ciscoTsPortStatsAutoDisableRC=ciscoTsPortStatsAutoDisableRC, ciscoTsTftpServer=ciscoTsTftpServer, ciscoTsPortStatsUnknownStaFrames=ciscoTsPortStatsUnknownStaFrames, ciscoTsTrBRFInfoIpDefaultGateway=ciscoTsTrBRFInfoIpDefaultGateway, ciscoTsTCActivePorts=ciscoTsTCActivePorts, ciscoTsTokenChannelStatus=ciscoTsTokenChannelStatus, ciscoTsTransitedConfiguredTrBRFs=ciscoTsTransitedConfiguredTrBRFs, ciscoTsTrapRcvrStatus=ciscoTsTrapRcvrStatus, ciscoTsPortCfgEntry=ciscoTsPortCfgEntry, ciscoTsStackSwitchHwVersion=ciscoTsStackSwitchHwVersion, ciscoTsPortCfgForwardingMode=ciscoTsPortCfgForwardingMode, ciscoTsTrCRFNewRoot=ciscoTsTrCRFNewRoot, ciscoTsTrBRFInfoTable=ciscoTsTrBRFInfoTable, ciscoTsStackSwitchMemory=ciscoTsStackSwitchMemory, ciscoTsPortCfgActualPortMode=ciscoTsPortCfgActualPortMode, ciscoTsTftpFileLoc=ciscoTsTftpFileLoc, ciscoTsTrapRcvrEntry=ciscoTsTrapRcvrEntry, ciscoTsStackStatus=ciscoTsStackStatus, ciscoTsStackSwitchNumber=ciscoTsStackSwitchNumber, ciscoTsStackSwitchXmitFrames=ciscoTsStackSwitchXmitFrames, ciscoTsPortStatsForwardedFrames=ciscoTsPortStatsForwardedFrames, ciscoTsProtocolClassFilterEntry=ciscoTsProtocolClassFilterEntry, ciscoTsPortStrNFwdEntry=ciscoTsPortStrNFwdEntry, ciscoTsTrapRcvrTable=ciscoTsTrapRcvrTable, ciscoTsTCTable=ciscoTsTCTable, ciscoTsTrCRFInfoSpanningTreeBridgeForwardDelay=ciscoTsTrCRFInfoSpanningTreeBridgeForwardDelay, ciscoTsTCSwitchNumber=ciscoTsTCSwitchNumber, ciscoTsPortCfgModNumber=ciscoTsPortCfgModNumber, ciscoTsMACDestFilterRemoteBox=ciscoTsMACDestFilterRemoteBox, ciscoTsTrunkProtocolFilterTranspMode=ciscoTsTrunkProtocolFilterTranspMode, ciscoTsPort=ciscoTsPort, ciscoTsPortCfgSpanningTreeMode=ciscoTsPortCfgSpanningTreeMode, ciscoTsPortCfgAddrAgingTime=ciscoTsPortCfgAddrAgingTime, ciscoTsTrunkProtocolFilterPort=ciscoTsTrunkProtocolFilterPort, ciscoTsDupAddrFilterEntry=ciscoTsDupAddrFilterEntry, ciscoTsMain=ciscoTsMain, ciscoTsMACSourceFilterTable=ciscoTsMACSourceFilterTable, ciscoTsDefaultGateway=ciscoTsDefaultGateway, ciscoTsMACDestFilterStatus=ciscoTsMACDestFilterStatus, ciscoTsTCNumber=ciscoTsTCNumber, ciscoTsPortCfgCDPTimeToLive=ciscoTsPortCfgCDPTimeToLive, ciscoTsStackSwitchRcvdErrFrames=ciscoTsStackSwitchRcvdErrFrames, ciscoTsTrBRFInfoTrBRFNumber=ciscoTsTrBRFInfoTrBRFNumber, ciscoTsMACDestFilterRemotePort=ciscoTsMACDestFilterRemotePort, ciscoTsPortCfgNumber=ciscoTsPortCfgNumber, ciscoTsTrCRFInfoSpanningTreeBridgeMaxAge=ciscoTsTrCRFInfoSpanningTreeBridgeMaxAge, ciscoTsTrBRFInfoStpMode=ciscoTsTrBRFInfoStpMode, ciscoTsStackTable=ciscoTsStackTable, ciscoTsNumMatrixModules=ciscoTsNumMatrixModules, ciscoTsTChannel=ciscoTsTChannel, ciscoTsTrapRcvrIndex=ciscoTsTrapRcvrIndex, MacAddr=MacAddr, ciscoTsVLANS=ciscoTsVLANS, ciscoTsPortCfgCfgLossInterval=ciscoTsPortCfgCfgLossInterval, ciscoTsTransitedTrBRFs=ciscoTsTransitedTrBRFs, ciscoTsPortStatsAddrChainOverflows=ciscoTsPortStatsAddrChainOverflows, ciscoTsDuplicateMACAddr=ciscoTsDuplicateMACAddr, ciscoTsMACDestFilterStationAddress=ciscoTsMACDestFilterStationAddress, ciscoTsTftpDownload=ciscoTsTftpDownload, ciscoTsTrBRFInfoIEEEStpUsesBridgeFuncAddr=ciscoTsTrBRFInfoIEEEStpUsesBridgeFuncAddr, ciscoTsTrCRFInfoSpanningTreeInternalPortMode=ciscoTsTrCRFInfoSpanningTreeInternalPortMode, ciscoTsMACSourceFilterType=ciscoTsMACSourceFilterType, ciscoTsTrBRFInfoIpState=ciscoTsTrBRFInfoIpState, ciscoTsProtocolFilterPort=ciscoTsProtocolFilterPort, ciscoTsStack=ciscoTsStack, ciscoTsPortCfgPortMode=ciscoTsPortCfgPortMode, ciscoTsModSwitchNumber=ciscoTsModSwitchNumber, ciscoTsStackSwitchLAAddr=ciscoTsStackSwitchLAAddr, ciscoTsStackPwrStatusChange=ciscoTsStackPwrStatusChange, ciscoTsPortCfgEarlyTokenRlse=ciscoTsPortCfgEarlyTokenRlse, ciscoTsProbe=ciscoTsProbe, ciscoTsStackSwitchLargestNumStations=ciscoTsStackSwitchLargestNumStations, ciscoTsModType=ciscoTsModType, ciscoTsPortStatsTable=ciscoTsPortStatsTable, ciscoTsPortStatsTrCRF=ciscoTsPortStatsTrCRF, ciscoTsPortCfgTable=ciscoTsPortCfgTable, ciscoTsMACSourceFilterPorts=ciscoTsMACSourceFilterPorts, ciscoTsStackSwitchSPANMonitoredTrCRFs=ciscoTsStackSwitchSPANMonitoredTrCRFs, ciscoTsStackSwitchRcvdFrames=ciscoTsStackSwitchRcvdFrames, ciscoTsPortCfgErrLoThreshold=ciscoTsPortCfgErrLoThreshold, ciscoTsPortStatsModNumber=ciscoTsPortStatsModNumber, ciscoTsProtocolFilterTable=ciscoTsProtocolFilterTable, ciscoTsProtocolClassFilterEtype=ciscoTsProtocolClassFilterEtype, ciscoTsStackSwitchSPANPort=ciscoTsStackSwitchSPANPort, ciscoTsIpAddr=ciscoTsIpAddr, ciscoTsProtocolClassFilterIndex=ciscoTsProtocolClassFilterIndex, ciscoTsPortStatsCfgLossRC=ciscoTsPortStatsCfgLossRC, ciscoTsTrBRFNewRoot=ciscoTsTrBRFNewRoot, ciscoTsConfig=ciscoTsConfig, ciscoTsPortStatsOutBufOverflows=ciscoTsPortStatsOutBufOverflows, ciscoTsPortCfgResetAddrs=ciscoTsPortCfgResetAddrs, ciscoTsPortCfgMaxExplorerRate=ciscoTsPortCfgMaxExplorerRate, ciscoTsTCPorts=ciscoTsTCPorts, ciscoTsConfiguration=ciscoTsConfiguration, ciscoTsPortCfgLossTrap=ciscoTsPortCfgLossTrap, ciscoTsPortCfgIfIndex=ciscoTsPortCfgIfIndex, ciscoTsTrapRcvrComm=ciscoTsTrapRcvrComm, ciscoTsDupAddrFilterTable=ciscoTsDupAddrFilterTable, ciscoTsModTable=ciscoTsModTable, ciscoTsTrBRFTopologyChange=ciscoTsTrBRFTopologyChange, ciscoTsModUptime=ciscoTsModUptime, ciscoTsPortStatsSwitchedFrames=ciscoTsPortStatsSwitchedFrames, ciscoTsStackSwitchBIAddr=ciscoTsStackSwitchBIAddr, ciscoTsPassiveProbePort=ciscoTsPassiveProbePort, ciscoTsTrCRFInfoTable=ciscoTsTrCRFInfoTable, ciscoTsPortStatsLongFrames=ciscoTsPortStatsLongFrames, ciscoTsPassiveProbeMonitoredPort=ciscoTsPassiveProbeMonitoredPort, ciscoTsPortCfgDemandAgingLevel=ciscoTsPortCfgDemandAgingLevel, ciscoTsStackSwitchXmitErrFrames=ciscoTsStackSwitchXmitErrFrames, ciscoTsBeaconStart=ciscoTsBeaconStart, ciscoTsFilter=ciscoTsFilter, ciscoTsStackSwitchLostFrames=ciscoTsStackSwitchLostFrames, ciscoTsPassiveProbeEntry=ciscoTsPassiveProbeEntry, ciscoTsPortStatsEntry=ciscoTsPortStatsEntry, ciscoTsTransitedConfiguredTrCRFs=ciscoTsTransitedConfiguredTrCRFs, ciscoTsPortSoftErrExceededTrap=ciscoTsPortSoftErrExceededTrap, ciscoTsPortStatsNumber=ciscoTsPortStatsNumber, ciscoTsStackSwitchPwrSupplyStatus=ciscoTsStackSwitchPwrSupplyStatus, ciscoTsModNumber=ciscoTsModNumber, ciscoTsPortStatsRcvMcasts=ciscoTsPortStatsRcvMcasts, ciscoTsProtocolClassFilterDSAPs=ciscoTsProtocolClassFilterDSAPs, ciscoTsModEntry=ciscoTsModEntry, ciscoTsMACSourceFilterStationAddress=ciscoTsMACSourceFilterStationAddress, ciscoTsMACDestFilterType=ciscoTsMACDestFilterType, ciscoTsTrunkProtocolFilterEntry=ciscoTsTrunkProtocolFilterEntry, ciscoTsTftpDownloadStatus=ciscoTsTftpDownloadStatus, ciscoTsProStackMatrixStatus=ciscoTsProStackMatrixStatus, ciscoTsPortCfgResetStats=ciscoTsPortCfgResetStats, ciscoTsStackCfgChange=ciscoTsStackCfgChange, ciscoTsStackSwitchAddressTblFulls=ciscoTsStackSwitchAddressTblFulls, ciscoTsPortStatsIfIndex=ciscoTsPortStatsIfIndex, ciscoTsPortStatsPktsInErrors=ciscoTsPortStatsPktsInErrors, ciscoTsPortCfgCfgLossThres=ciscoTsPortCfgCfgLossThres, ciscoTsTrBRFInfoName=ciscoTsTrBRFInfoName, ciscoTsPortStatsShortFrames=ciscoTsPortStatsShortFrames, ciscoTsPortStatsInFrames=ciscoTsPortStatsInFrames, ciscoTsPortStatsInBufOverflows=ciscoTsPortStatsInBufOverflows, ciscoTsTCEntry=ciscoTsTCEntry, ciscoTsMACDestFilterEntry=ciscoTsMACDestFilterEntry, ciscoTsMACSourceFilterEntry=ciscoTsMACSourceFilterEntry, ciscoTsBeaconEnd=ciscoTsBeaconEnd, ciscoTsPortStatsTableOverflows=ciscoTsPortStatsTableOverflows, ciscoTsStackSwitchFeatureStatus=ciscoTsStackSwitchFeatureStatus, ciscoTsStackSwitchSPANMonitoredPort=ciscoTsStackSwitchSPANMonitoredPort, ciscoTsPortCfgPriorityThres=ciscoTsPortCfgPriorityThres, ciscoTsModState=ciscoTsModState, ciscoTsDupAddrFilterSwitchNumber=ciscoTsDupAddrFilterSwitchNumber, ciscoTsModRevision=ciscoTsModRevision, ciscoTsNumSwitches=ciscoTsNumSwitches, ciscoTsMACSourceFilterStatus=ciscoTsMACSourceFilterStatus, ciscoTsTrCRFTopologyChange=ciscoTsTrCRFTopologyChange, ciscoTsProtocolFilterBlockingMode=ciscoTsProtocolFilterBlockingMode, ciscoTsProtocolClassFilterTable=ciscoTsProtocolClassFilterTable, ciscoTsStackEntry=ciscoTsStackEntry, ciscoTsProtocolFilterTranspMode=ciscoTsProtocolFilterTranspMode, ciscoTsPortStatsStations=ciscoTsPortStatsStations, ciscoTsPassiveProbeIndex=ciscoTsPassiveProbeIndex, ciscoTsMACSourceFilterSwitchNumber=ciscoTsMACSourceFilterSwitchNumber, ciscoTsTrunkProtocolFilterBlockingMode=ciscoTsTrunkProtocolFilterBlockingMode, ciscoTsStackTempChange=ciscoTsStackTempChange, ciscoTsMACDestFilterExitMask=ciscoTsMACDestFilterExitMask, ciscoTsMACDestFilterTable=ciscoTsMACDestFilterTable, ciscoTsPortStatsCfgLoss=ciscoTsPortStatsCfgLoss, ciscoTsPortStatsLocalStations=ciscoTsPortStatsLocalStations)
