#
# PySNMP MIB module AT-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-STACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:14:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
modules, DisplayStringUnsized = mibBuilder.importSymbols("AT-SMI-MIB", "modules", "DisplayStringUnsized")
hostId, = mibBuilder.importSymbols("AT-SYSINFO-MIB", "hostId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, TimeTicks, Counter64, Gauge32, Bits, IpAddress, MibIdentifier, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "TimeTicks", "Counter64", "Gauge32", "Bits", "IpAddress", "MibIdentifier", "ModuleIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stack = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120))
stack.setRevisions(('2006-05-03 09:26',))
if mibBuilder.loadTexts: stack.setLastUpdated('200605241222Z')
if mibBuilder.loadTexts: stack.setOrganization('Allied Telesis, Inc')
stackId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackId.setStatus('current')
stackSnmpHost = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackSnmpHost.setStatus('current')
stackStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackStatus.setStatus('current')
stackInterface = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackInterface.setStatus('current')
stackAuth = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("plaintext", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackAuth.setStatus('current')
stackPassword = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 6), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackPassword.setStatus('current')
counters = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7))
debugErrors = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: debugErrors.setStatus('current')
rxPkts = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPkts.setStatus('current')
rxDiscards = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiscards.setStatus('current')
txPkts = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPkts.setStatus('current')
txFails = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFails.setStatus('current')
sdrCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdrCount.setStatus('current')
stackMemberTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8), )
if mibBuilder.loadTexts: stackMemberTable.setStatus('current')
stackMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1), ).setIndexNames((0, "AT-SYSINFO-MIB", "hostId"))
if mibBuilder.loadTexts: stackMemberEntry.setStatus('current')
memberHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberHostId.setStatus('current')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
dedicatedMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dedicatedMaster.setStatus('current')
backupDedicatedMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupDedicatedMaster.setStatus('current')
state = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: state.setStatus('current')
mibBuilder.exportSymbols("AT-STACK-MIB", PYSNMP_MODULE_ID=stack, stackInterface=stackInterface, stackAuth=stackAuth, counters=counters, macAddress=macAddress, txFails=txFails, dedicatedMaster=dedicatedMaster, txPkts=txPkts, state=state, stackMemberTable=stackMemberTable, stackMemberEntry=stackMemberEntry, stackSnmpHost=stackSnmpHost, memberHostId=memberHostId, rxDiscards=rxDiscards, backupDedicatedMaster=backupDedicatedMaster, sdrCount=sdrCount, stack=stack, stackId=stackId, stackPassword=stackPassword, debugErrors=debugErrors, rxPkts=rxPkts, stackStatus=stackStatus)
