#
# PySNMP MIB module APPIAN-PPORT-SERIAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-SERIAL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:08:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisRingId, acChassisCurrentTime = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisRingId", "acChassisCurrentTime")
AcAdminStatus, acPport, AcOpStatus, AcNodeId = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcAdminStatus", "acPport", "AcOpStatus", "AcNodeId")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, TimeTicks, Gauge32, Unsigned32, ObjectIdentity, iso, Bits, Counter32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Gauge32", "Unsigned32", "ObjectIdentity", "iso", "Bits", "Counter32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
acSerial = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2))
acSerial.setRevisions(('1900-02-23 16:00',))
if mibBuilder.loadTexts: acSerial.setLastUpdated('0002231600Z')
if mibBuilder.loadTexts: acSerial.setOrganization('Appian Communications, Inc.')
acSerialTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1), )
if mibBuilder.loadTexts: acSerialTable.setStatus('current')
acSerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), (0, "APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), (0, "APPIAN-PPORT-SERIAL-MIB", "acSerialPort"))
if mibBuilder.loadTexts: acSerialEntry.setStatus('current')
acSerialNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSerialNodeId.setStatus('current')
acSerialSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSerialSlot.setStatus('current')
acSerialPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSerialPort.setStatus('current')
acSerialAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialAdminStatus.setStatus('current')
acSerialOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialOpStatus.setStatus('current')
acSerialOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialOpCode.setStatus('current')
acSerialOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("terminal", 1), ("ppp", 2))).clone('terminal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialOpMode.setStatus('current')
acSerialBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("auto", 1), ("baud9600", 2), ("baud19200", 3), ("baud56000", 4), ("baud64000", 5), ("baud115000", 6))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialBaudRate.setStatus('current')
acSerialParity = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("odd", 2), ("even", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialParity.setStatus('current')
acSerialNumberBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("bits-7", 1), ("bits-8", 2))).clone('bits-8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialNumberBits.setStatus('current')
acSerialIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialIpAddress.setStatus('current')
acSerialIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialIpSubnet.setStatus('current')
acSerialRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialRxOctets.setStatus('current')
acSerialTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialTxOctets.setStatus('current')
acSerialInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Serial Interface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialInterfaceName.setStatus('current')
acSerialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0))
acSerialLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialPort"))
if mibBuilder.loadTexts: acSerialLinkDownTrap.setStatus('current')
acSerialLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialPort"))
if mibBuilder.loadTexts: acSerialLinkUpTrap.setStatus('current')
acSerialStatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialPort"))
if mibBuilder.loadTexts: acSerialStatsResetTrap.setStatus('current')
acSerialCfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialPort"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialOpCode"))
if mibBuilder.loadTexts: acSerialCfgErrorTrap.setStatus('current')
mibBuilder.exportSymbols("APPIAN-PPORT-SERIAL-MIB", PYSNMP_MODULE_ID=acSerial, acSerialEntry=acSerialEntry, acSerialTable=acSerialTable, acSerialStatsResetTrap=acSerialStatsResetTrap, acSerialLinkDownTrap=acSerialLinkDownTrap, acSerialPort=acSerialPort, acSerialIpSubnet=acSerialIpSubnet, acSerialLinkUpTrap=acSerialLinkUpTrap, acSerialOpCode=acSerialOpCode, acSerialTraps=acSerialTraps, acSerialOpMode=acSerialOpMode, acSerialBaudRate=acSerialBaudRate, acSerialInterfaceName=acSerialInterfaceName, acSerialNumberBits=acSerialNumberBits, acSerialAdminStatus=acSerialAdminStatus, acSerialTxOctets=acSerialTxOctets, acSerialOpStatus=acSerialOpStatus, acSerialIpAddress=acSerialIpAddress, acSerialCfgErrorTrap=acSerialCfgErrorTrap, acSerialNodeId=acSerialNodeId, acSerialSlot=acSerialSlot, acSerialRxOctets=acSerialRxOctets, acSerial=acSerial, acSerialParity=acSerialParity)
