#
# PySNMP MIB module DLINK-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-EQUIPMENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:34:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
AgentNotifyLevel, dlink_common_mgmt = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, NotificationType, TimeTicks, ModuleIdentity, Integer32, Gauge32, Bits, MibIdentifier, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "TimeTicks", "ModuleIdentity", "Integer32", "Gauge32", "Bits", "MibIdentifier", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ObjectIdentity")
DateAndTime, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "TruthValue", "DisplayString")
swDlinkEquipmentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 11))
if mibBuilder.loadTexts: swDlinkEquipmentMIB.setLastUpdated('0202140000Z')
if mibBuilder.loadTexts: swDlinkEquipmentMIB.setOrganization('DLink Corporation')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

swDlinkEquipmentMib = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 1))
swDlinkEquipmentNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2))
swDlinkEquipmentCapacity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 1), Bits().clone(namedValues=NamedValues(("fanCapable", 0), ("redundantPowerCapable", 1), ("tempteratureDetection", 2), ("stackingCapable", 3), ("chassisCapable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDlinkEquipmentCapacity.setStatus('current')
swPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6), )
if mibBuilder.loadTexts: swPowerTable.setStatus('current')
swPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6, 1), ).setIndexNames((0, "DLINK-EQUIPMENT-MIB", "swPowerUnitIndex"), (0, "DLINK-EQUIPMENT-MIB", "swPowerID"))
if mibBuilder.loadTexts: swPowerEntry.setStatus('current')
swPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerUnitIndex.setStatus('current')
swPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerID.setStatus('current')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("lowVoltage", 1), ("overCurrent", 2), ("working", 3), ("fail", 4), ("connect", 5), ("disconnect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
swUnitMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9))
swUnitStackingVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitStackingVersion.setStatus('current')
swUnitMaxSupportedUnits = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMaxSupportedUnits.setStatus('current')
swUnitNumOfUnit = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitNumOfUnit.setStatus('current')
swUnitMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4), )
if mibBuilder.loadTexts: swUnitMgmtTable.setStatus('current')
swUnitMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1), ).setIndexNames((0, "DLINK-EQUIPMENT-MIB", "swUnitMgmtId"))
if mibBuilder.loadTexts: swUnitMgmtEntry.setStatus('current')
swUnitMgmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtId.setStatus('current')
swUnitMgmtMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtMacAddr.setStatus('current')
swUnitMgmtStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtStartPort.setStatus('current')
swUnitMgmtPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtPortRange.setStatus('current')
swUnitMgmtFrontPanelLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtFrontPanelLedStatus.setStatus('current')
swUnitMgmtCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("stand-alone", 3), ("master", 4), ("slave", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitMgmtCtrlMode.setStatus('current')
swUnitMgmtCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("stand-alone", 3), ("master", 4), ("slave", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtCurrentMode.setStatus('current')
swUnitMgmtVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtVersion.setStatus('current')
swUnitMgmtModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtModuleName.setStatus('current')
swEquipmentNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2))
swEquipPowerNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2))
swEquipPowerNotifyPerfix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2, 0))
swPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2, 0, 2)).setObjects(("DLINK-EQUIPMENT-MIB", "swPowerUnitIndex"), ("DLINK-EQUIPMENT-MIB", "swPowerID"), ("DLINK-EQUIPMENT-MIB", "swPowerStatus"))
if mibBuilder.loadTexts: swPowerFailure.setStatus('current')
swPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2, 0, 3)).setObjects(("DLINK-EQUIPMENT-MIB", "swPowerUnitIndex"), ("DLINK-EQUIPMENT-MIB", "swPowerID"), ("DLINK-EQUIPMENT-MIB", "swPowerStatus"))
if mibBuilder.loadTexts: swPowerRecover.setStatus('current')
swNotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 3))
mibBuilder.exportSymbols("DLINK-EQUIPMENT-MIB", swUnitMgmtCtrlMode=swUnitMgmtCtrlMode, MacAddress=MacAddress, swEquipmentNotification=swEquipmentNotification, swDlinkEquipmentNotify=swDlinkEquipmentNotify, swPowerTable=swPowerTable, swUnitMgmtStartPort=swUnitMgmtStartPort, swDlinkEquipmentMIB=swDlinkEquipmentMIB, swUnitMgmtCurrentMode=swUnitMgmtCurrentMode, swUnitMgmtModuleName=swUnitMgmtModuleName, swEquipPowerNotifyPerfix=swEquipPowerNotifyPerfix, swUnitMgmtPortRange=swUnitMgmtPortRange, swUnitMgmtMacAddr=swUnitMgmtMacAddr, swPowerEntry=swPowerEntry, swDlinkEquipmentCapacity=swDlinkEquipmentCapacity, swUnitMaxSupportedUnits=swUnitMaxSupportedUnits, swPowerID=swPowerID, swNotificationBindings=swNotificationBindings, swPowerFailure=swPowerFailure, swUnitMgmtEntry=swUnitMgmtEntry, swPowerUnitIndex=swPowerUnitIndex, swPowerRecover=swPowerRecover, swUnitNumOfUnit=swUnitNumOfUnit, PYSNMP_MODULE_ID=swDlinkEquipmentMIB, swUnitMgmtFrontPanelLedStatus=swUnitMgmtFrontPanelLedStatus, swUnitMgmtTable=swUnitMgmtTable, swEquipPowerNotification=swEquipPowerNotification, swDlinkEquipmentMib=swDlinkEquipmentMib, swPowerStatus=swPowerStatus, swUnitMgmtId=swUnitMgmtId, swUnitStackingVersion=swUnitStackingVersion, swUnitMgmtVersion=swUnitMgmtVersion, swUnitMgmt=swUnitMgmt)
