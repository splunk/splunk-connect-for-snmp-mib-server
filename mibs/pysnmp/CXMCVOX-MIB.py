#
# PySNMP MIB module CXMCVOX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXMCVOX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
cxModuleHwPhysSlot, = mibBuilder.importSymbols("CXModuleHardware-MIB", "cxModuleHwPhysSlot")
cxMc600, = mibBuilder.importSymbols("CXProduct-SMI", "cxMc600")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, NotificationType, ModuleIdentity, IpAddress, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Gauge32, Unsigned32, MibIdentifier, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "NotificationType", "ModuleIdentity", "IpAddress", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Gauge32", "Unsigned32", "MibIdentifier", "TimeTicks", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxMcVox = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2))
cxMcVoxGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1))
cxMcVoxGlobalAdmPathLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalAdmPathLng.setStatus('obsolete')
cxMcVoxGlobalReinitPath = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalReinitPath.setStatus('obsolete')
cxMcVoxGlobalClearPath = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalClearPath.setStatus('deprecated')
cxMcVoxGlobalReinitNet = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalReinitNet.setStatus('obsolete')
cxMcVoxGlobalClearNet = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalClearNet.setStatus('deprecated')
cxMcVoxGlobalAdmLocalId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('          ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalAdmLocalId.setStatus('optional')
cxMcVoxGlobalOpeLocalId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalOpeLocalId.setStatus('optional')
cxMcVoxGlobalTensionRing = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalTensionRing.setStatus('mandatory')
cxMcVoxGlobalTensionDc = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalTensionDc.setStatus('mandatory')
cxMcVoxGlobalTrapRing = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalTrapRing.setStatus('mandatory')
cxMcVoxGlobalTrapDc = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalTrapDc.setStatus('mandatory')
cxMcVoxGlobalAdmGrpNbPoll = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalAdmGrpNbPoll.setStatus('deprecated')
cxMcVoxGlobalOpeGrpNbPoll = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalOpeGrpNbPoll.setStatus('deprecated')
cxMcVoxGlobalClearGrp = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalClearGrp.setStatus('optional')
cxMcVoxGlobalOpePathLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalOpePathLng.setStatus('obsolete')
cxMcVoxGlobalReinitRouting = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalReinitRouting.setStatus('optional')
cxMcVoxGlobalForceDefConfig = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalForceDefConfig.setStatus('optional')
cxMcVoxGlobalReinitPinTable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalReinitPinTable.setStatus('optional')
cxMcVoxGlobalAdmEnablePinTable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalAdmEnablePinTable.setStatus('optional')
cxMcVoxGlobalOpeEnablePinTable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalOpeEnablePinTable.setStatus('optional')
cxMcVoxGlobalReinitCodesTable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalReinitCodesTable.setStatus('optional')
cxMcVoxGlobalAdmEnableCodesTable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalAdmEnableCodesTable.setStatus('optional')
cxMcVoxGlobalOpeEnableCodesTable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalOpeEnableCodesTable.setStatus('optional')
cxMcVoxGlobalSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalSoftRev.setStatus('optional')
cxMcVoxGlobalGlmInBetwReqTime = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalGlmInBetwReqTime.setStatus('mandatory')
cxMcVoxGlobalGlmMaxTimeToTxReq = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalGlmMaxTimeToTxReq.setStatus('mandatory')
cxMcVoxGlobalGlmInBetwRespTime = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalGlmInBetwRespTime.setStatus('mandatory')
cxMcVoxGlobalGlmMaxTimeToTxResp = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalGlmMaxTimeToTxResp.setStatus('mandatory')
cxMcVoxGlobalGlmVoiceSilenceTime = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalGlmVoiceSilenceTime.setStatus('mandatory')
cxMcVoxGlobalGlmSupervSilenceTime = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 60000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalGlmSupervSilenceTime.setStatus('mandatory')
cxMcVoxGlobalGsdAutoCnctDelay = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalGsdAutoCnctDelay.setStatus('mandatory')
cxMcVoxGlobalClearLclExt = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalClearLclExt.setStatus('optional')
cxMcVoxGlobalClearRmtExt = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalClearRmtExt.setStatus('optional')
cxMcVoxGlobalWanSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalWanSlot.setStatus('mandatory')
cxMcVoxGlobalNetNbDigits = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalNetNbDigits.setStatus('mandatory')
cxMcVoxMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxMibLevel.setStatus('mandatory')
cxMcVoxGlobalRecogAcc = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalRecogAcc.setStatus('mandatory')
cxMcVoxGlobalAccCode = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5)).clone('011')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalAccCode.setStatus('mandatory')
cxMcVoxGlobalAccCodeLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 114), Integer32().clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalAccCodeLng.setStatus('mandatory')
cxMcVoxGlobalAdmPinCodeLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 115), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalAdmPinCodeLng.setStatus('mandatory')
cxMcVoxGlobalOpePinCodeLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 116), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGlobalOpePinCodeLng.setStatus('mandatory')
cxMcVoxGlobalClearHistoryTable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalClearHistoryTable.setStatus('mandatory')
cxMcVoxGlobalHistoryMaxNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 118), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 256)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalHistoryMaxNumberOfEntries.setStatus('mandatory')
cxMcVoxGlobalHistoryPercentageFull = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 119), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 95)).clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalHistoryPercentageFull.setStatus('mandatory')
cxMcVoxGlobalTrapHistory = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalTrapHistory.setStatus('mandatory')
cxMcVoxGlobalLseTimerT2 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 121), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalLseTimerT2.setStatus('mandatory')
cxMcVoxGlobalLseTimerT3 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 122), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(550)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalLseTimerT3.setStatus('mandatory')
cxMcVoxGlobalExtBitMask = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 1, 123), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGlobalExtBitMask.setStatus('mandatory')
cxMcVoxCfgTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cxMcVoxCfgTable.setStatus('mandatory')
cxMcVoxCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxCfgCardIndex"), (0, "CXMCVOX-MIB", "cxMcVoxCfgPortIndex"))
if mibBuilder.loadTexts: cxMcVoxCfgEntry.setStatus('mandatory')
cxMcVoxCfgCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxCfgCardIndex.setStatus('mandatory')
cxMcVoxCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxCfgPortIndex.setStatus('mandatory')
cxMcVoxCfgDriverAdmUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("em", 1), ("fxs", 2), ("fxo", 3))).clone('fxs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgDriverAdmUsed.setStatus('mandatory')
cxMcVoxCfgDriverOpeUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("em", 1), ("fxs", 2), ("fxo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxCfgDriverOpeUsed.setStatus('mandatory')
cxMcVoxCfgTrapOnLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgTrapOnLine.setStatus('deprecated')
cxMcVoxCfgTrapOffLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgTrapOffLine.setStatus('deprecated')
cxMcVoxCfgTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgTrapStatus.setStatus('mandatory')
cxMcVoxCfgTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgTrapState.setStatus('deprecated')
cxMcVoxCfgTestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgTestPort.setStatus('optional')
cxMcVoxCfgToneTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgToneTest.setStatus('mandatory')
cxMcVoxCfgReinitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgReinitPort.setStatus('optional')
cxMcVoxCfgClearPort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgClearPort.setStatus('optional')
cxMcVoxCfgOpeAcelpRev = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxCfgOpeAcelpRev.setStatus('optional')
cxMcVoxCfgCmdImmTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgCmdImmTest.setStatus('mandatory')
cxMcVoxCfgCmdTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgCmdTest.setStatus('mandatory')
cxMcVoxCfgMaxPktFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgMaxPktFrame.setStatus('mandatory')
cxMcVoxCfgMaxSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 125)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxCfgMaxSkew.setStatus('mandatory')
cxMcVoxStatAndLog = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3))
cxMcVoxStatusTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: cxMcVoxStatusTable.setStatus('mandatory')
cxMcVoxStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxStatusCardNumber"), (0, "CXMCVOX-MIB", "cxMcVoxStatusPortNumber"))
if mibBuilder.loadTexts: cxMcVoxStatusEntry.setStatus('mandatory')
cxMcVoxStatusCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusCardNumber.setStatus('mandatory')
cxMcVoxStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusPortNumber.setStatus('mandatory')
cxMcVoxStatusPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 31, 32, 33, 34, 41, 42, 43, 44))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("no-voice-io", 3), ("boot-err-1", 31), ("boot-err-2", 32), ("boot-err-3", 33), ("boot-err-4", 34), ("appl-err-1", 41), ("appl-err-2", 42), ("appl-err-3", 43), ("appl-err-4", 44)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusPortStatus.setStatus('mandatory')
cxMcVoxStatusHookLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusHookLocal.setStatus('mandatory')
cxMcVoxStatusHookRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusHookRem.setStatus('mandatory')
cxMcVoxStatusIoAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fault", 1), ("passed", 2), ("inapplicable", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusIoAccess.setStatus('mandatory')
cxMcVoxStatusChannelAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fault", 1), ("passed", 2), ("inapplicable", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusChannelAccess.setStatus('mandatory')
cxMcVoxStatusDspRam = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fault", 1), ("passed", 2), ("inapplicable", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusDspRam.setStatus('mandatory')
cxMcVoxStatusDspDpram = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fault", 1), ("passed", 2), ("inapplicable", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusDspDpram.setStatus('mandatory')
cxMcVoxStatusSamplingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fault", 1), ("passed", 2), ("inapplicable", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusSamplingTime.setStatus('mandatory')
cxMcVoxStatusWatchdog = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fault", 1), ("passed", 2), ("inapplicable", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusWatchdog.setStatus('mandatory')
cxMcVoxStatusRemPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusRemPortStatus.setStatus('mandatory')
cxMcVoxStatusInputDbmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(700, 1050))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusInputDbmLevel.setStatus('mandatory')
cxMcVoxStatusPhyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("if-em", 1), ("if-fxs", 2), ("if-fxo", 3), ("if-absent", 4), ("if-unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusPhyIfType.setStatus('mandatory')
cxMcVoxStatusDspUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusDspUtilization.setStatus('mandatory')
cxMcVoxStatusIOResetState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in-reset", 1), ("normal", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatusIOResetState.setStatus('mandatory')
cxMcVoxEventTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2), )
if mibBuilder.loadTexts: cxMcVoxEventTable.setStatus('deprecated')
cxMcVoxEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxEventCardNumber"), (0, "CXMCVOX-MIB", "cxMcVoxEventPortNumber"), (0, "CXMCVOX-MIB", "cxMcVoxEventLogIndex"))
if mibBuilder.loadTexts: cxMcVoxEventEntry.setStatus('deprecated')
cxMcVoxEventCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEventCardNumber.setStatus('deprecated')
cxMcVoxEventPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEventPortNumber.setStatus('deprecated')
cxMcVoxEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEventLogIndex.setStatus('deprecated')
cxMcVoxEventDateAndTimeOnLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEventDateAndTimeOnLine.setStatus('deprecated')
cxMcVoxEventDateAndTimeOffLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEventDateAndTimeOffLine.setStatus('deprecated')
cxMcVoxEventPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEventPhoneNumber.setStatus('deprecated')
cxMcVoxEventLnkState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("remUnavailable", 1), ("remError", 2), ("busy", 3), ("open", 4), ("errActiveChn", 5), ("errPath", 6), ("errLnk", 7), ("fixedLnkDown", 8), ("fixedLnkUp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEventLnkState.setStatus('deprecated')
cxMcVoxEventPin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEventPin.setStatus('deprecated')
cxMcVoxEventClrEvts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEventClrEvts.setStatus('deprecated')
cxMcVoxStateTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3), )
if mibBuilder.loadTexts: cxMcVoxStateTable.setStatus('deprecated')
cxMcVoxStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxStateCardNumber"), (0, "CXMCVOX-MIB", "cxMcVoxStatePortNumber"), (0, "CXMCVOX-MIB", "cxMcVoxStateLogIndex"))
if mibBuilder.loadTexts: cxMcVoxStateEntry.setStatus('deprecated')
cxMcVoxStateCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStateCardNumber.setStatus('deprecated')
cxMcVoxStatePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatePortNumber.setStatus('deprecated')
cxMcVoxStateLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStateLogIndex.setStatus('deprecated')
cxMcVoxStatePathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStatePathId.setStatus('deprecated')
cxMcVoxStateDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStateDateAndTime.setStatus('deprecated')
cxMcVoxStateLnkState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("remUnavailable", 1), ("remError", 2), ("busy", 3), ("open", 4), ("errActiveChn", 5), ("errPath", 6), ("errLnk", 7), ("fixedLnkDown", 8), ("fixedLnkUp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStateLnkState.setStatus('deprecated')
cxMcVoxStateRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxStateRmtExt.setStatus('deprecated')
cxMcVoxPathAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 4), )
if mibBuilder.loadTexts: cxMcVoxPathAdmTable.setStatus('deprecated')
cxMcVoxPathAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 4, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxPathAdmIndex"))
if mibBuilder.loadTexts: cxMcVoxPathAdmEntry.setStatus('deprecated')
cxMcVoxPathAdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxPathAdmIndex.setStatus('deprecated')
cxMcVoxPathAdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxPathAdmRowStatus.setStatus('deprecated')
cxMcVoxPathAdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxPathAdmPathId.setStatus('deprecated')
cxMcVoxPathAdmRemStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxPathAdmRemStationId.setStatus('deprecated')
cxMcVoxPathAdmHunt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxPathAdmHunt.setStatus('deprecated')
cxMcVoxPathAdmLng = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxPathAdmLng.setStatus('deprecated')
cxMcVoxPathOpeTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 5), )
if mibBuilder.loadTexts: cxMcVoxPathOpeTable.setStatus('deprecated')
cxMcVoxPathOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 5, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxPathOpeIndex"))
if mibBuilder.loadTexts: cxMcVoxPathOpeEntry.setStatus('deprecated')
cxMcVoxPathOpeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxPathOpeIndex.setStatus('deprecated')
cxMcVoxPathOpePathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxPathOpePathId.setStatus('deprecated')
cxMcVoxPathOpeRemStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxPathOpeRemStationId.setStatus('deprecated')
cxMcVoxPathOpeHunt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxPathOpeHunt.setStatus('deprecated')
cxMcVoxPathOpeLng = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxPathOpeLng.setStatus('deprecated')
cxMcVoxNetAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 6), )
if mibBuilder.loadTexts: cxMcVoxNetAdmTable.setStatus('deprecated')
cxMcVoxNetAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 6, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxNetAdmIndex"))
if mibBuilder.loadTexts: cxMcVoxNetAdmEntry.setStatus('deprecated')
cxMcVoxNetAdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxNetAdmIndex.setStatus('deprecated')
cxMcVoxNetAdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxNetAdmRowStatus.setStatus('deprecated')
cxMcVoxNetAdmRemStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxNetAdmRemStationId.setStatus('deprecated')
cxMcVoxNetAdmLocalLnkStation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxNetAdmLocalLnkStation.setStatus('deprecated')
cxMcVoxNetAdmRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxNetAdmRoute.setStatus('deprecated')
cxMcVoxNetAdmRemVoxStation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxNetAdmRemVoxStation.setStatus('deprecated')
cxMcVoxNetOpeTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 7), )
if mibBuilder.loadTexts: cxMcVoxNetOpeTable.setStatus('deprecated')
cxMcVoxNetOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 7, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxNetOpeIndex"))
if mibBuilder.loadTexts: cxMcVoxNetOpeEntry.setStatus('deprecated')
cxMcVoxNetOpeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxNetOpeIndex.setStatus('deprecated')
cxMcVoxNetOpeRemStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxNetOpeRemStationId.setStatus('deprecated')
cxMcVoxNetOpeLocalLnkStation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxNetOpeLocalLnkStation.setStatus('deprecated')
cxMcVoxNetOpeRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxNetOpeRoute.setStatus('deprecated')
cxMcVoxNetOpeRemVoxStation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxNetOpeRemVoxStation.setStatus('deprecated')
cxMcVoxDriverAdm = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8))
cxMcVoxEmAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1), )
if mibBuilder.loadTexts: cxMcVoxEmAdmTable.setStatus('mandatory')
cxMcVoxEmAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxEmAdmCardUsed"), (0, "CXMCVOX-MIB", "cxMcVoxEmAdmPortUsed"))
if mibBuilder.loadTexts: cxMcVoxEmAdmEntry.setStatus('mandatory')
cxMcVoxEmAdmCardUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmAdmCardUsed.setStatus('mandatory')
cxMcVoxEmAdmPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmAdmPortUsed.setStatus('mandatory')
cxMcVoxEmAdmPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmPortStatus.setStatus('mandatory')
cxMcVoxEmAdmVocoder = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bps5800", 1), ("bps8000", 2), ("kbps40", 3), ("kbps32", 4), ("kbps24", 5), ("kbps16", 6), ("opt7", 7), ("opt8", 8))).clone('bps8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmVocoder.setStatus('mandatory')
cxMcVoxEmAdmFaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4))).clone('bps7200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmFaxBw.setStatus('mandatory')
cxMcVoxEmAdmAutoCnx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmAutoCnx.setStatus('obsolete')
cxMcVoxEmAdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone('000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmPathId.setStatus('deprecated')
cxMcVoxEmAdmTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmTxGain.setStatus('mandatory')
cxMcVoxEmAdmRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmRxGain.setStatus('mandatory')
cxMcVoxEmAdmEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmEchoCancel.setStatus('mandatory')
cxMcVoxEmAdmType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("type-1", 1), ("type-2", 2), ("type-3", 3), ("type-4", 4), ("type-5", 5))).clone('type-2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmType.setStatus('mandatory')
cxMcVoxEmAdmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmMode.setStatus('mandatory')
cxMcVoxEmAdmDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2), ("mfR1", 3), ("mfR2", 4))).clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmDialType.setStatus('mandatory')
cxMcVoxEmAdmSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2), ("wink", 3), ("ac15", 4), ("openchn", 5), ("r2", 6), ("mfcr2", 7), ("isdn", 8))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmSignalType.setStatus('mandatory')
cxMcVoxEmAdmAc15Type = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmAc15Type.setStatus('mandatory')
cxMcVoxEmAdmAc15TimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmAc15TimeOn.setStatus('mandatory')
cxMcVoxEmAdmAc15TimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmAc15TimeOff.setStatus('mandatory')
cxMcVoxEmAdmCnctType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switched", 1), ("auto-connect", 2), ("fixed", 3))).clone('switched')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmCnctType.setStatus('mandatory')
cxMcVoxEmAdmRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("north-american", 1), ("international", 2))).clone('north-american')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmRingType.setStatus('mandatory')
cxMcVoxEmAdmRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5)).clone('000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmRmtExt.setStatus('mandatory')
cxMcVoxEmAdmRmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('          ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmRmtId.setStatus('optional')
cxMcVoxEmAdmTranspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emulate", 1), ("transparent", 2), ("local", 3))).clone('emulate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmTranspMode.setStatus('mandatory')
cxMcVoxEmAdmFaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmFaxEnable.setStatus('mandatory')
cxMcVoxEmAdmBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("master", 2), ("slave", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmBroadcast.setStatus('mandatory')
cxMcVoxEmAdmImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("i600-ohms", 1), ("i900-ohms", 2), ("att", 3), ("aus", 4))).clone('i600-ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmAdmImpedance.setStatus('mandatory')
cxMcVoxEmAdmVoiceConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("two-wires", 1), ("four-wires", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmAdmVoiceConnection.setStatus('mandatory')
cxMcVoxFxsAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: cxMcVoxFxsAdmTable.setStatus('mandatory')
cxMcVoxFxsAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxFxsAdmCardUsed"), (0, "CXMCVOX-MIB", "cxMcVoxFxsAdmPortUsed"))
if mibBuilder.loadTexts: cxMcVoxFxsAdmEntry.setStatus('mandatory')
cxMcVoxFxsAdmCardUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsAdmCardUsed.setStatus('mandatory')
cxMcVoxFxsAdmPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsAdmPortUsed.setStatus('mandatory')
cxMcVoxFxsAdmPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmPortStatus.setStatus('mandatory')
cxMcVoxFxsAdmVocoder = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bps5800", 1), ("bps8000", 2), ("kbps40", 3), ("kbps32", 4), ("kbps24", 5), ("kbps16", 6), ("opt7", 7), ("opt8", 8))).clone('bps8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmVocoder.setStatus('mandatory')
cxMcVoxFxsAdmFaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4))).clone('bps7200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmFaxBw.setStatus('mandatory')
cxMcVoxFxsAdmAutoCnx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmAutoCnx.setStatus('obsolete')
cxMcVoxFxsAdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone('000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmPathId.setStatus('deprecated')
cxMcVoxFxsAdmTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmTxGain.setStatus('mandatory')
cxMcVoxFxsAdmRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmRxGain.setStatus('mandatory')
cxMcVoxFxsAdmEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmEchoCancel.setStatus('mandatory')
cxMcVoxFxsAdmSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ground-start", 1), ("loop-start", 2), ("did", 3))).clone('loop-start')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmSignaling.setStatus('mandatory')
cxMcVoxFxsAdmTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmTimeOn.setStatus('obsolete')
cxMcVoxFxsAdmTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmTimeOff.setStatus('obsolete')
cxMcVoxFxsAdmCnctType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switched", 1), ("auto-connect", 2), ("fixed", 3))).clone('switched')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmCnctType.setStatus('mandatory')
cxMcVoxFxsAdmRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("north-american", 1), ("international", 2))).clone('north-american')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmRingType.setStatus('mandatory')
cxMcVoxFxsAdmImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("i600-ohms", 1), ("i900-ohms", 2), ("att", 3), ("aus", 4))).clone('i600-ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmImpedance.setStatus('mandatory')
cxMcVoxFxsAdmDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2))).clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmDialType.setStatus('mandatory')
cxMcVoxFxsAdmDidSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2), ("wink", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmDidSignalType.setStatus('mandatory')
cxMcVoxFxsAdmRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5)).clone('000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmRmtExt.setStatus('mandatory')
cxMcVoxFxsAdmRmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('          ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmRmtId.setStatus('optional')
cxMcVoxFxsAdmTranspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emulate", 1), ("transparent", 2), ("local", 3))).clone('emulate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmTranspMode.setStatus('mandatory')
cxMcVoxFxsAdmFaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmFaxEnable.setStatus('mandatory')
cxMcVoxFxsAdmBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("master", 2), ("slave", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsAdmBroadcast.setStatus('mandatory')
cxMcVoxFxoAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3), )
if mibBuilder.loadTexts: cxMcVoxFxoAdmTable.setStatus('mandatory')
cxMcVoxFxoAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxFxoAdmCardUsed"), (0, "CXMCVOX-MIB", "cxMcVoxFxoAdmPortUsed"))
if mibBuilder.loadTexts: cxMcVoxFxoAdmEntry.setStatus('mandatory')
cxMcVoxFxoAdmCardUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoAdmCardUsed.setStatus('mandatory')
cxMcVoxFxoAdmPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoAdmPortUsed.setStatus('mandatory')
cxMcVoxFxoAdmPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmPortStatus.setStatus('mandatory')
cxMcVoxFxoAdmVocoder = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bps5800", 1), ("bps8000", 2), ("kbps40", 3), ("kbps32", 4), ("kbps24", 5), ("kbps16", 6), ("opt7", 7), ("opt8", 8))).clone('bps8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmVocoder.setStatus('mandatory')
cxMcVoxFxoAdmFaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4))).clone('bps7200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmFaxBw.setStatus('mandatory')
cxMcVoxFxoAdmAutoCnx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmAutoCnx.setStatus('obsolete')
cxMcVoxFxoAdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone('000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmPathId.setStatus('deprecated')
cxMcVoxFxoAdmTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmTxGain.setStatus('mandatory')
cxMcVoxFxoAdmRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmRxGain.setStatus('mandatory')
cxMcVoxFxoAdmEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmEchoCancel.setStatus('mandatory')
cxMcVoxFxoAdmSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ground-start", 1), ("loop-start", 2), ("did", 3))).clone('loop-start')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmSignaling.setStatus('mandatory')
cxMcVoxFxoAdmCnctType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switched", 1), ("auto-connect", 2), ("fixed", 3))).clone('switched')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmCnctType.setStatus('mandatory')
cxMcVoxFxoAdmRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("north-american", 1), ("international", 2))).clone('north-american')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmRingType.setStatus('mandatory')
cxMcVoxFxoAdmImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("i600-ohms", 1), ("i900-ohms", 2), ("att", 3), ("aus", 4))).clone('i600-ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmImpedance.setStatus('mandatory')
cxMcVoxFxoAdmDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2))).clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmDialType.setStatus('mandatory')
cxMcVoxFxoAdmDidSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2), ("wink", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmDidSignalType.setStatus('mandatory')
cxMcVoxFxoAdmRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5)).clone('000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmRmtExt.setStatus('mandatory')
cxMcVoxFxoAdmRmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone('          ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmRmtId.setStatus('optional')
cxMcVoxFxoAdmTranspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emulate", 1), ("transparent", 2), ("local", 3))).clone('emulate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmTranspMode.setStatus('mandatory')
cxMcVoxFxoAdmFaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmFaxEnable.setStatus('mandatory')
cxMcVoxFxoAdmBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 8, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("master", 2), ("slave", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoAdmBroadcast.setStatus('mandatory')
cxMcVoxDriverOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9))
cxMcVoxEmOpeTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1), )
if mibBuilder.loadTexts: cxMcVoxEmOpeTable.setStatus('mandatory')
cxMcVoxEmOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxEmOpeCardUsed"), (0, "CXMCVOX-MIB", "cxMcVoxEmOpePortUsed"))
if mibBuilder.loadTexts: cxMcVoxEmOpeEntry.setStatus('mandatory')
cxMcVoxEmOpeCardUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeCardUsed.setStatus('mandatory')
cxMcVoxEmOpePortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpePortUsed.setStatus('mandatory')
cxMcVoxEmOpePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 31, 32, 33, 34, 41, 42, 43, 44))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("no-voice-io", 3), ("boot-err-1", 31), ("boot-err-2", 32), ("boot-err-3", 33), ("boot-err-4", 34), ("appl-err-1", 41), ("appl-err-2", 42), ("appl-err-3", 43), ("appl-err-4", 44))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpePortStatus.setStatus('mandatory')
cxMcVoxEmOpeVocoder = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bps5800", 1), ("bps8000", 2), ("kbps40", 3), ("kbps32", 4), ("kbps24", 5), ("kbps16", 6), ("opt7", 7), ("opt8", 8))).clone('bps8000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeVocoder.setStatus('mandatory')
cxMcVoxEmOpeFaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4))).clone('bps7200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmOpeFaxBw.setStatus('mandatory')
cxMcVoxEmOpeAutoCnx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeAutoCnx.setStatus('obsolete')
cxMcVoxEmOpePathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpePathId.setStatus('deprecated')
cxMcVoxEmOpeTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmOpeTxGain.setStatus('mandatory')
cxMcVoxEmOpeRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmOpeRxGain.setStatus('mandatory')
cxMcVoxEmOpeEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeEchoCancel.setStatus('mandatory')
cxMcVoxEmOpeType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("type-1", 1), ("type-2", 2), ("type-3", 3), ("type-4", 4), ("type-5", 5))).clone('type-2')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeType.setStatus('mandatory')
cxMcVoxEmOpeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reverse", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeMode.setStatus('mandatory')
cxMcVoxEmOpeDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2), ("mfR1", 3), ("mfR2", 4))).clone('dtmf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeDialType.setStatus('mandatory')
cxMcVoxEmOpeSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2), ("wink", 3), ("ac15", 4), ("openchn", 5), ("r2", 6), ("mfcr2", 7), ("isdn", 8))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeSignalType.setStatus('mandatory')
cxMcVoxEmOpeAc15Type = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeAc15Type.setStatus('mandatory')
cxMcVoxEmOpeAc15TimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmOpeAc15TimeOn.setStatus('mandatory')
cxMcVoxEmOpeAc15TimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmOpeAc15TimeOff.setStatus('mandatory')
cxMcVoxEmOpeCnctType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switched", 1), ("auto-connect", 2), ("fixed", 3))).clone('switched')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeCnctType.setStatus('mandatory')
cxMcVoxEmOpeRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("north-american", 1), ("international", 2))).clone('north-american')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeRingType.setStatus('mandatory')
cxMcVoxEmOpeRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeRmtExt.setStatus('mandatory')
cxMcVoxEmOpeRmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeRmtId.setStatus('optional')
cxMcVoxEmOpeTranspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emulate", 1), ("transparent", 2), ("local", 3))).clone('emulate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeTranspMode.setStatus('mandatory')
cxMcVoxEmOpeFaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeFaxEnable.setStatus('mandatory')
cxMcVoxEmOpeBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("master", 2), ("slave", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeBroadcast.setStatus('mandatory')
cxMcVoxEmOpeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("i600-ohms", 1), ("i900-ohms", 2), ("att", 3), ("aus", 4))).clone('i600-ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxEmOpeImpedance.setStatus('mandatory')
cxMcVoxEmOpeVoiceConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("two-wires", 1), ("four-wires", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxEmOpeVoiceConnection.setStatus('mandatory')
cxMcVoxFxsOpeTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2), )
if mibBuilder.loadTexts: cxMcVoxFxsOpeTable.setStatus('mandatory')
cxMcVoxFxsOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxFxsOpeCardUsed"), (0, "CXMCVOX-MIB", "cxMcVoxFxsOpePortUsed"))
if mibBuilder.loadTexts: cxMcVoxFxsOpeEntry.setStatus('mandatory')
cxMcVoxFxsOpeCardUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeCardUsed.setStatus('mandatory')
cxMcVoxFxsOpePortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpePortUsed.setStatus('mandatory')
cxMcVoxFxsOpePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 31, 32, 33, 34, 41, 42, 43, 44))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("no-voice-io", 3), ("boot-err-1", 31), ("boot-err-2", 32), ("boot-err-3", 33), ("boot-err-4", 34), ("appl-err-1", 41), ("appl-err-2", 42), ("appl-err-3", 43), ("appl-err-4", 44))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpePortStatus.setStatus('mandatory')
cxMcVoxFxsOpeVocoder = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bps5800", 1), ("bps8000", 2), ("kbps40", 3), ("kbps32", 4), ("kbps24", 5), ("kbps16", 6), ("opt7", 7), ("opt8", 8))).clone('bps8000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeVocoder.setStatus('mandatory')
cxMcVoxFxsOpeFaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4))).clone('bps7200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsOpeFaxBw.setStatus('mandatory')
cxMcVoxFxsOpeAutoCnx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeAutoCnx.setStatus('obsolete')
cxMcVoxFxsOpePathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpePathId.setStatus('deprecated')
cxMcVoxFxsOpeTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsOpeTxGain.setStatus('mandatory')
cxMcVoxFxsOpeRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsOpeRxGain.setStatus('mandatory')
cxMcVoxFxsOpeEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeEchoCancel.setStatus('mandatory')
cxMcVoxFxsOpeSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ground-start", 1), ("loop-start", 2), ("did", 3))).clone('loop-start')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeSignaling.setStatus('mandatory')
cxMcVoxFxsOpeTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeTimeOn.setStatus('obsolete')
cxMcVoxFxsOpeTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(4000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeTimeOff.setStatus('obsolete')
cxMcVoxFxsOpeCnctType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switched", 1), ("auto-connect", 2), ("fixed", 3))).clone('switched')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeCnctType.setStatus('mandatory')
cxMcVoxFxsOpeRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("north-american", 1), ("international", 2))).clone('north-american')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeRingType.setStatus('mandatory')
cxMcVoxFxsOpeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("i600-ohms", 1), ("i900-ohms", 2), ("att", 3), ("aus", 4))).clone('i600-ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxsOpeImpedance.setStatus('mandatory')
cxMcVoxFxsOpeDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeDialType.setStatus('mandatory')
cxMcVoxFxsOpeDidSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2), ("wink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeDidSignalType.setStatus('mandatory')
cxMcVoxFxsOpeRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeRmtExt.setStatus('mandatory')
cxMcVoxFxsOpeRmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeRmtId.setStatus('optional')
cxMcVoxFxsOpeTranspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emulate", 1), ("transparent", 2), ("local", 3))).clone('emulate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeTranspMode.setStatus('mandatory')
cxMcVoxFxsOpeFaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeFaxEnable.setStatus('mandatory')
cxMcVoxFxsOpeBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("master", 2), ("slave", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxsOpeBroadcast.setStatus('mandatory')
cxMcVoxFxoOpeTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3), )
if mibBuilder.loadTexts: cxMcVoxFxoOpeTable.setStatus('mandatory')
cxMcVoxFxoOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxFxoOpeCardUsed"), (0, "CXMCVOX-MIB", "cxMcVoxFxoOpePortUsed"))
if mibBuilder.loadTexts: cxMcVoxFxoOpeEntry.setStatus('mandatory')
cxMcVoxFxoOpeCardUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeCardUsed.setStatus('mandatory')
cxMcVoxFxoOpePortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpePortUsed.setStatus('mandatory')
cxMcVoxFxoOpePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 31, 32, 33, 34, 41, 42, 43, 44))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("no-voice-io", 3), ("boot-err-1", 31), ("boot-err-2", 32), ("boot-err-3", 33), ("boot-err-4", 34), ("appl-err-1", 41), ("appl-err-2", 42), ("appl-err-3", 43), ("appl-err-4", 44))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpePortStatus.setStatus('mandatory')
cxMcVoxFxoOpeVocoder = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bps5800", 1), ("bps8000", 2), ("kbps40", 3), ("kbps32", 4), ("kbps24", 5), ("kbps16", 6), ("opt7", 7), ("opt8", 8))).clone('bps8000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeVocoder.setStatus('mandatory')
cxMcVoxFxoOpeFaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4))).clone('bps7200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoOpeFaxBw.setStatus('mandatory')
cxMcVoxFxoOpeAutoCnx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeAutoCnx.setStatus('obsolete')
cxMcVoxFxoOpePathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpePathId.setStatus('deprecated')
cxMcVoxFxoOpeTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoOpeTxGain.setStatus('mandatory')
cxMcVoxFxoOpeRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoOpeRxGain.setStatus('mandatory')
cxMcVoxFxoOpeEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeEchoCancel.setStatus('mandatory')
cxMcVoxFxoOpeSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ground-start", 1), ("loop-start", 2), ("did", 3))).clone('loop-start')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeSignaling.setStatus('mandatory')
cxMcVoxFxoOpeCnctType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switched", 1), ("auto-connect", 2), ("fixed", 3))).clone('switched')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeCnctType.setStatus('mandatory')
cxMcVoxFxoOpeRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("north-american", 1), ("international", 2))).clone('north-american')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeRingType.setStatus('mandatory')
cxMcVoxFxoOpeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("i600-ohms", 1), ("i900-ohms", 2), ("att", 3), ("aus", 4))).clone('i600-ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxFxoOpeImpedance.setStatus('mandatory')
cxMcVoxFxoOpeDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeDialType.setStatus('mandatory')
cxMcVoxFxoOpeDidSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2), ("wink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeDidSignalType.setStatus('mandatory')
cxMcVoxFxoOpeRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeRmtExt.setStatus('mandatory')
cxMcVoxFxoOpeRmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeRmtId.setStatus('optional')
cxMcVoxFxoOpeTranspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emulate", 1), ("transparent", 2), ("local", 3))).clone('emulate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeTranspMode.setStatus('mandatory')
cxMcVoxFxoOpeFaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeFaxEnable.setStatus('mandatory')
cxMcVoxFxoOpeBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 9, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("master", 2), ("slave", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxFxoOpeBroadcast.setStatus('mandatory')
cxMcVoxDriverAdmPriv = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20))
cxMcVoxAdmPortPrivTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1), )
if mibBuilder.loadTexts: cxMcVoxAdmPortPrivTable.setStatus('mandatory')
cxMcVoxAdmPortPrivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxAdmCardUsed"), (0, "CXMCVOX-MIB", "cxMcVoxAdmPortUsed"))
if mibBuilder.loadTexts: cxMcVoxAdmPortPrivEntry.setStatus('mandatory')
cxMcVoxAdmCardUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxAdmCardUsed.setStatus('mandatory')
cxMcVoxAdmPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxAdmPortUsed.setStatus('mandatory')
cxMcVoxAdmRingTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRingTimeOn.setStatus('mandatory')
cxMcVoxAdmRingTimeOff1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRingTimeOff1.setStatus('mandatory')
cxMcVoxAdmRingTimeOff2 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRingTimeOff2.setStatus('mandatory')
cxMcVoxAdmEchoCancelLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmEchoCancelLevel.setStatus('mandatory')
cxMcVoxAdmToneDelayAfterCnct = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmToneDelayAfterCnct.setStatus('mandatory')
cxMcVoxAdmToneDelayAfterFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmToneDelayAfterFlash.setStatus('mandatory')
cxMcVoxAdmToneOffsetTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmToneOffsetTxGain.setStatus('mandatory')
cxMcVoxAdmVoiceOffsetTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmVoiceOffsetTxGain.setStatus('mandatory')
cxMcVoxAdmAc15InterDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmAc15InterDigit.setStatus('mandatory')
cxMcVoxAdmMfToneThold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmMfToneThold.setStatus('mandatory')
cxMcVoxAdmPulseTmin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmPulseTmin.setStatus('mandatory')
cxMcVoxAdmPulseTmax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmPulseTmax.setStatus('mandatory')
cxMcVoxAdmPulseInterDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(275)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmPulseInterDigit.setStatus('mandatory')
cxMcVoxAdmDtmfGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmDtmfGuard.setStatus('mandatory')
cxMcVoxAdmDtmfOpeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("minus-25", 1), ("minus-28", 2), ("minus-31", 3), ("minus-34", 4))).clone('minus-25')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmDtmfOpeLevel.setStatus('mandatory')
cxMcVoxAdmDtmfTxTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmDtmfTxTimeOn.setStatus('mandatory')
cxMcVoxAdmDtmfTxTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmDtmfTxTimeOff.setStatus('mandatory')
cxMcVoxAdmFlashTmin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFlashTmin.setStatus('mandatory')
cxMcVoxAdmFlashTmax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFlashTmax.setStatus('mandatory')
cxMcVoxAdmFlashTgen = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFlashTgen.setStatus('mandatory')
cxMcVoxAdmAfterToneSilences = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmAfterToneSilences.setStatus('mandatory')
cxMcVoxAdmFaxTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxTxGain.setStatus('mandatory')
cxMcVoxAdmFaxRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxRxGain.setStatus('mandatory')
cxMcVoxAdmFaxHdlcFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxHdlcFlags.setStatus('mandatory')
cxMcVoxAdmFaxPreambleDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxPreambleDuration.setStatus('deprecated')
cxMcVoxAdmFaxPreambleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxPreambleDelay.setStatus('deprecated')
cxMcVoxAdmFaxCedToneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxCedToneDuration.setStatus('deprecated')
cxMcVoxAdmFaxInterProtoGap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxInterProtoGap.setStatus('mandatory')
cxMcVoxAdmFaxTimerDetectSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000)).clone(7500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxTimerDetectSync.setStatus('mandatory')
cxMcVoxAdmFaxTimerWaitId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000)).clone(40000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxTimerWaitId.setStatus('mandatory')
cxMcVoxAdmFaxMinPreambleDur = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxMinPreambleDur.setStatus('mandatory')
cxMcVoxAdmFaxMaxPreambleDur = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxMaxPreambleDur.setStatus('mandatory')
cxMcVoxAdmFaxMinPreambleDly = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxMinPreambleDly.setStatus('mandatory')
cxMcVoxAdmFaxMaxPreambleDly = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxMaxPreambleDly.setStatus('mandatory')
cxMcVoxAdmFaxCedToneDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxCedToneDetection.setStatus('mandatory')
cxMcVoxAdmFaxCedMinToneDur = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(2600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxCedMinToneDur.setStatus('mandatory')
cxMcVoxAdmFaxCedMaxToneDur = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxCedMaxToneDur.setStatus('mandatory')
cxMcVoxAdmFaxMaxHdlcFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 20, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmFaxMaxHdlcFlags.setStatus('mandatory')
cxMcVoxDriverOpePriv = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21))
cxMcVoxOpePortPrivTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1), )
if mibBuilder.loadTexts: cxMcVoxOpePortPrivTable.setStatus('mandatory')
cxMcVoxOpePortPrivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxOpeCardUsed"), (0, "CXMCVOX-MIB", "cxMcVoxOpePortUsed"))
if mibBuilder.loadTexts: cxMcVoxOpePortPrivEntry.setStatus('mandatory')
cxMcVoxOpeCardUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeCardUsed.setStatus('mandatory')
cxMcVoxOpePortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpePortUsed.setStatus('mandatory')
cxMcVoxOpeRingTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeRingTimeOn.setStatus('mandatory')
cxMcVoxOpeRingTimeOff1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeRingTimeOff1.setStatus('mandatory')
cxMcVoxOpeRingTimeOff2 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeRingTimeOff2.setStatus('mandatory')
cxMcVoxOpeEchoCancelLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeEchoCancelLevel.setStatus('mandatory')
cxMcVoxOpeToneDelayAfterCnct = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeToneDelayAfterCnct.setStatus('mandatory')
cxMcVoxOpeToneDelayAfterFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeToneDelayAfterFlash.setStatus('mandatory')
cxMcVoxOpeToneOffsetTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeToneOffsetTxGain.setStatus('mandatory')
cxMcVoxOpeVoiceOffsetTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeVoiceOffsetTxGain.setStatus('mandatory')
cxMcVoxOpeAc15InterDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeAc15InterDigit.setStatus('mandatory')
cxMcVoxOpeMfToneThold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeMfToneThold.setStatus('mandatory')
cxMcVoxOpePulseTmin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpePulseTmin.setStatus('mandatory')
cxMcVoxOpePulseTmax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpePulseTmax.setStatus('mandatory')
cxMcVoxOpePulseInterDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(275)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpePulseInterDigit.setStatus('mandatory')
cxMcVoxOpeDtmfGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeDtmfGuard.setStatus('mandatory')
cxMcVoxOpeDtmfOpeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("minus-25", 1), ("minus-28", 2), ("minus-31", 3), ("minus-34", 4))).clone('minus-25')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeDtmfOpeLevel.setStatus('mandatory')
cxMcVoxOpeDtmfTxTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(75)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeDtmfTxTimeOn.setStatus('mandatory')
cxMcVoxOpeDtmfTxTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(75)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeDtmfTxTimeOff.setStatus('mandatory')
cxMcVoxOpeFlashTmin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFlashTmin.setStatus('mandatory')
cxMcVoxOpeFlashTmax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFlashTmax.setStatus('mandatory')
cxMcVoxOpeFlashTgen = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFlashTgen.setStatus('mandatory')
cxMcVoxOpeAfterToneSilences = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeAfterToneSilences.setStatus('mandatory')
cxMcVoxOpeFaxTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxTxGain.setStatus('mandatory')
cxMcVoxOpeFaxRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(820, 1180)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxRxGain.setStatus('mandatory')
cxMcVoxOpeFaxHdlcFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxHdlcFlags.setStatus('mandatory')
cxMcVoxOpeFaxPreambleDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxPreambleDuration.setStatus('deprecated')
cxMcVoxOpeFaxPreambleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxPreambleDelay.setStatus('deprecated')
cxMcVoxOpeFaxCedToneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxCedToneDuration.setStatus('deprecated')
cxMcVoxOpeFaxInterProtoGap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxInterProtoGap.setStatus('mandatory')
cxMcVoxOpeFaxTimerDetectSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000)).clone(7500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxTimerDetectSync.setStatus('mandatory')
cxMcVoxOpeFaxTimerWaitId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000)).clone(40000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxTimerWaitId.setStatus('mandatory')
cxMcVoxOpeFaxMinPreambleDur = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxMinPreambleDur.setStatus('mandatory')
cxMcVoxOpeFaxMaxPreambleDur = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxMaxPreambleDur.setStatus('mandatory')
cxMcVoxOpeFaxMinPreambleDly = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxMinPreambleDly.setStatus('mandatory')
cxMcVoxOpeFaxMaxPreambleDly = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxMaxPreambleDly.setStatus('mandatory')
cxMcVoxOpeFaxCedToneDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxCedToneDetection.setStatus('mandatory')
cxMcVoxOpeFaxCedMinToneDur = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(2600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxCedMinToneDur.setStatus('mandatory')
cxMcVoxOpeFaxCedMaxToneDur = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxCedMaxToneDur.setStatus('mandatory')
cxMcVoxOpeFaxMaxHdlcFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 21, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeFaxMaxHdlcFlags.setStatus('mandatory')
cxMcVoxTimerOpePriv = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23))
cxMcVoxOpeTimerPrivTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1), )
if mibBuilder.loadTexts: cxMcVoxOpeTimerPrivTable.setStatus('mandatory')
cxMcVoxOpeTimerPrivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxOpeInterfaceType"))
if mibBuilder.loadTexts: cxMcVoxOpeTimerPrivEntry.setStatus('mandatory')
cxMcVoxOpeInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("em", 1), ("fxs", 2), ("fxo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeInterfaceType.setStatus('mandatory')
cxMcVoxOpeTimeSeizeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeSeizeIn.setStatus('mandatory')
cxMcVoxOpeTimeWaitDialOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeWaitDialOut.setStatus('mandatory')
cxMcVoxOpeTimeWaitDialIn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeWaitDialIn.setStatus('mandatory')
cxMcVoxOpeTimeDialOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeDialOut.setStatus('mandatory')
cxMcVoxOpeTimeDialIn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeDialIn.setStatus('mandatory')
cxMcVoxOpeTimeSiOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeSiOff.setStatus('mandatory')
cxMcVoxOpeTimeProceed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeProceed.setStatus('mandatory')
cxMcVoxOpeTimeAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeAnswer.setStatus('mandatory')
cxMcVoxOpeTimeBeforeToneOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeBeforeToneOff.setStatus('mandatory')
cxMcVoxOpeTimeWinkStartIn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(220)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeWinkStartIn.setStatus('mandatory')
cxMcVoxOpeTimeWinkStartOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeWinkStartOut.setStatus('mandatory')
cxMcVoxOpeTimeWinkMin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(140)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeWinkMin.setStatus('mandatory')
cxMcVoxOpeTimeWinkMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(290)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeWinkMax.setStatus('mandatory')
cxMcVoxOpeTimeSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeSeize.setStatus('mandatory')
cxMcVoxOpeTimeDial = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(210)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeDial.setStatus('mandatory')
cxMcVoxOpeTimeOffIn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeOffIn.setStatus('mandatory')
cxMcVoxOpeTimeSiOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeSiOn.setStatus('mandatory')
cxMcVoxOpeTimeOffOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeOffOut.setStatus('mandatory')
cxMcVoxOpeTimeDiscIn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeDiscIn.setStatus('mandatory')
cxMcVoxOpeTimeDiscOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(650)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeDiscOut.setStatus('mandatory')
cxMcVoxOpeTimeToneOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 23, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(15000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxOpeTimeToneOut.setStatus('mandatory')
cxMcVoxGrpIdAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 10), )
if mibBuilder.loadTexts: cxMcVoxGrpIdAdmTable.setStatus('mandatory')
cxMcVoxGrpIdAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 10, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxGrpIdAdmIndex"))
if mibBuilder.loadTexts: cxMcVoxGrpIdAdmEntry.setStatus('mandatory')
cxMcVoxGrpIdAdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpIdAdmIndex.setStatus('mandatory')
cxMcVoxGrpIdAdm = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGrpIdAdm.setStatus('mandatory')
cxMcVoxGrpIdLenAdm = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpIdLenAdm.setStatus('mandatory')
cxMcVoxGrpIdAdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGrpIdAdmRowStatus.setStatus('mandatory')
cxMcVoxGrpIdAdmNbPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGrpIdAdmNbPoll.setStatus('optional')
cxMcVoxGrpIdOpeTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 11), )
if mibBuilder.loadTexts: cxMcVoxGrpIdOpeTable.setStatus('mandatory')
cxMcVoxGrpIdOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 11, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxGrpIdOpeIndex"))
if mibBuilder.loadTexts: cxMcVoxGrpIdOpeEntry.setStatus('mandatory')
cxMcVoxGrpIdOpeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpIdOpeIndex.setStatus('mandatory')
cxMcVoxGrpIdOpe = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpIdOpe.setStatus('mandatory')
cxMcVoxGrpIdLenOpe = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpIdLenOpe.setStatus('mandatory')
cxMcVoxGrpIdOpeNbPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpIdOpeNbPoll.setStatus('optional')
cxMcVoxGrpDefAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 12), )
if mibBuilder.loadTexts: cxMcVoxGrpDefAdmTable.setStatus('mandatory')
cxMcVoxGrpDefAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 12, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxGrpDefAdmIndex"), (0, "CXMCVOX-MIB", "cxMcVoxGrpDefAdmPriority"))
if mibBuilder.loadTexts: cxMcVoxGrpDefAdmEntry.setStatus('mandatory')
cxMcVoxGrpDefAdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpDefAdmIndex.setStatus('mandatory')
cxMcVoxGrpDefAdmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpDefAdmPriority.setStatus('mandatory')
cxMcVoxGrpDefAdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGrpDefAdmRowStatus.setStatus('mandatory')
cxMcVoxGrpDefAdmPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGrpDefAdmPathId.setStatus('deprecated')
cxMcVoxGrpDefAdmRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxGrpDefAdmRmtExt.setStatus('mandatory')
cxMcVoxGrpDefOpeTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 13), )
if mibBuilder.loadTexts: cxMcVoxGrpDefOpeTable.setStatus('mandatory')
cxMcVoxGrpDefOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 13, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxGrpDefOpeIndex"), (0, "CXMCVOX-MIB", "cxMcVoxGrpDefOpePriority"))
if mibBuilder.loadTexts: cxMcVoxGrpDefOpeEntry.setStatus('mandatory')
cxMcVoxGrpDefOpeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpDefOpeIndex.setStatus('mandatory')
cxMcVoxGrpDefOpePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpDefOpePriority.setStatus('mandatory')
cxMcVoxGrpDefOpePathId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpDefOpePathId.setStatus('deprecated')
cxMcVoxGrpDefOpeRmtExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxGrpDefOpeRmtExt.setStatus('mandatory')
cxMcVoxAdmPinTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 14), )
if mibBuilder.loadTexts: cxMcVoxAdmPinTable.setStatus('mandatory')
cxMcVoxAdmPinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 14, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxAdmPinIndex"))
if mibBuilder.loadTexts: cxMcVoxAdmPinEntry.setStatus('mandatory')
cxMcVoxAdmPinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxAdmPinIndex.setStatus('mandatory')
cxMcVoxAdmPinCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmPinCode.setStatus('mandatory')
cxMcVoxAdmPinRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmPinRowStatus.setStatus('mandatory')
cxMcVoxOpePinTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 15), )
if mibBuilder.loadTexts: cxMcVoxOpePinTable.setStatus('mandatory')
cxMcVoxOpePinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 15, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxOpePinIndex"))
if mibBuilder.loadTexts: cxMcVoxOpePinEntry.setStatus('mandatory')
cxMcVoxOpePinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpePinIndex.setStatus('mandatory')
cxMcVoxOpePinCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpePinCode.setStatus('mandatory')
cxMcVoxAdmLclZoneTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 16), )
if mibBuilder.loadTexts: cxMcVoxAdmLclZoneTable.setStatus('mandatory')
cxMcVoxAdmLclZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 16, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxAdmLclZoneIndex"))
if mibBuilder.loadTexts: cxMcVoxAdmLclZoneEntry.setStatus('mandatory')
cxMcVoxAdmLclZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxAdmLclZoneIndex.setStatus('mandatory')
cxMcVoxAdmLclZoneCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmLclZoneCode.setStatus('mandatory')
cxMcVoxAdmLclZoneLng = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxAdmLclZoneLng.setStatus('mandatory')
cxMcVoxAdmLclZoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmLclZoneRowStatus.setStatus('mandatory')
cxMcVoxOpeLclZoneTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 17), )
if mibBuilder.loadTexts: cxMcVoxOpeLclZoneTable.setStatus('mandatory')
cxMcVoxOpeLclZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 17, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxOpeLclZoneIndex"))
if mibBuilder.loadTexts: cxMcVoxOpeLclZoneEntry.setStatus('mandatory')
cxMcVoxOpeLclZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeLclZoneIndex.setStatus('mandatory')
cxMcVoxOpeLclZoneCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeLclZoneCode.setStatus('mandatory')
cxMcVoxOpeLclZoneLng = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeLclZoneLng.setStatus('mandatory')
cxMcVoxAdmRTC = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18))
cxMcVoxAdmRTCCountry = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCCountry.setStatus('deprecated')
cxMcVoxAdmRTCCountryLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCCountryLng.setStatus('deprecated')
cxMcVoxAdmRTCNonLclCountry = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCNonLclCountry.setStatus('deprecated')
cxMcVoxAdmRTCNonLclCountryLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCNonLclCountryLng.setStatus('deprecated')
cxMcVoxAdmRTCArea = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCArea.setStatus('deprecated')
cxMcVoxAdmRTCAreaLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCAreaLng.setStatus('deprecated')
cxMcVoxAdmRTCNonLclArea = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCNonLclArea.setStatus('deprecated')
cxMcVoxAdmRTCNonLclAreaLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCNonLclAreaLng.setStatus('deprecated')
cxMcVoxAdmRTCNonLclZone = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCNonLclZone.setStatus('deprecated')
cxMcVoxAdmRTCNonLclZoneLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 18, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxAdmRTCNonLclZoneLng.setStatus('deprecated')
cxMcVoxOpeRTC = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19))
cxMcVoxOpeRTCCountry = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCCountry.setStatus('deprecated')
cxMcVoxOpeRTCCountryLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCCountryLng.setStatus('deprecated')
cxMcVoxOpeRTCNonLclCountry = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCNonLclCountry.setStatus('deprecated')
cxMcVoxOpeRTCNonLclCountryLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCNonLclCountryLng.setStatus('deprecated')
cxMcVoxOpeRTCArea = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCArea.setStatus('deprecated')
cxMcVoxOpeRTCAreaLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCAreaLng.setStatus('deprecated')
cxMcVoxOpeRTCNonLclArea = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCNonLclArea.setStatus('deprecated')
cxMcVoxOpeRTCNonLclAreaLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCNonLclAreaLng.setStatus('deprecated')
cxMcVoxOpeRTCNonLclZone = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCNonLclZone.setStatus('deprecated')
cxMcVoxOpeRTCNonLclZoneLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 19, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxOpeRTCNonLclZoneLng.setStatus('deprecated')
cxMcVoxDiagTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24), )
if mibBuilder.loadTexts: cxMcVoxDiagTable.setStatus('mandatory')
cxMcVoxDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxDiagCardIndex"), (0, "CXMCVOX-MIB", "cxMcVoxDiagPortIndex"))
if mibBuilder.loadTexts: cxMcVoxDiagEntry.setStatus('mandatory')
cxMcVoxDiagCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxDiagCardIndex.setStatus('mandatory')
cxMcVoxDiagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxDiagPortIndex.setStatus('mandatory')
cxMcVoxDiagScvEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagScvEvents.setStatus('mandatory')
cxMcVoxDiagGsdEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagGsdEvents.setStatus('mandatory')
cxMcVoxDiagToneInEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagToneInEvents.setStatus('mandatory')
cxMcVoxDiagToneOutEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagToneOutEvents.setStatus('mandatory')
cxMcVoxDiagFaxInEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagFaxInEvents.setStatus('mandatory')
cxMcVoxDiagFaxOutEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagFaxOutEvents.setStatus('mandatory')
cxMcVoxDiagGlmEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagGlmEvents.setStatus('mandatory')
cxMcVoxDiagIbvDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagIbvDiags.setStatus('mandatory')
cxMcVoxDiagPcvDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagPcvDiags.setStatus('mandatory')
cxMcVoxDiagGcvDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagGcvDiags.setStatus('mandatory')
cxMcVoxDiagFaxDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagFaxDiags.setStatus('mandatory')
cxMcVoxDiagLseDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagLseDiags.setStatus('mandatory')
cxMcVoxDiagScvDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagScvDiags.setStatus('mandatory')
cxMcVoxDiagGlmDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 24, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("trigger", 2), ("reset", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxDiagGlmDiags.setStatus('mandatory')
cxMcVoxDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 25))
cxMcVoxLclExtAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 26), )
if mibBuilder.loadTexts: cxMcVoxLclExtAdmTable.setStatus('mandatory')
cxMcVoxLclExtAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 26, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxLclExtAdmIndex"))
if mibBuilder.loadTexts: cxMcVoxLclExtAdmEntry.setStatus('mandatory')
cxMcVoxLclExtAdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxLclExtAdmIndex.setStatus('mandatory')
cxMcVoxLclExtAdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxLclExtAdmRowStatus.setStatus('mandatory')
cxMcVoxLclExtAdmExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxLclExtAdmExt.setStatus('mandatory')
cxMcVoxLclExtAdmHuntChnl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1073741823)).clone(1073741823)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxLclExtAdmHuntChnl.setStatus('mandatory')
cxMcVoxLclExtOpeTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 27), )
if mibBuilder.loadTexts: cxMcVoxLclExtOpeTable.setStatus('mandatory')
cxMcVoxLclExtOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 27, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxLclExtOpeIndex"))
if mibBuilder.loadTexts: cxMcVoxLclExtOpeEntry.setStatus('mandatory')
cxMcVoxLclExtOpeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxLclExtOpeIndex.setStatus('mandatory')
cxMcVoxLclExtOpeExt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 27, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxLclExtOpeExt.setStatus('mandatory')
cxMcVoxLclExtOpeHuntChnl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 27, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1073741823)).clone(1073741823)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxLclExtOpeHuntChnl.setStatus('mandatory')
cxMcVoxRegenOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 28))
cxMcVoxRegenOpeExt = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxRegenOpeExt.setStatus('mandatory')
cxMcVoxRegenOpeGid = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 28, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxRegenOpeGid.setStatus('mandatory')
cxMcVoxRegenOpeNbDigits = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 28, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxRegenOpeNbDigits.setStatus('mandatory')
cxMcVoxRegenOpeExtBitMask = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 28, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxRegenOpeExtBitMask.setStatus('mandatory')
cxMcVoxTranslOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29))
cxMcVoxTranslOpeCntryCodeEnable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxTranslOpeCntryCodeEnable.setStatus('mandatory')
cxMcVoxTranslOpeCntryCode = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone('1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxTranslOpeCntryCode.setStatus('mandatory')
cxMcVoxTranslOpeCntryCodeLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxTranslOpeCntryCodeLng.setStatus('mandatory')
cxMcVoxTranslOpeCCPrefix = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone('2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxTranslOpeCCPrefix.setStatus('mandatory')
cxMcVoxTranslOpeCCPrefixLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxTranslOpeCCPrefixLng.setStatus('mandatory')
cxMcVoxTranslOpeAreaCodeEnable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxTranslOpeAreaCodeEnable.setStatus('mandatory')
cxMcVoxTranslOpeAreaCode = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone('514')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxTranslOpeAreaCode.setStatus('mandatory')
cxMcVoxTranslOpeAreaCodeLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxTranslOpeAreaCodeLng.setStatus('mandatory')
cxMcVoxTranslOpeACPrefix = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone('1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxTranslOpeACPrefix.setStatus('mandatory')
cxMcVoxTranslOpeACPrefixLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxTranslOpeACPrefixLng.setStatus('mandatory')
cxMcVoxTranslOpeZoneCodeEnable = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxTranslOpeZoneCodeEnable.setStatus('mandatory')
cxMcVoxTranslOpeZCPrefix = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone('7')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcVoxTranslOpeZCPrefix.setStatus('mandatory')
cxMcVoxTranslOpeZCPrefixLng = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 29, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxTranslOpeZCPrefixLng.setStatus('mandatory')
cxMcVoxHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30), )
if mibBuilder.loadTexts: cxMcVoxHistoryTable.setStatus('mandatory')
cxMcVoxHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1), ).setIndexNames((0, "CXMCVOX-MIB", "cxMcVoxHistoryIndex"))
if mibBuilder.loadTexts: cxMcVoxHistoryEntry.setStatus('mandatory')
cxMcVoxHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryIndex.setStatus('mandatory')
cxMcVoxHistoryLclCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryLclCardNumber.setStatus('mandatory')
cxMcVoxHistoryLclPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryLclPortNumber.setStatus('mandatory')
cxMcVoxHistoryRmtCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryRmtCardNumber.setStatus('mandatory')
cxMcVoxHistoryRmtPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryRmtPortNumber.setStatus('mandatory')
cxMcVoxHistoryTimeStampOnLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryTimeStampOnLine.setStatus('mandatory')
cxMcVoxHistoryTimeStampOffLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryTimeStampOffLine.setStatus('mandatory')
cxMcVoxHistoryLnkState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('CallAborted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryLnkState.setStatus('mandatory')
cxMcVoxHistoryPin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryPin.setStatus('mandatory')
cxMcVoxHistoryExtensionOrGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryExtensionOrGrpId.setStatus('mandatory')
cxMcVoxHistoryPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 30, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcVoxHistoryPhoneNumber.setStatus('mandatory')
cxMcVoxTrapStatus = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2) + (0,1)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXMCVOX-MIB", "cxMcVoxStatusCardNumber"), ("CXMCVOX-MIB", "cxMcVoxStatusPortNumber"), ("CXMCVOX-MIB", "cxMcVoxStatusPortStatus"))
cxMcVoxTrapRing = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2) + (0,2)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXMCVOX-MIB", "cxMcVoxGlobalTensionRing"))
cxMcVoxTrapDc = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2) + (0,3)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXMCVOX-MIB", "cxMcVoxGlobalTensionDc"))
cxMcVoxHistoryTrap = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2) + (0,4)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXMCVOX-MIB", "cxMcVoxHistoryIndex"), ("CXMCVOX-MIB", "cxMcVoxGlobalHistoryMaxNumberOfEntries"))
mibBuilder.exportSymbols("CXMCVOX-MIB", cxMcVoxFxsAdmEchoCancel=cxMcVoxFxsAdmEchoCancel, cxMcVoxEmOpeAc15TimeOff=cxMcVoxEmOpeAc15TimeOff, cxMcVoxFxoOpeTable=cxMcVoxFxoOpeTable, cxMcVoxGlobalWanSlot=cxMcVoxGlobalWanSlot, cxMcVoxStatusTable=cxMcVoxStatusTable, cxMcVoxEmAdmAc15Type=cxMcVoxEmAdmAc15Type, cxMcVoxCfgMaxPktFrame=cxMcVoxCfgMaxPktFrame, cxMcVoxStatusDspUtilization=cxMcVoxStatusDspUtilization, cxMcVoxFxsOpeFaxEnable=cxMcVoxFxsOpeFaxEnable, cxMcVoxCfgOpeAcelpRev=cxMcVoxCfgOpeAcelpRev, cxMcVoxAdmEchoCancelLevel=cxMcVoxAdmEchoCancelLevel, cxMcVoxPathAdmHunt=cxMcVoxPathAdmHunt, cxMcVoxOpeAfterToneSilences=cxMcVoxOpeAfterToneSilences, cxMcVoxOpeLclZoneLng=cxMcVoxOpeLclZoneLng, cxMcVoxGlobalClearHistoryTable=cxMcVoxGlobalClearHistoryTable, cxMcVoxOpeRingTimeOff1=cxMcVoxOpeRingTimeOff1, cxMcVoxFxoAdmPortStatus=cxMcVoxFxoAdmPortStatus, cxMcVoxOpeRingTimeOn=cxMcVoxOpeRingTimeOn, cxMcVoxGlobalGsdAutoCnctDelay=cxMcVoxGlobalGsdAutoCnctDelay, cxMcVoxGrpIdAdmEntry=cxMcVoxGrpIdAdmEntry, cxMcVoxTranslOpeAreaCode=cxMcVoxTranslOpeAreaCode, cxMcVoxOpeToneOffsetTxGain=cxMcVoxOpeToneOffsetTxGain, cxMcVoxFxoOpeEchoCancel=cxMcVoxFxoOpeEchoCancel, cxMcVoxEmAdmRingType=cxMcVoxEmAdmRingType, cxMcVoxEventPin=cxMcVoxEventPin, cxMcVoxAdmRTCNonLclAreaLng=cxMcVoxAdmRTCNonLclAreaLng, cxMcVoxNetOpeRoute=cxMcVoxNetOpeRoute, cxMcVoxEmOpeAc15Type=cxMcVoxEmOpeAc15Type, cxMcVoxOpePinIndex=cxMcVoxOpePinIndex, cxMcVoxOpeLclZoneIndex=cxMcVoxOpeLclZoneIndex, cxMcVoxGlobalGlmInBetwReqTime=cxMcVoxGlobalGlmInBetwReqTime, cxMcVoxTranslOpeACPrefixLng=cxMcVoxTranslOpeACPrefixLng, cxMcVoxOpeFaxTimerWaitId=cxMcVoxOpeFaxTimerWaitId, cxMcVoxTranslOpeACPrefix=cxMcVoxTranslOpeACPrefix, cxMcVoxEmOpeMode=cxMcVoxEmOpeMode, cxMcVoxPathAdmRemStationId=cxMcVoxPathAdmRemStationId, cxMcVoxFxoAdmTranspMode=cxMcVoxFxoAdmTranspMode, cxMcVoxGrpIdOpeEntry=cxMcVoxGrpIdOpeEntry, cxMcVoxFxsAdmTimeOn=cxMcVoxFxsAdmTimeOn, cxMcVoxAdmFlashTmin=cxMcVoxAdmFlashTmin, cxMcVoxOpeFaxCedToneDuration=cxMcVoxOpeFaxCedToneDuration, cxMcVoxGlobalGlmSupervSilenceTime=cxMcVoxGlobalGlmSupervSilenceTime, cxMcVoxFxoOpePathId=cxMcVoxFxoOpePathId, cxMcVoxStatusDspRam=cxMcVoxStatusDspRam, cxMcVoxStatusWatchdog=cxMcVoxStatusWatchdog, cxMcVoxNetAdmRemStationId=cxMcVoxNetAdmRemStationId, cxMcVoxOpeRTCNonLclCountryLng=cxMcVoxOpeRTCNonLclCountryLng, cxMcVoxEmAdmAutoCnx=cxMcVoxEmAdmAutoCnx, cxMcVoxHistoryExtensionOrGrpId=cxMcVoxHistoryExtensionOrGrpId, cxMcVoxOpeFaxMaxPreambleDly=cxMcVoxOpeFaxMaxPreambleDly, cxMcVoxStateRmtExt=cxMcVoxStateRmtExt, cxMcVoxFxoAdmSignaling=cxMcVoxFxoAdmSignaling, cxMcVoxCfgTrapOffLine=cxMcVoxCfgTrapOffLine, cxMcVoxCfgDriverOpeUsed=cxMcVoxCfgDriverOpeUsed, cxMcVoxStatusRemPortStatus=cxMcVoxStatusRemPortStatus, cxMcVoxAdmFaxInterProtoGap=cxMcVoxAdmFaxInterProtoGap, cxMcVoxPathOpePathId=cxMcVoxPathOpePathId, cxMcVoxEventClrEvts=cxMcVoxEventClrEvts, cxMcVoxPathOpeRemStationId=cxMcVoxPathOpeRemStationId, cxMcVoxFxsOpeCardUsed=cxMcVoxFxsOpeCardUsed, cxMcVoxFxsAdmEntry=cxMcVoxFxsAdmEntry, cxMcVoxEmOpeEchoCancel=cxMcVoxEmOpeEchoCancel, cxMcVoxOpePinEntry=cxMcVoxOpePinEntry, cxMcVoxOpeTimeWinkMin=cxMcVoxOpeTimeWinkMin, cxMcVoxStatusHookLocal=cxMcVoxStatusHookLocal, cxMcVoxFxoOpeDialType=cxMcVoxFxoOpeDialType, cxMcVoxGlobalAdmPathLng=cxMcVoxGlobalAdmPathLng, cxMcVoxOpeRTCCountryLng=cxMcVoxOpeRTCCountryLng, cxMcVoxLclExtOpeEntry=cxMcVoxLclExtOpeEntry, cxMcVoxOpeEchoCancelLevel=cxMcVoxOpeEchoCancelLevel, cxMcVoxGlobalGlmVoiceSilenceTime=cxMcVoxGlobalGlmVoiceSilenceTime, cxMcVoxEmAdmSignalType=cxMcVoxEmAdmSignalType, cxMcVoxAdmLclZoneRowStatus=cxMcVoxAdmLclZoneRowStatus, cxMcVoxOpeTimeWinkStartIn=cxMcVoxOpeTimeWinkStartIn, cxMcVoxOpeTimeWinkStartOut=cxMcVoxOpeTimeWinkStartOut, cxMcVoxOpeTimeWaitDialOut=cxMcVoxOpeTimeWaitDialOut, cxMcVoxEventDateAndTimeOnLine=cxMcVoxEventDateAndTimeOnLine, cxMcVoxStatePortNumber=cxMcVoxStatePortNumber, cxMcVoxEmOpeTranspMode=cxMcVoxEmOpeTranspMode, cxMcVoxFxsAdmSignaling=cxMcVoxFxsAdmSignaling, cxMcVoxFxoOpeDidSignalType=cxMcVoxFxoOpeDidSignalType, cxMcVoxLclExtAdmExt=cxMcVoxLclExtAdmExt, cxMcVoxDiagPortIndex=cxMcVoxDiagPortIndex, cxMcVoxEventCardNumber=cxMcVoxEventCardNumber, cxMcVoxLclExtOpeExt=cxMcVoxLclExtOpeExt, cxMcVoxAdmRTCArea=cxMcVoxAdmRTCArea, cxMcVoxGrpDefAdmPriority=cxMcVoxGrpDefAdmPriority, cxMcVoxOpeFaxCedMinToneDur=cxMcVoxOpeFaxCedMinToneDur, cxMcVoxLclExtAdmTable=cxMcVoxLclExtAdmTable, cxMcVoxNetOpeLocalLnkStation=cxMcVoxNetOpeLocalLnkStation, cxMcVoxTimerOpePriv=cxMcVoxTimerOpePriv, cxMcVoxGlobalReinitRouting=cxMcVoxGlobalReinitRouting, cxMcVoxOpeRTCNonLclArea=cxMcVoxOpeRTCNonLclArea, cxMcVoxEventPortNumber=cxMcVoxEventPortNumber, cxMcVoxOpeTimeToneOut=cxMcVoxOpeTimeToneOut, cxMcVoxCfgCmdImmTest=cxMcVoxCfgCmdImmTest, cxMcVoxAdmLclZoneCode=cxMcVoxAdmLclZoneCode, cxMcVoxFxsOpePortStatus=cxMcVoxFxsOpePortStatus, cxMcVoxNetAdmRowStatus=cxMcVoxNetAdmRowStatus, cxMcVox=cxMcVox, cxMcVoxEmOpeBroadcast=cxMcVoxEmOpeBroadcast, cxMcVoxFxoAdmTable=cxMcVoxFxoAdmTable, cxMcVoxAdmToneOffsetTxGain=cxMcVoxAdmToneOffsetTxGain, cxMcVoxGlobalForceDefConfig=cxMcVoxGlobalForceDefConfig, cxMcVoxAdmPulseTmin=cxMcVoxAdmPulseTmin, cxMcVoxGlobalOpeLocalId=cxMcVoxGlobalOpeLocalId, cxMcVoxEmAdmCnctType=cxMcVoxEmAdmCnctType, cxMcVoxFxsAdmRingType=cxMcVoxFxsAdmRingType, cxMcVoxOpeTimeSeizeIn=cxMcVoxOpeTimeSeizeIn, cxMcVoxEventLnkState=cxMcVoxEventLnkState, cxMcVoxEmAdmEchoCancel=cxMcVoxEmAdmEchoCancel, cxMcVoxLclExtAdmEntry=cxMcVoxLclExtAdmEntry, cxMcVoxRegenOpe=cxMcVoxRegenOpe, cxMcVoxOpeTimeOffOut=cxMcVoxOpeTimeOffOut, cxMcVoxFxoOpeRingType=cxMcVoxFxoOpeRingType, cxMcVoxAdmVoiceOffsetTxGain=cxMcVoxAdmVoiceOffsetTxGain, cxMcVoxTranslOpeZCPrefixLng=cxMcVoxTranslOpeZCPrefixLng, cxMcVoxDiagScvDiags=cxMcVoxDiagScvDiags, cxMcVoxEmAdmVoiceConnection=cxMcVoxEmAdmVoiceConnection, cxMcVoxOpeInterfaceType=cxMcVoxOpeInterfaceType, cxMcVoxGrpIdOpeIndex=cxMcVoxGrpIdOpeIndex, cxMcVoxFxoAdmPortUsed=cxMcVoxFxoAdmPortUsed, cxMcVoxDiagPcvDiags=cxMcVoxDiagPcvDiags, cxMcVoxAdmPinTable=cxMcVoxAdmPinTable, cxMcVoxAdmRTCCountryLng=cxMcVoxAdmRTCCountryLng, cxMcVoxHistoryPhoneNumber=cxMcVoxHistoryPhoneNumber, cxMcVoxFxoAdmRmtExt=cxMcVoxFxoAdmRmtExt, cxMcVoxCfgMaxSkew=cxMcVoxCfgMaxSkew, cxMcVoxAdmDtmfOpeLevel=cxMcVoxAdmDtmfOpeLevel, cxMcVoxFxoOpeRmtExt=cxMcVoxFxoOpeRmtExt, cxMcVoxFxoAdmAutoCnx=cxMcVoxFxoAdmAutoCnx, cxMcVoxAdmPulseTmax=cxMcVoxAdmPulseTmax, cxMcVoxEmOpeTable=cxMcVoxEmOpeTable, cxMcVoxOpeFaxCedToneDetection=cxMcVoxOpeFaxCedToneDetection, cxMcVoxPathOpeTable=cxMcVoxPathOpeTable, cxMcVoxEventEntry=cxMcVoxEventEntry, cxMcVoxStatusSamplingTime=cxMcVoxStatusSamplingTime, cxMcVoxOpeFlashTmin=cxMcVoxOpeFlashTmin, cxMcVoxHistoryTimeStampOffLine=cxMcVoxHistoryTimeStampOffLine, cxMcVoxTranslOpeCntryCode=cxMcVoxTranslOpeCntryCode, cxMcVoxGrpIdOpe=cxMcVoxGrpIdOpe, cxMcVoxCfgToneTest=cxMcVoxCfgToneTest, cxMcVoxHistoryLclPortNumber=cxMcVoxHistoryLclPortNumber, cxMcVoxFxsAdmFaxBw=cxMcVoxFxsAdmFaxBw, cxMcVoxEmOpeImpedance=cxMcVoxEmOpeImpedance, cxMcVoxFxsOpeTable=cxMcVoxFxsOpeTable, cxMcVoxOpeTimeSeize=cxMcVoxOpeTimeSeize, cxMcVoxOpeTimeDial=cxMcVoxOpeTimeDial, cxMcVoxGrpDefOpeEntry=cxMcVoxGrpDefOpeEntry, cxMcVoxFxoOpeVocoder=cxMcVoxFxoOpeVocoder, cxMcVoxAdmRTCNonLclCountry=cxMcVoxAdmRTCNonLclCountry, cxMcVoxFxoOpeEntry=cxMcVoxFxoOpeEntry, cxMcVoxHistoryTimeStampOnLine=cxMcVoxHistoryTimeStampOnLine, cxMcVoxTranslOpeCntryCodeEnable=cxMcVoxTranslOpeCntryCodeEnable, cxMcVoxEmOpeRmtExt=cxMcVoxEmOpeRmtExt, cxMcVoxEventLogIndex=cxMcVoxEventLogIndex, cxMcVoxEmAdmFaxEnable=cxMcVoxEmAdmFaxEnable, cxMcVoxStatusPhyIfType=cxMcVoxStatusPhyIfType, cxMcVoxNetAdmEntry=cxMcVoxNetAdmEntry, cxMcVoxAdmAfterToneSilences=cxMcVoxAdmAfterToneSilences, cxMcVoxOpeRTCNonLclCountry=cxMcVoxOpeRTCNonLclCountry, cxMcVoxOpeDtmfTxTimeOff=cxMcVoxOpeDtmfTxTimeOff, cxMcVoxPathAdmLng=cxMcVoxPathAdmLng, cxMcVoxEmOpeAutoCnx=cxMcVoxEmOpeAutoCnx, cxMcVoxDiagGlmEvents=cxMcVoxDiagGlmEvents, cxMcVoxFxsOpeFaxBw=cxMcVoxFxsOpeFaxBw, cxMcVoxEmOpeRmtId=cxMcVoxEmOpeRmtId, cxMcVoxFxsAdmPortUsed=cxMcVoxFxsAdmPortUsed, cxMcVoxOpeFaxCedMaxToneDur=cxMcVoxOpeFaxCedMaxToneDur, cxMcVoxDriverAdmPriv=cxMcVoxDriverAdmPriv, cxMcVoxOpePortPrivTable=cxMcVoxOpePortPrivTable, cxMcVoxFxoAdmFaxBw=cxMcVoxFxoAdmFaxBw, cxMcVoxDiagFaxOutEvents=cxMcVoxDiagFaxOutEvents, cxMcVoxGrpIdAdmIndex=cxMcVoxGrpIdAdmIndex, cxMcVoxFxsAdmImpedance=cxMcVoxFxsAdmImpedance, cxMcVoxGlobalClearNet=cxMcVoxGlobalClearNet, cxMcVoxFxsOpeTimeOff=cxMcVoxFxsOpeTimeOff, cxMcVoxCfgTestPort=cxMcVoxCfgTestPort, cxMcVoxAdmRTCNonLclCountryLng=cxMcVoxAdmRTCNonLclCountryLng, cxMcVoxEmOpeFaxEnable=cxMcVoxEmOpeFaxEnable, cxMcVoxLclExtOpeHuntChnl=cxMcVoxLclExtOpeHuntChnl, cxMcVoxOpeTimeOffIn=cxMcVoxOpeTimeOffIn, cxMcVoxFxoOpeTxGain=cxMcVoxFxoOpeTxGain, cxMcVoxEmOpeTxGain=cxMcVoxEmOpeTxGain, cxMcVoxFxoAdmRingType=cxMcVoxFxoAdmRingType, cxMcVoxDiagGcvDiags=cxMcVoxDiagGcvDiags, cxMcVoxOpePulseTmin=cxMcVoxOpePulseTmin, cxMcVoxFxoAdmFaxEnable=cxMcVoxFxoAdmFaxEnable, cxMcVoxAdmFaxCedToneDetection=cxMcVoxAdmFaxCedToneDetection, cxMcVoxOpePulseInterDigit=cxMcVoxOpePulseInterDigit, cxMcVoxPathAdmTable=cxMcVoxPathAdmTable, cxMcVoxEmOpeCardUsed=cxMcVoxEmOpeCardUsed, cxMcVoxOpeFaxPreambleDuration=cxMcVoxOpeFaxPreambleDuration, cxMcVoxGrpIdOpeNbPoll=cxMcVoxGrpIdOpeNbPoll, cxMcVoxEmAdmImpedance=cxMcVoxEmAdmImpedance, cxMcVoxEmAdmCardUsed=cxMcVoxEmAdmCardUsed, cxMcVoxTranslOpeCntryCodeLng=cxMcVoxTranslOpeCntryCodeLng, cxMcVoxStateLogIndex=cxMcVoxStateLogIndex, cxMcVoxPathOpeLng=cxMcVoxPathOpeLng, cxMcVoxOpeRTCNonLclZone=cxMcVoxOpeRTCNonLclZone, cxMcVoxOpeTimeBeforeToneOff=cxMcVoxOpeTimeBeforeToneOff, cxMcVoxOpeFaxMaxPreambleDur=cxMcVoxOpeFaxMaxPreambleDur, cxMcVoxGrpDefOpePathId=cxMcVoxGrpDefOpePathId, cxMcVoxLclExtAdmRowStatus=cxMcVoxLclExtAdmRowStatus, cxMcVoxNetOpeRemVoxStation=cxMcVoxNetOpeRemVoxStation, cxMcVoxGlobalOpePinCodeLng=cxMcVoxGlobalOpePinCodeLng, cxMcVoxAdmDtmfTxTimeOff=cxMcVoxAdmDtmfTxTimeOff, cxMcVoxNetAdmTable=cxMcVoxNetAdmTable, cxMcVoxOpeLclZoneEntry=cxMcVoxOpeLclZoneEntry, cxMcVoxStatusEntry=cxMcVoxStatusEntry, cxMcVoxFxsOpeDialType=cxMcVoxFxsOpeDialType, cxMcVoxGlobalAccCodeLng=cxMcVoxGlobalAccCodeLng, cxMcVoxCfgTrapState=cxMcVoxCfgTrapState, cxMcVoxGrpDefOpeTable=cxMcVoxGrpDefOpeTable, cxMcVoxFxsAdmRmtId=cxMcVoxFxsAdmRmtId, cxMcVoxDriverOpePriv=cxMcVoxDriverOpePriv, cxMcVoxStateDateAndTime=cxMcVoxStateDateAndTime, cxMcVoxOpeTimerPrivTable=cxMcVoxOpeTimerPrivTable, cxMcVoxAdmLclZoneTable=cxMcVoxAdmLclZoneTable, cxMcVoxEmAdmAc15TimeOff=cxMcVoxEmAdmAc15TimeOff, cxMcVoxRegenOpeNbDigits=cxMcVoxRegenOpeNbDigits, cxMcVoxEmOpeAc15TimeOn=cxMcVoxEmOpeAc15TimeOn, cxMcVoxCfgEntry=cxMcVoxCfgEntry, cxMcVoxFxsOpePathId=cxMcVoxFxsOpePathId, cxMcVoxGlobalClearPath=cxMcVoxGlobalClearPath, cxMcVoxAdmDtmfGuard=cxMcVoxAdmDtmfGuard, cxMcVoxDiagFaxDiags=cxMcVoxDiagFaxDiags, cxMcVoxGrpIdLenOpe=cxMcVoxGrpIdLenOpe, cxMcVoxCfgTable=cxMcVoxCfgTable, cxMcVoxFxsOpeRingType=cxMcVoxFxsOpeRingType, cxMcVoxStatePathId=cxMcVoxStatePathId, cxMcVoxHistoryLclCardNumber=cxMcVoxHistoryLclCardNumber, cxMcVoxGlobalTrapDc=cxMcVoxGlobalTrapDc, cxMcVoxFxsOpeTranspMode=cxMcVoxFxsOpeTranspMode, cxMcVoxTranslOpeAreaCodeEnable=cxMcVoxTranslOpeAreaCodeEnable, cxMcVoxStatusHookRem=cxMcVoxStatusHookRem, cxMcVoxFxoOpeRxGain=cxMcVoxFxoOpeRxGain, cxMcVoxFxsAdmPortStatus=cxMcVoxFxsAdmPortStatus, cxMcVoxFxoOpeAutoCnx=cxMcVoxFxoOpeAutoCnx, cxMcVoxCfgClearPort=cxMcVoxCfgClearPort, cxMcVoxAdmFaxHdlcFlags=cxMcVoxAdmFaxHdlcFlags, cxMcVoxFxoOpeFaxBw=cxMcVoxFxoOpeFaxBw, cxMcVoxOpeLclZoneTable=cxMcVoxOpeLclZoneTable, cxMcVoxNetAdmLocalLnkStation=cxMcVoxNetAdmLocalLnkStation, cxMcVoxOpeToneDelayAfterFlash=cxMcVoxOpeToneDelayAfterFlash, cxMcVoxFxoOpePortUsed=cxMcVoxFxoOpePortUsed, cxMcVoxGrpIdAdmTable=cxMcVoxGrpIdAdmTable, cxMcVoxFxsAdmDialType=cxMcVoxFxsAdmDialType, cxMcVoxAdmFaxMaxHdlcFlags=cxMcVoxAdmFaxMaxHdlcFlags, cxMcVoxOpeToneDelayAfterCnct=cxMcVoxOpeToneDelayAfterCnct, cxMcVoxOpePulseTmax=cxMcVoxOpePulseTmax, cxMcVoxAdmRTCAreaLng=cxMcVoxAdmRTCAreaLng, cxMcVoxGlobal=cxMcVoxGlobal, cxMcVoxAdmAc15InterDigit=cxMcVoxAdmAc15InterDigit)
mibBuilder.exportSymbols("CXMCVOX-MIB", cxMcVoxFxsOpeEchoCancel=cxMcVoxFxsOpeEchoCancel, cxMcVoxGlobalNetNbDigits=cxMcVoxGlobalNetNbDigits, cxMcVoxOpeRingTimeOff2=cxMcVoxOpeRingTimeOff2, cxMcVoxStatusPortNumber=cxMcVoxStatusPortNumber, cxMcVoxAdmLclZoneIndex=cxMcVoxAdmLclZoneIndex, cxMcVoxGlobalSoftRev=cxMcVoxGlobalSoftRev, cxMcVoxHistoryPin=cxMcVoxHistoryPin, cxMcVoxFxsOpeRmtId=cxMcVoxFxsOpeRmtId, cxMcVoxOpeRTCAreaLng=cxMcVoxOpeRTCAreaLng, cxMcVoxStatusInputDbmLevel=cxMcVoxStatusInputDbmLevel, cxMcVoxGlobalClearRmtExt=cxMcVoxGlobalClearRmtExt, cxMcVoxOpeTimeAnswer=cxMcVoxOpeTimeAnswer, cxMcVoxDiagLseDiags=cxMcVoxDiagLseDiags, cxMcVoxGlobalClearLclExt=cxMcVoxGlobalClearLclExt, cxMcVoxGrpDefOpeIndex=cxMcVoxGrpDefOpeIndex, cxMcVoxFxsAdmFaxEnable=cxMcVoxFxsAdmFaxEnable, cxMcVoxGlobalTrapHistory=cxMcVoxGlobalTrapHistory, cxMcVoxAdmPinCode=cxMcVoxAdmPinCode, cxMcVoxFxsOpeEntry=cxMcVoxFxsOpeEntry, cxMcVoxGlobalLseTimerT3=cxMcVoxGlobalLseTimerT3, cxMcVoxFxoAdmRmtId=cxMcVoxFxoAdmRmtId, cxMcVoxNetOpeIndex=cxMcVoxNetOpeIndex, cxMcVoxAdmToneDelayAfterCnct=cxMcVoxAdmToneDelayAfterCnct, cxMcVoxGrpIdAdm=cxMcVoxGrpIdAdm, cxMcVoxTranslOpe=cxMcVoxTranslOpe, cxMcVoxPathOpeEntry=cxMcVoxPathOpeEntry, cxMcVoxDiagIbvDiags=cxMcVoxDiagIbvDiags, cxMcVoxRegenOpeExt=cxMcVoxRegenOpeExt, cxMcVoxOpeMfToneThold=cxMcVoxOpeMfToneThold, cxMcVoxStateEntry=cxMcVoxStateEntry, cxMcVoxEmAdmType=cxMcVoxEmAdmType, cxMcVoxStatusChannelAccess=cxMcVoxStatusChannelAccess, cxMcVoxOpeTimeSiOff=cxMcVoxOpeTimeSiOff, cxMcVoxFxsAdmRxGain=cxMcVoxFxsAdmRxGain, cxMcVoxFxoAdmRxGain=cxMcVoxFxoAdmRxGain, cxMcVoxGrpDefOpePriority=cxMcVoxGrpDefOpePriority, cxMcVoxFxoOpeCnctType=cxMcVoxFxoOpeCnctType, cxMcVoxFxoAdmCnctType=cxMcVoxFxoAdmCnctType, cxMcVoxGlobalAdmPinCodeLng=cxMcVoxGlobalAdmPinCodeLng, cxMcVoxFxoOpeImpedance=cxMcVoxFxoOpeImpedance, cxMcVoxOpeFaxRxGain=cxMcVoxOpeFaxRxGain, cxMcVoxEmAdmDialType=cxMcVoxEmAdmDialType, cxMcVoxOpeTimeWaitDialIn=cxMcVoxOpeTimeWaitDialIn, cxMcVoxEmOpeVocoder=cxMcVoxEmOpeVocoder, cxMcVoxGlobalHistoryPercentageFull=cxMcVoxGlobalHistoryPercentageFull, cxMcVoxAdmFaxCedMinToneDur=cxMcVoxAdmFaxCedMinToneDur, cxMcVoxCfgReinitPort=cxMcVoxCfgReinitPort, cxMcVoxFxsAdmVocoder=cxMcVoxFxsAdmVocoder, cxMcVoxAdmRingTimeOff2=cxMcVoxAdmRingTimeOff2, cxMcVoxGlobalReinitCodesTable=cxMcVoxGlobalReinitCodesTable, cxMcVoxMibLevel=cxMcVoxMibLevel, cxMcVoxNetOpeEntry=cxMcVoxNetOpeEntry, cxMcVoxNetAdmRoute=cxMcVoxNetAdmRoute, cxMcVoxOpeDtmfGuard=cxMcVoxOpeDtmfGuard, cxMcVoxEmOpePathId=cxMcVoxEmOpePathId, cxMcVoxGlobalLseTimerT2=cxMcVoxGlobalLseTimerT2, cxMcVoxDiagGlmDiags=cxMcVoxDiagGlmDiags, cxMcVoxGrpDefAdmTable=cxMcVoxGrpDefAdmTable, cxMcVoxGlobalReinitNet=cxMcVoxGlobalReinitNet, cxMcVoxGlobalGlmMaxTimeToTxResp=cxMcVoxGlobalGlmMaxTimeToTxResp, cxMcVoxAdmRTCNonLclZone=cxMcVoxAdmRTCNonLclZone, cxMcVoxEmOpePortStatus=cxMcVoxEmOpePortStatus, cxMcVoxTranslOpeCCPrefix=cxMcVoxTranslOpeCCPrefix, cxMcVoxFxsAdmTimeOff=cxMcVoxFxsAdmTimeOff, cxMcVoxGlobalOpePathLng=cxMcVoxGlobalOpePathLng, cxMcVoxAdmFaxPreambleDelay=cxMcVoxAdmFaxPreambleDelay, cxMcVoxPathAdmPathId=cxMcVoxPathAdmPathId, cxMcVoxOpeVoiceOffsetTxGain=cxMcVoxOpeVoiceOffsetTxGain, cxMcVoxOpeTimeWinkMax=cxMcVoxOpeTimeWinkMax, cxMcVoxDiagEntry=cxMcVoxDiagEntry, cxMcVoxTranslOpeAreaCodeLng=cxMcVoxTranslOpeAreaCodeLng, cxMcVoxEmAdmEntry=cxMcVoxEmAdmEntry, cxMcVoxStatusPortStatus=cxMcVoxStatusPortStatus, cxMcVoxGrpDefAdmPathId=cxMcVoxGrpDefAdmPathId, cxMcVoxFxsAdmCnctType=cxMcVoxFxsAdmCnctType, cxMcVoxFxsAdmBroadcast=cxMcVoxFxsAdmBroadcast, cxMcVoxOpeTimeDiscOut=cxMcVoxOpeTimeDiscOut, cxMcVoxLclExtOpeIndex=cxMcVoxLclExtOpeIndex, cxMcVoxDriverAdm=cxMcVoxDriverAdm, cxMcVoxGlobalExtBitMask=cxMcVoxGlobalExtBitMask, cxMcVoxStatAndLog=cxMcVoxStatAndLog, cxMcVoxAdmFaxMaxPreambleDly=cxMcVoxAdmFaxMaxPreambleDly, cxMcVoxFxoAdmBroadcast=cxMcVoxFxoAdmBroadcast, cxMcVoxOpePortUsed=cxMcVoxOpePortUsed, cxMcVoxFxsOpeSignaling=cxMcVoxFxsOpeSignaling, cxMcVoxGlobalAdmEnablePinTable=cxMcVoxGlobalAdmEnablePinTable, cxMcVoxStateTable=cxMcVoxStateTable, cxMcVoxAdmFlashTgen=cxMcVoxAdmFlashTgen, cxMcVoxAdmDtmfTxTimeOn=cxMcVoxAdmDtmfTxTimeOn, cxMcVoxFxoAdmEchoCancel=cxMcVoxFxoAdmEchoCancel, cxMcVoxFxsOpeImpedance=cxMcVoxFxsOpeImpedance, cxMcVoxHistoryTable=cxMcVoxHistoryTable, cxMcVoxOpeDtmfOpeLevel=cxMcVoxOpeDtmfOpeLevel, cxMcVoxOpeFaxMinPreambleDly=cxMcVoxOpeFaxMinPreambleDly, cxMcVoxStatusDspDpram=cxMcVoxStatusDspDpram, cxMcVoxPathOpeHunt=cxMcVoxPathOpeHunt, cxMcVoxDriverOpe=cxMcVoxDriverOpe, cxMcVoxAdmCardUsed=cxMcVoxAdmCardUsed, cxMcVoxHistoryLnkState=cxMcVoxHistoryLnkState, cxMcVoxOpeCardUsed=cxMcVoxOpeCardUsed, cxMcVoxFxoAdmEntry=cxMcVoxFxoAdmEntry, cxMcVoxOpePinTable=cxMcVoxOpePinTable, cxMcVoxAdmPinRowStatus=cxMcVoxAdmPinRowStatus, cxMcVoxCfgCmdTest=cxMcVoxCfgCmdTest, cxMcVoxAdmFaxTxGain=cxMcVoxAdmFaxTxGain, cxMcVoxGrpDefOpeRmtExt=cxMcVoxGrpDefOpeRmtExt, cxMcVoxGlobalOpeEnableCodesTable=cxMcVoxGlobalOpeEnableCodesTable, cxMcVoxTrapStatus=cxMcVoxTrapStatus, cxMcVoxLclExtAdmIndex=cxMcVoxLclExtAdmIndex, cxMcVoxStatusCardNumber=cxMcVoxStatusCardNumber, cxMcVoxOpeRTCCountry=cxMcVoxOpeRTCCountry, cxMcVoxAdmPinIndex=cxMcVoxAdmPinIndex, cxMcVoxTranslOpeCCPrefixLng=cxMcVoxTranslOpeCCPrefixLng, cxMcVoxOpeRTCArea=cxMcVoxOpeRTCArea, cxMcVoxGlobalAccCode=cxMcVoxGlobalAccCode, cxMcVoxFxsOpeRmtExt=cxMcVoxFxsOpeRmtExt, cxMcVoxGlobalTensionDc=cxMcVoxGlobalTensionDc, cxMcVoxNetOpeTable=cxMcVoxNetOpeTable, cxMcVoxHistoryIndex=cxMcVoxHistoryIndex, cxMcVoxFxsAdmDidSignalType=cxMcVoxFxsAdmDidSignalType, cxMcVoxGlobalReinitPath=cxMcVoxGlobalReinitPath, cxMcVoxFxsAdmRmtExt=cxMcVoxFxsAdmRmtExt, cxMcVoxOpeTimeDialOut=cxMcVoxOpeTimeDialOut, cxMcVoxAdmFaxMinPreambleDly=cxMcVoxAdmFaxMinPreambleDly, cxMcVoxFxsOpeBroadcast=cxMcVoxFxsOpeBroadcast, cxMcVoxOpePortPrivEntry=cxMcVoxOpePortPrivEntry, cxMcVoxAdmPortPrivTable=cxMcVoxAdmPortPrivTable, cxMcVoxOpeFaxMaxHdlcFlags=cxMcVoxOpeFaxMaxHdlcFlags, cxMcVoxAdmFaxTimerWaitId=cxMcVoxAdmFaxTimerWaitId, cxMcVoxFxoAdmPathId=cxMcVoxFxoAdmPathId, cxMcVoxEmOpeEntry=cxMcVoxEmOpeEntry, cxMcVoxAdmLclZoneLng=cxMcVoxAdmLclZoneLng, cxMcVoxEmAdmMode=cxMcVoxEmAdmMode, cxMcVoxCfgPortIndex=cxMcVoxCfgPortIndex, cxMcVoxEmOpeVoiceConnection=cxMcVoxEmOpeVoiceConnection, cxMcVoxRegenOpeGid=cxMcVoxRegenOpeGid, cxMcVoxHistoryTrap=cxMcVoxHistoryTrap, cxMcVoxFxoAdmTxGain=cxMcVoxFxoAdmTxGain, cxMcVoxOpeAc15InterDigit=cxMcVoxOpeAc15InterDigit, cxMcVoxDiagFaxInEvents=cxMcVoxDiagFaxInEvents, cxMcVoxFxoAdmCardUsed=cxMcVoxFxoAdmCardUsed, cxMcVoxNetOpeRemStationId=cxMcVoxNetOpeRemStationId, cxMcVoxAdmRTCNonLclArea=cxMcVoxAdmRTCNonLclArea, cxMcVoxDiagCardIndex=cxMcVoxDiagCardIndex, cxMcVoxTrapRing=cxMcVoxTrapRing, cxMcVoxEmAdmVocoder=cxMcVoxEmAdmVocoder, cxMcVoxEmOpeDialType=cxMcVoxEmOpeDialType, cxMcVoxFxsOpeDidSignalType=cxMcVoxFxsOpeDidSignalType, cxMcVoxFxsOpeAutoCnx=cxMcVoxFxsOpeAutoCnx, cxMcVoxGrpDefAdmRowStatus=cxMcVoxGrpDefAdmRowStatus, cxMcVoxFxsOpeTimeOn=cxMcVoxFxsOpeTimeOn, cxMcVoxGlobalHistoryMaxNumberOfEntries=cxMcVoxGlobalHistoryMaxNumberOfEntries, cxMcVoxFxoAdmVocoder=cxMcVoxFxoAdmVocoder, cxMcVoxAdmPortUsed=cxMcVoxAdmPortUsed, cxMcVoxAdmRTC=cxMcVoxAdmRTC, cxMcVoxAdmRTCNonLclZoneLng=cxMcVoxAdmRTCNonLclZoneLng, cxMcVoxFxsAdmAutoCnx=cxMcVoxFxsAdmAutoCnx, cxMcVoxGrpIdAdmNbPoll=cxMcVoxGrpIdAdmNbPoll, cxMcVoxEmAdmFaxBw=cxMcVoxEmAdmFaxBw, cxMcVoxGlobalAdmEnableCodesTable=cxMcVoxGlobalAdmEnableCodesTable, cxMcVoxFxsOpeVocoder=cxMcVoxFxsOpeVocoder, cxMcVoxFxsAdmTxGain=cxMcVoxFxsAdmTxGain, cxMcVoxEmAdmTranspMode=cxMcVoxEmAdmTranspMode, cxMcVoxEmOpeType=cxMcVoxEmOpeType, cxMcVoxOpeFlashTgen=cxMcVoxOpeFlashTgen, cxMcVoxGlobalGlmInBetwRespTime=cxMcVoxGlobalGlmInBetwRespTime, cxMcVoxAdmRTCCountry=cxMcVoxAdmRTCCountry, cxMcVoxAdmRingTimeOn=cxMcVoxAdmRingTimeOn, cxMcVoxAdmFaxCedMaxToneDur=cxMcVoxAdmFaxCedMaxToneDur, cxMcVoxFxoOpeFaxEnable=cxMcVoxFxoOpeFaxEnable, cxMcVoxEmOpeCnctType=cxMcVoxEmOpeCnctType, cxMcVoxEmOpePortUsed=cxMcVoxEmOpePortUsed, cxMcVoxFxsAdmPathId=cxMcVoxFxsAdmPathId, cxMcVoxDiagToneInEvents=cxMcVoxDiagToneInEvents, cxMcVoxEmAdmBroadcast=cxMcVoxEmAdmBroadcast, cxMcVoxOpeFaxTimerDetectSync=cxMcVoxOpeFaxTimerDetectSync, cxMcVoxPathAdmIndex=cxMcVoxPathAdmIndex, cxMcVoxFxsAdmTable=cxMcVoxFxsAdmTable, cxMcVoxHistoryRmtCardNumber=cxMcVoxHistoryRmtCardNumber, cxMcVoxEventPhoneNumber=cxMcVoxEventPhoneNumber, cxMcVoxOpeRTCNonLclZoneLng=cxMcVoxOpeRTCNonLclZoneLng, cxMcVoxGrpDefAdmRmtExt=cxMcVoxGrpDefAdmRmtExt, cxMcVoxEventDateAndTimeOffLine=cxMcVoxEventDateAndTimeOffLine, cxMcVoxFxoAdmDialType=cxMcVoxFxoAdmDialType, cxMcVoxFxsOpePortUsed=cxMcVoxFxsOpePortUsed, cxMcVoxFxsOpeTxGain=cxMcVoxFxsOpeTxGain, cxMcVoxOpeTimeProceed=cxMcVoxOpeTimeProceed, cxMcVoxGlobalReinitPinTable=cxMcVoxGlobalReinitPinTable, cxMcVoxPathAdmEntry=cxMcVoxPathAdmEntry, cxMcVoxGlobalAdmLocalId=cxMcVoxGlobalAdmLocalId, cxMcVoxAdmFaxMinPreambleDur=cxMcVoxAdmFaxMinPreambleDur, cxMcVoxHistoryRmtPortNumber=cxMcVoxHistoryRmtPortNumber, cxMcVoxDiagScvEvents=cxMcVoxDiagScvEvents, cxMcVoxAdmFaxTimerDetectSync=cxMcVoxAdmFaxTimerDetectSync, cxMcVoxCfgDriverAdmUsed=cxMcVoxCfgDriverAdmUsed, cxMcVoxDiagToneOutEvents=cxMcVoxDiagToneOutEvents, cxMcVoxEmAdmPortStatus=cxMcVoxEmAdmPortStatus, cxMcVoxGrpIdLenAdm=cxMcVoxGrpIdLenAdm, cxMcVoxAdmFaxPreambleDuration=cxMcVoxAdmFaxPreambleDuration, cxMcVoxAdmPinEntry=cxMcVoxAdmPinEntry, cxMcVoxStatusIoAccess=cxMcVoxStatusIoAccess, cxMcVoxTranslOpeZoneCodeEnable=cxMcVoxTranslOpeZoneCodeEnable, cxMcVoxEmAdmRmtId=cxMcVoxEmAdmRmtId, cxMcVoxFxoOpePortStatus=cxMcVoxFxoOpePortStatus, cxMcVoxOpeFaxTxGain=cxMcVoxOpeFaxTxGain, cxMcVoxOpeRTC=cxMcVoxOpeRTC, cxMcVoxFxsOpeRxGain=cxMcVoxFxsOpeRxGain, cxMcVoxStatusIOResetState=cxMcVoxStatusIOResetState, cxMcVoxEmAdmPathId=cxMcVoxEmAdmPathId, cxMcVoxOpeFaxPreambleDelay=cxMcVoxOpeFaxPreambleDelay, cxMcVoxStateLnkState=cxMcVoxStateLnkState, cxMcVoxEmAdmTable=cxMcVoxEmAdmTable, cxMcVoxGlobalOpeGrpNbPoll=cxMcVoxGlobalOpeGrpNbPoll, cxMcVoxAdmPortPrivEntry=cxMcVoxAdmPortPrivEntry, cxMcVoxCfgTrapStatus=cxMcVoxCfgTrapStatus, cxMcVoxStateCardNumber=cxMcVoxStateCardNumber, cxMcVoxGrpIdAdmRowStatus=cxMcVoxGrpIdAdmRowStatus, cxMcVoxEmAdmPortUsed=cxMcVoxEmAdmPortUsed, cxMcVoxEmOpeSignalType=cxMcVoxEmOpeSignalType, cxMcVoxEmAdmRmtExt=cxMcVoxEmAdmRmtExt, cxMcVoxDownload=cxMcVoxDownload, cxMcVoxDiagTable=cxMcVoxDiagTable, cxMcVoxFxoOpeTranspMode=cxMcVoxFxoOpeTranspMode, cxMcVoxPathAdmRowStatus=cxMcVoxPathAdmRowStatus, cxMcVoxFxoAdmDidSignalType=cxMcVoxFxoAdmDidSignalType, cxMcVoxNetAdmRemVoxStation=cxMcVoxNetAdmRemVoxStation, cxMcVoxEmOpeFaxBw=cxMcVoxEmOpeFaxBw, cxMcVoxOpeTimeSiOn=cxMcVoxOpeTimeSiOn, cxMcVoxGrpDefAdmEntry=cxMcVoxGrpDefAdmEntry, cxMcVoxGlobalOpeEnablePinTable=cxMcVoxGlobalOpeEnablePinTable, cxMcVoxOpeDtmfTxTimeOn=cxMcVoxOpeDtmfTxTimeOn, cxMcVoxCfgTrapOnLine=cxMcVoxCfgTrapOnLine, cxMcVoxPathOpeIndex=cxMcVoxPathOpeIndex, cxMcVoxOpeTimerPrivEntry=cxMcVoxOpeTimerPrivEntry, cxMcVoxGlobalGlmMaxTimeToTxReq=cxMcVoxGlobalGlmMaxTimeToTxReq, cxMcVoxRegenOpeExtBitMask=cxMcVoxRegenOpeExtBitMask, cxMcVoxTrapDc=cxMcVoxTrapDc, cxMcVoxCfgCardIndex=cxMcVoxCfgCardIndex, cxMcVoxOpeFaxHdlcFlags=cxMcVoxOpeFaxHdlcFlags, cxMcVoxDiagGsdEvents=cxMcVoxDiagGsdEvents, cxMcVoxFxoOpeCardUsed=cxMcVoxFxoOpeCardUsed, cxMcVoxAdmFaxMaxPreambleDur=cxMcVoxAdmFaxMaxPreambleDur, cxMcVoxEventTable=cxMcVoxEventTable, cxMcVoxAdmMfToneThold=cxMcVoxAdmMfToneThold, cxMcVoxOpeFaxInterProtoGap=cxMcVoxOpeFaxInterProtoGap, cxMcVoxGlobalClearGrp=cxMcVoxGlobalClearGrp, cxMcVoxFxoOpeRmtId=cxMcVoxFxoOpeRmtId, cxMcVoxGrpDefAdmIndex=cxMcVoxGrpDefAdmIndex, cxMcVoxFxoAdmImpedance=cxMcVoxFxoAdmImpedance, cxMcVoxHistoryEntry=cxMcVoxHistoryEntry, cxMcVoxFxoOpeBroadcast=cxMcVoxFxoOpeBroadcast, cxMcVoxNetAdmIndex=cxMcVoxNetAdmIndex, cxMcVoxEmOpeRxGain=cxMcVoxEmOpeRxGain, cxMcVoxOpeTimeDiscIn=cxMcVoxOpeTimeDiscIn)
mibBuilder.exportSymbols("CXMCVOX-MIB", cxMcVoxOpePinCode=cxMcVoxOpePinCode, cxMcVoxLclExtAdmHuntChnl=cxMcVoxLclExtAdmHuntChnl, cxMcVoxAdmFaxRxGain=cxMcVoxAdmFaxRxGain, cxMcVoxLclExtOpeTable=cxMcVoxLclExtOpeTable, cxMcVoxAdmToneDelayAfterFlash=cxMcVoxAdmToneDelayAfterFlash, cxMcVoxGlobalAdmGrpNbPoll=cxMcVoxGlobalAdmGrpNbPoll, cxMcVoxAdmRingTimeOff1=cxMcVoxAdmRingTimeOff1, cxMcVoxFxsOpeCnctType=cxMcVoxFxsOpeCnctType, cxMcVoxEmAdmAc15TimeOn=cxMcVoxEmAdmAc15TimeOn, cxMcVoxEmOpeRingType=cxMcVoxEmOpeRingType, cxMcVoxGrpIdOpeTable=cxMcVoxGrpIdOpeTable, cxMcVoxAdmPulseInterDigit=cxMcVoxAdmPulseInterDigit, cxMcVoxGlobalTensionRing=cxMcVoxGlobalTensionRing, cxMcVoxGlobalTrapRing=cxMcVoxGlobalTrapRing, cxMcVoxOpeLclZoneCode=cxMcVoxOpeLclZoneCode, cxMcVoxOpeFaxMinPreambleDur=cxMcVoxOpeFaxMinPreambleDur, cxMcVoxAdmFlashTmax=cxMcVoxAdmFlashTmax, cxMcVoxOpeRTCNonLclAreaLng=cxMcVoxOpeRTCNonLclAreaLng, cxMcVoxFxoOpeSignaling=cxMcVoxFxoOpeSignaling, cxMcVoxAdmFaxCedToneDuration=cxMcVoxAdmFaxCedToneDuration, cxMcVoxOpeFlashTmax=cxMcVoxOpeFlashTmax, cxMcVoxGlobalRecogAcc=cxMcVoxGlobalRecogAcc, cxMcVoxEmAdmTxGain=cxMcVoxEmAdmTxGain, cxMcVoxEmAdmRxGain=cxMcVoxEmAdmRxGain, cxMcVoxTranslOpeZCPrefix=cxMcVoxTranslOpeZCPrefix, cxMcVoxOpeTimeDialIn=cxMcVoxOpeTimeDialIn, cxMcVoxAdmLclZoneEntry=cxMcVoxAdmLclZoneEntry, cxMcVoxFxsAdmTranspMode=cxMcVoxFxsAdmTranspMode, cxMcVoxFxsAdmCardUsed=cxMcVoxFxsAdmCardUsed)
