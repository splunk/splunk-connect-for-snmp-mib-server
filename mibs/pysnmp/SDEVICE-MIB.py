#
# PySNMP MIB module SDEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SDEVICE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, Gauge32, IpAddress, TimeTicks, MibIdentifier, ModuleIdentity, Integer32, NotificationType, Bits, Unsigned32, enterprises, ObjectIdentity, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "IpAddress", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Integer32", "NotificationType", "Bits", "Unsigned32", "enterprises", "ObjectIdentity", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
schleifenbauer = ModuleIdentity((1, 3, 6, 1, 4, 1, 31034))
if mibBuilder.loadTexts: schleifenbauer.setLastUpdated('201504131700Z')
if mibBuilder.loadTexts: schleifenbauer.setOrganization('Schleifenbauer Engineering')
class DeciAmps(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-2'

class DeciCelsius(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-2'

class DeciPowerFactor(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-2'

class DeciValue(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-2'

class DeciVolts(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-2'

class KiloWattHour(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'

class MilliSeconds(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'

class Seconds(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'

device0 = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 2))
identification = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 2, 3))
spdmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdmVersion.setStatus('current')
firmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
buildNumber = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildNumber.setStatus('current')
salesOrderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salesOrderNumber.setStatus('current')
productId = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productId.setStatus('current')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
hardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareAddress.setStatus('current')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
unitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitAddress.setStatus('current')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 3, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
deviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceLocation.setStatus('current')
vanityTag = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vanityTag.setStatus('current')
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 2, 4))
noPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noPhases.setStatus('current')
noOutletsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noOutletsTotal.setStatus('current')
noSwitchedOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noSwitchedOutlets.setStatus('current')
noMeasuredOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noMeasuredOutlets.setStatus('current')
noSensors = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noSensors.setStatus('current')
maximumLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumLoad.setStatus('current')
systemstatus = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 2, 5))
deviceStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceStatusCode.setStatus('current')
temperatureAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureAlert.setStatus('current')
inputCurrentAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentAlert.setStatus('current')
outputCurrentAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputCurrentAlert.setStatus('current')
inputVoltageAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltageAlert.setStatus('current')
oCurrentDropAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 103))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCurrentDropAlert.setStatus('current')
iCurrentDropAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iCurrentDropAlert.setStatus('current')
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 2, 6))
rebootDevice = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootDevice.setStatus('current')
resetAlerts = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAlerts.setStatus('current')
zeroInputKWhSubtotal = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zeroInputKWhSubtotal.setStatus('current')
zeroOutKWhSubtotal = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zeroOutKWhSubtotal.setStatus('current')
resetPeakValues = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetPeakValues.setStatus('current')
settings = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 2, 7))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1))
peakDuration = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 4), MilliSeconds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peakDuration.setStatus('current')
fixedOutletDelay = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 5), MilliSeconds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fixedOutletDelay.setStatus('current')
powerSaverMode = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 6), Seconds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSaverMode.setStatus('current')
outletPowerupMode = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerupMode.setStatus('current')
maximumTemperature = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maximumTemperature.setStatus('current')
displayOrientation = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayOrientation.setStatus('current')
localAlertReset = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localAlertReset.setStatus('current')
currentDropDetection = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentDropDetection.setStatus('current')
wirelessDisplayPower = MibScalar((1, 3, 6, 1, 4, 1, 31034, 2, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDisplayPower.setStatus('current')
inputmeasuresTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 2, 8), )
if mibBuilder.loadTexts: inputmeasuresTable.setStatus('current')
inputmeasuresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1), ).setIndexNames((0, "SDEVICE-MIB", "channelIndex6"))
if mibBuilder.loadTexts: inputmeasuresEntry.setStatus('current')
channelIndex6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: channelIndex6.setStatus('current')
kWhTotalI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 2), KiloWattHour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kWhTotalI.setStatus('current')
kWhSubtotalI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 3), KiloWattHour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kWhSubtotalI.setStatus('current')
powerFactorI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 4), DeciPowerFactor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFactorI.setStatus('current')
actualCurrentI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 5), DeciAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualCurrentI.setStatus('current')
peakCurrentI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 6), DeciAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakCurrentI.setStatus('current')
actualVoltageI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 7), DeciVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualVoltageI.setStatus('current')
minVoltageI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 8), DeciVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minVoltageI.setStatus('current')
powerVAI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerVAI.setStatus('current')
powerWattI = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerWattI.setStatus('current')
maxInletAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 11), DeciAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxInletAmps.setStatus('current')
inputCTratio = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputCTratio.setStatus('current')
inputName = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 8, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputName.setStatus('current')
outletsTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 2, 9), )
if mibBuilder.loadTexts: outletsTable.setStatus('current')
outletsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 2, 9, 1), ).setIndexNames((0, "SDEVICE-MIB", "channelIndex4"))
if mibBuilder.loadTexts: outletsEntry.setStatus('current')
channelIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: channelIndex4.setStatus('current')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletName.setStatus('current')
outputmeasuresTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 2, 10), )
if mibBuilder.loadTexts: outputmeasuresTable.setStatus('current')
outputmeasuresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1), ).setIndexNames((0, "SDEVICE-MIB", "channelIndex7"))
if mibBuilder.loadTexts: outputmeasuresEntry.setStatus('current')
channelIndex7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: channelIndex7.setStatus('current')
kWhTotalO = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 2), KiloWattHour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kWhTotalO.setStatus('current')
kWhSubtotalO = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 3), KiloWattHour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kWhSubtotalO.setStatus('current')
powerFactorO = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 4), DeciPowerFactor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFactorO.setStatus('current')
actualCurrentO = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 5), DeciAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualCurrentO.setStatus('current')
peakCurrentO = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 6), DeciAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakCurrentO.setStatus('current')
actualVoltageO = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 7), DeciVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualVoltageO.setStatus('current')
maxOutletAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 8), DeciAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxOutletAmps.setStatus('current')
outputCTratio = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputCTratio.setStatus('current')
switchedoutletsTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 2, 11), )
if mibBuilder.loadTexts: switchedoutletsTable.setStatus('current')
switchedoutletsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 2, 11, 1), ).setIndexNames((0, "SDEVICE-MIB", "channelIndex5"))
if mibBuilder.loadTexts: switchedoutletsEntry.setStatus('current')
channelIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: channelIndex5.setStatus('current')
currentState = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentState.setStatus('current')
scheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scheduled.setStatus('current')
unlock = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unlock.setStatus('current')
individualOutletDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 11, 1, 5), Seconds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: individualOutletDelay.setStatus('current')
sensorTable = MibTable((1, 3, 6, 1, 4, 1, 31034, 2, 12), )
if mibBuilder.loadTexts: sensorTable.setStatus('current')
sensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31034, 2, 12, 1), ).setIndexNames((0, "SDEVICE-MIB", "channelIndex8"))
if mibBuilder.loadTexts: sensorEntry.setStatus('current')
channelIndex8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: channelIndex8.setStatus('current')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorType.setStatus('current')
sensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 12, 1, 3), DeciValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorValue.setStatus('current')
sensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 31034, 2, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorName.setStatus('current')
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 99))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 99, 1))
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 31034, 99, 1, 1)).setObjects(("SDEVICE-MIB", "sensorsGroup"), ("SDEVICE-MIB", "outputMeasuresGroup"), ("SDEVICE-MIB", "inputMeasuresGroup"), ("SDEVICE-MIB", "switchedOutletsGroup"), ("SDEVICE-MIB", "settingsGroup"), ("SDEVICE-MIB", "systemStatusGroup"), ("SDEVICE-MIB", "configurationGroup"), ("SDEVICE-MIB", "identificationGroup"), ("SDEVICE-MIB", "resetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 31034, 99, 2))
identificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 1)).setObjects(("SDEVICE-MIB", "spdmVersion"), ("SDEVICE-MIB", "firmwareVersion"), ("SDEVICE-MIB", "salesOrderNumber"), ("SDEVICE-MIB", "productId"), ("SDEVICE-MIB", "serialNumber"), ("SDEVICE-MIB", "hardwareAddress"), ("SDEVICE-MIB", "unitAddress"), ("SDEVICE-MIB", "deviceName"), ("SDEVICE-MIB", "deviceLocation"), ("SDEVICE-MIB", "vanityTag"), ("SDEVICE-MIB", "macAddress"), ("SDEVICE-MIB", "buildNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    identificationGroup = identificationGroup.setStatus('current')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 2)).setObjects(("SDEVICE-MIB", "noPhases"), ("SDEVICE-MIB", "noOutletsTotal"), ("SDEVICE-MIB", "noSwitchedOutlets"), ("SDEVICE-MIB", "noMeasuredOutlets"), ("SDEVICE-MIB", "maximumLoad"), ("SDEVICE-MIB", "noSensors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
systemStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 3)).setObjects(("SDEVICE-MIB", "deviceStatusCode"), ("SDEVICE-MIB", "temperatureAlert"), ("SDEVICE-MIB", "inputCurrentAlert"), ("SDEVICE-MIB", "outputCurrentAlert"), ("SDEVICE-MIB", "inputVoltageAlert"), ("SDEVICE-MIB", "oCurrentDropAlert"), ("SDEVICE-MIB", "iCurrentDropAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemStatusGroup = systemStatusGroup.setStatus('current')
resetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 4)).setObjects(("SDEVICE-MIB", "resetAlerts"), ("SDEVICE-MIB", "resetPeakValues"), ("SDEVICE-MIB", "rebootDevice"), ("SDEVICE-MIB", "zeroInputKWhSubtotal"), ("SDEVICE-MIB", "zeroOutKWhSubtotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resetGroup = resetGroup.setStatus('current')
settingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 5)).setObjects(("SDEVICE-MIB", "peakDuration"), ("SDEVICE-MIB", "localAlertReset"), ("SDEVICE-MIB", "fixedOutletDelay"), ("SDEVICE-MIB", "powerSaverMode"), ("SDEVICE-MIB", "outletPowerupMode"), ("SDEVICE-MIB", "maximumTemperature"), ("SDEVICE-MIB", "displayOrientation"), ("SDEVICE-MIB", "maxInletAmps"), ("SDEVICE-MIB", "maxOutletAmps"), ("SDEVICE-MIB", "outputCTratio"), ("SDEVICE-MIB", "inputCTratio"), ("SDEVICE-MIB", "inputName"), ("SDEVICE-MIB", "outletName"), ("SDEVICE-MIB", "individualOutletDelay"), ("SDEVICE-MIB", "currentDropDetection"), ("SDEVICE-MIB", "wirelessDisplayPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    settingsGroup = settingsGroup.setStatus('current')
switchedOutletsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 6)).setObjects(("SDEVICE-MIB", "currentState"), ("SDEVICE-MIB", "scheduled"), ("SDEVICE-MIB", "individualOutletDelay"), ("SDEVICE-MIB", "unlock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    switchedOutletsGroup = switchedOutletsGroup.setStatus('current')
inputMeasuresGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 7)).setObjects(("SDEVICE-MIB", "kWhTotalI"), ("SDEVICE-MIB", "kWhSubtotalI"), ("SDEVICE-MIB", "powerFactorI"), ("SDEVICE-MIB", "actualCurrentI"), ("SDEVICE-MIB", "peakCurrentI"), ("SDEVICE-MIB", "actualVoltageI"), ("SDEVICE-MIB", "minVoltageI"), ("SDEVICE-MIB", "powerWattI"), ("SDEVICE-MIB", "powerVAI"), ("SDEVICE-MIB", "maxInletAmps"), ("SDEVICE-MIB", "inputCTratio"), ("SDEVICE-MIB", "inputName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inputMeasuresGroup = inputMeasuresGroup.setStatus('current')
outputMeasuresGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 8)).setObjects(("SDEVICE-MIB", "kWhTotalO"), ("SDEVICE-MIB", "kWhSubtotalO"), ("SDEVICE-MIB", "powerFactorO"), ("SDEVICE-MIB", "actualCurrentO"), ("SDEVICE-MIB", "peakCurrentO"), ("SDEVICE-MIB", "actualVoltageO"), ("SDEVICE-MIB", "maxOutletAmps"), ("SDEVICE-MIB", "outputCTratio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    outputMeasuresGroup = outputMeasuresGroup.setStatus('current')
sensorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 31034, 99, 2, 9)).setObjects(("SDEVICE-MIB", "sensorType"), ("SDEVICE-MIB", "sensorValue"), ("SDEVICE-MIB", "sensorName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sensorsGroup = sensorsGroup.setStatus('current')
mibBuilder.exportSymbols("SDEVICE-MIB", identification=identification, inputName=inputName, inputVoltageAlert=inputVoltageAlert, firmwareVersion=firmwareVersion, maxOutletAmps=maxOutletAmps, resetAlerts=resetAlerts, resetPeakValues=resetPeakValues, buildNumber=buildNumber, powerWattI=powerWattI, Seconds=Seconds, configurationGroup=configurationGroup, temperatureAlert=temperatureAlert, outputCTratio=outputCTratio, sensorName=sensorName, maximumLoad=maximumLoad, deviceStatusCode=deviceStatusCode, KiloWattHour=KiloWattHour, deviceName=deviceName, unlock=unlock, iCurrentDropAlert=iCurrentDropAlert, compliance=compliance, powerFactorO=powerFactorO, channelIndex8=channelIndex8, outputCurrentAlert=outputCurrentAlert, kWhSubtotalO=kWhSubtotalO, maximumTemperature=maximumTemperature, noPhases=noPhases, vanityTag=vanityTag, peakCurrentO=peakCurrentO, unitAddress=unitAddress, reset=reset, switchedOutletsGroup=switchedOutletsGroup, peakDuration=peakDuration, resetGroup=resetGroup, peakCurrentI=peakCurrentI, identificationGroup=identificationGroup, general=general, actualCurrentI=actualCurrentI, outputmeasuresEntry=outputmeasuresEntry, productId=productId, maxInletAmps=maxInletAmps, inputMeasuresGroup=inputMeasuresGroup, kWhTotalI=kWhTotalI, inputCTratio=inputCTratio, outletPowerupMode=outletPowerupMode, schleifenbauer=schleifenbauer, zeroInputKWhSubtotal=zeroInputKWhSubtotal, PYSNMP_MODULE_ID=schleifenbauer, outletName=outletName, sensorsGroup=sensorsGroup, device0=device0, outputmeasuresTable=outputmeasuresTable, systemStatusGroup=systemStatusGroup, sensorType=sensorType, channelIndex7=channelIndex7, noSensors=noSensors, individualOutletDelay=individualOutletDelay, scheduled=scheduled, DeciAmps=DeciAmps, deviceLocation=deviceLocation, configuration=configuration, noSwitchedOutlets=noSwitchedOutlets, kWhSubtotalI=kWhSubtotalI, noOutletsTotal=noOutletsTotal, settings=settings, serialNumber=serialNumber, sensorValue=sensorValue, fixedOutletDelay=fixedOutletDelay, powerSaverMode=powerSaverMode, actualVoltageI=actualVoltageI, outputMeasuresGroup=outputMeasuresGroup, conformance=conformance, hardwareAddress=hardwareAddress, kWhTotalO=kWhTotalO, rebootDevice=rebootDevice, DeciPowerFactor=DeciPowerFactor, MilliSeconds=MilliSeconds, inputCurrentAlert=inputCurrentAlert, wirelessDisplayPower=wirelessDisplayPower, DeciCelsius=DeciCelsius, outletsTable=outletsTable, channelIndex4=channelIndex4, switchedoutletsEntry=switchedoutletsEntry, inputmeasuresTable=inputmeasuresTable, switchedoutletsTable=switchedoutletsTable, sensorTable=sensorTable, currentState=currentState, currentDropDetection=currentDropDetection, systemstatus=systemstatus, groups=groups, sensorEntry=sensorEntry, channelIndex5=channelIndex5, localAlertReset=localAlertReset, channelIndex6=channelIndex6, noMeasuredOutlets=noMeasuredOutlets, minVoltageI=minVoltageI, DeciVolts=DeciVolts, DeciValue=DeciValue, compliances=compliances, inputmeasuresEntry=inputmeasuresEntry, displayOrientation=displayOrientation, powerVAI=powerVAI, macAddress=macAddress, actualCurrentO=actualCurrentO, actualVoltageO=actualVoltageO, powerFactorI=powerFactorI, settingsGroup=settingsGroup, salesOrderNumber=salesOrderNumber, oCurrentDropAlert=oCurrentDropAlert, zeroOutKWhSubtotal=zeroOutKWhSubtotal, outletsEntry=outletsEntry, spdmVersion=spdmVersion)
