#
# PySNMP MIB module POWERHUB-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POWERHUB-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:32:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, Bits, TimeTicks, Counter64, Integer32, enterprises, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Integer32", "enterprises", "NotificationType", "Counter32")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
fore = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
lsd = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6))
lsdproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1))
lsdcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2))
powerhub4k6k7k = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1))
powerbits = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 2))
alchassis = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1))
alatm = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2))
alAtmAMASlotTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8), )
if mibBuilder.loadTexts: alAtmAMASlotTable.setStatus('mandatory')
alAtmAMASlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1), ).setIndexNames((0, "POWERHUB-ATM-MIB", "alAtmAMASlotNumber"))
if mibBuilder.loadTexts: alAtmAMASlotEntry.setStatus('mandatory')
alAtmAMASlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMASlotNumber.setStatus('mandatory')
alAtmAMAUserSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alAtmAMAUserSelect.setStatus('mandatory')
alAtmAMAActualUse = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAActualUse.setStatus('mandatory')
alAtmAMAUTLevPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAUTLevPrime.setStatus('mandatory')
alAtmAMAUTLevBack = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAUTLevBack.setStatus('mandatory')
alAtmAMAUTVerPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAUTVerPrime.setStatus('mandatory')
alAtmAMAUTVerBack = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAUTVerBack.setStatus('mandatory')
alAtmAMAProtoPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oc3-155Mbps", 1), ("ds3-45Mbps", 2), ("e3-39Mbps", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAProtoPrime.setStatus('mandatory')
alAtmAMAProtoBack = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oc3-155Mbps", 1), ("ds3-45Mbps", 2), ("e3-39Mbps", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAProtoBack.setStatus('mandatory')
alAtmAMAMediaPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cat5utp", 1), ("coax", 2), ("mf", 3), ("sf", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAMediaPrime.setStatus('mandatory')
alAtmAMAMediaBack = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cat5utp", 1), ("coax", 2), ("mf", 3), ("sf", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAMediaBack.setStatus('mandatory')
alAtmPreviousAMA = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmPreviousAMA.setStatus('mandatory')
alAtmPreviousAMAType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oc3-155Mbps", 1), ("ds3-45Mbps", 2), ("e3-39Mbps", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmPreviousAMAType.setStatus('mandatory')
alAtmCurrentAMAType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oc3-155Mbps", 1), ("ds3-45Mbps", 2), ("e3-39Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmCurrentAMAType.setStatus('mandatory')
atmLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,1)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"), ("POWERHUB-ATM-MIB", "alAtmAMAActualUse"), ("POWERHUB-ATM-MIB", "alAtmCurrentAMAType"))
atmLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,2)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"), ("POWERHUB-ATM-MIB", "alAtmPreviousAMA"), ("POWERHUB-ATM-MIB", "alAtmPreviousAMAType"))
atmCutOver = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,3)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"), ("POWERHUB-ATM-MIB", "alAtmAMAActualUse"), ("POWERHUB-ATM-MIB", "alAtmCurrentAMAType"), ("POWERHUB-ATM-MIB", "alAtmPreviousAMA"), ("POWERHUB-ATM-MIB", "alAtmPreviousAMAType"))
atmBootUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,4)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"), ("POWERHUB-ATM-MIB", "alAtmAMAActualUse"), ("POWERHUB-ATM-MIB", "alAtmCurrentAMAType"))
atmFault = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,5)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"))
mibBuilder.exportSymbols("POWERHUB-ATM-MIB", atmLinkUp=atmLinkUp, alAtmAMAUTVerBack=alAtmAMAUTVerBack, atmBootUp=atmBootUp, atmLinkDown=atmLinkDown, alAtmAMASlotTable=alAtmAMASlotTable, alchassis=alchassis, alAtmAMAUserSelect=alAtmAMAUserSelect, alAtmAMAUTVerPrime=alAtmAMAUTVerPrime, powerbits=powerbits, alAtmAMASlotNumber=alAtmAMASlotNumber, alAtmAMAActualUse=alAtmAMAActualUse, lsd=lsd, alAtmPreviousAMA=alAtmPreviousAMA, alAtmPreviousAMAType=alAtmPreviousAMAType, powerhub4k6k7k=powerhub4k6k7k, alAtmAMAMediaBack=alAtmAMAMediaBack, atmFault=atmFault, lsdproducts=lsdproducts, alAtmAMASlotEntry=alAtmAMASlotEntry, alAtmAMAUTLevBack=alAtmAMAUTLevBack, alAtmAMAUTLevPrime=alAtmAMAUTLevPrime, alatm=alatm, alAtmCurrentAMAType=alAtmCurrentAMAType, atmCutOver=atmCutOver, alAtmAMAMediaPrime=alAtmAMAMediaPrime, systems=systems, alAtmAMAProtoPrime=alAtmAMAProtoPrime, fore=fore, lsdcommon=lsdcommon, alAtmAMAProtoBack=alAtmAMAProtoBack)
