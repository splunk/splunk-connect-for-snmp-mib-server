#
# PySNMP MIB module IP-LRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IP-LRRP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, Counter64, IpAddress, ObjectIdentity, Bits, iso, Integer32, TimeTicks, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "Counter64", "IpAddress", "ObjectIdentity", "Bits", "iso", "Integer32", "TimeTicks", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier")
TimeStamp, TextualConvention, TruthValue, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString", "MacAddress", "RowStatus")
cjnLrrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19))
if mibBuilder.loadTexts: cjnLrrp.setLastUpdated('9902110000Z')
if mibBuilder.loadTexts: cjnLrrp.setOrganization("Lucent's Concord Technology Center (CTC)")
cjnLrrpGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 1))
cjnLrrpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpEnabled.setStatus('current')
cjnLrrpGlobalStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpGlobalStatsReset.setStatus('current')
cjnLrrpGblStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 2))
cjnLrrpRouterChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpRouterChecksumErrors.setStatus('current')
cjnLrrpRouterVersionErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpRouterVersionErrors.setStatus('current')
cjnLrrpRouterVrIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpRouterVrIdErrors.setStatus('current')
cjnLrrpRtrStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3))
cjnLrrpRouterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1), )
if mibBuilder.loadTexts: cjnLrrpRouterStatsTable.setStatus('current')
cjnLrrpStatsBecomeMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsBecomeMaster.setStatus('current')
cjnLrrpStatsAdvertiseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsAdvertiseRcvd.setStatus('current')
cjnLrrpStatsAdvertiseIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsAdvertiseIntervalErrors.setStatus('current')
cjnLrrpStatsAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsAuthFailures.setStatus('current')
cjnLrrpStatsIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsIpTtlErrors.setStatus('current')
cjnLrrpStatsPriorityZeroPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsPriorityZeroPktsRcvd.setStatus('current')
cjnLrrpStatsPriorityZeroPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsPriorityZeroPktsSent.setStatus('current')
cjnLrrpStatsInvalidTypePktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsInvalidTypePktsRcvd.setStatus('current')
cjnLrrpStatsAddressListErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsAddressListErrors.setStatus('current')
cjnLrrpStatsInvalidAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsInvalidAuthType.setStatus('current')
cjnLrrpStatsAuthTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsAuthTypeMismatch.setStatus('current')
cjnLrrpStatsPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpStatsPacketLengthErrors.setStatus('current')
cjnLrrpRtrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4))
cjnLrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1), )
if mibBuilder.loadTexts: cjnLrrpOperTable.setStatus('current')
cjnLrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IP-LRRP-MIB", "cjnLrrpOperVrId"))
if mibBuilder.loadTexts: cjnLrrpOperEntry.setStatus('current')
cjnLrrpRouterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 3, 1, 1), )
cjnLrrpOperEntry.registerAugmentions(("IP-LRRP-MIB", "cjnLrrpRouterStatsEntry"))
cjnLrrpRouterStatsEntry.setIndexNames(*cjnLrrpOperEntry.getIndexNames())
if mibBuilder.loadTexts: cjnLrrpRouterStatsEntry.setStatus('current')
cjnLrrpOperVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnLrrpOperVrId.setStatus('current')
cjnLrrpOperVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnLrrpOperVirtualMacAddr.setStatus('current')
cjnLrrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnLrrpOperState.setStatus('current')
cjnLrrpOperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperAdminState.setStatus('current')
cjnLrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperPriority.setStatus('current')
cjnLrrpOperIpAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnLrrpOperIpAddrCount.setStatus('current')
cjnLrrpOperMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnLrrpOperMasterIpAddr.setStatus('current')
cjnLrrpOperPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperPrimaryIpAddr.setStatus('current')
cjnLrrpOperAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simpleTextPassword", 2), ("ipAuthenticationHeader", 3))).clone('noAuthentication')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperAuthType.setStatus('current')
cjnLrrpOperAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperAuthKey.setStatus('current')
cjnLrrpOperAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperAdvertisementInterval.setStatus('current')
cjnLrrpOperPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperPreemptMode.setStatus('current')
cjnLrrpOperVirtualRouterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnLrrpOperVirtualRouterUpTime.setStatus('current')
cjnLrrpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("bridge", 2), ("decnet", 3), ("other", 4))).clone('ip')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperProtocol.setStatus('current')
cjnLrrpOperOverrideAddressOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnLrrpOperOverrideAddressOwner.setStatus('current')
cjnLrrpOperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 4, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpOperRowStatus.setStatus('current')
cjnLrrpAssoIpAddrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 5))
cjnLrrpAssoIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 5, 1), )
if mibBuilder.loadTexts: cjnLrrpAssoIpAddrTable.setStatus('current')
cjnLrrpAssoIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IP-LRRP-MIB", "cjnLrrpOperVrId"), (0, "IP-LRRP-MIB", "cjnLrrpAssoIpAddr"))
if mibBuilder.loadTexts: cjnLrrpAssoIpAddrEntry.setStatus('current')
cjnLrrpAssoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 5, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnLrrpAssoIpAddr.setStatus('current')
cjnLrrpAssoIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 19, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnLrrpAssoIpAddrRowStatus.setStatus('current')
mibBuilder.exportSymbols("IP-LRRP-MIB", cjnLrrpOperOverrideAddressOwner=cjnLrrpOperOverrideAddressOwner, cjnLrrpOperAdminState=cjnLrrpOperAdminState, cjnLrrpStatsPriorityZeroPktsSent=cjnLrrpStatsPriorityZeroPktsSent, cjnLrrpStatsAuthTypeMismatch=cjnLrrpStatsAuthTypeMismatch, cjnLrrpStatsAdvertiseIntervalErrors=cjnLrrpStatsAdvertiseIntervalErrors, cjnLrrpRouterVrIdErrors=cjnLrrpRouterVrIdErrors, cjnLrrpOperPrimaryIpAddr=cjnLrrpOperPrimaryIpAddr, cjnLrrpOperTable=cjnLrrpOperTable, cjnLrrpAssoIpAddr=cjnLrrpAssoIpAddr, cjnLrrpAssoIpAddrGroup=cjnLrrpAssoIpAddrGroup, cjnLrrpOperAuthType=cjnLrrpOperAuthType, cjnLrrpOperVirtualMacAddr=cjnLrrpOperVirtualMacAddr, cjnLrrpOperPriority=cjnLrrpOperPriority, cjnLrrpStatsPriorityZeroPktsRcvd=cjnLrrpStatsPriorityZeroPktsRcvd, cjnLrrpOperEntry=cjnLrrpOperEntry, cjnLrrpOperRowStatus=cjnLrrpOperRowStatus, cjnLrrpOperProtocol=cjnLrrpOperProtocol, cjnLrrpGblStatsGroup=cjnLrrpGblStatsGroup, cjnLrrpStatsIpTtlErrors=cjnLrrpStatsIpTtlErrors, cjnLrrpAssoIpAddrEntry=cjnLrrpAssoIpAddrEntry, cjnLrrpStatsInvalidAuthType=cjnLrrpStatsInvalidAuthType, cjnLrrpStatsAddressListErrors=cjnLrrpStatsAddressListErrors, cjnLrrpOperVrId=cjnLrrpOperVrId, cjnLrrpOperAuthKey=cjnLrrpOperAuthKey, cjnLrrpStatsAuthFailures=cjnLrrpStatsAuthFailures, cjnLrrpOperPreemptMode=cjnLrrpOperPreemptMode, cjnLrrpRouterChecksumErrors=cjnLrrpRouterChecksumErrors, cjnLrrpAssoIpAddrRowStatus=cjnLrrpAssoIpAddrRowStatus, cjnLrrpOperState=cjnLrrpOperState, cjnLrrpStatsInvalidTypePktsRcvd=cjnLrrpStatsInvalidTypePktsRcvd, PYSNMP_MODULE_ID=cjnLrrp, cjnLrrpRtrGroup=cjnLrrpRtrGroup, cjnLrrpRouterStatsEntry=cjnLrrpRouterStatsEntry, cjnLrrpAssoIpAddrTable=cjnLrrpAssoIpAddrTable, cjnLrrpEnabled=cjnLrrpEnabled, cjnLrrpStatsBecomeMaster=cjnLrrpStatsBecomeMaster, cjnLrrpOperAdvertisementInterval=cjnLrrpOperAdvertisementInterval, cjnLrrpOperIpAddrCount=cjnLrrpOperIpAddrCount, cjnLrrp=cjnLrrp, cjnLrrpOperVirtualRouterUpTime=cjnLrrpOperVirtualRouterUpTime, cjnLrrpRouterStatsTable=cjnLrrpRouterStatsTable, cjnLrrpGlobalGroup=cjnLrrpGlobalGroup, cjnLrrpGlobalStatsReset=cjnLrrpGlobalStatsReset, cjnLrrpRouterVersionErrors=cjnLrrpRouterVersionErrors, cjnLrrpRtrStatsGroup=cjnLrrpRtrStatsGroup, cjnLrrpStatsAdvertiseRcvd=cjnLrrpStatsAdvertiseRcvd, cjnLrrpStatsPacketLengthErrors=cjnLrrpStatsPacketLengthErrors, cjnLrrpOperMasterIpAddr=cjnLrrpOperMasterIpAddr)
