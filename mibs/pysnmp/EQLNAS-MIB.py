#
# PySNMP MIB module EQLNAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EQLNAS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
eqlApplianceNetworkID, eqlApplianceIndex, eqlApplianceNetworkType = mibBuilder.importSymbols("EQLAPPLIANCE-MIB", "eqlApplianceNetworkID", "eqlApplianceIndex", "eqlApplianceNetworkType")
eqliscsiVolumeReplSiteIndex, SiteIndexOrZero, StatusDisabledDefault, SiteIndex = mibBuilder.importSymbols("EQLVOLUME-MIB", "eqliscsiVolumeReplSiteIndex", "SiteIndexOrZero", "StatusDisabledDefault", "SiteIndex")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, TimeTicks, enterprises, Counter32, Bits, Unsigned32, ModuleIdentity, NotificationType, MibIdentifier, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "enterprises", "Counter32", "Bits", "Unsigned32", "ModuleIdentity", "NotificationType", "MibIdentifier", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Integer32")
DateAndTime, TruthValue, DisplayString, TextualConvention, RowStatus, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "DisplayString", "TextualConvention", "RowStatus", "RowPointer")
eqlNASModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 18))
eqlNASModule.setRevisions(('2009-07-13 00:00',))
if mibBuilder.loadTexts: eqlNASModule.setLastUpdated('201403121459Z')
if mibBuilder.loadTexts: eqlNASModule.setOrganization('EqualLogic Inc.')
eqlNASObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 18, 1))
class UNIXPermissions(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'o'

class ClusterNameType(TextualConvention, OctetString):
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 64)

class ClusterIdType(TextualConvention, OctetString):
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 50)

class CertificateType(TextualConvention, OctetString):
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1750)

class NASContainerNameType(TextualConvention, OctetString):
    status = 'current'
    displayHint = 't'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 230)

eqlNASApplianceTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1), )
if mibBuilder.loadTexts: eqlNASApplianceTable.setStatus('current')
eqlNASApplianceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASApplianceEntry.setStatus('current')
eqlNASApplianceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceRowStatus.setStatus('current')
eqlNASAppliancePoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASAppliancePoolSize.setStatus('current')
eqlNASApplianceEQLPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceEQLPoolIndex.setStatus('current')
eqlNASApplianceReplRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASApplianceReplRemoteUserName.setStatus('current')
eqlNASApplianceNFSv4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASApplianceNFSv4Mode.setStatus('current')
eqlNASContainerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3), )
if mibBuilder.loadTexts: eqlNASContainerTable.setStatus('current')
eqlNASContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"))
if mibBuilder.loadTexts: eqlNASContainerEntry.setStatus('current')
eqlNASContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASContainerIndex.setStatus('current')
eqlNASContainerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerRowStatus.setStatus('current')
eqlNASContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerName.setStatus('current')
eqlNASContainerCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 4), Unsigned32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerCapacity.setStatus('current')
eqlNASContainerUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 5), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerUsedSpaceAlert.setStatus('current')
eqlNASContainerSnapshotHardQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 6), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerSnapshotHardQuota.setStatus('current')
eqlNASContainerSnapshotUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerSnapshotUsedSpaceAlert.setStatus('current')
eqlNASContainerUnixFilePermissions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 8), UNIXPermissions()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerUnixFilePermissions.setStatus('current')
eqlNASContainerUnixDirPermissions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 9), UNIXPermissions()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerUnixDirPermissions.setStatus('current')
eqlNASContainerQuotaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerQuotaEnabled.setStatus('current')
eqlNASContainerFileAccessSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mixed", 1), ("ntfs", 2), ("unix", 3))).clone('ntfs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerFileAccessSecurity.setStatus('current')
eqlNASContainerAccessTimeManagementGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("always", 1), ("everyFiveMinutes", 2), ("hourly", 3), ("daily", 4), ("weekly", 5))).clone('daily')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerAccessTimeManagementGranularity.setStatus('current')
eqlNASContainerOptimizationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerOptimizationEnabled.setStatus('current')
eqlNASContainerDedupMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("variable-chunk", 1), ("object", 2))).clone('variable-chunk')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDedupMethodType.setStatus('current')
eqlNASContainerCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerCompressionEnabled.setStatus('current')
eqlNASContainerModificationTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 365)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerModificationTimeFilter.setStatus('current')
eqlNASContainerAccessTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 365)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerAccessTimeFilter.setStatus('current')
eqlNASContainerExcludeFilesByNamePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerExcludeFilesByNamePattern.setStatus('deprecated')
eqlNASContainerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("delete-host-access-cfg", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerAction.setStatus('current')
eqlNASContainerDefaultUserQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDefaultUserQuota.setStatus('current')
eqlNASContainerDefaultUserQuotaAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 21), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDefaultUserQuotaAlert.setStatus('current')
eqlNASContainerDefaultGroupQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDefaultGroupQuota.setStatus('current')
eqlNASContainerDefaultGroupQuotaAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 23), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDefaultGroupQuotaAlert.setStatus('current')
eqlNASContainerOptimizationFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("use-filters", 0), ("ignore-filters", 1))).clone('use-filters')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerOptimizationFilterMode.setStatus('current')
eqlNASContainerRehydrateOnReadEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerRehydrateOnReadEnabled.setStatus('current')
eqlNASContainerUniqueIDTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2), )
if mibBuilder.loadTexts: eqlNASContainerUniqueIDTable.setStatus('current')
eqlNASContainerUniqueIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASContainerUniqueIDType"))
if mibBuilder.loadTexts: eqlNASContainerUniqueIDEntry.setStatus('current')
eqlNASContainerUniqueIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snapshot", 1), ("quota", 2))))
if mibBuilder.loadTexts: eqlNASContainerUniqueIDType.setStatus('current')
eqlNASContainerUniqueIDValueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerUniqueIDValueLen.setStatus('current')
eqlNASContainerUniqueIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerUniqueIDValue.setStatus('current')
eqlNASApplianceDefaultCfgTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4), )
if mibBuilder.loadTexts: eqlNASApplianceDefaultCfgTable.setStatus('current')
eqlNASApplianceDefaultCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASApplianceDefaultCfgEntry.setStatus('current')
eqlNASApplianceConfigUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 1), Unsigned32().clone(80)).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceConfigUsedSpaceAlert.setStatus('current')
eqlNASApplianceConfigSnapSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 2), Unsigned32().clone(80)).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceConfigSnapSpaceAlert.setStatus('current')
eqlNASApplianceConfigSnapHardQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 3), Unsigned32().clone(50)).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceConfigSnapHardQuota.setStatus('current')
eqlNASApplianceContainerUnixFilePerms = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 4), UNIXPermissions().clone(484)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceContainerUnixFilePerms.setStatus('current')
eqlNASApplianceContainerUnixDirPerms = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 5), UNIXPermissions().clone(493)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceContainerUnixDirPerms.setStatus('current')
eqlNASApplianceContainerFileSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mixed", 1), ("ntfs", 2), ("unix", 3))).clone('ntfs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceContainerFileSecurity.setStatus('current')
eqlNASApplianceDefaultUserQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultUserQuota.setStatus('current')
eqlNASApplianceDefaultUserQuotaAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 8), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultUserQuotaAlert.setStatus('current')
eqlNASApplianceDefaultGroupQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultGroupQuota.setStatus('current')
eqlNASApplianceDefaultGroupQuotaAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 10), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultGroupQuotaAlert.setStatus('current')
eqlNASApplianceDefaultCIFSAllowGuestAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAllowGuestAccess.setStatus('current')
eqlNASApplianceCIFSAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allow-everyone", 1), ("active-directory", 2), ("local-users", 3))).clone('allow-everyone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAuthenticationMode.setStatus('current')
eqlNASApplianceDefaultCIFSLockEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all-locks", 0), ("share-locks-op-locks", 1), ("only-share-locks", 2))).clone('all-locks')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSLockEnforcement.setStatus('current')
eqlNASApplianceNFSExportReadWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-write", 1), ("read-only", 2))).clone('read-write')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportReadWrite.setStatus('current')
eqlNASApplianceNFSExportTrustedUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all-except-root", 1), ("none", 2), ("all", 3))).clone('all-except-root')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportTrustedUsers.setStatus('current')
eqlNASApplianceAccessTimeManagementGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("always", 1), ("everyFiveMinutes", 2), ("hourly", 3), ("daily", 4), ("weekly", 5))).clone('daily')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAccessTimeManagementGranularity.setStatus('current')
eqlNASApplianceOptimizationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceOptimizationEnabled.setStatus('current')
eqlNASApplianceDedupMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("variable-chunk", 1), ("object", 2))).clone('variable-chunk')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDedupMethodType.setStatus('current')
eqlNASApplianceCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCompressionEnabled.setStatus('current')
eqlNASApplianceModificationTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 365)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceModificationTimeFilter.setStatus('current')
eqlNASApplianceAccessTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 365)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAccessTimeFilter.setStatus('current')
eqlNASApplianceExcludeFilesByNamePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceExcludeFilesByNamePattern.setStatus('deprecated')
eqlNASApplianceDefaultCIFSAntivirusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 23), StatusDisabledDefault().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusEnabled.setStatus('current')
eqlNASApplianceDefaultCIFSAntivirusPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("quarantine", 0), ("do-nothing", 1), ("remove", 2))).clone('quarantine')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusPolicy.setStatus('current')
eqlNASApplianceDefaultCIFSAntivirusExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExtensions.setStatus('current')
eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("exclude", 0), ("include", 1))).clone('exclude')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy.setStatus('current')
eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths.setStatus('current')
eqlNASApplianceDefaultCIFSAntivirusLargeFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 28), Unsigned32().clone(3072)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusLargeFileSize.setStatus('current')
eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen.setStatus('current')
eqlNASApplianceDefaultNFSExportsFileId32bit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceDefaultNFSExportsFileId32bit.setStatus('current')
eqlNASContainerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5), )
if mibBuilder.loadTexts: eqlNASContainerStatusTable.setStatus('current')
eqlNASContainerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"))
if mibBuilder.loadTexts: eqlNASContainerStatusEntry.setStatus('current')
eqlNASContainerStatusConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusConnections.setStatus('current')
eqlNASContainerStatusUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusUsedSpace.setStatus('current')
eqlNASContainerStatusSnapshotSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusSnapshotSpace.setStatus('current')
eqlNASContainerStatusNumNFSExports = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusNumNFSExports.setStatus('current')
eqlNASContainerStatusNumCIFSShares = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusNumCIFSShares.setStatus('current')
eqlNASContainerStatusAllocatedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusAllocatedSpace.setStatus('current')
eqlNASContainerStatusFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusFreeSpace.setStatus('current')
eqlNASContainerStatusNumOfSnapshots = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusNumOfSnapshots.setStatus('current')
eqlNASContainerStatusOptimizationSpaceSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusOptimizationSpaceSavings.setStatus('current')
eqlNASContainerStatusOptimized = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusOptimized.setStatus('current')
eqlNASContainerStatusReplState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("standalone", 0), ("source", 1), ("destination", 2), ("promoted", 3), ("not-available", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusReplState.setStatus('current')
eqlNASContainerStatusNextSnapshotID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerStatusNextSnapshotID.setStatus('current')
eqlNASApplianceNFSExportsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6), )
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsTable.setStatus('current')
eqlNASApplianceNFSExportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASApplianceNFSExportName"))
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsEntry.setStatus('current')
eqlNASApplianceNFSExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: eqlNASApplianceNFSExportName.setStatus('current')
eqlNASApplianceNFSExportsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsRowStatus.setStatus('current')
eqlNASApplianceNFSExportDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportDirectory.setStatus('current')
eqlNASApplianceNFSAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-write", 1), ("read-only", 2))).clone('read-write')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccess.setStatus('current')
eqlNASApplianceNFSLimitReportedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 5), Unsigned32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSLimitReportedSize.setStatus('current')
eqlNASApplianceNFSAccessClientIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientIPType.setStatus('current')
eqlNASApplianceNFSAccessClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientIP.setStatus('current')
eqlNASApplianceNFSAccessClientNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 8), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientNetmaskType.setStatus('current')
eqlNASApplianceNFSAccessClientNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSAccessClientNetmask.setStatus('current')
eqlNASApplianceNFSTrustUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all-except-root", 1), ("none", 2), ("all", 3))).clone('all-except-root')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSTrustUsers.setStatus('current')
eqlNASApplianceNFSExportsFileId32bit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceNFSExportsFileId32bit.setStatus('current')
eqlNASApplianceCIFSTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8), )
if mibBuilder.loadTexts: eqlNASApplianceCIFSTable.setStatus('current')
eqlNASApplianceCIFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASApplianceCIFSShareName"))
if mibBuilder.loadTexts: eqlNASApplianceCIFSEntry.setStatus('current')
eqlNASApplianceCIFSShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: eqlNASApplianceCIFSShareName.setStatus('current')
eqlNASApplianceCIFSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSRowStatus.setStatus('current')
eqlNASApplianceCIFSExportedDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSExportedDirectory.setStatus('current')
eqlNASApplianceCIFSAllowGuestAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAllowGuestAccess.setStatus('current')
eqlNASApplianceCIFSLockEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all-locks", 0), ("no-byte-range-locks", 1), ("only-share-locks", 2))).clone('all-locks')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSLockEnforcement.setStatus('current')
eqlNASApplianceCIFSAntivirusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 6), StatusDisabledDefault().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusEnabled.setStatus('current')
eqlNASApplianceCIFSAntivirusPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("quarantine", 0), ("do-nothing", 1), ("remove", 2))).clone('quarantine')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusPolicy.setStatus('current')
eqlNASApplianceCIFSAntivirusExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExtensions.setStatus('current')
eqlNASApplianceCIFSAntivirusExtensionsPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("exclude", 0), ("include", 1))).clone('exclude')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExtensionsPolicy.setStatus('current')
eqlNASApplianceCIFSAntivirusExcludeDirPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusExcludeDirPaths.setStatus('current')
eqlNASApplianceCIFSAntivirusLargeFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 11), Unsigned32().clone(3072)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusLargeFileSize.setStatus('current')
eqlNASApplianceCIFSAntivirusLargeFileOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceCIFSAntivirusLargeFileOpen.setStatus('current')
eqlNASContainerDirectoryOpsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9), )
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsTable.setStatus('current')
eqlNASContainerDirectoryOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASContainerDirectoryOpsIndex"))
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsEntry.setStatus('current')
eqlNASContainerDirectoryOpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASContainerDirectoryOpsIndex.setStatus('current')
eqlNASContainerDirectoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDirectoryRowStatus.setStatus('current')
eqlNASContainerDirectoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDirectoryName.setStatus('current')
eqlNASContainerDirectoryCaseInsensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerDirectoryCaseInsensitive.setStatus('current')
eqlNASSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3), )
if mibBuilder.loadTexts: eqlNASSnapshotTable.setStatus('current')
eqlNASSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASSnapshotIndex"))
if mibBuilder.loadTexts: eqlNASSnapshotEntry.setStatus('current')
eqlNASSnapshotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASSnapshotIndex.setStatus('current')
eqlNASSnapshotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotRowStatus.setStatus('current')
eqlNASSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotName.setStatus('current')
eqlNASSnapshotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotSize.setStatus('current')
eqlNASSnapshotTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotTimestamp.setStatus('current')
eqlNASSnapshotRollBack = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotRollBack.setStatus('current')
eqlNASSnapshotPolicyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyIdx.setStatus('current')
eqlNASSnapshotPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4), )
if mibBuilder.loadTexts: eqlNASSnapshotPolicyTable.setStatus('current')
eqlNASSnapshotPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASSnapshotPolicyIndex"))
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEntry.setStatus('current')
eqlNASSnapshotPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlNASSnapshotPolicyIndex.setStatus('current')
eqlNASSnapshotPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyRowStatus.setStatus('current')
eqlNASSnapshotPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyName.setStatus('current')
eqlNASSnapshotPolicyMaxKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setUnits('snapshots').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyMaxKeep.setStatus('current')
eqlNASSnapshotPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("once", 1), ("daily", 2), ("weekly", 3), ("monthly", 4), ("hourly", 5))).clone('daily')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyType.setStatus('current')
eqlNASSnapshotPolicyRepeatFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyRepeatFactor.setStatus('current')
eqlNASSnapshotPolicyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStartTime.setStatus('current')
eqlNASSnapshotPolicyEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEndTime.setStatus('current')
eqlNASSnapshotPolicyTimeFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyTimeFrequency.setStatus('current')
eqlNASSnapshotPolicyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('days').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStartDate.setStatus('current')
eqlNASSnapshotPolicyEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setUnits('days').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyEndDate.setStatus('current')
eqlNASSnapshotPolicyWeekMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyWeekMask.setStatus('current')
eqlNASSnapshotPolicyMonthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyMonthMask.setStatus('current')
eqlNASSnapshotPolicyOccurence = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyOccurence.setStatus('current')
eqlNASSnapshotPolicyReplication = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 18), SiteIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyReplication.setStatus('current')
eqlNASSnapshotPolicyAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyAdminStatus.setStatus('current')
eqlNASSnapshotPolicyCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snapshot-replication-policy", 0), ("optimization-policy", 1), ("optimization-default-policy", 2))).clone('snapshot-replication-policy')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyCategory.setStatus('current')
eqlNASSnapshotPolicyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 5), )
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusTable.setStatus('current')
eqlNASSnapshotPolicyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 5, 1), )
eqlNASSnapshotPolicyEntry.registerAugmentions(("EQLNAS-MIB", "eqlNASSnapshotPolicyStatusEntry"))
eqlNASSnapshotPolicyStatusEntry.setIndexNames(*eqlNASSnapshotPolicyEntry.getIndexNames())
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusEntry.setStatus('current')
eqlNASSnapshotPolicyStatusNextCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusNextCreate.setStatus('current')
eqlNASSnapshotPolicyStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("expired", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASSnapshotPolicyStatusOperStatus.setStatus('current')
eqlNASQuotaTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6), )
if mibBuilder.loadTexts: eqlNASQuotaTable.setStatus('current')
eqlNASQuotaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASQuotaTargetType"), (0, "EQLNAS-MIB", "eqlNASQuotaTargetName"))
if mibBuilder.loadTexts: eqlNASQuotaEntry.setStatus('current')
eqlNASQuotaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaRowStatus.setStatus('current')
eqlNASQuotaTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unused", 0), ("allofgroup", 1), ("anyuseringroup", 2), ("user", 3), ("defaultuser", 4), ("defaultgroup", 5), ("allquotas", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaTargetType.setStatus('current')
eqlNASQuotaTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaTargetName.setStatus('current')
eqlNASQuotaWarnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaWarnLimit.setStatus('current')
eqlNASQuotaHardLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 5), Unsigned32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASQuotaHardLimit.setStatus('current')
eqlNASQuotaUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsage.setStatus('current')
eqlNASReplSiteTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10), )
if mibBuilder.loadTexts: eqlNASReplSiteTable.setStatus('current')
eqlNASReplSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASReplSitePartnershipId"))
if mibBuilder.loadTexts: eqlNASReplSiteEntry.setStatus('current')
eqlNASReplSitePartnershipId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplSitePartnershipId.setStatus('current')
eqlNASReplSiteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplSiteRowStatus.setStatus('current')
eqlNASReplSiteVolumeReplSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 3), SiteIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplSiteVolumeReplSiteIndex.setStatus('current')
eqlNASReplSiteLocalClusterInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplSiteLocalClusterInetAddrType.setStatus('current')
eqlNASReplSiteLocalClusterInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplSiteLocalClusterInetAddr.setStatus('current')
eqlNASReplSiteRemoteClusterInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterInetAddrType.setStatus('current')
eqlNASReplSiteRemoteClusterInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterInetAddr.setStatus('current')
eqlNASReplSitePartnershipState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("configured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSitePartnershipState.setStatus('current')
eqlNASReplSiteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteUserName.setStatus('current')
eqlNASReplSitePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: eqlNASReplSitePassword.setStatus('current')
eqlNASReplSiteRemoteClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterName.setStatus('current')
eqlNASReplSiteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("configure", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteAction.setStatus('current')
eqlNASReplSiteRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: eqlNASReplSiteRemoteUserName.setStatus('current')
eqlNASReplSiteRemotePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: eqlNASReplSiteRemotePassword.setStatus('current')
eqlNASReplSiteRemoteClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 15), ClusterIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterId.setStatus('current')
eqlNASReplSiteRemoteClusterMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteClusterMPV.setStatus('current')
eqlNASReplSiteRemoteNetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 17), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkAddrType.setStatus('current')
eqlNASReplSiteRemoteNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 18), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkAddr.setStatus('current')
eqlNASReplSiteRemoteNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 10, 1, 19), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplSiteRemoteNetworkMask.setStatus('current')
eqlNASReplicationTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11), )
if mibBuilder.loadTexts: eqlNASReplicationTable.setStatus('current')
eqlNASReplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplSitePartnershipId"), (0, "EQLNAS-MIB", "eqlNASReplicationId"))
if mibBuilder.loadTexts: eqlNASReplicationEntry.setStatus('current')
class EqlNASReplicationStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("unknown", 0), ("idle", 1), ("active", 2), ("waitingretry", 3), ("failed", 4), ("paused", 5), ("cancelled", 6), ("resuming", 7), ("deleting", 8), ("pausing", 9), ("finished", 10), ("cancelling", 11), ("promoted", 12), ("promoting", 13), ("idlewaittoschedule", 14), ("demoting", 15))

eqlNASReplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationId.setStatus('current')
eqlNASReplicationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationRowStatus.setStatus('current')
eqlNASReplicationLastRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationLastRecoveryTime.setStatus('current')
eqlNASReplicationNextRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationNextRecoveryTime.setStatus('current')
eqlNASReplicationSourceClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationSourceClusterName.setStatus('current')
eqlNASReplicationSourceFSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationSourceFSId.setStatus('current')
eqlNASReplicationSourceFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationSourceFSName.setStatus('current')
eqlNASReplicationDestClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationDestClusterName.setStatus('current')
eqlNASReplicationDestFSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationDestFSId.setStatus('current')
eqlNASReplicationDestFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationDestFSName.setStatus('current')
eqlNASReplicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 11), EqlNASReplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationStatus.setStatus('current')
eqlNASReplicationMinToComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationMinToComplete.setStatus('current')
eqlNASReplicationTransferredPer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 13), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationTransferredPer.setStatus('current')
eqlNASReplicationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109))).clone(namedValues=NamedValues(("none", 0), ("replicate", 1), ("pause", 2), ("resume", 3), ("cancel", 4), ("demote", 5), ("promote", 6), ("force-promote", 7), ("delete", 8), ("force-delete", 9), ("outbound-delete", 100), ("outbound-force-delete", 101), ("inbound-delete", 102), ("inbound-promote", 103), ("inbound-promote-restore-cfg", 104), ("inbound-promote-keep-demote", 105), ("inbound-promote-keep-demote-restore-cfg", 106), ("inbound-delete-failback", 107), ("inbound-delete-failback-restore-cfg", 108), ("restore-cfg", 109)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplicationAction.setStatus('current')
eqlNASReplPartnerInfoMapTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12), )
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapTable.setStatus('current')
eqlNASReplPartnerInfoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeReplSiteIndex"))
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapEntry.setStatus('current')
eqlNASReplPartnerInfoMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapRowStatus.setStatus('current')
eqlNASReplPartnerInfoMapClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterName.setStatus('current')
eqlNASReplPartnerInfoMapClusterSanVIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterSanVIPType.setStatus('current')
eqlNASReplPartnerInfoMapClusterSanVIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterSanVIP.setStatus('current')
eqlNASReplPartnerInfoMapClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 5), ClusterIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterId.setStatus('current')
eqlNASReplPartnerInfoMapClusterMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapClusterMPV.setStatus('current')
eqlNASReplPartnerInfoMapNetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkAddrType.setStatus('current')
eqlNASReplPartnerInfoMapNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkAddr.setStatus('current')
eqlNASReplPartnerInfoMapNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 12, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerInfoMapNetworkMask.setStatus('current')
eqlNASReplPartnerIdMapTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 13), )
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapTable.setStatus('current')
eqlNASReplPartnerIdMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 13, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASReplPartnerInfoMapClusterName"))
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapEntry.setStatus('current')
eqlNASReplPartnerIdMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapRowStatus.setStatus('current')
eqlNASReplPartnerIdMapPartnershipId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerIdMapPartnershipId.setStatus('current')
eqlNASContainerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14), )
if mibBuilder.loadTexts: eqlNASContainerCfgTable.setStatus('current')
eqlNASContainerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASContainerCfgIndex"))
if mibBuilder.loadTexts: eqlNASContainerCfgEntry.setStatus('current')
eqlNASContainerCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASContainerCfgIndex.setStatus('current')
eqlNASContainerCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASContainerCfgRowStatus.setStatus('current')
eqlNASContainerCfgSourceClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASContainerCfgSourceClusterName.setStatus('current')
eqlNASContainerCfgSourceFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASContainerCfgSourceFSName.setStatus('current')
eqlNASContainerCfgModules = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 5), Bits().clone(namedValues=NamedValues(("nfsExport", 0), ("cifsShare", 1), ("quotaRule", 2), ("snapshotScheduler", 3), ("volumeParameters", 4), ("volumeName", 5), ("volumeSize", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASContainerCfgModules.setStatus('current')
eqlNASContainerCfgRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASContainerCfgRequestId.setStatus('current')
eqlNASFSScanTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 15), )
if mibBuilder.loadTexts: eqlNASFSScanTable.setStatus('current')
eqlNASFSScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 15, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASFSScanEntry.setStatus('current')
eqlNASFSScanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("maintenance", 1), ("off", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASFSScanRate.setStatus('current')
eqlNASReplicationHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16), )
if mibBuilder.loadTexts: eqlNASReplicationHistoryTable.setStatus('current')
eqlNASReplicationHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplSitePartnershipId"), (0, "EQLNAS-MIB", "eqlNASReplicationId"), (0, "EQLNAS-MIB", "eqlNASReplicationHistorySampleIndex"))
if mibBuilder.loadTexts: eqlNASReplicationHistoryEntry.setStatus('current')
eqlNASReplicationHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistorySampleIndex.setStatus('current')
eqlNASReplicationHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryStartTime.setStatus('current')
eqlNASReplicationHistoryEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryEndTime.setStatus('current')
eqlNASReplicationHistoryTransferredMb = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryTransferredMb.setStatus('current')
eqlNASReplicationHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 5), EqlNASReplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryStatus.setStatus('current')
eqlNASReplicationHistorySrcContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistorySrcContainer.setStatus('current')
eqlNASReplicationHistoryDestContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 16, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplicationHistoryDestContainer.setStatus('current')
eqlNASApplianceAntivirusHostTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17), )
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostTable.setStatus('current')
eqlNASApplianceAntivirusHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASApplianceAntivirusHostIndex"))
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostEntry.setStatus('current')
eqlNASApplianceAntivirusHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostIndex.setStatus('current')
eqlNASApplianceAntivirusHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostRowStatus.setStatus('current')
eqlNASApplianceAntivirusHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostName.setStatus('current')
eqlNASApplianceAntivirusHostPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1344)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostPortNumber.setStatus('current')
eqlNASApplianceAntivirusHostTransactionState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("configStart", 0), ("configInProgress", 1), ("configCommit", 2), ("configStartCommit", 3))).clone('configStart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASApplianceAntivirusHostTransactionState.setStatus('current')
eqlNASChassisTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18), )
if mibBuilder.loadTexts: eqlNASChassisTable.setStatus('current')
eqlNASChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisIndex"))
if mibBuilder.loadTexts: eqlNASChassisEntry.setStatus('current')
eqlNASChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASChassisIndex.setStatus('current')
eqlNASChassisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASChassisRowStatus.setStatus('current')
eqlNASChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASChassisName.setStatus('current')
eqlNASChassisRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisRequestId.setStatus('current')
eqlNASChassisFileSystemMember = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFileSystemMember.setStatus('current')
eqlNASChassisModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 18, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASChassisModelName.setStatus('current')
eqlNASChassisStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19), )
if mibBuilder.loadTexts: eqlNASChassisStatusTable.setStatus('current')
eqlNASChassisStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisIndex"))
if mibBuilder.loadTexts: eqlNASChassisStatusEntry.setStatus('current')
class EqlNASChassisComponentStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("optimal", 0), ("not-optimal", 1), ("critical", 2), ("not-available", 3))

class EqlNASChassisACPowerStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("redundant", 0), ("partial", 1), ("not-available", 2))

class EqlNASChassisControllerState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("standby", 0), ("unformatted", 1), ("formatted", 2), ("detached", 3), ("down", 4), ("not-available", 5))

class EqlNASChassisSanType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("iscsi", 0), ("eql", 1), ("fc", 2), ("not-available", 3))

class EqlNASChassisNetworkSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("one-gb-ethernet", 0), ("ten-gb-ethernet", 1), ("twenty-gb-ethernet", 2), ("one-gb-fibre-channel", 3), ("two-gb-fibre-channel", 4), ("four-gb-fibre-channel", 5), ("eight-gb-fibre-channel", 6), ("not-available", 7))

class EqlNASChassisControllerLocation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("one", 0), ("two", 1), ("irrelevant", 2), ("not-available", 3))

eqlNASChassisOverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 1), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisOverallStatus.setStatus('current')
eqlNASChassisChassisTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisChassisTag.setStatus('current')
eqlNASChassisModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisModel.setStatus('current')
eqlNASChassisSanType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 4), EqlNASChassisSanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisSanType.setStatus('current')
eqlNASChassisOverallControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 5), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisOverallControllerStatus.setStatus('current')
eqlNASChassisClientNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 6), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisClientNetworkSpeed.setStatus('current')
eqlNASChassisBackplaneNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 7), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisBackplaneNetworkSpeed.setStatus('current')
eqlNASChassisInternalNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 8), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisInternalNetworkSpeed.setStatus('current')
eqlNASChassisSanNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 9), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisSanNetworkSpeed.setStatus('current')
eqlNASChassisClientNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 10), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisClientNetworkStatus.setStatus('current')
eqlNASChassisBackplaneNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 11), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisBackplaneNetworkStatus.setStatus('current')
eqlNASChassisInternalNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 12), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisInternalNetworkStatus.setStatus('current')
eqlNASChassisSanNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 13), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisSanNetworkStatus.setStatus('current')
eqlNASChassisOverallFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 14), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisOverallFanStatus.setStatus('current')
eqlNASChassisOverallPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 1, 15), EqlNASChassisACPowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisOverallPowerSupplyStatus.setStatus('current')
eqlNASChassisFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2), )
if mibBuilder.loadTexts: eqlNASChassisFanStatusTable.setStatus('current')
eqlNASChassisFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisIndex"), (0, "EQLNAS-MIB", "eqlNASChassisFanName"))
if mibBuilder.loadTexts: eqlNASChassisFanStatusEntry.setStatus('current')
eqlNASChassisFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFanName.setStatus('current')
eqlNASChassisFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFanStatus.setStatus('current')
eqlNASChassisFanRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFanRpm.setStatus('current')
eqlNASChassisFanRpmRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisFanRpmRange.setStatus('current')
eqlNASChassisPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 3), )
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatusTable.setStatus('current')
eqlNASChassisPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisIndex"), (0, "EQLNAS-MIB", "eqlNASChassisPowerSupplyName"))
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatusEntry.setStatus('current')
eqlNASChassisPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyName.setStatus('current')
eqlNASChassisPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 19, 3, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisPowerSupplyStatus.setStatus('current')
eqlNASChassisControllerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20), )
if mibBuilder.loadTexts: eqlNASChassisControllerStatusTable.setStatus('current')
eqlNASChassisControllerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"))
if mibBuilder.loadTexts: eqlNASChassisControllerStatusEntry.setStatus('current')
eqlNASChassisControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerIndex.setStatus('current')
eqlNASChassisControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerStatus.setStatus('current')
eqlNASChassisControllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 3), EqlNASChassisControllerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerState.setStatus('current')
eqlNASChassisControllerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 4), EqlNASChassisControllerLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerLocation.setStatus('current')
eqlNASChassisControllerAmbientTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 5), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerAmbientTemperatureStatus.setStatus('current')
eqlNASChassisControllerAmbientTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerAmbientTemperatureValue.setStatus('current')
eqlNASChassisControllerSystemControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerSystemControllerId.setStatus('current')
eqlNASChassisControllerBPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 8), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBPSStatus.setStatus('current')
eqlNASChassisControllerBPSIsAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBPSIsAccessible.setStatus('current')
eqlNASChassisControllerBPSModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBPSModel.setStatus('current')
eqlNASChassisControllerBPSCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 11), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBPSCharge.setStatus('current')
eqlNASChassisControllerCPUOverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 12), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerCPUOverallStatus.setStatus('current')
eqlNASChassisControllerCPUCurrentCoresCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerCPUCurrentCoresCount.setStatus('current')
eqlNASChassisControllerOverallFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 14), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallFanStatus.setStatus('current')
eqlNASChassisControllerOverallLocalDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 15), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallLocalDiskStatus.setStatus('current')
eqlNASChassisControllerOverallRaidControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 16), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallRaidControllerStatus.setStatus('current')
eqlNASChassisControllerOverallVirtualDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 17), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallVirtualDiskStatus.setStatus('current')
eqlNASChassisControllerMemoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 18), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerMemoryStatus.setStatus('current')
eqlNASChassisControllerMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerMemorySize.setStatus('current')
eqlNASChassisControllerBackplaneNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 20), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBackplaneNetworkStatus.setStatus('current')
eqlNASChassisControllerBackplaneNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 21), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerBackplaneNetworkSpeed.setStatus('current')
eqlNASChassisControllerClientNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 22), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerClientNetworkStatus.setStatus('current')
eqlNASChassisControllerClientNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 23), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerClientNetworkSpeed.setStatus('current')
eqlNASChassisControllerInternalNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 24), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerInternalNetworkStatus.setStatus('current')
eqlNASChassisControllerInternalNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 25), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerInternalNetworkSpeed.setStatus('current')
eqlNASChassisControllerSanNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 26), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerSanNetworkStatus.setStatus('current')
eqlNASChassisControllerSanNetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 27), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerSanNetworkSpeed.setStatus('current')
eqlNASChassisControllerOverallPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 1, 28), EqlNASChassisACPowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerOverallPowerSupplyStatus.setStatus('current')
eqlNASChassisControllerFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2), )
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatusTable.setStatus('current')
eqlNASChassisControllerFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerFanName"))
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatusEntry.setStatus('current')
eqlNASChassisControllerFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerFanName.setStatus('current')
eqlNASChassisControllerFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerFanStatus.setStatus('current')
eqlNASChassisControllerFanRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerFanRpm.setStatus('current')
eqlNASChassisControllerFanRpmRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerFanRpmRange.setStatus('current')
eqlNASChassisControllerPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 3), )
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatusTable.setStatus('current')
eqlNASChassisControllerPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 3, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerPowerSupplyName"))
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatusEntry.setStatus('current')
eqlNASChassisControllerPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyName.setStatus('current')
eqlNASChassisControllerPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 3, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerPowerSupplyStatus.setStatus('current')
eqlNASChassisControllerDiskStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 4), )
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatusTable.setStatus('current')
eqlNASChassisControllerDiskStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 4, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerDiskName"))
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatusEntry.setStatus('current')
eqlNASChassisControllerDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerDiskName.setStatus('current')
eqlNASChassisControllerDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 4, 1, 2), EqlNASChassisComponentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerDiskStatus.setStatus('current')
eqlNASChassisControllerNicStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5), )
if mibBuilder.loadTexts: eqlNASChassisControllerNicStatusTable.setStatus('current')
eqlNASChassisControllerNicStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASChassisControllerIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkType"), (0, "EQLNAS-MIB", "eqlNASChassisControllerNicName"))
if mibBuilder.loadTexts: eqlNASChassisControllerNicStatusEntry.setStatus('current')
eqlNASChassisControllerNicName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicName.setStatus('current')
eqlNASChassisControllerNicState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("not-available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicState.setStatus('current')
eqlNASChassisControllerNicSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 3), EqlNASChassisNetworkSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicSpeed.setStatus('current')
eqlNASChassisControllerNicSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicSlot.setStatus('current')
eqlNASChassisControllerNicPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicPort.setStatus('current')
eqlNASChassisControllerNicDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicDuplex.setStatus('current')
eqlNASChassisControllerNicFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 20, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASChassisControllerNicFlowControl.setStatus('current')
eqlNASDiagsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21), )
if mibBuilder.loadTexts: eqlNASDiagsTable.setStatus('current')
eqlNASDiagsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASDiagsEntry.setStatus('current')
eqlNASDiagsStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("general", 1), ("file", 2), ("network", 3), ("performance", 4), ("clientconnectivity", 5), ("fileaccessibility", 6), ("protocolslog", 7), ("logs", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASDiagsStart.setStatus('current')
eqlNASDiagsCaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASDiagsCaseNumber.setStatus('current')
eqlNASDiagsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASDiagsStatus.setStatus('current')
eqlNASClientStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22), )
if mibBuilder.loadTexts: eqlNASClientStaticRouteTable.setStatus('current')
eqlNASClientStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkID"), (0, "EQLNAS-MIB", "eqlNASClientStaticRouteNetworkAddrType"), (0, "EQLNAS-MIB", "eqlNASClientStaticRouteNetworkAddr"), (0, "EQLNAS-MIB", "eqlNASClientStaticRouteNetworkMaskType"), (0, "EQLNAS-MIB", "eqlNASClientStaticRouteNetworkMask"))
if mibBuilder.loadTexts: eqlNASClientStaticRouteEntry.setStatus('current')
eqlNASClientStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteRowStatus.setStatus('current')
eqlNASClientStaticRouteNetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkAddrType.setStatus('current')
eqlNASClientStaticRouteNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkAddr.setStatus('current')
eqlNASClientStaticRouteNetworkMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkMaskType.setStatus('current')
eqlNASClientStaticRouteNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteNetworkMask.setStatus('current')
eqlNASClientStaticRouteGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteGatewayAddrType.setStatus('current')
eqlNASClientStaticRouteGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 22, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClientStaticRouteGatewayAddr.setStatus('current')
eqlNASClusterUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23), )
if mibBuilder.loadTexts: eqlNASClusterUpdateTable.setStatus('current')
eqlNASClusterUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASClusterUpdateEntry.setStatus('current')
eqlNASClusterUpdateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateRowStatus.setStatus('current')
eqlNASClusterUpdateFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 261))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateFilename.setStatus('current')
eqlNASClusterUpdateEQLGroupMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateEQLGroupMPV.setStatus('current')
eqlNASClusterUpdateClusterMPV = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateClusterMPV.setStatus('current')
eqlNASClusterUpdateEQLGroupCurrentCompLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateEQLGroupCurrentCompLevel.setStatus('current')
eqlNASClusterUpdateRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 23, 1, 6), Counter64()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterUpdateRequestId.setStatus('current')
eqlNASClusterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24), )
if mibBuilder.loadTexts: eqlNASClusterInfoTable.setStatus('current')
eqlNASClusterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASClusterInfoSiteType"), (0, "EQLVOLUME-MIB", "eqliscsiVolumeReplSiteIndex"), (0, "EQLNAS-MIB", "eqlNASClusterInfoSegmentId"))
if mibBuilder.loadTexts: eqlNASClusterInfoEntry.setStatus('current')
eqlNASClusterInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASClusterInfoRowStatus.setStatus('current')
eqlNASClusterInfoSiteType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))))
if mibBuilder.loadTexts: eqlNASClusterInfoSiteType.setStatus('current')
eqlNASClusterInfoSegmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 3), Unsigned32())
if mibBuilder.loadTexts: eqlNASClusterInfoSegmentId.setStatus('current')
eqlNASClusterInfoSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClusterInfoSegmentSize.setStatus('current')
eqlNASClusterInfoMoreSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClusterInfoMoreSegment.setStatus('current')
eqlNASClusterInfoCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 6), CertificateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClusterInfoCertificate.setStatus('current')
eqlNASClusterInfoClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 24, 1, 7), ClusterIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClusterInfoClusterId.setStatus('current')
eqlNASReplPartnerClusterIdMapTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25), )
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapTable.setStatus('current')
eqlNASReplPartnerClusterIdMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASReplPartnerClusterIdMapSanVIPType"), (0, "EQLNAS-MIB", "eqlNASReplPartnerClusterIdMapSanVIP"))
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapEntry.setStatus('current')
eqlNASReplPartnerClusterIdMapSanVIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25, 1, 1), InetAddressType())
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapSanVIPType.setStatus('current')
eqlNASReplPartnerClusterIdMapSanVIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25, 1, 2), InetAddress())
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapSanVIP.setStatus('current')
eqlNASReplPartnerClusterIdMapClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 25, 1, 3), ClusterIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerClusterIdMapClusterId.setStatus('current')
eqlNASReplPartnerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26), )
if mibBuilder.loadTexts: eqlNASReplPartnerConfigTable.setStatus('current')
eqlNASReplPartnerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASClusterInfoClusterId"), (0, "EQLNAS-MIB", "eqlNASClusterInfoSegmentId"))
if mibBuilder.loadTexts: eqlNASReplPartnerConfigEntry.setStatus('current')
eqlNASReplPartnerConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplPartnerConfigRowStatus.setStatus('current')
eqlNASReplPartnerConfigCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1, 2), CertificateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplPartnerConfigCertificate.setStatus('current')
eqlNASReplPartnerConfigInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplPartnerConfigInetAddrType.setStatus('current')
eqlNASReplPartnerConfigInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 26, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASReplPartnerConfigInetAddr.setStatus('current')
eqlNASReplTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27), )
if mibBuilder.loadTexts: eqlNASReplTable.setStatus('current')
class EqlNASReplicationError(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("none", 0), ("disconnected", 1), ("internal", 2), ("fs-down", 3), ("config", 4), ("not-sec", 5), ("sec-busy", 6), ("sec-fs-down", 7), ("versions-dont-match", 8), ("no-space", 9), ("sec-cur-not-empty", 10), ("no-base-found", 11), ("pri-vol-reclaim", 12), ("sec-vol-reclaim", 13), ("fs-pri-not-optimal", 14), ("fs-sec-not-optimal", 15), ("fs-pri-not-available-threads", 16), ("fs-sec-not-available-threads", 17), ("jumbo-frame", 18), ("dest-repl-disabled", 19), ("snap-clone-base", 20))

class EqlNASReplicationRole(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("source", 1), ("destination", 2))

eqlNASReplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplSiteRemoteClusterId"), (0, "EQLNAS-MIB", "eqlNASReplRemoteFSId"))
if mibBuilder.loadTexts: eqlNASReplEntry.setStatus('current')
eqlNASReplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplRowStatus.setStatus('current')
eqlNASReplRemoteFSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplRemoteFSId.setStatus('current')
eqlNASReplVolumeReplSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 3), SiteIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplVolumeReplSiteIndex.setStatus('current')
eqlNASReplRemoteClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplRemoteClusterName.setStatus('current')
eqlNASReplRemoteFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplRemoteFSName.setStatus('current')
eqlNASReplAchievedRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplAchievedRecoveryTime.setStatus('current')
eqlNASReplNextRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplNextRecoveryTime.setStatus('current')
eqlNASReplTargetRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplTargetRecoveryTime.setStatus('current')
eqlNASReplTransferredPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 9), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplTransferredPercent.setStatus('current')
eqlNASReplTransferredMB = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplTransferredMB.setStatus('current')
eqlNASReplStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 11), EqlNASReplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplStatus.setStatus('current')
eqlNASReplAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112))).clone(namedValues=NamedValues(("none", 0), ("replicate", 1), ("pause", 2), ("resume", 3), ("cancel", 4), ("demote", 5), ("promote", 6), ("force-promote", 7), ("delete", 8), ("force-delete", 9), ("outbound-delete", 100), ("outbound-force-delete", 101), ("inbound-delete", 102), ("inbound-promote", 103), ("inbound-promote-restore-cfg", 104), ("inbound-promote-keep-demote", 105), ("inbound-promote-keep-demote-restore-cfg", 106), ("inbound-delete-failback", 107), ("inbound-delete-failback-restore-cfg", 108), ("restore-cfg", 109), ("inbound-pause", 110), ("inbound-resume", 111), ("internal-promote", 112)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASReplAction.setStatus('current')
eqlNASReplSecsToComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplSecsToComplete.setStatus('current')
eqlNASReplError = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 14), EqlNASReplicationError()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplError.setStatus('current')
eqlNASReplRole = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 15), EqlNASReplicationRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplRole.setStatus('current')
eqlNASReplCurrentXferRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 27, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplCurrentXferRateKbps.setStatus('current')
eqlNASQuotaUsageTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7), )
if mibBuilder.loadTexts: eqlNASQuotaUsageTable.setStatus('current')
eqlNASQuotaUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASQuotaUsageTargetType"), (0, "EQLNAS-MIB", "eqlNASQuotaUsageTargetName"))
if mibBuilder.loadTexts: eqlNASQuotaUsageEntry.setStatus('current')
eqlNASQuotaUsageRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsageRowStatus.setStatus('current')
eqlNASQuotaUsageTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unused", 0), ("allofgroup", 1), ("anyuseringroup", 2), ("user", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsageTargetType.setStatus('current')
eqlNASQuotaUsageTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsageTargetName.setStatus('current')
eqlNASQuotaUsageMB = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASQuotaUsageMB.setStatus('current')
eqlNASGroupQuotaEffectiveRuleTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8), )
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleTable.setStatus('current')
eqlNASGroupQuotaEffectiveRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASGroupQuotaEffectiveRuleTargetName"))
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleEntry.setStatus('current')
eqlNASGroupQuotaEffectiveRuleTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleTargetName.setStatus('current')
eqlNASGroupQuotaEffectiveRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleRowStatus.setStatus('current')
eqlNASGroupQuotaEffectiveRuleSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleSoftLimit.setStatus('current')
eqlNASGroupQuotaEffectiveRuleHardLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleHardLimit.setStatus('current')
eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled.setStatus('current')
eqlNASGroupQuotaEffectiveRuleHardLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 8, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASGroupQuotaEffectiveRuleHardLimitEnabled.setStatus('current')
eqlNASUserQuotaEffectiveRuleTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9), )
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleTable.setStatus('current')
eqlNASUserQuotaEffectiveRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASUserQuotaEffectiveRuleTargetName"))
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleEntry.setStatus('current')
eqlNASUserQuotaEffectiveRuleTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleTargetName.setStatus('current')
eqlNASUserQuotaEffectiveRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleRowStatus.setStatus('current')
eqlNASUserQuotaEffectiveRuleUserSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserSoftLimit.setStatus('current')
eqlNASUserQuotaEffectiveRuleUserHardLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserHardLimit.setStatus('current')
eqlNASUserQuotaEffectiveRuleGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupName.setStatus('current')
eqlNASUserQuotaEffectiveRuleGroupSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupSoftLimit.setStatus('current')
eqlNASUserQuotaEffectiveRuleGroupHardLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupHardLimit.setStatus('current')
eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled.setStatus('current')
eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled.setStatus('current')
eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled.setStatus('current')
eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 3, 9, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled.setStatus('current')
eqlNASConfigStateTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 28), )
if mibBuilder.loadTexts: eqlNASConfigStateTable.setStatus('current')
eqlNASConfigStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 28, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASConfigStateEntry.setStatus('current')
eqlNASConfigStateConfigFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 28, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASConfigStateConfigFinished.setStatus('current')
eqlNASConfigStateHardwareReplaceInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 28, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASConfigStateHardwareReplaceInProgress.setStatus('current')
eqlNASClientTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29), )
if mibBuilder.loadTexts: eqlNASClientTable.setStatus('current')
eqlNASClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASClientNodeIndex"), (0, "EQLNAS-MIB", "eqlNASClientIPAddressType"), (0, "EQLNAS-MIB", "eqlNASClientIPAddress"), (0, "EQLNAS-MIB", "eqlNASClientUserName"), (0, "EQLNAS-MIB", "eqlNASClientProtocol"))
if mibBuilder.loadTexts: eqlNASClientEntry.setStatus('current')
eqlNASClientNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientNodeIndex.setStatus('current')
eqlNASClientIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientIPAddressType.setStatus('current')
eqlNASClientIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientIPAddress.setStatus('current')
eqlNASClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientUserName.setStatus('current')
eqlNASClientProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cifs", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientProtocol.setStatus('current')
eqlNASClientConnectedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientConnectedTime.setStatus('current')
eqlNASClientIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientIdleTime.setStatus('current')
eqlNASClientNumOpenFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientNumOpenFiles.setStatus('current')
eqlNASClientIsGuest = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 29, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASClientIsGuest.setStatus('current')
eqlNASStatsClusterTrafficRateTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30), )
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTable.setStatus('current')
eqlNASStatsClusterTrafficRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"))
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateEntry.setStatus('current')
eqlNASStatsClusterTrafficRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTimestamp.setStatus('current')
eqlNASStatsClusterTrafficRateNfsReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsReadMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateCifsReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsReadMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateNfsIOPSRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSRead.setStatus('current')
eqlNASStatsClusterTrafficRateNfsIOPSWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSWrite.setStatus('current')
eqlNASStatsClusterTrafficRateNfsIOPSOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateNfsIOPSOther.setStatus('current')
eqlNASStatsClusterTrafficRateCifsIOPSRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSRead.setStatus('current')
eqlNASStatsClusterTrafficRateCifsIOPSWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSWrite.setStatus('current')
eqlNASStatsClusterTrafficRateCifsIOPSOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateCifsIOPSOther.setStatus('current')
eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec.setStatus('current')
eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 30, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31), )
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTable.setStatus('current')
eqlNASStatsControllerTrafficRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASStatsControllerTrafficRateIndex"))
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateEntry.setStatus('current')
eqlNASStatsControllerTrafficRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateIndex.setStatus('current')
eqlNASStatsControllerTrafficRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTimestamp.setStatus('current')
eqlNASStatsControllerTrafficRateNfsReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsReadMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateCifsReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsReadMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateNfsIOPSRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSRead.setStatus('current')
eqlNASStatsControllerTrafficRateNfsIOPSWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSWrite.setStatus('current')
eqlNASStatsControllerTrafficRateNfsIOPSOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateNfsIOPSOther.setStatus('current')
eqlNASStatsControllerTrafficRateCifsIOPSRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSRead.setStatus('current')
eqlNASStatsControllerTrafficRateCifsIOPSWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSWrite.setStatus('current')
eqlNASStatsControllerTrafficRateCifsIOPSOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateCifsIOPSOther.setStatus('current')
eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec.setStatus('current')
eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage.setStatus('current')
eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec.setStatus('current')
eqlNASStatsControllerLoadBalancingTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2), )
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingTable.setStatus('current')
eqlNASStatsControllerLoadBalancingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASStatsControllerLoadBalancingIndex"))
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingEntry.setStatus('current')
eqlNASStatsControllerLoadBalancingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingIndex.setStatus('current')
eqlNASStatsControllerLoadBalancingTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerLoadBalancingTimestamp.setStatus('current')
eqlNASStatsControllerCPULoadPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1, 3), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerCPULoadPercent.setStatus('current')
eqlNASStatsControllerTotalCifsConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 31, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASStatsControllerTotalCifsConnections.setStatus('current')
eqlNASCacheInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40), )
if mibBuilder.loadTexts: eqlNASCacheInfoTable.setStatus('current')
eqlNASCacheInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASCacheInfoIndex"))
if mibBuilder.loadTexts: eqlNASCacheInfoEntry.setStatus('current')
eqlNASCacheInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASCacheInfoIndex.setStatus('current')
eqlNASCacheInfoCacheObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectName.setStatus('current')
eqlNASCacheInfoCacheObjectExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectExpiryTime.setStatus('current')
eqlNASCacheInfoCacheObjectState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASCacheInfoCacheObjectState.setStatus('current')
eqlNASCacheInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("refresh-all", 1), ("refresh", 2), ("restart-agent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASCacheInfoAction.setStatus('current')
eqlNASReplHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41), )
if mibBuilder.loadTexts: eqlNASReplHistoryTable.setStatus('current')
eqlNASReplHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplHistoryUniqueId"))
if mibBuilder.loadTexts: eqlNASReplHistoryEntry.setStatus('current')
eqlNASReplHistoryUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryUniqueId.setStatus('current')
eqlNASReplHistoryEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryEventTime.setStatus('current')
eqlNASReplHistorySourceContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 3), NASContainerNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistorySourceContainerName.setStatus('current')
eqlNASReplHistorySourceClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 4), ClusterNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistorySourceClusterName.setStatus('current')
eqlNASReplHistoryDestContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 5), NASContainerNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryDestContainerName.setStatus('current')
eqlNASReplHistoryDestClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 6), ClusterNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryDestClusterName.setStatus('current')
eqlNASReplHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryStartTime.setStatus('current')
eqlNASReplHistoryEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryEndTime.setStatus('current')
eqlNASReplHistoryTransferredMb = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryTransferredMb.setStatus('current')
eqlNASReplHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 41, 1, 10), EqlNASReplicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASReplHistoryStatus.setStatus('current')
eqlNASTaskTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42), )
if mibBuilder.loadTexts: eqlNASTaskTable.setStatus('current')
eqlNASTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASTaskIndex"))
if mibBuilder.loadTexts: eqlNASTaskEntry.setStatus('current')
eqlNASTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlNASTaskIndex.setStatus('current')
eqlNASTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskRowStatus.setStatus('current')
eqlNASTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resync", 1), ("failback", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskType.setStatus('current')
eqlNASTaskContext = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContext.setStatus('current')
eqlNASTaskNumSubTasks = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskNumSubTasks.setStatus('current')
eqlNASTaskSubTaskInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 100, 110, 120, 130, 140, 150, 160, 170, 300, 310, 320, 330, 340, 350, 360, 370, 380, 10000))).clone(namedValues=NamedValues(("none", 0), ("resync-primaryContainerPromote", 100), ("resync-primaryContainerReplicationDelete", 110), ("resync-recoveryContainerReplicationConfigure", 120), ("resync-recoveryContainerReplicate", 130), ("resync-recoveryContainerSourcePromote", 140), ("resync-recoveryContainerReplicationDelete", 150), ("resync-primaryContainerReplicationConfigure", 160), ("resync-recoveryContainerPromote", 170), ("failback-primaryContainerPromote", 300), ("failback-primaryContainerReplicationDelete", 310), ("failback-recoveryContainerReplicationConfigure", 320), ("failback-recoveryContainerDisableSchedules", 330), ("failback-recoveryContainerReplicate", 340), ("failback-recoveryContainerFinalReplication", 350), ("failback-recoveryContainerPromote", 360), ("failback-recoveryContainerReplicationDelete", 370), ("failback-primaryContainerReplicationConfigure", 380), ("complete", 10000)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskSubTaskInProgress.setStatus('current')
eqlNASTaskSubtaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskSubtaskStatus.setStatus('current')
eqlNASTaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user-action-required", 1), ("in-progress", 2), ("complete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskStatus.setStatus('current')
eqlNASTaskUserAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("retry", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskUserAction.setStatus('current')
eqlNASTaskStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 42, 1, 10), Counter32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskStartTime.setStatus('current')
eqlNASTaskContainerReplInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43), )
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoTable.setStatus('current')
eqlNASTaskContainerReplInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"), (0, "EQLNAS-MIB", "eqlNASReplSiteRemoteClusterId"), (0, "EQLNAS-MIB", "eqlNASTaskContainerReplInfoRemoteFSId"))
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoEntry.setStatus('current')
eqlNASTaskContainerReplInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRowStatus.setStatus('current')
eqlNASTaskContainerReplInfoRemoteFSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteFSId.setStatus('current')
eqlNASTaskContainerReplInfoVolumeReplSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 3), SiteIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoVolumeReplSiteIndex.setStatus('current')
eqlNASTaskContainerReplInfoRemoteClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteClusterName.setStatus('current')
eqlNASTaskContainerReplInfoLocalFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoLocalFSName.setStatus('current')
eqlNASTaskContainerReplInfoRemoteFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoRemoteFSName.setStatus('current')
eqlNASTaskContainerReplInfoLocalClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 7), ClusterIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoLocalClusterId.setStatus('current')
eqlNASTaskContainerReplInfoTaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 43, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASTaskContainerReplInfoTaskId.setStatus('current')
eqlNASLostContainerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44), )
if mibBuilder.loadTexts: eqlNASLostContainerTable.setStatus('current')
eqlNASLostContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLNAS-MIB", "eqlNASContainerIndex"))
if mibBuilder.loadTexts: eqlNASLostContainerEntry.setStatus('current')
eqlNASLostContainerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerRowStatus.setStatus('current')
eqlNASLostContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 230))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerName.setStatus('current')
eqlNASLostContainerCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 3), Unsigned32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerCapacity.setStatus('current')
eqlNASLostContainerUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 4), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerUsedSpaceAlert.setStatus('current')
eqlNASLostContainerSnapshotUsedSpaceAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 44, 1, 5), Unsigned32()).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASLostContainerSnapshotUsedSpaceAlert.setStatus('current')
eqlNASSanStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45), )
if mibBuilder.loadTexts: eqlNASSanStaticRouteTable.setStatus('current')
eqlNASSanStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1), ).setIndexNames((0, "EQLAPPLIANCE-MIB", "eqlApplianceIndex"), (0, "EQLAPPLIANCE-MIB", "eqlApplianceNetworkID"), (0, "EQLNAS-MIB", "eqlNASSanStaticRouteNetworkAddrType"), (0, "EQLNAS-MIB", "eqlNASSanStaticRouteNetworkAddr"), (0, "EQLNAS-MIB", "eqlNASSanStaticRouteNetworkMaskType"), (0, "EQLNAS-MIB", "eqlNASSanStaticRouteNetworkMask"))
if mibBuilder.loadTexts: eqlNASSanStaticRouteEntry.setStatus('current')
eqlNASSanStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteRowStatus.setStatus('current')
eqlNASSanStaticRouteNetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkAddrType.setStatus('current')
eqlNASSanStaticRouteNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkAddr.setStatus('current')
eqlNASSanStaticRouteNetworkMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkMaskType.setStatus('current')
eqlNASSanStaticRouteNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteNetworkMask.setStatus('current')
eqlNASSanStaticRouteGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteGatewayAddrType.setStatus('current')
eqlNASSanStaticRouteGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 18, 1, 45, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlNASSanStaticRouteGatewayAddr.setStatus('current')
mibBuilder.exportSymbols("EQLNAS-MIB", eqlNASSnapshotPolicyStatusNextCreate=eqlNASSnapshotPolicyStatusNextCreate, eqlNASReplPartnerInfoMapNetworkAddr=eqlNASReplPartnerInfoMapNetworkAddr, eqlNASReplPartnerInfoMapClusterSanVIP=eqlNASReplPartnerInfoMapClusterSanVIP, EqlNASChassisControllerLocation=EqlNASChassisControllerLocation, eqlNASContainerDefaultUserQuotaAlert=eqlNASContainerDefaultUserQuotaAlert, eqlNASReplSitePartnershipState=eqlNASReplSitePartnershipState, eqlNASReplicationSourceFSName=eqlNASReplicationSourceFSName, eqlNASContainerStatusOptimizationSpaceSavings=eqlNASContainerStatusOptimizationSpaceSavings, eqlNASApplianceConfigSnapSpaceAlert=eqlNASApplianceConfigSnapSpaceAlert, eqlNASReplSiteRemoteClusterMPV=eqlNASReplSiteRemoteClusterMPV, eqlNASSnapshotPolicyIdx=eqlNASSnapshotPolicyIdx, eqlNASReplPartnerInfoMapTable=eqlNASReplPartnerInfoMapTable, eqlNASDiagsEntry=eqlNASDiagsEntry, eqlNASUserQuotaEffectiveRuleGroupHardLimit=eqlNASUserQuotaEffectiveRuleGroupHardLimit, eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled=eqlNASUserQuotaEffectiveRuleUserHardLimitEnabled, eqlNASReplAchievedRecoveryTime=eqlNASReplAchievedRecoveryTime, eqlNASSanStaticRouteEntry=eqlNASSanStaticRouteEntry, eqlNASContainerUniqueIDValueLen=eqlNASContainerUniqueIDValueLen, eqlNASApplianceCIFSAntivirusEnabled=eqlNASApplianceCIFSAntivirusEnabled, eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled=eqlNASUserQuotaEffectiveRuleUserSoftLimitEnabled, eqlNASChassisControllerFanName=eqlNASChassisControllerFanName, eqlNASChassisControllerOverallRaidControllerStatus=eqlNASChassisControllerOverallRaidControllerStatus, eqlNASChassisControllerFanStatusEntry=eqlNASChassisControllerFanStatusEntry, eqlNASApplianceNFSLimitReportedSize=eqlNASApplianceNFSLimitReportedSize, eqlNASSnapshotPolicyEntry=eqlNASSnapshotPolicyEntry, eqlNASApplianceDefaultCfgTable=eqlNASApplianceDefaultCfgTable, eqlNASReplicationDestFSName=eqlNASReplicationDestFSName, eqlNASContainerSnapshotHardQuota=eqlNASContainerSnapshotHardQuota, eqlNASTaskContext=eqlNASTaskContext, eqlNASLostContainerSnapshotUsedSpaceAlert=eqlNASLostContainerSnapshotUsedSpaceAlert, eqlNASSanStaticRouteRowStatus=eqlNASSanStaticRouteRowStatus, eqlNASContainerDefaultUserQuota=eqlNASContainerDefaultUserQuota, eqlNASReplCurrentXferRateKbps=eqlNASReplCurrentXferRateKbps, eqlNASSanStaticRouteNetworkMask=eqlNASSanStaticRouteNetworkMask, eqlNASChassisControllerOverallVirtualDiskStatus=eqlNASChassisControllerOverallVirtualDiskStatus, eqlNASQuotaUsageMB=eqlNASQuotaUsageMB, eqlNASReplSiteRemoteUserName=eqlNASReplSiteRemoteUserName, eqlNASClientStaticRouteGatewayAddrType=eqlNASClientStaticRouteGatewayAddrType, eqlNASApplianceDefaultCIFSAllowGuestAccess=eqlNASApplianceDefaultCIFSAllowGuestAccess, eqlNASApplianceDefaultCIFSLockEnforcement=eqlNASApplianceDefaultCIFSLockEnforcement, eqlNASChassisControllerBPSCharge=eqlNASChassisControllerBPSCharge, eqlNASClusterInfoTable=eqlNASClusterInfoTable, eqlNASTaskStartTime=eqlNASTaskStartTime, eqlNASStatsControllerTrafficRateCifsIOPSWrite=eqlNASStatsControllerTrafficRateCifsIOPSWrite, eqlNASApplianceCIFSAuthenticationMode=eqlNASApplianceCIFSAuthenticationMode, eqlNASApplianceCIFSAntivirusExtensions=eqlNASApplianceCIFSAntivirusExtensions, eqlNASClusterUpdateRequestId=eqlNASClusterUpdateRequestId, eqlNASDiagsTable=eqlNASDiagsTable, eqlNASStatsClusterTrafficRateCifsIOPSRead=eqlNASStatsClusterTrafficRateCifsIOPSRead, eqlNASClientStaticRouteNetworkMask=eqlNASClientStaticRouteNetworkMask, eqlNASChassisClientNetworkSpeed=eqlNASChassisClientNetworkSpeed, eqlNASChassisControllerBPSIsAccessible=eqlNASChassisControllerBPSIsAccessible, eqlNASSnapshotPolicyReplication=eqlNASSnapshotPolicyReplication, eqlNASUserQuotaEffectiveRuleUserHardLimit=eqlNASUserQuotaEffectiveRuleUserHardLimit, eqlNASApplianceCIFSAntivirusExcludeDirPaths=eqlNASApplianceCIFSAntivirusExcludeDirPaths, eqlNASTaskStatus=eqlNASTaskStatus, eqlNASApplianceRowStatus=eqlNASApplianceRowStatus, eqlNASChassisPowerSupplyName=eqlNASChassisPowerSupplyName, eqlNASApplianceCIFSAntivirusExtensionsPolicy=eqlNASApplianceCIFSAntivirusExtensionsPolicy, eqlNASApplianceConfigSnapHardQuota=eqlNASApplianceConfigSnapHardQuota, eqlNASSanStaticRouteNetworkMaskType=eqlNASSanStaticRouteNetworkMaskType, eqlNASContainerOptimizationFilterMode=eqlNASContainerOptimizationFilterMode, eqlNASTaskEntry=eqlNASTaskEntry, eqlNASReplPartnerClusterIdMapSanVIP=eqlNASReplPartnerClusterIdMapSanVIP, eqlNASChassisInternalNetworkSpeed=eqlNASChassisInternalNetworkSpeed, PYSNMP_MODULE_ID=eqlNASModule, eqlNASContainerUniqueIDValue=eqlNASContainerUniqueIDValue, eqlNASChassisModelName=eqlNASChassisModelName, eqlNASSnapshotPolicyAdminStatus=eqlNASSnapshotPolicyAdminStatus, eqlNASReplSecsToComplete=eqlNASReplSecsToComplete, eqlNASApplianceAntivirusHostRowStatus=eqlNASApplianceAntivirusHostRowStatus, eqlNASReplSiteRemoteClusterId=eqlNASReplSiteRemoteClusterId, eqlNASSanStaticRouteTable=eqlNASSanStaticRouteTable, eqlNASContainerDirectoryOpsIndex=eqlNASContainerDirectoryOpsIndex, eqlNASApplianceOptimizationEnabled=eqlNASApplianceOptimizationEnabled, eqlNASContainerUniqueIDTable=eqlNASContainerUniqueIDTable, eqlNASReplPartnerClusterIdMapSanVIPType=eqlNASReplPartnerClusterIdMapSanVIPType, eqlNASContainerCfgSourceClusterName=eqlNASContainerCfgSourceClusterName, eqlNASApplianceConfigUsedSpaceAlert=eqlNASApplianceConfigUsedSpaceAlert, eqlNASObjects=eqlNASObjects, eqlNASCacheInfoCacheObjectState=eqlNASCacheInfoCacheObjectState, eqlNASApplianceEQLPoolIndex=eqlNASApplianceEQLPoolIndex, EqlNASChassisControllerState=EqlNASChassisControllerState, eqlNASReplRemoteClusterName=eqlNASReplRemoteClusterName, eqlNASReplPartnerInfoMapNetworkMask=eqlNASReplPartnerInfoMapNetworkMask, eqlNASApplianceCIFSExportedDirectory=eqlNASApplianceCIFSExportedDirectory, eqlNASSnapshotTable=eqlNASSnapshotTable, eqlNASApplianceAntivirusHostIndex=eqlNASApplianceAntivirusHostIndex, eqlNASChassisControllerCPUCurrentCoresCount=eqlNASChassisControllerCPUCurrentCoresCount, eqlNASClusterInfoRowStatus=eqlNASClusterInfoRowStatus, eqlNASContainerDirectoryOpsEntry=eqlNASContainerDirectoryOpsEntry, eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec=eqlNASStatsClusterTrafficRateReplicationWriteMBsPerSec, eqlNASContainerIndex=eqlNASContainerIndex, eqlNASChassisControllerAmbientTemperatureValue=eqlNASChassisControllerAmbientTemperatureValue, eqlNASConfigStateHardwareReplaceInProgress=eqlNASConfigStateHardwareReplaceInProgress, eqlNASChassisOverallStatus=eqlNASChassisOverallStatus, eqlNASChassisControllerNicFlowControl=eqlNASChassisControllerNicFlowControl, eqlNASApplianceCIFSAntivirusPolicy=eqlNASApplianceCIFSAntivirusPolicy, eqlNASContainerCompressionEnabled=eqlNASContainerCompressionEnabled, eqlNASApplianceAntivirusHostName=eqlNASApplianceAntivirusHostName, eqlNASReplPartnerClusterIdMapTable=eqlNASReplPartnerClusterIdMapTable, eqlNASReplicationNextRecoveryTime=eqlNASReplicationNextRecoveryTime, eqlNASSnapshotPolicyStatusTable=eqlNASSnapshotPolicyStatusTable, eqlNASStatsControllerTrafficRateCifsIOPSRead=eqlNASStatsControllerTrafficRateCifsIOPSRead, eqlNASStatsClusterTrafficRateEntry=eqlNASStatsClusterTrafficRateEntry, eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec=eqlNASStatsClusterTrafficRateReplicationReadMBsPerSec, eqlNASContainerStatusOptimized=eqlNASContainerStatusOptimized, eqlNASReplSitePartnershipId=eqlNASReplSitePartnershipId, eqlNASApplianceCIFSTable=eqlNASApplianceCIFSTable, eqlNASStatsControllerTrafficRateTimestamp=eqlNASStatsControllerTrafficRateTimestamp, eqlNASConfigStateEntry=eqlNASConfigStateEntry, eqlNASStatsControllerTrafficRateNfsIOPSRead=eqlNASStatsControllerTrafficRateNfsIOPSRead, eqlNASContainerExcludeFilesByNamePattern=eqlNASContainerExcludeFilesByNamePattern, eqlNASStatsControllerLoadBalancingTable=eqlNASStatsControllerLoadBalancingTable, eqlNASApplianceNFSTrustUsers=eqlNASApplianceNFSTrustUsers, eqlNASSnapshotPolicyStartTime=eqlNASSnapshotPolicyStartTime, eqlNASTaskIndex=eqlNASTaskIndex, eqlNASReplSiteLocalClusterInetAddr=eqlNASReplSiteLocalClusterInetAddr, eqlNASContainerStatusNumOfSnapshots=eqlNASContainerStatusNumOfSnapshots, eqlNASQuotaRowStatus=eqlNASQuotaRowStatus, eqlNASCacheInfoCacheObjectExpiryTime=eqlNASCacheInfoCacheObjectExpiryTime, eqlNASApplianceNFSAccessClientIP=eqlNASApplianceNFSAccessClientIP, eqlNASContainerQuotaEnabled=eqlNASContainerQuotaEnabled, eqlNASChassisControllerBackplaneNetworkSpeed=eqlNASChassisControllerBackplaneNetworkSpeed, eqlNASLostContainerRowStatus=eqlNASLostContainerRowStatus, eqlNASChassisControllerNicSlot=eqlNASChassisControllerNicSlot, eqlNASStatsClusterTrafficRateNfsIOPSRead=eqlNASStatsClusterTrafficRateNfsIOPSRead, eqlNASChassisBackplaneNetworkSpeed=eqlNASChassisBackplaneNetworkSpeed, eqlNASTaskType=eqlNASTaskType, eqlNASStatsClusterTrafficRateNfsReadMBsPerSec=eqlNASStatsClusterTrafficRateNfsReadMBsPerSec, eqlNASQuotaHardLimit=eqlNASQuotaHardLimit, eqlNASClientIdleTime=eqlNASClientIdleTime, eqlNASReplHistoryStartTime=eqlNASReplHistoryStartTime, eqlNASClusterUpdateFilename=eqlNASClusterUpdateFilename, eqlNASQuotaTargetName=eqlNASQuotaTargetName, eqlNASReplError=eqlNASReplError, eqlNASReplHistoryEntry=eqlNASReplHistoryEntry, eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy=eqlNASApplianceDefaultCIFSAntivirusExtensionsPolicy, eqlNASGroupQuotaEffectiveRuleHardLimitEnabled=eqlNASGroupQuotaEffectiveRuleHardLimitEnabled, eqlNASReplicationRowStatus=eqlNASReplicationRowStatus, eqlNASChassisName=eqlNASChassisName, eqlNASApplianceNFSExportsFileId32bit=eqlNASApplianceNFSExportsFileId32bit, eqlNASUserQuotaEffectiveRuleUserSoftLimit=eqlNASUserQuotaEffectiveRuleUserSoftLimit, eqlNASLostContainerEntry=eqlNASLostContainerEntry, eqlNASReplicationEntry=eqlNASReplicationEntry, eqlNASClientIPAddress=eqlNASClientIPAddress, eqlNASClientStaticRouteTable=eqlNASClientStaticRouteTable, eqlNASReplicationHistoryEntry=eqlNASReplicationHistoryEntry, eqlNASChassisControllerInternalNetworkStatus=eqlNASChassisControllerInternalNetworkStatus, eqlNASReplRemoteFSId=eqlNASReplRemoteFSId, eqlNASApplianceCIFSAntivirusLargeFileSize=eqlNASApplianceCIFSAntivirusLargeFileSize, eqlNASChassisControllerNicName=eqlNASChassisControllerNicName, eqlNASApplianceAccessTimeFilter=eqlNASApplianceAccessTimeFilter, eqlNASContainerCfgRequestId=eqlNASContainerCfgRequestId, eqlNASChassisControllerFanStatus=eqlNASChassisControllerFanStatus, eqlNASContainerTable=eqlNASContainerTable, eqlNASStatsControllerTotalCifsConnections=eqlNASStatsControllerTotalCifsConnections, eqlNASContainerStatusNextSnapshotID=eqlNASContainerStatusNextSnapshotID, eqlNASApplianceDefaultGroupQuota=eqlNASApplianceDefaultGroupQuota, eqlNASCacheInfoEntry=eqlNASCacheInfoEntry, eqlNASReplPartnerInfoMapNetworkAddrType=eqlNASReplPartnerInfoMapNetworkAddrType, eqlNASDiagsCaseNumber=eqlNASDiagsCaseNumber, eqlNASContainerSnapshotUsedSpaceAlert=eqlNASContainerSnapshotUsedSpaceAlert, eqlNASChassisControllerDiskStatusEntry=eqlNASChassisControllerDiskStatusEntry, eqlNASReplicationSourceFSId=eqlNASReplicationSourceFSId, eqlNASStatsControllerTrafficRateNfsIOPSOther=eqlNASStatsControllerTrafficRateNfsIOPSOther, eqlNASQuotaTable=eqlNASQuotaTable, eqlNASContainerCfgEntry=eqlNASContainerCfgEntry, eqlNASReplHistoryEventTime=eqlNASReplHistoryEventTime, eqlNASReplRole=eqlNASReplRole, eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec=eqlNASStatsControllerTrafficRateNetworkOverheadWriteMBsPerSec, eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec=eqlNASStatsClusterTrafficRateNetworkPacketDropsPerSec, eqlNASReplicationHistoryStatus=eqlNASReplicationHistoryStatus, eqlNASChassisControllerBPSModel=eqlNASChassisControllerBPSModel, eqlNASReplPartnerConfigEntry=eqlNASReplPartnerConfigEntry, eqlNASApplianceAntivirusHostTable=eqlNASApplianceAntivirusHostTable, eqlNASReplSiteRemoteClusterName=eqlNASReplSiteRemoteClusterName, eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec=eqlNASStatsControllerTrafficRateReplicationReadMBsPerSec, eqlNASReplicationDestClusterName=eqlNASReplicationDestClusterName, eqlNASReplSiteAction=eqlNASReplSiteAction, eqlNASStatsClusterTrafficRateCifsIOPSWrite=eqlNASStatsClusterTrafficRateCifsIOPSWrite, eqlNASApplianceNFSExportDirectory=eqlNASApplianceNFSExportDirectory, eqlNASReplPartnerConfigCertificate=eqlNASReplPartnerConfigCertificate, eqlNASApplianceContainerFileSecurity=eqlNASApplianceContainerFileSecurity, eqlNASClusterUpdateEntry=eqlNASClusterUpdateEntry, eqlNASChassisRowStatus=eqlNASChassisRowStatus, eqlNASReplHistorySourceClusterName=eqlNASReplHistorySourceClusterName, eqlNASReplSiteRemoteNetworkMask=eqlNASReplSiteRemoteNetworkMask, eqlNASApplianceNFSAccess=eqlNASApplianceNFSAccess, eqlNASGroupQuotaEffectiveRuleEntry=eqlNASGroupQuotaEffectiveRuleEntry, eqlNASApplianceDefaultCfgEntry=eqlNASApplianceDefaultCfgEntry, eqlNASLostContainerCapacity=eqlNASLostContainerCapacity, eqlNASApplianceCIFSAntivirusLargeFileOpen=eqlNASApplianceCIFSAntivirusLargeFileOpen, eqlNASReplicationMinToComplete=eqlNASReplicationMinToComplete, eqlNASSnapshotPolicyOccurence=eqlNASSnapshotPolicyOccurence, eqlNASApplianceNFSAccessClientNetmask=eqlNASApplianceNFSAccessClientNetmask, eqlNASApplianceAntivirusHostTransactionState=eqlNASApplianceAntivirusHostTransactionState, EqlNASChassisComponentStatus=EqlNASChassisComponentStatus, eqlNASApplianceNFSExportReadWrite=eqlNASApplianceNFSExportReadWrite, eqlNASContainerCfgTable=eqlNASContainerCfgTable, eqlNASApplianceDefaultUserQuota=eqlNASApplianceDefaultUserQuota, eqlNASUserQuotaEffectiveRuleTargetName=eqlNASUserQuotaEffectiveRuleTargetName, eqlNASChassisControllerMemorySize=eqlNASChassisControllerMemorySize, eqlNASSnapshotPolicyMaxKeep=eqlNASSnapshotPolicyMaxKeep, eqlNASApplianceReplRemoteUserName=eqlNASApplianceReplRemoteUserName, eqlNASReplicationHistoryDestContainer=eqlNASReplicationHistoryDestContainer, eqlNASSnapshotPolicyRowStatus=eqlNASSnapshotPolicyRowStatus, eqlNASChassisFanStatusTable=eqlNASChassisFanStatusTable, eqlNASSnapshotTimestamp=eqlNASSnapshotTimestamp, eqlNASReplRowStatus=eqlNASReplRowStatus, eqlNASContainerName=eqlNASContainerName, eqlNASReplPartnerInfoMapClusterId=eqlNASReplPartnerInfoMapClusterId, eqlNASApplianceContainerUnixFilePerms=eqlNASApplianceContainerUnixFilePerms, eqlNASClientProtocol=eqlNASClientProtocol, eqlNASDiagsStart=eqlNASDiagsStart, eqlNASApplianceCompressionEnabled=eqlNASApplianceCompressionEnabled, eqlNASApplianceNFSv4Mode=eqlNASApplianceNFSv4Mode, eqlNASChassisModel=eqlNASChassisModel, eqlNASStatsClusterTrafficRateNfsIOPSOther=eqlNASStatsClusterTrafficRateNfsIOPSOther, eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec=eqlNASStatsClusterTrafficRateNetworkOverheadWriteMBsPerSec, eqlNASAppliancePoolSize=eqlNASAppliancePoolSize, eqlNASChassisInternalNetworkStatus=eqlNASChassisInternalNetworkStatus, eqlNASQuotaUsage=eqlNASQuotaUsage, eqlNASGroupQuotaEffectiveRuleSoftLimit=eqlNASGroupQuotaEffectiveRuleSoftLimit, eqlNASCacheInfoCacheObjectName=eqlNASCacheInfoCacheObjectName, eqlNASChassisControllerOverallPowerSupplyStatus=eqlNASChassisControllerOverallPowerSupplyStatus, eqlNASReplicationAction=eqlNASReplicationAction, eqlNASContainerDedupMethodType=eqlNASContainerDedupMethodType, eqlNASStatsControllerTrafficRateEntry=eqlNASStatsControllerTrafficRateEntry, eqlNASQuotaUsageEntry=eqlNASQuotaUsageEntry, eqlNASSnapshotRollBack=eqlNASSnapshotRollBack, eqlNASChassisControllerIndex=eqlNASChassisControllerIndex, eqlNASFSScanEntry=eqlNASFSScanEntry, eqlNASChassisControllerPowerSupplyStatusTable=eqlNASChassisControllerPowerSupplyStatusTable, eqlNASApplianceDefaultCIFSAntivirusExtensions=eqlNASApplianceDefaultCIFSAntivirusExtensions, eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec=eqlNASStatsClusterTrafficRateNdmpReadMBsPerSec, eqlNASApplianceCIFSAllowGuestAccess=eqlNASApplianceCIFSAllowGuestAccess, eqlNASClientStaticRouteNetworkAddrType=eqlNASClientStaticRouteNetworkAddrType, eqlNASReplHistoryStatus=eqlNASReplHistoryStatus, eqlNASReplSiteEntry=eqlNASReplSiteEntry, eqlNASContainerUnixFilePermissions=eqlNASContainerUnixFilePermissions, eqlNASApplianceNFSAccessClientNetmaskType=eqlNASApplianceNFSAccessClientNetmaskType, eqlNASGroupQuotaEffectiveRuleRowStatus=eqlNASGroupQuotaEffectiveRuleRowStatus, eqlNASStatsClusterTrafficRateCifsReadMBsPerSec=eqlNASStatsClusterTrafficRateCifsReadMBsPerSec, eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec=eqlNASStatsClusterTrafficRateStorageSubSystemReadMBsPerSec, eqlNASTaskSubtaskStatus=eqlNASTaskSubtaskStatus, eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec=eqlNASStatsClusterTrafficRateNdmpWriteMBsPerSec, eqlNASChassisControllerNicStatusEntry=eqlNASChassisControllerNicStatusEntry, eqlNASChassisControllerStatusEntry=eqlNASChassisControllerStatusEntry, EqlNASReplicationRole=EqlNASReplicationRole, eqlNASConfigStateTable=eqlNASConfigStateTable, eqlNASUserQuotaEffectiveRuleGroupName=eqlNASUserQuotaEffectiveRuleGroupName, ClusterNameType=ClusterNameType, EqlNASChassisSanType=EqlNASChassisSanType)
mibBuilder.exportSymbols("EQLNAS-MIB", eqlNASClusterUpdateClusterMPV=eqlNASClusterUpdateClusterMPV, eqlNASClusterUpdateEQLGroupCurrentCompLevel=eqlNASClusterUpdateEQLGroupCurrentCompLevel, eqlNASReplPartnerInfoMapClusterSanVIPType=eqlNASReplPartnerInfoMapClusterSanVIPType, eqlNASClusterInfoEntry=eqlNASClusterInfoEntry, eqlNASChassisEntry=eqlNASChassisEntry, eqlNASChassisControllerAmbientTemperatureStatus=eqlNASChassisControllerAmbientTemperatureStatus, eqlNASContainerDirectoryRowStatus=eqlNASContainerDirectoryRowStatus, eqlNASChassisPowerSupplyStatusEntry=eqlNASChassisPowerSupplyStatusEntry, eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec=eqlNASStatsControllerTrafficRateNetworkOverheadReadMBsPerSec, eqlNASUserQuotaEffectiveRuleGroupSoftLimit=eqlNASUserQuotaEffectiveRuleGroupSoftLimit, eqlNASContainerDefaultGroupQuota=eqlNASContainerDefaultGroupQuota, eqlNASContainerDirectoryName=eqlNASContainerDirectoryName, eqlNASSnapshotIndex=eqlNASSnapshotIndex, eqlNASQuotaUsageTargetType=eqlNASQuotaUsageTargetType, eqlNASSnapshotPolicyName=eqlNASSnapshotPolicyName, eqlNASChassisRequestId=eqlNASChassisRequestId, eqlNASReplSiteUserName=eqlNASReplSiteUserName, eqlNASTaskContainerReplInfoLocalFSName=eqlNASTaskContainerReplInfoLocalFSName, eqlNASReplicationTransferredPer=eqlNASReplicationTransferredPer, eqlNASReplSiteRemoteNetworkAddrType=eqlNASReplSiteRemoteNetworkAddrType, eqlNASChassisControllerStatusTable=eqlNASChassisControllerStatusTable, CertificateType=CertificateType, eqlNASClusterUpdateTable=eqlNASClusterUpdateTable, eqlNASReplicationHistorySampleIndex=eqlNASReplicationHistorySampleIndex, eqlNASChassisControllerStatus=eqlNASChassisControllerStatus, eqlNASContainerEntry=eqlNASContainerEntry, eqlNASReplRemoteFSName=eqlNASReplRemoteFSName, eqlNASChassisControllerSanNetworkStatus=eqlNASChassisControllerSanNetworkStatus, eqlNASChassisFanStatus=eqlNASChassisFanStatus, eqlNASLostContainerUsedSpaceAlert=eqlNASLostContainerUsedSpaceAlert, eqlNASChassisControllerSystemControllerId=eqlNASChassisControllerSystemControllerId, eqlNASGroupQuotaEffectiveRuleTargetName=eqlNASGroupQuotaEffectiveRuleTargetName, eqlNASChassisControllerBPSStatus=eqlNASChassisControllerBPSStatus, eqlNASLostContainerName=eqlNASLostContainerName, eqlNASReplPartnerConfigTable=eqlNASReplPartnerConfigTable, eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec=eqlNASStatsControllerTrafficRateNdmpReadMBsPerSec, eqlNASApplianceExcludeFilesByNamePattern=eqlNASApplianceExcludeFilesByNamePattern, eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths=eqlNASApplianceDefaultCIFSAntivirusExcludeDirPaths, eqlNASChassisControllerPowerSupplyName=eqlNASChassisControllerPowerSupplyName, eqlNASSnapshotPolicyEndTime=eqlNASSnapshotPolicyEndTime, eqlNASReplicationDestFSId=eqlNASReplicationDestFSId, eqlNASReplicationHistoryTable=eqlNASReplicationHistoryTable, eqlNASConfigStateConfigFinished=eqlNASConfigStateConfigFinished, eqlNASContainerDirectoryCaseInsensitive=eqlNASContainerDirectoryCaseInsensitive, eqlNASReplicationStatus=eqlNASReplicationStatus, eqlNASCacheInfoIndex=eqlNASCacheInfoIndex, eqlNASClientStaticRouteRowStatus=eqlNASClientStaticRouteRowStatus, eqlNASStatsControllerTrafficRateCifsIOPSOther=eqlNASStatsControllerTrafficRateCifsIOPSOther, eqlNASChassisControllerFanStatusTable=eqlNASChassisControllerFanStatusTable, eqlNASSnapshotPolicyMonthMask=eqlNASSnapshotPolicyMonthMask, eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec=eqlNASStatsControllerTrafficRateNfsWriteMBsPerSec, eqlNASChassisStatusEntry=eqlNASChassisStatusEntry, NASContainerNameType=NASContainerNameType, eqlNASReplSitePassword=eqlNASReplSitePassword, eqlNASChassisOverallFanStatus=eqlNASChassisOverallFanStatus, eqlNASChassisControllerDiskName=eqlNASChassisControllerDiskName, eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled=eqlNASUserQuotaEffectiveRuleGroupSoftLimitEnabled, eqlNASQuotaUsageTable=eqlNASQuotaUsageTable, eqlNASStatsClusterTrafficRateTimestamp=eqlNASStatsClusterTrafficRateTimestamp, eqlNASStatsControllerTrafficRateNfsReadMBsPerSec=eqlNASStatsControllerTrafficRateNfsReadMBsPerSec, eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec=eqlNASStatsControllerTrafficRateCifsWriteMBsPerSec, eqlNASQuotaUsageTargetName=eqlNASQuotaUsageTargetName, eqlNASClientConnectedTime=eqlNASClientConnectedTime, eqlNASChassisControllerFanRpmRange=eqlNASChassisControllerFanRpmRange, eqlNASTaskSubTaskInProgress=eqlNASTaskSubTaskInProgress, eqlNASApplianceModificationTimeFilter=eqlNASApplianceModificationTimeFilter, eqlNASReplSiteRemoteClusterInetAddrType=eqlNASReplSiteRemoteClusterInetAddrType, eqlNASContainerAction=eqlNASContainerAction, eqlNASTaskRowStatus=eqlNASTaskRowStatus, eqlNASReplHistoryDestContainerName=eqlNASReplHistoryDestContainerName, eqlNASClientNodeIndex=eqlNASClientNodeIndex, eqlNASClientTable=eqlNASClientTable, eqlNASTaskTable=eqlNASTaskTable, eqlNASSnapshotPolicyCategory=eqlNASSnapshotPolicyCategory, eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec=eqlNASStatsControllerTrafficRateReplicationWriteMBsPerSec, eqlNASChassisFanName=eqlNASChassisFanName, eqlNASContainerModificationTimeFilter=eqlNASContainerModificationTimeFilter, eqlNASApplianceNFSExportName=eqlNASApplianceNFSExportName, eqlNASReplPartnerIdMapEntry=eqlNASReplPartnerIdMapEntry, eqlNASApplianceDefaultCIFSAntivirusEnabled=eqlNASApplianceDefaultCIFSAntivirusEnabled, eqlNASChassisControllerCPUOverallStatus=eqlNASChassisControllerCPUOverallStatus, eqlNASFSScanRate=eqlNASFSScanRate, eqlNASApplianceAntivirusHostPortNumber=eqlNASApplianceAntivirusHostPortNumber, eqlNASContainerCfgSourceFSName=eqlNASContainerCfgSourceFSName, eqlNASContainerDefaultGroupQuotaAlert=eqlNASContainerDefaultGroupQuotaAlert, eqlNASApplianceAntivirusHostEntry=eqlNASApplianceAntivirusHostEntry, EqlNASChassisNetworkSpeed=EqlNASChassisNetworkSpeed, eqlNASChassisClientNetworkStatus=eqlNASChassisClientNetworkStatus, eqlNASReplHistoryDestClusterName=eqlNASReplHistoryDestClusterName, eqlNASApplianceCIFSEntry=eqlNASApplianceCIFSEntry, eqlNASReplicationHistorySrcContainer=eqlNASReplicationHistorySrcContainer, eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec=eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSec, eqlNASSnapshotPolicyTimeFrequency=eqlNASSnapshotPolicyTimeFrequency, eqlNASQuotaTargetType=eqlNASQuotaTargetType, eqlNASModule=eqlNASModule, eqlNASChassisSanNetworkSpeed=eqlNASChassisSanNetworkSpeed, eqlNASGroupQuotaEffectiveRuleTable=eqlNASGroupQuotaEffectiveRuleTable, eqlNASClientStaticRouteGatewayAddr=eqlNASClientStaticRouteGatewayAddr, eqlNASStatsControllerCPULoadPercent=eqlNASStatsControllerCPULoadPercent, eqlNASContainerStatusEntry=eqlNASContainerStatusEntry, eqlNASChassisControllerFanRpm=eqlNASChassisControllerFanRpm, eqlNASApplianceEntry=eqlNASApplianceEntry, eqlNASSanStaticRouteGatewayAddr=eqlNASSanStaticRouteGatewayAddr, eqlNASSnapshotEntry=eqlNASSnapshotEntry, eqlNASClientEntry=eqlNASClientEntry, eqlNASContainerUnixDirPermissions=eqlNASContainerUnixDirPermissions, eqlNASContainerAccessTimeFilter=eqlNASContainerAccessTimeFilter, eqlNASChassisChassisTag=eqlNASChassisChassisTag, eqlNASChassisControllerPowerSupplyStatus=eqlNASChassisControllerPowerSupplyStatus, eqlNASApplianceNFSExportsTable=eqlNASApplianceNFSExportsTable, eqlNASSnapshotPolicyWeekMask=eqlNASSnapshotPolicyWeekMask, eqlNASClusterUpdateRowStatus=eqlNASClusterUpdateRowStatus, eqlNASReplHistorySourceContainerName=eqlNASReplHistorySourceContainerName, eqlNASClusterUpdateEQLGroupMPV=eqlNASClusterUpdateEQLGroupMPV, eqlNASContainerAccessTimeManagementGranularity=eqlNASContainerAccessTimeManagementGranularity, eqlNASChassisStatusTable=eqlNASChassisStatusTable, eqlNASReplHistoryTransferredMb=eqlNASReplHistoryTransferredMb, eqlNASSanStaticRouteNetworkAddrType=eqlNASSanStaticRouteNetworkAddrType, eqlNASChassisControllerSanNetworkSpeed=eqlNASChassisControllerSanNetworkSpeed, eqlNASClusterInfoClusterId=eqlNASClusterInfoClusterId, eqlNASReplPartnerInfoMapEntry=eqlNASReplPartnerInfoMapEntry, eqlNASQuotaUsageRowStatus=eqlNASQuotaUsageRowStatus, eqlNASReplNextRecoveryTime=eqlNASReplNextRecoveryTime, eqlNASApplianceAccessTimeManagementGranularity=eqlNASApplianceAccessTimeManagementGranularity, eqlNASReplEntry=eqlNASReplEntry, eqlNASUserQuotaEffectiveRuleTable=eqlNASUserQuotaEffectiveRuleTable, eqlNASClusterInfoMoreSegment=eqlNASClusterInfoMoreSegment, eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec=eqlNASStatsClusterTrafficRateTotalPrimaryMBsPerSec, eqlNASChassisSanType=eqlNASChassisSanType, eqlNASApplianceTable=eqlNASApplianceTable, eqlNASSnapshotPolicyType=eqlNASSnapshotPolicyType, eqlNASUserQuotaEffectiveRuleRowStatus=eqlNASUserQuotaEffectiveRuleRowStatus, eqlNASClientNumOpenFiles=eqlNASClientNumOpenFiles, eqlNASChassisControllerNicStatusTable=eqlNASChassisControllerNicStatusTable, eqlNASChassisControllerNicDuplex=eqlNASChassisControllerNicDuplex, eqlNASDiagsStatus=eqlNASDiagsStatus, eqlNASSnapshotPolicyStatusEntry=eqlNASSnapshotPolicyStatusEntry, eqlNASReplPartnerInfoMapClusterName=eqlNASReplPartnerInfoMapClusterName, eqlNASChassisControllerClientNetworkSpeed=eqlNASChassisControllerClientNetworkSpeed, eqlNASSnapshotPolicyStatusOperStatus=eqlNASSnapshotPolicyStatusOperStatus, eqlNASApplianceNFSExportTrustedUsers=eqlNASApplianceNFSExportTrustedUsers, eqlNASContainerStatusUsedSpace=eqlNASContainerStatusUsedSpace, eqlNASApplianceContainerUnixDirPerms=eqlNASApplianceContainerUnixDirPerms, EqlNASReplicationStatus=EqlNASReplicationStatus, eqlNASClusterInfoSegmentSize=eqlNASClusterInfoSegmentSize, eqlNASReplPartnerIdMapPartnershipId=eqlNASReplPartnerIdMapPartnershipId, eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen=eqlNASApplianceDefaultCIFSAntivirusLargeFileOpen, eqlNASUserQuotaEffectiveRuleEntry=eqlNASUserQuotaEffectiveRuleEntry, eqlNASStatsControllerTrafficRateIndex=eqlNASStatsControllerTrafficRateIndex, eqlNASQuotaEntry=eqlNASQuotaEntry, eqlNASReplPartnerIdMapTable=eqlNASReplPartnerIdMapTable, eqlNASReplStatus=eqlNASReplStatus, eqlNASReplPartnerConfigInetAddrType=eqlNASReplPartnerConfigInetAddrType, eqlNASApplianceDefaultNFSExportsFileId32bit=eqlNASApplianceDefaultNFSExportsFileId32bit, eqlNASApplianceDefaultGroupQuotaAlert=eqlNASApplianceDefaultGroupQuotaAlert, eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec=eqlNASStatsClusterTrafficRateNfsWriteMBsPerSec, eqlNASReplTargetRecoveryTime=eqlNASReplTargetRecoveryTime, eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec=eqlNASStatsClusterTrafficRateNetworkOverheadReadMBsPerSec, eqlNASReplicationTable=eqlNASReplicationTable, eqlNASReplVolumeReplSiteIndex=eqlNASReplVolumeReplSiteIndex, eqlNASChassisControllerLocation=eqlNASChassisControllerLocation, eqlNASReplicationHistoryTransferredMb=eqlNASReplicationHistoryTransferredMb, eqlNASQuotaWarnLimit=eqlNASQuotaWarnLimit, eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled=eqlNASGroupQuotaEffectiveRuleSoftLimitEnabled, eqlNASChassisIndex=eqlNASChassisIndex, eqlNASContainerStatusConnections=eqlNASContainerStatusConnections, eqlNASContainerStatusNumNFSExports=eqlNASContainerStatusNumNFSExports, eqlNASChassisControllerNicState=eqlNASChassisControllerNicState, eqlNASChassisOverallControllerStatus=eqlNASChassisOverallControllerStatus, eqlNASCacheInfoTable=eqlNASCacheInfoTable, eqlNASClientStaticRouteNetworkMaskType=eqlNASClientStaticRouteNetworkMaskType, eqlNASContainerCfgIndex=eqlNASContainerCfgIndex, eqlNASChassisFanStatusEntry=eqlNASChassisFanStatusEntry, eqlNASApplianceNFSExportsEntry=eqlNASApplianceNFSExportsEntry, eqlNASStatsClusterTrafficRateNfsIOPSWrite=eqlNASStatsClusterTrafficRateNfsIOPSWrite, eqlNASChassisFileSystemMember=eqlNASChassisFileSystemMember, eqlNASReplSiteRemoteClusterInetAddr=eqlNASReplSiteRemoteClusterInetAddr, eqlNASChassisControllerState=eqlNASChassisControllerState, eqlNASStatsControllerLoadBalancingTimestamp=eqlNASStatsControllerLoadBalancingTimestamp, eqlNASChassisControllerBackplaneNetworkStatus=eqlNASChassisControllerBackplaneNetworkStatus, eqlNASSanStaticRouteGatewayAddrType=eqlNASSanStaticRouteGatewayAddrType, eqlNASSnapshotPolicyEndDate=eqlNASSnapshotPolicyEndDate, eqlNASChassisControllerInternalNetworkSpeed=eqlNASChassisControllerInternalNetworkSpeed, eqlNASFSScanTable=eqlNASFSScanTable, eqlNASChassisTable=eqlNASChassisTable, eqlNASTaskContainerReplInfoLocalClusterId=eqlNASTaskContainerReplInfoLocalClusterId, eqlNASTaskNumSubTasks=eqlNASTaskNumSubTasks, eqlNASChassisPowerSupplyStatus=eqlNASChassisPowerSupplyStatus, eqlNASClusterInfoSegmentId=eqlNASClusterInfoSegmentId, eqlNASReplicationHistoryEndTime=eqlNASReplicationHistoryEndTime, eqlNASContainerOptimizationEnabled=eqlNASContainerOptimizationEnabled, eqlNASReplTransferredMB=eqlNASReplTransferredMB, eqlNASReplSiteRemoteNetworkAddr=eqlNASReplSiteRemoteNetworkAddr, eqlNASStatsControllerTrafficRateCifsReadMBsPerSec=eqlNASStatsControllerTrafficRateCifsReadMBsPerSec, eqlNASChassisControllerPowerSupplyStatusEntry=eqlNASChassisControllerPowerSupplyStatusEntry, eqlNASContainerStatusTable=eqlNASContainerStatusTable, eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage=eqlNASStatsControllerTrafficRateTotalPrimaryMBsPerSecToAverage, eqlNASLostContainerTable=eqlNASLostContainerTable, eqlNASReplHistoryUniqueId=eqlNASReplHistoryUniqueId, ClusterIdType=ClusterIdType, eqlNASSnapshotName=eqlNASSnapshotName, eqlNASReplAction=eqlNASReplAction, eqlNASReplicationId=eqlNASReplicationId, eqlNASTaskContainerReplInfoRowStatus=eqlNASTaskContainerReplInfoRowStatus, eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled=eqlNASUserQuotaEffectiveRuleGroupHardLimitEnabled, eqlNASChassisControllerNicSpeed=eqlNASChassisControllerNicSpeed, eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec=eqlNASStatsControllerTrafficRateStorageSubSystemWriteMBsPerSec, eqlNASChassisPowerSupplyStatusTable=eqlNASChassisPowerSupplyStatusTable, eqlNASContainerFileAccessSecurity=eqlNASContainerFileAccessSecurity, eqlNASContainerUniqueIDType=eqlNASContainerUniqueIDType, eqlNASApplianceDefaultCIFSAntivirusPolicy=eqlNASApplianceDefaultCIFSAntivirusPolicy, eqlNASReplHistoryTable=eqlNASReplHistoryTable, eqlNASTaskContainerReplInfoTaskId=eqlNASTaskContainerReplInfoTaskId, eqlNASContainerRowStatus=eqlNASContainerRowStatus, UNIXPermissions=UNIXPermissions, eqlNASSnapshotRowStatus=eqlNASSnapshotRowStatus, eqlNASSnapshotPolicyRepeatFactor=eqlNASSnapshotPolicyRepeatFactor, eqlNASReplTable=eqlNASReplTable, eqlNASClientIPAddressType=eqlNASClientIPAddressType, eqlNASApplianceDedupMethodType=eqlNASApplianceDedupMethodType, eqlNASApplianceNFSExportsRowStatus=eqlNASApplianceNFSExportsRowStatus, eqlNASContainerStatusFreeSpace=eqlNASContainerStatusFreeSpace, eqlNASApplianceDefaultCIFSAntivirusLargeFileSize=eqlNASApplianceDefaultCIFSAntivirusLargeFileSize, eqlNASClientIsGuest=eqlNASClientIsGuest, eqlNASStatsControllerTrafficRateTable=eqlNASStatsControllerTrafficRateTable, eqlNASChassisControllerOverallFanStatus=eqlNASChassisControllerOverallFanStatus, eqlNASTaskContainerReplInfoEntry=eqlNASTaskContainerReplInfoEntry, eqlNASContainerRehydrateOnReadEnabled=eqlNASContainerRehydrateOnReadEnabled, eqlNASReplicationSourceClusterName=eqlNASReplicationSourceClusterName, EqlNASChassisACPowerStatus=EqlNASChassisACPowerStatus, eqlNASTaskContainerReplInfoRemoteClusterName=eqlNASTaskContainerReplInfoRemoteClusterName, eqlNASReplSiteRowStatus=eqlNASReplSiteRowStatus, eqlNASStatsClusterTrafficRateTable=eqlNASStatsClusterTrafficRateTable, eqlNASApplianceCIFSLockEnforcement=eqlNASApplianceCIFSLockEnforcement, EqlNASReplicationError=EqlNASReplicationError, eqlNASContainerStatusSnapshotSpace=eqlNASContainerStatusSnapshotSpace, eqlNASContainerCfgRowStatus=eqlNASContainerCfgRowStatus, eqlNASContainerDirectoryOpsTable=eqlNASContainerDirectoryOpsTable, eqlNASReplPartnerClusterIdMapEntry=eqlNASReplPartnerClusterIdMapEntry, eqlNASChassisControllerClientNetworkStatus=eqlNASChassisControllerClientNetworkStatus, eqlNASClientStaticRouteNetworkAddr=eqlNASClientStaticRouteNetworkAddr, eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec=eqlNASStatsClusterTrafficRateTotalSecondaryMBsPerSec, eqlNASReplSiteRemotePassword=eqlNASReplSiteRemotePassword, eqlNASReplPartnerInfoMapClusterMPV=eqlNASReplPartnerInfoMapClusterMPV, eqlNASTaskContainerReplInfoRemoteFSName=eqlNASTaskContainerReplInfoRemoteFSName, eqlNASReplSiteTable=eqlNASReplSiteTable, eqlNASApplianceCIFSShareName=eqlNASApplianceCIFSShareName, eqlNASTaskContainerReplInfoVolumeReplSiteIndex=eqlNASTaskContainerReplInfoVolumeReplSiteIndex, eqlNASReplSiteVolumeReplSiteIndex=eqlNASReplSiteVolumeReplSiteIndex, eqlNASSanStaticRouteNetworkAddr=eqlNASSanStaticRouteNetworkAddr, eqlNASStatsClusterTrafficRateCifsIOPSOther=eqlNASStatsClusterTrafficRateCifsIOPSOther, eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec=eqlNASStatsControllerTrafficRateTotalSecondaryMBsPerSec, eqlNASContainerStatusNumCIFSShares=eqlNASContainerStatusNumCIFSShares, eqlNASChassisOverallPowerSupplyStatus=eqlNASChassisOverallPowerSupplyStatus)
mibBuilder.exportSymbols("EQLNAS-MIB", eqlNASStatsControllerLoadBalancingIndex=eqlNASStatsControllerLoadBalancingIndex, eqlNASReplicationLastRecoveryTime=eqlNASReplicationLastRecoveryTime, eqlNASReplPartnerConfigInetAddr=eqlNASReplPartnerConfigInetAddr, eqlNASReplTransferredPercent=eqlNASReplTransferredPercent, eqlNASChassisFanRpm=eqlNASChassisFanRpm, eqlNASClusterInfoSiteType=eqlNASClusterInfoSiteType, eqlNASContainerUsedSpaceAlert=eqlNASContainerUsedSpaceAlert, eqlNASReplicationHistoryStartTime=eqlNASReplicationHistoryStartTime, eqlNASChassisControllerNicPort=eqlNASChassisControllerNicPort, eqlNASContainerUniqueIDEntry=eqlNASContainerUniqueIDEntry, eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec=eqlNASStatsClusterTrafficRateCifsWriteMBsPerSec, eqlNASApplianceDefaultUserQuotaAlert=eqlNASApplianceDefaultUserQuotaAlert, eqlNASContainerStatusReplState=eqlNASContainerStatusReplState, eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec=eqlNASStatsClusterTrafficRateStorageSubSystemWriteMBsPerSec, eqlNASReplPartnerIdMapRowStatus=eqlNASReplPartnerIdMapRowStatus, eqlNASTaskContainerReplInfoRemoteFSId=eqlNASTaskContainerReplInfoRemoteFSId, eqlNASChassisControllerMemoryStatus=eqlNASChassisControllerMemoryStatus, eqlNASChassisFanRpmRange=eqlNASChassisFanRpmRange, eqlNASReplPartnerInfoMapRowStatus=eqlNASReplPartnerInfoMapRowStatus, eqlNASStatsControllerLoadBalancingEntry=eqlNASStatsControllerLoadBalancingEntry, eqlNASReplHistoryEndTime=eqlNASReplHistoryEndTime, eqlNASCacheInfoAction=eqlNASCacheInfoAction, eqlNASReplPartnerConfigRowStatus=eqlNASReplPartnerConfigRowStatus, eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec=eqlNASStatsControllerTrafficRateNetworkPacketDropsPerSec, eqlNASSnapshotPolicyStartDate=eqlNASSnapshotPolicyStartDate, eqlNASApplianceCIFSRowStatus=eqlNASApplianceCIFSRowStatus, eqlNASContainerCfgModules=eqlNASContainerCfgModules, eqlNASApplianceNFSAccessClientIPType=eqlNASApplianceNFSAccessClientIPType, eqlNASGroupQuotaEffectiveRuleHardLimit=eqlNASGroupQuotaEffectiveRuleHardLimit, eqlNASTaskContainerReplInfoTable=eqlNASTaskContainerReplInfoTable, eqlNASClientStaticRouteEntry=eqlNASClientStaticRouteEntry, eqlNASSnapshotSize=eqlNASSnapshotSize, eqlNASReplPartnerClusterIdMapClusterId=eqlNASReplPartnerClusterIdMapClusterId, eqlNASChassisControllerOverallLocalDiskStatus=eqlNASChassisControllerOverallLocalDiskStatus, eqlNASClientUserName=eqlNASClientUserName, eqlNASSnapshotPolicyTable=eqlNASSnapshotPolicyTable, eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec=eqlNASStatsControllerTrafficRateStorageSubSystemReadMBsPerSec, eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec=eqlNASStatsControllerTrafficRateNdmpWriteMBsPerSec, eqlNASClusterInfoCertificate=eqlNASClusterInfoCertificate, eqlNASReplSiteLocalClusterInetAddrType=eqlNASReplSiteLocalClusterInetAddrType, eqlNASChassisSanNetworkStatus=eqlNASChassisSanNetworkStatus, eqlNASStatsControllerTrafficRateNfsIOPSWrite=eqlNASStatsControllerTrafficRateNfsIOPSWrite, eqlNASContainerStatusAllocatedSpace=eqlNASContainerStatusAllocatedSpace, eqlNASChassisBackplaneNetworkStatus=eqlNASChassisBackplaneNetworkStatus, eqlNASTaskUserAction=eqlNASTaskUserAction, eqlNASChassisControllerDiskStatusTable=eqlNASChassisControllerDiskStatusTable, eqlNASContainerCapacity=eqlNASContainerCapacity, eqlNASChassisControllerDiskStatus=eqlNASChassisControllerDiskStatus, eqlNASSnapshotPolicyIndex=eqlNASSnapshotPolicyIndex)
