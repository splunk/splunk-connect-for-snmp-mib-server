#
# PySNMP MIB module HM2-DEVMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-DEVMGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
HmTimeSeconds1970, hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "HmTimeSeconds1970", "hm2ConfigurationMibs", "HmEnabledStatus")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, ObjectIdentity, TimeTicks, Counter32, IpAddress, iso, MibIdentifier, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "ObjectIdentity", "TimeTicks", "Counter32", "IpAddress", "iso", "MibIdentifier", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "ModuleIdentity")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
hm2DeviceMgmtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 10))
hm2DeviceMgmtMib.setRevisions(('2012-10-10 00:00', '2011-03-16 00:00',))
if mibBuilder.loadTexts: hm2DeviceMgmtMib.setLastUpdated('201210100000Z')
if mibBuilder.loadTexts: hm2DeviceMgmtMib.setOrganization('Hirschmann Automation and Control GmbH')
class Hm2DeviceExtNVMType(TextualConvention, Integer32):
    reference = 'RFC3164 - 4.1.1: Table 2'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("sd", 1), ("usb", 2), ("serial", 3))

hm2DeviceMgmtMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 0))
hm2DeviceMgmtMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1))
hm2DeviceMgmtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 1))
hm2DeviceMgmtActionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2))
hm2DeviceMgmtSoftwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3))
hm2DeviceMgmtHardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4))
hm2DeviceMgmtTemperatureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 5))
hm2IfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6))
hm2SfpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7))
hm2ExtNvmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8))
hm2AutoDisableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9))
hm2UnitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 10))
hm2ModuleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11))
hm2DevMgmtProductId = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtProductId.setStatus('current')
hm2DevMgmtProductDescr = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtProductDescr.setStatus('current')
hm2DevMgmtSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtSerialNumber.setStatus('current')
hm2DevMgmtActionReset = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionReset.setStatus('current')
hm2DevMgmtActionFlushFDB = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushFDB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushFDB.setStatus('current')
hm2DevMgmtActionFlushARP = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushARP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushARP.setStatus('current')
hm2DevMgmtActionFlushIGS = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushIGS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushIGS.setStatus('current')
hm2DevMgmtActionFlushPortStats = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushPortStats", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushPortStats.setStatus('current')
hm2DevMgmtActionFlushEmailLogStats = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushEmailLogCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushEmailLogStats.setStatus('current')
hm2DevMgmtActionFlushMMRP = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushMMRP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushMMRP.setStatus('current')
hm2DevMgmtActionFlushMVRP = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushMVRP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushMVRP.setStatus('current')
hm2DevMgmtActionFlushMSRP = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushMSRP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushMSRP.setStatus('current')
hm2DevMgmtActionFlushIeee8021AS = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushIeee8021AS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushIeee8021AS.setStatus('current')
hm2DevMgmtActionFlushDnsClientCache = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushDnsClientCache", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushDnsClientCache.setStatus('current')
hm2DevMgmtActionFlushDnsCachingServerCache = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushDnsCachingServerCache", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushDnsCachingServerCache.setStatus('current')
hm2DevMgmtActionFlushIpUdpHelperStats = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushIpUdpHelperStats", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushIpUdpHelperStats.setStatus('current')
hm2DevMgmtActionFlushAclStats = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("flushAclStats", 2), ("flushAclMacStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushAclStats.setStatus('current')
hm2DevMgmtActionFlushLdapUserCache = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushLdapUserCache", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionFlushLdapUserCache.setStatus('current')
hm2DevMgmtActionDelayPreset = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtActionDelayPreset.setStatus('current')
hm2DevMgmtActionDelayCurrent = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 2, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtActionDelayCurrent.setStatus('current')
hm2DeviceMgmtSoftwareVersionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1))
hm2DevMgmtSwVersBootcode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtSwVersBootcode.setStatus('current')
hm2DevMgmtSwVersTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10), )
if mibBuilder.loadTexts: hm2DevMgmtSwVersTable.setStatus('current')
hm2DevMgmtSwVersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2DevMgmtSwFileLocation"), (0, "HM2-DEVMGMT-MIB", "hm2DevMgmtSwFileType"), (0, "HM2-DEVMGMT-MIB", "hm2DevMgmtSwFileIdx"))
if mibBuilder.loadTexts: hm2DevMgmtSwVersEntry.setStatus('current')
hm2DevMgmtSwFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ram", 1), ("flash", 2), ("sd-card", 3), ("usb", 4))))
if mibBuilder.loadTexts: hm2DevMgmtSwFileLocation.setStatus('current')
hm2DevMgmtSwFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firmware", 1), ("applet", 2), ("logic", 3))))
if mibBuilder.loadTexts: hm2DevMgmtSwFileType.setStatus('current')
hm2DevMgmtSwFileIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)))
if mibBuilder.loadTexts: hm2DevMgmtSwFileIdx.setStatus('current')
hm2DevMgmtSwFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtSwFileName.setStatus('current')
hm2DevMgmtSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtSwVersion.setStatus('current')
hm2DevMgmtSwMajorRelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtSwMajorRelNum.setStatus('current')
hm2DevMgmtSwMinorRelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtSwMinorRelNum.setStatus('current')
hm2DevMgmtSwBugfixRelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 3, 1, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtSwBugfixRelNum.setStatus('current')
hm2DevMgmtHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtHwVersion.setStatus('current')
hm2DevMgmtSwitchingCoreVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtSwitchingCoreVersion.setStatus('current')
hm2DeviceMgmtLogicVersionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4, 5))
hm2DevMgmtLogicVersTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4, 5, 1), )
if mibBuilder.loadTexts: hm2DevMgmtLogicVersTable.setStatus('current')
hm2DevMgmtLogicVersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4, 5, 1, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2DevMgmtLogicIdx"))
if mibBuilder.loadTexts: hm2DevMgmtLogicVersEntry.setStatus('current')
hm2DevMgmtLogicIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: hm2DevMgmtLogicIdx.setStatus('current')
hm2DevMgmtLogicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtLogicAddress.setStatus('current')
hm2DevMgmtLogicVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 4, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtLogicVersion.setStatus('current')
hm2DevMgmtTemperature = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMgmtTemperature.setStatus('current')
hm2DevMgmtTemperatureUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 99)).clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtTemperatureUpperLimit.setStatus('current')
hm2DevMgmtTemperatureLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMgmtTemperatureLowerLimit.setStatus('current')
hm2IfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 1), )
if mibBuilder.loadTexts: hm2IfaceTable.setStatus('current')
hm2IfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 1, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2IfacePhysIndex"))
if mibBuilder.loadTexts: hm2IfaceEntry.setStatus('current')
hm2IfacePhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2IfacePhysIndex.setStatus('current')
hm2IfacePortCapabilityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 1, 1, 2), Bits().clone(namedValues=NamedValues(("manual-mdix", 0), ("auto-mdix", 1), ("auto-power-down", 2), ("energy-efficient-ethernet", 3), ("cable-test", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfacePortCapabilityBits.setStatus('current')
hm2IfaceCableCrossing = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto-mdix", 3), ("unsupported", 4))).clone('mdix')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IfaceCableCrossing.setStatus('current')
hm2IfacePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 1, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IfacePowerState.setStatus('current')
hm2IfaceAutoPowerDown = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto-power-down", 1), ("no-power-save", 2), ("energy-efficient-ethernet", 3), ("unsupported", 4))).clone('no-power-save')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IfaceAutoPowerDown.setStatus('current')
hm2IfaceOperAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfaceOperAdminStatus.setStatus('current')
hm2IfaceLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2), )
if mibBuilder.loadTexts: hm2IfaceLayoutTable.setStatus('current')
hm2IfaceLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2IfaceLayoutIndex"))
if mibBuilder.loadTexts: hm2IfaceLayoutEntry.setStatus('current')
hm2IfaceLayoutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2IfaceLayoutIndex.setStatus('current')
hm2IfaceLayoutStartIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfaceLayoutStartIfIndex.setStatus('current')
hm2IfaceLayoutEndIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfaceLayoutEndIfIndex.setStatus('current')
hm2IfaceLayoutModuleCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfaceLayoutModuleCapacity.setStatus('current')
hm2IfaceLayoutModulePortCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfaceLayoutModulePortCapacity.setStatus('current')
hm2IfaceLayoutFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfaceLayoutFormat.setStatus('current')
hm2IfaceLayoutIfIndexType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 2, 1, 7), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfaceLayoutIfIndexType.setStatus('current')
hm2IfaceExtTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 3), )
if mibBuilder.loadTexts: hm2IfaceExtTable.setStatus('current')
hm2IfaceExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2IfaceExtEntry.setStatus('current')
hm2IfaceExtIfRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 24, 136, 161, 169, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1101, 1102, 1201, 1202))).clone(namedValues=NamedValues(("ethernetCsmacd", 6), ("softwareLoopback", 24), ("l3ipvlan", 136), ("ieee8023adLag", 161), ("shdsl", 169), ("ringPort", 1001), ("subringPort", 1002), ("couplingPort", 1003), ("routerPort", 1004), ("probePort", 1005), ("cpuPort", 1006), ("servicePort", 1007), ("outOfBandMgmtPort", 1008), ("lagMember", 1101), ("lreMember", 1102), ("lreInterface", 1201), ("ringLagInterface", 1202)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IfaceExtIfRole.setStatus('current')
hm2SfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1), )
if mibBuilder.loadTexts: hm2SfpInfoTable.setStatus('current')
hm2SfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2SfpInfoEntry.setStatus('current')
hm2SfpModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 6))).clone(namedValues=NamedValues(("sfp", 3), ("xfp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpModuleType.setStatus('current')
hm2SfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 30, 31, 32, 40, 41, 50))).clone(namedValues=NamedValues(("ge-1000-base-sx", 1), ("ge-1000-base-lx", 2), ("ge-1000-base-cx", 4), ("fe-100base-lx", 5), ("fe-100base-fx", 6), ("ge-1000-base-t", 8), ("unsupported", 9), ("oc3-mm-sr", 10), ("oc3-sm-ir", 11), ("oc3-sm-lr", 12), ("oc12-mm-sr", 13), ("oc12-sm-ir", 14), ("oc12-sm-lr", 15), ("oc48-sr", 16), ("oc48-ir", 17), ("oc48-lr", 18), ("xfp-10gbase-sr", 30), ("xfp-10gbase-lr", 31), ("xfp-10gbase-er", 32), ("microfx", 40), ("pof", 41), ("m-sfp-2500", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpMediaType.setStatus('current')
hm2SfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 8, 11, 33, 34, 128))).clone(namedValues=NamedValues(("nonSfp", 1), ("fiberjack", 6), ("lc", 7), ("mtrj", 8), ("opticalPigtail", 11), ("copperPigtail", 33), ("rj45", 34), ("vendorSpecific", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpConnector.setStatus('current')
hm2SfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpVendorName.setStatus('current')
hm2SfpVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpVendorOUI.setStatus('current')
hm2SfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpPartNumber.setStatus('current')
hm2SfpPartRev = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpPartRev.setStatus('current')
hm2SfpSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpSerialNum.setStatus('current')
hm2SfpDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpDateCode.setStatus('current')
hm2SfpInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpInfoVersion.setStatus('current')
hm2SfpInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpInfoPartNumber.setStatus('current')
hm2SfpInfoPartId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpInfoPartId.setStatus('current')
hm2SfpBitRateNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpBitRateNominal.setStatus('current')
hm2SfpBitRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpBitRateMin.setStatus('current')
hm2SfpBitRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpBitRateMax.setStatus('current')
hm2SfpMaxLength_fiber_9 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 16), Integer32()).setLabel("hm2SfpMaxLength-fiber-9").setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpMaxLength_fiber_9.setStatus('current')
hm2SfpMaxLength_fiber_50 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 17), Integer32()).setLabel("hm2SfpMaxLength-fiber-50").setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpMaxLength_fiber_50.setStatus('current')
hm2SfpMaxLength_fiber_e50 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 18), Integer32()).setLabel("hm2SfpMaxLength-fiber-e50").setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpMaxLength_fiber_e50.setStatus('current')
hm2SfpMaxLength_fiber_62_5 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 19), Integer32()).setLabel("hm2SfpMaxLength-fiber-62-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpMaxLength_fiber_62_5.setStatus('current')
hm2SfpMaxLength_copper = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 20), Integer32()).setLabel("hm2SfpMaxLength-copper").setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpMaxLength_copper.setStatus('current')
hm2SfpWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpWaveLength.setStatus('current')
hm2SfpWaveLengthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpWaveLengthTolerance.setStatus('current')
hm2SfpEnhancedOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 23), Bits().clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpEnhancedOptions.setStatus('current')
hm2SfpSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpSupported.setStatus('current')
hm2SfpSupportedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hirschmannID", 1), ("whiteList", 2), ("wrongSpeed", 3), ("noneEthernet", 4), ("tpSfpNotSupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpSupportedReason.setStatus('current')
hm2SfpDiagTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2), )
if mibBuilder.loadTexts: hm2SfpDiagTable.setStatus('current')
hm2SfpDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2SfpDiagEntry.setStatus('current')
hm2SfpCurrentBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpCurrentBitRate.setStatus('current')
hm2SfpCurrentTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpCurrentTemperature.setStatus('current')
hm2SfpCurrentTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpCurrentTxPower.setStatus('current')
hm2SfpCurrentRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpCurrentRxPower.setStatus('current')
hm2SfpCurrentTxPowerdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpCurrentTxPowerdBm.setStatus('current')
hm2SfpCurrentRxPowerdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpCurrentRxPowerdBm.setStatus('current')
hm2SfpCurrentRxPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("alarm", 3), ("unsupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpCurrentRxPowerState.setStatus('current')
hm2SfpWLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 3))
hm2SfpWLStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("absent", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpWLStatus.setStatus('current')
hm2SfpThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4), )
if mibBuilder.loadTexts: hm2SfpThresholdTable.setStatus('current')
hm2SfpThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2SfpThresholdEntry.setStatus('current')
hm2SfpTemperatureHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTemperatureHighAlarm.setStatus('current')
hm2SfpTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTemperatureHighWarning.setStatus('current')
hm2SfpTemperatureLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTemperatureLowAlarm.setStatus('current')
hm2SfpTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTemperatureLowWarning.setStatus('current')
hm2SfpTxPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTxPowerHighAlarm.setStatus('current')
hm2SfpTxPowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTxPowerHighWarning.setStatus('current')
hm2SfpTxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTxPowerLowAlarm.setStatus('current')
hm2SfpTxPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTxPowerLowWarning.setStatus('current')
hm2SfpRxPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpRxPowerHighAlarm.setStatus('current')
hm2SfpRxPowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpRxPowerHighWarning.setStatus('current')
hm2SfpRxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpRxPowerLowAlarm.setStatus('current')
hm2SfpRxPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpRxPowerLowWarning.setStatus('current')
hm2SfpTxPowerdBmHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTxPowerdBmHighAlarm.setStatus('current')
hm2SfpTxPowerdBmHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTxPowerdBmHighWarning.setStatus('current')
hm2SfpTxPowerdBmLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTxPowerdBmLowAlarm.setStatus('current')
hm2SfpTxPowerdBmLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpTxPowerdBmLowWarning.setStatus('current')
hm2SfpRxPowerdBmHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpRxPowerdBmHighAlarm.setStatus('current')
hm2SfpRxPowerdBmHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpRxPowerdBmHighWarning.setStatus('current')
hm2SfpRxPowerdBmLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpRxPowerdBmLowAlarm.setStatus('current')
hm2SfpRxPowerdBmLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 7, 4, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SfpRxPowerdBmLowWarning.setStatus('current')
hm2ExtNvmGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 1))
hm2ExtNvmChooseActive = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 1, 1), Hm2DeviceExtNVMType().clone('sd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ExtNvmChooseActive.setStatus('current')
hm2ExtNvmLogDevice = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 1, 2), Hm2DeviceExtNVMType().clone('sd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ExtNvmLogDevice.setStatus('current')
hm2ExtNvmAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("compatibility", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ExtNvmAdminMode.setStatus('current')
hm2ExtNvmOperMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("compatibility", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ExtNvmOperMode.setStatus('current')
hm2ExtNvmTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2), )
if mibBuilder.loadTexts: hm2ExtNvmTable.setStatus('current')
hm2ExtNvmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2ExtNvmTableIndex"))
if mibBuilder.loadTexts: hm2ExtNvmEntry.setStatus('current')
hm2ExtNvmTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 1), Hm2DeviceExtNVMType())
if mibBuilder.loadTexts: hm2ExtNvmTableIndex.setStatus('current')
hm2ExtNvmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notPresent", 1), ("removed", 2), ("ok", 3), ("outOfMemory", 4), ("genericErr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ExtNvmStatus.setStatus('current')
hm2ExtNvmManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ExtNvmManufacturerId.setStatus('current')
hm2ExtNvmHWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ExtNvmHWRevision.setStatus('current')
hm2ExtNvmProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ExtNvmProductName.setStatus('current')
hm2ExtNvmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ExtNvmVersion.setStatus('current')
hm2ExtNvmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ExtNvmSerialNum.setStatus('current')
hm2ExtNvmAutomaticSoftwareLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 8), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ExtNvmAutomaticSoftwareLoad.setStatus('current')
hm2ExtNvmConfigLoadPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("first", 1), ("second", 2), ("third", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ExtNvmConfigLoadPriority.setStatus('current')
hm2ExtNvmConfigSave = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 10), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ExtNvmConfigSave.setStatus('current')
hm2ExtNvmWritable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 11), HmEnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ExtNvmWritable.setStatus('current')
hm2ExtNvmAutomaticSshKeyLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 8, 2, 1, 12), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ExtNvmAutomaticSshKeyLoad.setStatus('current')
hm2AutoDisableIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1), )
if mibBuilder.loadTexts: hm2AutoDisableIntfTable.setStatus('current')
hm2AutoDisableIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2IfacePhysIndex"))
if mibBuilder.loadTexts: hm2AutoDisableIntfEntry.setStatus('current')
hm2AutoDisableIntfRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AutoDisableIntfRemainingTime.setStatus('current')
hm2AutoDisableIntfComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AutoDisableIntfComponentName.setStatus('current')
hm2AutoDisableIntfErrorReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("link-flap", 1), ("crc-error", 2), ("duplex-mismatch", 3), ("dhcp-snooping", 4), ("arp-rate", 5), ("bpdu-rate", 6), ("mac-based-port-security", 7), ("overload-detection", 8), ("speed-duplex", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AutoDisableIntfErrorReason.setStatus('current')
hm2AutoDisableIntfTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AutoDisableIntfTimer.setStatus('current')
hm2AutoDisableIntfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AutoDisableIntfReset.setStatus('current')
hm2AutoDisableIntfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AutoDisableIntfOperState.setStatus('current')
hm2AutoDisableIntfErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 1, 1, 7), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AutoDisableIntfErrorTime.setStatus('current')
hm2AutoDisableReasonTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 2), )
if mibBuilder.loadTexts: hm2AutoDisableReasonTable.setStatus('current')
hm2AutoDisableReasonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 2, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2AutoDisableReasons"))
if mibBuilder.loadTexts: hm2AutoDisableReasonEntry.setStatus('current')
hm2AutoDisableReasons = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("link-flap", 1), ("crc-error", 2), ("duplex-mismatch", 3), ("dhcp-snooping", 4), ("arp-rate", 5), ("bpdu-rate", 6), ("mac-based-port-security", 7), ("overload-detection", 8), ("speed-duplex", 9))))
if mibBuilder.loadTexts: hm2AutoDisableReasons.setStatus('current')
hm2AutoDisableReasonOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 2, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AutoDisableReasonOperation.setStatus('current')
hm2AutoDisableReasonCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("port-monitor", 2), ("network-security", 3), ("l2-redundancy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AutoDisableReasonCategory.setStatus('current')
hm2UnitTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 10, 100), )
if mibBuilder.loadTexts: hm2UnitTable.setStatus('current')
hm2UnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 10, 100, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2UnitIndex"))
if mibBuilder.loadTexts: hm2UnitEntry.setStatus('current')
hm2UnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 10, 100, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2UnitIndex.setStatus('current')
hm2UnitMaxModuleCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 10, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2UnitMaxModuleCapacity.setStatus('current')
hm2UnitMaxModulePortCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 10, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2UnitMaxModulePortCapacity.setStatus('current')
hm2ModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100), )
if mibBuilder.loadTexts: hm2ModuleTable.setStatus('current')
hm2ModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2UnitIndex"), (0, "HM2-DEVMGMT-MIB", "hm2ModuleIndex"))
if mibBuilder.loadTexts: hm2ModuleEntry.setStatus('current')
hm2ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2ModuleIndex.setStatus('current')
hm2ModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModuleId.setStatus('current')
hm2ModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModuleDescription.setStatus('current')
hm2ModuleProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModuleProductCode.setStatus('current')
hm2ModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModuleVersion.setStatus('current')
hm2ModuleNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModuleNumOfPorts.setStatus('current')
hm2ModuleFirstMauIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModuleFirstMauIndex.setStatus('obsolete')
hm2ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("physical", 1), ("configurable", 2), ("remove", 3), ("fix", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModuleStatus.setStatus('current')
hm2ModuleSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModuleSerialNum.setStatus('current')
hm2ModuleMinSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModuleMinSWVersion.setStatus('current')
hm2ModuleCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 11), Bits().clone(namedValues=NamedValues(("poe", 0), ("fpga", 1), ("ptp", 2), ("io-module", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModuleCapability.setStatus('current')
hm2ModuleInternalID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModuleInternalID.setStatus('current')
hm2ModuleInternalIDVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModuleInternalIDVariant.setStatus('obsolete')
hm2ModuleFirstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModuleFirstIfIndex.setStatus('current')
hm2ModuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 10, 1, 11, 100, 1, 15), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModuleAdminState.setStatus('current')
hm2SfpChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 10, 0, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2SfpChangeTrap.setStatus('current')
hm2AutoDisablePortTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 10, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("HM2-DEVMGMT-MIB", "hm2IfaceOperAdminStatus"), ("HM2-DEVMGMT-MIB", "hm2AutoDisableIntfErrorReason"))
if mibBuilder.loadTexts: hm2AutoDisablePortTrap.setStatus('current')
hm2ModulePluggedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 10, 0, 3)).setObjects(("HM2-DEVMGMT-MIB", "hm2UnitIndex"), ("HM2-DEVMGMT-MIB", "hm2ModuleIndex"))
if mibBuilder.loadTexts: hm2ModulePluggedTrap.setStatus('current')
hm2ModuleRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 10, 0, 4)).setObjects(("HM2-DEVMGMT-MIB", "hm2UnitIndex"), ("HM2-DEVMGMT-MIB", "hm2ModuleIndex"))
if mibBuilder.loadTexts: hm2ModuleRemovedTrap.setStatus('current')
hm2SFPRxPowerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 10, 0, 5)).setObjects(("HM2-DEVMGMT-MIB", "hm2SfpCurrentRxPowerState"))
if mibBuilder.loadTexts: hm2SFPRxPowerChangeTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-DEVMGMT-MIB", hm2ExtNvmChooseActive=hm2ExtNvmChooseActive, hm2IfaceOperAdminStatus=hm2IfaceOperAdminStatus, hm2SfpCurrentTemperature=hm2SfpCurrentTemperature, hm2DevMgmtActionFlushIGS=hm2DevMgmtActionFlushIGS, hm2SfpWLGroup=hm2SfpWLGroup, hm2ModuleSerialNum=hm2ModuleSerialNum, hm2SfpPartNumber=hm2SfpPartNumber, hm2ExtNvmGeneralGroup=hm2ExtNvmGeneralGroup, hm2DeviceMgmtMibNotifications=hm2DeviceMgmtMibNotifications, hm2ModuleRemovedTrap=hm2ModuleRemovedTrap, hm2SfpWaveLength=hm2SfpWaveLength, hm2ModuleIndex=hm2ModuleIndex, hm2AutoDisableIntfTimer=hm2AutoDisableIntfTimer, hm2ExtNvmLogDevice=hm2ExtNvmLogDevice, hm2ModuleEntry=hm2ModuleEntry, hm2DevMgmtProductDescr=hm2DevMgmtProductDescr, hm2SfpRxPowerLowAlarm=hm2SfpRxPowerLowAlarm, hm2IfaceLayoutIfIndexType=hm2IfaceLayoutIfIndexType, hm2SfpTxPowerdBmLowAlarm=hm2SfpTxPowerdBmLowAlarm, hm2SfpSupported=hm2SfpSupported, hm2ModuleFirstMauIndex=hm2ModuleFirstMauIndex, hm2DevMgmtSwVersEntry=hm2DevMgmtSwVersEntry, hm2SfpWaveLengthTolerance=hm2SfpWaveLengthTolerance, hm2ExtNvmSerialNum=hm2ExtNvmSerialNum, hm2AutoDisablePortTrap=hm2AutoDisablePortTrap, hm2IfaceExtEntry=hm2IfaceExtEntry, hm2DevMgmtActionFlushDnsClientCache=hm2DevMgmtActionFlushDnsClientCache, hm2ExtNvmEntry=hm2ExtNvmEntry, hm2DevMgmtSerialNumber=hm2DevMgmtSerialNumber, hm2ExtNvmWritable=hm2ExtNvmWritable, hm2AutoDisableIntfOperState=hm2AutoDisableIntfOperState, hm2ExtNvmProductName=hm2ExtNvmProductName, hm2SfpRxPowerdBmHighWarning=hm2SfpRxPowerdBmHighWarning, hm2SfpTxPowerdBmHighWarning=hm2SfpTxPowerdBmHighWarning, hm2IfaceLayoutStartIfIndex=hm2IfaceLayoutStartIfIndex, hm2DevMgmtActionFlushPortStats=hm2DevMgmtActionFlushPortStats, hm2SfpModuleType=hm2SfpModuleType, hm2ModulePluggedTrap=hm2ModulePluggedTrap, hm2SfpCurrentTxPower=hm2SfpCurrentTxPower, hm2SfpTemperatureLowWarning=hm2SfpTemperatureLowWarning, hm2ModuleNumOfPorts=hm2ModuleNumOfPorts, hm2SfpInfoVersion=hm2SfpInfoVersion, hm2UnitTable=hm2UnitTable, hm2SfpThresholdTable=hm2SfpThresholdTable, hm2ModuleVersion=hm2ModuleVersion, hm2IfaceLayoutEndIfIndex=hm2IfaceLayoutEndIfIndex, hm2SfpVendorOUI=hm2SfpVendorOUI, hm2SfpSupportedReason=hm2SfpSupportedReason, hm2DevMgmtActionFlushIpUdpHelperStats=hm2DevMgmtActionFlushIpUdpHelperStats, hm2ModuleDescription=hm2ModuleDescription, hm2ModuleStatus=hm2ModuleStatus, hm2IfaceGroup=hm2IfaceGroup, hm2SfpInfoPartNumber=hm2SfpInfoPartNumber, hm2ModuleAdminState=hm2ModuleAdminState, hm2DeviceMgmtTemperatureGroup=hm2DeviceMgmtTemperatureGroup, hm2DeviceMgmtSoftwareVersionGroup=hm2DeviceMgmtSoftwareVersionGroup, hm2DeviceMgmtMib=hm2DeviceMgmtMib, hm2SfpPartRev=hm2SfpPartRev, hm2DevMgmtSwMajorRelNum=hm2DevMgmtSwMajorRelNum, hm2SfpInfoPartId=hm2SfpInfoPartId, hm2SfpCurrentRxPower=hm2SfpCurrentRxPower, hm2DevMgmtActionFlushDnsCachingServerCache=hm2DevMgmtActionFlushDnsCachingServerCache, hm2DevMgmtActionFlushLdapUserCache=hm2DevMgmtActionFlushLdapUserCache, hm2DevMgmtSwVersBootcode=hm2DevMgmtSwVersBootcode, hm2SfpCurrentRxPowerState=hm2SfpCurrentRxPowerState, hm2SfpRxPowerHighAlarm=hm2SfpRxPowerHighAlarm, hm2UnitMaxModuleCapacity=hm2UnitMaxModuleCapacity, hm2ModuleMinSWVersion=hm2ModuleMinSWVersion, hm2UnitMaxModulePortCapacity=hm2UnitMaxModulePortCapacity, hm2ModuleCapability=hm2ModuleCapability, hm2ExtNvmHWRevision=hm2ExtNvmHWRevision, hm2ModuleInternalIDVariant=hm2ModuleInternalIDVariant, hm2ExtNvmTableIndex=hm2ExtNvmTableIndex, hm2DevMgmtActionFlushIeee8021AS=hm2DevMgmtActionFlushIeee8021AS, hm2SfpEnhancedOptions=hm2SfpEnhancedOptions, hm2DevMgmtHwVersion=hm2DevMgmtHwVersion, hm2IfaceEntry=hm2IfaceEntry, hm2ExtNvmGroup=hm2ExtNvmGroup, hm2SfpMediaType=hm2SfpMediaType, hm2ExtNvmVersion=hm2ExtNvmVersion, hm2SfpTxPowerdBmHighAlarm=hm2SfpTxPowerdBmHighAlarm, hm2DeviceMgmtSoftwareGroup=hm2DeviceMgmtSoftwareGroup, hm2SFPRxPowerChangeTrap=hm2SFPRxPowerChangeTrap, hm2SfpThresholdEntry=hm2SfpThresholdEntry, hm2ModuleTable=hm2ModuleTable, hm2SfpRxPowerLowWarning=hm2SfpRxPowerLowWarning, hm2DevMgmtSwFileIdx=hm2DevMgmtSwFileIdx, hm2DevMgmtSwFileLocation=hm2DevMgmtSwFileLocation, hm2IfaceTable=hm2IfaceTable, hm2AutoDisableReasonEntry=hm2AutoDisableReasonEntry, hm2DevMgmtLogicVersion=hm2DevMgmtLogicVersion, hm2SfpMaxLength_fiber_50=hm2SfpMaxLength_fiber_50, hm2DeviceMgmtHardwareGroup=hm2DeviceMgmtHardwareGroup, hm2ExtNvmAdminMode=hm2ExtNvmAdminMode, hm2AutoDisableReasonTable=hm2AutoDisableReasonTable, hm2DeviceMgmtMibObjects=hm2DeviceMgmtMibObjects, PYSNMP_MODULE_ID=hm2DeviceMgmtMib, hm2DevMgmtActionFlushMVRP=hm2DevMgmtActionFlushMVRP, hm2DevMgmtLogicIdx=hm2DevMgmtLogicIdx, hm2ExtNvmConfigSave=hm2ExtNvmConfigSave, hm2ModuleId=hm2ModuleId, hm2IfaceLayoutIndex=hm2IfaceLayoutIndex, hm2DevMgmtActionFlushMSRP=hm2DevMgmtActionFlushMSRP, hm2IfaceLayoutFormat=hm2IfaceLayoutFormat, hm2SfpMaxLength_copper=hm2SfpMaxLength_copper, hm2IfacePhysIndex=hm2IfacePhysIndex, hm2SfpBitRateMin=hm2SfpBitRateMin, hm2IfacePowerState=hm2IfacePowerState, hm2SfpCurrentRxPowerdBm=hm2SfpCurrentRxPowerdBm, hm2DevMgmtActionDelayPreset=hm2DevMgmtActionDelayPreset, hm2IfaceCableCrossing=hm2IfaceCableCrossing, hm2AutoDisableIntfRemainingTime=hm2AutoDisableIntfRemainingTime, hm2IfaceExtTable=hm2IfaceExtTable, hm2IfaceLayoutEntry=hm2IfaceLayoutEntry, hm2IfaceExtIfRole=hm2IfaceExtIfRole, hm2IfaceLayoutModuleCapacity=hm2IfaceLayoutModuleCapacity, hm2DevMgmtLogicVersTable=hm2DevMgmtLogicVersTable, hm2SfpDateCode=hm2SfpDateCode, hm2AutoDisableIntfErrorReason=hm2AutoDisableIntfErrorReason, hm2DeviceMgmtLogicVersionGroup=hm2DeviceMgmtLogicVersionGroup, hm2SfpTxPowerLowAlarm=hm2SfpTxPowerLowAlarm, hm2SfpRxPowerHighWarning=hm2SfpRxPowerHighWarning, hm2DevMgmtSwVersion=hm2DevMgmtSwVersion, hm2SfpBitRateMax=hm2SfpBitRateMax, hm2ExtNvmAutomaticSshKeyLoad=hm2ExtNvmAutomaticSshKeyLoad, hm2AutoDisableIntfReset=hm2AutoDisableIntfReset, hm2SfpRxPowerdBmLowAlarm=hm2SfpRxPowerdBmLowAlarm, hm2SfpTemperatureHighWarning=hm2SfpTemperatureHighWarning, hm2AutoDisableGroup=hm2AutoDisableGroup, hm2SfpInfoEntry=hm2SfpInfoEntry, hm2UnitGroup=hm2UnitGroup, hm2DevMgmtActionFlushAclStats=hm2DevMgmtActionFlushAclStats, hm2SfpRxPowerdBmLowWarning=hm2SfpRxPowerdBmLowWarning, hm2ExtNvmAutomaticSoftwareLoad=hm2ExtNvmAutomaticSoftwareLoad, hm2IfaceLayoutModulePortCapacity=hm2IfaceLayoutModulePortCapacity, hm2SfpInfoTable=hm2SfpInfoTable, hm2SfpWLStatus=hm2SfpWLStatus, hm2DevMgmtProductId=hm2DevMgmtProductId, hm2DevMgmtSwFileType=hm2DevMgmtSwFileType, hm2ExtNvmManufacturerId=hm2ExtNvmManufacturerId, hm2SfpCurrentTxPowerdBm=hm2SfpCurrentTxPowerdBm, hm2AutoDisableIntfTable=hm2AutoDisableIntfTable, hm2SfpChangeTrap=hm2SfpChangeTrap, hm2DevMgmtTemperature=hm2DevMgmtTemperature, hm2ModuleProductCode=hm2ModuleProductCode, hm2SfpTemperatureHighAlarm=hm2SfpTemperatureHighAlarm, hm2ModuleGroup=hm2ModuleGroup, hm2SfpTxPowerLowWarning=hm2SfpTxPowerLowWarning, hm2SfpMaxLength_fiber_62_5=hm2SfpMaxLength_fiber_62_5, hm2AutoDisableIntfComponentName=hm2AutoDisableIntfComponentName, Hm2DeviceExtNVMType=Hm2DeviceExtNVMType, hm2AutoDisableReasons=hm2AutoDisableReasons, hm2DevMgmtActionDelayCurrent=hm2DevMgmtActionDelayCurrent, hm2DevMgmtTemperatureUpperLimit=hm2DevMgmtTemperatureUpperLimit, hm2SfpMaxLength_fiber_e50=hm2SfpMaxLength_fiber_e50, hm2ExtNvmStatus=hm2ExtNvmStatus, hm2SfpTxPowerHighAlarm=hm2SfpTxPowerHighAlarm, hm2SfpGroup=hm2SfpGroup, hm2SfpDiagTable=hm2SfpDiagTable, hm2ExtNvmOperMode=hm2ExtNvmOperMode, hm2SfpTxPowerHighWarning=hm2SfpTxPowerHighWarning, hm2SfpDiagEntry=hm2SfpDiagEntry, hm2SfpConnector=hm2SfpConnector, hm2DevMgmtActionFlushFDB=hm2DevMgmtActionFlushFDB, hm2DevMgmtTemperatureLowerLimit=hm2DevMgmtTemperatureLowerLimit, hm2SfpMaxLength_fiber_9=hm2SfpMaxLength_fiber_9, hm2UnitEntry=hm2UnitEntry, hm2UnitIndex=hm2UnitIndex, hm2AutoDisableIntfEntry=hm2AutoDisableIntfEntry, hm2IfaceLayoutTable=hm2IfaceLayoutTable, hm2SfpTxPowerdBmLowWarning=hm2SfpTxPowerdBmLowWarning, hm2SfpVendorName=hm2SfpVendorName, hm2DeviceMgmtGroup=hm2DeviceMgmtGroup, hm2IfaceAutoPowerDown=hm2IfaceAutoPowerDown, hm2SfpSerialNum=hm2SfpSerialNum, hm2DevMgmtActionFlushARP=hm2DevMgmtActionFlushARP, hm2DeviceMgmtActionGroup=hm2DeviceMgmtActionGroup, hm2SfpTemperatureLowAlarm=hm2SfpTemperatureLowAlarm, hm2ExtNvmConfigLoadPriority=hm2ExtNvmConfigLoadPriority, hm2DevMgmtActionFlushEmailLogStats=hm2DevMgmtActionFlushEmailLogStats, hm2DevMgmtSwMinorRelNum=hm2DevMgmtSwMinorRelNum, hm2SfpRxPowerdBmHighAlarm=hm2SfpRxPowerdBmHighAlarm, hm2AutoDisableIntfErrorTime=hm2AutoDisableIntfErrorTime, hm2DevMgmtActionFlushMMRP=hm2DevMgmtActionFlushMMRP, hm2ModuleInternalID=hm2ModuleInternalID, hm2DevMgmtSwBugfixRelNum=hm2DevMgmtSwBugfixRelNum, hm2IfacePortCapabilityBits=hm2IfacePortCapabilityBits, hm2AutoDisableReasonOperation=hm2AutoDisableReasonOperation, hm2ExtNvmTable=hm2ExtNvmTable, hm2DevMgmtSwitchingCoreVersion=hm2DevMgmtSwitchingCoreVersion, hm2DevMgmtSwFileName=hm2DevMgmtSwFileName, hm2DevMgmtLogicAddress=hm2DevMgmtLogicAddress, hm2DevMgmtSwVersTable=hm2DevMgmtSwVersTable, hm2SfpCurrentBitRate=hm2SfpCurrentBitRate, hm2AutoDisableReasonCategory=hm2AutoDisableReasonCategory, hm2DevMgmtLogicVersEntry=hm2DevMgmtLogicVersEntry, hm2SfpBitRateNominal=hm2SfpBitRateNominal, hm2DevMgmtActionReset=hm2DevMgmtActionReset, hm2ModuleFirstIfIndex=hm2ModuleFirstIfIndex)
