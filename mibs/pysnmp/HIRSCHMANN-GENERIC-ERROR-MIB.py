#
# PySNMP MIB module HIRSCHMANN-GENERIC-ERROR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HIRSCHMANN-GENERIC-ERROR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, enterprises, IpAddress, ObjectIdentity, Unsigned32, Counter32, Counter64, Gauge32, TimeTicks, Bits, MibIdentifier, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "enterprises", "IpAddress", "ObjectIdentity", "Unsigned32", "Counter32", "Counter64", "Gauge32", "TimeTicks", "Bits", "MibIdentifier", "iso", "Integer32")
DisplayString, TextualConvention, AutonomousType, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "AutonomousType", "TestAndIncr")
hirschmann = MibIdentifier((1, 3, 6, 1, 4, 1, 248))
hmMgmtSEEErrorIDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 16, 2))
hmMgmtSEInfoIDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 16, 3))
hmRedundancyConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 1))
if mibBuilder.loadTexts: hmRedundancyConflict.setStatus('current')
hmRedundancyConflictPort = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 2))
if mibBuilder.loadTexts: hmRedundancyConflictPort.setStatus('current')
hmMaxNumExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 3))
if mibBuilder.loadTexts: hmMaxNumExceeded.setStatus('current')
hmAlreadyCreated = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 4))
if mibBuilder.loadTexts: hmAlreadyCreated.setStatus('current')
hmRedundancyConflictFpgaPort = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 5))
if mibBuilder.loadTexts: hmRedundancyConflictFpgaPort.setStatus('current')
hmVlanUnawareConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 6))
if mibBuilder.loadTexts: hmVlanUnawareConflict.setStatus('current')
hmRedundancyConflictPortShort = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 7))
if mibBuilder.loadTexts: hmRedundancyConflictPortShort.setStatus('current')
hmTableFullError = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 8))
if mibBuilder.loadTexts: hmTableFullError.setStatus('current')
hmFunctionNotUsableWithInterface = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 9))
if mibBuilder.loadTexts: hmFunctionNotUsableWithInterface.setStatus('current')
hmGeneralConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 10))
if mibBuilder.loadTexts: hmGeneralConflict.setStatus('current')
hmGeneralExceededRange = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 11))
if mibBuilder.loadTexts: hmGeneralExceededRange.setStatus('current')
hmRmonAlarmTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 100))
if mibBuilder.loadTexts: hmRmonAlarmTableFullErrorReturn.setStatus('current')
hmMgmtUdpPortInUse = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 200))
if mibBuilder.loadTexts: hmMgmtUdpPortInUse.setStatus('current')
hmMgmtTcpPortInUse = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 201))
if mibBuilder.loadTexts: hmMgmtTcpPortInUse.setStatus('current')
hmMgmtIPAddressConflictWithMgmtIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 202))
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithMgmtIP.setStatus('current')
hmMgmtIPAddressConflictWithOobIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 203))
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithOobIP.setStatus('current')
hmMgmtIPAddressConflictWithRouterIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 204))
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithRouterIP.setStatus('current')
hm2NetIPAddrInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 300))
if mibBuilder.loadTexts: hm2NetIPAddrInvalid.setStatus('current')
hm2NetIPAddrAndGateway = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 301))
if mibBuilder.loadTexts: hm2NetIPAddrAndGateway.setStatus('current')
hm2NetIPAddrAndSubnet = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 302))
if mibBuilder.loadTexts: hm2NetIPAddrAndSubnet.setStatus('current')
hm2NetPrefixLengthInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 303))
if mibBuilder.loadTexts: hm2NetPrefixLengthInvalid.setStatus('current')
hmMgmtSEInfoValueChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 3, 1))
if mibBuilder.loadTexts: hmMgmtSEInfoValueChanged.setStatus('current')
mibBuilder.exportSymbols("HIRSCHMANN-GENERIC-ERROR-MIB", hmMgmtSEInfoValueChanged=hmMgmtSEInfoValueChanged, hm2NetIPAddrInvalid=hm2NetIPAddrInvalid, hmMgmtIPAddressConflictWithMgmtIP=hmMgmtIPAddressConflictWithMgmtIP, hmRedundancyConflictPort=hmRedundancyConflictPort, hmRedundancyConflictFpgaPort=hmRedundancyConflictFpgaPort, hmMgmtSEInfoIDGroup=hmMgmtSEInfoIDGroup, hm2NetIPAddrAndGateway=hm2NetIPAddrAndGateway, hmGeneralExceededRange=hmGeneralExceededRange, hirschmann=hirschmann, hmRmonAlarmTableFullErrorReturn=hmRmonAlarmTableFullErrorReturn, hmMgmtTcpPortInUse=hmMgmtTcpPortInUse, hmTableFullError=hmTableFullError, hm2NetIPAddrAndSubnet=hm2NetIPAddrAndSubnet, hmGeneralConflict=hmGeneralConflict, hmMgmtUdpPortInUse=hmMgmtUdpPortInUse, hmRedundancyConflict=hmRedundancyConflict, hmMgmtSEEErrorIDGroup=hmMgmtSEEErrorIDGroup, hmRedundancyConflictPortShort=hmRedundancyConflictPortShort, hmMgmtIPAddressConflictWithOobIP=hmMgmtIPAddressConflictWithOobIP, hm2NetPrefixLengthInvalid=hm2NetPrefixLengthInvalid, hmMaxNumExceeded=hmMaxNumExceeded, hmFunctionNotUsableWithInterface=hmFunctionNotUsableWithInterface, hmMgmtIPAddressConflictWithRouterIP=hmMgmtIPAddressConflictWithRouterIP, hmAlreadyCreated=hmAlreadyCreated, hmVlanUnawareConflict=hmVlanUnawareConflict)
