#
# PySNMP MIB module BAY-STACK-IGMP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-IGMP-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:18:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, TimeTicks, IpAddress, Bits, Counter64, ObjectIdentity, Unsigned32, Integer32, Counter32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "TimeTicks", "IpAddress", "Bits", "Counter64", "ObjectIdentity", "Unsigned32", "Integer32", "Counter32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackIgmpExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 32))
bayStackIgmpExtMib.setRevisions(('2009-10-26 00:00', '2009-01-19 00:00', '2008-11-19 00:00',))
if mibBuilder.loadTexts: bayStackIgmpExtMib.setLastUpdated('200910260000Z')
if mibBuilder.loadTexts: bayStackIgmpExtMib.setOrganization('Nortel Ltd.')
bsIgmpExtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 32, 0))
bsIgmpExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 32, 1))
bsIgmpExtFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1), )
if mibBuilder.loadTexts: bsIgmpExtFilterProfileTable.setStatus('current')
bsIgmpExtFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1), ).setIndexNames((0, "BAY-STACK-IGMP-EXT-MIB", "bsIgmpExtFilterProfileId"))
if mibBuilder.loadTexts: bsIgmpExtFilterProfileEntry.setStatus('current')
bsIgmpExtFilterProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: bsIgmpExtFilterProfileId.setStatus('current')
bsIgmpExtFilterProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterProfileType.setStatus('current')
bsIgmpExtFilterProfilePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 3), PortList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterProfilePortList.setStatus('current')
bsIgmpExtFilterProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterProfileRowStatus.setStatus('current')
bsIgmpExtFilterProfileDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIgmpExtFilterProfileDroppedPackets.setStatus('current')
bsIgmpExtFilterRangeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2), )
if mibBuilder.loadTexts: bsIgmpExtFilterRangeTable.setStatus('current')
bsIgmpExtFilterRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-IGMP-EXT-MIB", "bsIgmpExtFilterProfileId"), (0, "BAY-STACK-IGMP-EXT-MIB", "bsIgmpExtFilterRangeId"))
if mibBuilder.loadTexts: bsIgmpExtFilterRangeEntry.setStatus('current')
bsIgmpExtFilterRangeId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: bsIgmpExtFilterRangeId.setStatus('current')
bsIgmpExtFilterRangeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressType.setStatus('current')
bsIgmpExtFilterRangeAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressStart.setStatus('current')
bsIgmpExtFilterRangeAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressEnd.setStatus('current')
bsIgmpExtFilterRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterRangeRowStatus.setStatus('current')
bsIgmpExtFilterProfileScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 3))
bsIgmpExtFilterProfileClearStats = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIgmpExtFilterProfileClearStats.setStatus('current')
bsIgmpExtScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 4))
bsIgmpExtAvailableHardwareResources = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIgmpExtAvailableHardwareResources.setStatus('current')
bsIgmpExtHardwareCompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ers5510", 1), ("nonErs5510", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIgmpExtHardwareCompatibilityMode.setStatus('current')
mibBuilder.exportSymbols("BAY-STACK-IGMP-EXT-MIB", bsIgmpExtObjects=bsIgmpExtObjects, bayStackIgmpExtMib=bayStackIgmpExtMib, bsIgmpExtScalars=bsIgmpExtScalars, PYSNMP_MODULE_ID=bayStackIgmpExtMib, bsIgmpExtFilterRangeEntry=bsIgmpExtFilterRangeEntry, bsIgmpExtFilterRangeAddressType=bsIgmpExtFilterRangeAddressType, bsIgmpExtFilterRangeTable=bsIgmpExtFilterRangeTable, bsIgmpExtFilterProfilePortList=bsIgmpExtFilterProfilePortList, bsIgmpExtFilterProfileTable=bsIgmpExtFilterProfileTable, bsIgmpExtHardwareCompatibilityMode=bsIgmpExtHardwareCompatibilityMode, bsIgmpExtFilterRangeAddressStart=bsIgmpExtFilterRangeAddressStart, bsIgmpExtFilterProfileRowStatus=bsIgmpExtFilterProfileRowStatus, bsIgmpExtFilterProfileClearStats=bsIgmpExtFilterProfileClearStats, bsIgmpExtNotifications=bsIgmpExtNotifications, bsIgmpExtAvailableHardwareResources=bsIgmpExtAvailableHardwareResources, bsIgmpExtFilterProfileType=bsIgmpExtFilterProfileType, bsIgmpExtFilterRangeId=bsIgmpExtFilterRangeId, bsIgmpExtFilterRangeAddressEnd=bsIgmpExtFilterRangeAddressEnd, bsIgmpExtFilterRangeRowStatus=bsIgmpExtFilterRangeRowStatus, bsIgmpExtFilterProfileEntry=bsIgmpExtFilterProfileEntry, bsIgmpExtFilterProfileScalars=bsIgmpExtFilterProfileScalars, bsIgmpExtFilterProfileId=bsIgmpExtFilterProfileId, bsIgmpExtFilterProfileDroppedPackets=bsIgmpExtFilterProfileDroppedPackets)
