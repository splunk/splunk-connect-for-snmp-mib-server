#
# PySNMP MIB module MODULES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MODULES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:03:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
lannet, = mibBuilder.importSymbols("GEN-MIB", "lannet")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Unsigned32, Bits, iso, Gauge32, MibIdentifier, Integer32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Unsigned32", "Bits", "iso", "Gauge32", "MibIdentifier", "Integer32", "ModuleIdentity", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eth = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12))
tok = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13))
ts = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 14))
ltalk = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 15))
cl = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 16))
bRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 21))
lntFddiGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 25))
ethAg = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 1))
ethAgTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 1, 1), )
if mibBuilder.loadTexts: ethAgTable.setStatus('mandatory')
ethAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 1, 1, 1), ).setIndexNames((0, "MODULES-MIB", "ethAgId"))
if mibBuilder.loadTexts: ethAgEntry.setStatus('mandatory')
ethAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethAgId.setStatus('mandatory')
ethAgPerfBusSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethAgPerfBusSelection.setStatus('mandatory')
ethGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 2))
ethGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 2, 1), )
if mibBuilder.loadTexts: ethGroupTable.setStatus('mandatory')
ethGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1), ).setIndexNames((0, "MODULES-MIB", "ethGroupId"))
if mibBuilder.loadTexts: ethGroupEntry.setStatus('mandatory')
ethGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupId.setStatus('mandatory')
ethGroupFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupFIFO.setStatus('mandatory')
ethGroup10BTPlus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroup10BTPlus.setStatus('mandatory')
ethGroupIntPortsRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupIntPortsRedundancy.setStatus('mandatory')
ethGroupBackboneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupBackboneMode.setStatus('mandatory')
ethGroupFOIRLPlusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupFOIRLPlusMode.setStatus('mandatory')
ethGroupWrongPortSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupWrongPortSelection.setStatus('mandatory')
ethGroupBackupBus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupBackupBus.setStatus('mandatory')
ethGroupSingleBusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupSingleBusMode.setStatus('mandatory')
ethGroupSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupSpecificOID.setStatus('mandatory')
ethGroup10FBPlus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroup10FBPlus.setStatus('mandatory')
ethGroupMasterClock = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupMasterClock.setStatus('mandatory')
ethGroupIdleTrx = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupIdleTrx.setStatus('mandatory')
ethGroupTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupTotalFrames.setStatus('mandatory')
ethGroupTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupTotalOctets.setStatus('mandatory')
ethGroupTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupTotalErrors.setStatus('mandatory')
ethGroupBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 9, 10, 12))).clone(namedValues=NamedValues(("bus1Tobus2", 3), ("bus1ToAUIPort", 5), ("bus2ToAUIPort", 6), ("bus1To10BTPort", 9), ("bus2To10BTPort", 10), ("portAUITo10BTPort", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupBridgeMode.setStatus('mandatory')
ethGroupBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupBroadcastPkts.setStatus('mandatory')
ethGroupMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupMulticastPkts.setStatus('mandatory')
ethPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 3))
ethPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 3, 1), )
if mibBuilder.loadTexts: ethPortTable.setStatus('mandatory')
ethPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1), ).setIndexNames((0, "MODULES-MIB", "ethPortGroupId"), (0, "MODULES-MIB", "ethPortId"))
if mibBuilder.loadTexts: ethPortEntry.setStatus('mandatory')
ethPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortGroupId.setStatus('mandatory')
ethPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortId.setStatus('mandatory')
ethPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("localJabber", 3), ("tld", 4), ("remoteJabber", 5), ("illSeq", 6), ("shortCirc", 7), ("partitionOrLocalJabber", 8), ("remoteFaultOrLockLost", 9), ("remoteFault", 10), ("lockLost", 11), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFunctionalStatus.setStatus('mandatory')
ethPortManPart = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortManPart.setStatus('mandatory')
ethPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortJabber.setStatus('mandatory')
ethPortNoAUILoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortNoAUILoop.setStatus('mandatory')
ethPortMJLP = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortMJLP.setStatus('mandatory')
ethPortFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFIFO.setStatus('mandatory')
ethPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("autoPartition", 1), ("notAutoPartition", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortAutoPartitionState.setStatus('mandatory')
ethPortSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortSQETest.setStatus('mandatory')
ethPortLastSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortLastSourceAddr.setStatus('mandatory')
ethPortUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("singleUser", 1), ("multiUser", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortUserStatus.setStatus('mandatory')
ethPortMainBusSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortMainBusSelection.setStatus('mandatory')
ethPortTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortTraffic.setStatus('mandatory')
ethPortFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFramesReceivedOK.setStatus('mandatory')
ethPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortRunts.setStatus('mandatory')
ethPortPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortPacketErrors.setStatus('mandatory')
ethPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortSpecificOID.setStatus('mandatory')
ethPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortCollisions.setStatus('mandatory')
ethPortPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortPartitions.setStatus('mandatory')
ethPortPygmys = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortPygmys.setStatus('mandatory')
ethPortJabberCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortJabberCounter.setStatus('mandatory')
ethPortCoupling = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("dc", 1), ("ac", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortCoupling.setStatus('mandatory')
ethPortPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("crossed", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortPolarity.setStatus('mandatory')
ethPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortReadableFrames.setStatus('mandatory')
ethPortReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortReadableOctets.setStatus('mandatory')
ethPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFCSErrors.setStatus('mandatory')
ethPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortAlignmentErrors.setStatus('mandatory')
ethPortFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFramesTooLong.setStatus('mandatory')
ethPortLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortLateEvents.setStatus('mandatory')
ethPortVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortVeryLongEvents.setStatus('mandatory')
ethPortDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortDataRateMismatches.setStatus('mandatory')
ethPortTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortTotalErrors.setStatus('mandatory')
ethPortSourceAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortSourceAddrChanges.setStatus('mandatory')
ethPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortOperStatus.setStatus('mandatory')
ethPortBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortBroadcastPkts.setStatus('mandatory')
ethPortMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortMulticastPkts.setStatus('mandatory')
ethIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 4))
ethIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 4, 1), )
if mibBuilder.loadTexts: ethIntPortTable.setStatus('mandatory')
ethIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1), ).setIndexNames((0, "MODULES-MIB", "ethIntPortGroupId"), (0, "MODULES-MIB", "ethIntPortId"))
if mibBuilder.loadTexts: ethIntPortEntry.setStatus('mandatory')
ethIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortGroupId.setStatus('mandatory')
ethIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortId.setStatus('mandatory')
ethIntPortPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortPartition.setStatus('mandatory')
ethIntPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortJabber.setStatus('deprecated')
ethIntPortBackedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntPortBackedUp.setStatus('mandatory')
ethBus = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 5))
ethBusPerfTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 5, 1), )
if mibBuilder.loadTexts: ethBusPerfTable.setStatus('mandatory')
ethBusPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1), ).setIndexNames((0, "MODULES-MIB", "ethBusPerfAgId"), (0, "MODULES-MIB", "ethBusPerfId"))
if mibBuilder.loadTexts: ethBusPerfEntry.setStatus('mandatory')
ethBusPerfAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPerfAgId.setStatus('mandatory')
ethBusPerfId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPerfId.setStatus('mandatory')
ethBusTrafficBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTrafficBuffer.setStatus('deprecated')
ethBusTrafficThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBusTrafficThresh.setStatus('mandatory')
ethBusPeakTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBusPeakTraffic.setStatus('mandatory')
ethBusTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalCollisions.setStatus('mandatory')
ethBusTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalPackets.setStatus('mandatory')
ethBusTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalErrors.setStatus('mandatory')
ethBusTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTraffic.setStatus('mandatory')
ethBusUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusUtilization.setStatus('mandatory')
ethBusPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPeakUtilization.setStatus('mandatory')
ethBusThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusThresholdStatus.setStatus('mandatory')
ethBusClockTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 5, 2), )
if mibBuilder.loadTexts: ethBusClockTable.setStatus('mandatory')
ethBusClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 5, 2, 1), ).setIndexNames((0, "MODULES-MIB", "ethBusClockBusId"), (0, "MODULES-MIB", "ethBusClockId"))
if mibBuilder.loadTexts: ethBusClockEntry.setStatus('mandatory')
ethBusClockBusId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockBusId.setStatus('mandatory')
ethBusClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockId.setStatus('mandatory')
ethBusClockTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("clockFailure", 2), ("busFailure", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockTestResult.setStatus('mandatory')
feth = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 6))
fethPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 6, 1))
fethPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1), )
if mibBuilder.loadTexts: fethPortTable.setStatus('mandatory')
fethPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1), ).setIndexNames((0, "MODULES-MIB", "fethPortGroupId"), (0, "MODULES-MIB", "fethPortId"))
if mibBuilder.loadTexts: fethPortEntry.setStatus('mandatory')
fethPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortGroupId.setStatus('mandatory')
fethPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortId.setStatus('mandatory')
fethPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 10, 12, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("rxJabber", 3), ("partition", 8), ("remoteFault", 10), ("wrongSpeed", 12), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortFunctionalStatus.setStatus('mandatory')
fethPortFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortFIFO.setStatus('mandatory')
fethPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortOperStatus.setStatus('mandatory')
fethPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("autoPartition", 1), ("notAutoPartition", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortAutoPartitionState.setStatus('mandatory')
fethPortFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortFramesReceived.setStatus('mandatory')
fethPortFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortFramesTransmitted.setStatus('mandatory')
fethPortTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortTotalErrors.setStatus('mandatory')
fethPortFramesTransmittedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortFramesTransmittedOK.setStatus('mandatory')
fethPortCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortCollisionFrames.setStatus('mandatory')
fethPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortAlignmentErrors.setStatus('mandatory')
fethPortRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortRxErrors.setStatus('mandatory')
fethPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortReadableFrames.setStatus('mandatory')
fethPortUpper32ReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortUpper32ReadableOctets.setStatus('mandatory')
fethPortLower32ReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortLower32ReadableOctets.setStatus('mandatory')
fethPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortFCSErrors.setStatus('mandatory')
fethPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortFrameTooLongs.setStatus('mandatory')
fethPortShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortShortEvents.setStatus('mandatory')
fethPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortRunts.setStatus('mandatory')
fethPortLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortLateEvents.setStatus('mandatory')
fethPortVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortVeryLongEvents.setStatus('mandatory')
fethPortDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortDataRateMismatches.setStatus('mandatory')
fethPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortAutoPartitions.setStatus('mandatory')
fethPortSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortSymbolErrors.setStatus('mandatory')
fethPortLastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortLastSourceAddress.setStatus('deprecated')
fethPortSourceAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortSourceAddrChanges.setStatus('mandatory')
fethPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2), ("fullDuplexAndFlowControl", 3), ("fullDuplexAndISL", 4), ("fullDuplexAndFlowControlAndISL", 5), ("notSupported", 255))).clone('halfDuplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fethPortMode.setStatus('mandatory')
fethPortLinkRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fethPortLinkRedundancyMode.setStatus('mandatory')
fethPortLinkRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("firstLinkActive", 1), ("secondLinkActive", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortLinkRedundancyStatus.setStatus('mandatory')
fethPortDormantLinkFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("remoteFault", 10), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortDormantLinkFunctionalStatus.setStatus('mandatory')
fethPortUpper32TransmittedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortUpper32TransmittedOctets.setStatus('mandatory')
fethPortLower32TransmittedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortLower32TransmittedOctets.setStatus('mandatory')
fethPortBroadcastReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortBroadcastReceivedFrames.setStatus('mandatory')
fethPortMulticastReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethPortMulticastReceivedFrames.setStatus('mandatory')
fethPortEnablePHY = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enPHY1", 1), ("enPHY2", 2), ("notSupported", 255))).clone('enPHY1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fethPortEnablePHY.setStatus('mandatory')
fethGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 6, 2))
fethGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1), )
if mibBuilder.loadTexts: fethGroupTable.setStatus('mandatory')
fethGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1), ).setIndexNames((0, "MODULES-MIB", "fethGroupId"))
if mibBuilder.loadTexts: fethGroupEntry.setStatus('mandatory')
fethGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethGroupId.setStatus('mandatory')
fethGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("operational", 2), ("malfunctioning", 3), ("notPresent", 4), ("underTest", 5), ("resetInProgress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethGroupOperStatus.setStatus('mandatory')
fethGroupUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethGroupUtilization.setStatus('mandatory')
fethGroupTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethGroupTotalFrames.setStatus('mandatory')
fethGroupUpper32TotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethGroupUpper32TotalOctets.setStatus('mandatory')
fethGroupLower32TotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethGroupLower32TotalOctets.setStatus('mandatory')
fethGroupTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fethGroupTotalErrors.setStatus('mandatory')
fethGroupFefiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fethGroupFefiEnable.setStatus('mandatory')
tokRing = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13, 1))
tokRingTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 1, 1), )
if mibBuilder.loadTexts: tokRingTable.setStatus('mandatory')
tokRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1), ).setIndexNames((0, "MODULES-MIB", "tokRingAgId"), (0, "MODULES-MIB", "tokRingId"))
if mibBuilder.loadTexts: tokRingEntry.setStatus('mandatory')
tokRingAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingAgId.setStatus('mandatory')
tokRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingId.setStatus('mandatory')
tokRingLeftSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingLeftSlot.setStatus('mandatory')
tokRingRightSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingRightSlot.setStatus('mandatory')
tokRingTrafficBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingTrafficBuffer.setStatus('deprecated')
tokRingTrafficThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingTrafficThresh.setStatus('mandatory')
tokRingPeakTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingPeakTraffic.setStatus('mandatory')
tokRingNumberOfStations = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingNumberOfStations.setStatus('mandatory')
tokRingConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingConfiguration.setStatus('mandatory')
tokRingBeaconing = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingBeaconing.setStatus('mandatory')
tokRingBeaconingStation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingBeaconingStation.setStatus('mandatory')
tokRingStationsMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("partial", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationsMatch.setStatus('mandatory')
tokRingTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingTraffic.setStatus('mandatory')
tokRingSecurityMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("perPort", 1), ("perRing", 2), ("disabled", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingSecurityMethod.setStatus('mandatory')
tokRingSecurityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingSecurityPolicy.setStatus('mandatory')
tokRingSecureAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingSecureAddr.setStatus('mandatory')
tokRingLastViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingLastViolation.setStatus('mandatory')
tokRingUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingUtilization.setStatus('mandatory')
tokRingPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingPeakUtilization.setStatus('mandatory')
tokRingBeaconingResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingBeaconingResolution.setStatus('mandatory')
tokRingThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingThresholdStatus.setStatus('mandatory')
tokRingActiveMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingActiveMonitor.setStatus('mandatory')
tokGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13, 2))
tokGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 2, 1), )
if mibBuilder.loadTexts: tokGroupTable.setStatus('mandatory')
tokGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1), ).setIndexNames((0, "MODULES-MIB", "tokGroupId"))
if mibBuilder.loadTexts: tokGroupEntry.setStatus('mandatory')
tokGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupId.setStatus('mandatory')
tokGroupAutoRightLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoRightLoop.setStatus('mandatory')
tokGroupAutoLeftLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoLeftLoop.setStatus('mandatory')
tokGroupManRightLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManRightLoop.setStatus('mandatory')
tokGroupManLeftLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManLeftLoop.setStatus('mandatory')
tokGroupRightNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRightNeighbor.setStatus('mandatory')
tokGroupLeftNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupLeftNeighbor.setStatus('mandatory')
tokGroupIOMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 255))).clone(namedValues=NamedValues(("single", 1), ("dualRingIn", 2), ("dualRingOut", 3), ("illegalMode", 4), ("lobe", 5), ("intRepeater", 6), ("star", 7), ("starAndRingOut", 8), ("starAndRI", 10), ("starAndSingle", 11), ("starAndIntRepeater", 12), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupIOMode.setStatus('mandatory')
tokGroupBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("modeA", 1), ("modeB", 2), ("modeC", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupBridgeMode.setStatus('mandatory')
tokGroupManLinkLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManLinkLoop.setStatus('mandatory')
tokGroupManBusLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManBusLoop.setStatus('mandatory')
tokGroupAutoLinkLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoLinkLoop.setStatus('mandatory')
tokGroupAutoBusLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoBusLoop.setStatus('mandatory')
tokGroupSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupSpecificOID.setStatus('mandatory')
tokGroupStarSpeedDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupStarSpeedDetect.setStatus('mandatory')
tokGroupLobeSpeedDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupLobeSpeedDetect.setStatus('mandatory')
tokGroupLSTBeaconing = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupLSTBeaconing.setStatus('mandatory')
tokGroupLSTBeaconThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupLSTBeaconThresh.setStatus('mandatory')
tokGroupRingTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 2, 2), )
if mibBuilder.loadTexts: tokGroupRingTable.setStatus('mandatory')
tokGroupRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1), ).setIndexNames((0, "MODULES-MIB", "tokGroupRingGroupId"), (0, "MODULES-MIB", "tokGroupRingId"))
if mibBuilder.loadTexts: tokGroupRingEntry.setStatus('mandatory')
tokGroupRingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingGroupId.setStatus('mandatory')
tokGroupRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingId.setStatus('mandatory')
tokGroupRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("oneMegabit", 2), ("fourMegabit", 3), ("sixteenMegabit", 4), ("sixteenMgbEarly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupRingSpeed.setStatus('mandatory')
tokGroupRingInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("notInserted", 1), ("inserted", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingInserted.setStatus('mandatory')
tokGroupRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupRingStatus.setStatus('mandatory')
tokPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13, 3))
tokPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 3, 1), )
if mibBuilder.loadTexts: tokPortTable.setStatus('mandatory')
tokPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1), ).setIndexNames((0, "MODULES-MIB", "tokPortGroupId"), (0, "MODULES-MIB", "tokPortId"))
if mibBuilder.loadTexts: tokPortEntry.setStatus('mandatory')
tokPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortGroupId.setStatus('mandatory')
tokPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortId.setStatus('mandatory')
tokPortBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokPortBypass.setStatus('mandatory')
tokPortConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("connected", 1), ("notConnected", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortConnected.setStatus('mandatory')
tokPortTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokPortTCP.setStatus('mandatory')
tokPortCableFault = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortCableFault.setStatus('mandatory')
tokPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("tld", 4), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortFunctionalStatus.setStatus('mandatory')
tokPortLastSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortLastSourceAddr.setStatus('mandatory')
tokPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortSpecificOID.setStatus('mandatory')
tokPortRingSpeedError = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortRingSpeedError.setStatus('mandatory')
tokPortSpeedDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokPortSpeedDetect.setStatus('mandatory')
tokPortRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortRingId.setStatus('mandatory')
tokPortMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokPortMapping.setStatus('mandatory')
tokRingStation = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13, 4))
tokRingStationTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 4, 1), )
if mibBuilder.loadTexts: tokRingStationTable.setStatus('mandatory')
tokRingStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1), ).setIndexNames((0, "MODULES-MIB", "tokRingId"), (0, "MODULES-MIB", "tokRingStationMAC"))
if mibBuilder.loadTexts: tokRingStationEntry.setStatus('mandatory')
tokRingStationRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationRingId.setStatus('mandatory')
tokRingStationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationMAC.setStatus('mandatory')
tokRingStationLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationLineErrors.setStatus('mandatory')
tokRingStationInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationInternalErrors.setStatus('mandatory')
tokRingStationBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationBurstErrors.setStatus('mandatory')
tokRingStationACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationACErrors.setStatus('mandatory')
tokRingStationAbortsTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationAbortsTrans.setStatus('mandatory')
tokRingStationLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationLostFrames.setStatus('mandatory')
tokRingStationReceiveCongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationReceiveCongErrors.setStatus('mandatory')
tokRingStationFramesCopied = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationFramesCopied.setStatus('mandatory')
tokRingStationFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationFrequencyErrors.setStatus('mandatory')
tokRingStationTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationTokenErrors.setStatus('mandatory')
tokRingStationTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationTotalErrors.setStatus('mandatory')
tokRingStationFunctionalType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ringStation", 1), ("agent", 2), ("bridge", 3), ("netbios", 4), ("ringParameterServer", 5), ("ringErrorMonitor", 6), ("lanManager", 7), ("activeMonitor", 8), ("other", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationFunctionalType.setStatus('mandatory')
tokIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13, 5))
tokIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 5, 1), )
if mibBuilder.loadTexts: tokIntPortTable.setStatus('mandatory')
tokIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1), ).setIndexNames((0, "MODULES-MIB", "tokIntPortGroupId"), (0, "MODULES-MIB", "tokIntPortId"))
if mibBuilder.loadTexts: tokIntPortEntry.setStatus('mandatory')
tokIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokIntPortGroupId.setStatus('mandatory')
tokIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokIntPortId.setStatus('mandatory')
tokIntPortLeftNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2), ("bypass", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokIntPortLeftNeighbor.setStatus('mandatory')
tokIntPortRightNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2), ("bypass", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokIntPortRightNeighbor.setStatus('mandatory')
tokIntPortManLeftLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokIntPortManLeftLoop.setStatus('mandatory')
tokIntPortManRightLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokIntPortManRightLoop.setStatus('mandatory')
tokIntPortAutoLeftLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokIntPortAutoLeftLoop.setStatus('mandatory')
tokIntPortAutoRightLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokIntPortAutoRightLoop.setStatus('mandatory')
tsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 14, 1))
tsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 14, 1, 1), )
if mibBuilder.loadTexts: tsGroupTable.setStatus('mandatory')
tsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 14, 1, 1, 1), ).setIndexNames((0, "MODULES-MIB", "tsGroupId"))
if mibBuilder.loadTexts: tsGroupEntry.setStatus('mandatory')
tsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupId.setStatus('mandatory')
tsGroupLATStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupLATStatus.setStatus('mandatory')
tsGroupOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 14, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diagnostics", 1), ("diagnosticsFailure", 2), ("loading", 3), ("loadingFailure", 4), ("operational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupOperationMode.setStatus('mandatory')
ltalkPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 15, 1))
ltalkPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 15, 1, 1), )
if mibBuilder.loadTexts: ltalkPortTable.setStatus('mandatory')
ltalkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1), ).setIndexNames((0, "MODULES-MIB", "ltalkPortGroupId"), (0, "MODULES-MIB", "ltalkPortId"))
if mibBuilder.loadTexts: ltalkPortEntry.setStatus('mandatory')
ltalkPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortGroupId.setStatus('mandatory')
ltalkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortId.setStatus('mandatory')
ltalkPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltalkPortTest.setStatus('mandatory')
ltalkPortTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortTestResult.setStatus('mandatory')
ltalkPortJam = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortJam.setStatus('mandatory')
clGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 16, 1))
clGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 16, 1, 1), )
if mibBuilder.loadTexts: clGroupTable.setStatus('mandatory')
clGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1), ).setIndexNames((0, "MODULES-MIB", "clGroupId"))
if mibBuilder.loadTexts: clGroupEntry.setStatus('mandatory')
clGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clGroupId.setStatus('mandatory')
clGroupClockRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupClockRedundancy.setStatus('mandatory')
clGroupMainClock = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupMainClock.setStatus('mandatory')
clGroupTestClocks = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupTestClocks.setStatus('mandatory')
clPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 16, 2))
clPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 16, 2, 1), )
if mibBuilder.loadTexts: clPortTable.setStatus('mandatory')
clPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 16, 2, 1, 1), ).setIndexNames((0, "MODULES-MIB", "clPortGroupId"), (0, "MODULES-MIB", "clPortId"))
if mibBuilder.loadTexts: clPortEntry.setStatus('mandatory')
clPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortGroupId.setStatus('mandatory')
clPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortId.setStatus('mandatory')
clPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortFunctionalStatus.setStatus('mandatory')
iwb = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 21, 1))
iwr = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 21, 2))
itr = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 21, 3))
iwrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 21, 2, 1), )
if mibBuilder.loadTexts: iwrGroupTable.setStatus('mandatory')
iwrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 21, 2, 1, 1), ).setIndexNames((0, "MODULES-MIB", "iwrGroupId"))
if mibBuilder.loadTexts: iwrGroupEntry.setStatus('mandatory')
iwrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrGroupId.setStatus('mandatory')
iwrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("run", 1), ("boot", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrOperState.setStatus('mandatory')
iwrPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrPMState.setStatus('mandatory')
iwrIOMState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrIOMState.setStatus('mandatory')
iwrEthernetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("bus4", 1), ("ex10bt", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iwrEthernetMode.setStatus('mandatory')
iwrPrimaryFDDIInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("inserted", 1), ("bypassed", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrPrimaryFDDIInsert.setStatus('mandatory')
iwrSecondaryFDDIInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("inserted", 1), ("bypassed", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrSecondaryFDDIInsert.setStatus('mandatory')
iwrWANTable = MibTable((1, 3, 6, 1, 4, 1, 81, 21, 2, 2), )
if mibBuilder.loadTexts: iwrWANTable.setStatus('mandatory')
iwrWANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 21, 2, 2, 1), ).setIndexNames((0, "MODULES-MIB", "iwrWANGroupId"), (0, "MODULES-MIB", "iwrWANPortId"))
if mibBuilder.loadTexts: iwrWANEntry.setStatus('mandatory')
iwrWANGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrWANGroupId.setStatus('mandatory')
iwrWANPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrWANPortId.setStatus('mandatory')
iwrWANConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrWANConnection.setStatus('mandatory')
iwrWANPortCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x21", 1), ("rs232", 2), ("v35", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrWANPortCableType.setStatus('mandatory')
iwrInterfaceAddrTable = MibTable((1, 3, 6, 1, 4, 1, 81, 21, 2, 3), )
if mibBuilder.loadTexts: iwrInterfaceAddrTable.setStatus('mandatory')
iwrInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 21, 2, 3, 1), ).setIndexNames((0, "MODULES-MIB", "iwrInterfaceGroupId"), (0, "MODULES-MIB", "iwrInterfaceId"))
if mibBuilder.loadTexts: iwrInterfaceEntry.setStatus('mandatory')
iwrInterfaceGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrInterfaceGroupId.setStatus('mandatory')
iwrInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrInterfaceId.setStatus('mandatory')
iwrInterfaceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrInterfaceAddr.setStatus('mandatory')
iwrInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrInterfaceMask.setStatus('mandatory')
iwrInterfaceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrInterfaceMacAddress.setStatus('mandatory')
itrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 21, 3, 1), )
if mibBuilder.loadTexts: itrGroupTable.setStatus('mandatory')
itrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 21, 3, 1, 1), ).setIndexNames((0, "MODULES-MIB", "itrGroupId"))
if mibBuilder.loadTexts: itrGroupEntry.setStatus('mandatory')
itrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrGroupId.setStatus('mandatory')
itrMainSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrMainSWVersion.setStatus('mandatory')
itrConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrConfigState.setStatus('mandatory')
itrModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("oper", 1), ("load", 2), ("setup", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrModuleState.setStatus('mandatory')
itrLinkTable = MibTable((1, 3, 6, 1, 4, 1, 81, 21, 3, 2), )
if mibBuilder.loadTexts: itrLinkTable.setStatus('mandatory')
itrLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1), ).setIndexNames((0, "MODULES-MIB", "itrLinkGroupId"), (0, "MODULES-MIB", "itrLinkPortId"))
if mibBuilder.loadTexts: itrLinkEntry.setStatus('mandatory')
itrLinkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkGroupId.setStatus('mandatory')
itrLinkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkPortId.setStatus('mandatory')
itrLinkIf = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v11", 1), ("v24", 2), ("v35", 3), ("dte-dce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkIf.setStatus('mandatory')
itrLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("async", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkMode.setStatus('mandatory')
itrLinkAsyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 255))).clone(namedValues=NamedValues(("r2400", 1), ("r4800", 2), ("r9600", 3), ("r14400", 4), ("r19200", 5), ("r38400", 6), ("r56000", 7), ("r57600", 8), ("r64000", 9), ("r115200", 10), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkAsyncRate.setStatus('mandatory')
itrLinkSyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 255))).clone(namedValues=NamedValues(("r1200", 1), ("r2400", 2), ("r4800", 3), ("r9600", 4), ("r14400", 5), ("r19200", 6), ("r38400", 7), ("r48000", 8), ("r56000", 9), ("r57600", 10), ("r64000", 11), ("r112000", 12), ("r128000", 13), ("r256000", 14), ("r384000", 15), ("r512000", 16), ("r786000", 17), ("r1024000", 18), ("r1544000", 19), ("r2048000", 20), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkSyncRate.setStatus('mandatory')
itrLinkParity = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkParity.setStatus('deprecated')
itrLinkParityEvenOdd = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkParityEvenOdd.setStatus('deprecated')
itrLinkStopBit = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("none", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkStopBit.setStatus('mandatory')
itrLinkRemoteLANConn = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkRemoteLANConn.setStatus('mandatory')
itrLinkFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("noRxClk", 3), ("disable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkFunctionalStatus.setStatus('mandatory')
itrLinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("enabled", 1), ("enabledOnDemand", 2), ("disabled", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkAdminStatus.setStatus('mandatory')
itrLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkReset.setStatus('mandatory')
itrLinkConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("trying", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkConnectionStatus.setStatus('mandatory')
itrLinkDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("seven", 1), ("eight", 2), ("none", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkDataBits.setStatus('mandatory')
itrLinkControlSignalsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkControlSignalsMode.setStatus('mandatory')
itrLinkParityType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 21, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("noParity", 1), ("even", 2), ("odd", 3), ("none", 4), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkParityType.setStatus('mandatory')
lntFddiPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 25, 1))
lntFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 25, 1, 1), )
if mibBuilder.loadTexts: lntFddiPortTable.setStatus('mandatory')
lntFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1), ).setIndexNames((0, "MODULES-MIB", "lntFddiPortGroupId"), (0, "MODULES-MIB", "lntFddiPortId"))
if mibBuilder.loadTexts: lntFddiPortEntry.setStatus('mandatory')
lntFddiPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortGroupId.setStatus('mandatory')
lntFddiPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortId.setStatus('mandatory')
lntFddiPortMACCurrentPath = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lntFddiPortMACCurrentPath.setStatus('mandatory')
lntFddiPortOpticalSwitchExist = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("not-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortOpticalSwitchExist.setStatus('mandatory')
lntFddiPortRingConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("thru", 1), ("wrap-a", 2), ("wrap-b", 3), ("wrap-s", 4), ("isolate", 5), ("dualHomingA", 6), ("dualHomingB", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortRingConfiguration.setStatus('mandatory')
lntFddiPortLineStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("als", 1), ("ils", 2), ("mls", 3), ("hls", 4), ("qls", 5), ("nls", 6), ("sils", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortLineStatusA.setStatus('mandatory')
lntFddiPortLineStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("als", 1), ("ils", 2), ("mls", 3), ("hls", 4), ("qls", 5), ("nls", 6), ("sils", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortLineStatusB.setStatus('mandatory')
lntFddiPortRxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortRxTotalPackets.setStatus('mandatory')
lntFddiPortRxTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortRxTotalOctets.setStatus('mandatory')
lntFddiPortTxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortTxTotalPackets.setStatus('mandatory')
lntFddiPortTxTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lntFddiPortTxTotalOctets.setStatus('mandatory')
lntFddiPortIPXtoFDDIMatching = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("llc", 1), ("snap", 2), ("tunneled", 3), ("fddi-raw", 4), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lntFddiPortIPXtoFDDIMatching.setStatus('mandatory')
lntFddiPortFDDItoIPXMatching = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 25, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("llc", 1), ("snap", 2), ("eth-2", 3), ("eth-raw", 4), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lntFddiPortFDDItoIPXMatching.setStatus('mandatory')
mibBuilder.exportSymbols("MODULES-MIB", fethPortBroadcastReceivedFrames=fethPortBroadcastReceivedFrames, iwrPMState=iwrPMState, tokPortCableFault=tokPortCableFault, tokRingBeaconing=tokRingBeaconing, iwrInterfaceGroupId=iwrInterfaceGroupId, tokIntPortAutoRightLoop=tokIntPortAutoRightLoop, itrMainSWVersion=itrMainSWVersion, ethIntPortBackedUp=ethIntPortBackedUp, ethBusPerfEntry=ethBusPerfEntry, iwrIOMState=iwrIOMState, tokRingId=tokRingId, tokGroupManBusLoop=tokGroupManBusLoop, tokGroupLeftNeighbor=tokGroupLeftNeighbor, tokRingEntry=tokRingEntry, fethPortTable=fethPortTable, ethBusTotalErrors=ethBusTotalErrors, tsGroupLATStatus=tsGroupLATStatus, ethPortSpecificOID=ethPortSpecificOID, iwrWANEntry=iwrWANEntry, fethGroupFefiEnable=fethGroupFefiEnable, fethPortGroupId=fethPortGroupId, itrLinkFunctionalStatus=itrLinkFunctionalStatus, iwrWANPortId=iwrWANPortId, tokPortGroupId=tokPortGroupId, ltalkPortJam=ltalkPortJam, fethPortFunctionalStatus=fethPortFunctionalStatus, ethPortId=ethPortId, ltalk=ltalk, fethPortFramesTransmitted=fethPortFramesTransmitted, tokRingStationReceiveCongErrors=tokRingStationReceiveCongErrors, ethPortFramesTooLong=ethPortFramesTooLong, tokRingStationACErrors=tokRingStationACErrors, ethPortGroupId=ethPortGroupId, tokGroupAutoRightLoop=tokGroupAutoRightLoop, tokPortFunctionalStatus=tokPortFunctionalStatus, ethAgEntry=ethAgEntry, fethPortSourceAddrChanges=fethPortSourceAddrChanges, iwrSecondaryFDDIInsert=iwrSecondaryFDDIInsert, tokGroupAutoLinkLoop=tokGroupAutoLinkLoop, fethPortTotalErrors=fethPortTotalErrors, tokPortLastSourceAddr=tokPortLastSourceAddr, ethGroup10FBPlus=ethGroup10FBPlus, clPort=clPort, tokGroupManRightLoop=tokGroupManRightLoop, fethGroupEntry=fethGroupEntry, ethPortPartitions=ethPortPartitions, tokGroupIOMode=tokGroupIOMode, ethPortReadableOctets=ethPortReadableOctets, itrLinkAdminStatus=itrLinkAdminStatus, ethBusTraffic=ethBusTraffic, ethBusClockTestResult=ethBusClockTestResult, ethGroupFIFO=ethGroupFIFO, tokPortEntry=tokPortEntry, tokPortTable=tokPortTable, tokGroupRingId=tokGroupRingId, feth=feth, fethGroupLower32TotalOctets=fethGroupLower32TotalOctets, bRouter=bRouter, fethGroupTable=fethGroupTable, ethGroupTotalFrames=ethGroupTotalFrames, ethPortAutoPartitionState=ethPortAutoPartitionState, fethPortUpper32TransmittedOctets=fethPortUpper32TransmittedOctets, ethPortAlignmentErrors=ethPortAlignmentErrors, fethPortEnablePHY=fethPortEnablePHY, tokRingStationAbortsTrans=tokRingStationAbortsTrans, tokPortMapping=tokPortMapping, tsGroupTable=tsGroupTable, ethPortUserStatus=ethPortUserStatus, tokRingLastViolation=tokRingLastViolation, lntFddiPort=lntFddiPort, ethPortLastSourceAddr=ethPortLastSourceAddr, tokIntPortAutoLeftLoop=tokIntPortAutoLeftLoop, tokRingStationBurstErrors=tokRingStationBurstErrors, tokGroupLobeSpeedDetect=tokGroupLobeSpeedDetect, tokGroupRingEntry=tokGroupRingEntry, tokRingTraffic=tokRingTraffic, ethPortFunctionalStatus=ethPortFunctionalStatus, iwrInterfaceMacAddress=iwrInterfaceMacAddress, ethBusThresholdStatus=ethBusThresholdStatus, ltalkPortId=ltalkPortId, lntFddiPortId=lntFddiPortId, fethPortLinkRedundancyMode=fethPortLinkRedundancyMode, iwrInterfaceMask=iwrInterfaceMask, tokPortId=tokPortId, fethPortLower32TransmittedOctets=fethPortLower32TransmittedOctets, ethPortPolarity=ethPortPolarity, itrLinkAsyncRate=itrLinkAsyncRate, fethPortFrameTooLongs=fethPortFrameTooLongs, itrLinkSyncRate=itrLinkSyncRate, tokIntPortManRightLoop=tokIntPortManRightLoop, itrLinkConnectionStatus=itrLinkConnectionStatus, ethPortFramesReceivedOK=ethPortFramesReceivedOK, ethGroupBackupBus=ethGroupBackupBus, iwrInterfaceAddrTable=iwrInterfaceAddrTable, fethPortOperStatus=fethPortOperStatus, ethGroupMasterClock=ethGroupMasterClock, tokGroupRingSpeed=tokGroupRingSpeed, ethBusPerfTable=ethBusPerfTable, fethPortDormantLinkFunctionalStatus=fethPortDormantLinkFunctionalStatus, tokRingSecurityMethod=tokRingSecurityMethod, ethIntPortPartition=ethIntPortPartition, ethAgTable=ethAgTable, ethPortJabber=ethPortJabber, lntFddiPortRingConfiguration=lntFddiPortRingConfiguration, itrConfigState=itrConfigState, ethGroupIntPortsRedundancy=ethGroupIntPortsRedundancy, itrLinkPortId=itrLinkPortId, tokGroupLSTBeaconing=tokGroupLSTBeaconing, fethGroupTotalErrors=fethGroupTotalErrors, tokGroupStarSpeedDetect=tokGroupStarSpeedDetect, tokGroupRingStatus=tokGroupRingStatus, lntFddiPortOpticalSwitchExist=lntFddiPortOpticalSwitchExist, fethPortRunts=fethPortRunts, ethPortEntry=ethPortEntry, fethPortReadableFrames=fethPortReadableFrames, lntFddiPortRxTotalOctets=lntFddiPortRxTotalOctets, ethBusClockTable=ethBusClockTable, ethPortPacketErrors=ethPortPacketErrors, tokIntPortEntry=tokIntPortEntry, ethGroupMulticastPkts=ethGroupMulticastPkts, clGroupMainClock=clGroupMainClock, tokRingAgId=tokRingAgId, itrModuleState=itrModuleState, ethGroupTotalOctets=ethGroupTotalOctets, tokRingLeftSlot=tokRingLeftSlot, tsGroup=tsGroup, ethPortManPart=ethPortManPart, ethPortCollisions=ethPortCollisions, tokGroupAutoBusLoop=tokGroupAutoBusLoop, fethPortSymbolErrors=fethPortSymbolErrors, clPortEntry=clPortEntry, lntFddiPortFDDItoIPXMatching=lntFddiPortFDDItoIPXMatching, tokGroupRightNeighbor=tokGroupRightNeighbor, fethPortRxErrors=fethPortRxErrors, itrLinkGroupId=itrLinkGroupId, ethPortTraffic=ethPortTraffic, tokGroupSpecificOID=tokGroupSpecificOID, lntFddiPortEntry=lntFddiPortEntry, ethBusClockEntry=ethBusClockEntry, ethGroupBridgeMode=ethGroupBridgeMode, tokGroupAutoLeftLoop=tokGroupAutoLeftLoop, itrGroupId=itrGroupId, ethIntPort=ethIntPort, tokIntPortManLeftLoop=tokIntPortManLeftLoop, ltalkPortTest=ltalkPortTest, ethIntPortId=ethIntPortId, tokRingBeaconingStation=tokRingBeaconingStation, ethPortMJLP=ethPortMJLP, clGroupId=clGroupId, itrLinkRemoteLANConn=itrLinkRemoteLANConn, ethBusTotalPackets=ethBusTotalPackets, fethPortAutoPartitions=fethPortAutoPartitions, ethPortLateEvents=ethPortLateEvents, iwrWANTable=iwrWANTable, ethPortFCSErrors=ethPortFCSErrors, tokRingPeakUtilization=tokRingPeakUtilization, ltalkPortTable=ltalkPortTable, tokPortSpecificOID=tokPortSpecificOID, iwrGroupEntry=iwrGroupEntry, clGroupTable=clGroupTable, lntFddiPortLineStatusA=lntFddiPortLineStatusA, ethPortDataRateMismatches=ethPortDataRateMismatches, fethPortCollisionFrames=fethPortCollisionFrames, tokRingStation=tokRingStation, ethBusTrafficBuffer=ethBusTrafficBuffer, lntFddiPortTxTotalOctets=lntFddiPortTxTotalOctets, ethGroupEntry=ethGroupEntry, itrLinkParityEvenOdd=itrLinkParityEvenOdd, ethBusTrafficThresh=ethBusTrafficThresh, ethPort=ethPort, fethGroup=fethGroup, itrLinkStopBit=itrLinkStopBit, clGroupClockRedundancy=clGroupClockRedundancy, lntFddiPortTable=lntFddiPortTable, fethGroupUpper32TotalOctets=fethGroupUpper32TotalOctets, clPortGroupId=clPortGroupId, itrLinkIf=itrLinkIf, clPortId=clPortId, fethPortDataRateMismatches=fethPortDataRateMismatches, itrLinkDataBits=itrLinkDataBits, fethPortAutoPartitionState=fethPortAutoPartitionState, itrLinkMode=itrLinkMode, iwr=iwr, tsGroupEntry=tsGroupEntry, ethGroupIdleTrx=ethGroupIdleTrx, tokIntPortRightNeighbor=tokIntPortRightNeighbor, fethPortLateEvents=fethPortLateEvents, tokRingStationLostFrames=tokRingStationLostFrames, tokRingTable=tokRingTable, lntFddiPortLineStatusB=lntFddiPortLineStatusB, clPortTable=clPortTable, tokRingStationLineErrors=tokRingStationLineErrors, tokRingStationEntry=tokRingStationEntry, tokPortRingId=tokPortRingId, ethPortReadableFrames=ethPortReadableFrames, itrGroupTable=itrGroupTable, clGroup=clGroup, fethPortEntry=fethPortEntry, fethPortLower32ReadableOctets=fethPortLower32ReadableOctets, ethGroupTotalErrors=ethGroupTotalErrors, ethGroupSpecificOID=ethGroupSpecificOID, ethIntPortGroupId=ethIntPortGroupId, iwrInterfaceEntry=iwrInterfaceEntry, iwrGroupId=iwrGroupId, tokRingStationInternalErrors=tokRingStationInternalErrors, ethGroup=ethGroup, ethBusPeakUtilization=ethBusPeakUtilization, ethBusPerfAgId=ethBusPerfAgId, tokIntPortGroupId=tokIntPortGroupId, tokRing=tokRing, tokPortRingSpeedError=tokPortRingSpeedError, itrLinkReset=itrLinkReset, fethPortShortEvents=fethPortShortEvents, ethGroupBackboneMode=ethGroupBackboneMode, ethGroup10BTPlus=ethGroup10BTPlus, tokRingStationFrequencyErrors=tokRingStationFrequencyErrors, fethGroupUtilization=fethGroupUtilization, iwrInterfaceAddr=iwrInterfaceAddr, tokGroup=tokGroup, ethGroupWrongPortSelection=ethGroupWrongPortSelection, itrLinkTable=itrLinkTable, tokRingStationMAC=tokRingStationMAC, ethIntPortEntry=ethIntPortEntry, tokGroupTable=tokGroupTable, tokRingStationFramesCopied=tokRingStationFramesCopied, iwb=iwb, tokGroupEntry=tokGroupEntry, ethGroupFOIRLPlusMode=ethGroupFOIRLPlusMode, fethPortFCSErrors=fethPortFCSErrors, ltalkPortTestResult=ltalkPortTestResult, ethPortBroadcastPkts=ethPortBroadcastPkts, tokRingBeaconingResolution=tokRingBeaconingResolution, tok=tok, itrGroupEntry=itrGroupEntry, ethPortFIFO=ethPortFIFO, ethPortSourceAddrChanges=ethPortSourceAddrChanges, tokGroupBridgeMode=tokGroupBridgeMode, lntFddiPortGroupId=lntFddiPortGroupId, tokRingNumberOfStations=tokRingNumberOfStations, tokPortSpeedDetect=tokPortSpeedDetect, tokRingSecurityPolicy=tokRingSecurityPolicy, ethPortSQETest=ethPortSQETest, iwrInterfaceId=iwrInterfaceId, ts=ts, tsGroupId=tsGroupId, fethPortVeryLongEvents=fethPortVeryLongEvents, ltalkPort=ltalkPort, fethGroupId=fethGroupId, itrLinkControlSignalsMode=itrLinkControlSignalsMode, fethGroupOperStatus=fethGroupOperStatus, ethPortTotalErrors=ethPortTotalErrors, itr=itr, iwrOperState=iwrOperState, tokRingPeakTraffic=tokRingPeakTraffic)
mibBuilder.exportSymbols("MODULES-MIB", tokRingStationRingId=tokRingStationRingId, eth=eth, ethPortRunts=ethPortRunts, tokGroupRingInserted=tokGroupRingInserted, tokRingSecureAddr=tokRingSecureAddr, tokRingUtilization=tokRingUtilization, ethBusClockId=ethBusClockId, ethIntPortJabber=ethIntPortJabber, ethGroupTable=ethGroupTable, ethBusClockBusId=ethBusClockBusId, clPortFunctionalStatus=clPortFunctionalStatus, ethBusPeakTraffic=ethBusPeakTraffic, ethAg=ethAg, tokPort=tokPort, ethGroupId=ethGroupId, lntFddiGroup=lntFddiGroup, ethAgId=ethAgId, tokGroupLSTBeaconThresh=tokGroupLSTBeaconThresh, tokPortConnected=tokPortConnected, iwrGroupTable=iwrGroupTable, fethPortMode=fethPortMode, tokRingStationTokenErrors=tokRingStationTokenErrors, ethPortNoAUILoop=ethPortNoAUILoop, tokGroupId=tokGroupId, ethBusUtilization=ethBusUtilization, tokRingRightSlot=tokRingRightSlot, fethPortLinkRedundancyStatus=fethPortLinkRedundancyStatus, ethPortMainBusSelection=ethPortMainBusSelection, tokGroupManLinkLoop=tokGroupManLinkLoop, tokIntPortId=tokIntPortId, itrLinkEntry=itrLinkEntry, lntFddiPortTxTotalPackets=lntFddiPortTxTotalPackets, tokRingTrafficBuffer=tokRingTrafficBuffer, ethPortOperStatus=ethPortOperStatus, fethPortId=fethPortId, ethBus=ethBus, fethPortFIFO=fethPortFIFO, tokRingStationFunctionalType=tokRingStationFunctionalType, ethPortMulticastPkts=ethPortMulticastPkts, fethPortUpper32ReadableOctets=fethPortUpper32ReadableOctets, ethPortCoupling=ethPortCoupling, itrLinkParityType=itrLinkParityType, lntFddiPortRxTotalPackets=lntFddiPortRxTotalPackets, clGroupTestClocks=clGroupTestClocks, clGroupEntry=clGroupEntry, tokIntPort=tokIntPort, ethGroupSingleBusMode=ethGroupSingleBusMode, tokGroupManLeftLoop=tokGroupManLeftLoop, fethPortAlignmentErrors=fethPortAlignmentErrors, ethPortVeryLongEvents=ethPortVeryLongEvents, lntFddiPortIPXtoFDDIMatching=lntFddiPortIPXtoFDDIMatching, ethAgPerfBusSelection=ethAgPerfBusSelection, tsGroupOperationMode=tsGroupOperationMode, ltalkPortGroupId=ltalkPortGroupId, ethBusPerfId=ethBusPerfId, iwrEthernetMode=iwrEthernetMode, ethPortJabberCounter=ethPortJabberCounter, tokRingActiveMonitor=tokRingActiveMonitor, tokRingStationsMatch=tokRingStationsMatch, itrLinkParity=itrLinkParity, tokRingStationTotalErrors=tokRingStationTotalErrors, iwrPrimaryFDDIInsert=iwrPrimaryFDDIInsert, tokIntPortTable=tokIntPortTable, iwrWANPortCableType=iwrWANPortCableType, lntFddiPortMACCurrentPath=lntFddiPortMACCurrentPath, fethPortMulticastReceivedFrames=fethPortMulticastReceivedFrames, ethGroupBroadcastPkts=ethGroupBroadcastPkts, tokRingStationTable=tokRingStationTable, fethGroupTotalFrames=fethGroupTotalFrames, tokGroupRingTable=tokGroupRingTable, tokRingConfiguration=tokRingConfiguration, iwrWANConnection=iwrWANConnection, ethPortPygmys=ethPortPygmys, tokPortBypass=tokPortBypass, tokGroupRingGroupId=tokGroupRingGroupId, iwrWANGroupId=iwrWANGroupId, ethPortTable=ethPortTable, tokIntPortLeftNeighbor=tokIntPortLeftNeighbor, fethPortFramesTransmittedOK=fethPortFramesTransmittedOK, tokRingTrafficThresh=tokRingTrafficThresh, ltalkPortEntry=ltalkPortEntry, ethBusTotalCollisions=ethBusTotalCollisions, cl=cl, tokPortTCP=tokPortTCP, ethIntPortTable=ethIntPortTable, fethPortFramesReceived=fethPortFramesReceived, tokRingThresholdStatus=tokRingThresholdStatus, fethPortLastSourceAddress=fethPortLastSourceAddress, fethPort=fethPort)
