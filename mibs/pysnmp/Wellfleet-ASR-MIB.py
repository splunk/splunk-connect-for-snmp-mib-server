#
# PySNMP MIB module Wellfleet-ASR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ASR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:32:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Counter64, NotificationType, Unsigned32, ModuleIdentity, MibIdentifier, IpAddress, TimeTicks, Gauge32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Counter64", "NotificationType", "Unsigned32", "ModuleIdentity", "MibIdentifier", "IpAddress", "TimeTicks", "Gauge32", "ObjectIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfAsrGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfAsrGroup")
wfAsrBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1))
wfAsrBaseCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrBaseCreate.setStatus('mandatory')
wfAsrBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrBaseEnable.setStatus('mandatory')
wfAsrBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrBaseState.setStatus('mandatory')
wfAsrNextHopRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrNextHopRetryLimit.setStatus('mandatory')
wfAsrSecureInFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSecureInFilter.setStatus('mandatory')
wfAsrSecureInValid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSecureInValid.setStatus('mandatory')
wfAsrHoldDownTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 7), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrHoldDownTimer.setStatus('mandatory')
wfAsrActiveSvcs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrActiveSvcs.setStatus('mandatory')
wfAsrFwdTblEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFwdTblEntries.setStatus('mandatory')
wfAsrFwdTblSeq = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFwdTblSeq.setStatus('mandatory')
wfAsrDnsProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 500, 32550))).clone(namedValues=NamedValues(("min", 1), ("default", 500), ("max", 32550))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrDnsProxyPort.setStatus('mandatory')
wfAsrMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(500))).clone(namedValues=NamedValues(("default", 500))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrMaxSessions.setStatus('mandatory')
wfAsrDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrDebugLevel.setStatus('mandatory')
wfAsrUseDynRdiscPref = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrUseDynRdiscPref.setStatus('mandatory')
wfAsrX213PriTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2), )
if mibBuilder.loadTexts: wfAsrX213PriTable.setStatus('mandatory')
wfAsrX213PriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrX213PriLowVal"), (0, "Wellfleet-ASR-MIB", "wfAsrX213PriHiVal"))
if mibBuilder.loadTexts: wfAsrX213PriEntry.setStatus('mandatory')
wfAsrX213PriDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrX213PriDelete.setStatus('mandatory')
wfAsrX213PriLowVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrX213PriLowVal.setStatus('mandatory')
wfAsrX213PriHiVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrX213PriHiVal.setStatus('mandatory')
wfAsrX213PriSwVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrX213PriSwVal.setStatus('mandatory')
wfAsrRtrPriTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3), )
if mibBuilder.loadTexts: wfAsrRtrPriTable.setStatus('mandatory')
wfAsrRtrPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrRtrPriLowVal"), (0, "Wellfleet-ASR-MIB", "wfAsrRtrPriHiVal"))
if mibBuilder.loadTexts: wfAsrRtrPriEntry.setStatus('mandatory')
wfAsrRtrPriDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrRtrPriDelete.setStatus('mandatory')
wfAsrRtrPriLowVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrRtrPriLowVal.setStatus('mandatory')
wfAsrRtrPriHiVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrRtrPriHiVal.setStatus('mandatory')
wfAsrRtrPriCvtVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrRtrPriCvtVal.setStatus('mandatory')
wfAsrMultiHopTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4), )
if mibBuilder.loadTexts: wfAsrMultiHopTable.setStatus('mandatory')
wfAsrMultiHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrMhCircuitNumber"), (0, "Wellfleet-ASR-MIB", "wfAsrMhVcid1"), (0, "Wellfleet-ASR-MIB", "wfAsrMhVcid2"))
if mibBuilder.loadTexts: wfAsrMultiHopEntry.setStatus('mandatory')
wfAsrMultiHopDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrMultiHopDelete.setStatus('mandatory')
wfAsrMhCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrMhCircuitNumber.setStatus('mandatory')
wfAsrMhVcid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrMhVcid1.setStatus('mandatory')
wfAsrMhVcid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrMhVcid2.setStatus('mandatory')
wfAsrDirectExceptTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5), )
if mibBuilder.loadTexts: wfAsrDirectExceptTable.setStatus('mandatory')
wfAsrDirectExceptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrServiceProtocol"), (0, "Wellfleet-ASR-MIB", "wfAsrServicePort"))
if mibBuilder.loadTexts: wfAsrDirectExceptEntry.setStatus('mandatory')
wfAsrServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrServiceProtocol.setStatus('mandatory')
wfAsrServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrServicePort.setStatus('mandatory')
wfAsrSrcPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSrcPortLow.setStatus('mandatory')
wfAsrSrcPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSrcPortHigh.setStatus('mandatory')
wfAsrDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrDestPortLow.setStatus('mandatory')
wfAsrDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrDestPortHigh.setStatus('mandatory')
wfAsrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6), )
if mibBuilder.loadTexts: wfAsrCircuitTable.setStatus('mandatory')
wfAsrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrCircuitNumber"))
if mibBuilder.loadTexts: wfAsrCircuitEntry.setStatus('mandatory')
wfAsrCircuitCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrCircuitCreate.setStatus('mandatory')
wfAsrCircuitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrCircuitEnable.setStatus('mandatory')
wfAsrCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitState.setStatus('mandatory')
wfAsrCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitNumber.setStatus('mandatory')
wfAsrCircuitCallCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inboundonly", 1), ("outboundonly", 2), ("inboundandoutbound", 3), ("none", 4))).clone('outboundonly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrCircuitCallCtrl.setStatus('mandatory')
wfAsrCircuitInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitInReceives.setStatus('mandatory')
wfAsrCircuitInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitInDiscards.setStatus('mandatory')
wfAsrCircuitSetupRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitSetupRequests.setStatus('mandatory')
wfAsrCircuitSetupSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitSetupSucc.setStatus('mandatory')
wfAsrCircuitSetupFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitSetupFail.setStatus('mandatory')
wfAsrCircuitSVCsEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitSVCsEstablished.setStatus('mandatory')
wfAsrNegativeNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrNegativeNHR.setStatus('mandatory')
wfAsrSvcOutboundReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcOutboundReqFail.setStatus('mandatory')
wfAsrSvcInboundFilterFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcInboundFilterFail.setStatus('mandatory')
wfAsrSvcInboundCallValFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcInboundCallValFail.setStatus('mandatory')
wfAsrFiltTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7), )
if mibBuilder.loadTexts: wfAsrFiltTable.setStatus('mandatory')
wfAsrFiltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrFilterSlot"), (0, "Wellfleet-ASR-MIB", "wfAsrDestIpAddr"), (0, "Wellfleet-ASR-MIB", "wfAsrDestIpMask"), (0, "Wellfleet-ASR-MIB", "wfAsrSourceIpAddr"), (0, "Wellfleet-ASR-MIB", "wfAsrSourceIpMask"), (0, "Wellfleet-ASR-MIB", "wfAsrDestPortRangeLow"), (0, "Wellfleet-ASR-MIB", "wfAsrDestPortRangeHigh"), (0, "Wellfleet-ASR-MIB", "wfAsrSourcePortRangeLow"), (0, "Wellfleet-ASR-MIB", "wfAsrSourcePortRangeHigh"), (0, "Wellfleet-ASR-MIB", "wfAsrIPProtocol"))
if mibBuilder.loadTexts: wfAsrFiltEntry.setStatus('mandatory')
wfAsrFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrFilterCreate.setStatus('mandatory')
wfAsrFilterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFilterSlot.setStatus('mandatory')
wfAsrDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrDestIpAddr.setStatus('mandatory')
wfAsrDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrDestIpMask.setStatus('mandatory')
wfAsrSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSourceIpAddr.setStatus('mandatory')
wfAsrSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSourceIpMask.setStatus('mandatory')
wfAsrDestPortRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrDestPortRangeLow.setStatus('mandatory')
wfAsrDestPortRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrDestPortRangeHigh.setStatus('mandatory')
wfAsrSourcePortRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSourcePortRangeLow.setStatus('mandatory')
wfAsrSourcePortRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSourcePortRangeHigh.setStatus('mandatory')
wfAsrIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrIPProtocol.setStatus('mandatory')
wfAsrFilterTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFilterTtl.setStatus('mandatory')
wfAsrFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFilterType.setStatus('mandatory')
wfAsrSvcCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcCircuitNumber.setStatus('mandatory')
wfAsrSvcVcid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcVcid1.setStatus('mandatory')
wfAsrSvcVcid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcVcid2.setStatus('mandatory')
wfAsrSvcCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcCalledAddr.setStatus('mandatory')
wfAsrSvcSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcSetupTime.setStatus('mandatory')
wfAsrSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSvcType.setStatus('mandatory')
wfAsrSvcMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcMTU.setStatus('mandatory')
wfAsrSvcRouterPriOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcRouterPriOut.setStatus('mandatory')
wfAsrFrSvcCIRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcCIRIn.setStatus('mandatory')
wfAsrFrSvcCIROut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcCIROut.setStatus('mandatory')
wfAsrFrSvcBCIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcBCIn.setStatus('mandatory')
wfAsrFrSvcBCOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcBCOut.setStatus('mandatory')
wfAsrFrSvcBEIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcBEIn.setStatus('mandatory')
wfAsrFrSvcBEOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcBEOut.setStatus('mandatory')
wfAsrFrSvcX213Pri = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcX213Pri.setStatus('mandatory')
wfAsrAtmSvcPCRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcPCRIn.setStatus('mandatory')
wfAsrAtmSvcPCROut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcPCROut.setStatus('mandatory')
wfAsrAtmSvcSCRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcSCRIn.setStatus('mandatory')
wfAsrAtmSvcSCROut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcSCROut.setStatus('mandatory')
wfAsrAtmSvcMBSIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcMBSIn.setStatus('mandatory')
wfAsrAtmSvcMBSOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcMBSOut.setStatus('mandatory')
wfAsrAtmSvcQOSClassIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcQOSClassIn.setStatus('mandatory')
wfAsrAtmSvcQOSClassOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcQOSClassOut.setStatus('mandatory')
wfAsrAtmSvcCDVTIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcCDVTIn.setStatus('mandatory')
wfAsrAtmSvcCDVTOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcCDVTOut.setStatus('mandatory')
wfAsrAtmSvcCLRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcCLRIn.setStatus('mandatory')
wfAsrAtmSvcCLROut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcCLROut.setStatus('mandatory')
wfAsrTest = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8))
wfAsrTestCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrTestCreate.setStatus('mandatory')
wfAsrTestChangeVal = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8, 2), Integer32().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrTestChangeVal.setStatus('mandatory')
wfAsrTestDlci = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrTestDlci.setStatus('mandatory')
wfAsrTestCct = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrTestCct.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-ASR-MIB", wfAsrMhVcid2=wfAsrMhVcid2, wfAsrMaxSessions=wfAsrMaxSessions, wfAsrSvcInboundFilterFail=wfAsrSvcInboundFilterFail, wfAsrUseDynRdiscPref=wfAsrUseDynRdiscPref, wfAsrServiceProtocol=wfAsrServiceProtocol, wfAsrAtmSvcSCROut=wfAsrAtmSvcSCROut, wfAsrAtmSvcPCROut=wfAsrAtmSvcPCROut, wfAsrFrSvcBEIn=wfAsrFrSvcBEIn, wfAsrRtrPriCvtVal=wfAsrRtrPriCvtVal, wfAsrX213PriLowVal=wfAsrX213PriLowVal, wfAsrDestPortLow=wfAsrDestPortLow, wfAsrCircuitCreate=wfAsrCircuitCreate, wfAsrAtmSvcQOSClassOut=wfAsrAtmSvcQOSClassOut, wfAsrTestDlci=wfAsrTestDlci, wfAsrX213PriEntry=wfAsrX213PriEntry, wfAsrFrSvcBCIn=wfAsrFrSvcBCIn, wfAsrFilterType=wfAsrFilterType, wfAsrFrSvcX213Pri=wfAsrFrSvcX213Pri, wfAsrRtrPriEntry=wfAsrRtrPriEntry, wfAsrFwdTblEntries=wfAsrFwdTblEntries, wfAsrCircuitEnable=wfAsrCircuitEnable, wfAsrHoldDownTimer=wfAsrHoldDownTimer, wfAsrSvcVcid1=wfAsrSvcVcid1, wfAsrRtrPriTable=wfAsrRtrPriTable, wfAsrNegativeNHR=wfAsrNegativeNHR, wfAsrTestChangeVal=wfAsrTestChangeVal, wfAsrSourceIpAddr=wfAsrSourceIpAddr, wfAsrDirectExceptTable=wfAsrDirectExceptTable, wfAsrCircuitSetupRequests=wfAsrCircuitSetupRequests, wfAsrNextHopRetryLimit=wfAsrNextHopRetryLimit, wfAsrDirectExceptEntry=wfAsrDirectExceptEntry, wfAsrFrSvcCIROut=wfAsrFrSvcCIROut, wfAsrDebugLevel=wfAsrDebugLevel, wfAsrBaseEnable=wfAsrBaseEnable, wfAsrAtmSvcMBSOut=wfAsrAtmSvcMBSOut, wfAsrTestCct=wfAsrTestCct, wfAsrMhVcid1=wfAsrMhVcid1, wfAsrCircuitEntry=wfAsrCircuitEntry, wfAsrAtmSvcMBSIn=wfAsrAtmSvcMBSIn, wfAsrSvcSetupTime=wfAsrSvcSetupTime, wfAsrSourcePortRangeLow=wfAsrSourcePortRangeLow, wfAsrSecureInFilter=wfAsrSecureInFilter, wfAsrServicePort=wfAsrServicePort, wfAsrCircuitState=wfAsrCircuitState, wfAsrSvcMTU=wfAsrSvcMTU, wfAsrAtmSvcCDVTOut=wfAsrAtmSvcCDVTOut, wfAsrSrcPortHigh=wfAsrSrcPortHigh, wfAsrDestIpAddr=wfAsrDestIpAddr, wfAsrFrSvcCIRIn=wfAsrFrSvcCIRIn, wfAsrAtmSvcCLROut=wfAsrAtmSvcCLROut, wfAsrX213PriTable=wfAsrX213PriTable, wfAsrRtrPriLowVal=wfAsrRtrPriLowVal, wfAsrX213PriDelete=wfAsrX213PriDelete, wfAsrX213PriHiVal=wfAsrX213PriHiVal, wfAsrFwdTblSeq=wfAsrFwdTblSeq, wfAsrTestCreate=wfAsrTestCreate, wfAsrIPProtocol=wfAsrIPProtocol, wfAsrCircuitInDiscards=wfAsrCircuitInDiscards, wfAsrAtmSvcPCRIn=wfAsrAtmSvcPCRIn, wfAsrMultiHopTable=wfAsrMultiHopTable, wfAsrFilterCreate=wfAsrFilterCreate, wfAsrAtmSvcQOSClassIn=wfAsrAtmSvcQOSClassIn, wfAsrDestIpMask=wfAsrDestIpMask, wfAsrCircuitSetupSucc=wfAsrCircuitSetupSucc, wfAsrFrSvcBEOut=wfAsrFrSvcBEOut, wfAsrDnsProxyPort=wfAsrDnsProxyPort, wfAsrFiltEntry=wfAsrFiltEntry, wfAsrAtmSvcCLRIn=wfAsrAtmSvcCLRIn, wfAsrTest=wfAsrTest, wfAsrDestPortRangeLow=wfAsrDestPortRangeLow, wfAsrX213PriSwVal=wfAsrX213PriSwVal, wfAsrCircuitInReceives=wfAsrCircuitInReceives, wfAsrSvcCalledAddr=wfAsrSvcCalledAddr, wfAsrDestPortRangeHigh=wfAsrDestPortRangeHigh, wfAsrSourcePortRangeHigh=wfAsrSourcePortRangeHigh, wfAsrRtrPriHiVal=wfAsrRtrPriHiVal, wfAsrCircuitSetupFail=wfAsrCircuitSetupFail, wfAsrSvcType=wfAsrSvcType, wfAsrAtmSvcSCRIn=wfAsrAtmSvcSCRIn, wfAsrBase=wfAsrBase, wfAsrSecureInValid=wfAsrSecureInValid, wfAsrFiltTable=wfAsrFiltTable, wfAsrFrSvcBCOut=wfAsrFrSvcBCOut, wfAsrFilterSlot=wfAsrFilterSlot, wfAsrCircuitSVCsEstablished=wfAsrCircuitSVCsEstablished, wfAsrDestPortHigh=wfAsrDestPortHigh, wfAsrSrcPortLow=wfAsrSrcPortLow, wfAsrActiveSvcs=wfAsrActiveSvcs, wfAsrFilterTtl=wfAsrFilterTtl, wfAsrSourceIpMask=wfAsrSourceIpMask, wfAsrCircuitNumber=wfAsrCircuitNumber, wfAsrCircuitTable=wfAsrCircuitTable, wfAsrBaseCreate=wfAsrBaseCreate, wfAsrSvcCircuitNumber=wfAsrSvcCircuitNumber, wfAsrAtmSvcCDVTIn=wfAsrAtmSvcCDVTIn, wfAsrRtrPriDelete=wfAsrRtrPriDelete, wfAsrMhCircuitNumber=wfAsrMhCircuitNumber, wfAsrMultiHopDelete=wfAsrMultiHopDelete, wfAsrSvcOutboundReqFail=wfAsrSvcOutboundReqFail, wfAsrSvcRouterPriOut=wfAsrSvcRouterPriOut, wfAsrCircuitCallCtrl=wfAsrCircuitCallCtrl, wfAsrSvcInboundCallValFail=wfAsrSvcInboundCallValFail, wfAsrSvcVcid2=wfAsrSvcVcid2, wfAsrBaseState=wfAsrBaseState, wfAsrMultiHopEntry=wfAsrMultiHopEntry)
