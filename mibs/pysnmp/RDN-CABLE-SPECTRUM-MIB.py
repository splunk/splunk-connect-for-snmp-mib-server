#
# PySNMP MIB module RDN-CABLE-SPECTRUM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-CABLE-SPECTRUM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifOperStatus, InterfaceIndex, ifAdminStatus, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifOperStatus", "InterfaceIndex", "ifAdminStatus", "ifIndex")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, iso, Counter32, Bits, ObjectIdentity, IpAddress, NotificationType, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "iso", "Counter32", "Bits", "ObjectIdentity", "IpAddress", "NotificationType", "TimeTicks", "Counter64")
RowStatus, MacAddress, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TextualConvention", "DisplayString", "DateAndTime")
rdnCableSpectrum = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 6))
if mibBuilder.loadTexts: rdnCableSpectrum.setLastUpdated('200206250000Z')
if mibBuilder.loadTexts: rdnCableSpectrum.setOrganization('Motorola')
rdnCableSpectrumObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 6, 1))
rdnFlapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1))
rdnFlapCmCmtsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1), )
if mibBuilder.loadTexts: rdnFlapCmCmtsStatusTable.setStatus('current')
rdnFlapCmCmtsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1), ).setIndexNames((0, "RDN-CABLE-SPECTRUM-MIB", "flapCmCmtsIfIndex"))
if mibBuilder.loadTexts: rdnFlapCmCmtsStatusEntry.setStatus('current')
flapCmCmtsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: flapCmCmtsIfIndex.setStatus('current')
flapListMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)).clone(100)).setUnits('modems').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flapListMaxSize.setStatus('current')
flapListCurrentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setUnits('modems').setMaxAccess("readonly")
if mibBuilder.loadTexts: flapListCurrentSize.setStatus('current')
flapAgingOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1440)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flapAgingOutTime.setStatus('current')
flapInsertionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flapInsertionTime.setStatus('current')
flapMissThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(6)).setUnits('modem').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flapMissThreshold.setStatus('current')
flapPowerAdjThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flapPowerAdjThreshold.setStatus('current')
flapListPercentageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flapListPercentageThreshold.setStatus('current')
flapListTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flapListTrapEnable.setStatus('current')
rdnFlapCmTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2), )
if mibBuilder.loadTexts: rdnFlapCmTable.setStatus('current')
rdnFlapCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1), ).setIndexNames((0, "RDN-CABLE-SPECTRUM-MIB", "flapCmIndex"))
if mibBuilder.loadTexts: rdnFlapCmEntry.setStatus('current')
flapCmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: flapCmIndex.setStatus('current')
cmtsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmtsIfIndex.setStatus('current')
flapCmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flapCmMacAddress.setStatus('current')
flapCmUpstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flapCmUpstreamIfIndex.setStatus('current')
flapCmDownstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flapCmDownstreamIfIndex.setStatus('current')
flapCmInsertionFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flapCmInsertionFails.setStatus('current')
flapCmHits = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flapCmHits.setStatus('current')
flapCmMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flapCmMisses.setStatus('current')
flapCmPowerAdjustments = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flapCmPowerAdjustments.setStatus('current')
cmFlapCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlapCounts.setStatus('current')
cmLastFlapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLastFlapTime.setStatus('current')
cmFlapCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlapCreateTime.setStatus('current')
cmFlapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlapRowStatus.setStatus('current')
flapListTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: flapListTrap.setStatus('current')
flapTrapType = MibScalar((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("power", 1), ("ranging", 2), ("insertion", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flapTrapType.setStatus('current')
flapModemTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 6, 1, 1, 5)).setObjects(("RDN-CABLE-SPECTRUM-MIB", "flapCmMacAddress"), ("RDN-CABLE-SPECTRUM-MIB", "flapTrapType"))
if mibBuilder.loadTexts: flapModemTrap.setStatus('current')
rdnCableSpectrumNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 6, 2))
cableSpectrumMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 6, 2, 0))
rdnCableSpectrumConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 6, 3))
rdnCableSpectrumCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 6, 3, 1))
rdnCableSpectrumGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 6, 3, 2))
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4981, 6, 3, 1, 1)).setObjects(("RDN-CABLE-SPECTRUM-MIB", "flapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
rdnFlapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4981, 6, 3, 2, 1)).setObjects(("RDN-CABLE-SPECTRUM-MIB", "flapListMaxSize"), ("RDN-CABLE-SPECTRUM-MIB", "flapListCurrentSize"), ("RDN-CABLE-SPECTRUM-MIB", "flapAgingOutTime"), ("RDN-CABLE-SPECTRUM-MIB", "flapInsertionTime"), ("RDN-CABLE-SPECTRUM-MIB", "flapMissThreshold"), ("RDN-CABLE-SPECTRUM-MIB", "flapPowerAdjThreshold"), ("RDN-CABLE-SPECTRUM-MIB", "cmtsIfIndex"), ("RDN-CABLE-SPECTRUM-MIB", "flapCmMacAddress"), ("RDN-CABLE-SPECTRUM-MIB", "flapCmUpstreamIfIndex"), ("RDN-CABLE-SPECTRUM-MIB", "flapCmDownstreamIfIndex"), ("RDN-CABLE-SPECTRUM-MIB", "flapCmInsertionFails"), ("RDN-CABLE-SPECTRUM-MIB", "flapCmHits"), ("RDN-CABLE-SPECTRUM-MIB", "flapCmMisses"), ("RDN-CABLE-SPECTRUM-MIB", "flapCmPowerAdjustments"), ("RDN-CABLE-SPECTRUM-MIB", "cmFlapCounts"), ("RDN-CABLE-SPECTRUM-MIB", "cmLastFlapTime"), ("RDN-CABLE-SPECTRUM-MIB", "cmFlapCreateTime"), ("RDN-CABLE-SPECTRUM-MIB", "cmFlapRowStatus"), ("RDN-CABLE-SPECTRUM-MIB", "flapListPercentageThreshold"), ("RDN-CABLE-SPECTRUM-MIB", "flapListTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rdnFlapGroup = rdnFlapGroup.setStatus('current')
mibBuilder.exportSymbols("RDN-CABLE-SPECTRUM-MIB", cmLastFlapTime=cmLastFlapTime, flapListPercentageThreshold=flapListPercentageThreshold, flapCmMisses=flapCmMisses, flapCmIndex=flapCmIndex, rdnFlapCmTable=rdnFlapCmTable, flapCmMacAddress=flapCmMacAddress, cmFlapCounts=cmFlapCounts, flapMissThreshold=flapMissThreshold, flapCmHits=flapCmHits, rdnFlapCmCmtsStatusEntry=rdnFlapCmCmtsStatusEntry, flapModemTrap=flapModemTrap, flapPowerAdjThreshold=flapPowerAdjThreshold, cableSpectrumMIBNotifications=cableSpectrumMIBNotifications, flapCmPowerAdjustments=flapCmPowerAdjustments, flapCmDownstreamIfIndex=flapCmDownstreamIfIndex, rdnCableSpectrumCompliances=rdnCableSpectrumCompliances, PYSNMP_MODULE_ID=rdnCableSpectrum, cmFlapRowStatus=cmFlapRowStatus, flapListTrap=flapListTrap, flapCmCmtsIfIndex=flapCmCmtsIfIndex, rdnFlapObjects=rdnFlapObjects, flapListCurrentSize=flapListCurrentSize, rdnFlapCmEntry=rdnFlapCmEntry, flapTrapType=flapTrapType, flapCmUpstreamIfIndex=flapCmUpstreamIfIndex, flapListTrapEnable=flapListTrapEnable, flapListMaxSize=flapListMaxSize, cmtsIfIndex=cmtsIfIndex, flapAgingOutTime=flapAgingOutTime, flapCmInsertionFails=flapCmInsertionFails, cmFlapCreateTime=cmFlapCreateTime, rdnCableSpectrumGroups=rdnCableSpectrumGroups, rdnCableSpectrumConformance=rdnCableSpectrumConformance, flapInsertionTime=flapInsertionTime, rdnFlapGroup=rdnFlapGroup, rdnCableSpectrumObjects=rdnCableSpectrumObjects, compliance=compliance, rdnCableSpectrum=rdnCableSpectrum, rdnFlapCmCmtsStatusTable=rdnFlapCmCmtsStatusTable, rdnCableSpectrumNotificationPrefix=rdnCableSpectrumNotificationPrefix)
