#
# PySNMP MIB module DGS-1100-10ME_A1 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-1100-10ME_A1
# Produced by pysmi-0.3.4 at Mon Apr 29 18:27:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
dot1dBasePortEntry, dot1dBasePort, dot1dBridge = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePortEntry", "dot1dBasePort", "dot1dBridge")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpEngineID, SnmpAdminString, SnmpSecurityLevel = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID", "SnmpAdminString", "SnmpSecurityLevel")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, ModuleIdentity, Gauge32, IpAddress, iso, Bits, NotificationType, ObjectIdentity, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "ModuleIdentity", "Gauge32", "IpAddress", "iso", "Bits", "NotificationType", "ObjectIdentity", "Counter32", "Unsigned32")
MacAddress, RowStatus, DisplayString, TextualConvention, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TextualConvention", "TimeStamp", "TruthValue")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DGS1100SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134)).setLabel("dlink-DGS1100SeriesProd")
dgs_1100_10ME = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2)).setLabel("dgs-1100-10ME")
dgs_1100_10ME_A1 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1)).setLabel("dgs-1100-10ME_A1")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class OwnerString(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class OperationResponseStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("responseReceived", 1), ("unknown", 2), ("internalError", 3), ("requestTimedOut", 4), ("unknownDestinationAddress", 5), ("noRouteToTarget", 6), ("interfaceInactiveToTarget", 7), ("arpFailure", 8), ("maxConcurrentLimitReached", 9), ("unableToResolveDnsName", 10), ("invalidHostAddress", 11))

class LldpChassisIdSubtype(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("chassisComponent", 1), ("interfaceAlias", 2), ("portComponent", 3), ("macAddress", 4), ("networkAddress", 5), ("interfaceName", 6), ("local", 7))

class LldpChassisId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class LldpPortIdSubtype(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("interfaceAlias", 1), ("portComponent", 2), ("macAddress", 3), ("networkAddress", 4), ("interfaceName", 5), ("agentCircuitId", 6), ("local", 7))

class LldpPortId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class LldpManAddrIfSubtype(TextualConvention, Integer32):
    reference = 'IEEE 802.1AB-2005 9.5.9.5'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("ifIndex", 2), ("systemPortNumber", 3))

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class LldpSystemCapabilitiesMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("other", 0), ("repeater", 1), ("bridge", 2), ("wlanAccessPoint", 3), ("router", 4), ("telephone", 5), ("docsisCableDevice", 6), ("stationOnly", 7))

class LldpPortNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4096)

class LldpPortList(TextualConvention, OctetString):
    reference = 'IETF RFC 2674 section 5'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 512)

class TimeFilter(TextualConvention, TimeTicks):
    status = 'current'

class LldpPowerPortClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pClassPSE", 1), ("pClassPD", 2))

class LldpLinkAggStatusMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("aggCapable", 0), ("aggEnabled", 1))

class ZeroBasedCounter32(TextualConvention, Gauge32):
    status = 'current'

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1))
sysPort = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3))
companyUserAccount = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4))
companySNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7))
companyStaticMac = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14))
sysPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2))
sysTrafficSegmentation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 9))
sysSecurityAAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11))
sysTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 13))
companyArp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22))
companyPnacGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23))
sysPnacRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4))
companyGuestVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 24))
companyMacNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25))
companyISMVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 29))
companyGreenSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31))
companyLLDP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32))
companyCableDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35))
companyQinQ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38))
companyLimitIP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45))
companyMulticastFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 49))
companyIPv6Neighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 50))
companyEoam = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51))
companyDuld = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52))
companyEee = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 60))
companyDHCPv6Relay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86))
companyMldsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88))
companyTraceRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90))
companyPPPoE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 98))
companyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99))
companyPing = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 100))
companyDDP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 101))
companySession = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102))
companyACL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103))
companyCPUACL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104))
sysIpifSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7))
ipv4AddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4AddrCfgMode.setStatus('current')
ipv4Address = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4Address.setStatus('current')
ipv4SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4SubnetMask.setStatus('current')
ipv4DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4DefaultGateway.setStatus('current')
dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12Status.setStatus('current')
dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12HostName.setStatus('current')
ipv6GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6GlobalStatus.setStatus('current')
ipv6DHCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6DHCPStatus.setStatus('current')
ipv6AutolinkloStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AutolinkloStatus.setStatus('current')
ipv6NSRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6NSRetransmitTime.setStatus('current')
ipv6DefaultRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 13), )
if mibBuilder.loadTexts: ipv6DefaultRouteTable.setStatus('current')
ipv6DefaultRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 13, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "ipv6DefaultRouteProtocol"), (0, "DGS-1100-10ME_A1", "ipv6DefaultRouteNextHop"))
if mibBuilder.loadTexts: ipv6DefaultRouteEntry.setStatus('current')
ipv6DefaultRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("static", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6DefaultRouteProtocol.setStatus('current')
ipv6DefaultRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 13, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6DefaultRouteNextHop.setStatus('current')
ipv6DefaultRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 13, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6DefaultRouteIfIndex.setStatus('current')
ipv6DefaultRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6DefaultRouteMetric.setStatus('current')
ipv6DefaultRouteAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 13, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv6DefaultRouteAdminStatus.setStatus('current')
ipv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 14), )
if mibBuilder.loadTexts: ipv6AddressTable.setStatus('current')
ipv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 14, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "ipv6AddressMainIndex"), (0, "DGS-1100-10ME_A1", "ipv6AddressIpAddr"), (0, "DGS-1100-10ME_A1", "ipv6AddressIpPrefix"))
if mibBuilder.loadTexts: ipv6AddressEntry.setStatus('current')
ipv6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 14, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6AddressMainIndex.setStatus('current')
ipv6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 14, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6AddressIpAddr.setStatus('current')
ipv6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6AddressIpPrefix.setStatus('current')
ipv6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("unicast", 1), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6AddressIpType.setStatus('current')
ipv6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 14, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressRowStatus.setStatus('current')
dhcpRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 7, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryCount.setStatus('current')
sysIpifTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 8))
ipifDuplicateIPDetected = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 2, 8, 1))
if mibBuilder.loadTexts: ipifDuplicateIPDetected.setStatus('current')
sysIPv6neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 50, 1), )
if mibBuilder.loadTexts: sysIPv6neighborTable.setStatus('current')
ipv6NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 50, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "ipv6NeighborIndex"), (0, "DGS-1100-10ME_A1", "ipv6NeighborAddr"))
if mibBuilder.loadTexts: ipv6NeighborEntry.setStatus('current')
ipv6NeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 50, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6NeighborIndex.setStatus('current')
ipv6NeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 50, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6NeighborAddr.setStatus('current')
ipv6NeighborMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 50, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6NeighborMacAddr.setStatus('current')
ipv6NeighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6NeighborCacheState.setStatus('current')
ipv6NeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 50, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6NeighborRowStatus.setStatus('current')
sysDuld = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1))
duldTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1, 1), )
if mibBuilder.loadTexts: duldTable.setStatus('current')
duldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "duldIfIndex"))
if mibBuilder.loadTexts: duldEntry.setStatus('current')
duldIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldIfIndex.setStatus('current')
duldState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldState.setStatus('current')
duldOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldOperState.setStatus('current')
duldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("normal", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldMode.setStatus('current')
duldLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("bidirectional", 2), ("txFault", 3), ("rxFault", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldLinkStatus.setStatus('current')
duldDiscoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 52, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldDiscoveryTime.setStatus('current')
sysGreenLEDShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 1))
sysGreenPortShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 2))
sysGreenSystemHibernation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 4))
greenLEDShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenLEDShutoffPortList.setStatus('current')
greenLEDShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenLEDShutoffState.setStatus('current')
greenLEDShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenLEDShutoffTimeProfile1.setStatus('current')
greenLEDShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenLEDShutoffTimeProfile2.setStatus('current')
greenPortShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenPortShutoffPortList.setStatus('current')
greenPortShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenPortShutoffState.setStatus('current')
greenPortShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenPortShutoffTimeProfile1.setStatus('current')
greenPortShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenPortShutoffTimeProfile2.setStatus('current')
greenSystemHibernationState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenSystemHibernationState.setStatus('current')
greenSystemHibernationTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenSystemHibernationTimeProfile1.setStatus('current')
greenSystemHibernationTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenSystemHibernationTimeProfile2.setStatus('current')
greenCableLenDetectionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greenCableLenDetectionState.setStatus('current')
sysDevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 1))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)).clone('Version of the hardware')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDeviceType.setStatus('current')
sysBootVerion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootVerion.setStatus('current')
sysLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeout.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysContact = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContact.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noreboot", 1), ("reboot", 2), ("reset", 3), ("resetwithoutip", 4), ("resetwithoutipvlan", 5))).clone('noreboot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebState.setStatus('current')
sysWebPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebPortNumber.setStatus('current')
sysARPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysARPAgingTime.setStatus('current')
sysMACAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMACAgingTime.setStatus('current')
sysTelnetsettingManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTelnetsettingManagementOnOff.setStatus('current')
sysTelnetUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTelnetUDPPort.setStatus('current')
sysAutoRefreshConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("refreshimenever", 0), ("refreshtime10secs", 1), ("refreshtime30secs", 2), ("refreshtime1min", 3), ("refreshtime5mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAutoRefreshConfiguration.setStatus('current')
sysMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 26), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMacAddr.setStatus('current')
sysSwitchTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchTime.setStatus('current')
sysDhcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpTimeout.setStatus('current')
sysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNumber.setStatus('current')
sysCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 30))
cpuLast5SecUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLast5SecUsage.setStatus('current')
cpuLast1MinUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLast1MinUsage.setStatus('current')
cpuLast5MinUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 30, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLast5MinUsage.setStatus('current')
sysRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 31))
ramLast5SecUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ramLast5SecUsage.setStatus('current')
ramLast1MinUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ramLast1MinUsage.setStatus('current')
ramLast5MinUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 31, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ramLast5MinUsage.setStatus('current')
sysCliPromptStr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCliPromptStr.setStatus('current')
sysSshState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSshState.setStatus('current')
sysSshPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSshPortNumber.setStatus('current')
portCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1), )
if mibBuilder.loadTexts: portCtrlTable.setStatus('current')
portCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "portCtrlIndex"), (0, "DGS-1100-10ME_A1", "portCtrlMediumType"))
if mibBuilder.loadTexts: portCtrlEntry.setStatus('current')
portCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCtrlIndex.setStatus('current')
portCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2))).clone('copper')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCtrlMediumType.setStatus('current')
portCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("full1000m", 1), ("full100m", 2), ("half100m", 3), ("full10m", 4), ("half10m", 5), ("auto", 6), ("disabled", 7))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCtrlSpeed.setStatus('current')
portCtrlLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("full1000m", 2), ("full100m", 3), ("half100m", 4), ("full10m", 5), ("half10m", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCtrlLinkStatus.setStatus('current')
portCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCtrlMDI.setStatus('current')
portCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCtrlFlowControl.setStatus('current')
portCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCtrlFlowControlOper.setStatus('current')
portCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCtrlAdminState.setStatus('current')
portCtrlDetailMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1GBaseSFPModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCtrlDetailMediumType.setStatus('current')
portCtrlDynamicMacAutoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCtrlDynamicMacAutoLearn.setStatus('current')
portDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 2), )
if mibBuilder.loadTexts: portDescriptionTable.setStatus('current')
portDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "portDescIndex"), (0, "DGS-1100-10ME_A1", "portDescMediumType"))
if mibBuilder.loadTexts: portDescriptionEntry.setStatus('current')
portDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDescIndex.setStatus('current')
portDescMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDescMediumType.setStatus('current')
portDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDescString.setStatus('current')
portErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 3), )
if mibBuilder.loadTexts: portErrTable.setStatus('current')
portErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "portErrPortIndex"))
if mibBuilder.loadTexts: portErrEntry.setStatus('current')
portErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portErrPortIndex.setStatus('current')
portErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portErrPortState.setStatus('current')
portErrPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portErrPortStatus.setStatus('current')
portErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lbd", 1), ("trafficcontrol", 2), ("duld", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portErrPortReason.setStatus('current')
portUtilizTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 4), )
if mibBuilder.loadTexts: portUtilizTable.setStatus('current')
portUtilizEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "portUtilizIndex"))
if mibBuilder.loadTexts: portUtilizEntry.setStatus('current')
portUtilizIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUtilizIndex.setStatus('current')
portUtilizTX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUtilizTX.setStatus('current')
portUtilizRX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUtilizRX.setStatus('current')
portUtilizAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 1, 100, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUtilizAverage.setStatus('current')
sysStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1), )
if mibBuilder.loadTexts: sysStatisticsTable.setStatus('current')
statisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "statisticsIndex"))
if mibBuilder.loadTexts: statisticsEntry.setStatus('current')
statisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsIndex.setStatus('current')
statisticsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsInOctets.setStatus('current')
statisticsInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsInUcastPkts.setStatus('current')
statisticsInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsInMcastPkts.setStatus('current')
statisticsInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsInNUcastPkts.setStatus('deprecated')
statisticsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsInDiscards.setStatus('current')
statisticsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsInErrors.setStatus('current')
statisticsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsOutOctets.setStatus('current')
statisticsOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsOutUcastPkts.setStatus('current')
statisticsOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsOutNUcastPkts.setStatus('deprecated')
statisticsOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsOutErrors.setStatus('current')
statisticsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsOutDiscards.setStatus('current')
statisticsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsLateCollisions.setStatus('current')
statisticsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsExcessiveCollisions.setStatus('current')
statisticsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsFCSErrors.setStatus('current')
statisticsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsFrameTooLongs.setStatus('current')
statisticsEtherUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsEtherUndersizePkts.setStatus('current')
statisticsEtherOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsEtherOversizePkts.setStatus('current')
statisticsEtherFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 19), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsEtherFragments.setStatus('current')
statisticsEtherJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsEtherJabbers.setStatus('current')
statisticsEtherDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsEtherDropEvents.setStatus('current')
statisticsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsDeferredTransmissions.setStatus('current')
statisticsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsSingleCollisionFrames.setStatus('current')
statisticsStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsStatsCollisions.setStatus('current')
statisticsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsPkts64Octets.setStatus('current')
statisticsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsPkts65to127Octets.setStatus('current')
statisticsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsPkts128to255Octets.setStatus('current')
statisticsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsPkts256to511Octets.setStatus('current')
statisticsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsPkts512to1023Octets.setStatus('current')
statisticsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsPkts1024to1518Octets.setStatus('current')
sysStatisticsClearTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 2), )
if mibBuilder.loadTexts: sysStatisticsClearTable.setStatus('current')
statisticsClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "statisticsClearIndex"))
if mibBuilder.loadTexts: statisticsClearEntry.setStatus('current')
statisticsClearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsClearIndex.setStatus('current')
statisticsClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 99, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statisticsClearStatus.setStatus('current')
sysDot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDot1qVlanManagementOnOff.setStatus('current')
sysDot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDot1qVlanManagementid.setStatus('current')
sysDot1qPVIDAutoAssign = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDot1qPVIDAutoAssign.setStatus('current')
sysDot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDot1qVlanAsyOnOff.setStatus('current')
sysDot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 6), )
if mibBuilder.loadTexts: sysDot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 6, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "dot1qVlanid"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanid.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 6, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 6, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 6, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
sysDot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 7), )
if mibBuilder.loadTexts: sysDot1qVlanPortTable.setStatus('current')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 7, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "dot1qVlanPortIndex"))
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
dot1qVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanPortIndex.setStatus('current')
dot1qVlanPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 7, 7, 1, 2), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPortVlanId.setStatus('current')
aacAuthenAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthenAdminState.setStatus('current')
aacAuthParamResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamResponseTimeout.setStatus('current')
aacAuthParamAttempt = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamAttempt.setStatus('current')
aacLocalEnablePassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLocalEnablePassword.setStatus('current')
aacAPAuthMethodGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 5))
aacAPLoginMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 5, 1))
aacAPEnableMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 5, 2))
aacAPTelnetLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetLoginMethod.setStatus('current')
aacAPHttpLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpLoginMethod.setStatus('current')
aacAPTelnetEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 5, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetEnableMethod.setStatus('current')
aacAPHttpEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 5, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpEnableMethod.setStatus('current')
aacLoginMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 6), )
if mibBuilder.loadTexts: aacLoginMethodListTable.setStatus('current')
aacLoginMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 6, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "aacLoginMethodListName"))
if mibBuilder.loadTexts: aacLoginMethodListEntry.setStatus('current')
aacLoginMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacLoginMethodListName.setStatus('current')
aacLoginMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod1.setStatus('current')
aacLoginMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod2.setStatus('current')
aacLoginMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod3.setStatus('current')
aacLoginMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod4.setStatus('current')
aacLoginMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 6, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethodListRowStatus.setStatus('current')
aacEnableMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 7), )
if mibBuilder.loadTexts: aacEnableMethodListTable.setStatus('current')
aacEnableMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 7, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "aacEnableMethodListName"))
if mibBuilder.loadTexts: aacEnableMethodListEntry.setStatus('current')
aacEnableMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacEnableMethodListName.setStatus('current')
aacEnableMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod1.setStatus('current')
aacEnableMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod2.setStatus('current')
aacEnableMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod3.setStatus('current')
aacEnableMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod4.setStatus('current')
aacEnableMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 7, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethodListRowStatus.setStatus('current')
aacServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 8), )
if mibBuilder.loadTexts: aacServerGroupTable.setStatus('current')
aacServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 8, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "aacServerGroupName"))
if mibBuilder.loadTexts: aacServerGroupEntry.setStatus('current')
aacServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerGroupName.setStatus('current')
aacServersInGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 8, 1, 2), Bits().clone(namedValues=NamedValues(("id1", 0), ("id2", 1), ("id3", 2), ("id4", 3), ("id5", 4), ("id6", 5), ("id7", 6), ("id8", 7), ("id9", 8), ("id10", 9), ("id11", 10), ("id12", 11), ("id13", 12), ("id14", 13), ("id15", 14), ("id16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServersInGroup.setStatus('current')
aacServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 8, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerGroupRowStatus.setStatus('current')
aacServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9), )
if mibBuilder.loadTexts: aacServerInfoTable.setStatus('current')
aacServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "aacServerIPType"), (0, "DGS-1100-10ME_A1", "aacServerIPAddr"))
if mibBuilder.loadTexts: aacServerInfoEntry.setStatus('current')
aacServerIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerIPType.setStatus('current')
aacServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerIPAddr.setStatus('current')
aacServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerIndex.setStatus('current')
aacServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerInterfaceName.setStatus('current')
aacServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthPort.setStatus('current')
aacServerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthKey.setStatus('current')
aacServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerTimeout.setStatus('current')
aacServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerRetryCount.setStatus('current')
aacServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 11, 9, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerRowStatus.setStatus('current')
sysCableDiagTriggerIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCableDiagTriggerIndex.setStatus('current')
sysCableDiagPair1TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagPair1TestResult.setStatus('current')
sysCableDiagPair1FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagPair1FaultDistance.setStatus('current')
sysCableDiagPair2TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagPair2TestResult.setStatus('current')
sysCableDiagPair2FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagPair2FaultDistance.setStatus('current')
sysCableDiagPair3TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagPair3TestResult.setStatus('current')
sysCableDiagPair3FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagPair3FaultDistance.setStatus('current')
sysCableDiagPair4TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagPair4TestResult.setStatus('current')
sysCableDiagPair4FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagPair4FaultDistance.setStatus('current')
sysCableDiagLengthinRange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 35, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("less50", 1), ("from50to80", 2), ("from80to100", 3), ("from100to140", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCableDiagLengthinRange.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 5, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 6, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
sysLBDEnabledVlanList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDEnabledVlanList.setStatus('current')
sysLBDTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 8))
lbdTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 8, 0))
loopbackOccur = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 8, 0, 1)).setObjects(("DGS-1100-10ME_A1", "sysLBDCtrlIndex"), ("DGS-1100-10ME_A1", "sysLBDPortLoopStatus"))
if mibBuilder.loadTexts: loopbackOccur.setStatus('current')
loopbackRecovery = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 17, 8, 0, 2)).setObjects(("DGS-1100-10ME_A1", "sysLBDCtrlIndex"), ("DGS-1100-10ME_A1", "sysLBDRecoverTime"))
if mibBuilder.loadTexts: loopbackRecovery.setStatus('current')
sysLLDPXdot3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12))
sysLLDPXdot1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13))
sysLLDPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14))
sysLLDPLocalSystemData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15))
sysLLDPRemoteSystemsData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16))
sysLLDPNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17))
sysLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLLDPState.setStatus('current')
sysLLDPMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLLDPMsgHoldMultiplier.setStatus('current')
sysLLDPMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLLDPMsgTxInterval.setStatus('current')
sysLLDPReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLLDPReinitDelay.setStatus('current')
sysLLDPTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLLDPTxDelay.setStatus('current')
sysLLDPConfigManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 6), )
if mibBuilder.loadTexts: sysLLDPConfigManAddrTable.setStatus('current')
sysLLDPConfigManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 6, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpConfigManAddrSubtype"), (0, "DGS-1100-10ME_A1", "lldpConfigManAddr"))
if mibBuilder.loadTexts: sysLLDPConfigManAddrEntry.setStatus('current')
lldpConfigManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 6, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpConfigManAddrSubtype.setStatus('current')
lldpConfigManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 6, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpConfigManAddr.setStatus('current')
lldpConfigManAddrPortsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 6, 1, 3), LldpPortList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpConfigManAddrPortsTxEnable.setStatus('current')
sysLLDPPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 11), )
if mibBuilder.loadTexts: sysLLDPPortConfigTable.setStatus('current')
sysLLDPPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 11, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpPortConfigPortNum"))
if mibBuilder.loadTexts: sysLLDPPortConfigEntry.setStatus('current')
lldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 11, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortConfigPortNum.setStatus('current')
lldpPortConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigAdminStatus.setStatus('current')
lldpPortConfigNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 11, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigNotificationEnable.setStatus('current')
lldpPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 11, 1, 4), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigTLVsTxEnable.setStatus('current')
lldpXdot3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 1))
lldpXdot3LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2))
lldpXdot3RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3))
lldpXdot3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 1, 1), )
if mibBuilder.loadTexts: lldpXdot3PortConfigTable.setStatus('current')
lldpXdot3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 1, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot3PortConfigPortNum"))
if mibBuilder.loadTexts: lldpXdot3PortConfigEntry.setStatus('current')
lldpXdot3PortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 1, 1, 1, 1), LldpPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3PortConfigPortNum.setStatus('current')
lldpXdot3PortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 1, 1, 1, 2), Bits().clone(namedValues=NamedValues(("macPhyConfigStatus", 0), ("maxFrameSize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3PortConfigTLVsTxEnable.setStatus('current')
lldpXdot3LocPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 1), )
if mibBuilder.loadTexts: lldpXdot3LocPortTable.setStatus('current')
lldpXdot3LocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot3LocPortNum"))
if mibBuilder.loadTexts: lldpXdot3LocPortEntry.setStatus('current')
lldpXdot3LocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 1, 1, 1), LldpPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3LocPortNum.setStatus('current')
lldpXdot3LocPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegSupported.setStatus('current')
lldpXdot3LocPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegEnabled.setStatus('current')
lldpXdot3LocPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3LocPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortOperMauType.setStatus('current')
lldpXdot3LocMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 4), )
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeTable.setStatus('current')
lldpXdot3LocMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot3LocMaxFrameSizePortNum"))
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeEntry.setStatus('current')
lldpXdot3LocMaxFrameSizePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 4, 1, 1), LldpPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizePortNum.setStatus('current')
lldpXdot3LocMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSize.setStatus('current')
lldpXdot3RemPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1), )
if mibBuilder.loadTexts: lldpXdot3RemPortTable.setStatus('current')
lldpXdot3RemPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot3RemTimeMark"), (0, "DGS-1100-10ME_A1", "lldpXdot3RemLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot3RemIndex"))
if mibBuilder.loadTexts: lldpXdot3RemPortEntry.setStatus('current')
lldpXdot3RemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemTimeMark.setStatus('current')
lldpXdot3RemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLocalPortNum.setStatus('current')
lldpXdot3RemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemIndex.setStatus('current')
lldpXdot3RemPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegSupported.setStatus('current')
lldpXdot3RemPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegEnabled.setStatus('current')
lldpXdot3RemPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3RemPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortOperMauType.setStatus('current')
lldpXdot3RemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2), )
if mibBuilder.loadTexts: lldpXdot3RemPowerTable.setStatus('current')
lldpXdot3RemPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot3RemPowerTimeMark"), (0, "DGS-1100-10ME_A1", "lldpXdot3RemPowerLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot3RemPowerIndex"))
if mibBuilder.loadTexts: lldpXdot3RemPowerEntry.setStatus('current')
lldpXdot3RemPowerTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerTimeMark.setStatus('current')
lldpXdot3RemPowerLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerLocalPortNum.setStatus('current')
lldpXdot3RemPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerIndex.setStatus('current')
lldpXdot3RemPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 4), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPortClass.setStatus('current')
lldpXdot3RemPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDISupported.setStatus('current')
lldpXdot3RemPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDIEnabled.setStatus('current')
lldpXdot3RemPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairControlable.setStatus('current')
lldpXdot3RemPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairs.setStatus('current')
lldpXdot3RemPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerClass.setStatus('current')
lldpXdot3RemLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 3), )
if mibBuilder.loadTexts: lldpXdot3RemLinkAggTable.setStatus('current')
lldpXdot3RemLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot3RemLinkAggTimeMark"), (0, "DGS-1100-10ME_A1", "lldpXdot3RemLinkAggLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot3RemLinkAggIndex"))
if mibBuilder.loadTexts: lldpXdot3RemLinkAggEntry.setStatus('current')
lldpXdot3RemLinkAggTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 3, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggTimeMark.setStatus('current')
lldpXdot3RemLinkAggLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 3, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggLocalPortNum.setStatus('current')
lldpXdot3RemLinkAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggIndex.setStatus('current')
lldpXdot3RemLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 3, 1, 4), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggStatus.setStatus('current')
lldpXdot3RemLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggPortId.setStatus('current')
lldpXdot3RemMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 4), )
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeTable.setStatus('current')
lldpXdot3RemMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot3RemMaxFrameSizeTimeMark"), (0, "DGS-1100-10ME_A1", "lldpXdot3RemMaxFrameSizeLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot3RemMaxFrameSizeIndex"))
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeEntry.setStatus('current')
lldpXdot3RemMaxFrameSizeTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 4, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeTimeMark.setStatus('current')
lldpXdot3RemMaxFrameSizeLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 4, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeLocalPortNum.setStatus('current')
lldpXdot3RemMaxFrameSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeIndex.setStatus('current')
lldpXdot3RemMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 12, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSize.setStatus('current')
lldpXdot1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1))
lldpXdot1LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2))
lldpXdot1RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3))
lldpXdot1ConfigPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTable.setStatus('current')
lldpXdot1ConfigPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1ConfigVlanPortNum"))
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanEntry.setStatus('current')
lldpXdot1ConfigVlanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 1, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanPortNum.setStatus('current')
lldpXdot1ConfigPortVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTxEnable.setStatus('current')
lldpXdot1ConfigVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTable.setStatus('current')
lldpXdot1ConfigVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1LocConfigVlanNamePortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot1ConfigVlanId"))
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameEntry.setStatus('current')
lldpXdot1LocConfigVlanNamePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 2, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocConfigVlanNamePortNum.setStatus('current')
lldpXdot1ConfigVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 2, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanId.setStatus('current')
lldpXdot1ConfigVlanNameTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTxEnable.setStatus('current')
lldpXdot1ConfigProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTable.setStatus('current')
lldpXdot1ConfigProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1ConfigProtocolPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot1ConfigProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolEntry.setStatus('current')
lldpXdot1ConfigProtocolPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 4, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolPortNum.setStatus('current')
lldpXdot1ConfigProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolIndex.setStatus('current')
lldpXdot1ConfigProtocolTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTxEnable.setStatus('current')
lldpXdot1LocTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1LocTable.setStatus('current')
lldpXdot1LocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1LocPortNum"))
if mibBuilder.loadTexts: lldpXdot1LocEntry.setStatus('current')
lldpXdot1LocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 1, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocPortNum.setStatus('current')
lldpXdot1LocPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocPortVlanId.setStatus('current')
lldpXdot1LocVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 3), )
if mibBuilder.loadTexts: lldpXdot1LocVlanNameTable.setStatus('current')
lldpXdot1LocVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1LocVlanNamePortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot1LocVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocVlanNameEntry.setStatus('current')
lldpXdot1LocVlanNamePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 3, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanNamePortNum.setStatus('current')
lldpXdot1LocVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 3, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanId.setStatus('current')
lldpXdot1LocVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanName.setStatus('current')
lldpXdot1LocProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 4), )
if mibBuilder.loadTexts: lldpXdot1LocProtocolTable.setStatus('current')
lldpXdot1LocProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1LocProtocolPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot1LocProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1LocProtocolEntry.setStatus('current')
lldpXdot1LocProtocolPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 4, 1, 1), LldpPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1LocProtocolPortNum.setStatus('current')
lldpXdot1LocProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolIndex.setStatus('current')
lldpXdot1LocProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolId.setStatus('current')
lldpXdot1RemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1RemTable.setStatus('current')
lldpXdot1RemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1RemTimeMark"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemIndex"))
if mibBuilder.loadTexts: lldpXdot1RemEntry.setStatus('current')
lldpXdot1RemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 1, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemTimeMark.setStatus('current')
lldpXdot1RemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 1, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemLocalPortNum.setStatus('current')
lldpXdot1RemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemIndex.setStatus('current')
lldpXdot1RemPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemPortVlanId.setStatus('current')
lldpXdot1RemProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanTable.setStatus('current')
lldpXdot1RemProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1RemProtoVlanTimeMark"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemProtoVlanLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemProtoVlanIndex"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEntry.setStatus('current')
lldpXdot1RemProtoVlanTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 2, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanTimeMark.setStatus('current')
lldpXdot1RemProtoVlanLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 2, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanLocalPortNum.setStatus('current')
lldpXdot1RemProtoVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanIndex.setStatus('current')
lldpXdot1RemProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanId.setStatus('current')
lldpXdot1RemProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanSupported.setStatus('current')
lldpXdot1RemProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEnabled.setStatus('current')
lldpXdot1RemVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 3), )
if mibBuilder.loadTexts: lldpXdot1RemVlanNameTable.setStatus('current')
lldpXdot1RemVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1RemVlanNameTimeMark"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemVlanNameLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemVlanNameIndex"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemVlanNameEntry.setStatus('current')
lldpXdot1RemVlanNameTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 3, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanNameTimeMark.setStatus('current')
lldpXdot1RemVlanNameLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 3, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanNameLocalPortNum.setStatus('current')
lldpXdot1RemVlanNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanNameIndex.setStatus('current')
lldpXdot1RemVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 3, 1, 4), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanId.setStatus('current')
lldpXdot1RemVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanName.setStatus('current')
lldpXdot1RemProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 4), )
if mibBuilder.loadTexts: lldpXdot1RemProtocolTable.setStatus('current')
lldpXdot1RemProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpXdot1RemProtocolTimeMark"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemProtocolLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemProtocolIndex"), (0, "DGS-1100-10ME_A1", "lldpXdot1RemProtocolIdIndex"))
if mibBuilder.loadTexts: lldpXdot1RemProtocolEntry.setStatus('current')
lldpXdot1RemProtocolTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 4, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolTimeMark.setStatus('current')
lldpXdot1RemProtocolLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 4, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolLocalPortNum.setStatus('current')
lldpXdot1RemProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolIndex.setStatus('current')
lldpXdot1RemProtocolIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolIdIndex.setStatus('current')
lldpXdot1RemProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 13, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolId.setStatus('current')
lldpStatsRemTablesLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesLastChangeTime.setStatus('current')
lldpStatsRemTablesInserts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 2), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesInserts.setStatus('current')
lldpStatsRemTablesDeletes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 3), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesDeletes.setStatus('current')
lldpStatsRemTablesDrops = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 4), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesDrops.setStatus('current')
lldpStatsRemTablesAgeouts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesAgeouts.setStatus('current')
lldpStatsTxPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 6), )
if mibBuilder.loadTexts: lldpStatsTxPortTable.setStatus('current')
lldpStatsTxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 6, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpStatsTxPortNum"))
if mibBuilder.loadTexts: lldpStatsTxPortEntry.setStatus('current')
lldpStatsTxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 6, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTxPortNum.setStatus('current')
lldpStatsTxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTxPortFramesTotal.setStatus('current')
lldpRxStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7), )
if mibBuilder.loadTexts: lldpRxStatsPortTable.setStatus('current')
lldpRxStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpStatsRxPortNum"))
if mibBuilder.loadTexts: lldpRxStatsPortEntry.setStatus('current')
lldpStatsRxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortNum.setStatus('current')
lldpStatsRxPortFramesDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesDiscardedTotal.setStatus('current')
lldpStatsRxPortFramesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesErrors.setStatus('current')
lldpStatsRxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesTotal.setStatus('current')
lldpStatsRxPortTLVsDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortTLVsDiscardedTotal.setStatus('current')
lldpStatsRxPortTLVsUnrecognizedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortTLVsUnrecognizedTotal.setStatus('current')
lldpStatsRxPortAgeoutsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 14, 7, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortAgeoutsTotal.setStatus('current')
lldpLocChassisIdSubtype = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 1), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocChassisIdSubtype.setStatus('current')
lldpLocChassisId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 2), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocChassisId.setStatus('current')
lldpLocSysName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysName.setStatus('current')
lldpLocSysDesc = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysDesc.setStatus('current')
lldpLocSysCapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 5), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysCapEnabled.setStatus('current')
lldpLocPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 7), )
if mibBuilder.loadTexts: lldpLocPortTable.setStatus('current')
lldpLocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 7, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpLocPortNum"))
if mibBuilder.loadTexts: lldpLocPortEntry.setStatus('current')
lldpLocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 7, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortNum.setStatus('current')
lldpLocPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 7, 1, 2), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortIdSubtype.setStatus('current')
lldpLocPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 7, 1, 3), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortId.setStatus('current')
lldpLocPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 7, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortDesc.setStatus('current')
lldpLocManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 8), )
if mibBuilder.loadTexts: lldpLocManAddrTable.setStatus('current')
lldpLocManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 8, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpLocManAddrSubtype"), (0, "DGS-1100-10ME_A1", "lldpLocManAddr"))
if mibBuilder.loadTexts: lldpLocManAddrEntry.setStatus('current')
lldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 8, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrSubtype.setStatus('current')
lldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 8, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddr.setStatus('current')
lldpLocManAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrLen.setStatus('current')
lldpLocManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 8, 1, 4), LldpManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrIfSubtype.setStatus('current')
lldpLocManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrIfId.setStatus('current')
lldpLocManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 15, 8, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrOID.setStatus('current')
lldpRemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1), )
if mibBuilder.loadTexts: lldpRemTable.setStatus('current')
lldpRemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpRemTimeMark"), (0, "DGS-1100-10ME_A1", "lldpRemLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpRemEntry.setStatus('current')
lldpRemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemTimeMark.setStatus('current')
lldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemLocalPortNum.setStatus('current')
lldpRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemIndex.setStatus('current')
lldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 4), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemChassisIdSubtype.setStatus('current')
lldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 5), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemChassisId.setStatus('current')
lldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 6), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortIdSubtype.setStatus('current')
lldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 7), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortId.setStatus('current')
lldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortDesc.setStatus('current')
lldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysName.setStatus('current')
lldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysDesc.setStatus('current')
lldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 11), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysCapSupported.setStatus('current')
lldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 1, 1, 12), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysCapEnabled.setStatus('current')
lldpRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2), )
if mibBuilder.loadTexts: lldpRemManAddrTable.setStatus('current')
lldpRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpRemManTimeMark"), (0, "DGS-1100-10ME_A1", "lldpRemManLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpRemManIndex"), (0, "DGS-1100-10ME_A1", "lldpRemManAddrSubtype"), (0, "DGS-1100-10ME_A1", "lldpRemManAddr"))
if mibBuilder.loadTexts: lldpRemManAddrEntry.setStatus('current')
lldpRemManTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManTimeMark.setStatus('current')
lldpRemManLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManLocalPortNum.setStatus('current')
lldpRemManIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManIndex.setStatus('current')
lldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1, 4), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrSubtype.setStatus('current')
lldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddr.setStatus('current')
lldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1, 6), LldpManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrIfSubtype.setStatus('current')
lldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrIfId.setStatus('current')
lldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 2, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrOID.setStatus('current')
lldpRemUnknownTLVTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 3), )
if mibBuilder.loadTexts: lldpRemUnknownTLVTable.setStatus('current')
lldpRemUnknownTLVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "lldpRemUnknownTimeMark"), (0, "DGS-1100-10ME_A1", "lldpRemUnknownLocalPortNum"), (0, "DGS-1100-10ME_A1", "lldpRemUnknownIndex"), (0, "DGS-1100-10ME_A1", "lldpRemUnknownTLVType"))
if mibBuilder.loadTexts: lldpRemUnknownTLVEntry.setStatus('current')
lldpRemUnknownTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 3, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownTimeMark.setStatus('current')
lldpRemUnknownLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 3, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownLocalPortNum.setStatus('current')
lldpRemUnknownIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownIndex.setStatus('current')
lldpRemUnknownTLVType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownTLVType.setStatus('current')
lldpRemUnknownTLVInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 16, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownTLVInfo.setStatus('current')
lldpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0))
lldpRemTablesChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 1)).setObjects(("DGS-1100-10ME_A1", "lldpStatsRemTablesInserts"), ("DGS-1100-10ME_A1", "lldpStatsRemTablesDeletes"), ("DGS-1100-10ME_A1", "lldpStatsRemTablesDrops"), ("DGS-1100-10ME_A1", "lldpStatsRemTablesAgeouts"))
if mibBuilder.loadTexts: lldpRemTablesChange.setStatus('current')
lldpExceedsMaxFrameSize = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 2)).setObjects(("DGS-1100-10ME_A1", "lldpLocPortId"))
if mibBuilder.loadTexts: lldpExceedsMaxFrameSize.setStatus('current')
lldpDupChasisId = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 3)).setObjects(("DGS-1100-10ME_A1", "lldpRemChassisId"), ("DGS-1100-10ME_A1", "lldpRemPortId"))
if mibBuilder.loadTexts: lldpDupChasisId.setStatus('current')
lldpDupSystemName = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 4)).setObjects(("DGS-1100-10ME_A1", "lldpRemChassisId"), ("DGS-1100-10ME_A1", "lldpRemPortId"), ("DGS-1100-10ME_A1", "lldpRemSysName"))
if mibBuilder.loadTexts: lldpDupSystemName.setStatus('current')
lldpDupManagmentAddress = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 5)).setObjects(("DGS-1100-10ME_A1", "lldpRemChassisId"), ("DGS-1100-10ME_A1", "lldpRemPortId"), ("DGS-1100-10ME_A1", "lldpRemManAddrIfId"))
if mibBuilder.loadTexts: lldpDupManagmentAddress.setStatus('current')
lldpMisConfigPortVlanID = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 6)).setObjects(("DGS-1100-10ME_A1", "lldpRemChassisId"), ("DGS-1100-10ME_A1", "lldpRemPortId"), ("DGS-1100-10ME_A1", "lldpXdot1RemPortVlanId"))
if mibBuilder.loadTexts: lldpMisConfigPortVlanID.setStatus('current')
lldpMisConfigVlanName = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 8)).setObjects(("DGS-1100-10ME_A1", "lldpRemChassisId"), ("DGS-1100-10ME_A1", "lldpRemPortId"), ("DGS-1100-10ME_A1", "lldpXdot1RemVlanName"))
if mibBuilder.loadTexts: lldpMisConfigVlanName.setStatus('current')
lldpMisConfigProtocolIdentity = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 9)).setObjects(("DGS-1100-10ME_A1", "lldpRemChassisId"), ("DGS-1100-10ME_A1", "lldpRemPortId"), ("DGS-1100-10ME_A1", "lldpXdot1RemProtocolId"))
if mibBuilder.loadTexts: lldpMisConfigProtocolIdentity.setStatus('current')
lldpMisConfigMaxFrameSize = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 12)).setObjects(("DGS-1100-10ME_A1", "lldpRemChassisId"), ("DGS-1100-10ME_A1", "lldpRemPortId"), ("DGS-1100-10ME_A1", "lldpXdot3RemMaxFrameSize"))
if mibBuilder.loadTexts: lldpMisConfigMaxFrameSize.setStatus('current')
lldpMisConfigOperMauType = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 32, 17, 0, 13)).setObjects(("DGS-1100-10ME_A1", "lldpRemChassisId"), ("DGS-1100-10ME_A1", "lldpRemPortId"), ("DGS-1100-10ME_A1", "lldpXdot3RemPortOperMauType"))
if mibBuilder.loadTexts: lldpMisConfigOperMauType.setStatus('current')
sysQinQSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1))
qinQGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQGlobalStatus.setStatus('current')
qinQInnerTPID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQInnerTPID.setStatus('current')
qinQConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 2), )
if mibBuilder.loadTexts: qinQConfigTable.setStatus('current')
qinQConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "qinQIfIndex"))
if mibBuilder.loadTexts: qinQConfigEntry.setStatus('current')
qinQIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinQIfIndex.setStatus('current')
qinQRoleState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQRoleState.setStatus('current')
qinQOuterTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQOuterTPID.setStatus('current')
qinQMissDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQMissDrop.setStatus('current')
qinQAddInnerTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQAddInnerTag.setStatus('current')
qinQVlanTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 4), )
if mibBuilder.loadTexts: qinQVlanTranslationTable.setStatus('current')
qinQVlanTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "qinQVlanTransPortNum"), (0, "DGS-1100-10ME_A1", "qinQVlanTransCVID"))
if mibBuilder.loadTexts: qinQVlanTranslationEntry.setStatus('current')
qinQVlanTransPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinQVlanTransPortNum.setStatus('current')
qinQVlanTransCVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinQVlanTransCVID.setStatus('current')
qinQVlanTransSVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQVlanTransSVID.setStatus('current')
qinQVlanTransAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("replace", 2))).clone('add')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQVlanTransAction.setStatus('current')
qinQVlanTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinQVlanTransPriority.setStatus('current')
qinQVlanTransRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 37, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qinQVlanTransRowStatus.setStatus('current')
sysTftpFwTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 1))
tftpFwTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 1, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setStatus('current')
tftpFwTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setStatus('current')
tftpFwTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setStatus('current')
tftpFwTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setStatus('current')
tftpFwTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setStatus('current')
tftpFwTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setStatus('current')
tftpFwTargetTransferPercentage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTransferPercentage.setStatus('current')
sysTftpCfgTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 2))
tftpCfgTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 2, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setStatus('current')
tftpCfgTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setStatus('current')
tftpCfgTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 2, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setStatus('current')
tftpCfgTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setStatus('current')
tftpCfgTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setStatus('current')
tftpCfgTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setStatus('current')
sysTftpSyslogTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3))
syslogFileSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogFileSave.setStatus('current')
tftpSyslogTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSyslogTargetServerIpAddress.setStatus('current')
tftpSyslogTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSyslogTargetServerIpType.setStatus('current')
tftpSyslogTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSyslogTargetInterfaceName.setStatus('current')
tftpSyslogTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSyslogTargetImageFileName.setStatus('current')
tftpSyslogTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSyslogTargetTftpOperation.setStatus('current')
tftpSyslogTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpSyslogTargetTftpOperationStatus.setStatus('current')
tftpSyslogTargetTftpTransferPercentage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpSyslogTargetTftpTransferPercentage.setStatus('current')
sysTftpTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 4))
sysFimwareTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 4, 0))
sysFimwareupgradesuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 4, 0, 1))
if mibBuilder.loadTexts: sysFimwareupgradesuccess.setStatus('current')
sysFimwareillegalfile = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 4, 0, 2))
if mibBuilder.loadTexts: sysFimwareillegalfile.setStatus('current')
sysFimwarefiletransferfailed = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 4, 0, 3))
if mibBuilder.loadTexts: sysFimwarefiletransferfailed.setStatus('current')
sysFimwarewrongchecksum = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 4, 0, 4))
if mibBuilder.loadTexts: sysFimwarewrongchecksum.setStatus('current')
sysFimwareuupgradefailed = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 3, 4, 0, 5))
if mibBuilder.loadTexts: sysFimwareuupgradefailed.setStatus('current')
sysTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1), )
if mibBuilder.loadTexts: sysTimeRangeSettingTable.setStatus('current')
timeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "timeRangeIndex"))
if mibBuilder.loadTexts: timeRangeSettingEntry.setStatus('current')
timeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeIndex.setStatus('current')
timeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeName.setStatus('current')
timeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeDate.setStatus('current')
timeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029))).clone(namedValues=NamedValues(("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartYear.setStatus('current')
timeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartMonth.setStatus('current')
timeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartDay.setStatus('current')
timeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartHour.setStatus('current')
timeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartMinute.setStatus('current')
timeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029))).clone(namedValues=NamedValues(("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndYear.setStatus('current')
timeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndMonth.setStatus('current')
timeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndDay.setStatus('current')
timeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndHour.setStatus('current')
timeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndMinute.setStatus('current')
timeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeMonday.setStatus('current')
timeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeTuesday.setStatus('current')
timeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeWednesday.setStatus('current')
timeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeThursday.setStatus('current')
timeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeFriday.setStatus('current')
timeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeSaturday.setStatus('current')
timeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeSunday.setStatus('current')
timeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 38, 1, 1, 21), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeRowStatus.setStatus('current')
sysTraceRouteCtlAddressType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTraceRouteCtlAddressType.setStatus('current')
sysTraceRouteCtlAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTraceRouteCtlAddress.setStatus('current')
sysTraceRouteCtlTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTraceRouteCtlTimeOut.setStatus('current')
sysTraceRouteCtlTTL = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setUnits('time-to-live value').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTraceRouteCtlTTL.setStatus('current')
sysTraceRouteCtlPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30000, 64900)).clone(33434)).setUnits('UDP Port').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTraceRouteCtlPort.setStatus('current')
sysTraceRouteCtlProbe = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setUnits('probes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTraceRouteCtlProbe.setStatus('current')
sysTraceRouteCtlAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTraceRouteCtlAdminStatus.setStatus('current')
sysTraceRouteHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8), )
if mibBuilder.loadTexts: sysTraceRouteHistoryTable.setStatus('current')
traceRouteHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "traceRouteHistoryIndex"), (0, "DGS-1100-10ME_A1", "traceRouteHistoryHopIndex"), (0, "DGS-1100-10ME_A1", "traceRouteHistoryProbeIndex"))
if mibBuilder.loadTexts: traceRouteHistoryEntry.setStatus('current')
traceRouteHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteHistoryIndex.setStatus('current')
traceRouteHistoryHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteHistoryHopIndex.setStatus('current')
traceRouteHistoryProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteHistoryProbeIndex.setStatus('current')
traceRouteHistoryHAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteHistoryHAddrType.setStatus('current')
traceRouteHistoryHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteHistoryHAddr.setStatus('current')
traceRouteHistoryResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteHistoryResponse.setStatus('current')
traceRouteHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 90, 8, 1, 7), OperationResponseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteHistoryStatus.setStatus('current')
sysRMONGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRMONGlobalState.setStatus('current')
sysRMONStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2))
sysRMONHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3))
sysRMONAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4))
sysRMONEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 3), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsDropEvents.setStatus('current')
rmonStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 6), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsOctets.setStatus('current')
rmonStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsPkts.setStatus('current')
rmonStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsBroadcastPkts.setStatus('current')
rmonStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 2, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsMulticastPkts.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3, 1, 1, 5), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 9), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1, 1, 4), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1, 1, 5), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
rmonEventLastTimeSent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 22, 5, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventLastTimeSent.setStatus('current')
sysDHCPRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 1))
sysDHCPRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2))
dhcpRelayManagermentOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 2))
dhcpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayState.setStatus('current')
dhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayHopCount.setStatus('current')
dhcpRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTimeThreshold.setStatus('current')
dhcpRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 1), )
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsTable.setStatus('current')
dhcpRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "dhcpRelayServerIP"))
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsEntry.setStatus('current')
dhcpRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayServerIP.setStatus('current')
dhcpRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayInterface.setStatus('current')
dhcpRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsRowStatus.setStatus('current')
dhcpRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82State.setStatus('current')
dhcpRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82CheckState.setStatus('current')
dhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82Policy.setStatus('current')
dhcpRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82RemoteIDType.setStatus('current')
dhcpRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 28, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82RemoteID.setStatus('current')
sysDHCPLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDHCPLocalRelayGlobalState.setStatus('current')
sysDHCPLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 29, 2), )
if mibBuilder.loadTexts: sysDHCPLocalRelayTable.setStatus('current')
dhcpLocalRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 29, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "dhcpLocalRelayVlanId"))
if mibBuilder.loadTexts: dhcpLocalRelayEntry.setStatus('current')
dhcpLocalRelayVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelayVlanId.setStatus('current')
dhcpLocalRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 29, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayState.setStatus('current')
sysDHCPv6RelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 1))
sysDHCPv6RelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 2))
sysDHCPv6RelayOption37 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 3))
dhcpv6RelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayState.setStatus('current')
dhcpv6RelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setStatus('current')
dhcpv6RelayInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 2, 1), )
if mibBuilder.loadTexts: dhcpv6RelayInterfaceTable.setStatus('current')
dhcpv6RelayInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "dhcpv6RelayServerIP"))
if mibBuilder.loadTexts: dhcpv6RelayInterfaceEntry.setStatus('current')
dhcpv6RelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 2, 1, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setStatus('current')
dhcpv6RelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayInterface.setStatus('current')
dhcpv6RelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 2, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayRowStatus.setStatus('current')
dhcpv6RelayOption37State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setStatus('current')
dhcpv6RelayOption37CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setStatus('current')
dhcpv6RelayOption37RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid_with_user_define", 1), ("user_define", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setStatus('current')
dhcpv6RelayOption37RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 86, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setStatus('current')
sysBandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlEffectiveTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1000000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlEffectiveTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
bandwidthCtrlEffectiveRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1000000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlEffectiveRxThreshold.setStatus('current')
sysTrafficCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4))
trafficCtrlTrap = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stormOccurred", 1), ("stormCleared", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTrap.setStatus('current')
trafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2), )
if mibBuilder.loadTexts: trafficCtrlTable.setStatus('current')
trafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "trafficCtrlIndex"))
if mibBuilder.loadTexts: trafficCtrlEntry.setStatus('current')
trafficCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCtrlIndex.setStatus('current')
trafficCtrlActionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drop", 0), ("shutdown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlActionMode.setStatus('current')
trafficCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("b", 1), ("m", 2), ("mb", 3), ("u", 4), ("ub", 5), ("um", 6), ("umb", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlType.setStatus('current')
trafficCtrlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 102400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlThreshold.setStatus('current')
trafficCtrlCountDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlCountDown.setStatus('current')
trafficCtrlTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTimeInterval.setStatus('current')
trafficCtrlPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("blocking", 1), ("shutdown", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCtrlPortState.setStatus('current')
sysStormCtrlTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 5))
stormCtrlTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 5, 0))
stormOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 5, 0, 1)).setObjects(("DGS-1100-10ME_A1", "trafficCtrlIndex"), ("DGS-1100-10ME_A1", "trafficCtrlType"))
if mibBuilder.loadTexts: stormOccurred.setStatus('current')
stormCleared = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 13, 5, 0, 2)).setObjects(("DGS-1100-10ME_A1", "trafficCtrlIndex"), ("DGS-1100-10ME_A1", "trafficCtrlTimeInterval"))
if mibBuilder.loadTexts: stormCleared.setStatus('current')
sysQos1p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 4))
qosTrafficClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 4, 1), )
if mibBuilder.loadTexts: qosTrafficClassTable.setStatus('current')
qosTrafficClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 4, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "qosTrafficClassPriority"))
if mibBuilder.loadTexts: qosTrafficClassEntry.setStatus('current')
qosTrafficClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosTrafficClassPriority.setStatus('current')
qosTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosTrafficClass.setStatus('current')
sysQosPortBase = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 3))
qosPortBaseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 3, 1), )
if mibBuilder.loadTexts: qosPortBaseTable.setStatus('current')
qosPortBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "qosPortBasePortIndex"))
if mibBuilder.loadTexts: qosPortBaseEntry.setStatus('current')
qosPortBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPortBasePortIndex.setStatus('current')
qosPortBasePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortBasePriority.setStatus('current')
qosPortBaseEffectivePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPortBaseEffectivePriority.setStatus('current')
sysQosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2), ("portbase", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysQosMode.setStatus('current')
sysQosQueuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysQosQueuingMechanism.setStatus('current')
sysQosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6))
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 6, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
sysQosScheduling = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 5))
qosSchedulingClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 5, 1), )
if mibBuilder.loadTexts: qosSchedulingClassTable.setStatus('current')
qosSchedulingClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 5, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "qosSchedulingClassIndex"))
if mibBuilder.loadTexts: qosSchedulingClassEntry.setStatus('current')
qosSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosSchedulingClassIndex.setStatus('current')
qosSchedulingWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosSchedulingWeight.setStatus('current')
sysSNTPSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17))
sntpTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeSeconds.setStatus('current')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
sntpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpGlobalState.setStatus('current')
sntpDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDSTOffset.setStatus('current')
sntpGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpGMTMinutes.setStatus('current')
sntpDSTStartTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDSTStartTime.setStatus('current')
sntpDSTEndTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDSTEndTime.setStatus('current')
sntpDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 17, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDSTState.setStatus('current')
sysSNTPServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 18))
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 18, 1), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 18, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "sntpServerAddrType"), (0, "DGS-1100-10ME_A1", "sntpServerAddr"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerAddrType.setStatus('current')
sntpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 18, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerAddr.setStatus('current')
sntpServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerType.setStatus('current')
sntpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 20, 18, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerRowStatus.setStatus('current')
portSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 1), )
if mibBuilder.loadTexts: portSecurityTable.setStatus('current')
portSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "portSecurityIndex"))
if mibBuilder.loadTexts: portSecurityEntry.setStatus('current')
portSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityIndex.setStatus('current')
portSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityState.setStatus('current')
portSecurityMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityMLA.setStatus('current')
portSecurityLockAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deleteOnReset", 1), ("deleteOnTimeout", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityLockAddrMode.setStatus('current')
portSecFDBPermanentTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 2), )
if mibBuilder.loadTexts: portSecFDBPermanentTable.setStatus('current')
portSecFDBPermanentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "portSecFDBPermVlanID"), (0, "DGS-1100-10ME_A1", "portSecFDBPermMac"))
if mibBuilder.loadTexts: portSecFDBPermanentEntry.setStatus('current')
portSecFDBPermVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermVlanID.setStatus('current')
portSecFDBPermMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermMac.setStatus('current')
portSecFDBPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermPort.setStatus('current')
portSecFDBPermType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("deleteOnReset", 1), ("deleteOnTimeout", 2), ("permanent", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermType.setStatus('current')
portSecFDBPermEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecFDBPermEntryState.setStatus('current')
sysPortSecurityTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 12))
portSecurityTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 12, 0))
portSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 12, 0, 1)).setObjects(("DGS-1100-10ME_A1", "portSecurityIndex"), ("DGS-1100-10ME_A1", "portSecurityMLA"))
if mibBuilder.loadTexts: portSecurityViolation.setStatus('current')
sysMldsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 1))
sysMldsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3))
sysMldsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 4))
mldsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsStatus.setStatus('current')
mldsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 3), )
if mibBuilder.loadTexts: mldsVlanRouterTable.setStatus('current')
mldsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "mldsVlanRouterVlanId"))
if mibBuilder.loadTexts: mldsVlanRouterEntry.setStatus('current')
mldsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterVlanId.setStatus('current')
mldsVlanRouterStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRouterStaticPortList.setStatus('current')
mldsVlanRouterDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 3, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterDynamicPortList.setStatus('current')
mldsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4), )
if mibBuilder.loadTexts: mldsVlanFilterTable.setStatus('current')
mldsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "mldsVlanFilterVlanId"))
if mibBuilder.loadTexts: mldsVlanFilterEntry.setStatus('current')
mldsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanFilterVlanId.setStatus('current')
mldsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanSnoopStatus.setStatus('current')
mldsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQuerier.setStatus('current')
mldsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanCfgQuerier.setStatus('current')
mldsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanQueryInterval.setStatus('current')
mldsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanFastLeave.setStatus('current')
mldsVlanQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanQuerierVersion.setStatus('current')
mldsVlanRouterPortPurgeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRouterPortPurgeInterval.setStatus('current')
mldsVlanHostPortPurgeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanHostPortPurgeInterval.setStatus('current')
mldsVlanRobustnessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRobustnessValue.setStatus('current')
mldsVlanGrpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanGrpQueryInterval.setStatus('current')
mldsVlanQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanQueryMaxResponseTime.setStatus('current')
mldsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 5), )
if mibBuilder.loadTexts: mldsVlanMulticastGroupTable.setStatus('current')
mldsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 5, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "mldsVlanMulticastGroupVlanId"), (0, "DGS-1100-10ME_A1", "mldsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: mldsVlanMulticastGroupEntry.setStatus('current')
mldsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupVlanId.setStatus('current')
mldsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupIpAddress.setStatus('current')
mldsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupMacAddress.setStatus('current')
mldsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupPortList.setStatus('current')
mldsHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 4, 1), )
if mibBuilder.loadTexts: mldsHostTable.setStatus('current')
mldsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 4, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "mldsHostTableVLANID"), (0, "DGS-1100-10ME_A1", "mldsHostTableGroupAddress"), (0, "DGS-1100-10ME_A1", "mldsHostTablePort"), (0, "DGS-1100-10ME_A1", "mldsHostTableHostIPAddress"))
if mibBuilder.loadTexts: mldsHostEntry.setStatus('current')
mldsHostTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableVLANID.setStatus('current')
mldsHostTableGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 4, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableGroupAddress.setStatus('current')
mldsHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTablePort.setStatus('current')
mldsHostTableHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 88, 4, 1, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableHostIPAddress.setStatus('current')
sysStaticMacTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 1), )
if mibBuilder.loadTexts: sysStaticMacTable.setStatus('current')
staticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "staticMacVlanID"), (0, "DGS-1100-10ME_A1", "staticMacAddr"))
if mibBuilder.loadTexts: staticMacEntry.setStatus('current')
staticMacVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMacVlanID.setStatus('current')
staticMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMacAddr.setStatus('current')
staticMacPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacPort.setStatus('current')
staticMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacStatus.setStatus('current')
sysDynamicFdbTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 2), )
if mibBuilder.loadTexts: sysDynamicFdbTable.setStatus('current')
sysDynamicFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "dynamicFdbId"), (0, "DGS-1100-10ME_A1", "dynamicFdbMacAddr"))
if mibBuilder.loadTexts: sysDynamicFdbEntry.setStatus('current')
dynamicFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicFdbId.setStatus('current')
dynamicFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicFdbMacAddr.setStatus('current')
dynamicFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicFdbPort.setStatus('current')
dynamicFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("self", 4), ("static", 5), ("deleteOnReset", 6), ("deleteOnTimeout", 7), ("permanent", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicFdbStatus.setStatus('current')
sysFdbClear = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 3))
sysFdbClearId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFdbClearId.setStatus('current')
sysFdbClearAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 9, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clearAll", 1), ("clearByVlanId", 2), ("clearByPort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFdbClearAction.setStatus('current')
syslimitIPMulticastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 1), )
if mibBuilder.loadTexts: syslimitIPMulticastProfileTable.setStatus('current')
limitIPMulticastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "limitIPMulticastProfileID"), (0, "DGS-1100-10ME_A1", "limitIPMulticastIPType"))
if mibBuilder.loadTexts: limitIPMulticastProfileEntry.setStatus('current')
limitIPMulticastProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIPMulticastProfileID.setStatus('current')
limitIPMulticastIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIPMulticastIPType.setStatus('current')
limitIPMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIPMulticastProfileName.setStatus('current')
limitIPMulticastProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIPMulticastProfileStatus.setStatus('current')
syslimitIPMulticastPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 3), )
if mibBuilder.loadTexts: syslimitIPMulticastPortTable.setStatus('current')
limitIPMulticastPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "limitIPMulticastPortID"), (0, "DGS-1100-10ME_A1", "limitIPMulticastPortIPType"))
if mibBuilder.loadTexts: limitIPMulticastPortEntry.setStatus('current')
limitIPMulticastPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIPMulticastPortID.setStatus('current')
limitIPMulticastPortIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIPMulticastPortIPType.setStatus('current')
limitIPMulticastPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIPMulticastPortState.setStatus('current')
limitIPMulticastPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 3, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIPMulticastPortProfileID.setStatus('current')
limitIPMulticastPortMaxGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIPMulticastPortMaxGrp.setStatus('current')
limitIpMulticastRangeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 4), )
if mibBuilder.loadTexts: limitIpMulticastRangeTable.setStatus('current')
limitIpMulticastRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "limitIpMulticastRangeProfileID"), (0, "DGS-1100-10ME_A1", "limitIpMulticastRangeIPType"), (0, "DGS-1100-10ME_A1", "limitIpMulticastRangeStartIpAddr"), (0, "DGS-1100-10ME_A1", "limitIpMulticastRangeEndIpAddr"))
if mibBuilder.loadTexts: limitIpMulticastRangeEntry.setStatus('current')
limitIpMulticastRangeProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastRangeProfileID.setStatus('current')
limitIpMulticastRangeIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastRangeIPType.setStatus('current')
limitIpMulticastRangeStartIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastRangeStartIpAddr.setStatus('current')
limitIpMulticastRangeEndIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastRangeEndIpAddr.setStatus('current')
limitIpMulticastRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 45, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastRangeStatus.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18, 2), )
if mibBuilder.loadTexts: sysMirrorPortTable.setStatus('current')
mirrorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "mirrorTargetIfIndex"))
if mibBuilder.loadTexts: mirrorPortEntry.setStatus('current')
mirrorTargetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorTargetIfIndex.setStatus('current')
mirrorTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorTargetPort.setStatus('current')
mirrorIngressPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorIngressPortList.setStatus('current')
mirrorEgressPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorEgressPortList.setStatus('current')
mirrorCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 18, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorCtrlRowStatus.setStatus('current')
sysMulticastFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 49, 1), )
if mibBuilder.loadTexts: sysMulticastFilterPortTable.setStatus('current')
multicastFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 49, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "multicastFilterPortIndex"))
if mibBuilder.loadTexts: multicastFilterPortEntry.setStatus('current')
multicastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 49, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastFilterPortIndex.setStatus('current')
multicastFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 49, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("filter", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastFilterPortType.setStatus('current')
sysStaticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 19, 1), )
if mibBuilder.loadTexts: sysStaticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 19, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "staticMcastVlanID"), (0, "DGS-1100-10ME_A1", "staticMcastMac"), (0, "DGS-1100-10ME_A1", "staticMcastEgressPorts"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 19, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 19, 1, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 19, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
sysDDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 101, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDDPStatus.setStatus('current')
sysDDPReportTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 101, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 90, 120))).clone(namedValues=NamedValues(("never", 0), ("offset30sec", 30), ("offset60sec", 60), ("offset90sec", 90), ("offset120sec", 120))).clone('never')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDDPReportTime.setStatus('current')
sysDDPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 101, 3), )
if mibBuilder.loadTexts: sysDDPTable.setStatus('current')
ddpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 101, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "ddpPort"))
if mibBuilder.loadTexts: ddpEntry.setStatus('current')
ddpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 101, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpPort.setStatus('current')
ddpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 101, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddpPortStatus.setStatus('current')
sysEee = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 60, 1))
eeeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 60, 1, 1), )
if mibBuilder.loadTexts: eeeTable.setStatus('current')
eeeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 60, 1, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "eeePort"))
if mibBuilder.loadTexts: eeeEntry.setStatus('current')
eeePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 60, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eeePort.setStatus('current')
eeestatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 60, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eeestatus.setStatus('current')
sysPppoeGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 98, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPppoeGlobalState.setStatus('current')
sysPppoePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 98, 2), )
if mibBuilder.loadTexts: sysPppoePortTable.setStatus('current')
pppoePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 98, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "pppoePortIndex"))
if mibBuilder.loadTexts: pppoePortEntry.setStatus('current')
pppoePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 98, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoePortIndex.setStatus('current')
pppoePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 98, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortState.setStatus('current')
pppoePortCircuitIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 98, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("udf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortCircuitIDType.setStatus('current')
pppoePortUDFString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 98, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortUDFString.setStatus('current')
sysIgsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 1))
sysIgsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3))
sysIgsAccessAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 5))
sysIgsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 6))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsReportForwardRouterOnly = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsReportForwardRouterOnly.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRouterStaticPortList.setStatus('current')
igsVlanRouterDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 3, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterDynamicPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmp_v1", 1), ("igmp_v2", 2), ("igmp_v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQuerierVersion.setStatus('current')
igsVlanRouterPortPurgeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRouterPortPurgeInterval.setStatus('current')
igsVlanHostPortPurgeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanHostPortPurgeInterval.setStatus('current')
igsVlanRobustnessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRobustnessValue.setStatus('current')
igsVlanGrpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanGrpQueryInterval.setStatus('current')
igsVlanQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQueryMaxResponseTime.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 5, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "igsVlanMulticastGroupVlanId"), (0, "DGS-1100-10ME_A1", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
igsAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 5, 1), )
if mibBuilder.loadTexts: igsAccessAuthTable.setStatus('current')
igsAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 5, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "igsAccessAuthPortIndex"))
if mibBuilder.loadTexts: igsAccessAuthEntry.setStatus('current')
igsAccessAuthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsAccessAuthPortIndex.setStatus('current')
igsAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsAccessAuthState.setStatus('current')
igsHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 6, 1), )
if mibBuilder.loadTexts: igsHostTable.setStatus('current')
igsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 6, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "igsHostTableVlanId"), (0, "DGS-1100-10ME_A1", "igsHostTableGroupAddress"), (0, "DGS-1100-10ME_A1", "igsHostTablePort"), (0, "DGS-1100-10ME_A1", "igsHostTableHostIPAddress"))
if mibBuilder.loadTexts: igsHostEntry.setStatus('current')
igsHostTableVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableVlanId.setStatus('current')
igsHostTableGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableGroupAddress.setStatus('current')
igsHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTablePort.setStatus('current')
igsHostTableHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 10, 6, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableHostIPAddress.setStatus('current')
sysIGMPMulticastVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIGMPMulticastVlanStatus.setStatus('current')
sysIGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2), )
if mibBuilder.loadTexts: sysIGMPMulticastVlanTable.setStatus('current')
sysIGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "igmpMulticastVlanid"), (0, "DGS-1100-10ME_A1", "igmpMulticastVlanAddressType"))
if mibBuilder.loadTexts: sysIGMPMulticastVlanEntry.setStatus('current')
igmpMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanid.setStatus('current')
igmpMulticastVlanAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanAddressType.setStatus('current')
igmpMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanName.setStatus('current')
igmpMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanSourcePort.setStatus('current')
igmpMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanMemberPort.setStatus('current')
igmpMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanTagMemberPort.setStatus('current')
igmpMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanState.setStatus('current')
igmpMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanReplaceSourceIp.setStatus('current')
igmpMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanRowStatus.setStatus('current')
sysIGMPMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 3), )
if mibBuilder.loadTexts: sysIGMPMulticastVlanGroupTable.setStatus('current')
sysIGMPMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 3, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "igmpMulticastVlanGroupVid"), (0, "DGS-1100-10ME_A1", "igmpMulticastVlanGroupAddressType"), (0, "DGS-1100-10ME_A1", "igmpMulticastVlanGroupFromIp"), (0, "DGS-1100-10ME_A1", "igmpMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: sysIGMPMulticastVlanGroupEntry.setStatus('current')
igmpMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupVid.setStatus('current')
igmpMulticastVlanGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupAddressType.setStatus('current')
igmpMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupFromIp.setStatus('current')
igmpMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupToIp.setStatus('current')
igmpMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 27, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanGroupStatus.setStatus('current')
sysPnacCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 1))
pnacStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacStatus.setStatus('current')
pnacMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portBase", 1), ("macBase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacMode.setStatus('current')
pnacProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pnacProtocolRadiusEap", 1), ("pnacProtocolLocal", 2))).clone('pnacProtocolLocal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacProtocol.setStatus('current')
pnacRadiusAccountingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusAccountingState.setStatus('current')
sysPnacPortAccessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2))
pnacPortAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1), )
if mibBuilder.loadTexts: pnacPortAccessControlTable.setStatus('current')
pnacPortAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "pnacConfigPortNumber"))
if mibBuilder.loadTexts: pnacPortAccessControlEntry.setStatus('current')
pnacConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnacConfigPortNumber.setStatus('current')
pnacQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacQuietPeriod.setStatus('current')
pnacTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacTxPeriod.setStatus('current')
pnacSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacSuppTimeout.setStatus('current')
pnacServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacServerTimeout.setStatus('current')
pnacMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacMaxReq.setStatus('current')
pnacReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacReAuthPeriod.setStatus('current')
pnacReAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacReAuthentication.setStatus('current')
pnacConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacConfigPortControl.setStatus('current')
pnacCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticator", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacCapability.setStatus('current')
pnacDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacDirection.setStatus('current')
pnacOperControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnacOperControlledDirections.setStatus('current')
pnacPortAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorized", 1), ("unAuthorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnacPortAuthStatus.setStatus('current')
sysPnacUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 3))
pnacUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 3, 1), )
if mibBuilder.loadTexts: pnacUserTable.setStatus('current')
pnacUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 3, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "pnacUserName"))
if mibBuilder.loadTexts: pnacUserEntry.setStatus('current')
pnacUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnacUserName.setStatus('current')
pnacUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacUserPassword.setStatus('current')
pnacUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 3, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacUserStatus.setStatus('current')
pnacRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1), )
if mibBuilder.loadTexts: pnacRadiusServerTable.setStatus('current')
pnacRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "pnacRadiusServerIndex"))
if mibBuilder.loadTexts: pnacRadiusServerEntry.setStatus('current')
pnacRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnacRadiusServerIndex.setStatus('current')
pnacRadiusIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusIPType.setStatus('current')
pnacRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusServerAddress.setStatus('current')
pnacRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusServerAuthenticationPort.setStatus('current')
pnacRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusServerAccountingPort.setStatus('current')
pnacRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusServerTimeout.setStatus('current')
pnacRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusServerRetransmit.setStatus('current')
pnacRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusServerKey.setStatus('current')
pnacRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 23, 4, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnacRadiusServerStatus.setStatus('current')
sysGuestVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGuestVlanName.setStatus('current')
sysGuestVlanPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 24, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGuestVlanPort.setStatus('current')
sysGuestVlanDelState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGuestVlanDelState.setStatus('current')
sysSNMPGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNMPGlobalState.setStatus('current')
sysSNMPUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2))
sysSNMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3))
sysSNMPViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 4))
sysSNMPCommunity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 5))
sysSNMPHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 6))
sysSNMPEngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNMPEngineID.setStatus('current')
sysSNMPTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8))
snmpUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: snmpUserTable.setStatus('current')
snmpUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "snmpUserName"), (0, "DGS-1100-10ME_A1", "snmpUserVersion"))
if mibBuilder.loadTexts: snmpUserEntry.setStatus('current')
snmpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserName.setStatus('current')
snmpUserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3))).clone('v1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserVersion.setStatus('current')
snmpUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserGroupName.setStatus('current')
snmpUserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserAuthProtocol.setStatus('current')
snmpUserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserAuthProtocolPassword.setStatus('current')
snmpUserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserPrivProtocol.setStatus('current')
snmpUserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserPrivProtocolPassword.setStatus('current')
snmpUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserStatus.setStatus('current')
snmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: snmpGroupTable.setStatus('current')
snmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "snmpGroupName"), (0, "DGS-1100-10ME_A1", "snmpGroupSecurityModel"), (0, "DGS-1100-10ME_A1", "snmpGroupSecurityLevel"))
if mibBuilder.loadTexts: snmpGroupEntry.setStatus('current')
snmpGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupName.setStatus('current')
snmpGroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupSecurityModel.setStatus('current')
snmpGroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthNoPriv", 1), ("authNoPriv", 2), ("authPriv", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupSecurityLevel.setStatus('current')
snmpGroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupReadViewName.setStatus('current')
snmpGroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupWriteViewName.setStatus('current')
snmpGroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupNotifyViewName.setStatus('current')
snmpGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 3, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupStatus.setStatus('current')
snmpViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 4, 1), )
if mibBuilder.loadTexts: snmpViewTreeTable.setStatus('current')
snmpViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 4, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "snmpViewTreeName"), (0, "DGS-1100-10ME_A1", "snmpViewTreeSubtree"))
if mibBuilder.loadTexts: snmpViewTreeEntry.setStatus('current')
snmpViewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpViewTreeName.setStatus('current')
snmpViewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpViewTreeSubtree.setStatus('current')
snmpViewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpViewTreeMask.setStatus('current')
snmpViewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2))).clone('included')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpViewTreeType.setStatus('current')
snmpViewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 4, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpViewTreeStatus.setStatus('current')
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 5, 1), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('current')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 5, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "snmpCommunityName"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('current')
snmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 5, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityName.setStatus('current')
snmpCommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpCommunityPolicy.setStatus('current')
snmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 5, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityStatus.setStatus('current')
snmpHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: snmpHostTable.setStatus('current')
snmpHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "snmpHostAddress"), (0, "DGS-1100-10ME_A1", "snmpHostIPType"))
if mibBuilder.loadTexts: snmpHostEntry.setStatus('current')
snmpHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 6, 1, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpHostAddress.setStatus('current')
snmpHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpHostIPType.setStatus('current')
snmpHostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 6, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHostCommunityName.setStatus('current')
snmpHostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3-NoAuthNoPriv", 3), ("v3-AuthNoPriv", 4), ("v3-AuthPriv", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHostVersion.setStatus('current')
snmpHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 6, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHostStatus.setStatus('current')
snmpTrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSNMPAuthentication.setStatus('current')
snmpTrapColdStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapColdStart.setStatus('current')
snmpTrapWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapWarmStart.setStatus('current')
snmpTrapFiberLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapFiberLinkUpDown.setStatus('current')
snmpTrapTwistLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapTwistLinkUpDown.setStatus('current')
snmpTrapFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapFirmwareUpgrade.setStatus('current')
snmpTrapPortSecViolation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPortSecViolation.setStatus('current')
snmpTrapLBDDetection = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapLBDDetection.setStatus('current')
snmpTrapDuplicateIPDetected = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 5, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDuplicateIPDetected.setStatus('current')
syslogSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 1))
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
syslogSaveMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onDemand", 0), ("timeInterval", 1), ("logTrigger", 2))).clone('logTrigger')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMode.setStatus('current')
syslogSaveMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMinutes.setStatus('current')
syslogClearLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogClearLog.setStatus('current')
syslogServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3))
syslogServTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1), )
if mibBuilder.loadTexts: syslogServTable.setStatus('current')
syslogServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "syslogServIndex"))
if mibBuilder.loadTexts: syslogServEntry.setStatus('current')
syslogServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogServIndex.setStatus('current')
syslogServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServAddrType.setStatus('current')
syslogServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServAddr.setStatus('current')
syslogServSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("information", 6), ("debug", 7))).clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSeverity.setStatus('current')
syslogServFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServFacility.setStatus('current')
syslogServUDPport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(514, 514), ValueRangeConstraint(6000, 65535), )).clone(514)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServUDPport.setStatus('current')
syslogServSrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvStatus.setStatus('current')
syslogServSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 3, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvRowStatus.setStatus('current')
syslogMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 4))
syslogMsgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 4, 1), )
if mibBuilder.loadTexts: syslogMsgTable.setStatus('current')
syslogMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 4, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "syslogMsgIndex"))
if mibBuilder.loadTexts: syslogMsgEntry.setStatus('current')
syslogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogMsgIndex.setStatus('current')
syslogMsgDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogMsgDescr.setStatus('current')
syslogMsgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogMsgTime.setStatus('current')
syslogMsgSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 16, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("information", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogMsgSeverity.setStatus('current')
sysEoamSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1))
sysEoamLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2))
sysEoamStats = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3))
sysEoamEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4))
sysEoamTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 5))
sysEoamLoopbackTest = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6))
eoamTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2), )
if mibBuilder.loadTexts: eoamTable.setStatus('current')
eoamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "eoamIfIndex"))
if mibBuilder.loadTexts: eoamEntry.setStatus('current')
eoamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamIfIndex.setStatus('current')
eoamState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamState.setStatus('current')
eoamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamMode.setStatus('current')
eoamReceivedRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("process", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamReceivedRemoteLoopback.setStatus('current')
eoamRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoopBack", 1), ("startLoopBack", 2), ("remoteLoopBack", 3), ("stopLoopBack", 4), ("localLoopBack", 5), ("unknownLoopBack", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamRemoteLoopback.setStatus('current')
eoamMaxOAMPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamMaxOAMPDU.setStatus('current')
eoamUnidirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamUnidirection.setStatus('current')
eoamLinkMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLinkMonitoring.setStatus('current')
eoamVarReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamVarReq.setStatus('current')
eoamRemoteLoopbackSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamRemoteLoopbackSupport.setStatus('current')
eoamPDURev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPDURev.setStatus('current')
eoamOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("disabled", 1), ("linkFault", 2), ("passiveWait", 3), ("activeSendLocal", 4), ("sendLocalAndRemote", 5), ("sendLocalAndRemoteOk", 6), ("oamPeeringLocallyRejected", 7), ("oamPeeringRemotelyRejected", 8), ("operational", 9), ("nonOperHalfDuplex", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamOperStatus.setStatus('current')
eoamPeerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passive", 1), ("active", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPeerMode.setStatus('current')
eoamPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPeerMacAddress.setStatus('current')
eoamPeerVendorOui = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPeerVendorOui.setStatus('current')
eoamPeerMaxOAMPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPeerMaxOAMPDU.setStatus('current')
eoamPeerUnidirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPeerUnidirection.setStatus('current')
eoamPeerLinkMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPeerLinkMonitoring.setStatus('current')
eoamPeerVarReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPeerVarReq.setStatus('current')
eoamPeerPDURev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamPeerPDURev.setStatus('current')
eoamLinkMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1), )
if mibBuilder.loadTexts: eoamLinkMonitorTable.setStatus('current')
eoamLinkMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "eoamLinkMonitorIfIndex"))
if mibBuilder.loadTexts: eoamLinkMonitorEntry.setStatus('current')
eoamLinkMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLinkMonitorIfIndex.setStatus('current')
errorSymbolNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolNotifyState.setStatus('current')
errorSymbolThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolThreshold.setStatus('current')
errorSymbolWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolWindow.setStatus('current')
errorFrameNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameNotifyState.setStatus('current')
errorFrameThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameThreshold.setStatus('current')
errorFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameWindow.setStatus('current')
errorFrameSecondsNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsNotifyState.setStatus('current')
errorFrameSecondsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsThreshold.setStatus('current')
errorFrameSecondsWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 900000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsWindow.setStatus('current')
errorFramePeriodNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodNotifyState.setStatus('current')
errorFramePeriodThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodThreshold.setStatus('current')
errorFramePeriodWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(148810, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodWindow.setStatus('current')
eoamCriticalLinkEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamCriticalLinkEventState.setStatus('current')
sysEoamStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1), )
if mibBuilder.loadTexts: sysEoamStatsTable.setStatus('current')
eoamStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "eoamInfomationIndex"))
if mibBuilder.loadTexts: eoamStatsEntry.setStatus('current')
eoamInfomationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamInfomationIndex.setStatus('current')
eoamInformationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamInformationTx.setStatus('current')
eoamInformationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamInformationRx.setStatus('current')
eoamUniqueEventNotificationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamUniqueEventNotificationTx.setStatus('current')
eoamUniqueEventNotificationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamUniqueEventNotificationRx.setStatus('current')
eoamDuplicateEventNotificationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamDuplicateEventNotificationTx.setStatus('current')
eoamDuplicateEventNotificationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamDuplicateEventNotificationRx.setStatus('current')
eoamLoopbackControlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackControlTx.setStatus('current')
eoamLoopbackControlRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackControlRx.setStatus('current')
eoamVariableRequestTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamVariableRequestTx.setStatus('current')
eoamVariableRequestRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamVariableRequestRx.setStatus('current')
eoamVariableResponseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamVariableResponseTx.setStatus('current')
eoamVariableResponseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamVariableResponseRx.setStatus('current')
eoamOrgSpecificTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 14), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamOrgSpecificTx.setStatus('current')
eoamOrgSpecificRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 15), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamOrgSpecificRx.setStatus('current')
eoamUnsupportedCodesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 16), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamUnsupportedCodesTx.setStatus('current')
eoamUnsupportedCodesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 17), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamUnsupportedCodesRx.setStatus('current')
eoamFramesLostDueToOam = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 1, 1, 18), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamFramesLostDueToOam.setStatus('current')
sysEoamStatsClearPortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 3, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEoamStatsClearPortlist.setStatus('current')
sysOamEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2), )
if mibBuilder.loadTexts: sysOamEventLogTable.setStatus('current')
eoamEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "eoamEventLogPort"), (0, "DGS-1100-10ME_A1", "eoamEventLogIndex"))
if mibBuilder.loadTexts: eoamEventLogEntry.setStatus('current')
eoamEventLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogPort.setStatus('current')
eoamEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogIndex.setStatus('current')
eoamEventLogTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogTimestamp.setStatus('current')
eoamEventLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogType.setStatus('current')
eoamEventLogLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogLocation.setStatus('current')
eoamEventLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogValue.setStatus('current')
eoamEventLogWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogWindow.setStatus('current')
eoamEventLogThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogThreshold.setStatus('current')
eoamEventLogAccError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamEventLogAccError.setStatus('current')
sysEoamEventLogClearPortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 4, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEoamEventLogClearPortlist.setStatus('current')
eoamTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 5, 0))
eoamNotifyThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 5, 0, 1)).setObjects(("DGS-1100-10ME_A1", "eoamEventLogPort"), ("DGS-1100-10ME_A1", "eoamEventLogTimestamp"), ("DGS-1100-10ME_A1", "eoamEventLogType"), ("DGS-1100-10ME_A1", "eoamEventLogLocation"), ("DGS-1100-10ME_A1", "eoamEventLogValue"), ("DGS-1100-10ME_A1", "eoamEventLogWindow"), ("DGS-1100-10ME_A1", "eoamEventLogThreshold"), ("DGS-1100-10ME_A1", "eoamEventLogAccError"))
if mibBuilder.loadTexts: eoamNotifyThresholdEvent.setStatus('current')
eoamNotifyNonThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 5, 0, 2)).setObjects(("DGS-1100-10ME_A1", "eoamEventLogPort"), ("DGS-1100-10ME_A1", "eoamEventLogTimestamp"), ("DGS-1100-10ME_A1", "eoamEventLogType"), ("DGS-1100-10ME_A1", "eoamEventLogLocation"), ("DGS-1100-10ME_A1", "eoamEventLogAccError"))
if mibBuilder.loadTexts: eoamNotifyNonThresholdEvent.setStatus('current')
eoamLoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1), )
if mibBuilder.loadTexts: eoamLoopbackTestTable.setStatus('current')
eoamLoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "eoamLoopbackTestIndex"))
if mibBuilder.loadTexts: eoamLoopbackTestEntry.setStatus('current')
eoamLoopbackTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackTestIndex.setStatus('current')
eoamLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoopback", 1), ("remoteLoopback", 2), ("unknown", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackStatus.setStatus('current')
eoamLoopbackTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamLoopbackTestPattern.setStatus('current')
eoamLoopbackTestPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamLoopbackTestPktSize.setStatus('current')
eoamLoopbackTestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamLoopbackTestCount.setStatus('current')
eoamLoopbackTestWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamLoopbackTestWaitTime.setStatus('current')
eoamLoopbackTestCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoopbackTest", 1), ("startLoopbackTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamLoopbackTestCommand.setStatus('current')
eoamLoopbackTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInitiated", 1), ("loopbackTestInprogress", 2), ("loopbackTestCompleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackTestStatus.setStatus('current')
eoamLoopbackTestStartTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackTestStartTimestamp.setStatus('current')
eoamLoopbackTestEndTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackTestEndTimestamp.setStatus('current')
eoamLoopbackTestTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackTestTxCount.setStatus('current')
eoamLoopbackTestRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackTestRxCount.setStatus('current')
eoamLoopbackTestMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackTestMatchCount.setStatus('current')
eoamLoopbackStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 2), )
if mibBuilder.loadTexts: eoamLoopbackStatsTable.setStatus('current')
eoamLoopbackStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "eoamLoopbackStatsIndex"))
if mibBuilder.loadTexts: eoamLoopbackStatsEntry.setStatus('current')
eoamLoopbackStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackStatsIndex.setStatus('current')
eoamLoopbackStatsStartTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackStatsStartTimestamp.setStatus('current')
eoamLoopbackStatsEndTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackStatsEndTimestamp.setStatus('current')
eoamLoopbackStatsTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackStatsTxCount.setStatus('current')
eoamLoopbackStatsRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackStatsRxCount.setStatus('current')
eoamLoopbackStatsMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 51, 6, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLoopbackStatsMatchCount.setStatus('current')
trafficSegmentationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 9, 1), )
if mibBuilder.loadTexts: trafficSegmentationTable.setStatus('current')
trafficSegmentationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 9, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "trafficSegmentationIfIndex"))
if mibBuilder.loadTexts: trafficSegmentationEntry.setStatus('current')
trafficSegmentationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 9, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegmentationIfIndex.setStatus('current')
trafficSegmentationMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 9, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegmentationMemberList.setStatus('current')
sysPingDestIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 100, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPingDestIpType.setStatus('current')
sysPingDestIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 100, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPingDestIpAddr.setStatus('current')
sysPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 100, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPingTimeout.setStatus('current')
sysPingTimes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 100, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPingTimes.setStatus('current')
sysPingStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 100, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPingStart.setStatus('current')
sysPingStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 100, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notinitiated", 1), ("progress", 2), ("completed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPingStatus.setStatus('current')
sysPingSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 100, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPingSuccesses.setStatus('current')
sysMacNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMacNotifyState.setStatus('current')
sysmacNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysmacNotifyInterval.setStatus('current')
sysmacNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysmacNotifyHistorySize.setStatus('current')
sysmacNotifyCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 4), )
if mibBuilder.loadTexts: sysmacNotifyCtrlTable.setStatus('current')
macNotifyCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 4, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "macNotifyPortIndex"))
if mibBuilder.loadTexts: macNotifyCtrlEntry.setStatus('current')
macNotifyPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotifyPortIndex.setStatus('current')
macNotifyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyPortStatus.setStatus('current')
sysMacNotifyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 5))
fdbTableChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 25, 5, 1)).setObjects(("DGS-1100-10ME_A1", "portSecFDBPermVlanID"), ("DGS-1100-10ME_A1", "portSecFDBPermMac"), ("DGS-1100-10ME_A1", "portSecFDBPermPort"))
if mibBuilder.loadTexts: fdbTableChanged.setStatus('current')
sysArp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15, 1))
arpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15, 1, 1), )
if mibBuilder.loadTexts: arpTable.setStatus('current')
arpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15, 1, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "arpIpAddr"))
if mibBuilder.loadTexts: arpEntry.setStatus('current')
arpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIpAddr.setStatus('current')
arpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15, 1, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpMacAddress.setStatus('current')
arpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpType.setStatus('current')
arpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15, 1, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpRowStatus.setStatus('current')
cmArpClear = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("clearAll", 1), ("cleatAllStatic", 2), ("clearAllDynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmArpClear.setStatus('current')
sysUserAccount = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1))
adminUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1, 1), )
if mibBuilder.loadTexts: adminUserTable.setStatus('current')
adminUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "userName"))
if mibBuilder.loadTexts: adminUserEntry.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
userAccessRight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("admin", 1), ("operator", 2), ("user", 3))).clone('admin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAccessRight.setStatus('current')
userEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plainText", 1), ("sha1", 2))).clone('sha1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userEncrypt.setStatus('current')
userEncryptControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userEncryptControl.setStatus('current')
userRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userRowStatus.setStatus('current')
sysPasswordEncrypt = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysPasswordEncrypt.setStatus('current')
syssessionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1), )
if mibBuilder.loadTexts: syssessionTable.setStatus('current')
syssessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "sessionID"))
if mibBuilder.loadTexts: syssessionEntry.setStatus('current')
sessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionID.setStatus('current')
sessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionUserName.setStatus('current')
sessionUserPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("user", 3), ("operator", 4), ("admin", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionUserPrivilege.setStatus('current')
sessionLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLoginTime.setStatus('current')
sessionLiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLiveTime.setStatus('current')
sessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("http", 1), ("telnet", 2), ("ssh", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionType.setStatus('current')
sessionIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 102, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionIP.setStatus('current')
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 13, 2), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 13, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "trustedHostIpAddr"), (0, "DGS-1100-10ME_A1", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 13, 2, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 13, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 14, 13, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
sysAclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1))
aclL2ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1), )
if mibBuilder.loadTexts: aclL2ProfileTable.setStatus('current')
aclL2ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "aclL2ProfileID"))
if mibBuilder.loadTexts: aclL2ProfileEntry.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleCount.setStatus('current')
aclL2SrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2SrcMacMask.setStatus('current')
aclL2DstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2DstMacMask.setStatus('current')
aclL28021pCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL28021pCheck.setStatus('current')
aclL2VlanIdCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2VlanIdCheck.setStatus('current')
aclL2EtherTypeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2EtherTypeCheck.setStatus('current')
aclL2ProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2ProfileStatus.setStatus('current')
aclL3ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2), )
if mibBuilder.loadTexts: aclL3ProfileTable.setStatus('current')
aclL3ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "aclL3ProfileID"))
if mibBuilder.loadTexts: aclL3ProfileEntry.setStatus('current')
aclL3ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3ProfileID.setStatus('current')
aclL3RuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleCount.setStatus('current')
aclL3ProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3ProfileType.setStatus('current')
aclL3Ip4SrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip4SrcAddrMask.setStatus('current')
aclL3Ip4DstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip4DstAddrMask.setStatus('current')
aclL3Ip4DscpCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip4DscpCheck.setStatus('current')
aclL3Ip4TosCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip4TosCheck.setStatus('current')
aclL3Ip4Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 58))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("icmpv6", 58)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip4Protocol.setStatus('current')
aclL3Ip4ProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip4ProtocolMask.setStatus('current')
aclL3Ip6SrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 10), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip6SrcAddrMask.setStatus('current')
aclL3Ip6DstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip6DstAddrMask.setStatus('current')
aclL3Ip6TrafficClassCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip6TrafficClassCheck.setStatus('current')
aclL3IcmpTypeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IcmpTypeCheck.setStatus('current')
aclL3IcmpCodeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IcmpCodeCheck.setStatus('current')
aclL3IgmpTypeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IgmpTypeCheck.setStatus('current')
aclL3SrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3SrcPortMask.setStatus('current')
aclL3DstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3DstPortMask.setStatus('current')
aclL3TcpFlagCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3TcpFlagCheck.setStatus('current')
aclL3ProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 1, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3ProfileStatus.setStatus('current')
sysAclRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "aclL2RuleProfileID"), (0, "DGS-1100-10ME_A1", "aclL2RuleAccessID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2RuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleProfileID.setStatus('current')
aclL2RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleAccessID.setStatus('current')
aclL2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2VlanId.setStatus('current')
aclL2SrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2SrcMac.setStatus('current')
aclL2DstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2DstMac.setStatus('current')
aclL28021p = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL28021p.setStatus('current')
aclL2EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2EtherType.setStatus('current')
aclL2InPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 8), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2InPortList.setStatus('current')
aclL2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))).clone(namedValues=NamedValues(("permit", 1), ("drop", 2), ("rateLimit", 4), ("replaceDSCP", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Action.setStatus('current')
aclL2RateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RateLimit.setStatus('current')
aclL2ReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2ReplaceDSCP.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "aclL3RuleProfileID"), (0, "DGS-1100-10ME_A1", "aclL3RuleAccessID"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
aclL3RuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileID.setStatus('current')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
aclL3IP4SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IP4SrcAddr.setStatus('current')
aclL3IP4DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IP4DstAddr.setStatus('current')
aclL3IP4DSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IP4DSCP.setStatus('current')
aclL3IP4ToS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IP4ToS.setStatus('current')
aclL3IP4Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IP4Protocol.setStatus('current')
aclL3IP6SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 8), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IP6SrcAddr.setStatus('current')
aclL3IP6DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 9), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IP6DstAddr.setStatus('current')
aclL3Ip6TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Ip6TrafficClass.setStatus('current')
aclL3IcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IcmpType.setStatus('current')
aclL3IcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IcmpCode.setStatus('current')
aclL3IgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3IgmpType.setStatus('current')
aclL3SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3SrcPort.setStatus('current')
aclL3DstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3DstPort.setStatus('current')
aclL3TcpFlagURG = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3TcpFlagURG.setStatus('current')
aclL3TcpFlagACK = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3TcpFlagACK.setStatus('current')
aclL3TcpFlagPSH = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3TcpFlagPSH.setStatus('current')
aclL3TcpFlagRST = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3TcpFlagRST.setStatus('current')
aclL3TcpFlagSYN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3TcpFlagSYN.setStatus('current')
aclL3TcpFlagFIN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3TcpFlagFIN.setStatus('current')
aclL3InPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 22), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3InPortList.setStatus('current')
aclL3Action = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))).clone(namedValues=NamedValues(("permit", 1), ("drop", 2), ("rateLimit", 4), ("replaceDSCP", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3Action.setStatus('current')
aclL3RateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RateLimit.setStatus('current')
aclL3ReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3ReplaceDSCP.setStatus('current')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 2, 2, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
sysAclStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 3))
aclTotalProfile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotalProfile.setStatus('current')
aclUsedProfile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclUsedProfile.setStatus('current')
aclTotalRule = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotalRule.setStatus('current')
aclUsedRule = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 103, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclUsedRule.setStatus('current')
sysCpuAclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1))
cpuAclL2ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1), )
if mibBuilder.loadTexts: cpuAclL2ProfileTable.setStatus('current')
cpuAclL2ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "cpuAclL2ProfileID"))
if mibBuilder.loadTexts: cpuAclL2ProfileEntry.setStatus('current')
cpuAclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclL2ProfileID.setStatus('current')
cpuAclL2RuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclL2RuleCount.setStatus('current')
cpuAclL2SrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2SrcMacMask.setStatus('current')
cpuAclL2DstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2DstMacMask.setStatus('current')
cpuAclL28021pCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL28021pCheck.setStatus('current')
cpuAclL2VlanIdCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2VlanIdCheck.setStatus('current')
cpuAclL2EtherTypeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2EtherTypeCheck.setStatus('current')
cpuAclL2ProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuAclL2ProfileStatus.setStatus('current')
cpuAclL3ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2), )
if mibBuilder.loadTexts: cpuAclL3ProfileTable.setStatus('current')
cpuAclL3ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "cpuAclL3ProfileID"))
if mibBuilder.loadTexts: cpuAclL3ProfileEntry.setStatus('current')
cpuAclL3ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclL3ProfileID.setStatus('current')
cpuAclL3RuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclL3RuleCount.setStatus('current')
cpuAclL3ProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3ProfileType.setStatus('current')
cpuAclL3Ip4SrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4SrcAddrMask.setStatus('current')
cpuAclL3Ip4DstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4DstAddrMask.setStatus('current')
cpuAclL3Ip4DscpCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4DscpCheck.setStatus('current')
cpuAclL3Ip4Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4Protocol.setStatus('current')
cpuAclL3Ip4ProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4ProtocolMask.setStatus('current')
cpuAclL3Ip4IcmpTypeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4IcmpTypeCheck.setStatus('current')
cpuAclL3Ip4IcmpCodeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4IcmpCodeCheck.setStatus('current')
cpuAclL3Ip4IgmpTypeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4IgmpTypeCheck.setStatus('current')
cpuAclL3Ip4SrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4SrcPortMask.setStatus('current')
cpuAclL3Ip4DstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4DstPortMask.setStatus('current')
cpuAclL3Ip4TcpFlagCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip4TcpFlagCheck.setStatus('current')
cpuAclL3Ip6SrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 15), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip6SrcAddrMask.setStatus('current')
cpuAclL3Ip6DstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 16), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip6DstAddrMask.setStatus('current')
cpuAclL3Ip6TrafficClassCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip6TrafficClassCheck.setStatus('current')
cpuAclL3ProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 1, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuAclL3ProfileStatus.setStatus('current')
sysCpuAclRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2))
cpuAclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1), )
if mibBuilder.loadTexts: cpuAclL2RuleTable.setStatus('current')
cpuAclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "cpuAclL2RuleProfileID"), (0, "DGS-1100-10ME_A1", "cpuAclL2RuleAccessID"))
if mibBuilder.loadTexts: cpuAclL2RuleEntry.setStatus('current')
cpuAclL2RuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclL2RuleProfileID.setStatus('current')
cpuAclL2RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclL2RuleAccessID.setStatus('current')
cpuAclL2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2VlanId.setStatus('current')
cpuAclL2SrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2SrcMac.setStatus('current')
cpuAclL2DstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2DstMac.setStatus('current')
cpuAclL28021p = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL28021p.setStatus('current')
cpuAclL2EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1501, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2EtherType.setStatus('current')
cpuAclL2InPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 8), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2InPortList.setStatus('current')
cpuAclL2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL2Action.setStatus('current')
cpuAclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuAclL2RuleStatus.setStatus('current')
cpuAclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2), )
if mibBuilder.loadTexts: cpuAclL3RuleTable.setStatus('current')
cpuAclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1), ).setIndexNames((0, "DGS-1100-10ME_A1", "cpuAclL3RuleProfileID"), (0, "DGS-1100-10ME_A1", "cpuAclL3RuleAccessID"))
if mibBuilder.loadTexts: cpuAclL3RuleEntry.setStatus('current')
cpuAclL3RuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclL3RuleProfileID.setStatus('current')
cpuAclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclL3RuleAccessID.setStatus('current')
cpuAclL3IP4SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4SrcAddr.setStatus('current')
cpuAclL3IP4DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4DstAddr.setStatus('current')
cpuAclL3IP4DSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4DSCP.setStatus('current')
cpuAclL3IP4Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4Protocol.setStatus('current')
cpuAclL3IP4IcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4IcmpType.setStatus('current')
cpuAclL3IP4IcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4IcmpCode.setStatus('current')
cpuAclL3IP4IgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4IgmpType.setStatus('current')
cpuAclL3IP4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4SrcPort.setStatus('current')
cpuAclL3IP4DstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4DstPort.setStatus('current')
cpuAclL3IP4TcpFlagURG = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4TcpFlagURG.setStatus('current')
cpuAclL3IP4TcpFlagACK = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4TcpFlagACK.setStatus('current')
cpuAclL3IP4TcpFlagPSH = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4TcpFlagPSH.setStatus('current')
cpuAclL3IP4TcpFlagRST = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4TcpFlagRST.setStatus('current')
cpuAclL3IP4TcpFlagSYN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4TcpFlagSYN.setStatus('current')
cpuAclL3IP4TcpFlagFIN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP4TcpFlagFIN.setStatus('current')
cpuAclL3InPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 18), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3InPortList.setStatus('current')
cpuAclL3Action = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Action.setStatus('current')
cpuAclL3IP6SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 20), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP6SrcAddr.setStatus('current')
cpuAclL3IP6DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 21), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3IP6DstAddr.setStatus('current')
cpuAclL3Ip6TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuAclL3Ip6TrafficClass.setStatus('current')
cpuAclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 2, 2, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuAclL3RuleStatus.setStatus('current')
sysCpuAclStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 3))
cpuAclTotalProfile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclTotalProfile.setStatus('current')
cpuAclUsedProfile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclUsedProfile.setStatus('current')
cpuAclTotalRule = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclTotalRule.setStatus('current')
cpuAclUsedRule = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 2, 1, 104, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAclUsedRule.setStatus('current')
mibBuilder.exportSymbols("DGS-1100-10ME_A1", eoamReceivedRemoteLoopback=eoamReceivedRemoteLoopback, LldpChassisId=LldpChassisId, lldpRemManIndex=lldpRemManIndex, traceRouteHistoryResponse=traceRouteHistoryResponse, aclL3Ip4TosCheck=aclL3Ip4TosCheck, aclL3IcmpTypeCheck=aclL3IcmpTypeCheck, eoamLinkMonitoring=eoamLinkMonitoring, timeRangeStartDay=timeRangeStartDay, ipv6NSRetransmitTime=ipv6NSRetransmitTime, timeRangeEndHour=timeRangeEndHour, sntpServerAddrType=sntpServerAddrType, aacLoginMethodListName=aacLoginMethodListName, sysDuld=sysDuld, mldsHostTableHostIPAddress=mldsHostTableHostIPAddress, sysFdbClear=sysFdbClear, ipv6DefaultRouteTable=ipv6DefaultRouteTable, mldsVlanRouterEntry=mldsVlanRouterEntry, companyDot1qVlanGroup=companyDot1qVlanGroup, ipv6AddressTable=ipv6AddressTable, sysCableDiagPair1FaultDistance=sysCableDiagPair1FaultDistance, LldpManAddress=LldpManAddress, bandwidthCtrlIndex=bandwidthCtrlIndex, rmonHistoryEntry=rmonHistoryEntry, syslogMsgDescr=syslogMsgDescr, snmpUserPrivProtocolPassword=snmpUserPrivProtocolPassword, sysIGMPMulticastVlanStatus=sysIGMPMulticastVlanStatus, cpuAclL3Ip4DstAddrMask=cpuAclL3Ip4DstAddrMask, dhcpRelayHopCount=dhcpRelayHopCount, rmonEventEntry=rmonEventEntry, sysPnacCtrl=sysPnacCtrl, portCtrlFlowControlOper=portCtrlFlowControlOper, sysTrafficCtrlSettings=sysTrafficCtrlSettings, statisticsStatsCollisions=statisticsStatsCollisions, lldpConfigManAddrPortsTxEnable=lldpConfigManAddrPortsTxEnable, lldpXdot1ConfigPortVlanTable=lldpXdot1ConfigPortVlanTable, mldsVlanMulticastGroupIpAddress=mldsVlanMulticastGroupIpAddress, ipv6NeighborEntry=ipv6NeighborEntry, eoamLoopbackTestCommand=eoamLoopbackTestCommand, qosDiffServType45=qosDiffServType45, igmpMulticastVlanReplaceSourceIp=igmpMulticastVlanReplaceSourceIp, qinQVlanTransPortNum=qinQVlanTransPortNum, eoamEventLogThreshold=eoamEventLogThreshold, rmonEventDescription=rmonEventDescription, ipv6AddressMainIndex=ipv6AddressMainIndex, sysQosMode=sysQosMode, aclL3IgmpTypeCheck=aclL3IgmpTypeCheck, qosDiffServType48=qosDiffServType48, cpuAclL3Ip4Protocol=cpuAclL3Ip4Protocol, sysMacNotifyTraps=sysMacNotifyTraps, qosDiffServType38=qosDiffServType38, qosDiffServType61=qosDiffServType61, lldpXdot3PortConfigPortNum=lldpXdot3PortConfigPortNum, aclL3IP4ToS=aclL3IP4ToS, PortList=PortList, lldpXdot3LocPortTable=lldpXdot3LocPortTable, sysCliPromptStr=sysCliPromptStr, pnacQuietPeriod=pnacQuietPeriod, mldsVlanMulticastGroupVlanId=mldsVlanMulticastGroupVlanId, timeRangeEndYear=timeRangeEndYear, qosDiffServType04=qosDiffServType04, aacLocalEnablePassword=aacLocalEnablePassword, portCtrlFlowControl=portCtrlFlowControl, lldpPortConfigNotificationEnable=lldpPortConfigNotificationEnable, lldpXdot3RemMaxFrameSizeTimeMark=lldpXdot3RemMaxFrameSizeTimeMark, sysLLDPLocalSystemData=sysLLDPLocalSystemData, sysTraceRouteCtlTTL=sysTraceRouteCtlTTL, sysSNMPUser=sysSNMPUser, lldpXdot1RemIndex=lldpXdot1RemIndex, portSecurityState=portSecurityState, portSecFDBPermEntryState=portSecFDBPermEntryState, errorFrameSecondsNotifyState=errorFrameSecondsNotifyState, rmonAlarmOwner=rmonAlarmOwner, lldpXdot1LocProtocolEntry=lldpXdot1LocProtocolEntry, cpuAclL3IP4TcpFlagPSH=cpuAclL3IP4TcpFlagPSH, aacLoginMethod4=aacLoginMethod4, LldpManAddrIfSubtype=LldpManAddrIfSubtype, cpuAclL3ProfileType=cpuAclL3ProfileType, arpIpAddr=arpIpAddr, snmpTrapSNMPAuthentication=snmpTrapSNMPAuthentication, companyIpifGroup=companyIpifGroup, trafficCtrlTrap=trafficCtrlTrap, igsAccessAuthTable=igsAccessAuthTable, sysDDPStatus=sysDDPStatus, aclL3InPortList=aclL3InPortList, errorFramePeriodNotifyState=errorFramePeriodNotifyState, macNotifyPortIndex=macNotifyPortIndex, statisticsEntry=statisticsEntry, qosDiffServType32=qosDiffServType32, mirrorCtrlRowStatus=mirrorCtrlRowStatus, pnacPortAccessControlEntry=pnacPortAccessControlEntry, companyStatistics=companyStatistics, portUtilizAverage=portUtilizAverage, cpuAclL3Ip4IgmpTypeCheck=cpuAclL3Ip4IgmpTypeCheck, snmpHostEntry=snmpHostEntry, qinQVlanTranslationEntry=qinQVlanTranslationEntry, companySNTPSetting=companySNTPSetting, eoamLoopbackStatsStartTimestamp=eoamLoopbackStatsStartTimestamp, snmpTrapTwistLinkUpDown=snmpTrapTwistLinkUpDown, portDescriptionTable=portDescriptionTable, aacServerIndex=aacServerIndex, lldpXdot1RemProtoVlanSupported=lldpXdot1RemProtoVlanSupported, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, mldsVlanQuerier=mldsVlanQuerier, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, sysWebPortNumber=sysWebPortNumber, sntpDSTStartTime=sntpDSTStartTime, pnacRadiusIPType=pnacRadiusIPType, Timeout=Timeout, companyEee=companyEee, syslimitIPMulticastProfileTable=syslimitIPMulticastProfileTable, igmpMulticastVlanState=igmpMulticastVlanState, cpuAclL28021pCheck=cpuAclL28021pCheck, companyDDP=companyDDP, lldpTraps=lldpTraps, eoamVariableRequestTx=eoamVariableRequestTx, igsVlanRobustnessValue=igsVlanRobustnessValue, duldMode=duldMode, lldpRemUnknownTLVEntry=lldpRemUnknownTLVEntry, duldOperState=duldOperState, tftpCfgTargetImageFileName=tftpCfgTargetImageFileName, lldpXdot3PortConfigTable=lldpXdot3PortConfigTable, lldpStatsRemTablesAgeouts=lldpStatsRemTablesAgeouts, rmonEventTable=rmonEventTable, portCtrlDetailMediumType=portCtrlDetailMediumType, ddpPort=ddpPort, aclL3Ip6TrafficClass=aclL3Ip6TrafficClass, ddpPortStatus=ddpPortStatus, cpuAclL2VlanIdCheck=cpuAclL2VlanIdCheck, limitIPMulticastPortEntry=limitIPMulticastPortEntry, staticMcastMac=staticMcastMac, rmonStatsOctets=rmonStatsOctets, timeRangeRowStatus=timeRangeRowStatus, pnacOperControlledDirections=pnacOperControlledDirections, eoamUniqueEventNotificationRx=eoamUniqueEventNotificationRx, lldpStatsTxPortNum=lldpStatsTxPortNum, sysTraceRouteCtlAdminStatus=sysTraceRouteCtlAdminStatus, VlanIndex=VlanIndex, lldpXdot1RemProtoVlanIndex=lldpXdot1RemProtoVlanIndex, pnacUserName=pnacUserName, rmonStatsBroadcastPkts=rmonStatsBroadcastPkts, errorSymbolNotifyState=errorSymbolNotifyState, sysIgsAccessAuth=sysIgsAccessAuth, sysLLDPRemoteSystemsData=sysLLDPRemoteSystemsData, limitIPMulticastProfileName=limitIPMulticastProfileName, dlink_products=dlink_products, lldpXdot3RemIndex=lldpXdot3RemIndex, statisticsIndex=statisticsIndex, sysLocationName=sysLocationName, lldpXdot3RemPortEntry=lldpXdot3RemPortEntry, traceRouteHistoryStatus=traceRouteHistoryStatus, sysEoamStatsTable=sysEoamStatsTable, sysPortSecurity=sysPortSecurity, companyDHCPv6Relay=companyDHCPv6Relay, cpuAclL3IP4Protocol=cpuAclL3IP4Protocol, timeRangeEndDay=timeRangeEndDay, lldpXdot1LocPortNum=lldpXdot1LocPortNum, igsAccessAuthPortIndex=igsAccessAuthPortIndex, sntpServerEntry=sntpServerEntry, rmonHistoryStatus=rmonHistoryStatus, statisticsOutOctets=statisticsOutOctets, companyStaticMac=companyStaticMac, statisticsFCSErrors=statisticsFCSErrors, qosTrafficClass=qosTrafficClass, sysGreenLEDShutoff=sysGreenLEDShutoff, snmpUserAuthProtocol=snmpUserAuthProtocol, syslogSettingGroup=syslogSettingGroup, qosDiffServType28=qosDiffServType28, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, rmonHistoryDataSource=rmonHistoryDataSource, timeRangeEndMinute=timeRangeEndMinute, qosDiffServType56=qosDiffServType56, ramLast5MinUsage=ramLast5MinUsage, cpuAclL28021p=cpuAclL28021p, sysAutoRefreshConfiguration=sysAutoRefreshConfiguration, trustedHostStatus=trustedHostStatus, lldpXdot1RemProtocolIndex=lldpXdot1RemProtocolIndex, pnacRadiusAccountingState=pnacRadiusAccountingState, statisticsPkts65to127Octets=statisticsPkts65to127Octets, cpuAclL2RuleCount=cpuAclL2RuleCount, lldpXdot1LocProtocolIndex=lldpXdot1LocProtocolIndex, sysTraceRouteCtlPort=sysTraceRouteCtlPort, dhcpRelayInterfaceSettingsTable=dhcpRelayInterfaceSettingsTable, igsAccessAuthEntry=igsAccessAuthEntry, tftpFwTargetInterfaceName=tftpFwTargetInterfaceName, trustedHostIpMask=trustedHostIpMask, trafficSegmentationMemberList=trafficSegmentationMemberList, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, sysIgsSystem=sysIgsSystem, snmpViewTreeStatus=snmpViewTreeStatus, sysCableDiagPair3FaultDistance=sysCableDiagPair3FaultDistance, aacLoginMethod3=aacLoginMethod3, tftpSyslogTargetTftpTransferPercentage=tftpSyslogTargetTftpTransferPercentage, lldpXdot1LocalData=lldpXdot1LocalData, aacServerIPAddr=aacServerIPAddr, snmpViewTreeSubtree=snmpViewTreeSubtree, timeRangeTuesday=timeRangeTuesday, eoamOrgSpecificRx=eoamOrgSpecificRx, aclL3Ip6TrafficClassCheck=aclL3Ip6TrafficClassCheck, sysmacNotifyInterval=sysmacNotifyInterval, dhcpv6RelayRowStatus=dhcpv6RelayRowStatus, portErrTable=portErrTable, aacLoginMethodListRowStatus=aacLoginMethodListRowStatus, dhcpRelayServerIP=dhcpRelayServerIP, aacServerAuthPort=aacServerAuthPort, lldpXdot1LocVlanNameEntry=lldpXdot1LocVlanNameEntry, cpuAclL2ProfileEntry=cpuAclL2ProfileEntry, pnacStatus=pnacStatus, lldpXdot3RemMaxFrameSizeIndex=lldpXdot3RemMaxFrameSizeIndex, cpuAclL3RuleAccessID=cpuAclL3RuleAccessID, lldpXdot1RemProtocolTimeMark=lldpXdot1RemProtocolTimeMark, qosDiffServType09=qosDiffServType09, qosDiffServType21=qosDiffServType21, sysJumboFrameEnable=sysJumboFrameEnable, aclL2VlanId=aclL2VlanId, aclTotalProfile=aclTotalProfile, lldpLocManAddr=lldpLocManAddr, LldpPortList=LldpPortList, sysPingStatus=sysPingStatus, sysFimwarewrongchecksum=sysFimwarewrongchecksum, sysSwitchName=sysSwitchName, lldpStatsRemTablesLastChangeTime=lldpStatsRemTablesLastChangeTime, sysDot1qVlanManagementOnOff=sysDot1qVlanManagementOnOff, greenLEDShutoffTimeProfile1=greenLEDShutoffTimeProfile1, aclL3IcmpCodeCheck=aclL3IcmpCodeCheck, igmpMulticastVlanSourcePort=igmpMulticastVlanSourcePort, mldsVlanQueryMaxResponseTime=mldsVlanQueryMaxResponseTime, sysPnacUser=sysPnacUser, bandwidthCtrlTable=bandwidthCtrlTable, pnacTxPeriod=pnacTxPeriod, portErrPortStatus=portErrPortStatus, syslogSaveMinutes=syslogSaveMinutes, sysCpuAclRule=sysCpuAclRule, aclL3Ip6SrcAddrMask=aclL3Ip6SrcAddrMask, qosPortBaseEntry=qosPortBaseEntry, aclL3IP4DstAddr=aclL3IP4DstAddr, sntpDSTState=sntpDSTState, pnacPortAuthStatus=pnacPortAuthStatus, eoamEventLogTimestamp=eoamEventLogTimestamp, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, qosDiffServType07=qosDiffServType07, loopbackOccur=loopbackOccur, lldpMisConfigProtocolIdentity=lldpMisConfigProtocolIdentity, cpuAclL3ProfileEntry=cpuAclL3ProfileEntry, cpuAclL3IP4DstAddr=cpuAclL3IP4DstAddr, statisticsLateCollisions=statisticsLateCollisions, timeRangeFriday=timeRangeFriday, eoamLoopbackTestPktSize=eoamLoopbackTestPktSize, duldEntry=duldEntry, pnacUserTable=pnacUserTable, eoamMode=eoamMode, staticMcastEntry=staticMcastEntry, timeRangeSunday=timeRangeSunday, errorFrameThreshold=errorFrameThreshold, timeRangeStartMonth=timeRangeStartMonth)
mibBuilder.exportSymbols("DGS-1100-10ME_A1", eoamPeerVarReq=eoamPeerVarReq, igsVlanRouterTable=igsVlanRouterTable, sysEoamEventLogClearPortlist=sysEoamEventLogClearPortlist, eoamPDURev=eoamPDURev, lldpXdot3RemPowerPairControlable=lldpXdot3RemPowerPairControlable, igmpMulticastVlanMemberPort=igmpMulticastVlanMemberPort, lldpPortConfigAdminStatus=lldpPortConfigAdminStatus, trustedHostEntry=trustedHostEntry, sysLBDRecoverTime=sysLBDRecoverTime, qosDiffServType57=qosDiffServType57, cpuAclL3Action=cpuAclL3Action, sysTraceRouteCtlAddressType=sysTraceRouteCtlAddressType, qosDiffServType49=qosDiffServType49, sysDHCPLocalRelayGlobalState=sysDHCPLocalRelayGlobalState, lldpStatsRxPortFramesErrors=lldpStatsRxPortFramesErrors, limitIpMulticastRangeTable=limitIpMulticastRangeTable, sysMulticastFilterPortTable=sysMulticastFilterPortTable, greenPortShutoffTimeProfile1=greenPortShutoffTimeProfile1, qosDiffServType54=qosDiffServType54, stormCtrlTrap=stormCtrlTrap, sysEoamStatsClearPortlist=sysEoamStatsClearPortlist, sysLBDTrap=sysLBDTrap, mldsVlanFilterVlanId=mldsVlanFilterVlanId, lldpXdot3LocalData=lldpXdot3LocalData, sysQinQSystem=sysQinQSystem, dhcpRelayManagermentOption82=dhcpRelayManagermentOption82, statisticsEtherOversizePkts=statisticsEtherOversizePkts, lldpXdot1ConfigPortVlanEntry=lldpXdot1ConfigPortVlanEntry, lldpLocManAddrEntry=lldpLocManAddrEntry, limitIpMulticastRangeEntry=limitIpMulticastRangeEntry, pnacProtocol=pnacProtocol, lldpXdot1RemTable=lldpXdot1RemTable, ipv6NeighborRowStatus=ipv6NeighborRowStatus, aclL2ProfileTable=aclL2ProfileTable, cpuAclUsedRule=cpuAclUsedRule, lldpXdot3RemPowerPairs=lldpXdot3RemPowerPairs, sysSave=sysSave, trafficCtrlActionMode=trafficCtrlActionMode, syslogServEntry=syslogServEntry, snmpHostIPType=snmpHostIPType, aclL3TcpFlagCheck=aclL3TcpFlagCheck, portSecFDBPermanentEntry=portSecFDBPermanentEntry, qinQVlanTranslationTable=qinQVlanTranslationTable, igsVlanQueryInterval=igsVlanQueryInterval, eoamPeerVendorOui=eoamPeerVendorOui, ipv6AutolinkloStatus=ipv6AutolinkloStatus, sysFimwareillegalfile=sysFimwareillegalfile, aclL3RateLimit=aclL3RateLimit, mldsHostTableVLANID=mldsHostTableVLANID, lldpXdot3RemPowerTable=lldpXdot3RemPowerTable, dhcpv6RelayHopCount=dhcpv6RelayHopCount, dhcpv6RelayOption37RemoteID=dhcpv6RelayOption37RemoteID, pppoePortEntry=pppoePortEntry, snmpHostVersion=snmpHostVersion, igsVlanRouterDynamicPortList=igsVlanRouterDynamicPortList, syslogMsgSeverity=syslogMsgSeverity, sysStormCtrlTrap=sysStormCtrlTrap, sysAclProfile=sysAclProfile, sysLLDPXdot3Objects=sysLLDPXdot3Objects, eoamEventLogValue=eoamEventLogValue, companySystem=companySystem, aclL2EtherTypeCheck=aclL2EtherTypeCheck, qosDiffServType52=qosDiffServType52, dynamicFdbStatus=dynamicFdbStatus, aclL3ProfileID=aclL3ProfileID, rmonAlarmInterval=rmonAlarmInterval, sysGuestVlanDelState=sysGuestVlanDelState, syslogClearLog=syslogClearLog, lldpXdot1RemVlanId=lldpXdot1RemVlanId, ZeroBasedCounter32=ZeroBasedCounter32, snmpGroupReadViewName=snmpGroupReadViewName, cpuAclL3Ip4DstPortMask=cpuAclL3Ip4DstPortMask, aclL3ProfileType=aclL3ProfileType, trafficSegmentationTable=trafficSegmentationTable, sysEee=sysEee, igsVlanHostPortPurgeInterval=igsVlanHostPortPurgeInterval, aclL2ProfileID=aclL2ProfileID, lldpXdot3LocMaxFrameSizeTable=lldpXdot3LocMaxFrameSizeTable, lldpRemSysCapSupported=lldpRemSysCapSupported, sysDHCPLocalRelayTable=sysDHCPLocalRelayTable, lldpRemManAddrTable=lldpRemManAddrTable, lldpXdot3PortConfigEntry=lldpXdot3PortConfigEntry, pppoePortIndex=pppoePortIndex, portSecurityTable=portSecurityTable, aacAPHttpLoginMethod=aacAPHttpLoginMethod, sysLLDPNotification=sysLLDPNotification, tftpFwTargetImageFileName=tftpFwTargetImageFileName, cpuAclL3IP4TcpFlagFIN=cpuAclL3IP4TcpFlagFIN, igmpMulticastVlanGroupFromIp=igmpMulticastVlanGroupFromIp, lldpXdot3RemLinkAggTimeMark=lldpXdot3RemLinkAggTimeMark, aclTotalRule=aclTotalRule, BridgeId=BridgeId, lldpXdot1RemVlanName=lldpXdot1RemVlanName, eoamInfomationIndex=eoamInfomationIndex, qosDiffServType36=qosDiffServType36, statisticsInDiscards=statisticsInDiscards, companySNMP=companySNMP, ipv6DefaultRouteNextHop=ipv6DefaultRouteNextHop, lldpXdot1RemProtoVlanEnabled=lldpXdot1RemProtoVlanEnabled, sysTraceRouteCtlTimeOut=sysTraceRouteCtlTimeOut, cpuAclL3Ip4SrcPortMask=cpuAclL3Ip4SrcPortMask, sntpPollInterval=sntpPollInterval, snmpCommunityPolicy=snmpCommunityPolicy, pnacRadiusServerStatus=pnacRadiusServerStatus, sysLLDPXdot1Objects=sysLLDPXdot1Objects, portCtrlDynamicMacAutoLearn=portCtrlDynamicMacAutoLearn, ipv6GlobalStatus=ipv6GlobalStatus, aclL3RuleTable=aclL3RuleTable, limitIpMulticastRangeEndIpAddr=limitIpMulticastRangeEndIpAddr, lldpXdot3RemPowerTimeMark=lldpXdot3RemPowerTimeMark, userRowStatus=userRowStatus, eoamRemoteLoopbackSupport=eoamRemoteLoopbackSupport, aclL3RuleAccessID=aclL3RuleAccessID, eoamState=eoamState, aclL3Ip4SrcAddrMask=aclL3Ip4SrcAddrMask, ipv6NeighborAddr=ipv6NeighborAddr, syslogEnable=syslogEnable, lldpStatsRemTablesInserts=lldpStatsRemTablesInserts, mldsVlanRouterDynamicPortList=mldsVlanRouterDynamicPortList, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, cpuAclL3IP4IgmpType=cpuAclL3IP4IgmpType, sysCpuAclProfile=sysCpuAclProfile, qosDiffServType05=qosDiffServType05, sysQos1p=sysQos1p, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, lldpXdot3LocPortNum=lldpXdot3LocPortNum, qosDiffServType62=qosDiffServType62, sysDHCPv6RelayControl=sysDHCPv6RelayControl, lldpXdot1RemProtoVlanEntry=lldpXdot1RemProtoVlanEntry, qosDiffServType60=qosDiffServType60, igsVlanRouterEntry=igsVlanRouterEntry, syslogFileSave=syslogFileSave, qosDiffServType29=qosDiffServType29, aacAPTelnetEnableMethod=aacAPTelnetEnableMethod, qosDiffServType31=qosDiffServType31, aacServerInfoEntry=aacServerInfoEntry, tftpFwTargetServerIpAddress=tftpFwTargetServerIpAddress, LldpPortNumber=LldpPortNumber, aclL3IP6SrcAddr=aclL3IP6SrcAddr, eoamStatsEntry=eoamStatsEntry, aclL2DstMacMask=aclL2DstMacMask, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, syslogServFacility=syslogServFacility, eoamLinkMonitorIfIndex=eoamLinkMonitorIfIndex, dhcpRelayInterface=dhcpRelayInterface, igsReportForwardRouterOnly=igsReportForwardRouterOnly, cpuAclL2ProfileStatus=cpuAclL2ProfileStatus, pppoePortState=pppoePortState, mldsVlanMulticastGroupMacAddress=mldsVlanMulticastGroupMacAddress, userPassword=userPassword, qinQVlanTransAction=qinQVlanTransAction, mldsVlanRobustnessValue=mldsVlanRobustnessValue, lldpXdot1RemTimeMark=lldpXdot1RemTimeMark, eoamLoopbackStatsTxCount=eoamLoopbackStatsTxCount, sysLBDPortStatus=sysLBDPortStatus, sysRMONStatistics=sysRMONStatistics, errorFramePeriodThreshold=errorFramePeriodThreshold, sntpDSTOffset=sntpDSTOffset, limitIPMulticastPortProfileID=limitIPMulticastPortProfileID, snmpGroupSecurityModel=snmpGroupSecurityModel, sysLBDEnabledVlanList=sysLBDEnabledVlanList, snmpTrapFirmwareUpgrade=snmpTrapFirmwareUpgrade, sysLLDPPortConfigEntry=sysLLDPPortConfigEntry, arpTable=arpTable, cpuAclL2RuleEntry=cpuAclL2RuleEntry, sysSNMPViewTree=sysSNMPViewTree, companySession=companySession, lldpXdot1RemProtocolLocalPortNum=lldpXdot1RemProtocolLocalPortNum, lldpXdot1RemVlanNameEntry=lldpXdot1RemVlanNameEntry, pnacUserEntry=pnacUserEntry, dhcpRelayInterfaceSettingsEntry=dhcpRelayInterfaceSettingsEntry, sysGreenSystemHibernation=sysGreenSystemHibernation, qosDiffServType06=qosDiffServType06, multicastFilterPortType=multicastFilterPortType, tftpCfgTargetServerIpAddress=tftpCfgTargetServerIpAddress, sysPingTimes=sysPingTimes, dhcpRelayOption82RemoteID=dhcpRelayOption82RemoteID, rmonStatsEntry=rmonStatsEntry, dot1qVlanPortEntry=dot1qVlanPortEntry, timeRangeStartYear=timeRangeStartYear, aclL28021p=aclL28021p, duldLinkStatus=duldLinkStatus, mldsVlanMulticastGroupEntry=mldsVlanMulticastGroupEntry, sysMldsVlan=sysMldsVlan, trafficCtrlIndex=trafficCtrlIndex, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, lldpXdot3RemPortAutoNegEnabled=lldpXdot3RemPortAutoNegEnabled, sysAclRule=sysAclRule, companyLimitIP=companyLimitIP, eoamUniqueEventNotificationTx=eoamUniqueEventNotificationTx, lldpRemManAddr=lldpRemManAddr, eoamLoopbackTestIndex=eoamLoopbackTestIndex, dot1qVlanRowStatus=dot1qVlanRowStatus, sysMacAddr=sysMacAddr, cpuAclTotalRule=cpuAclTotalRule, igsVlanQuerierVersion=igsVlanQuerierVersion, lldpXdot1ConfigVlanNameTable=lldpXdot1ConfigVlanNameTable, staticMcastVlanID=staticMcastVlanID, eoamLoopbackControlTx=eoamLoopbackControlTx, lldpDupChasisId=lldpDupChasisId, sysFdbClearAction=sysFdbClearAction, pnacRadiusServerRetransmit=pnacRadiusServerRetransmit, qosDiffServType13=qosDiffServType13, errorFrameSecondsWindow=errorFrameSecondsWindow, qosDiffServType20=qosDiffServType20, duldState=duldState, qosDiffServType50=qosDiffServType50, lldpRemEntry=lldpRemEntry, eeestatus=eeestatus, snmpGroupWriteViewName=snmpGroupWriteViewName, snmpGroupEntry=snmpGroupEntry, sysLLDPMsgHoldMultiplier=sysLLDPMsgHoldMultiplier, qinQIfIndex=qinQIfIndex, dhcpOption12HostName=dhcpOption12HostName, bandwidthCtrlEntry=bandwidthCtrlEntry, aclL3IP4Protocol=aclL3IP4Protocol, aclL3DstPort=aclL3DstPort, lldpStatsRxPortFramesDiscardedTotal=lldpStatsRxPortFramesDiscardedTotal, snmpCommunityTable=snmpCommunityTable, lldpMisConfigMaxFrameSize=lldpMisConfigMaxFrameSize, snmpUserStatus=snmpUserStatus, dhcpv6RelayServerIP=dhcpv6RelayServerIP, qosDiffServType18=qosDiffServType18, staticMacAddr=staticMacAddr, sysSNMPGroup=sysSNMPGroup, qosDiffServType23=qosDiffServType23, dhcpOption12Status=dhcpOption12Status, rmonStatsPkts=rmonStatsPkts, cpuAclL3IP4TcpFlagURG=cpuAclL3IP4TcpFlagURG, rmonAlarmStatus=rmonAlarmStatus, lldpRemTimeMark=lldpRemTimeMark, eoamEventLogAccError=eoamEventLogAccError, lldpXdot1ConfigPortVlanTxEnable=lldpXdot1ConfigPortVlanTxEnable, portSecFDBPermType=portSecFDBPermType, aclL2RateLimit=aclL2RateLimit, LldpPowerPortClass=LldpPowerPortClass, eoamUnidirection=eoamUnidirection, eoamLoopbackStatsEndTimestamp=eoamLoopbackStatsEndTimestamp, dot1qVlanEntry=dot1qVlanEntry, greenSystemHibernationState=greenSystemHibernationState, sysLLDPConfigManAddrEntry=sysLLDPConfigManAddrEntry, lldpStatsRemTablesDrops=lldpStatsRemTablesDrops, eoamLinkMonitorEntry=eoamLinkMonitorEntry, cpuAclL3ProfileID=cpuAclL3ProfileID, dot1qVlanPortIndex=dot1qVlanPortIndex, aacEnableMethodListEntry=aacEnableMethodListEntry, lldpXdot1ConfigVlanId=lldpXdot1ConfigVlanId, mldsVlanRouterTable=mldsVlanRouterTable, cpuAclL3Ip4SrcAddrMask=cpuAclL3Ip4SrcAddrMask, mirrorPortEntry=mirrorPortEntry, cpuAclL3IP6SrcAddr=cpuAclL3IP6SrcAddr, staticMacStatus=staticMacStatus, sysEoamSystem=sysEoamSystem, sysARPAgingTime=sysARPAgingTime)
mibBuilder.exportSymbols("DGS-1100-10ME_A1", lldpXdot1RemVlanNameTimeMark=lldpXdot1RemVlanNameTimeMark, snmpTrapDuplicateIPDetected=snmpTrapDuplicateIPDetected, lldpXdot3RemPowerEntry=lldpXdot3RemPowerEntry, eoamLoopbackStatsEntry=eoamLoopbackStatsEntry, sysOamEventLogTable=sysOamEventLogTable, aacAPHttpEnableMethod=aacAPHttpEnableMethod, qosDiffServType55=qosDiffServType55, qosPortBasePriority=qosPortBasePriority, rmonAlarmVariable=rmonAlarmVariable, portCtrlTable=portCtrlTable, cmArpClear=cmArpClear, qosDiffServType00=qosDiffServType00, sysMirrorStatus=sysMirrorStatus, portDescString=portDescString, eoamMaxOAMPDU=eoamMaxOAMPDU, sysEoamStats=sysEoamStats, sysPasswordEncrypt=sysPasswordEncrypt, lldpXdot1LocPortVlanId=lldpXdot1LocPortVlanId, qosDiffServType08=qosDiffServType08, qosDiffServType46=qosDiffServType46, errorSymbolThreshold=errorSymbolThreshold, trustedHostTable=trustedHostTable, sysDhcpTimeout=sysDhcpTimeout, portSecurityIndex=portSecurityIndex, sysPppoePortTable=sysPppoePortTable, lldpRemSysCapEnabled=lldpRemSysCapEnabled, eoamPeerPDURev=eoamPeerPDURev, cpuAclL3IP4SrcPort=cpuAclL3IP4SrcPort, rmonHistoryInterval=rmonHistoryInterval, qosDiffServType27=qosDiffServType27, lldpRemLocalPortNum=lldpRemLocalPortNum, sysIpifSupportV4V6Info=sysIpifSupportV4V6Info, portCtrlAdminState=portCtrlAdminState, trafficSegmentationEntry=trafficSegmentationEntry, aacEnableMethodListTable=aacEnableMethodListTable, lldpXdot3RemLinkAggEntry=lldpXdot3RemLinkAggEntry, lldpPortConfigPortNum=lldpPortConfigPortNum, companyStaticMcast=companyStaticMcast, sessionLiveTime=sessionLiveTime, syslogServSrvStatus=syslogServSrvStatus, qinQAddInnerTag=qinQAddInnerTag, sysPingDestIpType=sysPingDestIpType, companyTraceRoute=companyTraceRoute, mirrorIngressPortList=mirrorIngressPortList, lldpRemPortIdSubtype=lldpRemPortIdSubtype, lldpXdot1RemProtoVlanId=lldpXdot1RemProtoVlanId, sysDDPTable=sysDDPTable, pnacServerTimeout=pnacServerTimeout, aclL2Action=aclL2Action, sysDot1qVlanPortTable=sysDot1qVlanPortTable, qosDiffServType33=qosDiffServType33, companyDuld=companyDuld, lldpRemChassisId=lldpRemChassisId, qosDiffServType10=qosDiffServType10, companyGreenSetting=companyGreenSetting, syslogServAddrType=syslogServAddrType, aclL3TcpFlagPSH=aclL3TcpFlagPSH, lldpConfigManAddr=lldpConfigManAddr, qosDiffServType42=qosDiffServType42, qinQRoleState=qinQRoleState, eoamDuplicateEventNotificationTx=eoamDuplicateEventNotificationTx, aclL2ReplaceDSCP=aclL2ReplaceDSCP, arpRowStatus=arpRowStatus, aclL3SrcPort=aclL3SrcPort, cpuAclL2EtherTypeCheck=cpuAclL2EtherTypeCheck, companyDHCPRelay=companyDHCPRelay, sysRMONEvent=sysRMONEvent, sysLLDPState=sysLLDPState, qosDiffServType43=qosDiffServType43, sysSNTPServerGroup=sysSNTPServerGroup, sysTimeRangeSettingTable=sysTimeRangeSettingTable, rmonEventCommunity=rmonEventCommunity, lldpXdot3LocPortAutoNegSupported=lldpXdot3LocPortAutoNegSupported, syslogMsgTable=syslogMsgTable, pnacRadiusServerAuthenticationPort=pnacRadiusServerAuthenticationPort, companyIgsGroup=companyIgsGroup, mldsHostEntry=mldsHostEntry, snmpTrapPortSecViolation=snmpTrapPortSecViolation, trustedHostRowStatus=trustedHostRowStatus, aclL2RuleCount=aclL2RuleCount, aacAPAuthMethodGroup=aacAPAuthMethodGroup, eoamLoopbackTestMatchCount=eoamLoopbackTestMatchCount, snmpUserGroupName=snmpUserGroupName, LldpPortId=LldpPortId, greenLEDShutoffState=greenLEDShutoffState, lldpStatsTxPortEntry=lldpStatsTxPortEntry, sysIGMPMulticastVlanGroupEntry=sysIGMPMulticastVlanGroupEntry, pnacRadiusServerIndex=pnacRadiusServerIndex, aclL3TcpFlagACK=aclL3TcpFlagACK, bandwidthCtrlEffectiveRxThreshold=bandwidthCtrlEffectiveRxThreshold, lldpXdot3RemPowerPortClass=lldpXdot3RemPowerPortClass, dhcpv6RelayInterfaceEntry=dhcpv6RelayInterfaceEntry, aacServerRetryCount=aacServerRetryCount, companyRMON=companyRMON, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, igsVlanCfgQuerier=igsVlanCfgQuerier, cpuAclL3RuleCount=cpuAclL3RuleCount, tftpFwTargetTftpOperationStatus=tftpFwTargetTftpOperationStatus, cpuAclL3RuleStatus=cpuAclL3RuleStatus, qosDiffServType19=qosDiffServType19, ipv4Address=ipv4Address, lldpLocManAddrSubtype=lldpLocManAddrSubtype, syssessionTable=syssessionTable, aclL2RuleEntry=aclL2RuleEntry, companyTimeRangeMgmt=companyTimeRangeMgmt, statisticsDeferredTransmissions=statisticsDeferredTransmissions, lldpRemUnknownTLVType=lldpRemUnknownTLVType, qosDiffServType44=qosDiffServType44, sntpServerTable=sntpServerTable, sntpGMTMinutes=sntpGMTMinutes, greenCableLenDetectionState=greenCableLenDetectionState, dhcpRetryCount=dhcpRetryCount, companyLBD=companyLBD, sntpDSTEndTime=sntpDSTEndTime, aacEnableMethod1=aacEnableMethod1, sysStatisticsTable=sysStatisticsTable, sysLoginTimeout=sysLoginTimeout, snmpUserAuthProtocolPassword=snmpUserAuthProtocolPassword, sysEoamLinkMonitor=sysEoamLinkMonitor, timeRangeSaturday=timeRangeSaturday, aclL2EtherType=aclL2EtherType, greenSystemHibernationTimeProfile1=greenSystemHibernationTimeProfile1, lldpXdot1ConfigVlanNameEntry=lldpXdot1ConfigVlanNameEntry, rmonAlarmSampleType=rmonAlarmSampleType, cpuAclL3RuleProfileID=cpuAclL3RuleProfileID, cpuAclL3Ip4ProtocolMask=cpuAclL3Ip4ProtocolMask, cpuAclL2DstMacMask=cpuAclL2DstMacMask, OwnerString=OwnerString, lldpLocManAddrLen=lldpLocManAddrLen, sysCableDiagPair3TestResult=sysCableDiagPair3TestResult, portErrEntry=portErrEntry, pnacRadiusServerKey=pnacRadiusServerKey, staticMacVlanID=staticMacVlanID, dot1qVlanName=dot1qVlanName, snmpCommunityEntry=snmpCommunityEntry, qinQVlanTransPriority=qinQVlanTransPriority, lldpLocPortIdSubtype=lldpLocPortIdSubtype, lldpDupSystemName=lldpDupSystemName, sysUserAccount=sysUserAccount, ipv6DefaultRouteProtocol=ipv6DefaultRouteProtocol, lldpXdot3RemPortOperMauType=lldpXdot3RemPortOperMauType, aclL3ReplaceDSCP=aclL3ReplaceDSCP, igsVlanQueryMaxResponseTime=igsVlanQueryMaxResponseTime, eeePort=eeePort, lldpRxStatsPortEntry=lldpRxStatsPortEntry, sysQosQueuingMechanism=sysQosQueuingMechanism, lldpXdot3LocPortAutoNegEnabled=lldpXdot3LocPortAutoNegEnabled, dhcpRelayOption82Policy=dhcpRelayOption82Policy, sysLBDStateEnable=sysLBDStateEnable, lldpXdot1RemProtocolEntry=lldpXdot1RemProtocolEntry, eoamPeerLinkMonitoring=eoamPeerLinkMonitoring, lldpXdot3RemMaxFrameSizeTable=lldpXdot3RemMaxFrameSizeTable, aacAPEnableMethod=aacAPEnableMethod, ipv6DHCPStatus=ipv6DHCPStatus, multicastFilterPortIndex=multicastFilterPortIndex, qosDiffServType15=qosDiffServType15, lldpXdot3RemoteData=lldpXdot3RemoteData, dhcpv6RelayOption37RemoteIDType=dhcpv6RelayOption37RemoteIDType, igsHostEntry=igsHostEntry, tftpSyslogTargetInterfaceName=tftpSyslogTargetInterfaceName, dot1qVlanEgressPorts=dot1qVlanEgressPorts, eoamPeerMode=eoamPeerMode, snmpTrapFiberLinkUpDown=snmpTrapFiberLinkUpDown, snmpTrapWarmStart=snmpTrapWarmStart, lldpStatsTxPortFramesTotal=lldpStatsTxPortFramesTotal, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, lldpXdot3PortConfigTLVsTxEnable=lldpXdot3PortConfigTLVsTxEnable, companySecurity=companySecurity, aclL3DstPortMask=aclL3DstPortMask, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, cpuAclL3Ip6TrafficClassCheck=cpuAclL3Ip6TrafficClassCheck, sysTraceRouteCtlProbe=sysTraceRouteCtlProbe, syslogServTable=syslogServTable, igmpMulticastVlanAddressType=igmpMulticastVlanAddressType, aclL3Ip4Protocol=aclL3Ip4Protocol, lldpXdot1LocTable=lldpXdot1LocTable, igsHostTable=igsHostTable, dhcpRelayOption82State=dhcpRelayOption82State, sysDHCPRelayManagement=sysDHCPRelayManagement, ipv4DefaultGateway=ipv4DefaultGateway, rmonEventStatus=rmonEventStatus, qinQConfigEntry=qinQConfigEntry, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, qosDiffServType40=qosDiffServType40, ipv6NeighborIndex=ipv6NeighborIndex, rmonAlarmTable=rmonAlarmTable, portCtrlMediumType=portCtrlMediumType, lbdTraps=lbdTraps, trafficCtrlPortState=trafficCtrlPortState, trafficCtrlTimeInterval=trafficCtrlTimeInterval, aacLoginMethod1=aacLoginMethod1, limitIpMulticastRangeStartIpAddr=limitIpMulticastRangeStartIpAddr, sessionType=sessionType, mirrorTargetIfIndex=mirrorTargetIfIndex, lldpRemTable=lldpRemTable, lldpRemChassisIdSubtype=lldpRemChassisIdSubtype, lldpXdot1ConfigProtocolPortNum=lldpXdot1ConfigProtocolPortNum, LldpSystemCapabilitiesMap=LldpSystemCapabilitiesMap, portCtrlLinkStatus=portCtrlLinkStatus, greenSystemHibernationTimeProfile2=greenSystemHibernationTimeProfile2, portSecurityLockAddrMode=portSecurityLockAddrMode, statisticsOutErrors=statisticsOutErrors, snmpUserVersion=snmpUserVersion, statisticsEtherDropEvents=statisticsEtherDropEvents, dhcpv6RelayOption37CheckState=dhcpv6RelayOption37CheckState, sysDevInfo=sysDevInfo, igsVlanFilterEntry=igsVlanFilterEntry, eoamVariableResponseRx=eoamVariableResponseRx, cpuAclL3ProfileStatus=cpuAclL3ProfileStatus, sysLBDMode=sysLBDMode, timeRangeMonday=timeRangeMonday, bandwidthCtrlEffectiveTxThreshold=bandwidthCtrlEffectiveTxThreshold, snmpTrapColdStart=snmpTrapColdStart, RmonStatus=RmonStatus, sysQosPortBase=sysQosPortBase, sntpGlobalState=sntpGlobalState, lldpRemUnknownTLVInfo=lldpRemUnknownTLVInfo, sysMACAgingTime=sysMACAgingTime, duldTable=duldTable, lldpStatsRxPortAgeoutsTotal=lldpStatsRxPortAgeoutsTotal, sysDDPReportTime=sysDDPReportTime, sysStaticMcastTable=sysStaticMcastTable, igsVlanGrpQueryInterval=igsVlanGrpQueryInterval, qosSchedulingClassEntry=qosSchedulingClassEntry, lldpXdot1RemVlanNameIndex=lldpXdot1RemVlanNameIndex, loopbackRecovery=loopbackRecovery, snmpHostTable=snmpHostTable, sysEoamTrap=sysEoamTrap, sysCpuAclStatistic=sysCpuAclStatistic, lldpXdot3RemPowerIndex=lldpXdot3RemPowerIndex, sysDHCPv6RelayOption37=sysDHCPv6RelayOption37, LldpChassisIdSubtype=LldpChassisIdSubtype, pnacConfigPortNumber=pnacConfigPortNumber, rmonStatsStatus=rmonStatsStatus, igsHostTableGroupAddress=igsHostTableGroupAddress, portUtilizTable=portUtilizTable, lldpXdot1LocVlanName=lldpXdot1LocVlanName, portSecurityViolation=portSecurityViolation, statisticsInErrors=statisticsInErrors, mldsVlanQuerierVersion=mldsVlanQuerierVersion, lldpLocPortEntry=lldpLocPortEntry, userEncryptControl=userEncryptControl, aacAuthParamResponseTimeout=aacAuthParamResponseTimeout, cpuAclL3Ip6TrafficClass=cpuAclL3Ip6TrafficClass, lldpXdot3RemLinkAggTable=lldpXdot3RemLinkAggTable, cpuAclL3IP6DstAddr=cpuAclL3IP6DstAddr, aclL3IgmpType=aclL3IgmpType, limitIPMulticastProfileID=limitIPMulticastProfileID, sysIgsVlan=sysIgsVlan, qinQVlanTransRowStatus=qinQVlanTransRowStatus, sysCableDiagTriggerIndex=sysCableDiagTriggerIndex, lldpRemManAddrOID=lldpRemManAddrOID, aclUsedRule=aclUsedRule, portSecurityMLA=portSecurityMLA)
mibBuilder.exportSymbols("DGS-1100-10ME_A1", lldpXdot3Config=lldpXdot3Config, dot1qVlanid=dot1qVlanid, lldpXdot1LocEntry=lldpXdot1LocEntry, cpuLast1MinUsage=cpuLast1MinUsage, tftpCfgTargetTftpOperation=tftpCfgTargetTftpOperation, greenPortShutoffTimeProfile2=greenPortShutoffTimeProfile2, qosDiffServType47=qosDiffServType47, qosDiffServType16=qosDiffServType16, statisticsPkts256to511Octets=statisticsPkts256to511Octets, sysRestart=sysRestart, sysIGMPMulticastVlanTable=sysIGMPMulticastVlanTable, sysLLDPConfigManAddrTable=sysLLDPConfigManAddrTable, qosPortBaseEffectivePriority=qosPortBaseEffectivePriority, lldpLocManAddrIfId=lldpLocManAddrIfId, cpuAclL3ProfileTable=cpuAclL3ProfileTable, lldpRemSysName=lldpRemSysName, rmonAlarmIndex=rmonAlarmIndex, sntpServerRowStatus=sntpServerRowStatus, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, sysAclStatistic=sysAclStatistic, sntpServerAddr=sntpServerAddr, qinQVlanTransSVID=qinQVlanTransSVID, limitIpMulticastRangeStatus=limitIpMulticastRangeStatus, companyTrafficMgmt=companyTrafficMgmt, sysRMONHistory=sysRMONHistory, syslogSaveMode=syslogSaveMode, statisticsPkts64Octets=statisticsPkts64Octets, portDescriptionEntry=portDescriptionEntry, portSecurityEntry=portSecurityEntry, cpuAclL2EtherType=cpuAclL2EtherType, traceRouteHistoryIndex=traceRouteHistoryIndex, igmpMulticastVlanGroupAddressType=igmpMulticastVlanGroupAddressType, qosDiffServType30=qosDiffServType30, sysQosDiffServ=sysQosDiffServ, tftpFwTargetTransferPercentage=tftpFwTargetTransferPercentage, ipv6AddressRowStatus=ipv6AddressRowStatus, sysPppoeGlobalState=sysPppoeGlobalState, lldpXdot3RemPortAutoNegSupported=lldpXdot3RemPortAutoNegSupported, eoamEventLogType=eoamEventLogType, mldsHostTableGroupAddress=mldsHostTableGroupAddress, lldpXdot3RemPowerMDISupported=lldpXdot3RemPowerMDISupported, lldpLocSysName=lldpLocSysName, aclL3TcpFlagFIN=aclL3TcpFlagFIN, sysLBDCtrlIndex=sysLBDCtrlIndex, companyMulticastFilter=companyMulticastFilter, aclL2RuleProfileID=aclL2RuleProfileID, lldpRemUnknownIndex=lldpRemUnknownIndex, eoamInformationTx=eoamInformationTx, sysFdbClearId=sysFdbClearId, eoamVarReq=eoamVarReq, macNotifyPortStatus=macNotifyPortStatus, dhcpv6RelayState=dhcpv6RelayState, rmonEventIndex=rmonEventIndex, sysSNMPHost=sysSNMPHost, lldpXdot3RemPowerLocalPortNum=lldpXdot3RemPowerLocalPortNum, rmonEventOwner=rmonEventOwner, lldpXdot3RemTimeMark=lldpXdot3RemTimeMark, errorFramePeriodWindow=errorFramePeriodWindow, snmpTrapLBDDetection=snmpTrapLBDDetection, sysSNMPTrap=sysSNMPTrap, mldsVlanQueryInterval=mldsVlanQueryInterval, cpuAclL3RuleTable=cpuAclL3RuleTable, eoamOrgSpecificTx=eoamOrgSpecificTx, sysTftpCfgTargetGroup=sysTftpCfgTargetGroup, qosDiffServType35=qosDiffServType35, timeRangeStartHour=timeRangeStartHour, mldsVlanCfgQuerier=mldsVlanCfgQuerier, staticMacPort=staticMacPort, portDescIndex=portDescIndex, aclL3TcpFlagURG=aclL3TcpFlagURG, snmpCommunityStatus=snmpCommunityStatus, dgs_1100_10ME=dgs_1100_10ME, lldpRemManLocalPortNum=lldpRemManLocalPortNum, lldpXdot1RemProtocolId=lldpXdot1RemProtocolId, qosDiffServType26=qosDiffServType26, eoamVariableResponseTx=eoamVariableResponseTx, aacServerInfoTable=aacServerInfoTable, sysLLDPStatistics=sysLLDPStatistics, lldpXdot1RemPortVlanId=lldpXdot1RemPortVlanId, sysDynamicFdbTable=sysDynamicFdbTable, sysSshState=sysSshState, portCtrlIndex=portCtrlIndex, pnacRadiusServerAddress=pnacRadiusServerAddress, duldDiscoveryTime=duldDiscoveryTime, LldpPortIdSubtype=LldpPortIdSubtype, pnacMode=pnacMode, statisticsOutDiscards=statisticsOutDiscards, syslogServSrvRowStatus=syslogServSrvRowStatus, syslogServIndex=syslogServIndex, lldpMisConfigOperMauType=lldpMisConfigOperMauType, sysLBDVlanLoopTable=sysLBDVlanLoopTable, lldpXdot1RemProtocolTable=lldpXdot1RemProtocolTable, companyMldsGroup=companyMldsGroup, tftpSyslogTargetServerIpAddress=tftpSyslogTargetServerIpAddress, pnacRadiusServerEntry=pnacRadiusServerEntry, staticMcastEgressPorts=staticMcastEgressPorts, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, LldpLinkAggStatusMap=LldpLinkAggStatusMap, igsAccessAuthState=igsAccessAuthState, eoamLoopbackTestPattern=eoamLoopbackTestPattern, sysTraceRouteCtlAddress=sysTraceRouteCtlAddress, eoamTrap=eoamTrap, aacServerGroupName=aacServerGroupName, lldpXdot3RemLinkAggStatus=lldpXdot3RemLinkAggStatus, sysIGMPMulticastVlanGroupTable=sysIGMPMulticastVlanGroupTable, sysLLDPPortConfigTable=sysLLDPPortConfigTable, cpuAclL3IP4TcpFlagACK=cpuAclL3IP4TcpFlagACK, stormOccurred=stormOccurred, sysDeviceType=sysDeviceType, eeeTable=eeeTable, igsVlanSnoopStatus=igsVlanSnoopStatus, dynamicFdbMacAddr=dynamicFdbMacAddr, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, lldpLocPortTable=lldpLocPortTable, lldpRemManTimeMark=lldpRemManTimeMark, sysDot1qPVIDAutoAssign=sysDot1qPVIDAutoAssign, snmpUserName=snmpUserName, adminUserTable=adminUserTable, sysLBDPortLoopStatus=sysLBDPortLoopStatus, snmpViewTreeName=snmpViewTreeName, d_link=d_link, eoamUnsupportedCodesRx=eoamUnsupportedCodesRx, mirrorEgressPortList=mirrorEgressPortList, tftpCfgTargetInterfaceName=tftpCfgTargetInterfaceName, companyLLDP=companyLLDP, lldpXdot1LocVlanNameTable=lldpXdot1LocVlanNameTable, eoamLoopbackTestTxCount=eoamLoopbackTestTxCount, qosTrafficClassEntry=qosTrafficClassEntry, aclL3Ip4DstAddrMask=aclL3Ip4DstAddrMask, cpuAclL2InPortList=cpuAclL2InPortList, eoamLoopbackTestRxCount=eoamLoopbackTestRxCount, aclL2InPortList=aclL2InPortList, companySyslog=companySyslog, ipv6NeighborMacAddr=ipv6NeighborMacAddr, syssessionEntry=syssessionEntry, TimeFilter=TimeFilter, rmonStatsDataSource=rmonStatsDataSource, cpuAclL2ProfileTable=cpuAclL2ProfileTable, qosDiffServType01=qosDiffServType01, lldpStatsRxPortTLVsUnrecognizedTotal=lldpStatsRxPortTLVsUnrecognizedTotal, lldpXdot1RemProtoVlanLocalPortNum=lldpXdot1RemProtoVlanLocalPortNum, sntpTimeSeconds=sntpTimeSeconds, rmonStatsIndex=rmonStatsIndex, eoamUnsupportedCodesTx=eoamUnsupportedCodesTx, companyMacNotify=companyMacNotify, lldpXdot1RemProtocolIdIndex=lldpXdot1RemProtocolIdIndex, pnacCapability=pnacCapability, statisticsInUcastPkts=statisticsInUcastPkts, limitIPMulticastProfileEntry=limitIPMulticastProfileEntry, sessionIP=sessionIP, pnacDirection=pnacDirection, timeRangeEndMonth=timeRangeEndMonth, lldpXdot3LocMaxFrameSizePortNum=lldpXdot3LocMaxFrameSizePortNum, rmonAlarmEntry=rmonAlarmEntry, statisticsPkts128to255Octets=statisticsPkts128to255Octets, tftpSyslogTargetTftpOperationStatus=tftpSyslogTargetTftpOperationStatus, traceRouteHistoryProbeIndex=traceRouteHistoryProbeIndex, pnacSuppTimeout=pnacSuppTimeout, sysStaticMacTable=sysStaticMacTable, companyIPv6Neighbor=companyIPv6Neighbor, mldsVlanMulticastGroupTable=mldsVlanMulticastGroupTable, aacServerIPType=aacServerIPType, igsVlanRouterVlanId=igsVlanRouterVlanId, ipv6AddressIpAddr=ipv6AddressIpAddr, companyPing=companyPing, sysLLDPReinitDelay=sysLLDPReinitDelay, eoamNotifyThresholdEvent=eoamNotifyThresholdEvent, eoamTable=eoamTable, aacLoginMethod2=aacLoginMethod2, portErrPortState=portErrPortState, sysStatisticsClearTable=sysStatisticsClearTable, igsStatus=igsStatus, snmpGroupTable=snmpGroupTable, sysFimwareupgradesuccess=sysFimwareupgradesuccess, sysPnacPortAccessCtrl=sysPnacPortAccessCtrl, lldpXdot1LocProtocolPortNum=lldpXdot1LocProtocolPortNum, greenPortShutoffPortList=greenPortShutoffPortList, pnacPortAccessControlTable=pnacPortAccessControlTable, aclL3RuleCount=aclL3RuleCount, igsVlanRouterStaticPortList=igsVlanRouterStaticPortList, igmpMulticastVlanid=igmpMulticastVlanid, aclL2ProfileStatus=aclL2ProfileStatus, pnacReAuthPeriod=pnacReAuthPeriod, trafficCtrlCountDown=trafficCtrlCountDown, errorSymbolWindow=errorSymbolWindow, aclL3RuleStatus=aclL3RuleStatus, cpuAclL2SrcMacMask=cpuAclL2SrcMacMask, eoamDuplicateEventNotificationRx=eoamDuplicateEventNotificationRx, lldpExceedsMaxFrameSize=lldpExceedsMaxFrameSize, lldpRemPortDesc=lldpRemPortDesc, Ipv6Address=Ipv6Address, aacServerInterfaceName=aacServerInterfaceName, portCtrlEntry=portCtrlEntry, tftpCfgTargetTftpOperationStatus=tftpCfgTargetTftpOperationStatus, sysDot1qVlanManagementid=sysDot1qVlanManagementid, lldpRemManAddrIfSubtype=lldpRemManAddrIfSubtype, qosDiffServTypeGroup=qosDiffServTypeGroup, aclL3ProfileEntry=aclL3ProfileEntry, lldpXdot1RemLocalPortNum=lldpXdot1RemLocalPortNum, cpuAclUsedProfile=cpuAclUsedProfile, syslogMsg=syslogMsg, syslogMsgIndex=syslogMsgIndex, sysSNMPCommunity=sysSNMPCommunity, eoamPeerMacAddress=eoamPeerMacAddress, traceRouteHistoryHopIndex=traceRouteHistoryHopIndex, multicastFilterPortEntry=multicastFilterPortEntry, sysPingTimeout=sysPingTimeout, duldIfIndex=duldIfIndex, lldpRemManAddrIfId=lldpRemManAddrIfId, arpEntry=arpEntry, cpuAclL3IP4IcmpType=cpuAclL3IP4IcmpType, trafficCtrlTable=trafficCtrlTable, cpuAclL2ProfileID=cpuAclL2ProfileID, statisticsSingleCollisionFrames=statisticsSingleCollisionFrames, pnacRadiusServerAccountingPort=pnacRadiusServerAccountingPort, userAccessRight=userAccessRight, dhcpv6RelayInterface=dhcpv6RelayInterface, errorFrameSecondsThreshold=errorFrameSecondsThreshold, companyQinQ=companyQinQ, dhcpLocalRelayEntry=dhcpLocalRelayEntry, errorFrameNotifyState=errorFrameNotifyState, eoamLoopbackStatsRxCount=eoamLoopbackStatsRxCount, aclL28021pCheck=aclL28021pCheck, portUtilizEntry=portUtilizEntry, sysTrustedHost=sysTrustedHost, trustedHostIpAddr=trustedHostIpAddr, cpuAclL3InPortList=cpuAclL3InPortList, sysDHCPv6RelayManagement=sysDHCPv6RelayManagement, lldpXdot1ConfigProtocolTable=lldpXdot1ConfigProtocolTable, statisticsOutNUcastPkts=statisticsOutNUcastPkts, lldpMisConfigPortVlanID=lldpMisConfigPortVlanID, qosDiffServType14=qosDiffServType14, lldpRemUnknownTLVTable=lldpRemUnknownTLVTable, qosDiffServType63=qosDiffServType63, portSecFDBPermPort=portSecFDBPermPort, aacLoginMethodListEntry=aacLoginMethodListEntry, portErrPortReason=portErrPortReason, igsVlanFastLeave=igsVlanFastLeave, aclL3Ip4DscpCheck=aclL3Ip4DscpCheck, mldsStatus=mldsStatus, statisticsInOctets=statisticsInOctets, aacEnableMethod4=aacEnableMethod4, qosDiffServType39=qosDiffServType39, sysHardwareVersion=sysHardwareVersion, lldpXdot3RemMaxFrameSizeEntry=lldpXdot3RemMaxFrameSizeEntry, sysDot1qVlanTable=sysDot1qVlanTable, sysDot1qVlanAsyOnOff=sysDot1qVlanAsyOnOff, pnacReAuthentication=pnacReAuthentication, sysGuestVlanPort=sysGuestVlanPort, sysRAM=sysRAM, sysRMONGlobalState=sysRMONGlobalState, sysFirmwareVersion=sysFirmwareVersion, dhcpv6RelayOption37State=dhcpv6RelayOption37State, lldpPortConfigTLVsTxEnable=lldpPortConfigTLVsTxEnable)
mibBuilder.exportSymbols("DGS-1100-10ME_A1", aacServerGroupTable=aacServerGroupTable, snmpViewTreeMask=snmpViewTreeMask, sysCPU=sysCPU, lldpLocPortDesc=lldpLocPortDesc, timeRangeWednesday=timeRangeWednesday, sysSNTPSettingGroup=sysSNTPSettingGroup, qosDiffServType58=qosDiffServType58, dhcpRelayOption82RemoteIDType=dhcpRelayOption82RemoteIDType, igmpMulticastVlanGroupToIp=igmpMulticastVlanGroupToIp, snmpGroupStatus=snmpGroupStatus, mldsVlanMulticastGroupPortList=mldsVlanMulticastGroupPortList, lldpXdot1RemEntry=lldpXdot1RemEntry, lldpDupManagmentAddress=lldpDupManagmentAddress, sysFimwareuupgradefailed=sysFimwareuupgradefailed, sysQosScheduling=sysQosScheduling, rmonHistoryTable=rmonHistoryTable, snmpUserEntry=snmpUserEntry, ipv4SubnetMask=ipv4SubnetMask, ipv6NeighborCacheState=ipv6NeighborCacheState, limitIPMulticastPortIPType=limitIPMulticastPortIPType, sysBootVerion=sysBootVerion, dhcpRelayState=dhcpRelayState, igsVlanFilterTable=igsVlanFilterTable, sysPingDestIpAddr=sysPingDestIpAddr, sysArp=sysArp, lldpXdot3RemLinkAggLocalPortNum=lldpXdot3RemLinkAggLocalPortNum, qosDiffServType03=qosDiffServType03, cpuAclL2VlanId=cpuAclL2VlanId, portUtilizIndex=portUtilizIndex, sysWebState=sysWebState, portSecFDBPermVlanID=portSecFDBPermVlanID, pnacMaxReq=pnacMaxReq, syslogServerGroup=syslogServerGroup, sessionUserPrivilege=sessionUserPrivilege, qosDiffServType11=qosDiffServType11, eoamLoopbackTestEndTimestamp=eoamLoopbackTestEndTimestamp, igmpMulticastVlanRowStatus=igmpMulticastVlanRowStatus, mldsVlanRouterVlanId=mldsVlanRouterVlanId, sysLLDPMsgTxInterval=sysLLDPMsgTxInterval, dhcpLocalRelayState=dhcpLocalRelayState, aclL3RuleProfileID=aclL3RuleProfileID, traceRouteHistoryHAddr=traceRouteHistoryHAddr, statisticsExcessiveCollisions=statisticsExcessiveCollisions, aacServerGroupRowStatus=aacServerGroupRowStatus, traceRouteHistoryHAddrType=traceRouteHistoryHAddrType, sysContact=sysContact, dynamicFdbPort=dynamicFdbPort, trafficCtrlEntry=trafficCtrlEntry, dot1qVlanPortVlanId=dot1qVlanPortVlanId, tftpFwTargetServerIpType=tftpFwTargetServerIpType, sysSerialNumber=sysSerialNumber, portCtrlSpeed=portCtrlSpeed, lldpXdot1LocConfigVlanNamePortNum=lldpXdot1LocConfigVlanNamePortNum, sysLLDPTxDelay=sysLLDPTxDelay, aclL3ProfileStatus=aclL3ProfileStatus, sysGreenPortShutoff=sysGreenPortShutoff, lldpXdot1ConfigProtocolIndex=lldpXdot1ConfigProtocolIndex, portSecFDBPermanentTable=portSecFDBPermanentTable, sysIPv6neighborTable=sysIPv6neighborTable, greenLEDShutoffTimeProfile2=greenLEDShutoffTimeProfile2, mldsVlanFilterEntry=mldsVlanFilterEntry, lldpXdot3RemMaxFrameSizeLocalPortNum=lldpXdot3RemMaxFrameSizeLocalPortNum, qosPortBaseTable=qosPortBaseTable, tftpCfgTargetServerIpType=tftpCfgTargetServerIpType, aclL2DstMac=aclL2DstMac, igmpMulticastVlanTagMemberPort=igmpMulticastVlanTagMemberPort, lldpXdot1RemVlanNameLocalPortNum=lldpXdot1RemVlanNameLocalPortNum, sysPnacRadiusServer=sysPnacRadiusServer, qinQMissDrop=qinQMissDrop, statisticsInNUcastPkts=statisticsInNUcastPkts, qosPortBasePortIndex=qosPortBasePortIndex, sysSshPortNumber=sysSshPortNumber, lldpXdot3LocMaxFrameSize=lldpXdot3LocMaxFrameSize, tftpFwTargetTftpOperation=tftpFwTargetTftpOperation, lldpLocPortId=lldpLocPortId, qosDiffServType51=qosDiffServType51, timeRangeDate=timeRangeDate, cpuAclL3Ip4IcmpTypeCheck=cpuAclL3Ip4IcmpTypeCheck, qosDiffServType34=qosDiffServType34, sysmacNotifyHistorySize=sysmacNotifyHistorySize, sysGuestVlanName=sysGuestVlanName, lldpRemSysDesc=lldpRemSysDesc, limitIPMulticastProfileStatus=limitIPMulticastProfileStatus, lldpXdot3RemLinkAggIndex=lldpXdot3RemLinkAggIndex, mldsVlanFastLeave=mldsVlanFastLeave, lldpLocPortNum=lldpLocPortNum, portSecurityTraps=portSecurityTraps, cpuAclL2SrcMac=cpuAclL2SrcMac, aclL2SrcMac=aclL2SrcMac, qosDiffServType37=qosDiffServType37, sysPingSuccesses=sysPingSuccesses, eoamLoopbackStatsMatchCount=eoamLoopbackStatsMatchCount, rmonHistoryOwner=rmonHistoryOwner, aacServerTimeout=aacServerTimeout, aclL2RuleAccessID=aclL2RuleAccessID, sysPingStart=sysPingStart, aacAPLoginMethod=aacAPLoginMethod, cpuAclL3Ip4DscpCheck=cpuAclL3Ip4DscpCheck, ipv6DefaultRouteAdminStatus=ipv6DefaultRouteAdminStatus, cpuAclL3Ip6SrcAddrMask=cpuAclL3Ip6SrcAddrMask, lldpLocSysDesc=lldpLocSysDesc, traceRouteHistoryEntry=traceRouteHistoryEntry, portDescMediumType=portDescMediumType, statisticsFrameTooLongs=statisticsFrameTooLongs, eoamEventLogLocation=eoamEventLogLocation, pppoePortCircuitIDType=pppoePortCircuitIDType, companyPnacGroup=companyPnacGroup, cpuAclL3IP4TcpFlagRST=cpuAclL3IP4TcpFlagRST, aclL2ProfileEntry=aclL2ProfileEntry, qinQOuterTPID=qinQOuterTPID, lldpXdot3RemPortTable=lldpXdot3RemPortTable, qosDiffServType24=qosDiffServType24, timeRangeThursday=timeRangeThursday, companyACL=companyACL, statisticsOutUcastPkts=statisticsOutUcastPkts, igsVlanFilterVlanId=igsVlanFilterVlanId, portUtilizRX=portUtilizRX, mldsVlanHostPortPurgeInterval=mldsVlanHostPortPurgeInterval, macNotifyCtrlEntry=macNotifyCtrlEntry, trafficCtrlThreshold=trafficCtrlThreshold, aclL3TcpFlagSYN=aclL3TcpFlagSYN, cpuAclL3RuleEntry=cpuAclL3RuleEntry, statisticsEtherUndersizePkts=statisticsEtherUndersizePkts, timeRangeStartMinute=timeRangeStartMinute, igmpMulticastVlanGroupVid=igmpMulticastVlanGroupVid, qinQVlanTransCVID=qinQVlanTransCVID, aclL3SrcPortMask=aclL3SrcPortMask, cpuLast5SecUsage=cpuLast5SecUsage, companyEoam=companyEoam, lldpLocChassisId=lldpLocChassisId, aclL3Ip4ProtocolMask=aclL3Ip4ProtocolMask, limitIPMulticastIPType=limitIPMulticastIPType, sysRMONAlarm=sysRMONAlarm, syslogServSeverity=syslogServSeverity, lldpXdot1Config=lldpXdot1Config, fdbTableChanged=fdbTableChanged, eoamLoopbackTestTable=eoamLoopbackTestTable, sysmacNotifyCtrlTable=sysmacNotifyCtrlTable, aacServerAuthKey=aacServerAuthKey, lldpRemPortId=lldpRemPortId, rmonStatsDropEvents=rmonStatsDropEvents, snmpGroupSecurityLevel=snmpGroupSecurityLevel, aclL3Ip6DstAddrMask=aclL3Ip6DstAddrMask, arpType=arpType, lldpXdot3LocPortAutoNegAdvertisedCap=lldpXdot3LocPortAutoNegAdvertisedCap, lldpXdot3RemPortAutoNegAdvertisedCap=lldpXdot3RemPortAutoNegAdvertisedCap, lldpRemUnknownTimeMark=lldpRemUnknownTimeMark, syslogServUDPport=syslogServUDPport, lldpXdot3RemLinkAggPortId=lldpXdot3RemLinkAggPortId, snmpUserPrivProtocol=snmpUserPrivProtocol, snmpHostAddress=snmpHostAddress, tftpSyslogTargetImageFileName=tftpSyslogTargetImageFileName, eoamEventLogIndex=eoamEventLogIndex, eoamInformationRx=eoamInformationRx, greenLEDShutoffPortList=greenLEDShutoffPortList, companyUserAccount=companyUserAccount, ipv6DefaultRouteMetric=ipv6DefaultRouteMetric, lldpXdot1LocProtocolTable=lldpXdot1LocProtocolTable, sysFimwareTraps=sysFimwareTraps, lldpRemManAddrSubtype=lldpRemManAddrSubtype, lldpXdot3RemMaxFrameSize=lldpXdot3RemMaxFrameSize, aacEnableMethodListRowStatus=aacEnableMethodListRowStatus, lldpRemUnknownLocalPortNum=lldpRemUnknownLocalPortNum, sysTftpSyslogTargetGroup=sysTftpSyslogTargetGroup, mirrorTargetPort=mirrorTargetPort, aclL2SrcMacMask=aclL2SrcMacMask, qosSchedulingClassIndex=qosSchedulingClassIndex, cpuLast5MinUsage=cpuLast5MinUsage, rmonStatsTable=rmonStatsTable, eoamLoopbackStatus=eoamLoopbackStatus, lldpStatsRxPortNum=lldpStatsRxPortNum, sysMirrorPortTable=sysMirrorPortTable, sysLBDInterval=sysLBDInterval, eoamLoopbackTestWaitTime=eoamLoopbackTestWaitTime, cpuAclL3Ip4IcmpCodeCheck=cpuAclL3Ip4IcmpCodeCheck, sysIgsHost=sysIgsHost, OperationResponseStatus=OperationResponseStatus, timeRangeIndex=timeRangeIndex, eoamVariableRequestRx=eoamVariableRequestRx, snmpGroupName=snmpGroupName, limitIpMulticastRangeProfileID=limitIpMulticastRangeProfileID, ipv6AddressIpPrefix=ipv6AddressIpPrefix, qosDiffServType53=qosDiffServType53, igsHostTableHostIPAddress=igsHostTableHostIPAddress, mldsVlanSnoopStatus=mldsVlanSnoopStatus, pnacRadiusServerTable=pnacRadiusServerTable, limitIPMulticastPortMaxGrp=limitIPMulticastPortMaxGrp, tftpSyslogTargetTftpOperation=tftpSyslogTargetTftpOperation, staticMcastStatus=staticMcastStatus, adminUserEntry=adminUserEntry, sysMldsHost=sysMldsHost, eoamPeerMaxOAMPDU=eoamPeerMaxOAMPDU, eeeEntry=eeeEntry, eoamOperStatus=eoamOperStatus, qosDiffServType41=qosDiffServType41, rmonEventLastTimeSent=rmonEventLastTimeSent, lldpLocSysCapEnabled=lldpLocSysCapEnabled, lldpXdot3RemPowerMDIEnabled=lldpXdot3RemPowerMDIEnabled, snmpGroupNotifyViewName=snmpGroupNotifyViewName, ipv6DefaultRouteIfIndex=ipv6DefaultRouteIfIndex, statisticsEtherFragments=statisticsEtherFragments, lldpXdot1RemVlanNameTable=lldpXdot1RemVlanNameTable, aclL2RuleStatus=aclL2RuleStatus, companyMirror=companyMirror, sysIGMPMulticastVlanEntry=sysIGMPMulticastVlanEntry, lldpConfigManAddrSubtype=lldpConfigManAddrSubtype, lldpLocChassisIdSubtype=lldpLocChassisIdSubtype, rmonEventType=rmonEventType, limitIPMulticastPortState=limitIPMulticastPortState, greenPortShutoffState=greenPortShutoffState, cpuAclL2RuleProfileID=cpuAclL2RuleProfileID, lldpXdot1ConfigVlanPortNum=lldpXdot1ConfigVlanPortNum, lldpXdot1LocProtocolId=lldpXdot1LocProtocolId, statisticsClearStatus=statisticsClearStatus, rmonHistoryIndex=rmonHistoryIndex, sysCableDiagLengthinRange=sysCableDiagLengthinRange, lldpLocManAddrIfSubtype=lldpLocManAddrIfSubtype, eoamLoopbackTestStatus=eoamLoopbackTestStatus, lldpRemTablesChange=lldpRemTablesChange, qosTrafficClassPriority=qosTrafficClassPriority, sysCableDiagPair2TestResult=sysCableDiagPair2TestResult, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, sessionLoginTime=sessionLoginTime, lldpXdot1ConfigProtocolTxEnable=lldpXdot1ConfigProtocolTxEnable, lldpStatsTxPortTable=lldpStatsTxPortTable, ddpEntry=ddpEntry, syslogServAddr=syslogServAddr, cpuAclL3Ip4TcpFlagCheck=cpuAclL3Ip4TcpFlagCheck, sysSecurityAAC=sysSecurityAAC, lldpXdot1RemProtoVlanTimeMark=lldpXdot1RemProtoVlanTimeMark, aclL3TcpFlagRST=aclL3TcpFlagRST, limitIpMulticastRangeIPType=limitIpMulticastRangeIPType, eoamPeerUnidirection=eoamPeerUnidirection, snmpViewTreeTable=snmpViewTreeTable, igmpMulticastVlanGroupStatus=igmpMulticastVlanGroupStatus, qosDiffServType12=qosDiffServType12, lldpXdot3LocPortEntry=lldpXdot3LocPortEntry, mldsVlanRouterStaticPortList=mldsVlanRouterStaticPortList, mldsVlanGrpQueryInterval=mldsVlanGrpQueryInterval, eoamIfIndex=eoamIfIndex, stormCleared=stormCleared, sysTelnetUDPPort=sysTelnetUDPPort, lldpStatsRxPortFramesTotal=lldpStatsRxPortFramesTotal, syslimitIPMulticastPortTable=syslimitIPMulticastPortTable, pppoePortUDFString=pppoePortUDFString, lldpXdot3LocMaxFrameSizeEntry=lldpXdot3LocMaxFrameSizeEntry, cpuAclL2RuleAccessID=cpuAclL2RuleAccessID, lldpXdot3LocPortOperMauType=lldpXdot3LocPortOperMauType, cpuAclL3IP4DstPort=cpuAclL3IP4DstPort, aacEnableMethod2=aacEnableMethod2, eoamLoopbackTestEntry=eoamLoopbackTestEntry, dhcpLocalRelayVlanId=dhcpLocalRelayVlanId, qinQConfigTable=qinQConfigTable, sntpServerType=sntpServerType)
mibBuilder.exportSymbols("DGS-1100-10ME_A1", sysIpifTraps=sysIpifTraps, companyArp=companyArp, aacAuthParamAttempt=aacAuthParamAttempt, snmpHostStatus=snmpHostStatus, aacLoginMethodListTable=aacLoginMethodListTable, sysTftpTrapGroup=sysTftpTrapGroup, lldpRemManAddrEntry=lldpRemManAddrEntry, sysEoamEventLog=sysEoamEventLog, lldpXdot1LocVlanNamePortNum=lldpXdot1LocVlanNamePortNum, igsHostTableVlanId=igsHostTableVlanId, userName=userName, aclL3IcmpCode=aclL3IcmpCode, sysTelnetsettingManagementOnOff=sysTelnetsettingManagementOnOff, aclUsedProfile=aclUsedProfile, aclL3RuleEntry=aclL3RuleEntry, sysSNMPEngineID=sysSNMPEngineID, ipv4AddrCfgMode=ipv4AddrCfgMode, igsVlanQuerier=igsVlanQuerier, errorFrameWindow=errorFrameWindow, qosSchedulingClassTable=qosSchedulingClassTable, dynamicFdbId=dynamicFdbId, timeRangeSettingEntry=timeRangeSettingEntry, lldpLocManAddrTable=lldpLocManAddrTable, staticMacEntry=staticMacEntry, aacAPTelnetLoginMethod=aacAPTelnetLoginMethod, qosDiffServType02=qosDiffServType02, cpuAclL3IP4TcpFlagSYN=cpuAclL3IP4TcpFlagSYN, cpuAclL2Action=cpuAclL2Action, statisticsPkts1024to1518Octets=statisticsPkts1024to1518Octets, snmpHostCommunityName=snmpHostCommunityName, sysTftpFwTargetGroup=sysTftpFwTargetGroup, igsVlanRouterPortPurgeInterval=igsVlanRouterPortPurgeInterval, sysSafeGuardEnable=sysSafeGuardEnable, eoamLoopbackTestCount=eoamLoopbackTestCount, statisticsClearIndex=statisticsClearIndex, cpuAclTotalProfile=cpuAclTotalProfile, companyPPPoE=companyPPPoE, eoamEventLogWindow=eoamEventLogWindow, pnacRadiusServerTimeout=pnacRadiusServerTimeout, aclL3IcmpType=aclL3IcmpType, dhcpRelayTimeThreshold=dhcpRelayTimeThreshold, portSecFDBPermMac=portSecFDBPermMac, sysEoamLoopbackTest=sysEoamLoopbackTest, rmonStatsMulticastPkts=rmonStatsMulticastPkts, snmpUserTable=snmpUserTable, pnacUserStatus=pnacUserStatus, aclL3IP6DstAddr=aclL3IP6DstAddr, sysDHCPRelayControl=sysDHCPRelayControl, pnacUserPassword=pnacUserPassword, sysMacNotifyState=sysMacNotifyState, sysLBDCtrlEntry=sysLBDCtrlEntry, eoamRemoteLoopback=eoamRemoteLoopback, eoamNotifyNonThresholdEvent=eoamNotifyNonThresholdEvent, igsHostTablePort=igsHostTablePort, eoamFramesLostDueToOam=eoamFramesLostDueToOam, dhcpRelayInterfaceSettingsRowStatus=dhcpRelayInterfaceSettingsRowStatus, mldsHostTable=mldsHostTable, statisticsClearEntry=statisticsClearEntry, sysTraceRouteHistoryTable=sysTraceRouteHistoryTable, arpMacAddress=arpMacAddress, statisticsEtherJabbers=statisticsEtherJabbers, cpuAclL3IP4IcmpCode=cpuAclL3IP4IcmpCode, companyDHCPLocalRelay=companyDHCPLocalRelay, companyCPUACL=companyCPUACL, companyTftpGroup=companyTftpGroup, cpuAclL3Ip6DstAddrMask=cpuAclL3Ip6DstAddrMask, eoamEventLogPort=eoamEventLogPort, mldsVlanFilterTable=mldsVlanFilterTable, aclL2RuleTable=aclL2RuleTable, sysPort=sysPort, syslogMsgEntry=syslogMsgEntry, dhcpv6RelayInterfaceTable=dhcpv6RelayInterfaceTable, companyISMVLAN=companyISMVLAN, eoamLoopbackControlRx=eoamLoopbackControlRx, lldpStatsRxPortTLVsDiscardedTotal=lldpStatsRxPortTLVsDiscardedTotal, qosDiffServType25=qosDiffServType25, sysDynamicFdbEntry=sysDynamicFdbEntry, trafficCtrlType=trafficCtrlType, qosSchedulingWeight=qosSchedulingWeight, cpuAclL2RuleTable=cpuAclL2RuleTable, mldsVlanRouterPortPurgeInterval=mldsVlanRouterPortPurgeInterval, aacEnableMethod3=aacEnableMethod3, tftpSyslogTargetServerIpType=tftpSyslogTargetServerIpType, aclL3ProfileTable=aclL3ProfileTable, sysMldsSystem=sysMldsSystem, ramLast5SecUsage=ramLast5SecUsage, timeRangeName=timeRangeName, aacAuthenAdminState=aacAuthenAdminState, ramLast1MinUsage=ramLast1MinUsage, limitIPMulticastPortID=limitIPMulticastPortID, sysCableDiagPair1TestResult=sysCableDiagPair1TestResult, qinQGlobalStatus=qinQGlobalStatus, lldpXdot1RemProtoVlanTable=lldpXdot1RemProtoVlanTable, lldpRemIndex=lldpRemIndex, snmpViewTreeEntry=snmpViewTreeEntry, qosDiffServType22=qosDiffServType22, lldpXdot3RemPowerClass=lldpXdot3RemPowerClass, userEncrypt=userEncrypt, lldpXdot3RemLocalPortNum=lldpXdot3RemLocalPortNum, trafficSegmentationIfIndex=trafficSegmentationIfIndex, cpuAclL3IP4DSCP=cpuAclL3IP4DSCP, eoamEntry=eoamEntry, eoamLoopbackTestStartTimestamp=eoamLoopbackTestStartTimestamp, cpuAclL3IP4SrcAddr=cpuAclL3IP4SrcAddr, aacServerGroupEntry=aacServerGroupEntry, portUtilizTX=portUtilizTX, igmpMulticastVlanName=igmpMulticastVlanName, dlink_DGS1100SeriesProd=dlink_DGS1100SeriesProd, eoamEventLogEntry=eoamEventLogEntry, aclL3Action=aclL3Action, sessionUserName=sessionUserName, sysPortSecurityTrap=sysPortSecurityTrap, aacEnableMethodListName=aacEnableMethodListName, aacServersInGroup=aacServersInGroup, lldpMisConfigVlanName=lldpMisConfigVlanName, sysCableDiagPair4TestResult=sysCableDiagPair4TestResult, dhcpRelayOption82CheckState=dhcpRelayOption82CheckState, companyCableDiagnostic=companyCableDiagnostic, qosDiffServType59=qosDiffServType59, ipv6AddressEntry=ipv6AddressEntry, portCtrlMDI=portCtrlMDI, sysSNMPGlobalState=sysSNMPGlobalState, qinQInnerTPID=qinQInnerTPID, cpuAclL2RuleStatus=cpuAclL2RuleStatus, statisticsPkts512to1023Octets=statisticsPkts512to1023Octets, mldsHostTablePort=mldsHostTablePort, lldpXdot1ConfigProtocolEntry=lldpXdot1ConfigProtocolEntry, lldpLocManAddrOID=lldpLocManAddrOID, sysFimwarefiletransferfailed=sysFimwarefiletransferfailed, lldpRxStatsPortTable=lldpRxStatsPortTable, sessionID=sessionID, snmpCommunityName=snmpCommunityName, lldpXdot1RemoteData=lldpXdot1RemoteData, sysSwitchTime=sysSwitchTime, lldpXdot1LocVlanId=lldpXdot1LocVlanId, qosDiffServType17=qosDiffServType17, companyGuestVLAN=companyGuestVLAN, ipifDuplicateIPDetected=ipifDuplicateIPDetected, sysCableDiagPair2FaultDistance=sysCableDiagPair2FaultDistance, aacServerRowStatus=aacServerRowStatus, aclL2VlanIdCheck=aclL2VlanIdCheck, eoamCriticalLinkEventState=eoamCriticalLinkEventState, eoamLoopbackStatsTable=eoamLoopbackStatsTable, sysLBDCtrlTable=sysLBDCtrlTable, cpuAclL2DstMac=cpuAclL2DstMac, lldpStatsRemTablesDeletes=lldpStatsRemTablesDeletes, sysBandwidthCtrlSettings=sysBandwidthCtrlSettings, companyQoSGroup=companyQoSGroup, aclL3IP4SrcAddr=aclL3IP4SrcAddr, sysCableDiagPair4FaultDistance=sysCableDiagPair4FaultDistance, ipv6DefaultRouteEntry=ipv6DefaultRouteEntry, rmonStatsOwner=rmonStatsOwner, statisticsInMcastPkts=statisticsInMcastPkts, dgs_1100_10ME_A1=dgs_1100_10ME_A1, ipv6AddressIpType=ipv6AddressIpType, portErrPortIndex=portErrPortIndex, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, lldpXdot1ConfigVlanNameTxEnable=lldpXdot1ConfigVlanNameTxEnable, qosTrafficClassTable=qosTrafficClassTable, sysTrafficSegmentation=sysTrafficSegmentation, pnacConfigPortControl=pnacConfigPortControl, syslogMsgTime=syslogMsgTime, eoamLinkMonitorTable=eoamLinkMonitorTable, eoamLoopbackStatsIndex=eoamLoopbackStatsIndex, snmpViewTreeType=snmpViewTreeType, aclL3IP4DSCP=aclL3IP4DSCP)
