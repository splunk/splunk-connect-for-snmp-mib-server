#
# PySNMP MIB module H3C-EOC-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-EOC-COMMON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:09:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
h3cHPEOCDownLoadCNUFWResult, = mibBuilder.importSymbols("H3C-HPEOC-MIB", "h3cHPEOCDownLoadCNUFWResult")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter32, ObjectIdentity, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Bits, TimeTicks, Integer32, MibIdentifier, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "ObjectIdentity", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Bits", "TimeTicks", "Integer32", "MibIdentifier", "Gauge32", "IpAddress")
DisplayString, TruthValue, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "MacAddress", "TextualConvention")
h3cEOCCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83))
if mibBuilder.loadTexts: h3cEOCCommon.setLastUpdated('200709111008Z')
if mibBuilder.loadTexts: h3cEOCCommon.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
h3cEOCCommonSysMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 1))
h3cEOCCommonSysScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 1, 1))
h3cEOCCommonSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCCommonSysVersion.setStatus('current')
h3cEOCCommonUpLinkMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCCommonUpLinkMacAddress.setStatus('current')
h3cEOCCommonCltMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 2))
h3cEOCCommonCltManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 2, 1), )
if mibBuilder.loadTexts: h3cEOCCommonCltManTable.setStatus('current')
h3cEOCCommonCltManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEOCCommonCltManEntry.setStatus('current')
h3cEOCCommonCltAutoAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCCommonCltAutoAuthorize.setStatus('current')
h3cEOCCommonCltMaxAllowToAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 2, 1, 1, 2), Integer32().clone(253)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCCommonCltMaxAllowToAccess.setStatus('current')
h3cEOCComCnuMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3))
h3cEOCComCnuScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1))
h3cEOCComCnuMaxDownBWMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuMaxDownBWMinVal.setStatus('current')
h3cEOCComCnuMaxDownBWMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuMaxDownBWMaxVal.setStatus('current')
h3cEOCComCnuSlaHighPriBWMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuSlaHighPriBWMinVal.setStatus('current')
h3cEOCComCnuSlaHighPriBWMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuSlaHighPriBWMaxVal.setStatus('current')
h3cEOCComCnuMaxUpBWMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuMaxUpBWMinVal.setStatus('current')
h3cEOCComCnuMaxUpBWMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuMaxUpBWMaxVal.setStatus('current')
h3cEOCComCnuAttenThrA = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuAttenThrA.setStatus('current')
h3cEOCComCnuAttenThrB = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuAttenThrB.setStatus('current')
h3cEOCComCnuRateDropThr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuRateDropThr.setStatus('current')
h3cEOCComCnuSysManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2), )
if mibBuilder.loadTexts: h3cEOCComCnuSysManTable.setStatus('current')
h3cEOCComCnuSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEOCComCnuSysManEntry.setStatus('current')
h3cEOCComCnuCableIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuCableIfindex.setStatus('current')
h3cEOCComCnuDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuDeviceType.setStatus('current')
h3cEOCComCnuDeviceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuDeviceAlias.setStatus('current')
h3cEOCComCnuDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuDescr.setStatus('current')
h3cEOCComCnuUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuUpTime.setStatus('current')
h3cEOCComCnuVLANType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vLANTrunk", 1), ("access", 2), ("hybrid", 3), ("fabric", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuVLANType.setStatus('current')
h3cEOCComCnuPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuPvid.setStatus('current')
h3cEOCComCnuVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuVlanTag.setStatus('current')
h3cEOCComCnuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuReset.setStatus('current')
h3cEOCComCnuDeregister = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deregister", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuDeregister.setStatus('current')
h3cEOCComCnuSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("running", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuSave.setStatus('current')
h3cEOCComCnuAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("notaccess", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuAccess.setStatus('current')
h3cEOCComCnuMacTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 3), )
if mibBuilder.loadTexts: h3cEOCComCnuMacTable.setStatus('current')
h3cEOCComCnuMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEOCComCnuMacEntry.setStatus('current')
h3cEOCComCnuMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 3, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEOCComCnuMacAddress.setStatus('current')
h3cEOCComCnuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEOCComCnuRowStatus.setStatus('current')
h3cEOCComCnuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4), )
if mibBuilder.loadTexts: h3cEOCComCnuInfoTable.setStatus('current')
h3cEOCComCnuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEOCComCnuInfoEntry.setStatus('current')
h3cEOCComCnuHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuHardwareVersion.setStatus('current')
h3cEOCComCnuPCBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuPCBVersion.setStatus('current')
h3cEOCComCnuLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("physicaldown", 1), ("linkdown", 2), ("linkup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuLinkState.setStatus('current')
h3cEOCComCnuAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuAttenuation.setStatus('current')
h3cEOCComCnuSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuSoftwareVersion.setStatus('current')
h3cEOCComCnuTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuTxRate.setStatus('current')
h3cEOCComCnuRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuRxRate.setStatus('current')
h3cEOCComCnuTxRateDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuTxRateDrop.setStatus('current')
h3cEOCComCnuRxRateDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuRxRateDrop.setStatus('current')
h3cEOCComCnuBandWidthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 5), )
if mibBuilder.loadTexts: h3cEOCComCnuBandWidthTable.setStatus('current')
h3cEOCComCnuBandWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEOCComCnuBandWidthEntry.setStatus('current')
h3cEOCComCnuMaxDownBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuMaxDownBW.setStatus('current')
h3cEOCComCnuSlaHighPriBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuSlaHighPriBW.setStatus('current')
h3cEOCComCnuMaxUpBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 3, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComCnuMaxUpBW.setStatus('current')
h3cEOCComUniMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4))
h3cEOCComUniManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1), )
if mibBuilder.loadTexts: h3cEOCComUniManTable.setStatus('current')
h3cEOCComUniManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EOC-COMMON-MIB", "h3cEOCUniIndex"))
if mibBuilder.loadTexts: h3cEOCComUniManEntry.setStatus('current')
h3cEOCUniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cEOCUniIndex.setStatus('current')
h3cEOCComUniDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComUniDescr.setStatus('current')
h3cEOCComUniStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniStatus.setStatus('current')
h3cEOCComUniSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100))).clone(namedValues=NamedValues(("auto", 1), ("s10M", 10), ("s100M", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniSpeed.setStatus('current')
h3cEOCComUniDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniDuplex.setStatus('current')
h3cEOCComUniCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComUniCurrentSpeed.setStatus('current')
h3cEOCComUniCurrentDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComUniCurrentDuplex.setStatus('current')
h3cEOCComUniMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi-ii", 1), ("mdi-x", 2), ("mdi-auto", 3))).clone('mdi-auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniMdi.setStatus('current')
h3cEOCComUniFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniFlowControl.setStatus('current')
h3cEOCComUniCountReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniCountReset.setStatus('current')
h3cEOCComUniAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniAlias.setStatus('current')
h3cEOCComUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 12), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComUniType.setStatus('current')
h3cEOCComUniVLANType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vLANTrunk", 1), ("access", 2), ("hybrid", 3), ("fabric", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniVLANType.setStatus('current')
h3cEOCComUniPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniPvid.setStatus('current')
h3cEOCComUniVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniVlanTag.setStatus('current')
h3cEOCComUniPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniPriority.setStatus('current')
h3cEOCComUniUpLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniUpLineRate.setStatus('current')
h3cEOCComUniDownLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniDownLineRate.setStatus('current')
h3cEOCComUniAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEOCComUniAdminStatus.setStatus('current')
h3cEOCComUniCountTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2), )
if mibBuilder.loadTexts: h3cEOCComUniCountTable.setStatus('current')
h3cEOCComUniCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EOC-COMMON-MIB", "h3cEOCUniIndex"))
if mibBuilder.loadTexts: h3cEOCComUniCountEntry.setStatus('current')
h3cEOCUniInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInPkts.setStatus('current')
h3cEOCUniInUPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInUPkts.setStatus('current')
h3cEOCUniInBPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInBPkts.setStatus('current')
h3cEOCUniInMPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInMPkts.setStatus('current')
h3cEOCUniInPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInPausePkts.setStatus('current')
h3cEOCUniInTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInTotalErrors.setStatus('current')
h3cEOCUniInCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInCRCErrs.setStatus('current')
h3cEOCUniInUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInUndersizePkts.setStatus('current')
h3cEOCUniInOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInOversizePkts.setStatus('current')
h3cEOCUniInErrorbyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInErrorbyOther.setStatus('current')
h3cEOCUniInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniInOctets.setStatus('current')
h3cEOCUniOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutPkts.setStatus('current')
h3cEOCUniOutUPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutUPkts.setStatus('current')
h3cEOCUniOutBPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutBPkts.setStatus('current')
h3cEOCUniOutMPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutMPkts.setStatus('current')
h3cEOCUniOutPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutPausePkts.setStatus('current')
h3cEOCUniOutTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutTotalErrors.setStatus('current')
h3cEOCUniOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutCollisions.setStatus('current')
h3cEOCUniOutDelayExceedDsds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutDelayExceedDsds.setStatus('current')
h3cEOCUniOutErrorbyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutErrorbyOther.setStatus('current')
h3cEOCUniOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutDroppedFrames.setStatus('current')
h3cEOCUniOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 4, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCUniOutOctets.setStatus('current')
h3cEOCCommonTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5))
h3cEOCTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0))
h3cEOCCnuRegExcessTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCCnuRegExcessTrap.setStatus('current')
h3cEOCCnuRegExcessRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCCnuRegExcessRecoverTrap.setStatus('current')
h3cEOCCnuRegSuccTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCCnuRegSuccTrap.setStatus('current')
h3cEOCCnuOffLineTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCCnuOffLineTrap.setStatus('current')
h3cEOCCnuLinkupTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCCnuLinkupTrap.setStatus('current')
h3cEOCOamDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCOamDisconnectTrap.setStatus('current')
h3cEOCOamDisconnectRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCOamDisconnectRecoverTrap.setStatus('current')
h3cEOCBandwidthNotEnoughTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCBandwidthNotEnoughTrap.setStatus('current')
h3cEOCCnuAttenuationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuAttenuation"))
if mibBuilder.loadTexts: h3cEOCCnuAttenuationTrap.setStatus('current')
h3cEOCCnuRegFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCCnuRegFailTrap.setStatus('current')
h3cEOCCLTCablePortErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 11)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCCLTCablePortErrorTrap.setStatus('current')
h3cEOCCLTCablePortErrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 12)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEOCCLTCablePortErrReTrap.setStatus('current')
h3cEOCCnuTxRateDropTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 13)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuTxRateDrop"))
if mibBuilder.loadTexts: h3cEOCCnuTxRateDropTrap.setStatus('current')
h3cEOCCnuTxRateDropRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 14)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuTxRateDrop"))
if mibBuilder.loadTexts: h3cEOCCnuTxRateDropRecoverTrap.setStatus('current')
h3cEOCCnuRxRateDropTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 15)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuRxRateDrop"))
if mibBuilder.loadTexts: h3cEOCCnuRxRateDropTrap.setStatus('current')
h3cEOCCnuRxRateDropRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 16)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuRxRateDrop"))
if mibBuilder.loadTexts: h3cEOCCnuRxRateDropRecoverTrap.setStatus('current')
h3cEOCCnuFWDownLoadErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 17)).setObjects(("H3C-HPEOC-MIB", "h3cHPEOCDownLoadCNUFWResult"))
if mibBuilder.loadTexts: h3cEOCCnuFWDownLoadErrTrap.setStatus('current')
h3cEOCCnuFWDownLoadErrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 18))
if mibBuilder.loadTexts: h3cEOCCnuFWDownLoadErrReTrap.setStatus('current')
h3cEOCCnuDeviceTypeErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 19)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuDeviceType"))
if mibBuilder.loadTexts: h3cEOCCnuDeviceTypeErrTrap.setStatus('current')
h3cEOCCnuDeviceTypeErrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 20)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"))
if mibBuilder.loadTexts: h3cEOCCnuDeviceTypeErrReTrap.setStatus('current')
h3cEOCCnuAutoUpdateErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 21)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"))
if mibBuilder.loadTexts: h3cEOCCnuAutoUpdateErrTrap.setStatus('current')
h3cEOCCnuAutoUpdateSuccTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 5, 0, 22)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EOC-COMMON-MIB", "h3cEOCComCnuMacAddress"))
if mibBuilder.loadTexts: h3cEOCCnuAutoUpdateSuccTrap.setStatus('current')
h3cEOCComOnLineCnuMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 6))
h3cEOCComCnuTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 6, 1), )
if mibBuilder.loadTexts: h3cEOCComCnuTypeTable.setStatus('current')
h3cEOCComCnuTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 6, 1, 1), ).setIndexNames((0, "H3C-EOC-COMMON-MIB", "h3cEOCComCnuTypeIdx"))
if mibBuilder.loadTexts: h3cEOCComCnuTypeEntry.setStatus('current')
h3cEOCComCnuTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cEOCComCnuTypeIdx.setStatus('current')
h3cEOCComCnuDescripton = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuDescripton.setStatus('current')
h3cEOCComCnuNumTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 6, 2), )
if mibBuilder.loadTexts: h3cEOCComCnuNumTable.setStatus('current')
h3cEOCComCnuNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EOC-COMMON-MIB", "h3cEOCComCnuTypeIdx"))
if mibBuilder.loadTexts: h3cEOCComCnuNumEntry.setStatus('current')
h3cEOCComCnuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 83, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEOCComCnuNumber.setStatus('current')
mibBuilder.exportSymbols("H3C-EOC-COMMON-MIB", h3cEOCUniInPausePkts=h3cEOCUniInPausePkts, h3cEOCComCnuReset=h3cEOCComCnuReset, h3cEOCCnuTxRateDropRecoverTrap=h3cEOCCnuTxRateDropRecoverTrap, h3cEOCComUniMdi=h3cEOCComUniMdi, h3cEOCUniInUndersizePkts=h3cEOCUniInUndersizePkts, h3cEOCCnuRxRateDropRecoverTrap=h3cEOCCnuRxRateDropRecoverTrap, h3cEOCComUniFlowControl=h3cEOCComUniFlowControl, h3cEOCCnuDeviceTypeErrTrap=h3cEOCCnuDeviceTypeErrTrap, h3cEOCCnuRxRateDropTrap=h3cEOCCnuRxRateDropTrap, h3cEOCCommonUpLinkMacAddress=h3cEOCCommonUpLinkMacAddress, h3cEOCComUniCountReset=h3cEOCComUniCountReset, h3cEOCUniOutErrorbyOther=h3cEOCUniOutErrorbyOther, h3cEOCComCnuAttenThrB=h3cEOCComCnuAttenThrB, h3cEOCCommonSysVersion=h3cEOCCommonSysVersion, h3cEOCComCnuNumEntry=h3cEOCComCnuNumEntry, h3cEOCCnuLinkupTrap=h3cEOCCnuLinkupTrap, h3cEOCComCnuTypeTable=h3cEOCComCnuTypeTable, h3cEOCComCnuAccess=h3cEOCComCnuAccess, h3cEOCCommonCltMaxAllowToAccess=h3cEOCCommonCltMaxAllowToAccess, h3cEOCCnuRegExcessRecoverTrap=h3cEOCCnuRegExcessRecoverTrap, h3cEOCComCnuAttenuation=h3cEOCComCnuAttenuation, h3cEOCComCnuRxRate=h3cEOCComCnuRxRate, h3cEOCComCnuVlanTag=h3cEOCComCnuVlanTag, h3cEOCComCnuTypeIdx=h3cEOCComCnuTypeIdx, h3cEOCComCnuSlaHighPriBW=h3cEOCComCnuSlaHighPriBW, h3cEOCComUniSpeed=h3cEOCComUniSpeed, h3cEOCComCnuSave=h3cEOCComCnuSave, h3cEOCCnuDeviceTypeErrReTrap=h3cEOCCnuDeviceTypeErrReTrap, h3cEOCUniInUPkts=h3cEOCUniInUPkts, h3cEOCCommonCltManEntry=h3cEOCCommonCltManEntry, h3cEOCCnuRegExcessTrap=h3cEOCCnuRegExcessTrap, h3cEOCCommonCltManTable=h3cEOCCommonCltManTable, h3cEOCCnuAutoUpdateErrTrap=h3cEOCCnuAutoUpdateErrTrap, PYSNMP_MODULE_ID=h3cEOCCommon, h3cEOCComUniPvid=h3cEOCComUniPvid, h3cEOCCnuAttenuationTrap=h3cEOCCnuAttenuationTrap, h3cEOCComCnuMaxUpBWMinVal=h3cEOCComCnuMaxUpBWMinVal, h3cEOCComUniStatus=h3cEOCComUniStatus, h3cEOCCommonSysScalarObjects=h3cEOCCommonSysScalarObjects, h3cEOCComCnuTxRateDrop=h3cEOCComCnuTxRateDrop, h3cEOCUniInPkts=h3cEOCUniInPkts, h3cEOCUniOutUPkts=h3cEOCUniOutUPkts, h3cEOCComCnuPCBVersion=h3cEOCComCnuPCBVersion, h3cEOCUniOutBPkts=h3cEOCUniOutBPkts, h3cEOCComUniUpLineRate=h3cEOCComUniUpLineRate, h3cEOCCnuRegSuccTrap=h3cEOCCnuRegSuccTrap, h3cEOCComCnuDeregister=h3cEOCComCnuDeregister, h3cEOCCnuAutoUpdateSuccTrap=h3cEOCCnuAutoUpdateSuccTrap, h3cEOCUniInOctets=h3cEOCUniInOctets, h3cEOCComCnuMacAddress=h3cEOCComCnuMacAddress, h3cEOCComUniManTable=h3cEOCComUniManTable, h3cEOCComCnuLinkState=h3cEOCComCnuLinkState, h3cEOCComUniDownLineRate=h3cEOCComUniDownLineRate, h3cEOCComCnuDeviceType=h3cEOCComCnuDeviceType, h3cEOCComUniVlanTag=h3cEOCComUniVlanTag, h3cEOCUniOutPausePkts=h3cEOCUniOutPausePkts, h3cEOCCnuTxRateDropTrap=h3cEOCCnuTxRateDropTrap, h3cEOCUniInErrorbyOther=h3cEOCUniInErrorbyOther, h3cEOCComCnuTypeEntry=h3cEOCComCnuTypeEntry, h3cEOCCommon=h3cEOCCommon, h3cEOCUniInBPkts=h3cEOCUniInBPkts, h3cEOCComCnuNumber=h3cEOCComCnuNumber, h3cEOCComCnuInfoTable=h3cEOCComCnuInfoTable, h3cEOCComCnuTxRate=h3cEOCComCnuTxRate, h3cEOCCommonCltMan=h3cEOCCommonCltMan, h3cEOCCnuRegFailTrap=h3cEOCCnuRegFailTrap, h3cEOCComCnuBandWidthEntry=h3cEOCComCnuBandWidthEntry, h3cEOCCommonTrap=h3cEOCCommonTrap, h3cEOCTrapPrefix=h3cEOCTrapPrefix, h3cEOCUniOutDroppedFrames=h3cEOCUniOutDroppedFrames, h3cEOCComUniCurrentSpeed=h3cEOCComUniCurrentSpeed, h3cEOCUniInTotalErrors=h3cEOCUniInTotalErrors, h3cEOCUniOutDelayExceedDsds=h3cEOCUniOutDelayExceedDsds, h3cEOCComUniAdminStatus=h3cEOCComUniAdminStatus, h3cEOCOamDisconnectRecoverTrap=h3cEOCOamDisconnectRecoverTrap, h3cEOCUniInMPkts=h3cEOCUniInMPkts, h3cEOCComCnuDeviceAlias=h3cEOCComCnuDeviceAlias, h3cEOCComOnLineCnuMan=h3cEOCComOnLineCnuMan, h3cEOCComCnuSoftwareVersion=h3cEOCComCnuSoftwareVersion, h3cEOCCLTCablePortErrReTrap=h3cEOCCLTCablePortErrReTrap, h3cEOCComCnuPvid=h3cEOCComCnuPvid, h3cEOCComCnuBandWidthTable=h3cEOCComCnuBandWidthTable, h3cEOCComCnuHardwareVersion=h3cEOCComCnuHardwareVersion, h3cEOCComUniType=h3cEOCComUniType, h3cEOCUniOutCollisions=h3cEOCUniOutCollisions, h3cEOCComCnuMaxDownBWMaxVal=h3cEOCComCnuMaxDownBWMaxVal, h3cEOCOamDisconnectTrap=h3cEOCOamDisconnectTrap, h3cEOCComCnuSlaHighPriBWMaxVal=h3cEOCComCnuSlaHighPriBWMaxVal, h3cEOCComCnuUpTime=h3cEOCComCnuUpTime, h3cEOCComCnuSysManEntry=h3cEOCComCnuSysManEntry, h3cEOCComCnuDescr=h3cEOCComCnuDescr, h3cEOCComCnuMaxDownBW=h3cEOCComCnuMaxDownBW, h3cEOCComUniMan=h3cEOCComUniMan, h3cEOCComCnuVLANType=h3cEOCComCnuVLANType, h3cEOCComCnuScalarObjects=h3cEOCComCnuScalarObjects, h3cEOCCommonCltAutoAuthorize=h3cEOCCommonCltAutoAuthorize, h3cEOCComCnuMacEntry=h3cEOCComCnuMacEntry, h3cEOCComUniManEntry=h3cEOCComUniManEntry, h3cEOCComUniCountTable=h3cEOCComUniCountTable, h3cEOCComCnuSysManTable=h3cEOCComCnuSysManTable, h3cEOCUniInOversizePkts=h3cEOCUniInOversizePkts, h3cEOCCommonSysMan=h3cEOCCommonSysMan, h3cEOCComCnuNumTable=h3cEOCComCnuNumTable, h3cEOCComCnuMaxUpBWMaxVal=h3cEOCComCnuMaxUpBWMaxVal, h3cEOCComCnuDescripton=h3cEOCComCnuDescripton, h3cEOCComUniCurrentDuplex=h3cEOCComUniCurrentDuplex, h3cEOCCLTCablePortErrorTrap=h3cEOCCLTCablePortErrorTrap, h3cEOCComUniPriority=h3cEOCComUniPriority, h3cEOCComCnuCableIfindex=h3cEOCComCnuCableIfindex, h3cEOCCnuFWDownLoadErrReTrap=h3cEOCCnuFWDownLoadErrReTrap, h3cEOCUniIndex=h3cEOCUniIndex, h3cEOCComCnuAttenThrA=h3cEOCComCnuAttenThrA, h3cEOCCnuOffLineTrap=h3cEOCCnuOffLineTrap, h3cEOCComUniVLANType=h3cEOCComUniVLANType, h3cEOCUniOutMPkts=h3cEOCUniOutMPkts, h3cEOCBandwidthNotEnoughTrap=h3cEOCBandwidthNotEnoughTrap, h3cEOCCnuFWDownLoadErrTrap=h3cEOCCnuFWDownLoadErrTrap, h3cEOCComUniDuplex=h3cEOCComUniDuplex, h3cEOCComUniCountEntry=h3cEOCComUniCountEntry, h3cEOCUniOutOctets=h3cEOCUniOutOctets, h3cEOCUniInCRCErrs=h3cEOCUniInCRCErrs, h3cEOCUniOutPkts=h3cEOCUniOutPkts, h3cEOCComUniAlias=h3cEOCComUniAlias, h3cEOCComCnuRowStatus=h3cEOCComCnuRowStatus, h3cEOCComCnuSlaHighPriBWMinVal=h3cEOCComCnuSlaHighPriBWMinVal, h3cEOCComCnuInfoEntry=h3cEOCComCnuInfoEntry, h3cEOCComCnuRateDropThr=h3cEOCComCnuRateDropThr, h3cEOCComUniDescr=h3cEOCComUniDescr, h3cEOCUniOutTotalErrors=h3cEOCUniOutTotalErrors, h3cEOCComCnuRxRateDrop=h3cEOCComCnuRxRateDrop, h3cEOCComCnuMan=h3cEOCComCnuMan, h3cEOCComCnuMaxDownBWMinVal=h3cEOCComCnuMaxDownBWMinVal, h3cEOCComCnuMaxUpBW=h3cEOCComCnuMaxUpBW, h3cEOCComCnuMacTable=h3cEOCComCnuMacTable)
