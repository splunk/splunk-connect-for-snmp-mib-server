#
# PySNMP MIB module ADTX-RAID-AVCL-S2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTX-RAID-AVCL-S2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:59:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adtx, avc = mibBuilder.importSymbols("ADTX-SMI-S2", "adtx", "avc")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Bits, Counter64, Gauge32, Counter32, iso, ObjectIdentity, NotificationType, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Bits", "Counter64", "Gauge32", "Counter32", "iso", "ObjectIdentity", "NotificationType", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
avcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1))
avcl.setRevisions(('2003-01-22 00:00',))
if mibBuilder.loadTexts: avcl.setLastUpdated('200305210000Z')
if mibBuilder.loadTexts: avcl.setOrganization('ADTX (Advanced Technology and Systems Co., Ltd.)')
class AvcString(DisplayString):
    pass

class AvcLongString(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 10000)

class AvcCounter(Counter32):
    pass

class AvcInteger(Integer32):
    pass

avclVersion = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 1), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclVersion.setStatus('current')
avclOS = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 2), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclOS.setStatus('current')
avclHost = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 3), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclHost.setStatus('current')
avclNumOfDevices = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 4), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclNumOfDevices.setStatus('current')
avclEventInfo = MibScalar((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 5), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclEventInfo.setStatus('current')
avclDeviceInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6), )
if mibBuilder.loadTexts: avclDeviceInformationTable.setStatus('current')
avclDeviceInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1), ).setIndexNames((0, "ADTX-RAID-AVCL-S2-MIB", "avclDeviceIndex"))
if mibBuilder.loadTexts: avclDeviceInformationEntry.setStatus('current')
avclDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 1), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceIndex.setStatus('current')
avclDeviceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 2), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceIP.setStatus('current')
avclDeviceSystemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 3), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSystemVersion.setStatus('current')
avclDeviceManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 4), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceManufacturer.setStatus('current')
avclDeviceProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 5), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceProductName.setStatus('current')
avclDeviceRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 6), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRevisionLevel.setStatus('current')
avclDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 7), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSerialNumber.setStatus('current')
avclDeviceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 8), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDate.setStatus('current')
avclDeviceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 9), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceTime.setStatus('current')
avclDeviceAssignedSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 10), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceAssignedSpare.setStatus('current')
avclDeviceInitiatorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 11), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceInitiatorMode.setStatus('current')
avclDeviceInstantCopyLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 12), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceInstantCopyLicense.setStatus('current')
avclDeviceMirroringLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 13), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceMirroringLicense.setStatus('current')
avclDeviceWWNInfoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 14), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceWWNInfoCount.setStatus('current')
avclDeviceWWNInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 15), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceWWNInfo.setStatus('current')
avclDeviceSurfaceSchedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 16), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSurfaceSchedMode.setStatus('current')
avclDeviceSurfaceSchedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 17), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSurfaceSchedTime.setStatus('current')
avclDeviceSurfaceVerifyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 18), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSurfaceVerifyDuration.setStatus('current')
avclDeviceICSourceLU = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 19), AvcInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICSourceLU.setStatus('current')
avclDeviceICTargetLU = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 20), AvcInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICTargetLU.setStatus('current')
avclDeviceICFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 21), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICFlag.setStatus('current')
avclDeviceICProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 22), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICProgress.setStatus('current')
avclDeviceICPairWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 23), AvcString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceICPairWWN.setStatus('current')
avclDeviceRegHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 24), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRegHostCount.setStatus('current')
avclDeviceRegHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 25), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRegHosts.setStatus('current')
avclDeviceLuToMirrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 26), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceLuToMirrorCount.setStatus('current')
avclDeviceLunsToMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 27), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceLunsToMirror.setStatus('current')
avclDeviceRaidGrpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 28), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpCount.setStatus('current')
avclDeviceRaidGrpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 29), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsState.setStatus('current')
avclDeviceRaidGrpsDriveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 30), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsDriveCount.setStatus('current')
avclDeviceRaidGrpsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 31), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsSize.setStatus('current')
avclDeviceRaidGrpsLuUnderSurfaceVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 32), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsLuUnderSurfaceVerify.setStatus('current')
avclDeviceRaidGrpsSurfaceVerifyProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 33), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsSurfaceVerifyProgress.setStatus('current')
avclDeviceRaidGrpsInitReconProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 34), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsInitReconProgress.setStatus('current')
avclDeviceRaidGrpsFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 35), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceRaidGrpsFreeSpace.setStatus('current')
avclDeviceSpareCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 36), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSpareCount.setStatus('current')
avclDeviceSparesState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 37), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSparesState.setStatus('current')
avclDeviceSparesRaidGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 38), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceSparesRaidGrpNumber.setStatus('current')
avclDeviceVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 39), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumeCount.setStatus('current')
avclDeviceVolumesState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 40), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesState.setStatus('current')
avclDeviceVolumesRaidGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 41), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesRaidGrpNumber.setStatus('current')
avclDeviceVolumesRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 42), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesRaidLevel.setStatus('current')
avclDeviceVolumesSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 43), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesSize.setStatus('current')
avclDeviceVolumesInitProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 44), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesInitProgress.setStatus('current')
avclDeviceVolumesNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 45), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceVolumesNickname.setStatus('current')
avclDeviceDriveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 46), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDriveCount.setStatus('current')
avclDeviceDrivesState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 47), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDrivesState.setStatus('current')
avclDeviceDrivesUsageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 48), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDrivesUsageType.setStatus('current')
avclDeviceDrivesRaidGrpOrSpareNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 49), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceDrivesRaidGrpOrSpareNumber.setStatus('current')
avclDeviceComponentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 50), AvcCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceComponentCount.setStatus('current')
avclDeviceComponentsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 51), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceComponentsType.setStatus('current')
avclDeviceComponentsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 52), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceComponentsState.setStatus('current')
avclDeviceComponentsInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 6, 1, 53), AvcLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avclDeviceComponentsInstanceNumber.setStatus('current')
avclEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 0))
if mibBuilder.loadTexts: avclEvents.setStatus('current')
daemonEvent = NotificationType((1, 3, 6, 1, 4, 1, 2653, 3, 1, 1, 0, 1)).setObjects(("ADTX-RAID-AVCL-S2-MIB", "avclEventInfo"))
if mibBuilder.loadTexts: daemonEvent.setStatus('current')
mibBuilder.exportSymbols("ADTX-RAID-AVCL-S2-MIB", avclDeviceAssignedSpare=avclDeviceAssignedSpare, avclDeviceVolumesRaidLevel=avclDeviceVolumesRaidLevel, avclDeviceSpareCount=avclDeviceSpareCount, avclDeviceVolumesNickname=avclDeviceVolumesNickname, avclDeviceIndex=avclDeviceIndex, avclOS=avclOS, avclDeviceSystemVersion=avclDeviceSystemVersion, avclDeviceWWNInfoCount=avclDeviceWWNInfoCount, avclDeviceICPairWWN=avclDeviceICPairWWN, avclDeviceRaidGrpsSize=avclDeviceRaidGrpsSize, avclDeviceSurfaceSchedMode=avclDeviceSurfaceSchedMode, avclDeviceSparesRaidGrpNumber=avclDeviceSparesRaidGrpNumber, avclDeviceVolumesState=avclDeviceVolumesState, avclDeviceVolumesSize=avclDeviceVolumesSize, avclDeviceComponentsType=avclDeviceComponentsType, AvcCounter=AvcCounter, avcl=avcl, avclDeviceTime=avclDeviceTime, avclDeviceRevisionLevel=avclDeviceRevisionLevel, avclDeviceLuToMirrorCount=avclDeviceLuToMirrorCount, avclDeviceSparesState=avclDeviceSparesState, avclDeviceVolumesRaidGrpNumber=avclDeviceVolumesRaidGrpNumber, avclDeviceVolumesInitProgress=avclDeviceVolumesInitProgress, avclDeviceDrivesUsageType=avclDeviceDrivesUsageType, avclDeviceDate=avclDeviceDate, avclDeviceRaidGrpsLuUnderSurfaceVerify=avclDeviceRaidGrpsLuUnderSurfaceVerify, avclDeviceComponentsState=avclDeviceComponentsState, avclDeviceDriveCount=avclDeviceDriveCount, avclDeviceICSourceLU=avclDeviceICSourceLU, avclDeviceRaidGrpsDriveCount=avclDeviceRaidGrpsDriveCount, avclDeviceWWNInfo=avclDeviceWWNInfo, daemonEvent=daemonEvent, AvcInteger=AvcInteger, avclDeviceProductName=avclDeviceProductName, avclDeviceSurfaceVerifyDuration=avclDeviceSurfaceVerifyDuration, avclDeviceMirroringLicense=avclDeviceMirroringLicense, avclDeviceRaidGrpsState=avclDeviceRaidGrpsState, avclDeviceVolumeCount=avclDeviceVolumeCount, avclVersion=avclVersion, avclDeviceInformationTable=avclDeviceInformationTable, avclDeviceLunsToMirror=avclDeviceLunsToMirror, avclDeviceRaidGrpCount=avclDeviceRaidGrpCount, avclDeviceICFlag=avclDeviceICFlag, avclDeviceDrivesRaidGrpOrSpareNumber=avclDeviceDrivesRaidGrpOrSpareNumber, avclDeviceInstantCopyLicense=avclDeviceInstantCopyLicense, avclDeviceSerialNumber=avclDeviceSerialNumber, avclDeviceRaidGrpsFreeSpace=avclDeviceRaidGrpsFreeSpace, AvcString=AvcString, avclEvents=avclEvents, avclDeviceICProgress=avclDeviceICProgress, avclDeviceRegHostCount=avclDeviceRegHostCount, avclDeviceComponentsInstanceNumber=avclDeviceComponentsInstanceNumber, avclHost=avclHost, avclDeviceIP=avclDeviceIP, avclDeviceICTargetLU=avclDeviceICTargetLU, avclDeviceRegHosts=avclDeviceRegHosts, avclNumOfDevices=avclNumOfDevices, avclDeviceRaidGrpsSurfaceVerifyProgress=avclDeviceRaidGrpsSurfaceVerifyProgress, AvcLongString=AvcLongString, avclDeviceDrivesState=avclDeviceDrivesState, avclDeviceSurfaceSchedTime=avclDeviceSurfaceSchedTime, PYSNMP_MODULE_ID=avcl, avclDeviceInformationEntry=avclDeviceInformationEntry, avclDeviceInitiatorMode=avclDeviceInitiatorMode, avclDeviceManufacturer=avclDeviceManufacturer, avclDeviceComponentCount=avclDeviceComponentCount, avclDeviceRaidGrpsInitReconProgress=avclDeviceRaidGrpsInitReconProgress, avclEventInfo=avclEventInfo)
