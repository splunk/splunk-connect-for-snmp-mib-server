#
# PySNMP MIB module Nortel-Magellan-Passport-VoiceMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-VoiceMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
RowStatus, Counter32, InterfaceIndex, PassportCounter64, DisplayString, StorageType, Integer32, Gauge32, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowStatus", "Counter32", "InterfaceIndex", "PassportCounter64", "DisplayString", "StorageType", "Integer32", "Gauge32", "Unsigned32")
AsciiString, EnterpriseDateAndTime, NonReplicated, HexString, FixedPoint1, Link = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiString", "EnterpriseDateAndTime", "NonReplicated", "HexString", "FixedPoint1", "Link")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Bits, NotificationType, Integer32, Gauge32, ModuleIdentity, ObjectIdentity, Unsigned32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Bits", "NotificationType", "Integer32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
voiceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49))
vs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80))
vsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 1), )
if mibBuilder.loadTexts: vsRowStatusTable.setStatus('mandatory')
vsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"))
if mibBuilder.loadTexts: vsRowStatusEntry.setStatus('mandatory')
vsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsRowStatus.setStatus('mandatory')
vsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsComponentName.setStatus('mandatory')
vsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsStorageType.setStatus('mandatory')
vsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: vsIndex.setStatus('mandatory')
vsCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 10), )
if mibBuilder.loadTexts: vsCidDataTable.setStatus('mandatory')
vsCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"))
if mibBuilder.loadTexts: vsCidDataEntry.setStatus('mandatory')
vsCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsCustomerIdentifier.setStatus('mandatory')
vsIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 11), )
if mibBuilder.loadTexts: vsIfEntryTable.setStatus('mandatory')
vsIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"))
if mibBuilder.loadTexts: vsIfEntryEntry.setStatus('mandatory')
vsIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsIfAdminStatus.setStatus('mandatory')
vsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIfIndex.setStatus('mandatory')
vsOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 12), )
if mibBuilder.loadTexts: vsOperStatusTable.setStatus('mandatory')
vsOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"))
if mibBuilder.loadTexts: vsOperStatusEntry.setStatus('mandatory')
vsSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsSnmpOperStatus.setStatus('mandatory')
vsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13), )
if mibBuilder.loadTexts: vsStateTable.setStatus('mandatory')
vsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"))
if mibBuilder.loadTexts: vsStateEntry.setStatus('mandatory')
vsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsAdminState.setStatus('mandatory')
vsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsOperationalState.setStatus('mandatory')
vsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsUsageState.setStatus('mandatory')
vsAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsAvailabilityStatus.setStatus('mandatory')
vsProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsProceduralStatus.setStatus('mandatory')
vsControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsControlStatus.setStatus('mandatory')
vsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsAlarmStatus.setStatus('mandatory')
vsStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsStandbyStatus.setStatus('mandatory')
vsUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsUnknownStatus.setStatus('mandatory')
vsOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 15), )
if mibBuilder.loadTexts: vsOperationalTable.setStatus('mandatory')
vsOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"))
if mibBuilder.loadTexts: vsOperationalEntry.setStatus('mandatory')
vsServiceFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsServiceFailureReason.setStatus('mandatory')
vsFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2))
vsFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 1), )
if mibBuilder.loadTexts: vsFramerRowStatusTable.setStatus('mandatory')
vsFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"))
if mibBuilder.loadTexts: vsFramerRowStatusEntry.setStatus('mandatory')
vsFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerRowStatus.setStatus('mandatory')
vsFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerComponentName.setStatus('mandatory')
vsFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerStorageType.setStatus('mandatory')
vsFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsFramerIndex.setStatus('mandatory')
vsFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 10), )
if mibBuilder.loadTexts: vsFramerProvTable.setStatus('mandatory')
vsFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"))
if mibBuilder.loadTexts: vsFramerProvEntry.setStatus('mandatory')
vsFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerInterfaceName.setStatus('mandatory')
vsFramerCoderTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12), )
if mibBuilder.loadTexts: vsFramerCoderTable.setStatus('mandatory')
vsFramerCoderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"))
if mibBuilder.loadTexts: vsFramerCoderEntry.setStatus('mandatory')
vsFramerMaxVoiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2), ("n16", 3))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerMaxVoiceBitRate.setStatus('mandatory')
vsFramerMinVoiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2), ("n16", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerMinVoiceBitRate.setStatus('mandatory')
vsFramerMaxModemBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2), ("n16", 3))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerMaxModemBitRate.setStatus('mandatory')
vsFramerMinModemBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2), ("n16", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerMinModemBitRate.setStatus('mandatory')
vsFramerAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("minus6", 0), ("minus4", 1), ("minus2", 2), ("n0", 3), ("n2", 4), ("n4", 5), ("n6", 6), ("minus12", 7), ("minus11", 8), ("minus10", 9), ("minus9", 10), ("minus8", 11), ("minus7", 12), ("minus5", 13), ("minus3", 14), ("minus1", 15), ("n1", 16), ("n3", 17), ("n5", 18), ("n7", 19), ("n8", 20), ("n9", 21), ("n10", 22), ("n11", 23), ("n12", 24))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerAudioGain.setStatus('obsolete')
vsFramerSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4), ("casIdleCode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerSilenceSuppression.setStatus('mandatory')
vsFramerEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerEchoCancellation.setStatus('mandatory')
vsFramerALawConversion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerALawConversion.setStatus('mandatory')
vsFramerVoiceEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("g711G726", 0), ("g728at16", 1), ("g729at8", 2))).clone('g711G726')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerVoiceEncoding.setStatus('mandatory')
vsFramerFaxEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("g711G726", 0), ("faxRelayOnly", 1), ("faxRelayG711G726", 2), ("useVoiceEncoding", 3))).clone('g711G726')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerFaxEncoding.setStatus('mandatory')
vsFramerTandemPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerTandemPassThrough.setStatus('mandatory')
vsFramerInsertedOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 15, 22, 30, 35, 40, 45, 50, 75, 100, 125, 150))).clone(namedValues=NamedValues(("default", 0), ("n5", 5), ("n15", 15), ("n22", 22), ("n30", 30), ("n35", 35), ("n40", 40), ("n45", 45), ("n50", 50), ("n75", 75), ("n100", 100), ("n125", 125), ("n150", 150))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerInsertedOutputDelay.setStatus('mandatory')
vsFramerEgressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerEgressAudioGain.setStatus('obsolete')
vsFramerFaxIdleSuppressionG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerFaxIdleSuppressionG711G726.setStatus('mandatory')
vsFramerEndOfCallPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("standard", 0), ("n01", 1), ("n02", 2), ("n03", 3), ("n04", 4), ("n05", 5), ("n06", 6), ("n07", 7), ("n08", 8), ("n09", 9), ("n0a", 10), ("n0b", 11), ("n0c", 12), ("n0d", 13), ("n0e", 14), ("n0f", 15), ("n10", 16), ("n11", 17), ("n12", 18), ("n13", 19), ("n14", 20), ("n15", 21), ("n16", 22), ("n17", 23), ("n18", 24), ("n19", 25), ("n1a", 26), ("n1b", 27), ("n1c", 28), ("n1d", 29), ("n1e", 30), ("n1f", 31), ("n20", 32), ("n21", 33), ("n22", 34), ("n23", 35), ("n24", 36), ("n25", 37), ("n26", 38), ("n27", 39), ("n28", 40), ("n29", 41), ("n2a", 42), ("n2b", 43), ("n2c", 44), ("n2d", 45), ("n2e", 46), ("n2f", 47), ("n30", 48), ("n31", 49), ("n32", 50), ("n33", 51), ("n34", 52), ("n35", 53), ("n36", 54), ("n37", 55), ("n38", 56), ("n39", 57), ("n3a", 58), ("n3b", 59), ("n3c", 60), ("n3d", 61), ("n3e", 62), ("n3f", 63), ("n40", 64), ("n41", 65), ("n42", 66), ("n43", 67), ("n44", 68), ("n45", 69), ("n46", 70), ("n47", 71), ("n48", 72), ("n49", 73), ("n4a", 74), ("n4b", 75), ("n4c", 76), ("n4d", 77), ("n4e", 78), ("n4f", 79), ("n50", 80), ("n51", 81), ("n52", 82), ("n53", 83), ("n54", 84), ("n55", 85), ("n56", 86), ("n57", 87), ("n58", 88), ("n59", 89), ("n5a", 90), ("n5b", 91), ("n5c", 92), ("n5d", 93), ("n5e", 94), ("n5f", 95), ("n60", 96), ("n61", 97), ("n62", 98), ("n63", 99), ("n64", 100), ("n65", 101), ("n66", 102), ("n67", 103), ("n68", 104), ("n69", 105), ("n6a", 106), ("n6b", 107), ("n6c", 108), ("n6d", 109), ("n6e", 110), ("n6f", 111), ("n70", 112), ("n71", 113), ("n72", 114), ("n73", 115), ("n74", 116), ("n75", 117), ("n76", 118), ("n77", 119), ("n78", 120), ("n79", 121), ("n7a", 122), ("n7b", 123), ("n7c", 124), ("n7d", 125), ("n7e", 126), ("n7f", 127), ("n80", 128), ("n81", 129), ("n82", 130), ("n83", 131), ("n84", 132), ("n85", 133), ("n86", 134), ("n87", 135), ("n88", 136), ("n89", 137), ("n8a", 138), ("n8b", 139), ("n8c", 140), ("n8d", 141), ("n8e", 142), ("n8f", 143), ("n90", 144), ("n91", 145), ("n92", 146), ("n93", 147), ("n94", 148), ("n95", 149), ("n96", 150), ("n97", 151), ("n98", 152), ("n99", 153), ("n9a", 154), ("n9b", 155), ("n9c", 156), ("n9d", 157), ("n9e", 158), ("n9f", 159), ("a0", 160), ("a1", 161), ("a2", 162), ("a3", 163), ("a4", 164), ("a5", 165), ("a6", 166), ("a7", 167), ("a8", 168), ("a9", 169), ("aa", 170), ("ab", 171), ("ac", 172), ("ad", 173), ("ae", 174), ("af", 175), ("b0", 176), ("b1", 177), ("b2", 178), ("b3", 179), ("b4", 180), ("b5", 181), ("b6", 182), ("b7", 183), ("b8", 184), ("b9", 185), ("ba", 186), ("bb", 187), ("bc", 188), ("bd", 189), ("be", 190), ("bf", 191), ("c0", 192), ("c1", 193), ("c2", 194), ("c3", 195), ("c4", 196), ("c5", 197), ("c6", 198), ("c7", 199), ("c8", 200), ("c9", 201), ("ca", 202), ("cb", 203), ("cc", 204), ("cd", 205), ("ce", 206), ("cf", 207), ("d0", 208), ("d1", 209), ("d2", 210), ("d3", 211), ("d4", 212), ("d5", 213), ("d6", 214), ("d7", 215), ("d8", 216), ("d9", 217), ("da", 218), ("db", 219), ("dc", 220), ("dd", 221), ("de", 222), ("df", 223), ("e0", 224), ("e1", 225), ("e2", 226), ("e3", 227), ("e4", 228), ("e5", 229), ("e6", 230), ("e7", 231), ("e8", 232), ("e9", 233), ("ea", 234), ("eb", 235), ("ec", 236), ("ed", 237), ("ee", 238), ("ef", 239), ("f0", 240), ("f1", 241), ("f2", 242), ("f3", 243), ("f4", 244), ("f5", 245), ("f6", 246), ("f7", 247), ("f8", 248), ("f9", 249), ("fa", 250), ("fb", 251), ("fc", 252), ("fd", 253), ("fe", 254)) + NamedValues(("ff", 255))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerEndOfCallPattern.setStatus('mandatory')
vsFramerIngressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerIngressAudioGain.setStatus('mandatory')
vsFramerEgressGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("minus6", 0), ("minus4", 1), ("minus2", 2), ("n0", 3), ("n2", 4), ("n4", 5), ("n6", 6), ("minus12", 7), ("minus11", 8), ("minus10", 9), ("minus9", 10), ("minus8", 11), ("minus7", 12), ("minus5", 13), ("minus3", 14), ("minus1", 15), ("n1", 16), ("n3", 17), ("n5", 18), ("n7", 19), ("n8", 20), ("n9", 21), ("n10", 22), ("n11", 23), ("n12", 24))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerEgressGain.setStatus('mandatory')
vsFramerComfortNoiseCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-78, -78), ValueRangeConstraint(-65, -65), ValueRangeConstraint(-60, -60), ValueRangeConstraint(-54, -54), ValueRangeConstraint(-52, -52), ValueRangeConstraint(-50, -50), ValueRangeConstraint(-48, -48), ValueRangeConstraint(-46, -46), ValueRangeConstraint(-44, -44), ValueRangeConstraint(-42, -42), ValueRangeConstraint(-40, -40), )).clone(-40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerComfortNoiseCap.setStatus('mandatory')
vsFramerEchoTailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), )).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerEchoTailDelay.setStatus('mandatory')
vsFramerEchoReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 3), ValueRangeConstraint(6, 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerEchoReturnLoss.setStatus('mandatory')
vsFramerDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerDtmfRegeneration.setStatus('mandatory')
vsFramerSpeechHangoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerSpeechHangoverTime.setStatus('mandatory')
vsFramerFaxHangoverTimeG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 20000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerFaxHangoverTimeG711G726.setStatus('mandatory')
vsFramerModemFaxSpeechDiscrim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerModemFaxSpeechDiscrim.setStatus('mandatory')
vsFramerV17EncodedAsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerV17EncodedAsG711G726.setStatus('mandatory')
vsFramerEcanBypassMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("g164", 0), ("g165", 1), ("never", 2))).clone('g165')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerEcanBypassMode.setStatus('mandatory')
vsFramerMaxFaxRelayRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 12, 1, 41), FixedPoint1().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(24, 24), ValueRangeConstraint(48, 48), ValueRangeConstraint(72, 72), ValueRangeConstraint(96, 96), ValueRangeConstraint(120, 120), ValueRangeConstraint(144, 144), )).clone(144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerMaxFaxRelayRate.setStatus('mandatory')
vsFramerSignalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13), )
if mibBuilder.loadTexts: vsFramerSignalTable.setStatus('mandatory')
vsFramerSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"))
if mibBuilder.loadTexts: vsFramerSignalEntry.setStatus('mandatory')
vsFramerTransmitBusyYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerTransmitBusyYellow.setStatus('mandatory')
vsFramerTransportSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerTransportSignalling.setStatus('obsolete')
vsFramerInterpretSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerInterpretSignalling.setStatus('obsolete')
vsFramerInvertBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerInvertBits.setStatus('mandatory')
vsFramerSignalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("a", 0), ("aB", 1), ("aBCD", 2))).clone('a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerSignalBits.setStatus('mandatory')
vsFramerTransmitCasYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerTransmitCasYellow.setStatus('mandatory')
vsFramerCasSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("transparent", 1), ("interpret", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerCasSignalling.setStatus('mandatory')
vsFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 14), )
if mibBuilder.loadTexts: vsFramerStateTable.setStatus('mandatory')
vsFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"))
if mibBuilder.loadTexts: vsFramerStateEntry.setStatus('mandatory')
vsFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerAdminState.setStatus('mandatory')
vsFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerOperationalState.setStatus('mandatory')
vsFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerUsageState.setStatus('mandatory')
vsFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15), )
if mibBuilder.loadTexts: vsFramerStatsTable.setStatus('mandatory')
vsFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"))
if mibBuilder.loadTexts: vsFramerStatsEntry.setStatus('mandatory')
vsFramerTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerTotalCells.setStatus('mandatory')
vsFramerAudioCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerAudioCells.setStatus('mandatory')
vsFramerSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerSilenceCells.setStatus('mandatory')
vsFramerModemCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerModemCells.setStatus('obsolete')
vsFramerCurrentEncodingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerCurrentEncodingRate.setStatus('obsolete')
vsFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerLrcErrors.setStatus('mandatory')
vsFramerFrmLostInNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerFrmLostInNetwork.setStatus('mandatory')
vsFramerFrmUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerFrmUnderRuns.setStatus('mandatory')
vsFramerFrmDumped = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerFrmDumped.setStatus('mandatory')
vsFramerModemSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerModemSilenceCells.setStatus('obsolete')
vsFramerTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("rejected", 1), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerTptStatus.setStatus('obsolete')
vsFramerCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerCurrentEncoding.setStatus('obsolete')
vsFramerRecentIngressLineSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 29), HexString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerRecentIngressLineSamples.setStatus('obsolete')
vsFramerSentMinVoiceG711G726Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2), ("n16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerSentMinVoiceG711G726Rate.setStatus('obsolete')
vsFramerSentMinModemFaxG711G726Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2), ("n16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerSentMinModemFaxG711G726Rate.setStatus('obsolete')
vsFramerSentFaxIdleSuppressionG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerSentFaxIdleSuppressionG711G726.setStatus('obsolete')
vsFramerSentSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4), ("casIdleCode", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerSentSilenceSuppression.setStatus('obsolete')
vsFramerFaxRelayCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerFaxRelayCells.setStatus('mandatory')
vsFramerModemFaxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerModemFaxCells.setStatus('mandatory')
vsFramerFaxIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 15, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerFaxIdleCells.setStatus('mandatory')
vsFramerNegTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 16), )
if mibBuilder.loadTexts: vsFramerNegTable.setStatus('mandatory')
vsFramerNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"))
if mibBuilder.loadTexts: vsFramerNegEntry.setStatus('mandatory')
vsFramerNegotiatedIgSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4), ("casIdleCode", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerNegotiatedIgSilenceSuppression.setStatus('mandatory')
vsFramerNegotiatedIgFisG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerNegotiatedIgFisG711G726.setStatus('mandatory')
vsFramerNegotiatedDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerNegotiatedDtmfRegeneration.setStatus('mandatory')
vsFramerNegotiatedV17AsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerNegotiatedV17AsG711G726.setStatus('mandatory')
vsFramerNegotiatedTandemPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerNegotiatedTandemPassThrough.setStatus('mandatory')
vsFramerOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 17), )
if mibBuilder.loadTexts: vsFramerOperTable.setStatus('mandatory')
vsFramerOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"))
if mibBuilder.loadTexts: vsFramerOperEntry.setStatus('mandatory')
vsFramerOpCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerOpCurrentEncoding.setStatus('mandatory')
vsFramerCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerCurrentRate.setStatus('mandatory')
vsFramerOpTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerOpTptStatus.setStatus('mandatory')
vsFramerOpRecentIngressLineSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 17, 1, 4), HexString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerOpRecentIngressLineSamples.setStatus('mandatory')
vsFramerIdleCodeTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 204), )
if mibBuilder.loadTexts: vsFramerIdleCodeTable.setStatus('mandatory')
vsFramerIdleCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 204, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIdleCodeIndex"))
if mibBuilder.loadTexts: vsFramerIdleCodeEntry.setStatus('mandatory')
vsFramerIdleCodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 204, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3))))
if mibBuilder.loadTexts: vsFramerIdleCodeIndex.setStatus('mandatory')
vsFramerIdleCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 204, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerIdleCodeValue.setStatus('mandatory')
vsFramerSeizeCodeTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 205), )
if mibBuilder.loadTexts: vsFramerSeizeCodeTable.setStatus('mandatory')
vsFramerSeizeCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 205, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerSeizeCodeIndex"))
if mibBuilder.loadTexts: vsFramerSeizeCodeEntry.setStatus('mandatory')
vsFramerSeizeCodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 205, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3))))
if mibBuilder.loadTexts: vsFramerSeizeCodeIndex.setStatus('mandatory')
vsFramerSeizeCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 205, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsFramerSeizeCodeValue.setStatus('mandatory')
vsFramerFrmToNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 206), )
if mibBuilder.loadTexts: vsFramerFrmToNetworkTable.setStatus('mandatory')
vsFramerFrmToNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 206, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerFrmToNetworkIndex"))
if mibBuilder.loadTexts: vsFramerFrmToNetworkEntry.setStatus('mandatory')
vsFramerFrmToNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 206, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: vsFramerFrmToNetworkIndex.setStatus('mandatory')
vsFramerFrmToNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 206, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerFrmToNetworkValue.setStatus('mandatory')
vsFramerNEncodingTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 438), )
if mibBuilder.loadTexts: vsFramerNEncodingTable.setStatus('mandatory')
vsFramerNEncodingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 438, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerNEncodingIndex"))
if mibBuilder.loadTexts: vsFramerNEncodingEntry.setStatus('mandatory')
vsFramerNEncodingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 438, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: vsFramerNEncodingIndex.setStatus('mandatory')
vsFramerNEncodingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 438, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 31, 64, 68, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g726", 4), ("g711", 5), ("g711G726", 31), ("v29V27Relay", 64), ("v17V29V27Relay", 68), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerNEncodingValue.setStatus('mandatory')
vsFramerNRatesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 439), )
if mibBuilder.loadTexts: vsFramerNRatesTable.setStatus('mandatory')
vsFramerNRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 439, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerNRatesTrafficIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerNRatesRateIndex"))
if mibBuilder.loadTexts: vsFramerNRatesEntry.setStatus('mandatory')
vsFramerNRatesTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 439, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: vsFramerNRatesTrafficIndex.setStatus('mandatory')
vsFramerNRatesRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 439, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("min", 0), ("max", 1))))
if mibBuilder.loadTexts: vsFramerNRatesRateIndex.setStatus('mandatory')
vsFramerNRatesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 439, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("n00", 0), ("n03", 1), ("n12", 2), ("n24", 3), ("n48", 4), ("n72", 5), ("n96", 6), ("n120", 7), ("n144", 8), ("n80", 66), ("n160", 67), ("n240", 68), ("n320", 69), ("n640", 70)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerNRatesValue.setStatus('mandatory')
vsFramerVfpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 5))
vsFramerVfpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 5, 1), )
if mibBuilder.loadTexts: vsFramerVfpDebugRowStatusTable.setStatus('mandatory')
vsFramerVfpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerVfpDebugIndex"))
if mibBuilder.loadTexts: vsFramerVfpDebugRowStatusEntry.setStatus('mandatory')
vsFramerVfpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerVfpDebugRowStatus.setStatus('mandatory')
vsFramerVfpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerVfpDebugComponentName.setStatus('mandatory')
vsFramerVfpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerVfpDebugStorageType.setStatus('mandatory')
vsFramerVfpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsFramerVfpDebugIndex.setStatus('mandatory')
vsFramerMvpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 6))
vsFramerMvpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 6, 1), )
if mibBuilder.loadTexts: vsFramerMvpDebugRowStatusTable.setStatus('mandatory')
vsFramerMvpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerMvpDebugIndex"))
if mibBuilder.loadTexts: vsFramerMvpDebugRowStatusEntry.setStatus('mandatory')
vsFramerMvpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerMvpDebugRowStatus.setStatus('mandatory')
vsFramerMvpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerMvpDebugComponentName.setStatus('mandatory')
vsFramerMvpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerMvpDebugStorageType.setStatus('mandatory')
vsFramerMvpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsFramerMvpDebugIndex.setStatus('mandatory')
vsFramerPcmCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 7))
vsFramerPcmCaptureRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 7, 1), )
if mibBuilder.loadTexts: vsFramerPcmCaptureRowStatusTable.setStatus('mandatory')
vsFramerPcmCaptureRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsFramerPcmCaptureIndex"))
if mibBuilder.loadTexts: vsFramerPcmCaptureRowStatusEntry.setStatus('mandatory')
vsFramerPcmCaptureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerPcmCaptureRowStatus.setStatus('mandatory')
vsFramerPcmCaptureComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerPcmCaptureComponentName.setStatus('mandatory')
vsFramerPcmCaptureStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFramerPcmCaptureStorageType.setStatus('mandatory')
vsFramerPcmCaptureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 2, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsFramerPcmCaptureIndex.setStatus('mandatory')
vsPlc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3))
vsPlcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 1), )
if mibBuilder.loadTexts: vsPlcRowStatusTable.setStatus('mandatory')
vsPlcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsPlcIndex"))
if mibBuilder.loadTexts: vsPlcRowStatusEntry.setStatus('mandatory')
vsPlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPlcRowStatus.setStatus('mandatory')
vsPlcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPlcComponentName.setStatus('mandatory')
vsPlcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPlcStorageType.setStatus('mandatory')
vsPlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsPlcIndex.setStatus('mandatory')
vsPlcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10), )
if mibBuilder.loadTexts: vsPlcProvTable.setStatus('mandatory')
vsPlcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsPlcIndex"))
if mibBuilder.loadTexts: vsPlcProvEntry.setStatus('mandatory')
vsPlcRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcRemoteName.setStatus('mandatory')
vsPlcSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcSetupPriority.setStatus('mandatory')
vsPlcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcHoldingPriority.setStatus('mandatory')
vsPlcRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000)).clone(32000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcRequiredTxBandwidth.setStatus('mandatory')
vsPlcRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000)).clone(32000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcRequiredRxBandwidth.setStatus('mandatory')
vsPlcRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('voice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcRequiredTrafficType.setStatus('mandatory')
vsPlcPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcPermittedTrunkTypes.setStatus('mandatory')
vsPlcRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcRequiredSecurity.setStatus('mandatory')
vsPlcRequiredCustomerParm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcRequiredCustomerParm.setStatus('mandatory')
vsPlcPathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcPathAttributeToMinimize.setStatus('mandatory')
vsPlcMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcMaximumAcceptableCost.setStatus('mandatory')
vsPlcMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcMaximumAcceptableDelay.setStatus('mandatory')
vsPlcEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcEmissionPriority.setStatus('mandatory')
vsPlcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcDiscardPriority.setStatus('mandatory')
vsPlcPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcPathType.setStatus('mandatory')
vsPlcPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1))).clone('reRoutePath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcPathFailureAction.setStatus('mandatory')
vsPlcBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcBumpPreference.setStatus('mandatory')
vsPlcOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcOptimization.setStatus('mandatory')
vsPlcMpathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 207), )
if mibBuilder.loadTexts: vsPlcMpathTable.setStatus('mandatory')
vsPlcMpathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 207, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsPlcIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsPlcMpathIndex"))
if mibBuilder.loadTexts: vsPlcMpathEntry.setStatus('mandatory')
vsPlcMpathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 207, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: vsPlcMpathIndex.setStatus('mandatory')
vsPlcMpathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 3, 207, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsPlcMpathValue.setStatus('mandatory')
vsLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4))
vsLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 1), )
if mibBuilder.loadTexts: vsLCoRowStatusTable.setStatus('mandatory')
vsLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsLCoIndex"))
if mibBuilder.loadTexts: vsLCoRowStatusEntry.setStatus('mandatory')
vsLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoRowStatus.setStatus('mandatory')
vsLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoComponentName.setStatus('mandatory')
vsLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoStorageType.setStatus('mandatory')
vsLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsLCoIndex.setStatus('mandatory')
vsLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10), )
if mibBuilder.loadTexts: vsLCoPathDataTable.setStatus('mandatory')
vsLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsLCoIndex"))
if mibBuilder.loadTexts: vsLCoPathDataEntry.setStatus('mandatory')
vsLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoState.setStatus('mandatory')
vsLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsLCoOverrideRemoteName.setStatus('mandatory')
vsLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoEnd.setStatus('mandatory')
vsLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoCostMetric.setStatus('mandatory')
vsLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoDelayMetric.setStatus('mandatory')
vsLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoRoundTripDelay.setStatus('mandatory')
vsLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoSetupPriority.setStatus('mandatory')
vsLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoHoldingPriority.setStatus('mandatory')
vsLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoRequiredTxBandwidth.setStatus('mandatory')
vsLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoRequiredRxBandwidth.setStatus('mandatory')
vsLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoRequiredTrafficType.setStatus('mandatory')
vsLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoPermittedTrunkTypes.setStatus('mandatory')
vsLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoRequiredSecurity.setStatus('mandatory')
vsLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoRequiredCustomerParameter.setStatus('mandatory')
vsLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoEmissionPriority.setStatus('mandatory')
vsLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoDiscardPriority.setStatus('mandatory')
vsLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoPathType.setStatus('mandatory')
vsLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoRetryCount.setStatus('mandatory')
vsLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoPathFailureCount.setStatus('mandatory')
vsLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoReasonForNoRoute.setStatus('mandatory')
vsLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoLastTearDownReason.setStatus('mandatory')
vsLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoPathFailureAction.setStatus('mandatory')
vsLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoBumpPreference.setStatus('mandatory')
vsLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoOptimization.setStatus('mandatory')
vsLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoPathUpDateTime.setStatus('mandatory')
vsLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 11), )
if mibBuilder.loadTexts: vsLCoStatsTable.setStatus('mandatory')
vsLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsLCoIndex"))
if mibBuilder.loadTexts: vsLCoStatsEntry.setStatus('mandatory')
vsLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoPktsToNetwork.setStatus('mandatory')
vsLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoBytesToNetwork.setStatus('mandatory')
vsLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoPktsFromNetwork.setStatus('mandatory')
vsLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoBytesFromNetwork.setStatus('mandatory')
vsLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 264), )
if mibBuilder.loadTexts: vsLCoPathTable.setStatus('mandatory')
vsLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 264, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceMIB", "vsIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsLCoIndex"), (0, "Nortel-Magellan-Passport-VoiceMIB", "vsLCoPathValue"))
if mibBuilder.loadTexts: vsLCoPathEntry.setStatus('mandatory')
vsLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 80, 4, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLCoPathValue.setStatus('mandatory')
voiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49, 1))
voiceGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49, 1, 5))
voiceGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49, 1, 5, 2))
voiceGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49, 1, 5, 2, 2))
voiceCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49, 3))
voiceCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49, 3, 5))
voiceCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49, 3, 5, 2))
voiceCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 49, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-VoiceMIB", vsFramerTransmitCasYellow=vsFramerTransmitCasYellow, vsPlcOptimization=vsPlcOptimization, vsLCoOptimization=vsLCoOptimization, vsLCoIndex=vsLCoIndex, vsLCoPathType=vsLCoPathType, vsLCoRowStatusTable=vsLCoRowStatusTable, vsFramerV17EncodedAsG711G726=vsFramerV17EncodedAsG711G726, vsFramerFrmToNetworkIndex=vsFramerFrmToNetworkIndex, vsFramerNRatesTrafficIndex=vsFramerNRatesTrafficIndex, vsFramerNEncodingIndex=vsFramerNEncodingIndex, vsPlc=vsPlc, vsFramerInsertedOutputDelay=vsFramerInsertedOutputDelay, vsIfAdminStatus=vsIfAdminStatus, vsLCoRowStatusEntry=vsLCoRowStatusEntry, vsLCoStatsTable=vsLCoStatsTable, vsUsageState=vsUsageState, vsFramerSeizeCodeEntry=vsFramerSeizeCodeEntry, vsFramerModemSilenceCells=vsFramerModemSilenceCells, vsFramerVfpDebugIndex=vsFramerVfpDebugIndex, vsPlcRequiredRxBandwidth=vsPlcRequiredRxBandwidth, vsPlcProvEntry=vsPlcProvEntry, vsLCoPktsFromNetwork=vsLCoPktsFromNetwork, vsFramerTransmitBusyYellow=vsFramerTransmitBusyYellow, vsFramerMvpDebugRowStatus=vsFramerMvpDebugRowStatus, vsFramerComfortNoiseCap=vsFramerComfortNoiseCap, vsFramerNegotiatedIgFisG711G726=vsFramerNegotiatedIgFisG711G726, vsPlcProvTable=vsPlcProvTable, vsFramerSentSilenceSuppression=vsFramerSentSilenceSuppression, vsPlcRequiredCustomerParm=vsPlcRequiredCustomerParm, vsPlcPermittedTrunkTypes=vsPlcPermittedTrunkTypes, vsPlcMaximumAcceptableCost=vsPlcMaximumAcceptableCost, vsFramerDtmfRegeneration=vsFramerDtmfRegeneration, vsPlcRequiredTxBandwidth=vsPlcRequiredTxBandwidth, vsFramerIdleCodeEntry=vsFramerIdleCodeEntry, vsFramerPcmCaptureIndex=vsFramerPcmCaptureIndex, vsIndex=vsIndex, vsFramerOperationalState=vsFramerOperationalState, vsOperStatusTable=vsOperStatusTable, vsFramerSentMinVoiceG711G726Rate=vsFramerSentMinVoiceG711G726Rate, vsFramerPcmCaptureStorageType=vsFramerPcmCaptureStorageType, vsPlcRemoteName=vsPlcRemoteName, vsLCoStatsEntry=vsLCoStatsEntry, vsFramerNegotiatedV17AsG711G726=vsFramerNegotiatedV17AsG711G726, vsFramerOperEntry=vsFramerOperEntry, vsLCoPathValue=vsLCoPathValue, vsLCoRoundTripDelay=vsLCoRoundTripDelay, vsFramerPcmCaptureRowStatus=vsFramerPcmCaptureRowStatus, vsPlcMpathIndex=vsPlcMpathIndex, vsFramerVfpDebugRowStatusTable=vsFramerVfpDebugRowStatusTable, vsLCoPathFailureCount=vsLCoPathFailureCount, vsFramerAudioGain=vsFramerAudioGain, vsFramerSilenceSuppression=vsFramerSilenceSuppression, vsFramerNEncodingValue=vsFramerNEncodingValue, vsPlcComponentName=vsPlcComponentName, vsFramerOperTable=vsFramerOperTable, vsFramerNRatesEntry=vsFramerNRatesEntry, vsFramerRecentIngressLineSamples=vsFramerRecentIngressLineSamples, vsLCoPermittedTrunkTypes=vsLCoPermittedTrunkTypes, vsLCoHoldingPriority=vsLCoHoldingPriority, vsFramerComponentName=vsFramerComponentName, vsFramerCoderTable=vsFramerCoderTable, vsPlcRowStatusEntry=vsPlcRowStatusEntry, vsPlcPathAttributeToMinimize=vsPlcPathAttributeToMinimize, vsControlStatus=vsControlStatus, vsLCoPathDataEntry=vsLCoPathDataEntry, vsFramerMaxFaxRelayRate=vsFramerMaxFaxRelayRate, vsFramerEchoTailDelay=vsFramerEchoTailDelay, vsPlcRequiredSecurity=vsPlcRequiredSecurity, vsFramerMvpDebugIndex=vsFramerMvpDebugIndex, voiceMIB=voiceMIB, vsLCoRequiredSecurity=vsLCoRequiredSecurity, vsFramerFaxHangoverTimeG711G726=vsFramerFaxHangoverTimeG711G726, vsPlcRowStatus=vsPlcRowStatus, vsCidDataTable=vsCidDataTable, vsPlcMpathValue=vsPlcMpathValue, vsFramerModemFaxSpeechDiscrim=vsFramerModemFaxSpeechDiscrim, vsFramerModemFaxCells=vsFramerModemFaxCells, vsFramerOpCurrentEncoding=vsFramerOpCurrentEncoding, vsIfEntryTable=vsIfEntryTable, vsFramerSpeechHangoverTime=vsFramerSpeechHangoverTime, vsFramerEchoReturnLoss=vsFramerEchoReturnLoss, vsStorageType=vsStorageType, vsLCoState=vsLCoState, vsLCoRequiredTxBandwidth=vsLCoRequiredTxBandwidth, vsLCoRequiredRxBandwidth=vsLCoRequiredRxBandwidth, vsLCoRequiredCustomerParameter=vsLCoRequiredCustomerParameter, voiceGroupBE=voiceGroupBE, vsOperationalState=vsOperationalState, vsAlarmStatus=vsAlarmStatus, vsFramerNegotiatedIgSilenceSuppression=vsFramerNegotiatedIgSilenceSuppression, vsFramerCurrentRate=vsFramerCurrentRate, vsFramerIdleCodeValue=vsFramerIdleCodeValue, vsFramerVfpDebugRowStatus=vsFramerVfpDebugRowStatus, vsFramerPcmCaptureRowStatusEntry=vsFramerPcmCaptureRowStatusEntry, vsFramerIngressAudioGain=vsFramerIngressAudioGain, vsOperationalEntry=vsOperationalEntry, vsPlcDiscardPriority=vsPlcDiscardPriority, vsPlcPathFailureAction=vsPlcPathFailureAction, vsLCoCostMetric=vsLCoCostMetric, vsPlcMpathEntry=vsPlcMpathEntry, vsPlcHoldingPriority=vsPlcHoldingPriority, vsLCoDelayMetric=vsLCoDelayMetric, vsFramerAdminState=vsFramerAdminState, vsRowStatusTable=vsRowStatusTable, vsFramerMaxVoiceBitRate=vsFramerMaxVoiceBitRate, vsFramerVfpDebug=vsFramerVfpDebug, vs=vs, vsLCoReasonForNoRoute=vsLCoReasonForNoRoute, vsFramerSignalEntry=vsFramerSignalEntry, vsFramerSeizeCodeIndex=vsFramerSeizeCodeIndex, vsLCoPathFailureAction=vsLCoPathFailureAction, vsFramerMaxModemBitRate=vsFramerMaxModemBitRate, vsFramerTotalCells=vsFramerTotalCells, vsFramerStatsEntry=vsFramerStatsEntry, vsFramerNRatesRateIndex=vsFramerNRatesRateIndex, vsLCoOverrideRemoteName=vsLCoOverrideRemoteName, vsFramerIdleCodeIndex=vsFramerIdleCodeIndex, vsLCoSetupPriority=vsLCoSetupPriority, vsFramerNEncodingTable=vsFramerNEncodingTable, vsRowStatusEntry=vsRowStatusEntry, vsUnknownStatus=vsUnknownStatus, vsLCoPathEntry=vsLCoPathEntry, vsFramerStateEntry=vsFramerStateEntry, vsFramerCurrentEncodingRate=vsFramerCurrentEncodingRate, vsPlcStorageType=vsPlcStorageType, vsFramerSignalBits=vsFramerSignalBits, vsFramerStorageType=vsFramerStorageType, voiceCapabilitiesBE01=voiceCapabilitiesBE01, vsFramerVfpDebugComponentName=vsFramerVfpDebugComponentName, vsRowStatus=vsRowStatus, vsFramerFrmUnderRuns=vsFramerFrmUnderRuns, vsFramerVfpDebugRowStatusEntry=vsFramerVfpDebugRowStatusEntry, vsStateTable=vsStateTable, voiceGroupBE01=voiceGroupBE01, vsFramerSignalTable=vsFramerSignalTable, vsFramerMvpDebugRowStatusTable=vsFramerMvpDebugRowStatusTable, vsProceduralStatus=vsProceduralStatus, vsFramerFrmDumped=vsFramerFrmDumped, vsFramerPcmCapture=vsFramerPcmCapture, vsFramerInvertBits=vsFramerInvertBits, vsFramerVfpDebugStorageType=vsFramerVfpDebugStorageType, vsCustomerIdentifier=vsCustomerIdentifier, vsFramerUsageState=vsFramerUsageState, vsLCoStorageType=vsLCoStorageType, vsFramerVoiceEncoding=vsFramerVoiceEncoding, vsFramerMvpDebugComponentName=vsFramerMvpDebugComponentName, vsPlcMaximumAcceptableDelay=vsPlcMaximumAcceptableDelay, vsFramerProvEntry=vsFramerProvEntry, vsFramerFrmToNetworkValue=vsFramerFrmToNetworkValue, vsFramerNRatesValue=vsFramerNRatesValue, vsFramerNEncodingEntry=vsFramerNEncodingEntry, vsPlcSetupPriority=vsPlcSetupPriority, vsFramerPcmCaptureComponentName=vsFramerPcmCaptureComponentName, vsFramerStateTable=vsFramerStateTable, voiceCapabilitiesBE01A=voiceCapabilitiesBE01A, vsFramerFaxEncoding=vsFramerFaxEncoding, vsFramerRowStatusEntry=vsFramerRowStatusEntry, vsFramerNegotiatedDtmfRegeneration=vsFramerNegotiatedDtmfRegeneration, vsFramerNRatesTable=vsFramerNRatesTable, vsPlcBumpPreference=vsPlcBumpPreference, vsFramerStatsTable=vsFramerStatsTable, vsFramerOpTptStatus=vsFramerOpTptStatus, vsFramerFaxIdleCells=vsFramerFaxIdleCells, vsFramerTandemPassThrough=vsFramerTandemPassThrough, vsFramerSilenceCells=vsFramerSilenceCells, vsFramerEchoCancellation=vsFramerEchoCancellation, vsFramerSeizeCodeValue=vsFramerSeizeCodeValue, voiceCapabilities=voiceCapabilities, vsFramerMvpDebugStorageType=vsFramerMvpDebugStorageType, vsIfEntryEntry=vsIfEntryEntry, vsFramerRowStatus=vsFramerRowStatus, vsFramerCurrentEncoding=vsFramerCurrentEncoding, vsFramerPcmCaptureRowStatusTable=vsFramerPcmCaptureRowStatusTable, vsAvailabilityStatus=vsAvailabilityStatus, vsServiceFailureReason=vsServiceFailureReason, vsFramerFaxRelayCells=vsFramerFaxRelayCells, vsPlcMpathTable=vsPlcMpathTable, vsFramerMvpDebugRowStatusEntry=vsFramerMvpDebugRowStatusEntry, vsFramerFrmToNetworkEntry=vsFramerFrmToNetworkEntry, vsLCoRowStatus=vsLCoRowStatus, vsFramerCasSignalling=vsFramerCasSignalling, vsFramerFaxIdleSuppressionG711G726=vsFramerFaxIdleSuppressionG711G726, vsIfIndex=vsIfIndex, vsStandbyStatus=vsStandbyStatus, vsFramerFrmToNetworkTable=vsFramerFrmToNetworkTable, vsFramerMvpDebug=vsFramerMvpDebug, vsOperationalTable=vsOperationalTable, vsOperStatusEntry=vsOperStatusEntry, vsFramerTptStatus=vsFramerTptStatus, voiceCapabilitiesBE=voiceCapabilitiesBE, vsFramerModemCells=vsFramerModemCells, vsComponentName=vsComponentName, vsFramerTransportSignalling=vsFramerTransportSignalling, vsAdminState=vsAdminState, vsPlcEmissionPriority=vsPlcEmissionPriority, vsLCoBytesFromNetwork=vsLCoBytesFromNetwork, vsFramerAudioCells=vsFramerAudioCells, vsLCoBytesToNetwork=vsLCoBytesToNetwork, voiceGroupBE01A=voiceGroupBE01A, vsFramerEndOfCallPattern=vsFramerEndOfCallPattern, vsFramerIndex=vsFramerIndex, vsFramerEgressGain=vsFramerEgressGain, vsFramerSentMinModemFaxG711G726Rate=vsFramerSentMinModemFaxG711G726Rate, vsFramerProvTable=vsFramerProvTable, vsLCoLastTearDownReason=vsLCoLastTearDownReason, vsLCoPathTable=vsLCoPathTable, vsCidDataEntry=vsCidDataEntry, vsFramerSentFaxIdleSuppressionG711G726=vsFramerSentFaxIdleSuppressionG711G726, vsPlcIndex=vsPlcIndex, vsLCoDiscardPriority=vsLCoDiscardPriority, vsLCoComponentName=vsLCoComponentName, voiceGroup=voiceGroup, vsPlcRequiredTrafficType=vsPlcRequiredTrafficType, vsFramerIdleCodeTable=vsFramerIdleCodeTable, vsFramerRowStatusTable=vsFramerRowStatusTable, vsFramerLrcErrors=vsFramerLrcErrors, vsPlcPathType=vsPlcPathType, vsFramerFrmLostInNetwork=vsFramerFrmLostInNetwork, vsFramerMinModemBitRate=vsFramerMinModemBitRate, vsFramerEcanBypassMode=vsFramerEcanBypassMode, vsFramerOpRecentIngressLineSamples=vsFramerOpRecentIngressLineSamples, vsLCoRetryCount=vsLCoRetryCount, vsFramerMinVoiceBitRate=vsFramerMinVoiceBitRate, vsFramerALawConversion=vsFramerALawConversion, vsLCoEnd=vsLCoEnd, vsFramer=vsFramer, vsFramerNegTable=vsFramerNegTable, vsFramerEgressAudioGain=vsFramerEgressAudioGain, vsLCo=vsLCo, vsFramerSeizeCodeTable=vsFramerSeizeCodeTable, vsLCoPathDataTable=vsLCoPathDataTable, vsLCoEmissionPriority=vsLCoEmissionPriority, vsLCoPktsToNetwork=vsLCoPktsToNetwork, vsPlcRowStatusTable=vsPlcRowStatusTable, vsLCoRequiredTrafficType=vsLCoRequiredTrafficType, vsFramerNegEntry=vsFramerNegEntry, vsLCoPathUpDateTime=vsLCoPathUpDateTime, vsFramerInterfaceName=vsFramerInterfaceName, vsFramerInterpretSignalling=vsFramerInterpretSignalling, vsFramerCoderEntry=vsFramerCoderEntry, vsSnmpOperStatus=vsSnmpOperStatus, vsFramerNegotiatedTandemPassThrough=vsFramerNegotiatedTandemPassThrough, vsLCoBumpPreference=vsLCoBumpPreference, vsStateEntry=vsStateEntry)
