#
# PySNMP MIB module CIENA-CES-MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-MPLS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
cienaGlobalMacAddress, cienaGlobalSeverity = mibBuilder.importSymbols("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress", "cienaGlobalSeverity")
cienaCesConfig, cienaCesNotifications = mibBuilder.importSymbols("CIENA-SMI", "cienaCesConfig", "cienaCesNotifications")
CienaGlobalState, = mibBuilder.importSymbols("CIENA-TC", "CienaGlobalState")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
MplsBitRate, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsBitRate")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, Counter32, iso, Bits, MibIdentifier, ObjectIdentity, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Counter32", "iso", "Bits", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Gauge32", "IpAddress")
TruthValue, StorageType, MacAddress, TextualConvention, RowPointer, RowStatus, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "StorageType", "MacAddress", "TextualConvention", "RowPointer", "RowStatus", "DisplayString", "TimeStamp")
cienaCesMplsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18))
cienaCesMplsMIB.setRevisions(('2016-11-22 00:00', '2016-11-17 00:00', '2016-10-21 00:00', '2016-10-12 00:00', '2016-09-21 00:00', '2016-08-29 00:00', '2016-08-22 00:00', '2016-07-18 00:00', '2016-07-12 00:00', '2016-07-11 00:00', '2016-07-04 00:00', '2016-06-10 00:00', '2016-03-11 00:00', '2016-02-15 00:00', '2016-01-04 00:00', '2015-08-18 00:00', '2015-02-23 00:00', '2014-12-01 00:00', '2014-11-04 00:00', '2014-06-11 00:00', '2014-04-08 00:00', '2014-02-28 00:00', '2013-09-27 00:00', '2013-05-08 00:00', '2011-02-02 00:00',))
if mibBuilder.loadTexts: cienaCesMplsMIB.setLastUpdated('201611220000Z')
if mibBuilder.loadTexts: cienaCesMplsMIB.setOrganization('Ciena, Inc')
class TTLPolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("decrement", 0), ("fixed", 1), ("inherit", 2))

class PseudoWireType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("raw", 1), ("tagged", 2))

class RCosPolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fixed", 1), ("exp-mapped", 2))

class FCosPolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fixed", 1), ("rcos-mapped", 2))

class PrivateForwardGroup(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("groupA", 1), ("groupB", 2), ("groupC", 3))

class OperState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("capable", 1), ("not-capable", 2))

class VCFailReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("indeterminate", 1), ("ignore", 2))

class VCStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("notForwarding", 0), ("servicePwRxFault", 1), ("servicePwTxFault", 2), ("psnPwIngressRxFault", 3), ("psnPwEgressTxFault", 4), ("pwStandby", 5))

class VCState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("notActive", 2))

class AttachGroupType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dynamic", 2))

class TunnelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("mplsStaticIngress", 1), ("mplsDynamicIngress", 2), ("mplsAssociated", 3), ("gmplsStaticIngressCorouted", 4), ("gmplsDynamicIngressCorouted", 5), ("gmplsStaticEgressCorouted", 6), ("gmplsDynamicEgressCorouted", 7), ("gmplsAssociated", 8))

class TunnelAisFault(TextualConvention, Integer32):
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fault", 1), ("nofault", 2))

class TunnelOamFault(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("aisfault", 1), ("bfdfault", 2), ("aisbfdfault", 3), ("nofault", 4))

class AutoSizeFailHdlr(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("alarm", 2), ("mbb", 3), ("notApplicable", 4))

class AutoSizeState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ok", 1), ("upsizeInProgress", 2), ("upsizeFailed", 3), ("downsizeInProgress", 4), ("downsizeFailed", 5), ("notApplicable", 6))

class AutoSizeMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("cac", 2), ("utilization", 3), ("notApplicable", 4))

class CacPolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("invalid", 1), ("mam", 2), ("rdm", 3))

class PathDisjointType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 1), ("none", 2), ("link", 3), ("srlg", 4), ("node", 5), ("srlgAndNode", 6), ("srlgOrNode", 7), ("notApplicable", 8))

class PathDisjointMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("strict", 2), ("maximal", 3), ("notApplicable", 4))

class SRLGState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inActive", 2))

class TEMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("diffServ", 1), ("diffServ-Te", 2))

class MplsGlobalState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3))

cienaCesMplsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1))
cienaCesMpls = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1))
cienaCesGmpls = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2))
cienaCesMplsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3))
cienaCesMplsPw = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4))
cienaCesMplsTe = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5))
cienaCesMplsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17))
cienaCesMplsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0))
cienaCesGmplsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1))
cienaCesMplsPwMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 2))
cienaCesMplsGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1))
cienaCesMplsStaticAdminLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticAdminLabelRangeStart.setStatus('deprecated')
cienaCesMplsStaticAdminLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticAdminLabelRangeEnd.setStatus('deprecated')
cienaCesMplsStaticOperLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticOperLabelRangeStart.setStatus('deprecated')
cienaCesMplsStaticOperLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticOperLabelRangeEnd.setStatus('deprecated')
cienaCesMplsDynamicAdminLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicAdminLabelRangeStart.setStatus('deprecated')
cienaCesMplsDynamicAdminLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicAdminLabelRangeEnd.setStatus('deprecated')
cienaCesMplsDynamicOperLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicOperLabelRangeStart.setStatus('deprecated')
cienaCesMplsDynamicOperLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicOperLabelRangeEnd.setStatus('deprecated')
cienaCesMplsStaticIngressTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2), )
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelTable.setStatus('current')
cienaCesMplsStaticIngressTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsStaticIngressTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelEntry.setStatus('current')
cienaCesMplsStaticIngressTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelIndex.setStatus('current')
cienaCesMplsStaticIngressTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelName.setStatus('current')
cienaCesMplsStaticIngressTunnelWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelWeight.setStatus('current')
cienaCesMplsStaticIngressTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelNextHopIp.setStatus('current')
cienaCesMplsStaticIngressTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 5), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelAdminState.setStatus('current')
cienaCesMplsStaticIngressTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelOperState.setStatus('current')
cienaCesMplsStaticIngressTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelDestIpAddr.setStatus('current')
cienaCesMplsStaticIngressTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelLabel.setStatus('current')
cienaCesMplsStaticIngressTunnelFrmCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 9), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFrmCosPolicy.setStatus('deprecated')
cienaCesMplsStaticIngressTunnelFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFrmCosMapId.setStatus('deprecated')
cienaCesMplsStaticIngressTunnelFixedExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedExp.setStatus('deprecated')
cienaCesMplsStaticIngressTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 12), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelTTLPolicy.setStatus('current')
cienaCesMplsStaticIngressTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedTTL.setStatus('current')
cienaCesMplsStaticIngressTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelGrpIndex.setStatus('current')
cienaCesMplsStaticIngressTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelReversion.setStatus('current')
cienaCesMplsStaticIngressTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelReversionTimeout.setStatus('current')
cienaCesMplsStaticIngressTunnelPrimaryTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelPrimaryTunnelName.setStatus('deprecated')
cienaCesMplsStaticIngressTunnelFixedTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedTC.setStatus('deprecated')
cienaCesMplsStaticIngressTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionRole.setStatus('current')
cienaCesMplsStaticIngressTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionState.setStatus('current')
cienaCesMplsStaticIngressTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionPartnerName.setStatus('current')
cienaCesMplsStaticIngressTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelCosProfileIndex.setStatus('current')
cienaCesMplsStaticIngressTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelCosProfileName.setStatus('current')
cienaCesMplsStaticIngressTunnelRecoveryDisjoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("link", 2), ("node", 3), ("srlg", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelRecoveryDisjoint.setStatus('current')
cienaCesMplsDynamicIngressTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3), )
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelTable.setStatus('current')
cienaCesMplsDynamicIngressTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicIngressTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelEntry.setStatus('current')
cienaCesMplsDynamicIngressTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelIndex.setStatus('current')
cienaCesMplsDynamicIngressTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelName.setStatus('current')
cienaCesMplsDynamicIngressTunnelWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelWeight.setStatus('current')
cienaCesMplsDynamicIngressTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelLspId.setStatus('current')
cienaCesMplsDynamicIngressTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelNextHopIp.setStatus('current')
cienaCesMplsDynamicIngressTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelAdminState.setStatus('current')
cienaCesMplsDynamicIngressTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelOperState.setStatus('current')
cienaCesMplsDynamicIngressTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelDestIpAddr.setStatus('current')
cienaCesMplsDynamicIngressTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelLabel.setStatus('current')
cienaCesMplsDynamicIngressTunnelFrmCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("rcos-mapped", 2))).clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFrmCosPolicy.setStatus('deprecated')
cienaCesMplsDynamicIngressTunnelFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFrmCosMapId.setStatus('deprecated')
cienaCesMplsDynamicIngressTunnelFixedExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedExp.setStatus('deprecated')
cienaCesMplsDynamicIngressTunnelSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelSetupPriority.setStatus('current')
cienaCesMplsDynamicIngressTunnelHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelHoldPriority.setStatus('current')
cienaCesMplsDynamicIngressTunnelRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelRecordRoute.setStatus('current')
cienaCesMplsDynamicIngressTunnelFastRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("link-protect", 2), ("node-protect", 3))).clone('link-protect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFastRoute.setStatus('current')
cienaCesMplsDynamicIngressTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("inherit", 2))).clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelTTLPolicy.setStatus('current')
cienaCesMplsDynamicIngressTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedTTL.setStatus('current')
cienaCesMplsDynamicIngressTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPathIndex.setStatus('current')
cienaCesMplsDynamicIngressTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPathName.setStatus('current')
cienaCesMplsDynamicIngressTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelGrpIndex.setStatus('current')
cienaCesMplsDynamicIngressTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 23), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelResourcePointer.setStatus('current')
cienaCesMplsDynamicIngressTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelReversion.setStatus('current')
cienaCesMplsDynamicIngressTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelReversionTimeout.setStatus('current')
cienaCesMplsDynamicIngressTunnelBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelBandwidthProfile.setStatus('current')
cienaCesMplsDynamicIngressTunnelPrimaryTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPrimaryTunnelName.setStatus('deprecated')
cienaCesMplsDynamicIngressTunnelFixedTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedTC.setStatus('deprecated')
cienaCesMplsDynamicIngressTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionRole.setStatus('current')
cienaCesMplsDynamicIngressTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionState.setStatus('current')
cienaCesMplsDynamicIngressTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionPartnerName.setStatus('current')
cienaCesMplsDynamicIngressTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelCosProfileIndex.setStatus('current')
cienaCesMplsDynamicIngressTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelCosProfileName.setStatus('current')
cienaCesMplsStaticEgressTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4), )
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelTable.setStatus('current')
cienaCesMplsStaticEgressTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsStaticEgressTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelEntry.setStatus('current')
cienaCesMplsStaticEgressTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelIndex.setStatus('current')
cienaCesMplsStaticEgressTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelName.setStatus('current')
cienaCesMplsStaticEgressTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelAdminState.setStatus('current')
cienaCesMplsStaticEgressTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelOperState.setStatus('current')
cienaCesMplsStaticEgressTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelSourceIpAddr.setStatus('current')
cienaCesMplsStaticEgressTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelLabel.setStatus('current')
cienaCesMplsDynamicEgressTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5), )
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelTable.setStatus('current')
cienaCesMplsDynamicEgressTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicEgressTunnelIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicEgressTunnelInstance"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicEgressTunnelSourceIpAddr"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicEgressTunnelDestIpAddr"))
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelEntry.setStatus('current')
cienaCesMplsDynamicEgressTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelIndex.setStatus('current')
cienaCesMplsDynamicEgressTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelName.setStatus('current')
cienaCesMplsDynamicEgressTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelAdminState.setStatus('current')
cienaCesMplsDynamicEgressTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelOperState.setStatus('current')
cienaCesMplsDynamicEgressTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelInstance.setStatus('current')
cienaCesMplsDynamicEgressTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelSourceIpAddr.setStatus('current')
cienaCesMplsDynamicEgressTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelDestIpAddr.setStatus('current')
cienaCesMplsDynamicEgressTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelLabel.setStatus('current')
cienaCesMplsStaticTransitTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6), )
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelTable.setStatus('current')
cienaCesMplsStaticTransitTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsStaticTransitTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelEntry.setStatus('current')
cienaCesMplsStaticTransitTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIndex.setStatus('current')
cienaCesMplsStaticTransitTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelName.setStatus('current')
cienaCesMplsStaticTransitTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelAdminState.setStatus('current')
cienaCesMplsStaticTransitTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOperState.setStatus('current')
cienaCesMplsStaticTransitTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelNextHopIpAddr.setStatus('current')
cienaCesMplsStaticTransitTunnelInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelInLabel.setStatus('current')
cienaCesMplsStaticTransitTunnelOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutLabel.setStatus('current')
cienaCesMplsStaticTransitTunnelFcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 8), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFcosPolicy.setStatus('deprecated')
cienaCesMplsStaticTransitTunnelFixedTc = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFixedTc.setStatus('deprecated')
cienaCesMplsStaticTransitTunnelFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFrmCosMapId.setStatus('deprecated')
cienaCesMplsStaticTransitTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 11), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelTTLPolicy.setStatus('current')
cienaCesMplsStaticTransitTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFixedTTL.setStatus('current')
cienaCesMplsStaticTransitTunnelRcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 13), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelRcosPolicy.setStatus('deprecated')
cienaCesMplsStaticTransitTunnelRCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelRCosMapId.setStatus('deprecated')
cienaCesMplsStaticTransitTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelCosProfileIndex.setStatus('current')
cienaCesMplsStaticTransitTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelCosProfileName.setStatus('current')
cienaCesMplsStaticTransitTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelSourceIpAddr.setStatus('current')
cienaCesMplsStaticTransitTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelDestIpAddr.setStatus('current')
cienaCesMplsStaticTransitTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIncomingPackets.setStatus('current')
cienaCesMplsStaticTransitTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutgoingPackets.setStatus('current')
cienaCesMplsStaticTransitTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIncomingBytes.setStatus('current')
cienaCesMplsStaticTransitTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutgoingBytes.setStatus('current')
cienaCesMplsDynamicTransitTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7), )
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelTable.setStatus('current')
cienaCesMplsDynamicTransitTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicTransitTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelEntry.setStatus('current')
cienaCesMplsDynamicTransitTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIndex.setStatus('current')
cienaCesMplsDynamicTransitTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelName.setStatus('current')
cienaCesMplsDynamicTransitTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelAdminState.setStatus('current')
cienaCesMplsDynamicTransitTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOperState.setStatus('current')
cienaCesMplsDynamicTransitTunnelInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelInLabel.setStatus('current')
cienaCesMplsDynamicTransitTunnelOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutLabel.setStatus('current')
cienaCesMplsDynamicTransitTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelNextHopIpAddr.setStatus('current')
cienaCesMplsDynamicTransitTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelSourceIpAddr.setStatus('current')
cienaCesMplsDynamicTransitTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelDestIpAddr.setStatus('current')
cienaCesMplsDynamicTransitTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIncomingPackets.setStatus('current')
cienaCesMplsDynamicTransitTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutgoingPackets.setStatus('current')
cienaCesMplsDynamicTransitTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIncomingBytes.setStatus('current')
cienaCesMplsDynamicTransitTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutgoingBytes.setStatus('current')
cienaCesMplsTunnelPath = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8))
cienaCesMplsTunnelPathTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1), )
if mibBuilder.loadTexts: cienaCesMplsTunnelPathTable.setStatus('current')
cienaCesMplsTunnelPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsTunnelPathIndex"))
if mibBuilder.loadTexts: cienaCesMplsTunnelPathEntry.setStatus('current')
cienaCesMplsTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsTunnelPathIndex.setStatus('current')
cienaCesMplsTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelPathName.setStatus('current')
cienaCesMplsTunnelPathUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelPathUseCount.setStatus('current')
cienaCesMplsTunnelPathHopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2), )
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopTable.setStatus('current')
cienaCesMplsTunnelPathHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsTunnelPathIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsTunnelPathHopIndex"))
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopEntry.setStatus('current')
cienaCesMplsTunnelPathHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopIndex.setStatus('current')
cienaCesMplsTunnelPathHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopIpAddr.setStatus('current')
cienaCesMplsTunnelPathHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2))).clone('strict')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopType.setStatus('current')
cienaCesMplsEncapTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9))
cienaCesMplsNotifEncapTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelTable.setStatus('current')
cienaCesMplsNotifEncapTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelEntry.setStatus('current')
cienaCesMplsNotifEncapTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelIndex.setStatus('current')
cienaCesMplsNotifEncapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("frr", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelType.setStatus('current')
cienaCesMplsNotifEncapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelName.setStatus('current')
cienaCesMplsNotifEncapTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelAdminState.setStatus('current')
cienaCesMplsNotifEncapTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelOperState.setStatus('current')
cienaCesMplsNotifEncapTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 6), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelOamFaulted.setStatus('current')
cienaCesMplsNotifEncapTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelFaultedNodeId.setStatus('current')
cienaCesMplsTransitTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10))
cienaCesMplsNotifTransitTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelTable.setStatus('current')
cienaCesMplsNotifTransitTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelEntry.setStatus('current')
cienaCesMplsNotifTransitTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelIndex.setStatus('current')
cienaCesMplsNotifTransitTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelType.setStatus('current')
cienaCesMplsNotifTransitTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelName.setStatus('current')
cienaCesMplsNotifTransitTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelAdminState.setStatus('current')
cienaCesMplsNotifTransitTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelOperState.setStatus('current')
cienaCesMplsNotifTransitTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 6), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelOamFaulted.setStatus('current')
cienaCesMplsEncapTunnelGrpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11))
cienaCesMplsNotifEncapTunnelGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpTable.setStatus('current')
cienaCesMplsNotifEncapTunnelGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpEntry.setStatus('current')
cienaCesMplsNotifEncapTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpIndex.setStatus('current')
cienaCesMplsNotifEncapTunnelGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpName.setStatus('current')
cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex.setStatus('current')
cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName.setStatus('current')
cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("frr", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType.setStatus('current')
cienaCesMplsAssociatedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12), )
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelTable.setStatus('current')
cienaCesMplsAssociatedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsAssociatedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelEntry.setStatus('current')
cienaCesMplsAssociatedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelIndex.setStatus('current')
cienaCesMplsAssociatedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelName.setStatus('current')
cienaCesMplsAssociatedForwardTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelName.setStatus('current')
cienaCesMplsAssociatedForwardTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelType.setStatus('current')
cienaCesMplsAssociatedReverseTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelName.setStatus('current')
cienaCesMplsAssociatedReverseTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelType.setStatus('current')
cienaCesMplsAssociatedForwardTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelDestIpAddr.setStatus('current')
cienaCesMplsAssociatedDynamicTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedDynamicTunnelSrcIpAddr.setStatus('current')
cienaCesMplsAssociatedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 9), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelAdminState.setStatus('current')
cienaCesMplsAssociatedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 10), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelOperState.setStatus('current')
cienaCesMplsAssociatedForwardTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 11), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelOperState.setStatus('current')
cienaCesMplsAssociatedReverseTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 12), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelOperState.setStatus('current')
cienaCesMplsAssociatedProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedProtectionRole.setStatus('current')
cienaCesMplsAssociatedProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedProtectionState.setStatus('current')
cienaCesMplsAssociatedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelProtectionPartnerName.setStatus('current')
cienaCesMplsAssociatedBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 16), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdMonitoring.setStatus('current')
cienaCesMplsAssociatedBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdProfileName.setStatus('current')
cienaCesMplsAssociatedBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdSessionName.setStatus('current')
cienaCesMplsAssociatedBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdSessionFaulted.setStatus('current')
cienaCesMplsAssociatedBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdProfileIndex.setStatus('current')
cienaCesMplsTunnelARHopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13), )
if mibBuilder.loadTexts: cienaCesMplsTunnelARHopTable.setStatus('current')
cienaCesMplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaMplsTunnelARHopListIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaMplsTunnelARHopIndex"))
if mibBuilder.loadTexts: cienaCesMplsTunnelARHopEntry.setStatus('current')
cienaMplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaMplsTunnelARHopListIndex.setStatus('current')
cienaMplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cienaMplsTunnelARHopIndex.setStatus('current')
cienaMplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaMplsTunnelARHopAddrType.setStatus('current')
cienaMplsTunnelARHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaMplsTunnelARHopIpAddr.setStatus('current')
cienaMplsTunnelARHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaMplsTunnelARHopAddrUnnum.setStatus('current')
cienaMplsTunnelARHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaMplsTunnelARHopLspId.setStatus('current')
cienaCesMplsAssociatedTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14))
cienaCesMplsNotifAssociatedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelTable.setStatus('current')
cienaCesMplsNotifAssociatedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelEntry.setStatus('current')
cienaCesMplsNotifAssociatedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelIndex.setStatus('current')
cienaCesMplsNotifAssociatedTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelType.setStatus('current')
cienaCesMplsNotifAssociatedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelName.setStatus('current')
cienaCesMplsNotifAssociatedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelAdminState.setStatus('current')
cienaCesMplsNotifAssociatedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelOperState.setStatus('current')
cienaCesMplsNotifAssociatedTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 6), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelOamFaulted.setStatus('current')
cienaCesMplsNotifAssociatedTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelFaultedNodeId.setStatus('current')
cienaCesMplsCacInterfaceNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15))
cienaCesMplsNotifCacInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceTable.setStatus('current')
cienaCesMplsNotifCacInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceClassType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceEntry.setStatus('current')
cienaCesMplsNotifCacInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceIndex.setStatus('current')
cienaCesMplsNotifCacInterfaceClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceClassType.setStatus('current')
cienaCesMplsNotifCacInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceName.setStatus('current')
cienaCesMplsNotifCacInterfaceThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceThreshold.setStatus('current')
cienaCesMplsClassProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16), )
if mibBuilder.loadTexts: cienaCesMplsClassProfileTable.setStatus('current')
cienaCesMplsClassProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsClassProfileIndex"))
if mibBuilder.loadTexts: cienaCesMplsClassProfileEntry.setStatus('current')
cienaCesMplsClassProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: cienaCesMplsClassProfileIndex.setStatus('current')
cienaCesMplsClassProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassProfileName.setStatus('current')
cienaCesMplsClassProfileCacPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16, 1, 3), CacPolicy().clone('mam')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassProfileCacPolicy.setStatus('current')
cienaCesMplsTEClassTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17), )
if mibBuilder.loadTexts: cienaCesMplsTEClassTypeTable.setStatus('current')
cienaCesMplsTEClassTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsClassProfileIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsClassType"))
if mibBuilder.loadTexts: cienaCesMplsTEClassTypeEntry.setStatus('current')
cienaCesMplsClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: cienaCesMplsClassType.setStatus('current')
cienaCesMplsClassTypeQueueGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassTypeQueueGroupIndex.setStatus('current')
cienaCesMplsClassTypeQueueGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassTypeQueueGroupInstance.setStatus('current')
cienaCesMplsClassTypeLom = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassTypeLom.setStatus('current')
cienaCesMplsClassTypeAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassTypeAlarmThreshold.setStatus('current')
cienaCesMplsTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 1)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesMplsTunnelOperStateChgTrap.setStatus('current')
cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 2)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType"))
if mibBuilder.loadTexts: cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange.setStatus('current')
cienaCesMplsTransitTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 3)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelOamFaulted"))
if mibBuilder.loadTexts: cienaCesMplsTransitTunnelOperStateChgTrap.setStatus('current')
cienaCesMplsAssociatedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 6)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelOperStateChgTrap.setStatus('current')
cienaCesMplsCacInterfaceThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 7)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceClassType"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceThreshold"))
if mibBuilder.loadTexts: cienaCesMplsCacInterfaceThresholdTrap.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1), )
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelTable.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticIngressUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelEntry.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelIndex.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelName.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelNextHopIp.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelAdminState.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelOperState.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionRole.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionState.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 12), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelFixedTTL.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelGrpIndex.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelReversion.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelCosProfileName.setStatus('current')
cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("link", 2), ("node", 3), ("srlg", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2), )
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelTable.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticIngressCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelEntry.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelIndex.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelName.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAdminState.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelOperState.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionState.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReversion.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 20), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 23), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("link", 2), ("node", 3), ("srlg", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelLspId.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId.setStatus('current')
cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelTable.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicIngressUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelEntry.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelIndex.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelName.setStatus('current')
cienaCesMplsDynamicIngressUniDirTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressUniDirTunnelLspId.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelAdminState.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 8), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelOperState.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionState.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelReversion.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelFastRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("link-protect", 2), ("node-protect", 3))).clone('link-protect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelFastRoute.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelPathIndex.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelPathName.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile.setStatus('current')
cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 27), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelTable.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicIngressCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelEntry.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelIndex.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelName.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAdminState.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelOperState.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReversion.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("link-protect", 2), ("node-protect", 3))).clone('link-protect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathName.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 27), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 28), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 34), MplsGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 36), PathDisjointType().clone('srlg')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 37), PathDisjointMode().clone('strict')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 38), MplsGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 40), AutoSizeFailHdlr().clone('alarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 41), AutoSizeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 42), AutoSizeMode().clone('cac')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 43), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 44), MplsBitRate().clone(1000000000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 45), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 46), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 47), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 48), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelClassType.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny.setStatus('current')
cienaCesGmplsDynamicIngressCoroutedLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedLspId.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5), )
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelTable.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticEgressUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelEntry.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelIndex.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelName.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelAdminState.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelOperState.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr.setStatus('current')
cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6), )
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelTable.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticEgressCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelEntry.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelIndex.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelName.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAdminState.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelOperState.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionState.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReversion.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 18), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 21), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("link", 2), ("node", 3), ("srlg", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 26), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelLspId.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId.setStatus('current')
cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelTable.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicEgressUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelEntry.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelIndex.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelName.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelAdminState.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelOperState.setStatus('current')
cienaCesGmplsDynamicEgressUniDirLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirLspId.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr.setStatus('current')
cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelTable.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicEgressCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelEntry.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelIndex.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelName.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelAdminState.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelOperState.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedLspId.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReversion.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 19), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 24), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy.setStatus('current')
cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9), )
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelTable.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticTransitUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelEntry.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIndex.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelName.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAdminState.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOperState.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 11), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelFixedTTL.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelCosProfileName.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 15), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAisProfileName.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes.setStatus('current')
cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10), )
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelTable.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticTransitCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelEntry.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIndex.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelName.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAdminState.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOperState.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 17), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelLspId.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes.setStatus('current')
cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelTable.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicTransitUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelEntry.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIndex.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelName.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelAdminState.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOperState.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 10), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes.setStatus('current')
cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelTable.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicTransitCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelEntry.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIndex.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelName.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelAdminState.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOperState.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes.setStatus('current')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes.setStatus('current')
cienaCesGmplsAssociatedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13), )
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelTable.setStatus('current')
cienaCesGmplsAssociatedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsAssociatedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelEntry.setStatus('current')
cienaCesGmplsAssociatedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelIndex.setStatus('current')
cienaCesGmplsAssociatedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelName.setStatus('current')
cienaCesGmplsAssociatedForwardTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelName.setStatus('current')
cienaCesGmplsAssociatedForwardTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelType.setStatus('current')
cienaCesGmplsAssociatedReverseTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelName.setStatus('current')
cienaCesGmplsAssociatedReverseTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelType.setStatus('current')
cienaCesGmplsAssociatedForwardTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelDestIpAddr.setStatus('current')
cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr.setStatus('current')
cienaCesGmplsAssociatedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 9), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelAdminState.setStatus('current')
cienaCesGmplsAssociatedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 10), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelOperState.setStatus('current')
cienaCesGmplsAssociatedForwardTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 11), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelOperState.setStatus('current')
cienaCesGmplsAssociatedReverseTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 12), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelOperState.setStatus('current')
cienaCesGmplsAssociatedProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedProtectionRole.setStatus('current')
cienaCesGmplsAssociatedProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedProtectionState.setStatus('current')
cienaCesGmplsAssociatedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelProtectionPartnerName.setStatus('current')
cienaCesGmplsAssociatedBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 16), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdMonitoring.setStatus('current')
cienaCesGmplsAssociatedBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdProfileName.setStatus('current')
cienaCesGmplsAssociatedBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdSessionName.setStatus('current')
cienaCesGmplsAssociatedAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 19), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedAisMonitoring.setStatus('current')
cienaCesGmplsAssociatedAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedAisProfileName.setStatus('current')
cienaCesGmplsAssociatedBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdSessionFaulted.setStatus('current')
cienaCesGmplsAssociatedBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdProfileIndex.setStatus('current')
cienaCesGmplsTunnelARHopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14), )
if mibBuilder.loadTexts: cienaCesGmplsTunnelARHopTable.setStatus('current')
cienaCesGmplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaGmplsTunnelARHopListIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaGmplsTunnelARHopIndex"))
if mibBuilder.loadTexts: cienaCesGmplsTunnelARHopEntry.setStatus('current')
cienaGmplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaGmplsTunnelARHopListIndex.setStatus('current')
cienaGmplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cienaGmplsTunnelARHopIndex.setStatus('current')
cienaGmplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaGmplsTunnelARHopAddrType.setStatus('current')
cienaGmplsTunnelARHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaGmplsTunnelARHopIpAddr.setStatus('current')
cienaGmplsTunnelARHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaGmplsTunnelARHopAddrUnnum.setStatus('current')
cienaGmplsTunnelARHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaGmplsTunnelARHopLspId.setStatus('current')
cienaCesGmplsEncapTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15))
cienaCesGmplsNotifEncapTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelTable.setStatus('current')
cienaCesGmplsNotifEncapTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelEntry.setStatus('current')
cienaCesGmplsNotifEncapTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelIndex.setStatus('current')
cienaCesGmplsNotifEncapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelType.setStatus('current')
cienaCesGmplsNotifEncapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelName.setStatus('current')
cienaCesGmplsNotifEncapTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelAdminState.setStatus('current')
cienaCesGmplsNotifEncapTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOperState.setStatus('current')
cienaCesGmplsNotifEncapTunnelAisFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 6), TunnelAisFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelAisFaulted.setStatus('obsolete')
cienaCesGmplsNotifEncapTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelFaultedNodeId.setStatus('current')
cienaCesGmplsNotifEncapTunnelFarEndLerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelFarEndLerId.setStatus('current')
cienaCesGmplsNotifEncapTunnelResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelResult.setStatus('current')
cienaCesGmplsNotifEncapTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelProtectionRole.setStatus('current')
cienaCesGmplsNotifEncapTunnelRequestedBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelRequestedBw.setStatus('current')
cienaCesGmplsNotifEncapTunnelOperationalBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOperationalBw.setStatus('current')
cienaCesGmplsNotifEncapTunnelMbbParentApp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("autosize", 2), ("lspreoptimization", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelMbbParentApp.setStatus('current')
cienaCesGmplsNotifEncapTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 14), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOamFaulted.setStatus('current')
cienaCesGmplsDecapTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16))
cienaCesGmplsNotifDecapTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelTable.setStatus('current')
cienaCesGmplsNotifDecapTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelEntry.setStatus('current')
cienaCesGmplsNotifDecapTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelIndex.setStatus('current')
cienaCesGmplsNotifDecapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelType.setStatus('current')
cienaCesGmplsNotifDecapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelName.setStatus('current')
cienaCesGmplsNotifDecapTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelAdminState.setStatus('current')
cienaCesGmplsNotifDecapTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelOperState.setStatus('current')
cienaCesGmplsNotifDecapTunnelAisFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 6), TunnelAisFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelAisFaulted.setStatus('obsolete')
cienaCesGmplsNotifDecapTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelFaultedNodeId.setStatus('current')
cienaCesGmplsNotifDecapTunnelFarEndLerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelFarEndLerId.setStatus('current')
cienaCesGmplsNotifDecapTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 9), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelOamFaulted.setStatus('current')
cienaCesGmplsTransitTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17))
cienaCesGmplsNotifTransitTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelTable.setStatus('current')
cienaCesGmplsNotifTransitTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelEntry.setStatus('current')
cienaCesGmplsNotifTransitTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelIndex.setStatus('current')
cienaCesGmplsNotifTransitTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelType.setStatus('current')
cienaCesGmplsNotifTransitTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelName.setStatus('current')
cienaCesGmplsNotifTransitTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelAdminState.setStatus('current')
cienaCesGmplsNotifTransitTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelOperState.setStatus('current')
cienaCesGmplsNotifTransitTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 6), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelOamFaulted.setStatus('current')
cienaCesGmplsAssociatedTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18))
cienaCesGmplsNotifAssociatedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelTable.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelEntry.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelIndex.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelType.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelName.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelAdminState.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelOperState.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelAisFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 6), TunnelAisFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelAisFaulted.setStatus('obsolete')
cienaCesGmplsNotifAssociatedTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelFaultedNodeId.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelFarEndLerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelFarEndLerId.setStatus('current')
cienaCesGmplsNotifAssociatedTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 9), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelOamFaulted.setStatus('current')
cienaCesGmplsEncapTunnelGrpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19))
cienaCesGmplsNotifEncapTunnelGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpTable.setStatus('current')
cienaCesGmplsNotifEncapTunnelGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpEntry.setStatus('current')
cienaCesGmplsNotifEncapTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpIndex.setStatus('current')
cienaCesGmplsNotifEncapTunnelGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpName.setStatus('current')
cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex.setStatus('current')
cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName.setStatus('current')
cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType.setStatus('current')
cienaCesGmplsDecapTunnelGrpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20))
cienaCesGmplsNotifDecapTunnelGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpTable.setStatus('current')
cienaCesGmplsNotifDecapTunnelGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpEntry.setStatus('current')
cienaCesGmplsNotifDecapTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpIndex.setStatus('current')
cienaCesGmplsNotifDecapTunnelGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpName.setStatus('current')
cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex.setStatus('current')
cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName.setStatus('current')
cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType.setStatus('current')
cienaCesGmplsTunnelAisFaultErrorNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21))
cienaCesGmplsNotifTunnelAisFaultErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelAisFaultErrorTable.setStatus('current')
cienaCesGmplsNotifTunnelAisFaultErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTunnelDecapLabel"))
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelAisFaultErrorEntry.setStatus('current')
cienaCesGmplsNotifTunnelDecapLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelDecapLabel.setStatus('current')
cienaCesGmplsNotifTunnelErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelErrorMsg.setStatus('current')
cienaCesGmplsEncapUnidirTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 1)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesGmplsEncapUnidirTunnelOperStateChgTrap.setStatus('current')
cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 2)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap.setStatus('current')
cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 3)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap.setStatus('current')
cienaCesGmplsTransitUnidirTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 4)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelOamFaulted"))
if mibBuilder.loadTexts: cienaCesGmplsTransitUnidirTunnelOperStateChgTrap.setStatus('current')
cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 5)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelOamFaulted"))
if mibBuilder.loadTexts: cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap.setStatus('current')
cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 6)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType"))
if mibBuilder.loadTexts: cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap.setStatus('current')
cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 7)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType"))
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap.setStatus('current')
cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 8)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType"))
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap.setStatus('current')
cienaCesGmplsAssociatedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 9)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelOperStateChgTrap.setStatus('current')
cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 10)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelAisFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelFaultedNodeId"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelFarEndLerId"))
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap.setStatus('obsolete')
cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 11)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelAisFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelFaultedNodeId"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelFarEndLerId"))
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap.setStatus('obsolete')
cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 12)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelAisFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelFaultedNodeId"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelFarEndLerId"))
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap.setStatus('obsolete')
cienaCesGmplsTunnelAisFaultErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 13)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTunnelDecapLabel"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTunnelErrorMsg"))
if mibBuilder.loadTexts: cienaCesGmplsTunnelAisFaultErrorTrap.setStatus('current')
cienaCesGmplsEncapTunnelResizeResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 14)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelResult"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelProtectionRole"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelRequestedBw"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOperationalBw"))
if mibBuilder.loadTexts: cienaCesGmplsEncapTunnelResizeResultTrap.setStatus('current')
cienaCesGmplsEncapTunnelMbbResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 15)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelResult"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelProtectionRole"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelRequestedBw"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOperationalBw"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelMbbParentApp"))
if mibBuilder.loadTexts: cienaCesGmplsEncapTunnelMbbResultTrap.setStatus('current')
cienaCesMplsAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1))
cienaCesMplsGlobalStaticAdminLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminLabelRangeStart.setStatus('current')
cienaCesMplsGlobalStaticAdminLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminLabelRangeEnd.setStatus('current')
cienaCesMplsGlobalStaticOperLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperLabelRangeStart.setStatus('current')
cienaCesMplsGlobalStaticOperLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperLabelRangeEnd.setStatus('current')
cienaCesMplsGlobalDynamicAdminLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicAdminLabelRangeStart.setStatus('current')
cienaCesMplsGlobalDynamicAdminLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicAdminLabelRangeEnd.setStatus('current')
cienaCesMplsGlobalDynamicOperLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicOperLabelRangeStart.setStatus('current')
cienaCesMplsGlobalDynamicOperLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicOperLabelRangeEnd.setStatus('current')
cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart.setStatus('current')
cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd.setStatus('current')
cienaCesMplsGlobalStaticOperTunnelLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperTunnelLabelRangeStart.setStatus('current')
cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd.setStatus('current')
cienaCesMplsGlobalStaticAdminVcLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminVcLabelRangeStart.setStatus('current')
cienaCesMplsGlobalStaticAdminVcLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminVcLabelRangeEnd.setStatus('current')
cienaCesMplsGlobalStaticOperVcLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperVcLabelRangeStart.setStatus('current')
cienaCesMplsGlobalStaticOperVcLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperVcLabelRangeEnd.setStatus('current')
cienaCesMplsGlobalNextFreeStaticVcLabel = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalNextFreeStaticVcLabel.setStatus('current')
cienaCesMplsTunnelCosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2), )
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileTable.setStatus('current')
cienaCesMplsTunnelCosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsTunnelCosProfileIndex"))
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileEntry.setStatus('current')
cienaCesMplsTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileIndex.setStatus('current')
cienaCesMplsTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileName.setStatus('current')
cienaCesMplsTunnelFrmCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 3), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosPolicy.setStatus('current')
cienaCesMplsTunnelFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosMapId.setStatus('current')
cienaCesMplsTunnelFrmCosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosMapName.setStatus('current')
cienaCesMplsTunnelFixedTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelFixedTC.setStatus('current')
cienaCesMplsTunnelRcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 7), RCosPolicy().clone('exp-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosPolicy.setStatus('current')
cienaCesMplsTunnelRcosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosMapName.setStatus('current')
cienaCesMplsTunnelRCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRCosMapId.setStatus('current')
cienaCesMplsTunnelRcosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosProfileName.setStatus('current')
cienaCesMplsTunnelRCosProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRCosProfileId.setStatus('current')
cienaCesMplsGlobalTunnelPath = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3))
cienaCesMplsGlobalTunnelPathTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1), )
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathTable.setStatus('current')
cienaCesMplsGlobalTunnelPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsGlobalTunnelPathIndex"))
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathEntry.setStatus('current')
cienaCesMplsGlobalTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathIndex.setStatus('current')
cienaCesMplsGlobalTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathName.setStatus('current')
cienaCesMplsGlobalTunnelPathUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathUseCount.setStatus('current')
cienaCesMplsGlobalTunnelPathHopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2), )
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopTable.setStatus('current')
cienaCesMplsGlobalTunnelPathHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsGlobalTunnelPathIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsGlobalTunnelPathHopIndex"))
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopEntry.setStatus('current')
cienaCesMplsGlobalTunnelPathHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopIndex.setStatus('current')
cienaCesMplsGlobalTunnelPathHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopIpAddr.setStatus('current')
cienaCesMplsGlobalTunnelPathHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2))).clone('strict')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopType.setStatus('current')
cienaCesMplsGlobalFreeStaticTunnelLabelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 4), )
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelTable.setStatus('current')
cienaCesMplsGlobalFreeStaticTunnelLabelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 4, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsGlobalFreeStaticTunnelLabelIndex"))
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelEntry.setStatus('current')
cienaCesMplsGlobalFreeStaticTunnelLabelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelIndex.setStatus('current')
cienaCesMplsGlobalFreeStaticTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabel.setStatus('current')
cienaCesTeLinkTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1), )
if mibBuilder.loadTexts: cienaCesTeLinkTable.setStatus('current')
cienaCesTeLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesTeIfIndex"))
if mibBuilder.loadTexts: cienaCesTeLinkEntry.setStatus('current')
cienaCesTeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesTeIfIndex.setStatus('current')
cienaCesTeInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeInterfaceName.setStatus('current')
cienaCesTeLinkMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkMetric.setStatus('current')
cienaCesTeResourceColorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupIndex.setStatus('current')
cienaCesTeResourceColorBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorBitMask.setStatus('current')
cienaCesMplsClassProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassProfIndex.setStatus('current')
cienaCesTeLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 7), TEMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkMode.setStatus('current')
cienaCesTeLinkSrlgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkSrlgCount.setStatus('current')
cienaCesTeLinkMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 9), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkMaximumBandwidth.setStatus('current')
cienaCesTeLinkMaximumReservableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 10), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkMaximumReservableBandwidth.setStatus('current')
cienaCesTeLinkTotalBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 11), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio0.setStatus('current')
cienaCesTeLinkReservedBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 12), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio0.setStatus('current')
cienaCesTeLinkUnReservedBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 13), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio0.setStatus('current')
cienaCesTeLinkTotalBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 14), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio1.setStatus('current')
cienaCesTeLinkReservedBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 15), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio1.setStatus('current')
cienaCesTeLinkUnReservedBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 16), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio1.setStatus('current')
cienaCesTeLinkTotalBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 17), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio2.setStatus('current')
cienaCesTeLinkReservedBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 18), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio2.setStatus('current')
cienaCesTeLinkUnReservedBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 19), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio2.setStatus('current')
cienaCesTeLinkTotalBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 20), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio3.setStatus('current')
cienaCesTeLinkReservedBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 21), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio3.setStatus('current')
cienaCesTeLinkUnReservedBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 22), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio3.setStatus('current')
cienaCesTeLinkTotalBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 23), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio4.setStatus('current')
cienaCesTeLinkReservedBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 24), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio4.setStatus('current')
cienaCesTeLinkUnReservedBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 25), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio4.setStatus('current')
cienaCesTeLinkTotalBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 26), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio5.setStatus('current')
cienaCesTeLinkReservedBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 27), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio5.setStatus('current')
cienaCesTeLinkUnReservedBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 28), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio5.setStatus('current')
cienaCesTeLinkTotalBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 29), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio6.setStatus('current')
cienaCesTeLinkReservedBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 30), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio6.setStatus('current')
cienaCesTeLinkUnReservedBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 31), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio6.setStatus('current')
cienaCesTeLinkTotalBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 32), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio7.setStatus('current')
cienaCesTeLinkReservedBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 33), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio7.setStatus('current')
cienaCesTeLinkUnReservedBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 34), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio7.setStatus('current')
cienaCesTeResourceGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2), )
if mibBuilder.loadTexts: cienaCesTeResourceGrpTable.setStatus('current')
cienaCesTeResGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesTeResourceColorGrpIndex"))
if mibBuilder.loadTexts: cienaCesTeResGrpEntry.setStatus('current')
cienaCesTeResourceColorGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: cienaCesTeResourceColorGrpIndex.setStatus('current')
cienaCesTeResourceGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceGrpName.setStatus('current')
cienaCesTeResourceColorGroupBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupBitMask.setStatus('current')
cienaCesTeResourceColorGroupUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupUseCount.setStatus('current')
cienaCesTeResourceColorsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3), )
if mibBuilder.loadTexts: cienaCesTeResourceColorsTable.setStatus('current')
cienaCesTeResColorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesTeResourceColorGrpIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesTeResourceColorIndex"))
if mibBuilder.loadTexts: cienaCesTeResColorEntry.setStatus('current')
cienaCesTeResourceColorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cienaCesTeResourceColorIndex.setStatus('current')
cienaCesTeResourceColorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorName.setStatus('current')
cienaCesTeResourceColorBit = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorBit.setStatus('current')
cienaCesTeResourceColorUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorUseCount.setStatus('current')
cienaCesTeLinkSrlgTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 4), )
if mibBuilder.loadTexts: cienaCesTeLinkSrlgTable.setStatus('current')
cienaCesTeLinkSrlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 4, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesTeIfIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesTeLinkSrlg"))
if mibBuilder.loadTexts: cienaCesTeLinkSrlgEntry.setStatus('current')
cienaCesTeLinkSrlg = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: cienaCesTeLinkSrlg.setStatus('current')
cienaCesTeLinkSrlgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 4, 1, 2), SRLGState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkSrlgStatus.setStatus('current')
cienaCesMplsPwTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1), )
if mibBuilder.loadTexts: cienaCesMplsPwTable.setStatus('current')
cienaCesMplsPwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPwIndex"))
if mibBuilder.loadTexts: cienaCesMplsPwEntry.setStatus('current')
cienaCesMplsPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsPwIndex.setStatus('current')
cienaCesMplsPwSignallingType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwSignallingType.setStatus('current')
cienaCesMplsPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwId.setStatus('current')
cienaCesMplsPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwName.setStatus('current')
cienaCesMplsPwCustomerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCustomerName.setStatus('current')
cienaCesMplsPwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwAdminState.setStatus('current')
cienaCesMplsPwOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwOperState.setStatus('current')
cienaCesMplsPwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwPeerIpAddr.setStatus('current')
cienaCesMplsPwInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwInLabel.setStatus('current')
cienaCesMplsPwOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwOutLabel.setStatus('current')
cienaCesMplsPwStatusTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwStatusTlv.setStatus('current')
cienaCesMplsPwRefreshStatusIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRefreshStatusIntvl.setStatus('current')
cienaCesMplsPwLocalFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 13), VCStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwLocalFault.setStatus('current')
cienaCesMplsPwRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 14), VCStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRemoteFault.setStatus('current')
cienaCesMplsPwMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1500, 9128)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwMtu.setStatus('current')
cienaCesMplsPwType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("raw", 1), ("tagged", 2), ("tdm", 3))).clone('raw')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwType.setStatus('current')
cienaCesMplsPwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mesh", 1), ("spoke", 2), ("switching", 3))).clone('mesh')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwMode.setStatus('current')
cienaCesMplsPwCoSProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCoSProfileName.setStatus('current')
cienaCesMplsPwCoSProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCoSProfileIndex.setStatus('current')
cienaCesMplsPwEgressL2PtTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 20), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwEgressL2PtTransform.setStatus('current')
cienaCesMplsPwVccVProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccVProfileName.setStatus('current')
cienaCesMplsPwVccVProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccVProfileIndex.setStatus('current')
cienaCesMplsPwLocalCcCv = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwLocalCcCv.setStatus('current')
cienaCesMplsPwRemoteCcCv = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRemoteCcCv.setStatus('current')
cienaCesMplsPwOperatingCcCv = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwOperatingCcCv.setStatus('current')
cienaCesMplsPwBlocking = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwBlocking.setStatus('current')
cienaCesMplsPwVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32769, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVifIndex.setStatus('current')
cienaCesMplsPwConfigTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelName.setStatus('current')
cienaCesMplsPwConfigTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 29), TunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelType.setStatus('current')
cienaCesMplsPwConfigTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelIndex.setStatus('current')
cienaCesMplsPwActiveTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelName.setStatus('current')
cienaCesMplsPwActiveTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 32), TunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelType.setStatus('current')
cienaCesMplsPwActiveTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelIndex.setStatus('current')
cienaCesMplsPwRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("stand-alone", 3))).clone('primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRole.setStatus('deprecated')
cienaCesMplsPwPrimaryPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwPrimaryPwName.setStatus('current')
cienaCesMplsPwPrimaryPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwPrimaryPwIndex.setStatus('current')
cienaCesMplsPwVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVsIndex.setStatus('current')
cienaCesServiceDelimiterVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesServiceDelimiterVID.setStatus('deprecated')
cienaCesServiceDelimiterTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesServiceDelimiterTPID.setStatus('deprecated')
cienaCesMplsPwReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwReversion.setStatus('current')
cienaCesMplsPwRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRevertTime.setStatus('current')
cienaCesMplsPwProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary-pseudowire", 1), ("backup-pseudowire", 2), ("stand-alone-pseudowire", 3))).clone('stand-alone-pseudowire')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwProtectionRole.setStatus('current')
cienaCesMplsPwProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-applicable", 1), ("active", 2), ("standby", 3), ("man-swo-active", 4), ("man-swo-standby", 5), ("pw-reversion-pending", 6), ("pw-activation-pending", 7))).clone('not-applicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwProtectionState.setStatus('current')
cienaCesMplsPwVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVsName.setStatus('current')
cienaCesMplsPwStatusQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwStatusQuery.setStatus('current')
cienaCesMplsMsPwPeerPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsMsPwPeerPwName.setStatus('current')
cienaCesMplsMsPwPeerPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsMsPwPeerPwIndex.setStatus('current')
cienaCesMplsPwIdInRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwIdInRemoteFault.setStatus('current')
cienaCesMplsLocalIpInRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 49), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsLocalIpInRemoteFault.setStatus('current')
cienaCesMplsRemoteIpInRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 50), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsRemoteIpInRemoteFault.setStatus('current')
cienaCesMplsPwFaultToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 51), VCStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwFaultToNextHop.setStatus('current')
cienaCesMplsPwIdInFaultToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwIdInFaultToNextHop.setStatus('current')
cienaCesMplsLocalIpInFaultToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 53), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsLocalIpInFaultToNextHop.setStatus('current')
cienaCesMplsRemoteIpInFaultToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 54), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsRemoteIpInFaultToNextHop.setStatus('current')
cienaCesMplsPwConfigBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 55), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwConfigBandwidth.setStatus('current')
cienaCesMplsPwOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 56), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwOperBandwidth.setStatus('current')
cienaCesMplsPwBandwidthState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("configured", 2), ("notRequired", 3), ("admitted", 4), ("acquired", 5), ("rejected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwBandwidthState.setStatus('current')
cienaCesMplsPwCosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2), )
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileTable.setStatus('current')
cienaCesMplsPwCosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPwCosProfileIndex"))
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileEntry.setStatus('current')
cienaCesMplsPwCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileIndex.setStatus('current')
cienaCesMplsPwCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileName.setStatus('current')
cienaCesMplsPwCosProfileFrmCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 3), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosPolicy.setStatus('current')
cienaCesMplsPwCosProfileFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosMapId.setStatus('current')
cienaCesMplsPwCosProfileFrmCosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosMapName.setStatus('current')
cienaCesMplsPwCosProfileFixedTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFixedTC.setStatus('current')
cienaCesMplsPwCosProfileRcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 7), RCosPolicy().clone('exp-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosPolicy.setStatus('current')
cienaCesMplsPwCosProfileRcosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosMapName.setStatus('current')
cienaCesMplsPwCosProfileRCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosMapId.setStatus('current')
cienaCesMplsPwCosProfileRcosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosProfileName.setStatus('current')
cienaCesMplsPwCosProfileRCosProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosProfileId.setStatus('current')
cienaCesMplsPwCosProfileRCosFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosFixed.setStatus('current')
cienaCesMplsPwVccvProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3), )
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileTable.setStatus('current')
cienaCesMplsPwVccvProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPwVccvProfileIndex"))
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileEntry.setStatus('current')
cienaCesMplsPwVccvProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileIndex.setStatus('current')
cienaCesMplsPwVccvProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileName.setStatus('current')
cienaCesMplsPwVccvProfileCcTtlExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileCcTtlExp.setStatus('current')
cienaCesMplsPwVccvProfileCcCienaOob = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileCcCienaOob.setStatus('current')
cienaCesMplsPwNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4))
cienaCesMplsPwNotifTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1), )
if mibBuilder.loadTexts: cienaCesMplsPwNotifTable.setStatus('current')
cienaCesMplsPwNotifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwIndex"))
if mibBuilder.loadTexts: cienaCesMplsPwNotifEntry.setStatus('current')
cienaCesMplsPwNotifPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwIndex.setStatus('current')
cienaCesMplsPwNotifPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwId.setStatus('current')
cienaCesMplsPwNotifPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwName.setStatus('current')
cienaCesMplsPwNotifPwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 4), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwPeerIpAddr.setStatus('current')
cienaCesMplsPwNotifPriPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwId.setStatus('current')
cienaCesMplsPwNotifPriPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwName.setStatus('current')
cienaCesMplsPwNotifPriPwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwPeerIpAddr.setStatus('current')
cienaCesMplsPwNotifActPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwIndex.setStatus('current')
cienaCesMplsPwNotifActPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwId.setStatus('current')
cienaCesMplsPwNotifActPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwName.setStatus('current')
cienaCesMplsPwNotifActPwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwPeerIpAddr.setStatus('current')
cienaCesMplsPwDown = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 2, 1)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwId"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwPeerIpAddr"))
if mibBuilder.loadTexts: cienaCesMplsPwDown.setStatus('current')
cienaCesMplsPwUp = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 2, 2)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwId"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwPeerIpAddr"))
if mibBuilder.loadTexts: cienaCesMplsPwUp.setStatus('current')
cienaCesMplsPwBundleActivePwChange = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 2, 3)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifActPwIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifActPwName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifActPwId"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifActPwPeerIpAddr"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPriPwName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPriPwId"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPriPwPeerIpAddr"))
if mibBuilder.loadTexts: cienaCesMplsPwBundleActivePwChange.setStatus('current')
cienaCesMplsPWTrafficStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5), )
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsTable.setStatus('current')
cienaCesMplsPWTrafficStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPWTrafficStatsPWIndex"))
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsEntry.setStatus('current')
cienaCesMplsPWTrafficStatsPWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsPWIndex.setStatus('current')
cienaCesMplsPWTrafficStatsIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsIncomingPackets.setStatus('current')
cienaCesMplsPWTrafficStatsOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsOutgoingPackets.setStatus('current')
cienaCesMplsPWTrafficStatsIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsIncomingBytes.setStatus('current')
cienaCesMplsPWTrafficStatsOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsOutgoingBytes.setStatus('current')
mibBuilder.exportSymbols("CIENA-CES-MPLS-MIB", cienaCesTeLinkUnReservedBandwidthPrio6=cienaCesTeLinkUnReservedBandwidthPrio6, cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted=cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted, cienaCesMplsStaticTransitTunnelOperState=cienaCesMplsStaticTransitTunnelOperState, cienaCesMplsDynamicEgressTunnelName=cienaCesMplsDynamicEgressTunnelName, cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth, cienaCesMplsPwNotifPwIndex=cienaCesMplsPwNotifPwIndex, cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr=cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr, cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel=cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel, cienaCesTeLinkReservedBandwidthPrio2=cienaCesTeLinkReservedBandwidthPrio2, cienaCesMplsDynamicIngressTunnelPathIndex=cienaCesMplsDynamicIngressTunnelPathIndex, cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName=cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName, cienaCesMplsPwIdInFaultToNextHop=cienaCesMplsPwIdInFaultToNextHop, cienaMplsTunnelARHopListIndex=cienaMplsTunnelARHopListIndex, cienaCesGmplsNotifTunnelDecapLabel=cienaCesGmplsNotifTunnelDecapLabel, cienaCesMplsAssociatedTunnelProtectionPartnerName=cienaCesMplsAssociatedTunnelProtectionPartnerName, cienaCesGmplsDynamicIngressUniDirTunnelName=cienaCesGmplsDynamicIngressUniDirTunnelName, cienaCesMplsDynamicIngressTunnelReversion=cienaCesMplsDynamicIngressTunnelReversion, cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr=cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr, cienaCesGmplsStaticIngressUniDirTunnelOperState=cienaCesGmplsStaticIngressUniDirTunnelOperState, cienaCesTeResourceColorGrpIndex=cienaCesTeResourceColorGrpIndex, cienaCesMplsPwConfigBandwidth=cienaCesMplsPwConfigBandwidth, cienaCesMplsPwNotifTable=cienaCesMplsPwNotifTable, cienaCesMplsNotifEncapTunnelFaultedNodeId=cienaCesMplsNotifEncapTunnelFaultedNodeId, cienaCesMplsPwCosProfileRcosMapName=cienaCesMplsPwCosProfileRcosMapName, cienaCesGmplsNotifDecapTunnelEntry=cienaCesGmplsNotifDecapTunnelEntry, cienaCesGmplsNotifEncapTunnelProtectionRole=cienaCesGmplsNotifEncapTunnelProtectionRole, cienaCesMplsClassTypeAlarmThreshold=cienaCesMplsClassTypeAlarmThreshold, cienaCesGmplsNotifDecapTunnelIndex=cienaCesGmplsNotifDecapTunnelIndex, cienaCesGmplsNotifTunnelAisFaultErrorEntry=cienaCesGmplsNotifTunnelAisFaultErrorEntry, cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel=cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel, cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring=cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring, cienaCesGmplsNotifDecapTunnelGrpEntry=cienaCesGmplsNotifDecapTunnelGrpEntry, cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap=cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap, cienaCesGmplsStaticEgressCoroutedTunnelEntry=cienaCesGmplsStaticEgressCoroutedTunnelEntry, cienaCesMplsStaticOperLabelRangeStart=cienaCesMplsStaticOperLabelRangeStart, cienaCesMplsStaticIngressTunnelGrpIndex=cienaCesMplsStaticIngressTunnelGrpIndex, cienaCesMplsMIBNotificationPrefix=cienaCesMplsMIBNotificationPrefix, cienaCesMplsDynamicIngressTunnelGrpIndex=cienaCesMplsDynamicIngressTunnelGrpIndex, cienaCesMplsStaticEgressTunnelAdminState=cienaCesMplsStaticEgressTunnelAdminState, cienaCesMplsStaticIngressTunnelReversionTimeout=cienaCesMplsStaticIngressTunnelReversionTimeout, cienaCesMplsTunnelPathHopTable=cienaCesMplsTunnelPathHopTable, cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange=cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange, cienaCesMplsStaticIngressTunnelIndex=cienaCesMplsStaticIngressTunnelIndex, cienaCesGmplsAssociatedTunnelEntry=cienaCesGmplsAssociatedTunnelEntry, cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName=cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName, cienaCesGmplsNotifTransitTunnelAdminState=cienaCesGmplsNotifTransitTunnelAdminState, cienaCesTeLinkReservedBandwidthPrio7=cienaCesTeLinkReservedBandwidthPrio7, cienaCesMplsNotifCacInterfaceIndex=cienaCesMplsNotifCacInterfaceIndex, cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr=cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr, cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName=cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName, cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes=cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes, cienaCesMplsGlobalAttrs=cienaCesMplsGlobalAttrs, cienaCesMplsPwPrimaryPwName=cienaCesMplsPwPrimaryPwName, cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd=cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd, cienaCesTeLinkUnReservedBandwidthPrio2=cienaCesTeLinkUnReservedBandwidthPrio2, cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes=cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes, cienaCesMplsPwConfigTunnelType=cienaCesMplsPwConfigTunnelType, cienaCesTeInterfaceName=cienaCesTeInterfaceName, cienaCesMplsStaticTransitTunnelAdminState=cienaCesMplsStaticTransitTunnelAdminState, cienaCesMplsPwMode=cienaCesMplsPwMode, cienaCesMplsNotifAssociatedTunnelIndex=cienaCesMplsNotifAssociatedTunnelIndex, cienaCesTeLinkTotalBandwidthPrio2=cienaCesTeLinkTotalBandwidthPrio2, cienaCesMplsDynamicTransitTunnelTable=cienaCesMplsDynamicTransitTunnelTable, cienaCesGmplsDynamicEgressCoroutedTunnelReversion=cienaCesGmplsDynamicEgressCoroutedTunnelReversion, cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL=cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL, cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority=cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority, cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex=cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex, cienaCesMplsDynamicTransitTunnelIncomingPackets=cienaCesMplsDynamicTransitTunnelIncomingPackets, cienaCesMplsDynamicTransitTunnelIndex=cienaCesMplsDynamicTransitTunnelIndex, cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes=cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes, cienaCesTeLinkSrlgStatus=cienaCesTeLinkSrlgStatus, cienaCesMplsTunnelRcosProfileName=cienaCesMplsTunnelRcosProfileName, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable, cienaGmplsTunnelARHopListIndex=cienaGmplsTunnelARHopListIndex, cienaCesGmplsAssociatedForwardTunnelType=cienaCesGmplsAssociatedForwardTunnelType, cienaCesGmplsNotifDecapTunnelOamFaulted=cienaCesGmplsNotifDecapTunnelOamFaulted, cienaCesMplsDynamicEgressTunnelIndex=cienaCesMplsDynamicEgressTunnelIndex, cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted=cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted, cienaCesGmplsNotifDecapTunnelAdminState=cienaCesGmplsNotifDecapTunnelAdminState, cienaCesGmplsStaticIngressCoroutedTunnelIndex=cienaCesGmplsStaticIngressCoroutedTunnelIndex, cienaCesMplsPwCosProfileRcosProfileName=cienaCesMplsPwCosProfileRcosProfileName, cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr=cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr, cienaCesMplsNotifAssociatedTunnelTable=cienaCesMplsNotifAssociatedTunnelTable, cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr=cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr, cienaCesGmplsAssociatedTunnelIndex=cienaCesGmplsAssociatedTunnelIndex, cienaCesMplsStaticTransitTunnelSourceIpAddr=cienaCesMplsStaticTransitTunnelSourceIpAddr, cienaCesGmplsMIBNotifications=cienaCesGmplsMIBNotifications, TEMode=TEMode, cienaCesMplsStaticEgressTunnelIndex=cienaCesMplsStaticEgressTunnelIndex, cienaCesMplsStaticTransitTunnelInLabel=cienaCesMplsStaticTransitTunnelInLabel, cienaCesGmplsStaticTransitCoroutedTunnelName=cienaCesGmplsStaticTransitCoroutedTunnelName, cienaCesMplsNotifEncapTunnelGrpName=cienaCesMplsNotifEncapTunnelGrpName, cienaCesGmplsStaticEgressUniDirTunnelEntry=cienaCesGmplsStaticEgressUniDirTunnelEntry, cienaCesTeResourceColorGroupUseCount=cienaCesTeResourceColorGroupUseCount, cienaCesGmplsDynamicEgressCoroutedTunnelName=cienaCesGmplsDynamicEgressCoroutedTunnelName, cienaCesGmplsAssociatedBfdProfileName=cienaCesGmplsAssociatedBfdProfileName, cienaCesMplsDynamicIngressTunnelProtectionPartnerName=cienaCesMplsDynamicIngressTunnelProtectionPartnerName, cienaCesMplsAssociatedForwardTunnelType=cienaCesMplsAssociatedForwardTunnelType, cienaCesMplsAssociatedBfdMonitoring=cienaCesMplsAssociatedBfdMonitoring, cienaCesMplsStaticEgressTunnelTable=cienaCesMplsStaticEgressTunnelTable, cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout=cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout, cienaCesGmplsNotifDecapTunnelTable=cienaCesGmplsNotifDecapTunnelTable, TunnelOamFault=TunnelOamFault, cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex=cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex, cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout=cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout, cienaCesTeResourceColorBitMask=cienaCesTeResourceColorBitMask, cienaCesMplsAssociatedDynamicTunnelSrcIpAddr=cienaCesMplsAssociatedDynamicTunnelSrcIpAddr, cienaCesGmplsAssociatedReverseTunnelType=cienaCesGmplsAssociatedReverseTunnelType, cienaCesGmplsDynamicEgressCoroutedTunnelAdminState=cienaCesGmplsDynamicEgressCoroutedTunnelAdminState, cienaCesGmplsAssociatedTunnelOperState=cienaCesGmplsAssociatedTunnelOperState, cienaCesGmplsEncapTunnelNotif=cienaCesGmplsEncapTunnelNotif, cienaCesGmplsNotifEncapTunnelOperState=cienaCesGmplsNotifEncapTunnelOperState, cienaCesMplsStaticTransitTunnelEntry=cienaCesMplsStaticTransitTunnelEntry, cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex=cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex, cienaCesGmplsNotifDecapTunnelGrpIndex=cienaCesGmplsNotifDecapTunnelGrpIndex, cienaCesMplsPwSignallingType=cienaCesMplsPwSignallingType, cienaCesGmplsAssociatedBfdSessionName=cienaCesGmplsAssociatedBfdSessionName, AutoSizeFailHdlr=AutoSizeFailHdlr, cienaCesTeLinkSrlg=cienaCesTeLinkSrlg, cienaCesMplsNotifCacInterfaceClassType=cienaCesMplsNotifCacInterfaceClassType, cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth, VCState=VCState, cienaCesGmplsNotifDecapTunnelGrpTable=cienaCesGmplsNotifDecapTunnelGrpTable, cienaCesMplsPwProtectionRole=cienaCesMplsPwProtectionRole, cienaCesMplsPwName=cienaCesMplsPwName, cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName=cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName, cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr=cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr, cienaCesGmplsNotifAssociatedTunnelIndex=cienaCesGmplsNotifAssociatedTunnelIndex, cienaCesMplsPwVccvProfileName=cienaCesMplsPwVccvProfileName, cienaCesMplsStaticTransitTunnelFrmCosMapId=cienaCesMplsStaticTransitTunnelFrmCosMapId, cienaCesGmpls=cienaCesGmpls, cienaCesMplsNotifTransitTunnelTable=cienaCesMplsNotifTransitTunnelTable, cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL=cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL, cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel=cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel, cienaCesGmplsAssociatedProtectionRole=cienaCesGmplsAssociatedProtectionRole, cienaCesMplsAssociatedTunnelTable=cienaCesMplsAssociatedTunnelTable, cienaCesMplsPwStatusQuery=cienaCesMplsPwStatusQuery, cienaCesGmplsDynamicIngressUniDirTunnelEntry=cienaCesGmplsDynamicIngressUniDirTunnelEntry, cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId=cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId, cienaCesGmplsTransitTunnelNotif=cienaCesGmplsTransitTunnelNotif, cienaCesGmplsStaticEgressUniDirTunnelName=cienaCesGmplsStaticEgressUniDirTunnelName, cienaCesMplsDynamicIngressTunnelProtectionRole=cienaCesMplsDynamicIngressTunnelProtectionRole, cienaCesGmplsAssociatedTunnelProtectionPartnerName=cienaCesGmplsAssociatedTunnelProtectionPartnerName, cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex=cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex, cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap=cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap, cienaCesGmplsStaticTransitCoroutedTunnelEntry=cienaCesGmplsStaticTransitCoroutedTunnelEntry, cienaCesMplsNotifEncapTunnelName=cienaCesMplsNotifEncapTunnelName, cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted=cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted, cienaCesMplsTunnelARHopTable=cienaCesMplsTunnelARHopTable, cienaCesMplsStaticIngressTunnelAdminState=cienaCesMplsStaticIngressTunnelAdminState, cienaCesMplsPwType=cienaCesMplsPwType, cienaMplsTunnelARHopIndex=cienaMplsTunnelARHopIndex, cienaCesMplsGlobalTunnelPathHopEntry=cienaCesMplsGlobalTunnelPathHopEntry, cienaCesMplsDynamicTransitTunnelOutgoingPackets=cienaCesMplsDynamicTransitTunnelOutgoingPackets, cienaCesTeLinkMetric=cienaCesTeLinkMetric, cienaCesGmplsStaticEgressCoroutedTunnelTable=cienaCesGmplsStaticEgressCoroutedTunnelTable, cienaCesGmplsStaticIngressUniDirTunnelAdminState=cienaCesGmplsStaticIngressUniDirTunnelAdminState, cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted=cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted, cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName=cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName, cienaCesMplsStaticTransitTunnelOutgoingPackets=cienaCesMplsStaticTransitTunnelOutgoingPackets, cienaCesMplsPwEntry=cienaCesMplsPwEntry, cienaCesMplsAssociatedTunnelName=cienaCesMplsAssociatedTunnelName, cienaCesMplsGlobalFreeStaticTunnelLabel=cienaCesMplsGlobalFreeStaticTunnelLabel, cienaCesMplsAssociatedReverseTunnelType=cienaCesMplsAssociatedReverseTunnelType, cienaCesGmplsNotifEncapTunnelAdminState=cienaCesGmplsNotifEncapTunnelAdminState, cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel=cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel, cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole=cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole, PrivateForwardGroup=PrivateForwardGroup, cienaCesGmplsDynamicEgressUniDirTunnelEntry=cienaCesGmplsDynamicEgressUniDirTunnelEntry, cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr=cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr, cienaCesMplsTunnelPathUseCount=cienaCesMplsTunnelPathUseCount, cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr=cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr, cienaCesGmplsNotifEncapTunnelGrpName=cienaCesGmplsNotifEncapTunnelGrpName, cienaCesMplsTunnelCosProfileIndex=cienaCesMplsTunnelCosProfileIndex, cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets=cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets, cienaCesMplsNotifCacInterfaceThreshold=cienaCesMplsNotifCacInterfaceThreshold, cienaCesMplsPwRefreshStatusIntvl=cienaCesMplsPwRefreshStatusIntvl, cienaCesGmplsTunnelAisFaultErrorNotif=cienaCesGmplsTunnelAisFaultErrorNotif, cienaCesMplsPwActiveTunnelType=cienaCesMplsPwActiveTunnelType, AutoSizeMode=AutoSizeMode, cienaCesGmplsDynamicTransitCoroutedTunnelIndex=cienaCesGmplsDynamicTransitCoroutedTunnelIndex, cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum=cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum, cienaCesMplsNotifEncapTunnelIndex=cienaCesMplsNotifEncapTunnelIndex, cienaCesMplsPwOperatingCcCv=cienaCesMplsPwOperatingCcCv, cienaCesGmplsDynamicIngressCoroutedTunnelAdminState=cienaCesGmplsDynamicIngressCoroutedTunnelAdminState, cienaCesGmplsDynamicIngressCoroutedTunnelClassType=cienaCesGmplsDynamicIngressCoroutedTunnelClassType, cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr=cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr, cienaCesGmplsStaticTransitCoroutedTunnelTable=cienaCesGmplsStaticTransitCoroutedTunnelTable, cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes=cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes, cienaCesMplsDynamicIngressTunnelCosProfileIndex=cienaCesMplsDynamicIngressTunnelCosProfileIndex, cienaCesGmplsStaticIngressUniDirTunnelTable=cienaCesGmplsStaticIngressUniDirTunnelTable, cienaCesMplsStaticEgressTunnelEntry=cienaCesMplsStaticEgressTunnelEntry, cienaCesMplsPwCosProfileRCosFixed=cienaCesMplsPwCosProfileRCosFixed, cienaCesGmplsDynamicIngressCoroutedLspId=cienaCesGmplsDynamicIngressCoroutedLspId, cienaCesGmplsDynamicTransitCoroutedTunnelOperState=cienaCesGmplsDynamicTransitCoroutedTunnelOperState, cienaCesMplsPWTrafficStatsTable=cienaCesMplsPWTrafficStatsTable, cienaCesGmplsEncapTunnelMbbResultTrap=cienaCesGmplsEncapTunnelMbbResultTrap, cienaCesTeResGrpEntry=cienaCesTeResGrpEntry, cienaCesMplsNotifAssociatedTunnelFaultedNodeId=cienaCesMplsNotifAssociatedTunnelFaultedNodeId, cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex=cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex, cienaCesGmplsNotifAssociatedTunnelAdminState=cienaCesGmplsNotifAssociatedTunnelAdminState, cienaCesMplsPwCosProfileEntry=cienaCesMplsPwCosProfileEntry, cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL=cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL, cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer=cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode, cienaCesTeLinkUnReservedBandwidthPrio3=cienaCesTeLinkUnReservedBandwidthPrio3, cienaCesMplsStaticIngressTunnelTable=cienaCesMplsStaticIngressTunnelTable, cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth, cienaCesMplsPwRemoteCcCv=cienaCesMplsPwRemoteCcCv, cienaCesGmplsNotifAssociatedTunnelAisFaulted=cienaCesGmplsNotifAssociatedTunnelAisFaulted, cienaCesMplsDynamicIngressUniDirTunnelLspId=cienaCesMplsDynamicIngressUniDirTunnelLspId, cienaCesMplsDynamicTransitTunnelOperState=cienaCesMplsDynamicTransitTunnelOperState, cienaCesMplsAssociatedTunnelAdminState=cienaCesMplsAssociatedTunnelAdminState, cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr=cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr, cienaCesGmplsEncapTunnelResizeResultTrap=cienaCesGmplsEncapTunnelResizeResultTrap, cienaCesMplsPwRemoteFault=cienaCesMplsPwRemoteFault, cienaCesMpls=cienaCesMpls, cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd=cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd, cienaCesMplsStaticIngressTunnelOperState=cienaCesMplsStaticIngressTunnelOperState, cienaCesGmplsDecapTunnelGrpNotif=cienaCesGmplsDecapTunnelGrpNotif, cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring=cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring, cienaCesMplsDynamicIngressTunnelLspId=cienaCesMplsDynamicIngressTunnelLspId, cienaCesGmplsStaticIngressCoroutedTunnelLspId=cienaCesGmplsStaticIngressCoroutedTunnelLspId, cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel=cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel, cienaCesGmplsNotifDecapTunnelName=cienaCesGmplsNotifDecapTunnelName, cienaCesGmplsDynamicIngressUniDirTunnelPathIndex=cienaCesGmplsDynamicIngressUniDirTunnelPathIndex, cienaCesMplsStaticIngressTunnelPrimaryTunnelName=cienaCesMplsStaticIngressTunnelPrimaryTunnelName, cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy=cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy, cienaCesMplsNotifEncapTunnelOamFaulted=cienaCesMplsNotifEncapTunnelOamFaulted, cienaCesMplsTunnelFrmCosMapName=cienaCesMplsTunnelFrmCosMapName, cienaCesMplsTunnelFixedTC=cienaCesMplsTunnelFixedTC, cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr=cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr, cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName=cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName, cienaCesGmplsDynamicIngressCoroutedTunnelTable=cienaCesGmplsDynamicIngressCoroutedTunnelTable, cienaCesMplsAssociatedTunnelEntry=cienaCesMplsAssociatedTunnelEntry, cienaCesGmplsDynamicEgressUniDirLspId=cienaCesGmplsDynamicEgressUniDirLspId, PYSNMP_MODULE_ID=cienaCesMplsMIB, cienaCesGmplsNotifEncapTunnelEntry=cienaCesGmplsNotifEncapTunnelEntry, cienaCesMplsStaticIngressTunnelFrmCosMapId=cienaCesMplsStaticIngressTunnelFrmCosMapId, cienaCesMplsDynamicTransitTunnelOutLabel=cienaCesMplsDynamicTransitTunnelOutLabel, cienaCesGmplsAssociatedProtectionState=cienaCesGmplsAssociatedProtectionState, cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType=cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType, cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets=cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets, cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy=cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy, cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId=cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId, cienaCesMplsNotifTransitTunnelEntry=cienaCesMplsNotifTransitTunnelEntry, cienaCesTeLinkUnReservedBandwidthPrio7=cienaCesTeLinkUnReservedBandwidthPrio7, cienaCesMplsCacInterfaceNotif=cienaCesMplsCacInterfaceNotif, cienaCesMplsPwCosProfileRcosPolicy=cienaCesMplsPwCosProfileRcosPolicy, cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel=cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel, cienaCesMplsPWTrafficStatsPWIndex=cienaCesMplsPWTrafficStatsPWIndex, cienaCesMplsDynamicIngressTunnelName=cienaCesMplsDynamicIngressTunnelName, cienaCesGmplsStaticTransitUniDirTunnelAisProfileName=cienaCesGmplsStaticTransitUniDirTunnelAisProfileName, cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex=cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex)
mibBuilder.exportSymbols("CIENA-CES-MPLS-MIB", cienaCesMplsPwCoSProfileName=cienaCesMplsPwCoSProfileName, cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL=cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL, cienaCesMplsPWTrafficStatsOutgoingBytes=cienaCesMplsPWTrafficStatsOutgoingBytes, cienaCesMplsNotifTransitTunnelType=cienaCesMplsNotifTransitTunnelType, cienaCesTeResourceColorUseCount=cienaCesTeResourceColorUseCount, cienaCesMplsPwDown=cienaCesMplsPwDown, cienaCesGmplsStaticIngressUniDirTunnelReversion=cienaCesGmplsStaticIngressUniDirTunnelReversion, cienaCesGmplsDynamicIngressUniDirTunnelReversion=cienaCesGmplsDynamicIngressUniDirTunnelReversion, cienaCesMplsAssociatedReverseTunnelOperState=cienaCesMplsAssociatedReverseTunnelOperState, cienaCesTeLinkTotalBandwidthPrio0=cienaCesTeLinkTotalBandwidthPrio0, cienaCesGmplsDynamicIngressCoroutedTunnelName=cienaCesGmplsDynamicIngressCoroutedTunnelName, cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr=cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr, cienaCesGmplsStaticIngressCoroutedTunnelTable=cienaCesGmplsStaticIngressCoroutedTunnelTable, cienaCesMplsTEClassTypeTable=cienaCesMplsTEClassTypeTable, cienaCesGmplsDynamicTransitUniDirTunnelOperState=cienaCesGmplsDynamicTransitUniDirTunnelOperState, cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint=cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint, cienaCesMplsPwTable=cienaCesMplsPwTable, cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout=cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout, cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr=cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr, cienaCesMplsNotifTransitTunnelOamFaulted=cienaCesMplsNotifTransitTunnelOamFaulted, cienaCesMplsStaticEgressTunnelSourceIpAddr=cienaCesMplsStaticEgressTunnelSourceIpAddr, cienaCesMplsNotifEncapTunnelGrpEntry=cienaCesMplsNotifEncapTunnelGrpEntry, cienaCesGmplsStaticTransitCoroutedTunnelLspId=cienaCesGmplsStaticTransitCoroutedTunnelLspId, cienaCesMplsDynamicIngressTunnelProtectionState=cienaCesMplsDynamicIngressTunnelProtectionState, cienaCesGmplsTunnelARHopTable=cienaCesGmplsTunnelARHopTable, cienaCesMplsTransitTunnelNotif=cienaCesMplsTransitTunnelNotif, cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel=cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel, cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr=cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr, cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName=cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName, cienaCesMplsGlobalTunnelPathTable=cienaCesMplsGlobalTunnelPathTable, cienaCesMplsPwBandwidthState=cienaCesMplsPwBandwidthState, cienaCesMplsGlobalDynamicAdminLabelRangeStart=cienaCesMplsGlobalDynamicAdminLabelRangeStart, cienaCesMplsDynamicIngressTunnelHoldPriority=cienaCesMplsDynamicIngressTunnelHoldPriority, cienaCesMplsNotifTransitTunnelIndex=cienaCesMplsNotifTransitTunnelIndex, cienaCesMplsDynamicEgressTunnelEntry=cienaCesMplsDynamicEgressTunnelEntry, cienaCesMplsPwStatusTlv=cienaCesMplsPwStatusTlv, cienaCesMplsStaticIngressTunnelWeight=cienaCesMplsStaticIngressTunnelWeight, cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap=cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap, cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap=cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap, cienaCesGmplsEncapUnidirTunnelOperStateChgTrap=cienaCesGmplsEncapUnidirTunnelOperStateChgTrap, cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr=cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr, cienaCesGmplsDynamicTransitUniDirTunnelAdminState=cienaCesGmplsDynamicTransitUniDirTunnelAdminState, cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName=cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName, cienaCesTeLinkUnReservedBandwidthPrio0=cienaCesTeLinkUnReservedBandwidthPrio0, cienaCesTeLinkReservedBandwidthPrio5=cienaCesTeLinkReservedBandwidthPrio5, cienaCesMplsPwVccvProfileCcTtlExp=cienaCesMplsPwVccvProfileCcTtlExp, cienaCesMplsPwActiveTunnelName=cienaCesMplsPwActiveTunnelName, cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName=cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName, cienaCesGmplsNotifEncapTunnelGrpIndex=cienaCesGmplsNotifEncapTunnelGrpIndex, cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes=cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes, cienaCesMplsStaticIngressTunnelCosProfileIndex=cienaCesMplsStaticIngressTunnelCosProfileIndex, cienaCesMplsStaticEgressTunnelName=cienaCesMplsStaticEgressTunnelName, cienaCesMplsStaticIngressTunnelReversion=cienaCesMplsStaticIngressTunnelReversion, cienaCesGmplsNotifEncapTunnelResult=cienaCesGmplsNotifEncapTunnelResult, cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy=cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy, cienaCesMplsPwCustomerName=cienaCesMplsPwCustomerName, cienaCesGmplsDynamicEgressCoroutedTunnelTable=cienaCesGmplsDynamicEgressCoroutedTunnelTable, cienaCesMplsGlobalStaticOperVcLabelRangeEnd=cienaCesMplsGlobalStaticOperVcLabelRangeEnd, cienaCesGmplsNotifEncapTunnelFarEndLerId=cienaCesGmplsNotifEncapTunnelFarEndLerId, cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex=cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex, cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout=cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout, cienaCesMplsStaticIngressTunnelEntry=cienaCesMplsStaticIngressTunnelEntry, cienaCesMplsDynamicEgressTunnelInstance=cienaCesMplsDynamicEgressTunnelInstance, cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState=cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState, cienaCesMplsAttrs=cienaCesMplsAttrs, cienaCesMplsGlobalFreeStaticTunnelLabelEntry=cienaCesMplsGlobalFreeStaticTunnelLabelEntry, cienaCesTeLinkTable=cienaCesTeLinkTable, cienaCesMplsRemoteIpInRemoteFault=cienaCesMplsRemoteIpInRemoteFault, cienaCesMplsPwNotifPwPeerIpAddr=cienaCesMplsPwNotifPwPeerIpAddr, cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr=cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr, cienaCesGmplsStaticTransitCoroutedTunnelOperState=cienaCesGmplsStaticTransitCoroutedTunnelOperState, cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName=cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName, cienaCesGmplsDynamicIngressCoroutedTunnelIndex=cienaCesGmplsDynamicIngressCoroutedTunnelIndex, cienaCesGmplsNotifTransitTunnelTable=cienaCesGmplsNotifTransitTunnelTable, cienaCesMplsTunnelRCosProfileId=cienaCesMplsTunnelRCosProfileId, cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName=cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName, cienaCesMplsGlobalTunnelPathUseCount=cienaCesMplsGlobalTunnelPathUseCount, cienaCesGmplsDynamicIngressUniDirTunnelAdminState=cienaCesGmplsDynamicIngressUniDirTunnelAdminState, cienaCesMplsNotifEncapTunnelGrpTable=cienaCesMplsNotifEncapTunnelGrpTable, cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute=cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute, cienaCesMplsDynamicIngressTunnelPathName=cienaCesMplsDynamicIngressTunnelPathName, cienaCesMplsPwUp=cienaCesMplsPwUp, cienaCesGmplsDynamicEgressCoroutedTunnelEntry=cienaCesGmplsDynamicEgressCoroutedTunnelEntry, cienaCesMplsStaticTransitTunnelName=cienaCesMplsStaticTransitTunnelName, cienaCesGmplsNotifEncapTunnelOamFaulted=cienaCesGmplsNotifEncapTunnelOamFaulted, cienaCesMplsPwIndex=cienaCesMplsPwIndex, cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName=cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName, cienaCesGmplsAssociatedForwardTunnelDestIpAddr=cienaCesGmplsAssociatedForwardTunnelDestIpAddr, cienaCesMplsDynamicTransitTunnelSourceIpAddr=cienaCesMplsDynamicTransitTunnelSourceIpAddr, cienaCesMplsStaticIngressTunnelProtectionPartnerName=cienaCesMplsStaticIngressTunnelProtectionPartnerName, cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType=cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType, cienaCesMplsStaticIngressTunnelFrmCosPolicy=cienaCesMplsStaticIngressTunnelFrmCosPolicy, cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout=cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout, cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType=cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType, cienaGmplsTunnelARHopAddrUnnum=cienaGmplsTunnelARHopAddrUnnum, cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr=cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr, cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr=cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr, cienaCesMplsAssociatedProtectionRole=cienaCesMplsAssociatedProtectionRole, cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint=cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint, cienaGmplsTunnelARHopIpAddr=cienaGmplsTunnelARHopIpAddr, OperState=OperState, cienaCesMplsDynamicIngressTunnelFastRoute=cienaCesMplsDynamicIngressTunnelFastRoute, cienaCesGmplsDynamicTransitUniDirTunnelTable=cienaCesGmplsDynamicTransitUniDirTunnelTable, cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny=cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny, cienaCesMplsPwVccVProfileIndex=cienaCesMplsPwVccVProfileIndex, cienaCesGmplsStaticIngressCoroutedTunnelName=cienaCesGmplsStaticIngressCoroutedTunnelName, cienaGmplsTunnelARHopIndex=cienaGmplsTunnelARHopIndex, cienaCesGmplsDynamicEgressUniDirTunnelAdminState=cienaCesGmplsDynamicEgressUniDirTunnelAdminState, cienaCesGmplsNotifTransitTunnelOperState=cienaCesGmplsNotifTransitTunnelOperState, cienaCesMplsPwInLabel=cienaCesMplsPwInLabel, cienaCesGmplsStaticIngressUniDirTunnelEntry=cienaCesGmplsStaticIngressUniDirTunnelEntry, cienaCesMplsStaticTransitTunnelNextHopIpAddr=cienaCesMplsStaticTransitTunnelNextHopIpAddr, cienaCesMplsStaticTransitTunnelIncomingPackets=cienaCesMplsStaticTransitTunnelIncomingPackets, cienaCesTeResColorEntry=cienaCesTeResColorEntry, cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex=cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex, cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName=cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName, cienaCesMplsGlobalTunnelPathHopIpAddr=cienaCesMplsGlobalTunnelPathHopIpAddr, cienaCesMplsDynamicIngressTunnelFrmCosPolicy=cienaCesMplsDynamicIngressTunnelFrmCosPolicy, cienaCesMplsNotifEncapTunnelType=cienaCesMplsNotifEncapTunnelType, cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy=cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy, cienaCesMplsEncapTunnelGrpNotif=cienaCesMplsEncapTunnelGrpNotif, cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState=cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState, cienaCesTeLinkTotalBandwidthPrio1=cienaCesTeLinkTotalBandwidthPrio1, cienaCesMplsPWTrafficStatsEntry=cienaCesMplsPWTrafficStatsEntry, cienaCesGmplsStaticEgressUniDirTunnelTable=cienaCesGmplsStaticEgressUniDirTunnelTable, cienaCesMplsMIBNotifications=cienaCesMplsMIBNotifications, cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets=cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets, cienaCesMplsNotifTransitTunnelAdminState=cienaCesMplsNotifTransitTunnelAdminState, cienaCesGmplsStaticIngressCoroutedTunnelEntry=cienaCesGmplsStaticIngressCoroutedTunnelEntry, cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring=cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring, cienaCesMplsPwVccvProfileIndex=cienaCesMplsPwVccvProfileIndex, cienaCesMplsPwNotif=cienaCesMplsPwNotif, cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap=cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap, cienaCesMplsNotifCacInterfaceTable=cienaCesMplsNotifCacInterfaceTable, cienaCesMplsStaticIngressTunnelRecoveryDisjoint=cienaCesMplsStaticIngressTunnelRecoveryDisjoint, cienaCesTeLinkSrlgEntry=cienaCesTeLinkSrlgEntry, VCStatus=VCStatus, cienaCesMplsGlobalTunnelPathEntry=cienaCesMplsGlobalTunnelPathEntry, cienaMplsTunnelARHopAddrType=cienaMplsTunnelARHopAddrType, cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets=cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets, cienaCesMplsDynamicEgressTunnelTable=cienaCesMplsDynamicEgressTunnelTable, cienaCesMplsPwNotifActPwIndex=cienaCesMplsPwNotifActPwIndex, cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel=cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel, cienaCesMplsGlobalTunnelPathName=cienaCesMplsGlobalTunnelPathName, cienaCesMplsDynamicIngressTunnelAdminState=cienaCesMplsDynamicIngressTunnelAdminState, cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy=cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy, cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId=cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId, cienaCesGmplsStaticIngressUniDirTunnelCosProfileName=cienaCesGmplsStaticIngressUniDirTunnelCosProfileName, cienaCesTeResourceColorGroupIndex=cienaCesTeResourceColorGroupIndex, cienaCesGmplsStaticIngressUniDirTunnelFixedTTL=cienaCesGmplsStaticIngressUniDirTunnelFixedTTL, cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr=cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr, cienaCesMplsTunnelPath=cienaCesMplsTunnelPath, cienaCesMplsGlobalTunnelPath=cienaCesMplsGlobalTunnelPath, cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable=cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable, cienaCesGmplsNotifEncapTunnelAisFaulted=cienaCesGmplsNotifEncapTunnelAisFaulted, cienaCesMplsClassProfileEntry=cienaCesMplsClassProfileEntry, cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp=cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp, cienaCesMplsAssociatedReverseTunnelName=cienaCesMplsAssociatedReverseTunnelName, cienaCesGmplsDynamicEgressCoroutedLspId=cienaCesGmplsDynamicEgressCoroutedLspId, cienaCesGmplsStaticTransitCoroutedTunnelAdminState=cienaCesGmplsStaticTransitCoroutedTunnelAdminState, cienaCesMplsPwNotifActPwName=cienaCesMplsPwNotifActPwName, cienaCesGmplsStaticTransitUniDirTunnelEntry=cienaCesGmplsStaticTransitUniDirTunnelEntry, cienaCesMplsNotifEncapTunnelOperState=cienaCesMplsNotifEncapTunnelOperState, cienaCesMplsStaticEgressTunnelOperState=cienaCesMplsStaticEgressTunnelOperState, cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel=cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel, cienaCesGmplsStaticIngressUniDirTunnelProtectionRole=cienaCesGmplsStaticIngressUniDirTunnelProtectionRole, cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets=cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets, cienaCesMplsAssociatedForwardTunnelOperState=cienaCesMplsAssociatedForwardTunnelOperState, cienaCesTeLinkUnReservedBandwidthPrio5=cienaCesTeLinkUnReservedBandwidthPrio5, cienaCesMplsDynamicAdminLabelRangeStart=cienaCesMplsDynamicAdminLabelRangeStart, cienaCesMplsDynamicIngressTunnelPrimaryTunnelName=cienaCesMplsDynamicIngressTunnelPrimaryTunnelName, cienaCesGmplsStaticEgressCoroutedTunnelName=cienaCesGmplsStaticEgressCoroutedTunnelName, TunnelAisFault=TunnelAisFault, cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId=cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId, cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring=cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring, cienaCesGmplsDecapTunnelNotif=cienaCesGmplsDecapTunnelNotif, cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel=cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel, cienaCesMplsGlobalFreeStaticTunnelLabelTable=cienaCesMplsGlobalFreeStaticTunnelLabelTable, cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr=cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr, cienaCesMplsPwBlocking=cienaCesMplsPwBlocking, cienaCesGmplsDynamicEgressUniDirTunnelIndex=cienaCesGmplsDynamicEgressUniDirTunnelIndex, cienaCesTeLinkTotalBandwidthPrio7=cienaCesTeLinkTotalBandwidthPrio7, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState, cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole=cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole, cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName=cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName, cienaCesMplsTunnelCosProfileEntry=cienaCesMplsTunnelCosProfileEntry, cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex=cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex, cienaCesMplsClassTypeQueueGroupInstance=cienaCesMplsClassTypeQueueGroupInstance, cienaCesTeLinkReservedBandwidthPrio6=cienaCesTeLinkReservedBandwidthPrio6, cienaCesMplsRemoteIpInFaultToNextHop=cienaCesMplsRemoteIpInFaultToNextHop, cienaCesTeResourceGrpTable=cienaCesTeResourceGrpTable, cienaCesMplsDynamicIngressTunnelFixedExp=cienaCesMplsDynamicIngressTunnelFixedExp, cienaCesMplsPwCosProfileFrmCosMapName=cienaCesMplsPwCosProfileFrmCosMapName, cienaCesGmplsNotifAssociatedTunnelEntry=cienaCesGmplsNotifAssociatedTunnelEntry, cienaCesMplsDynamicTransitTunnelEntry=cienaCesMplsDynamicTransitTunnelEntry, cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr=cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr, cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex=cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex, cienaCesGmplsNotifDecapTunnelGrpName=cienaCesGmplsNotifDecapTunnelGrpName, cienaCesMplsClassProfileIndex=cienaCesMplsClassProfileIndex, cienaCesTeResourceColorGroupBitMask=cienaCesTeResourceColorGroupBitMask, cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute=cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute, cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName=cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName, cienaMplsTunnelARHopAddrUnnum=cienaMplsTunnelARHopAddrUnnum, cienaCesGmplsNotifAssociatedTunnelFarEndLerId=cienaCesGmplsNotifAssociatedTunnelFarEndLerId, cienaCesTeLinkMaximumReservableBandwidth=cienaCesTeLinkMaximumReservableBandwidth, cienaCesMplsStaticTransitTunnelIncomingBytes=cienaCesMplsStaticTransitTunnelIncomingBytes, cienaCesGmplsStaticEgressUniDirTunnelOperState=cienaCesGmplsStaticEgressUniDirTunnelOperState, cienaCesGmplsNotifAssociatedTunnelType=cienaCesGmplsNotifAssociatedTunnelType, cienaCesGmplsNotifEncapTunnelTable=cienaCesGmplsNotifEncapTunnelTable, cienaCesMplsDynamicIngressTunnelTTLPolicy=cienaCesMplsDynamicIngressTunnelTTLPolicy, cienaCesMplsGlobalStaticAdminLabelRangeEnd=cienaCesMplsGlobalStaticAdminLabelRangeEnd, cienaCesMplsMsPwPeerPwIndex=cienaCesMplsMsPwPeerPwIndex, cienaCesMplsDynamicOperLabelRangeEnd=cienaCesMplsDynamicOperLabelRangeEnd, cienaCesMplsTunnelPathHopIndex=cienaCesMplsTunnelPathHopIndex, cienaCesGmplsStaticTransitUniDirTunnelTable=cienaCesGmplsStaticTransitUniDirTunnelTable, cienaCesGmplsAssociatedTunnelOperStateChgTrap=cienaCesGmplsAssociatedTunnelOperStateChgTrap, cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr=cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr, cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets=cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets, cienaCesGmplsStaticIngressUniDirTunnelNextHopIp=cienaCesGmplsStaticIngressUniDirTunnelNextHopIp, cienaCesMplsDynamicTransitTunnelOutgoingBytes=cienaCesMplsDynamicTransitTunnelOutgoingBytes, cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel=cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel, cienaCesTeLinkReservedBandwidthPrio4=cienaCesTeLinkReservedBandwidthPrio4, cienaCesMplsPwVifIndex=cienaCesMplsPwVifIndex, cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr=cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr, cienaCesMplsPwNotifPwId=cienaCesMplsPwNotifPwId, cienaCesMplsGlobalDynamicAdminLabelRangeEnd=cienaCesMplsGlobalDynamicAdminLabelRangeEnd, cienaCesMplsNotifEncapTunnelTable=cienaCesMplsNotifEncapTunnelTable, cienaCesMplsGlobalStaticOperLabelRangeStart=cienaCesMplsGlobalStaticOperLabelRangeStart, cienaCesGmplsTransitUnidirTunnelOperStateChgTrap=cienaCesGmplsTransitUnidirTunnelOperStateChgTrap, cienaCesGmplsStaticIngressUniDirTunnelGrpIndex=cienaCesGmplsStaticIngressUniDirTunnelGrpIndex, cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel=cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel, cienaCesMplsPwVccvProfileEntry=cienaCesMplsPwVccvProfileEntry, cienaCesMplsNotifAssociatedTunnelName=cienaCesMplsNotifAssociatedTunnelName, cienaCesGmplsDynamicTransitCoroutedTunnelAdminState=cienaCesGmplsDynamicTransitCoroutedTunnelAdminState, cienaCesGmplsNotifEncapTunnelFaultedNodeId=cienaCesGmplsNotifEncapTunnelFaultedNodeId, cienaCesTeLinkTotalBandwidthPrio3=cienaCesTeLinkTotalBandwidthPrio3, cienaCesGmplsDynamicIngressUniDirTunnelIndex=cienaCesGmplsDynamicIngressUniDirTunnelIndex, cienaCesMplsTunnelPathEntry=cienaCesMplsTunnelPathEntry, cienaCesMplsGlobalTunnelPathIndex=cienaCesMplsGlobalTunnelPathIndex, cienaCesGmplsDynamicIngressCoroutedTunnelPathName=cienaCesGmplsDynamicIngressCoroutedTunnelPathName, cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr=cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr, cienaCesMplsGlobalStaticOperTunnelLabelRangeStart=cienaCesMplsGlobalStaticOperTunnelLabelRangeStart, TTLPolicy=TTLPolicy, cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName=cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName, cienaMplsTunnelARHopIpAddr=cienaMplsTunnelARHopIpAddr, cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes=cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes, cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr=cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr, cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL=cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL, cienaCesGmplsStaticTransitUniDirTunnelAdminState=cienaCesGmplsStaticTransitUniDirTunnelAdminState, cienaCesMplsPwNotifPriPwPeerIpAddr=cienaCesMplsPwNotifPriPwPeerIpAddr, cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel=cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel, cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex=cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex, cienaCesGmplsNotifTransitTunnelIndex=cienaCesGmplsNotifTransitTunnelIndex, cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes=cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes)
mibBuilder.exportSymbols("CIENA-CES-MPLS-MIB", cienaCesMplsDynamicIngressTunnelFixedTTL=cienaCesMplsDynamicIngressTunnelFixedTTL, RCosPolicy=RCosPolicy, cienaCesMplsDynamicOperLabelRangeStart=cienaCesMplsDynamicOperLabelRangeStart, cienaCesMplsDynamicTransitTunnelNextHopIpAddr=cienaCesMplsDynamicTransitTunnelNextHopIpAddr, cienaCesGmplsNotifDecapTunnelFarEndLerId=cienaCesGmplsNotifDecapTunnelFarEndLerId, cienaCesMplsPwCosProfileIndex=cienaCesMplsPwCosProfileIndex, cienaCesMplsDynamicIngressTunnelBandwidthProfile=cienaCesMplsDynamicIngressTunnelBandwidthProfile, cienaCesGmplsDynamicIngressUniDirTunnelOperState=cienaCesGmplsDynamicIngressUniDirTunnelOperState, FCosPolicy=FCosPolicy, cienaCesMplsPwOutLabel=cienaCesMplsPwOutLabel, cienaCesMplsTe=cienaCesMplsTe, cienaCesGmplsStaticIngressUniDirTunnelName=cienaCesGmplsStaticIngressUniDirTunnelName, cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr=cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr, cienaCesTeLinkMode=cienaCesTeLinkMode, cienaCesMplsDynamicIngressTunnelEntry=cienaCesMplsDynamicIngressTunnelEntry, cienaCesTeLinkReservedBandwidthPrio0=cienaCesTeLinkReservedBandwidthPrio0, cienaCesMplsPwVccvProfileCcCienaOob=cienaCesMplsPwVccvProfileCcCienaOob, cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile=cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile, cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout=cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout, cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority=cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority, cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName=cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName, cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole=cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole, cienaCesGmplsAssociatedBfdMonitoring=cienaCesGmplsAssociatedBfdMonitoring, cienaCesMplsGlobalTunnelPathHopTable=cienaCesMplsGlobalTunnelPathHopTable, cienaCesTeLinkUnReservedBandwidthPrio1=cienaCesTeLinkUnReservedBandwidthPrio1, cienaCesServiceDelimiterTPID=cienaCesServiceDelimiterTPID, cienaCesMplsStaticIngressTunnelLabel=cienaCesMplsStaticIngressTunnelLabel, cienaCesMplsClassProfileCacPolicy=cienaCesMplsClassProfileCacPolicy, cienaCesMplsTunnelRcosMapName=cienaCesMplsTunnelRcosMapName, cienaCesMplsDynamicIngressTunnelFixedTC=cienaCesMplsDynamicIngressTunnelFixedTC, cienaCesMplsTunnelPathHopIpAddr=cienaCesMplsTunnelPathHopIpAddr, cienaCesMplsPwConfigTunnelName=cienaCesMplsPwConfigTunnelName, cienaCesMplsTunnelOperStateChgTrap=cienaCesMplsTunnelOperStateChgTrap, cienaCesMplsGlobalTunnelPathHopIndex=cienaCesMplsGlobalTunnelPathHopIndex, cienaCesMplsTunnelPathName=cienaCesMplsTunnelPathName, cienaCesMplsGlobalTunnelPathHopType=cienaCesMplsGlobalTunnelPathHopType, cienaCesGmplsStaticEgressUniDirTunnelIndex=cienaCesGmplsStaticEgressUniDirTunnelIndex, cienaCesMplsPwVsName=cienaCesMplsPwVsName, cienaCesGmplsNotifEncapTunnelRequestedBw=cienaCesGmplsNotifEncapTunnelRequestedBw, cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL=cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL, cienaCesServiceDelimiterVID=cienaCesServiceDelimiterVID, cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp=cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp, cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel=cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel, cienaCesMplsPWTrafficStatsIncomingBytes=cienaCesMplsPWTrafficStatsIncomingBytes, cienaCesMplsStaticAdminLabelRangeStart=cienaCesMplsStaticAdminLabelRangeStart, cienaCesMplsPwOperState=cienaCesMplsPwOperState, cienaCesGmplsStaticIngressUniDirTunnelProtectionState=cienaCesGmplsStaticIngressUniDirTunnelProtectionState, cienaCesMplsPwCosProfileFrmCosMapId=cienaCesMplsPwCosProfileFrmCosMapId, cienaCesMplsDynamicTransitTunnelAdminState=cienaCesMplsDynamicTransitTunnelAdminState, cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel=cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel, cienaCesMplsTunnelFrmCosPolicy=cienaCesMplsTunnelFrmCosPolicy, cienaCesMplsAssociatedTunnelNotif=cienaCesMplsAssociatedTunnelNotif, cienaCesMplsPwNotifPriPwId=cienaCesMplsPwNotifPriPwId, cienaCesGmplsDynamicTransitUniDirTunnelEntry=cienaCesGmplsDynamicTransitUniDirTunnelEntry, cienaCesTeLinkTotalBandwidthPrio6=cienaCesTeLinkTotalBandwidthPrio6, cienaCesMplsStaticIngressTunnelProtectionState=cienaCesMplsStaticIngressTunnelProtectionState, cienaCesMplsClassType=cienaCesMplsClassType, cienaCesMplsGlobalStaticAdminVcLabelRangeStart=cienaCesMplsGlobalStaticAdminVcLabelRangeStart, PathDisjointMode=PathDisjointMode, cienaCesMplsDynamicTransitTunnelInLabel=cienaCesMplsDynamicTransitTunnelInLabel, cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex=cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex, VCFailReason=VCFailReason, cienaCesMplsDynamicEgressTunnelDestIpAddr=cienaCesMplsDynamicEgressTunnelDestIpAddr, cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets=cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets, CacPolicy=CacPolicy, cienaCesGmplsAssociatedTunnelName=cienaCesGmplsAssociatedTunnelName, cienaCesTeLinkTotalBandwidthPrio5=cienaCesTeLinkTotalBandwidthPrio5, cienaCesMplsMsPwPeerPwName=cienaCesMplsMsPwPeerPwName, cienaCesMplsAssociatedBfdProfileIndex=cienaCesMplsAssociatedBfdProfileIndex, cienaCesMplsClassProfileName=cienaCesMplsClassProfileName, cienaCesGmplsStaticIngressCoroutedTunnelProtectionState=cienaCesGmplsStaticIngressCoroutedTunnelProtectionState, cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile=cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile, cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets=cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets, cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval=cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval, cienaCesMplsPwCoSProfileIndex=cienaCesMplsPwCoSProfileIndex, cienaCesMplsPwEgressL2PtTransform=cienaCesMplsPwEgressL2PtTransform, cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex=cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex, cienaCesMplsCacInterfaceThresholdTrap=cienaCesMplsCacInterfaceThresholdTrap, cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth, cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel=cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel, cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex=cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex, cienaCesMplsAssociatedBfdProfileName=cienaCesMplsAssociatedBfdProfileName, cienaCesMplsNotifEncapTunnelGrpIndex=cienaCesMplsNotifEncapTunnelGrpIndex, cienaCesGmplsDynamicEgressCoroutedTunnelOperState=cienaCesGmplsDynamicEgressCoroutedTunnelOperState, cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType=cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType, cienaCesGmplsTunnelAisFaultErrorTrap=cienaCesGmplsTunnelAisFaultErrorTrap, MplsGlobalState=MplsGlobalState, cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr=cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr, cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum=cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum, cienaCesGmplsAssociatedTunnelAdminState=cienaCesGmplsAssociatedTunnelAdminState, cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy=cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy, cienaCesMplsDynamicIngressTunnelWeight=cienaCesMplsDynamicIngressTunnelWeight, cienaCesTeResourceGrpName=cienaCesTeResourceGrpName, cienaCesGmplsDynamicEgressUniDirTunnelTable=cienaCesGmplsDynamicEgressUniDirTunnelTable, cienaCesMplsDynamicIngressTunnelRecordRoute=cienaCesMplsDynamicIngressTunnelRecordRoute, cienaCesGmplsDynamicIngressUniDirTunnelProtectionState=cienaCesGmplsDynamicIngressUniDirTunnelProtectionState, cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring=cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring, cienaCesGmplsDynamicEgressUniDirTunnelOperState=cienaCesGmplsDynamicEgressUniDirTunnelOperState, cienaCesGmplsDynamicIngressCoroutedTunnelReversion=cienaCesGmplsDynamicIngressCoroutedTunnelReversion, cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName=cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName, cienaCesGmplsNotifTransitTunnelEntry=cienaCesGmplsNotifTransitTunnelEntry, cienaCesMplsStaticTransitTunnelTTLPolicy=cienaCesMplsStaticTransitTunnelTTLPolicy, cienaCesMplsGlobalDynamicOperLabelRangeEnd=cienaCesMplsGlobalDynamicOperLabelRangeEnd, cienaCesMplsDynamicIngressTunnelTable=cienaCesMplsDynamicIngressTunnelTable, cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr=cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr, cienaCesMplsPwAdminState=cienaCesMplsPwAdminState, cienaCesMplsClassTypeQueueGroupIndex=cienaCesMplsClassTypeQueueGroupIndex, cienaCesGmplsAssociatedForwardTunnelName=cienaCesGmplsAssociatedForwardTunnelName, cienaCesMplsPwBundleActivePwChange=cienaCesMplsPwBundleActivePwChange, cienaCesMplsStaticTransitTunnelDestIpAddr=cienaCesMplsStaticTransitTunnelDestIpAddr, cienaCesGmplsStaticIngressCoroutedTunnelAdminState=cienaCesGmplsStaticIngressCoroutedTunnelAdminState, cienaCesMplsDynamicTransitTunnelIncomingBytes=cienaCesMplsDynamicTransitTunnelIncomingBytes, cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName=cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName, cienaCesGmplsStaticEgressCoroutedTunnelProtectionState=cienaCesGmplsStaticEgressCoroutedTunnelProtectionState, AutoSizeState=AutoSizeState, cienaCesMplsAssociatedBfdSessionFaulted=cienaCesMplsAssociatedBfdSessionFaulted, cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName=cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName, cienaCesMplsDynamicEgressTunnelSourceIpAddr=cienaCesMplsDynamicEgressTunnelSourceIpAddr, cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName=cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName, cienaCesGmplsStaticTransitUniDirTunnelOperState=cienaCesGmplsStaticTransitUniDirTunnelOperState, cienaCesGmplsNotifDecapTunnelAisFaulted=cienaCesGmplsNotifDecapTunnelAisFaulted, cienaCesMplsPwActiveTunnelIndex=cienaCesMplsPwActiveTunnelIndex, cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId=cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId, cienaCesMplsGlobalNextFreeStaticVcLabel=cienaCesMplsGlobalNextFreeStaticVcLabel, cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap=cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap, cienaCesMplsNotifEncapTunnelEntry=cienaCesMplsNotifEncapTunnelEntry, cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex=cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex, cienaCesGmplsStaticIngressCoroutedTunnelOperState=cienaCesGmplsStaticIngressCoroutedTunnelOperState, cienaCesTeLinkTotalBandwidthPrio4=cienaCesTeLinkTotalBandwidthPrio4, cienaCesMplsNotifTransitTunnelName=cienaCesMplsNotifTransitTunnelName, cienaCesGmplsNotifTransitTunnelName=cienaCesGmplsNotifTransitTunnelName, cienaCesMplsPwCosProfileRCosMapId=cienaCesMplsPwCosProfileRCosMapId, PseudoWireType=PseudoWireType, cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy=cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy, cienaCesMplsNotifAssociatedTunnelEntry=cienaCesMplsNotifAssociatedTunnelEntry, cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes=cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes, cienaCesGmplsStaticIngressCoroutedTunnelReversion=cienaCesGmplsStaticIngressCoroutedTunnelReversion, cienaCesMplsStaticOperLabelRangeEnd=cienaCesMplsStaticOperLabelRangeEnd, cienaCesMplsPwVccvProfileTable=cienaCesMplsPwVccvProfileTable, cienaCesMplsNotifCacInterfaceName=cienaCesMplsNotifCacInterfaceName, cienaCesMplsStaticIngressTunnelFixedExp=cienaCesMplsStaticIngressTunnelFixedExp, cienaCesMplsDynamicIngressTunnelLabel=cienaCesMplsDynamicIngressTunnelLabel, cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets=cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets, cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart=cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart, cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName=cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName, cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex=cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex, cienaCesMplsGlobalFreeStaticTunnelLabelIndex=cienaCesMplsGlobalFreeStaticTunnelLabelIndex, cienaCesMplsPwIdInRemoteFault=cienaCesMplsPwIdInRemoteFault, cienaCesMplsLocalIpInFaultToNextHop=cienaCesMplsLocalIpInFaultToNextHop, cienaCesMplsNotifAssociatedTunnelOamFaulted=cienaCesMplsNotifAssociatedTunnelOamFaulted, cienaCesTeLinkSrlgTable=cienaCesTeLinkSrlgTable, cienaCesGmplsAssociatedBfdProfileIndex=cienaCesGmplsAssociatedBfdProfileIndex, cienaCesMplsStaticTransitTunnelTable=cienaCesMplsStaticTransitTunnelTable, cienaCesMplsDynamicIngressTunnelResourcePointer=cienaCesMplsDynamicIngressTunnelResourcePointer, cienaCesGmplsNotifTunnelErrorMsg=cienaCesGmplsNotifTunnelErrorMsg, cienaCesMplsNotifEncapTunnelAdminState=cienaCesMplsNotifEncapTunnelAdminState, cienaCesMplsPwConfigTunnelIndex=cienaCesMplsPwConfigTunnelIndex, SRLGState=SRLGState, cienaCesMplsMIBObjects=cienaCesMplsMIBObjects, cienaCesMplsPwCosProfileName=cienaCesMplsPwCosProfileName, cienaCesGmplsAssociatedAisMonitoring=cienaCesGmplsAssociatedAisMonitoring, cienaCesTeIfIndex=cienaCesTeIfIndex, cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes=cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes, cienaCesMplsGlobal=cienaCesMplsGlobal, cienaCesMplsDynamicTransitTunnelDestIpAddr=cienaCesMplsDynamicTransitTunnelDestIpAddr, cienaCesMplsDynamicIngressTunnelDestIpAddr=cienaCesMplsDynamicIngressTunnelDestIpAddr, cienaCesGmplsStaticTransitUniDirTunnelName=cienaCesGmplsStaticTransitUniDirTunnelName, cienaCesGmplsAssociatedTunnelNotif=cienaCesGmplsAssociatedTunnelNotif, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr, cienaCesGmplsStaticEgressCoroutedTunnelIndex=cienaCesGmplsStaticEgressCoroutedTunnelIndex, cienaCesMplsPwPeerIpAddr=cienaCesMplsPwPeerIpAddr, cienaCesMplsStaticIngressTunnelTTLPolicy=cienaCesMplsStaticIngressTunnelTTLPolicy, cienaCesGmplsStaticEgressCoroutedTunnelOperState=cienaCesGmplsStaticEgressCoroutedTunnelOperState, cienaCesMplsEncapTunnelNotif=cienaCesMplsEncapTunnelNotif, cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes=cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes, cienaCesGmplsAssociatedTunnelTable=cienaCesGmplsAssociatedTunnelTable, cienaCesGmplsAssociatedReverseTunnelName=cienaCesGmplsAssociatedReverseTunnelName, cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint=cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint, cienaCesMplsTEClassTypeEntry=cienaCesMplsTEClassTypeEntry, cienaCesTeResourceColorsTable=cienaCesTeResourceColorsTable, cienaCesGmplsNotifEncapTunnelName=cienaCesGmplsNotifEncapTunnelName, cienaCesGmplsDynamicTransitUniDirTunnelName=cienaCesGmplsDynamicTransitUniDirTunnelName, cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap=cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap, cienaCesMplsPwPrimaryPwIndex=cienaCesMplsPwPrimaryPwIndex, cienaCesMplsPwNotifPwName=cienaCesMplsPwNotifPwName, cienaCesGmplsDynamicTransitCoroutedTunnelEntry=cienaCesGmplsDynamicTransitCoroutedTunnelEntry, cienaCesMplsTunnelRCosMapId=cienaCesMplsTunnelRCosMapId, cienaCesTeLinkSrlgCount=cienaCesTeLinkSrlgCount, cienaCesMplsDynamicIngressTunnelNextHopIp=cienaCesMplsDynamicIngressTunnelNextHopIp, cienaCesGmplsStaticTransitUniDirTunnelFixedTTL=cienaCesGmplsStaticTransitUniDirTunnelFixedTTL, cienaCesMplsPwNotifPriPwName=cienaCesMplsPwNotifPriPwName, cienaCesGmplsNotifEncapTunnelMbbParentApp=cienaCesGmplsNotifEncapTunnelMbbParentApp, cienaCesMplsGlobalStaticAdminVcLabelRangeEnd=cienaCesMplsGlobalStaticAdminVcLabelRangeEnd, PathDisjointType=PathDisjointType, cienaCesMplsPwOperBandwidth=cienaCesMplsPwOperBandwidth, cienaCesMplsStaticTransitTunnelRcosPolicy=cienaCesMplsStaticTransitTunnelRcosPolicy, cienaCesMplsPwCosProfileFixedTC=cienaCesMplsPwCosProfileFixedTC, cienaCesMplsStaticIngressTunnelProtectionRole=cienaCesMplsStaticIngressTunnelProtectionRole, cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum=cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum, cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex=cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex, cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum=cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum, cienaCesMplsPwCosProfileTable=cienaCesMplsPwCosProfileTable, cienaCesGmplsDynamicTransitUniDirTunnelIndex=cienaCesGmplsDynamicTransitUniDirTunnelIndex, cienaCesTeResourceColorBit=cienaCesTeResourceColorBit, cienaCesGmplsAssociatedAisProfileName=cienaCesGmplsAssociatedAisProfileName, cienaCesMplsLocalIpInRemoteFault=cienaCesMplsLocalIpInRemoteFault, cienaCesMplsStaticTransitTunnelCosProfileIndex=cienaCesMplsStaticTransitTunnelCosProfileIndex, cienaCesMplsStaticIngressTunnelCosProfileName=cienaCesMplsStaticIngressTunnelCosProfileName, cienaCesGmplsStaticEgressCoroutedTunnelReversion=cienaCesGmplsStaticEgressCoroutedTunnelReversion, cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr=cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr, cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId=cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId, cienaCesMplsGlobalStaticOperVcLabelRangeStart=cienaCesMplsGlobalStaticOperVcLabelRangeStart, cienaCesMplsMIB=cienaCesMplsMIB, cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring=cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring, cienaCesMplsDynamicEgressTunnelLabel=cienaCesMplsDynamicEgressTunnelLabel, cienaCesMplsDynamicEgressTunnelOperState=cienaCesMplsDynamicEgressTunnelOperState, cienaCesMplsAssociatedTunnelOperState=cienaCesMplsAssociatedTunnelOperState, cienaCesMplsStaticIngressTunnelFixedTC=cienaCesMplsStaticIngressTunnelFixedTC, cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr=cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr, cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes=cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes, cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr=cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr, cienaCesMplsTunnelARHopEntry=cienaCesMplsTunnelARHopEntry, cienaCesGmplsAssociatedReverseTunnelOperState=cienaCesGmplsAssociatedReverseTunnelOperState, cienaCesGmplsDynamicIngressCoroutedTunnelOperState=cienaCesGmplsDynamicIngressCoroutedTunnelOperState, cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName=cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName, cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth, cienaCesGmplsDynamicEgressCoroutedTunnelIndex=cienaCesGmplsDynamicEgressCoroutedTunnelIndex, cienaCesMplsDynamicEgressTunnelAdminState=cienaCesMplsDynamicEgressTunnelAdminState, cienaCesMplsClassProfIndex=cienaCesMplsClassProfIndex, cienaCesGmplsNotifAssociatedTunnelTable=cienaCesGmplsNotifAssociatedTunnelTable, cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel=cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel, cienaCesGmplsTunnelARHopEntry=cienaCesGmplsTunnelARHopEntry, cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName=cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName, cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex=cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex, cienaCesGmplsDynamicTransitCoroutedTunnelTable=cienaCesGmplsDynamicTransitCoroutedTunnelTable, cienaCesMplsPwRole=cienaCesMplsPwRole, cienaCesMplsNotifAssociatedTunnelOperState=cienaCesMplsNotifAssociatedTunnelOperState, cienaCesMplsPWTrafficStatsIncomingPackets=cienaCesMplsPWTrafficStatsIncomingPackets, cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll=cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll, cienaCesMplsTunnelCosProfileTable=cienaCesMplsTunnelCosProfileTable, cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap=cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap, cienaCesTeLinkReservedBandwidthPrio1=cienaCesTeLinkReservedBandwidthPrio1, cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode=cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode, cienaCesMplsStaticIngressTunnelName=cienaCesMplsStaticIngressTunnelName, cienaCesMplsDynamicIngressTunnelCosProfileName=cienaCesMplsDynamicIngressTunnelCosProfileName, cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel=cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel, cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap=cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap, cienaCesGmplsAssociatedBfdSessionFaulted=cienaCesGmplsAssociatedBfdSessionFaulted, cienaCesMplsStaticTransitTunnelRCosMapId=cienaCesMplsStaticTransitTunnelRCosMapId, cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority=cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority, cienaCesMplsPwLocalCcCv=cienaCesMplsPwLocalCcCv, cienaCesMplsPwFaultToNextHop=cienaCesMplsPwFaultToNextHop, cienaCesMplsTunnelPathHopType=cienaCesMplsTunnelPathHopType)
mibBuilder.exportSymbols("CIENA-CES-MPLS-MIB", cienaCesMplsTunnelCosProfileName=cienaCesMplsTunnelCosProfileName, cienaCesMplsGlobalStaticOperLabelRangeEnd=cienaCesMplsGlobalStaticOperLabelRangeEnd, cienaCesMplsDynamicIngressTunnelIndex=cienaCesMplsDynamicIngressTunnelIndex, cienaCesMplsStaticTransitTunnelIndex=cienaCesMplsStaticTransitTunnelIndex, cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel=cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel, cienaCesGmplsDynamicIngressUniDirTunnelFastRoute=cienaCesGmplsDynamicIngressUniDirTunnelFastRoute, cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel=cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel, cienaCesGmplsNotifEncapTunnelIndex=cienaCesGmplsNotifEncapTunnelIndex, cienaCesMplsPwLocalFault=cienaCesMplsPwLocalFault, cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy=cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy, cienaCesMplsAssociatedBfdSessionName=cienaCesMplsAssociatedBfdSessionName, cienaCesGmplsNotifAssociatedTunnelName=cienaCesGmplsNotifAssociatedTunnelName, cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority=cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority, cienaCesGmplsNotifDecapTunnelType=cienaCesGmplsNotifDecapTunnelType, cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex=cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex, cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole=cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole, cienaCesGmplsDynamicIngressUniDirTunnelTable=cienaCesGmplsDynamicIngressUniDirTunnelTable, cienaCesGmplsStaticEgressCoroutedTunnelAdminState=cienaCesGmplsStaticEgressCoroutedTunnelAdminState, cienaCesMplsPwReversion=cienaCesMplsPwReversion, cienaCesMplsStaticEgressTunnelLabel=cienaCesMplsStaticEgressTunnelLabel, cienaGmplsTunnelARHopLspId=cienaGmplsTunnelARHopLspId, cienaCesTeLinkEntry=cienaCesTeLinkEntry, cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel=cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel, cienaCesMplsStaticTransitTunnelFixedTc=cienaCesMplsStaticTransitTunnelFixedTc, cienaCesTeResourceColorName=cienaCesTeResourceColorName, cienaCesTeResourceColorIndex=cienaCesTeResourceColorIndex, cienaCesMplsPwVsIndex=cienaCesMplsPwVsIndex, cienaCesGmplsNotifAssociatedTunnelOperState=cienaCesGmplsNotifAssociatedTunnelOperState, cienaCesMplsStaticTransitTunnelCosProfileName=cienaCesMplsStaticTransitTunnelCosProfileName, cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets=cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets, cienaCesMplsPwCosProfileRCosProfileId=cienaCesMplsPwCosProfileRCosProfileId, cienaCesMplsClassProfileTable=cienaCesMplsClassProfileTable, cienaCesMplsTunnelRcosPolicy=cienaCesMplsTunnelRcosPolicy, cienaCesMplsDynamicTransitTunnelName=cienaCesMplsDynamicTransitTunnelName, cienaCesMplsTransitTunnelOperStateChgTrap=cienaCesMplsTransitTunnelOperStateChgTrap, cienaCesGmplsNotifDecapTunnelOperState=cienaCesGmplsNotifDecapTunnelOperState, AttachGroupType=AttachGroupType, cienaCesGmplsNotifAssociatedTunnelFaultedNodeId=cienaCesGmplsNotifAssociatedTunnelFaultedNodeId, cienaCesMplsGlobalStaticAdminLabelRangeStart=cienaCesMplsGlobalStaticAdminLabelRangeStart, TunnelType=TunnelType, cienaCesMplsPwProtectionState=cienaCesMplsPwProtectionState, cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr=cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr, cienaCesMplsDynamicAdminLabelRangeEnd=cienaCesMplsDynamicAdminLabelRangeEnd, cienaCesMplsNotifCacInterfaceEntry=cienaCesMplsNotifCacInterfaceEntry, cienaCesGmplsStaticTransitUniDirTunnelCosProfileName=cienaCesGmplsStaticTransitUniDirTunnelCosProfileName, cienaCesMplsStaticIngressTunnelFixedTTL=cienaCesMplsStaticIngressTunnelFixedTTL, cienaCesMplsTunnelPathHopEntry=cienaCesMplsTunnelPathHopEntry, cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel=cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel, cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy=cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy, cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel=cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel, cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr=cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr, cienaCesMplsGlobalDynamicOperLabelRangeStart=cienaCesMplsGlobalDynamicOperLabelRangeStart, cienaCesMplsDynamicIngressTunnelSetupPriority=cienaCesMplsDynamicIngressTunnelSetupPriority, cienaCesGmplsEncapTunnelGrpNotif=cienaCesGmplsEncapTunnelGrpNotif, cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr=cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr, cienaCesMplsPwMIBNotifications=cienaCesMplsPwMIBNotifications, cienaCesMplsStaticTransitTunnelOutgoingBytes=cienaCesMplsStaticTransitTunnelOutgoingBytes, cienaCesMplsStaticIngressTunnelDestIpAddr=cienaCesMplsStaticIngressTunnelDestIpAddr, cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets=cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets, cienaCesMplsPwId=cienaCesMplsPwId, cienaCesMplsAssociatedForwardTunnelName=cienaCesMplsAssociatedForwardTunnelName, cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex=cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex, cienaCesMplsNotifAssociatedTunnelType=cienaCesMplsNotifAssociatedTunnelType, cienaCesGmplsNotifTunnelAisFaultErrorTable=cienaCesGmplsNotifTunnelAisFaultErrorTable, cienaCesTeLinkUnReservedBandwidthPrio4=cienaCesTeLinkUnReservedBandwidthPrio4, cienaCesGmplsAssociatedForwardTunnelOperState=cienaCesGmplsAssociatedForwardTunnelOperState, cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL=cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL, cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets=cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets, cienaCesGmplsDynamicTransitCoroutedTunnelName=cienaCesGmplsDynamicTransitCoroutedTunnelName, cienaCesMplsTunnelPathIndex=cienaCesMplsTunnelPathIndex, cienaCesMplsPwNotifActPwId=cienaCesMplsPwNotifActPwId, cienaCesMplsAssociatedForwardTunnelDestIpAddr=cienaCesMplsAssociatedForwardTunnelDestIpAddr, cienaCesMplsTunnelFrmCosMapId=cienaCesMplsTunnelFrmCosMapId, cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes=cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes, cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole=cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole, cienaCesMplsNotifAssociatedTunnelAdminState=cienaCesMplsNotifAssociatedTunnelAdminState, cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL=cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL, cienaCesGmplsStaticEgressUniDirTunnelAdminState=cienaCesGmplsStaticEgressUniDirTunnelAdminState, cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr=cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr, cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer=cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer, cienaCesGmplsNotifEncapTunnelType=cienaCesGmplsNotifEncapTunnelType, cienaMplsTunnelARHopLspId=cienaMplsTunnelARHopLspId, cienaCesGmplsNotifTransitTunnelOamFaulted=cienaCesGmplsNotifTransitTunnelOamFaulted, cienaCesTeLinkReservedBandwidthPrio3=cienaCesTeLinkReservedBandwidthPrio3, cienaCesMplsClassTypeLom=cienaCesMplsClassTypeLom, cienaCesGmplsNotifAssociatedTunnelOamFaulted=cienaCesGmplsNotifAssociatedTunnelOamFaulted, cienaCesMplsStaticAdminLabelRangeEnd=cienaCesMplsStaticAdminLabelRangeEnd, cienaCesGmplsDynamicIngressCoroutedTunnelEntry=cienaCesGmplsDynamicIngressCoroutedTunnelEntry, cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring=cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring, cienaCesMplsPwCosProfileFrmCosPolicy=cienaCesMplsPwCosProfileFrmCosPolicy, cienaCesGmplsStaticTransitCoroutedTunnelIndex=cienaCesGmplsStaticTransitCoroutedTunnelIndex, cienaCesMplsNotifTransitTunnelOperState=cienaCesMplsNotifTransitTunnelOperState, cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization=cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization, cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel=cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel, cienaCesGmplsNotifTransitTunnelType=cienaCesGmplsNotifTransitTunnelType, cienaCesMplsPwNotifActPwPeerIpAddr=cienaCesMplsPwNotifActPwPeerIpAddr, cienaCesMplsPw=cienaCesMplsPw, cienaCesMplsDynamicIngressTunnelReversionTimeout=cienaCesMplsDynamicIngressTunnelReversionTimeout, cienaCesMplsPWTrafficStatsOutgoingPackets=cienaCesMplsPWTrafficStatsOutgoingPackets, cienaCesGmplsNotifDecapTunnelFaultedNodeId=cienaCesGmplsNotifDecapTunnelFaultedNodeId, cienaCesMplsStaticTransitTunnelFixedTTL=cienaCesMplsStaticTransitTunnelFixedTTL, cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex=cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex, cienaCesMplsAssociatedTunnelOperStateChgTrap=cienaCesMplsAssociatedTunnelOperStateChgTrap, cienaCesGmplsNotifEncapTunnelGrpTable=cienaCesGmplsNotifEncapTunnelGrpTable, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval, cienaCesMplsDynamicIngressTunnelFrmCosMapId=cienaCesMplsDynamicIngressTunnelFrmCosMapId, cienaCesGmplsStaticIngressUniDirTunnelIndex=cienaCesGmplsStaticIngressUniDirTunnelIndex, cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy=cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy, cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName=cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName, cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr=cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr, cienaCesMplsStaticTransitTunnelOutLabel=cienaCesMplsStaticTransitTunnelOutLabel, cienaCesMplsAssociatedProtectionState=cienaCesMplsAssociatedProtectionState, cienaCesMplsStaticIngressTunnelNextHopIp=cienaCesMplsStaticIngressTunnelNextHopIp, cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName=cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName, cienaCesMplsPwVccVProfileName=cienaCesMplsPwVccVProfileName, cienaCesGmplsNotifEncapTunnelGrpEntry=cienaCesGmplsNotifEncapTunnelGrpEntry, cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp=cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp, cienaCesTeLinkMaximumBandwidth=cienaCesTeLinkMaximumBandwidth, cienaCesGmplsDynamicEgressUniDirTunnelName=cienaCesGmplsDynamicEgressUniDirTunnelName, cienaCesMplsPwMtu=cienaCesMplsPwMtu, cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute=cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute, cienaCesMplsPwRevertTime=cienaCesMplsPwRevertTime, cienaCesMplsStaticTransitTunnelFcosPolicy=cienaCesMplsStaticTransitTunnelFcosPolicy, cienaCesGmplsStaticEgressCoroutedTunnelLspId=cienaCesGmplsStaticEgressCoroutedTunnelLspId, cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring=cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring, cienaCesGmplsDynamicIngressUniDirTunnelPathName=cienaCesGmplsDynamicIngressUniDirTunnelPathName, cienaCesGmplsStaticTransitUniDirTunnelIndex=cienaCesGmplsStaticTransitUniDirTunnelIndex, cienaCesGmplsNotifEncapTunnelOperationalBw=cienaCesGmplsNotifEncapTunnelOperationalBw, cienaGmplsTunnelARHopAddrType=cienaGmplsTunnelARHopAddrType, cienaCesMplsPwNotifEntry=cienaCesMplsPwNotifEntry, cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny=cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny, cienaCesMplsTunnelPathTable=cienaCesMplsTunnelPathTable, cienaCesMplsDynamicIngressTunnelOperState=cienaCesMplsDynamicIngressTunnelOperState, cienaCesMplsAssociatedTunnelIndex=cienaCesMplsAssociatedTunnelIndex)
