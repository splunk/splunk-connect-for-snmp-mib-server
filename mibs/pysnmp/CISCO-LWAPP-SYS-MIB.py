#
# PySNMP MIB module CISCO-LWAPP-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-SYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:49:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cldcClientAccessVLAN, cldcClientMacAddress = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN", "cldcClientMacAddress")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, Counter32, Bits, ModuleIdentity, ObjectIdentity, Gauge32, Integer32, IpAddress, Counter64, iso, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Counter32", "Bits", "ModuleIdentity", "ObjectIdentity", "Gauge32", "Integer32", "IpAddress", "Counter64", "iso", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
ciscoLwappSysMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 618))
ciscoLwappSysMIB.setRevisions(('2012-08-06 00:00', '2012-06-18 00:00', '2010-02-09 00:00', '2007-03-14 00:00',))
if mibBuilder.loadTexts: ciscoLwappSysMIB.setLastUpdated('201208060000Z')
if mibBuilder.loadTexts: ciscoLwappSysMIB.setOrganization('Cisco Systems Inc.')
ciscoLwappSysMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 0))
ciscoLwappSysMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1))
ciscoLwappSysMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 2))
clsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1))
clsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 2))
clsImageInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 3))
clsCpuInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 4))
clsSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 5))
ciscoLwappSysMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 6))
ciscoLwappSysMIBNotifControlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 7))
clsSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8))
clsDot3BridgeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsDot3BridgeEnabled.setStatus('current')
clsConfigDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 2))
clsConfigUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 3))
clsDownloadFileType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("code", 2), ("config", 3), ("webAuthCert", 4), ("webAdminCert", 5), ("signatures", 6), ("customWebAuth", 7), ("vendorDeviceCert", 8), ("vendorCaCert", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsDownloadFileType.setStatus('current')
clsDownloadCertificateKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsDownloadCertificateKey.setStatus('current')
clsUploadFileType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("unknown", 1), ("config", 2), ("errorLog", 3), ("systemTrace", 4), ("trapLog", 5), ("crashFile", 6), ("signatures", 7), ("pac", 8), ("radioCoreDump", 9), ("invalidConfig", 10), ("debugfile", 11), ("pktCapture", 12), ("watchdogCrash", 13), ("panicCrash", 14), ("vendorDevCert", 15), ("vendorCaCert", 16), ("webAdminCert", 17), ("webAuthCert", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsUploadFileType.setStatus('current')
clsUploadPacUsername = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 3, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsUploadPacUsername.setStatus('current')
clsUploadPacPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 3, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsUploadPacPassword.setStatus('current')
clsUploadPacValidity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsUploadPacValidity.setStatus('current')
clsTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 4))
clsTransferConfigFileEncryption = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferConfigFileEncryption.setStatus('current')
clsTransferConfigFileEncryptionKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 4, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferConfigFileEncryptionKey.setStatus('current')
clsTransferConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8))
clsTransferConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1), )
if mibBuilder.loadTexts: clsTransferConfigTable.setStatus('current')
clsTransferConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-SYS-MIB", "clsTransferType"), (0, "CISCO-LWAPP-SYS-MIB", "clsTransferMode"))
if mibBuilder.loadTexts: clsTransferConfigEntry.setStatus('current')
clsTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("download", 1), ("upload", 2))))
if mibBuilder.loadTexts: clsTransferType.setStatus('current')
clsTransferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("sftp", 3))))
if mibBuilder.loadTexts: clsTransferMode.setStatus('current')
clsTransferServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferServerAddressType.setStatus('current')
clsTransferServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferServerAddress.setStatus('current')
clsTransferPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferPath.setStatus('current')
clsTransferFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferFilename.setStatus('current')
clsTransferFtpUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferFtpUsername.setStatus('current')
clsTransferFtpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferFtpPassword.setStatus('current')
clsTransferFtpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 9), InetPortNumber().clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferFtpPortNum.setStatus('current')
clsTransferTftpMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferTftpMaxRetries.setStatus('current')
clsTransferTftpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferTftpTimeout.setStatus('current')
clsTransferStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("initiate", 2), ("initiatePeer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTransferStart.setStatus('current')
clsTransferStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 99))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13), ("bootBreakOff", 14), ("invalidTarFile", 15), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsTransferStatus.setStatus('current')
clsTransferStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 8, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsTransferStatusString.setStatus('current')
clsConfigGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 5))
clsTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 5, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsTimeZone.setStatus('current')
clsTimeZoneDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 5, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsTimeZoneDescription.setStatus('current')
clsMaxClientsTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 5, 3), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsMaxClientsTrapThreshold.setStatus('current')
clsMaxRFIDTagsTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 5, 4), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsMaxRFIDTagsTrapThreshold.setStatus('current')
clsSyslogIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 6))
cLSysLogConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 6, 1), )
if mibBuilder.loadTexts: cLSysLogConfigTable.setStatus('current')
cLSysLogConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-SYS-MIB", "cLSysLogServerIndex"))
if mibBuilder.loadTexts: cLSysLogConfigEntry.setStatus('current')
cLSysLogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLSysLogServerIndex.setStatus('current')
cLSysLogAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 6, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLSysLogAddressType.setStatus('current')
cLSysLogAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 6, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLSysLogAddress.setStatus('current')
cLSysLogHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLSysLogHostRowStatus.setStatus('current')
cLSysArpUnicastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysArpUnicastEnabled.setStatus('current')
cLSysBroadcastForwardingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysBroadcastForwardingEnabled.setStatus('current')
cLSysLagModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysLagModeEnabled.setStatus('current')
clsConfigProductBranchVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsConfigProductBranchVersion.setStatus('current')
clsConfigDhcpProxyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsConfigDhcpProxyEnabled.setStatus('current')
cLSysMulticastIGMP = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 13))
cLSysMulticastIGMPSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 13, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysMulticastIGMPSnoopingEnabled.setStatus('current')
cLSysMulticastIGMPSnoopingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 13, 2), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysMulticastIGMPSnoopingTimeout.setStatus('current')
cLSysMulticastIGMPQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 13, 3), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysMulticastIGMPQueryInterval.setStatus('current')
cLSPortModeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 14))
clsPortModeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 14, 1), )
if mibBuilder.loadTexts: clsPortModeConfigTable.setStatus('current')
clsPortModeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 14, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-SYS-MIB", "clsPortDot1dBasePort"))
if mibBuilder.loadTexts: clsPortModeConfigEntry.setStatus('current')
clsPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 14, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: clsPortDot1dBasePort.setStatus('current')
clsPortModePhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("half10", 2), ("full10", 3), ("half100", 4), ("full100", 5), ("full1000sx", 6), ("half1000", 7), ("full1000", 8), ("half10000", 9), ("full10000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsPortModePhysicalMode.setStatus('current')
clsPortModePhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("autonegotiate", 2), ("half10", 3), ("full10", 4), ("half100", 5), ("full100", 6), ("full1000sx", 7), ("half1000", 8), ("full1000", 9), ("half10000", 10), ("full10000", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsPortModePhysicalStatus.setStatus('current')
clsPortModeSfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 14, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsPortModeSfpType.setStatus('current')
clsPortUpDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsPortUpDownCount.setStatus('current')
clsCoreDump = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 15))
clsCoreDumpTransferEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 15, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsCoreDumpTransferEnable.setStatus('current')
clsCoreDumpTransferMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("ftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsCoreDumpTransferMode.setStatus('current')
clsCoreDumpServerIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 15, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsCoreDumpServerIPAddressType.setStatus('current')
clsCoreDumpServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 15, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsCoreDumpServerIPAddress.setStatus('current')
clsCoreDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 15, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsCoreDumpFileName.setStatus('current')
clsCoreDumpUserName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 15, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsCoreDumpUserName.setStatus('current')
clsCoreDumpPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 15, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsCoreDumpPassword.setStatus('current')
clsConfigMulticastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsConfigMulticastEnabled.setStatus('current')
cLSysMulticastMLD = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 17))
cLSysMulticastMLDSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 17, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysMulticastMLDSnoopingEnabled.setStatus('current')
cLSysMulticastMLDSnoopingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 17, 2), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysMulticastMLDSnoopingTimeout.setStatus('current')
cLSysMulticastMLDQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 17, 3), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSysMulticastMLDQueryInterval.setStatus('current')
clsConfigStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 18))
clsSysRealtimeStatsTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 18, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 5)).clone(5)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysRealtimeStatsTimer.setStatus('current')
clsSysNormalStatsTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 18, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 180)).clone(180)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysNormalStatsTimer.setStatus('current')
clsSysStatsSamplingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 18, 3), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysStatsSamplingInterval.setStatus('current')
clsSysStatsAverageInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 18, 4), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysStatsAverageInterval.setStatus('current')
clsAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 19))
clsAlarmHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 19, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(6)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsAlarmHoldTime.setStatus('current')
clsAlarmTrapRetransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 19, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsAlarmTrapRetransmitInterval.setStatus('current')
clsSysThresholdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 20))
clsSysControllerCpuUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 20, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysControllerCpuUsageThreshold.setStatus('current')
clsSysControllerMemoryUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 20, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysControllerMemoryUsageThreshold.setStatus('current')
clsSysApCpuUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 20, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysApCpuUsageThreshold.setStatus('current')
clsSysApMemoryUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 20, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysApMemoryUsageThreshold.setStatus('current')
clsNMHeartBeat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 21))
clsNMHeartBeatEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 21, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsNMHeartBeatEnable.setStatus('current')
clsNMHeartBeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 21, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(180)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsNMHeartBeatInterval.setStatus('current')
clsCrashSystem = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 1, 99), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsCrashSystem.setStatus('current')
cLSysLagModeInTransition = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSysLagModeInTransition.setStatus('current')
clsEmergencyImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsEmergencyImageVersion.setStatus('current')
clsSecStrongPwdCaseCheck = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSecStrongPwdCaseCheck.setStatus('current')
clsSecStrongPwdConsecutiveCheck = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSecStrongPwdConsecutiveCheck.setStatus('current')
clsSecStrongPwdDefaultCheck = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 5, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSecStrongPwdDefaultCheck.setStatus('current')
clsSecStrongPwdAsUserNameCheck = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 5, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSecStrongPwdAsUserNameCheck.setStatus('current')
clsSysFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysFlashSize.setStatus('current')
clsSysMemoryType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysMemoryType.setStatus('current')
clsSysMaxClients = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysMaxClients.setStatus('current')
clsSysApConnectCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysApConnectCount.setStatus('current')
clsSysNetId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSysNetId.setStatus('current')
clsSysCurrentMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysCurrentMemoryUsage.setStatus('current')
clsSysAverageMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysAverageMemoryUsage.setStatus('current')
clsSysCurrentCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysCurrentCpuUsage.setStatus('current')
clsSysAverageCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysAverageCpuUsage.setStatus('current')
clsSysCpuType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsSysCpuType.setStatus('current')
clsMaxRFIDTagsCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsMaxRFIDTagsCount.setStatus('current')
clsMaxClientsCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 8, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsMaxClientsCount.setStatus('current')
clsSecStrongPwdCheckTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 7, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsSecStrongPwdCheckTrapEnabled.setStatus('current')
clsMaxClientsTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 7, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsMaxClientsTrapEnabled.setStatus('current')
clsMaxRFIDTagsTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 7, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsMaxRFIDTagsTrapEnabled.setStatus('current')
clsSecStrongPwdManagementUser = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clsSecStrongPwdManagementUser.setStatus('current')
clsSecStrongPwdCheckType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("caseCheck", 1), ("consecutiveCheck", 2), ("defaultCheck", 3), ("usernameCheck", 4), ("allChecks", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clsSecStrongPwdCheckType.setStatus('current')
clsSecStrongPwdCheckOption = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 6, 3), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clsSecStrongPwdCheckOption.setStatus('current')
clsSysAlarmSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 6, 4), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clsSysAlarmSet.setStatus('current')
ciscoLwappSysInvalidXmlConfig = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 618, 0, 1))
if mibBuilder.loadTexts: ciscoLwappSysInvalidXmlConfig.setStatus('current')
ciscoLwappNoVlanConfigured = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 618, 0, 2)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: ciscoLwappNoVlanConfigured.setStatus('current')
ciscoLwappStrongPwdCheck = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 618, 0, 3)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdManagementUser"), ("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdCheckType"), ("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdCheckOption"))
if mibBuilder.loadTexts: ciscoLwappStrongPwdCheck.setStatus('current')
ciscoLwappSysCpuUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 618, 0, 4)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSysCurrentCpuUsage"), ("CISCO-LWAPP-SYS-MIB", "clsSysAlarmSet"))
if mibBuilder.loadTexts: ciscoLwappSysCpuUsageHigh.setStatus('current')
ciscoLwappSysMemoryUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 618, 0, 5)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSysCurrentMemoryUsage"), ("CISCO-LWAPP-SYS-MIB", "clsSysAlarmSet"))
if mibBuilder.loadTexts: ciscoLwappSysMemoryUsageHigh.setStatus('current')
ciscoLwappMaxRFIDTagsReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 618, 0, 6)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsMaxRFIDTagsTrapThreshold"), ("CISCO-LWAPP-SYS-MIB", "clsMaxRFIDTagsCount"))
if mibBuilder.loadTexts: ciscoLwappMaxRFIDTagsReached.setStatus('current')
ciscoLwappMaxClientsReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 618, 0, 7)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsMaxClientsTrapThreshold"), ("CISCO-LWAPP-SYS-MIB", "clsMaxClientsCount"))
if mibBuilder.loadTexts: ciscoLwappMaxClientsReached.setStatus('current')
ciscoLwappNMHeartBeat = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 618, 0, 8))
if mibBuilder.loadTexts: ciscoLwappNMHeartBeat.setStatus('current')
clsAllCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 618, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsAllCpuUsage.setStatus('current')
ciscoLwappSysMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 1))
ciscoLwappSysMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2))
ciscoLwappSysMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 1, 1)).setObjects(("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysMIBCompliance = ciscoLwappSysMIBCompliance.setStatus('deprecated')
ciscoLwappSysMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 1, 2)).setObjects(("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigFileEncryptionGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysTransferOperationConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysMIBComplianceRev1 = ciscoLwappSysMIBComplianceRev1.setStatus('deprecated')
ciscoLwappSysMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 1, 3)).setObjects(("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysPortConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysSecurityConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysIgmpConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysSecNotifObjsGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysNotifsGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysNotifControlGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigGroupVer1"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigFileEncryptionGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysTransferOperationConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysMIBComplianceRev2 = ciscoLwappSysMIBComplianceRev2.setStatus('deprecated')
ciscoLwappSysMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 1, 4)).setObjects(("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysPortConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysSecurityConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysIgmpConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysSecNotifObjsGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysNotifsGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysNotifControlGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigGroupVer1"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigGroupSup1"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysMldConfigGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigStatsGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysAlarmObjectGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysThresholdGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysHeartBeatGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysInfoGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysConfigFileEncryptionGroup"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysTransferOperationConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysMIBComplianceRev3 = ciscoLwappSysMIBComplianceRev3.setStatus('current')
ciscoLwappSysConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 1)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsDot3BridgeEnabled"), ("CISCO-LWAPP-SYS-MIB", "clsDownloadFileType"), ("CISCO-LWAPP-SYS-MIB", "clsDownloadCertificateKey"), ("CISCO-LWAPP-SYS-MIB", "clsUploadFileType"), ("CISCO-LWAPP-SYS-MIB", "clsUploadPacUsername"), ("CISCO-LWAPP-SYS-MIB", "clsUploadPacPassword"), ("CISCO-LWAPP-SYS-MIB", "clsUploadPacValidity"), ("CISCO-LWAPP-SYS-MIB", "cLSysBroadcastForwardingEnabled"), ("CISCO-LWAPP-SYS-MIB", "clsConfigProductBranchVersion"), ("CISCO-LWAPP-SYS-MIB", "clsConfigDhcpProxyEnabled"), ("CISCO-LWAPP-SYS-MIB", "clsCrashSystem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysConfigGroup = ciscoLwappSysConfigGroup.setStatus('current')
ciscoLwappSysConfigFileEncryptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 2)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsTransferConfigFileEncryptionKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysConfigFileEncryptionGroup = ciscoLwappSysConfigFileEncryptionGroup.setStatus('current')
ciscoLwappSysTransferOperationConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 3)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsTransferServerAddressType"), ("CISCO-LWAPP-SYS-MIB", "clsTransferServerAddress"), ("CISCO-LWAPP-SYS-MIB", "clsTransferPath"), ("CISCO-LWAPP-SYS-MIB", "clsTransferFilename"), ("CISCO-LWAPP-SYS-MIB", "clsTransferFtpUsername"), ("CISCO-LWAPP-SYS-MIB", "clsTransferFtpPassword"), ("CISCO-LWAPP-SYS-MIB", "clsTransferFtpPortNum"), ("CISCO-LWAPP-SYS-MIB", "clsTransferTftpMaxRetries"), ("CISCO-LWAPP-SYS-MIB", "clsTransferTftpTimeout"), ("CISCO-LWAPP-SYS-MIB", "clsTransferStart"), ("CISCO-LWAPP-SYS-MIB", "clsTransferStatus"), ("CISCO-LWAPP-SYS-MIB", "clsTransferStatusString"), ("CISCO-LWAPP-SYS-MIB", "clsTransferConfigFileEncryption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysTransferOperationConfigGroup = ciscoLwappSysTransferOperationConfigGroup.setStatus('current')
ciscoLwappSysPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 4)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsPortModePhysicalMode"), ("CISCO-LWAPP-SYS-MIB", "clsPortModePhysicalStatus"), ("CISCO-LWAPP-SYS-MIB", "clsPortModeSfpType"), ("CISCO-LWAPP-SYS-MIB", "clsPortUpDownCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysPortConfigGroup = ciscoLwappSysPortConfigGroup.setStatus('current')
ciscoLwappSysSecurityConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 5)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdCaseCheck"), ("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdConsecutiveCheck"), ("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdDefaultCheck"), ("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdAsUserNameCheck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysSecurityConfigGroup = ciscoLwappSysSecurityConfigGroup.setStatus('current')
ciscoLwappSysIgmpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 6)).setObjects(("CISCO-LWAPP-SYS-MIB", "cLSysMulticastIGMPSnoopingEnabled"), ("CISCO-LWAPP-SYS-MIB", "cLSysMulticastIGMPSnoopingTimeout"), ("CISCO-LWAPP-SYS-MIB", "cLSysMulticastIGMPQueryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysIgmpConfigGroup = ciscoLwappSysIgmpConfigGroup.setStatus('current')
ciscoLwappSysSecNotifObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 7)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdManagementUser"), ("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdCheckType"), ("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdCheckOption"), ("CISCO-LWAPP-SYS-MIB", "clsSysAlarmSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysSecNotifObjsGroup = ciscoLwappSysSecNotifObjsGroup.setStatus('current')
ciscoLwappSysNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 8)).setObjects(("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysInvalidXmlConfig"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappNoVlanConfigured"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappStrongPwdCheck"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysCpuUsageHigh"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappSysMemoryUsageHigh"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappMaxRFIDTagsReached"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappMaxClientsReached"), ("CISCO-LWAPP-SYS-MIB", "ciscoLwappNMHeartBeat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysNotifsGroup = ciscoLwappSysNotifsGroup.setStatus('current')
ciscoLwappSysNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 9)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSecStrongPwdCheckTrapEnabled"), ("CISCO-LWAPP-SYS-MIB", "clsMaxClientsTrapEnabled"), ("CISCO-LWAPP-SYS-MIB", "clsMaxRFIDTagsTrapEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysNotifControlGroup = ciscoLwappSysNotifControlGroup.setStatus('current')
ciscoLwappSysConfigGroupVer1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 10)).setObjects(("CISCO-LWAPP-SYS-MIB", "cLSysBroadcastForwardingEnabled"), ("CISCO-LWAPP-SYS-MIB", "cLSysLagModeEnabled"), ("CISCO-LWAPP-SYS-MIB", "clsConfigProductBranchVersion"), ("CISCO-LWAPP-SYS-MIB", "clsConfigDhcpProxyEnabled"), ("CISCO-LWAPP-SYS-MIB", "clsCoreDumpTransferEnable"), ("CISCO-LWAPP-SYS-MIB", "clsCoreDumpTransferMode"), ("CISCO-LWAPP-SYS-MIB", "clsCoreDumpServerIPAddressType"), ("CISCO-LWAPP-SYS-MIB", "clsCoreDumpServerIPAddress"), ("CISCO-LWAPP-SYS-MIB", "clsCoreDumpFileName"), ("CISCO-LWAPP-SYS-MIB", "clsCoreDumpUserName"), ("CISCO-LWAPP-SYS-MIB", "clsCoreDumpPassword"), ("CISCO-LWAPP-SYS-MIB", "clsConfigMulticastEnabled"), ("CISCO-LWAPP-SYS-MIB", "cLSysLagModeInTransition"), ("CISCO-LWAPP-SYS-MIB", "clsEmergencyImageVersion"), ("CISCO-LWAPP-SYS-MIB", "clsAllCpuUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysConfigGroupVer1 = ciscoLwappSysConfigGroupVer1.setStatus('current')
ciscoLwappSysConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 11)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsTimeZone"), ("CISCO-LWAPP-SYS-MIB", "clsTimeZoneDescription"), ("CISCO-LWAPP-SYS-MIB", "cLSysLogAddressType"), ("CISCO-LWAPP-SYS-MIB", "cLSysLogAddress"), ("CISCO-LWAPP-SYS-MIB", "cLSysLogHostRowStatus"), ("CISCO-LWAPP-SYS-MIB", "cLSysArpUnicastEnabled"), ("CISCO-LWAPP-SYS-MIB", "clsMaxClientsTrapThreshold"), ("CISCO-LWAPP-SYS-MIB", "clsMaxRFIDTagsTrapThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysConfigGroupSup1 = ciscoLwappSysConfigGroupSup1.setStatus('current')
ciscoLwappSysMldConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 12)).setObjects(("CISCO-LWAPP-SYS-MIB", "cLSysMulticastMLDSnoopingEnabled"), ("CISCO-LWAPP-SYS-MIB", "cLSysMulticastMLDSnoopingTimeout"), ("CISCO-LWAPP-SYS-MIB", "cLSysMulticastMLDQueryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysMldConfigGroup = ciscoLwappSysMldConfigGroup.setStatus('current')
ciscoLwappSysConfigStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 13)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSysRealtimeStatsTimer"), ("CISCO-LWAPP-SYS-MIB", "clsSysNormalStatsTimer"), ("CISCO-LWAPP-SYS-MIB", "clsSysStatsSamplingInterval"), ("CISCO-LWAPP-SYS-MIB", "clsSysStatsAverageInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysConfigStatsGroup = ciscoLwappSysConfigStatsGroup.setStatus('current')
ciscoLwappSysAlarmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 14)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsAlarmHoldTime"), ("CISCO-LWAPP-SYS-MIB", "clsAlarmTrapRetransmitInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysAlarmObjectGroup = ciscoLwappSysAlarmObjectGroup.setStatus('current')
ciscoLwappSysThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 15)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSysControllerCpuUsageThreshold"), ("CISCO-LWAPP-SYS-MIB", "clsSysControllerMemoryUsageThreshold"), ("CISCO-LWAPP-SYS-MIB", "clsSysApCpuUsageThreshold"), ("CISCO-LWAPP-SYS-MIB", "clsSysApMemoryUsageThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysThresholdGroup = ciscoLwappSysThresholdGroup.setStatus('current')
ciscoLwappSysHeartBeatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 16)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsNMHeartBeatEnable"), ("CISCO-LWAPP-SYS-MIB", "clsNMHeartBeatInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysHeartBeatGroup = ciscoLwappSysHeartBeatGroup.setStatus('current')
ciscoLwappSysInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 618, 2, 2, 17)).setObjects(("CISCO-LWAPP-SYS-MIB", "clsSysFlashSize"), ("CISCO-LWAPP-SYS-MIB", "clsSysMemoryType"), ("CISCO-LWAPP-SYS-MIB", "clsSysMaxClients"), ("CISCO-LWAPP-SYS-MIB", "clsSysApConnectCount"), ("CISCO-LWAPP-SYS-MIB", "clsSysNetId"), ("CISCO-LWAPP-SYS-MIB", "clsSysCurrentMemoryUsage"), ("CISCO-LWAPP-SYS-MIB", "clsSysAverageMemoryUsage"), ("CISCO-LWAPP-SYS-MIB", "clsSysCurrentCpuUsage"), ("CISCO-LWAPP-SYS-MIB", "clsSysAverageCpuUsage"), ("CISCO-LWAPP-SYS-MIB", "clsSysCpuType"), ("CISCO-LWAPP-SYS-MIB", "clsMaxRFIDTagsCount"), ("CISCO-LWAPP-SYS-MIB", "clsMaxClientsCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSysInfoGroup = ciscoLwappSysInfoGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-SYS-MIB", clsCoreDumpServerIPAddressType=clsCoreDumpServerIPAddressType, cLSysLogServerIndex=cLSysLogServerIndex, ciscoLwappSysPortConfigGroup=ciscoLwappSysPortConfigGroup, clsTransferPath=clsTransferPath, ciscoLwappSysConfigFileEncryptionGroup=ciscoLwappSysConfigFileEncryptionGroup, cLSysMulticastMLDSnoopingEnabled=cLSysMulticastMLDSnoopingEnabled, ciscoLwappSysMIB=ciscoLwappSysMIB, ciscoLwappSysMIBComplianceRev3=ciscoLwappSysMIBComplianceRev3, clsSysStatsSamplingInterval=clsSysStatsSamplingInterval, clsTransferServerAddressType=clsTransferServerAddressType, clsCoreDump=clsCoreDump, clsUploadPacPassword=clsUploadPacPassword, clsTransferStatus=clsTransferStatus, clsMaxClientsCount=clsMaxClientsCount, ciscoLwappSysMIBGroups=ciscoLwappSysMIBGroups, clsTransferConfigTable=clsTransferConfigTable, ciscoLwappSysMIBNotifObjects=ciscoLwappSysMIBNotifObjects, clsSysRealtimeStatsTimer=clsSysRealtimeStatsTimer, cLSysMulticastMLDQueryInterval=cLSysMulticastMLDQueryInterval, clsStatus=clsStatus, cLSysLogAddressType=cLSysLogAddressType, clsSecStrongPwdConsecutiveCheck=clsSecStrongPwdConsecutiveCheck, clsSysThresholdConfig=clsSysThresholdConfig, cLSysMulticastMLDSnoopingTimeout=cLSysMulticastMLDSnoopingTimeout, clsMaxClientsTrapThreshold=clsMaxClientsTrapThreshold, clsCoreDumpTransferEnable=clsCoreDumpTransferEnable, cLSysMulticastIGMPQueryInterval=cLSysMulticastIGMPQueryInterval, ciscoLwappStrongPwdCheck=ciscoLwappStrongPwdCheck, ciscoLwappSysNotifsGroup=ciscoLwappSysNotifsGroup, cLSysArpUnicastEnabled=cLSysArpUnicastEnabled, clsCoreDumpPassword=clsCoreDumpPassword, clsUploadPacUsername=clsUploadPacUsername, clsImageInfo=clsImageInfo, clsPortUpDownCount=clsPortUpDownCount, cLSysLogHostRowStatus=cLSysLogHostRowStatus, ciscoLwappSysMIBComplianceRev1=ciscoLwappSysMIBComplianceRev1, clsAlarmTrapRetransmitInterval=clsAlarmTrapRetransmitInterval, clsNMHeartBeatEnable=clsNMHeartBeatEnable, clsUploadFileType=clsUploadFileType, ciscoLwappSysMIBComplianceRev2=ciscoLwappSysMIBComplianceRev2, clsTransferTftpMaxRetries=clsTransferTftpMaxRetries, clsTimeZoneDescription=clsTimeZoneDescription, clsTransferServerAddress=clsTransferServerAddress, clsMaxRFIDTagsTrapThreshold=clsMaxRFIDTagsTrapThreshold, PYSNMP_MODULE_ID=ciscoLwappSysMIB, clsNMHeartBeatInterval=clsNMHeartBeatInterval, clsSysFlashSize=clsSysFlashSize, clsTransferMode=clsTransferMode, clsTransferFilename=clsTransferFilename, clsSysMemoryType=clsSysMemoryType, clsPortModePhysicalStatus=clsPortModePhysicalStatus, clsCoreDumpFileName=clsCoreDumpFileName, clsSysCurrentCpuUsage=clsSysCurrentCpuUsage, clsPortModeConfigTable=clsPortModeConfigTable, clsSysAverageMemoryUsage=clsSysAverageMemoryUsage, clsEmergencyImageVersion=clsEmergencyImageVersion, cLSysMulticastIGMP=cLSysMulticastIGMP, clsSysStatsAverageInterval=clsSysStatsAverageInterval, clsSysAverageCpuUsage=clsSysAverageCpuUsage, clsAlarmHoldTime=clsAlarmHoldTime, ciscoLwappSysSecNotifObjsGroup=ciscoLwappSysSecNotifObjsGroup, ciscoLwappSysIgmpConfigGroup=ciscoLwappSysIgmpConfigGroup, ciscoLwappMaxClientsReached=ciscoLwappMaxClientsReached, cLSysMulticastMLD=cLSysMulticastMLD, cLSPortModeConfig=cLSPortModeConfig, ciscoLwappSysAlarmObjectGroup=ciscoLwappSysAlarmObjectGroup, ciscoLwappSysMIBNotifControlObjects=ciscoLwappSysMIBNotifControlObjects, clsConfigGeneral=clsConfigGeneral, clsSysControllerCpuUsageThreshold=clsSysControllerCpuUsageThreshold, clsSysMaxClients=clsSysMaxClients, clsConfigMulticastEnabled=clsConfigMulticastEnabled, clsSecStrongPwdAsUserNameCheck=clsSecStrongPwdAsUserNameCheck, ciscoLwappSysMIBCompliance=ciscoLwappSysMIBCompliance, clsSysInfo=clsSysInfo, clsCoreDumpServerIPAddress=clsCoreDumpServerIPAddress, ciscoLwappSysMIBNotifs=ciscoLwappSysMIBNotifs, ciscoLwappNMHeartBeat=ciscoLwappNMHeartBeat, clsConfigDownload=clsConfigDownload, clsTransferFtpPassword=clsTransferFtpPassword, clsCoreDumpTransferMode=clsCoreDumpTransferMode, clsPortModePhysicalMode=clsPortModePhysicalMode, ciscoLwappNoVlanConfigured=ciscoLwappNoVlanConfigured, ciscoLwappSysMIBConform=ciscoLwappSysMIBConform, clsSyslogIpConfig=clsSyslogIpConfig, cLSysLagModeEnabled=cLSysLagModeEnabled, clsSysApCpuUsageThreshold=clsSysApCpuUsageThreshold, cLSysMulticastIGMPSnoopingEnabled=cLSysMulticastIGMPSnoopingEnabled, ciscoLwappSysMIBObjects=ciscoLwappSysMIBObjects, clsTransferConfigFileEncryptionKey=clsTransferConfigFileEncryptionKey, cLSysLogConfigEntry=cLSysLogConfigEntry, clsPortModeSfpType=clsPortModeSfpType, clsSecStrongPwdCaseCheck=clsSecStrongPwdCaseCheck, clsSysCurrentMemoryUsage=clsSysCurrentMemoryUsage, clsSecStrongPwdManagementUser=clsSecStrongPwdManagementUser, ciscoLwappSysHeartBeatGroup=ciscoLwappSysHeartBeatGroup, clsTransferType=clsTransferType, ciscoLwappSysInfoGroup=ciscoLwappSysInfoGroup, clsUploadPacValidity=clsUploadPacValidity, clsTransferTftpTimeout=clsTransferTftpTimeout, clsNMHeartBeat=clsNMHeartBeat, ciscoLwappSysThresholdGroup=ciscoLwappSysThresholdGroup, clsSysApMemoryUsageThreshold=clsSysApMemoryUsageThreshold, clsTransferStatusString=clsTransferStatusString, ciscoLwappSysTransferOperationConfigGroup=ciscoLwappSysTransferOperationConfigGroup, clsSysApConnectCount=clsSysApConnectCount, ciscoLwappMaxRFIDTagsReached=ciscoLwappMaxRFIDTagsReached, cLSysBroadcastForwardingEnabled=cLSysBroadcastForwardingEnabled, clsTransferStart=clsTransferStart, clsTimeZone=clsTimeZone, ciscoLwappSysMldConfigGroup=ciscoLwappSysMldConfigGroup, clsTransferFtpPortNum=clsTransferFtpPortNum, clsSysNormalStatsTimer=clsSysNormalStatsTimer, ciscoLwappSysConfigStatsGroup=ciscoLwappSysConfigStatsGroup, ciscoLwappSysCpuUsageHigh=ciscoLwappSysCpuUsageHigh, clsSysControllerMemoryUsageThreshold=clsSysControllerMemoryUsageThreshold, cLSysMulticastIGMPSnoopingTimeout=cLSysMulticastIGMPSnoopingTimeout, clsSecStrongPwdCheckTrapEnabled=clsSecStrongPwdCheckTrapEnabled, ciscoLwappSysNotifControlGroup=ciscoLwappSysNotifControlGroup, clsSecStrongPwdDefaultCheck=clsSecStrongPwdDefaultCheck, ciscoLwappSysSecurityConfigGroup=ciscoLwappSysSecurityConfigGroup, ciscoLwappSysInvalidXmlConfig=ciscoLwappSysInvalidXmlConfig, clsConfigStats=clsConfigStats, clsMaxRFIDTagsCount=clsMaxRFIDTagsCount, clsPortModeConfigEntry=clsPortModeConfigEntry, clsCrashSystem=clsCrashSystem, clsSysAlarmSet=clsSysAlarmSet, clsConfigDhcpProxyEnabled=clsConfigDhcpProxyEnabled, clsConfig=clsConfig, clsDownloadFileType=clsDownloadFileType, clsTransferConfig=clsTransferConfig, clsSysCpuType=clsSysCpuType, cLSysLagModeInTransition=cLSysLagModeInTransition, clsMaxClientsTrapEnabled=clsMaxClientsTrapEnabled, ciscoLwappSysMIBCompliances=ciscoLwappSysMIBCompliances, ciscoLwappSysConfigGroupVer1=ciscoLwappSysConfigGroupVer1, cLSysLogConfigTable=cLSysLogConfigTable, clsDownloadCertificateKey=clsDownloadCertificateKey, clsAlarmObjects=clsAlarmObjects, clsSecurityGroup=clsSecurityGroup, clsTransferFtpUsername=clsTransferFtpUsername, clsSecStrongPwdCheckType=clsSecStrongPwdCheckType, clsCpuInfo=clsCpuInfo, clsConfigUpload=clsConfigUpload, clsSecStrongPwdCheckOption=clsSecStrongPwdCheckOption, clsTransferConfigFileEncryption=clsTransferConfigFileEncryption, clsSysNetId=clsSysNetId, clsConfigProductBranchVersion=clsConfigProductBranchVersion, ciscoLwappSysConfigGroup=ciscoLwappSysConfigGroup, ciscoLwappSysConfigGroupSup1=ciscoLwappSysConfigGroupSup1, ciscoLwappSysMemoryUsageHigh=ciscoLwappSysMemoryUsageHigh, clsAllCpuUsage=clsAllCpuUsage, clsMaxRFIDTagsTrapEnabled=clsMaxRFIDTagsTrapEnabled, clsTransferConfigGroup=clsTransferConfigGroup, clsTransferConfigEntry=clsTransferConfigEntry, cLSysLogAddress=cLSysLogAddress, clsPortDot1dBasePort=clsPortDot1dBasePort, clsCoreDumpUserName=clsCoreDumpUserName, clsDot3BridgeEnabled=clsDot3BridgeEnabled)
