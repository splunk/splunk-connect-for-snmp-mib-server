#
# PySNMP MIB module HUAWEI-MLSR-DEV-ADM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MLSR-DEV-ADM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:35:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
mlsr, products, huawei, router = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "mlsr", "products", "huawei", "router")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, MibIdentifier, ObjectIdentity, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, Gauge32, NotificationType, Counter64, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "Gauge32", "NotificationType", "Counter64", "IpAddress", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class HwFlashStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("busy", 1), ("available", 2))

class HwFlashEreaseStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("hwFlhInOperating", 1), ("hwFlhOpSuccess", 2), ("hwFlhOpFailure", 3), ("hwFlhReadOnly", 4), ("hwFlhOpenFailure", 5), ("hwBufferAllocationFailure", 6), ("hwNoOpAfterLastPowered", 7))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

routerGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1))
attr = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1))
basis = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 1))
version = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('mandatory')
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 2))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3))
logcontroller = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logcontroller.setStatus('mandatory')
loghostTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2), )
if mibBuilder.loadTexts: loghostTable.setStatus('mandatory')
loghostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1), ).setIndexNames((0, "HUAWEI-MLSR-DEV-ADM-MIB", "loghostaddress"))
if mibBuilder.loadTexts: loghostEntry.setStatus('mandatory')
loghostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loghostIndex.setStatus('mandatory')
loghostaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loghostaddress.setStatus('mandatory')
loghostport = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loghostport.setStatus('mandatory')
loghostseverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghostseverity.setStatus('mandatory')
loghostlanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chinese", 1), ("english", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghostlanguage.setStatus('mandatory')
loghostfacility = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("kern", 1), ("user", 2), ("mail", 3), ("daemon", 4), ("auth", 5), ("syslog", 6), ("lpr", 7), ("news", 8), ("uucp", 9), ("cron", 10), ("authpriv", 11), ("ftp", 12), ("local0", 17), ("local1", 18), ("local2", 19), ("local3", 20), ("local4", 21), ("local5", 22), ("local6", 23), ("local7", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghostfacility.setStatus('mandatory')
loghostaccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghostaccess.setStatus('mandatory')
loghoststatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghoststatus.setStatus('mandatory')
logfilterTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 3), )
if mibBuilder.loadTexts: logfilterTable.setStatus('mandatory')
logfilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 3, 1), ).setIndexNames((0, "HUAWEI-MLSR-DEV-ADM-MIB", "logfilterIndex"), (0, "HUAWEI-MLSR-DEV-ADM-MIB", "logdevfacility"))
if mibBuilder.loadTexts: logfilterEntry.setStatus('mandatory')
logfilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logfilterIndex.setStatus('mandatory')
logdevfacility = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logdevfacility.setStatus('mandatory')
logfilterstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logfilterstatus.setStatus('mandatory')
vrp = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 1, 1, 4))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2))
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('mandatory')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1), ).setIndexNames((0, "HUAWEI-MLSR-DEV-ADM-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleEntry.setStatus('mandatory')
moduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIndex.setStatus('mandatory')
moduleSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSlotNum.setStatus('mandatory')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 277, 278, 281))).clone(namedValues=NamedValues(("unavailable", 1), ("as", 2), ("ss", 3), ("bi", 4), ("e12", 5), ("e14", 6), ("fe1", 7), ("e1", 8), ("fe2", 9), ("vi2", 11), ("vi4", 12), ("vi30", 13), ("s1b", 14), ("sa2", 15), ("as16", 16), ("new8as", 17), ("lsa", 18), ("fxs2", 19), ("fxo2", 20), ("em2", 21), ("fxs4", 22), ("fxo4", 23), ("em4", 24), ("sab", 25), ("e1vi", 26), ("am12", 27), ("am6", 28), ("ndec", 29), ("newsa2", 30), ("aux", 31), ("console", 32), ("sic-wan", 33), ("sic-1fe", 34), ("sic-1sa", 35), ("sic-3as", 36), ("sic-1e1", 37), ("sic-1t1", 38), ("sic-1bu", 39), ("sic-2bu", 40), ("sic-1bs", 41), ("sic-2bs", 42), ("sic-1am", 43), ("sic-2am", 44), ("sic-1em", 45), ("sic-2em", 46), ("sic-1fxs", 47), ("sic-2fxs", 48), ("sic-1fxo", 49), ("sic-2fxo", 50), ("fcm6", 51), ("sa8", 52), ("t11", 53), ("t12", 54), ("t14", 55), ("t1vi", 56), ("fcm4", 57), ("fcm2", 58), ("rtb21ce3", 59), ("ame6", 60), ("ame12", 61), ("e11-f", 65), ("e12-f", 66), ("e14-f", 67), ("t11-f", 68), ("t12-f", 69), ("t14-f", 70), ("e11-f-17", 71), ("t11-f-17", 72), ("rtb21ct3", 73), ("atmadsl1", 74), ("atmadsl2", 75), ("atm155m", 76), ("ase8", 77), ("ase16", 78), ("sae4", 79), ("sae2", 80), ("atmshdsl1", 90), ("atmshdsl2", 91), ("atmshdsl4", 92), ("atm25m", 93), ("atme3", 94), ("atmt3", 95), ("xdsl-fec", 96), ("xdsl-adsl", 97), ("xdsl-gshdsl", 98), ("xdsl-bri", 99), ("xdsl-scc", 100), ("ge1", 101), ("pos155m", 102), ("cpos", 103), ("fe1op", 104), ("sae8", 105), ("atm155m-mm", 106), ("atm155m-sm", 107), ("atm155m-sml", 108), ("fe1op-sfx", 109), ("fe1op-mfx", 110), ("cpos-t1", 111), ("ge1-op", 112), ("ge2-op", 113), ("ge2", 114), ("fix-1wan", 115), ("fix-1sae", 116), ("cavium", 117), ("sic-1Eth", 118), ("atm1ADSLI", 119), ("atm2ADSLI", 120), ("fix-e11", 121), ("fix-t11", 122), ("e18-75", 123), ("e18-120", 124), ("t18", 125), ("sic-1vifxs", 126), ("sic-1vifxo", 127), ("sic-2vifxs", 128), ("sic-2vifxo", 129), ("xdsl-fec-new", 130), ("xdsl-sa", 131), ("bs4", 132), ("ima-8e175", 133), ("ima-8e1120", 134), ("ima-4e175", 135), ("ima-4e1120", 136), ("ima-8t1", 137), ("ima-4t1", 138), ("sic-1t1f", 139), ("sic-1e1f", 140), ("fe4", 149), ("atm1shdsl4wire", 151), ("atmIma4shdsl", 152), ("ls4", 153), ("ls8", 154), ("ls16", 155), ("sic-adls2plus-isdn", 156), ("sic-adls2plus-pots", 157), ("ft3", 158), ("ce32", 159), ("bsv2", 160), ("bsv4", 161), ("rpu", 162), ("erpu", 163), ("ssl", 164), ("nsa", 165), ("fe18-75", 220), ("fe18-120", 221), ("ft18", 222), ("cf-card", 223), ("bsv2-v2", 224), ("e1vi1-v2", 225), ("e1vi2", 226), ("t1vi1-v2", 227), ("t1vi2", 228), ("osm", 229), ("sd707", 230), ("dm-epri", 231), ("dm-tpri", 232), ("erpu-h", 233), ("sic-2e1-f", 277), ("sic-1e1-f-v2", 278), ("oneatm-oc3", 281)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleType.setStatus('mandatory')
moduleFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFirstPort.setStatus('mandatory')
moduleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumberOfPorts.setStatus('mandatory')
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVersion.setStatus('obsolete')
moduleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwVersion.setStatus('mandatory')
moduleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwVersion.setStatus('mandatory')
hwFlashMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 3))
hwFlhTotalSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhTotalSize.setStatus('mandatory')
hwFlhUnusedSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhUnusedSize.setStatus('mandatory')
hwFlhEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhEraseTime.setStatus('mandatory')
hwFlhEraseStat = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 3, 4), HwFlashEreaseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhEraseStat.setStatus('mandatory')
hwFlhCurStat = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 3, 5), HwFlashStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhCurStat.setStatus('mandatory')
huaweiMixinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4))
hwModuleId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwModuleId.setStatus('mandatory')
hwROMID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwROMID.setStatus('mandatory')
hwROMVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwROMVersion.setStatus('mandatory')
hwROMSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwROMSysVersion.setStatus('mandatory')
hwRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRAMSize.setStatus('mandatory')
hwNVRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNVRAMSize.setStatus('mandatory')
hwNVRAMUsed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNVRAMUsed.setStatus('mandatory')
hwConfigReg = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("nvram", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConfigReg.setStatus('mandatory')
hwConfigRegNextReboot = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConfigRegNextReboot.setStatus('mandatory')
hwTFTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTFTPEnabled.setStatus('mandatory')
hwMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryFree.setStatus('obsolete')
hwCpuCostRatePer5Sec = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCpuCostRatePer5Sec.setStatus('mandatory')
hwCpuCostRatePer5Minute = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCpuCostRatePer5Minute.setStatus('mandatory')
hwCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCurrentTime.setStatus('mandatory')
hwSysAirFlowTempIn = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("overcold", 1), ("overhot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysAirFlowTempIn.setStatus('mandatory')
hwBuzzerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("silence", 1), ("tweet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuzzerStatus.setStatus('mandatory')
hwFansStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("running", 0), ("stopping", 1), ("nofan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFansStatus.setStatus('mandatory')
hwPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("nopower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerStatus.setStatus('mandatory')
hwSecondPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("nopower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecondPowerStatus.setStatus('mandatory')
huaweiMemoryMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5))
hwUsedMemory = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUsedMemory.setStatus('mandatory')
hwFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFreeMemory.setStatus('mandatory')
hwMemoryLargestFree = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryLargestFree.setStatus('mandatory')
hwBuffer32Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32Size.setStatus('mandatory')
hwBuffer32Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32Total.setStatus('mandatory')
hwBuffer32Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32Free.setStatus('mandatory')
hwBuffer32Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32Used.setStatus('mandatory')
hwBuffer32DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32DropCounts.setStatus('mandatory')
hwBuffer32FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32FreeError2.setStatus('mandatory')
hwBuffer32FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32FreeError3.setStatus('mandatory')
hwBuffer32CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32CollectCounts.setStatus('mandatory')
hwBuffer64Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64Size.setStatus('mandatory')
hwBuffer64Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64Total.setStatus('mandatory')
hwBuffer64Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64Free.setStatus('mandatory')
hwBuffer64Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64Used.setStatus('mandatory')
hwBuffer64DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64DropCounts.setStatus('mandatory')
hwBuffer64FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64FreeError2.setStatus('mandatory')
hwBuffer64FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64FreeError3.setStatus('mandatory')
hwBuffer64CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64CollectCounts.setStatus('mandatory')
hwBuffer128Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128Size.setStatus('mandatory')
hwBuffer128Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128Total.setStatus('mandatory')
hwBuffer128Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128Free.setStatus('mandatory')
hwBuffer128Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128Used.setStatus('mandatory')
hwBuffer128DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128DropCounts.setStatus('mandatory')
hwBuffer128FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128FreeError2.setStatus('mandatory')
hwBuffer128FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128FreeError3.setStatus('mandatory')
hwBuffer128CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128CollectCounts.setStatus('mandatory')
hwBuffer256Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256Size.setStatus('mandatory')
hwBuffer256Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256Total.setStatus('mandatory')
hwBuffer256Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256Free.setStatus('mandatory')
hwBuffer256Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256Used.setStatus('mandatory')
hwBuffer256DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256DropCounts.setStatus('mandatory')
hwBuffer256FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256FreeError2.setStatus('mandatory')
hwBuffer256FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256FreeError3.setStatus('mandatory')
hwBuffer256CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256CollectCounts.setStatus('mandatory')
hwBuffer512Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512Size.setStatus('mandatory')
hwBuffer512Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512Total.setStatus('mandatory')
hwBuffer512Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512Free.setStatus('mandatory')
hwBuffer512Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512Used.setStatus('mandatory')
hwBuffer512DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512DropCounts.setStatus('mandatory')
hwBuffer512FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512FreeError2.setStatus('mandatory')
hwBuffer512FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512FreeError3.setStatus('mandatory')
hwBuffer512CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512CollectCounts.setStatus('mandatory')
hwBuffer1024Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024Size.setStatus('mandatory')
hwBuffer1024Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024Total.setStatus('mandatory')
hwBuffer1024Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024Free.setStatus('mandatory')
hwBuffer1024Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024Used.setStatus('mandatory')
hwBuffer1024DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024DropCounts.setStatus('mandatory')
hwBuffer1024FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024FreeError2.setStatus('mandatory')
hwBuffer1024FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024FreeError3.setStatus('mandatory')
hwBuffer1024CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024CollectCounts.setStatus('mandatory')
hwBuffer2048Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048Size.setStatus('mandatory')
hwBuffer2048Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048Total.setStatus('mandatory')
hwBuffer2048Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048Free.setStatus('mandatory')
hwBuffer2048Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048Used.setStatus('mandatory')
hwBuffer2048DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048DropCounts.setStatus('mandatory')
hwBuffer2048FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048FreeError2.setStatus('mandatory')
hwBuffer2048FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048FreeError3.setStatus('mandatory')
hwBuffer2048CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048CollectCounts.setStatus('mandatory')
hwBuffer4096Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096Size.setStatus('mandatory')
hwBuffer4096Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096Total.setStatus('mandatory')
hwBuffer4096Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096Free.setStatus('mandatory')
hwBuffer4096Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096Used.setStatus('mandatory')
hwBuffer4096DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096DropCounts.setStatus('mandatory')
hwBuffer4096FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096FreeError2.setStatus('mandatory')
hwBuffer4096FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096FreeError3.setStatus('mandatory')
hwBuffer4096CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096CollectCounts.setStatus('mandatory')
hwBuffer8192Size = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192Size.setStatus('mandatory')
hwBuffer8192Total = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192Total.setStatus('mandatory')
hwBuffer8192Free = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192Free.setStatus('mandatory')
hwBuffer8192Used = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192Used.setStatus('mandatory')
hwBuffer8192DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192DropCounts.setStatus('mandatory')
hwBuffer8192FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192FreeError2.setStatus('mandatory')
hwBuffer8192FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192FreeError3.setStatus('mandatory')
hwBuffer8192CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192CollectCounts.setStatus('mandatory')
hwBuffer45KSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KSize.setStatus('mandatory')
hwBuffer45KTotal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KTotal.setStatus('mandatory')
hwBuffer45KFree = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KFree.setStatus('mandatory')
hwBuffer45KUsed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KUsed.setStatus('mandatory')
hwBuffer45KDropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KDropCounts.setStatus('mandatory')
hwBuffer45KFreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KFreeError2.setStatus('mandatory')
hwBuffer45KFreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KFreeError3.setStatus('mandatory')
hwBuffer45KCollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KCollectCounts.setStatus('mandatory')
hwBuffer256KSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KSize.setStatus('mandatory')
hwBuffer256KTotal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KTotal.setStatus('mandatory')
hwBuffer256KFree = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KFree.setStatus('mandatory')
hwBuffer256KUsed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KUsed.setStatus('mandatory')
hwBuffer256KDropCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KDropCounts.setStatus('mandatory')
hwBuffer256KFreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KFreeError2.setStatus('mandatory')
hwBuffer256KFreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KFreeError3.setStatus('mandatory')
hwBuffer256KCollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KCollectCounts.setStatus('mandatory')
hwMemoryMallocFail = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryMallocFail.setStatus('mandatory')
hwMemoryMallocNoMem = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 5, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryMallocNoMem.setStatus('mandatory')
hwConfigFile = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 2, 6))
hwRunCfgChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRunCfgChangedTime.setStatus('mandatory')
hwRunCfgSavedTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRunCfgSavedTime.setStatus('mandatory')
hwStartCfgChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 6, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStartCfgChangedTime.setStatus('mandatory')
hwNetConfigName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNetConfigName.setStatus('mandatory')
hwHostConfigName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 2, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwHostConfigName.setStatus('obsolete')
hwmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 6))
hwmRouterSerialNO = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmRouterSerialNO.setStatus('mandatory')
hwmWhyReboot = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmWhyReboot.setStatus('mandatory')
hwmHostName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmHostName.setStatus('mandatory')
hwmHostHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmHostHwVersion.setStatus('mandatory')
mibBuilder.exportSymbols("HUAWEI-MLSR-DEV-ADM-MIB", hwBuffer256KFreeError3=hwBuffer256KFreeError3, hwBuffer4096FreeError2=hwBuffer4096FreeError2, hwBuffer32Free=hwBuffer32Free, logfilterstatus=logfilterstatus, hwRunCfgSavedTime=hwRunCfgSavedTime, hwBuffer1024Total=hwBuffer1024Total, logfilterIndex=logfilterIndex, loghostEntry=loghostEntry, hwBuffer512DropCounts=hwBuffer512DropCounts, loghostfacility=loghostfacility, hwBuffer2048Size=hwBuffer2048Size, hwCpuCostRatePer5Minute=hwCpuCostRatePer5Minute, hwROMID=hwROMID, hwBuffer45KFreeError3=hwBuffer45KFreeError3, hwBuffer128Total=hwBuffer128Total, hwNVRAMSize=hwNVRAMSize, hwBuffer256FreeError3=hwBuffer256FreeError3, hwBuffer8192Size=hwBuffer8192Size, logdevfacility=logdevfacility, huaweiMemoryMan=huaweiMemoryMan, hwBuffer45KFree=hwBuffer45KFree, hwNetConfigName=hwNetConfigName, hwBuffer256KFreeError2=hwBuffer256KFreeError2, loghostaddress=loghostaddress, hwRunCfgChangedTime=hwRunCfgChangedTime, hwBuffer8192Free=hwBuffer8192Free, hwHostConfigName=hwHostConfigName, hwBuffer64Size=hwBuffer64Size, module=module, hwBuffer256DropCounts=hwBuffer256DropCounts, hwBuffer1024Free=hwBuffer1024Free, hwBuffer1024DropCounts=hwBuffer1024DropCounts, hwStartCfgChangedTime=hwStartCfgChangedTime, basis=basis, hwBuffer32CollectCounts=hwBuffer32CollectCounts, hwBuffer128FreeError3=hwBuffer128FreeError3, hwFansStatus=hwFansStatus, hwBuffer2048DropCounts=hwBuffer2048DropCounts, moduleHwVersion=moduleHwVersion, moduleType=moduleType, hwBuffer128Used=hwBuffer128Used, hwBuffer45KSize=hwBuffer45KSize, hwBuffer4096Size=hwBuffer4096Size, hwBuffer4096Used=hwBuffer4096Used, hwMemoryMallocNoMem=hwMemoryMallocNoMem, hwBuffer2048FreeError3=hwBuffer2048FreeError3, hwBuffer512Free=hwBuffer512Free, hwBuffer4096Total=hwBuffer4096Total, hwFreeMemory=hwFreeMemory, hwBuffer64Total=hwBuffer64Total, hwBuffer4096DropCounts=hwBuffer4096DropCounts, logfilterTable=logfilterTable, loghostlanguage=loghostlanguage, loghostseverity=loghostseverity, hwBuffer32Size=hwBuffer32Size, hwBuffer2048Free=hwBuffer2048Free, hwBuffer2048Total=hwBuffer2048Total, loghostTable=loghostTable, version=version, hwBuffer2048Used=hwBuffer2048Used, hwBuffer8192CollectCounts=hwBuffer8192CollectCounts, loghostIndex=loghostIndex, logfilterEntry=logfilterEntry, hwBuffer256KCollectCounts=hwBuffer256KCollectCounts, hwmHostHwVersion=hwmHostHwVersion, hwFlashMan=hwFlashMan, hwBuffer64Used=hwBuffer64Used, hwBuffer256CollectCounts=hwBuffer256CollectCounts, moduleTable=moduleTable, log=log, HwFlashEreaseStatus=HwFlashEreaseStatus, hwBuffer256KUsed=hwBuffer256KUsed, hwBuffer64CollectCounts=hwBuffer64CollectCounts, huaweiMixinfo=huaweiMixinfo, hwModuleId=hwModuleId, hwSysAirFlowTempIn=hwSysAirFlowTempIn, hwBuffer256Total=hwBuffer256Total, hwBuffer8192FreeError2=hwBuffer8192FreeError2, hwBuffer45KTotal=hwBuffer45KTotal, hwBuffer32Total=hwBuffer32Total, moduleFirstPort=moduleFirstPort, hwBuffer128Free=hwBuffer128Free, hwBuffer1024CollectCounts=hwBuffer1024CollectCounts, hwBuffer8192Total=hwBuffer8192Total, hwFlhEraseStat=hwFlhEraseStat, hwBuffer45KDropCounts=hwBuffer45KDropCounts, hwBuffer512Size=hwBuffer512Size, hwFlhUnusedSize=hwFlhUnusedSize, moduleIndex=moduleIndex, hwBuffer128DropCounts=hwBuffer128DropCounts, loghostaccess=loghostaccess, moduleSlotNum=moduleSlotNum, hwBuffer45KFreeError2=hwBuffer45KFreeError2, hwBuffer256Size=hwBuffer256Size, hwBuffer32FreeError2=hwBuffer32FreeError2, hwRAMSize=hwRAMSize, moduleNumberOfPorts=moduleNumberOfPorts, logcontroller=logcontroller, trap=trap, hwConfigReg=hwConfigReg, hwROMVersion=hwROMVersion, hwFlhTotalSize=hwFlhTotalSize, hwNVRAMUsed=hwNVRAMUsed, attr=attr, RowStatus=RowStatus, hwUsedMemory=hwUsedMemory, hwBuffer64FreeError3=hwBuffer64FreeError3, hwBuffer8192Used=hwBuffer8192Used, hwBuffer45KUsed=hwBuffer45KUsed, hwBuffer256KFree=hwBuffer256KFree, hwFlhEraseTime=hwFlhEraseTime, hwBuffer1024FreeError2=hwBuffer1024FreeError2, hwBuffer4096FreeError3=hwBuffer4096FreeError3, hwBuffer8192FreeError3=hwBuffer8192FreeError3, hwBuffer32Used=hwBuffer32Used, routerGeneral=routerGeneral, hwBuzzerStatus=hwBuzzerStatus, hwBuffer64FreeError2=hwBuffer64FreeError2, hwBuffer128CollectCounts=hwBuffer128CollectCounts, hwMemoryLargestFree=hwMemoryLargestFree, hwConfigRegNextReboot=hwConfigRegNextReboot, hwBuffer256KSize=hwBuffer256KSize, hwMemoryFree=hwMemoryFree, hwBuffer512CollectCounts=hwBuffer512CollectCounts, hwBuffer1024Used=hwBuffer1024Used, hwConfigFile=hwConfigFile, hwSecondPowerStatus=hwSecondPowerStatus, hwBuffer256Free=hwBuffer256Free, hwTFTPEnabled=hwTFTPEnabled, hwBuffer64DropCounts=hwBuffer64DropCounts, hwCurrentTime=hwCurrentTime, hwBuffer2048CollectCounts=hwBuffer2048CollectCounts, hwBuffer512Used=hwBuffer512Used, hwBuffer64Free=hwBuffer64Free, hwBuffer4096CollectCounts=hwBuffer4096CollectCounts, hwBuffer4096Free=hwBuffer4096Free, hwmSystem=hwmSystem, hwBuffer1024Size=hwBuffer1024Size, HwFlashStatus=HwFlashStatus, moduleEntry=moduleEntry, moduleVersion=moduleVersion, hwBuffer1024FreeError3=hwBuffer1024FreeError3, hwBuffer32FreeError3=hwBuffer32FreeError3, hwBuffer8192DropCounts=hwBuffer8192DropCounts, hwmHostName=hwmHostName, hwBuffer512FreeError2=hwBuffer512FreeError2, hwBuffer32DropCounts=hwBuffer32DropCounts, hwBuffer512Total=hwBuffer512Total, hwBuffer128FreeError2=hwBuffer128FreeError2, hwBuffer512FreeError3=hwBuffer512FreeError3, hwBuffer128Size=hwBuffer128Size, hwROMSysVersion=hwROMSysVersion, hwBuffer2048FreeError2=hwBuffer2048FreeError2, hwBuffer256KTotal=hwBuffer256KTotal, hwFlhCurStat=hwFlhCurStat, hwmWhyReboot=hwmWhyReboot, hwBuffer256Used=hwBuffer256Used, hwBuffer256FreeError2=hwBuffer256FreeError2, hwBuffer256KDropCounts=hwBuffer256KDropCounts, loghostport=loghostport, hwCpuCostRatePer5Sec=hwCpuCostRatePer5Sec, hwBuffer45KCollectCounts=hwBuffer45KCollectCounts, loghoststatus=loghoststatus, moduleSwVersion=moduleSwVersion, vrp=vrp, hwPowerStatus=hwPowerStatus, hwmRouterSerialNO=hwmRouterSerialNO, hwMemoryMallocFail=hwMemoryMallocFail)
