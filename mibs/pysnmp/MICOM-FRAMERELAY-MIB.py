#
# PySNMP MIB module MICOM-FRAMERELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-FRAMERELAY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:01:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysIfExtModule, mcmSysAsciiTimeOfDay, mcmSysIfExtPPA = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysIfExtModule", "mcmSysAsciiTimeOfDay", "mcmSysIfExtPPA")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ObjectIdentity, Integer32, IpAddress, MibIdentifier, iso, ModuleIdentity, NotificationType, NotificationType, Unsigned32, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Integer32", "IpAddress", "MibIdentifier", "iso", "ModuleIdentity", "NotificationType", "NotificationType", "Unsigned32", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Index(Integer32):
    pass

micom_frame_relay = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7)).setLabel("micom-frame-relay")
fr_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1)).setLabel("fr-configuration")
fr_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2)).setLabel("fr-control")
mcmFrGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1))
mcmFrMaxDLCI = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMaxDLCI.setStatus('mandatory')
mcmFrMaxVirtualPorts = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMaxVirtualPorts.setStatus('mandatory')
mcmFrMaxDlciPerLine = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMaxDlciPerLine.setStatus('mandatory')
mcmFrConnectTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectTime.setStatus('mandatory')
mcmFrOctetsSent = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrOctetsSent.setStatus('mandatory')
mcmFrOctetsReceived = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrOctetsReceived.setStatus('mandatory')
mcmFrFramesSent = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrFramesSent.setStatus('mandatory')
mcmFrFramesReceived = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrFramesReceived.setStatus('mandatory')
mcmFrGlobalGroupCntrAction = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrGlobalGroupCntrAction.setStatus('obsolete')
mcmFrDNANumberingPlan = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("e164", 1), ("x121", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDNANumberingPlan.setStatus('mandatory')
mcmFrActivePanlDlciSVCs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrActivePanlDlciSVCs.setStatus('mandatory')
mcmFrTotalTunnelingPVCs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTotalTunnelingPVCs.setStatus('mandatory')
mcmFrActiveTunnelingPVCs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrActiveTunnelingPVCs.setStatus('mandatory')
mcmFrPanlLmiTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPanlLmiTrapEnable.setStatus('mandatory')
mcmFrMsmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMsmTrapEnable.setStatus('mandatory')
mcmFrCoreTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrCoreTrapEnable.setStatus('mandatory')
mcmFrPlmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPlmTrapEnable.setStatus('mandatory')
mcmFrPhyPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2), )
if mibBuilder.loadTexts: mcmFrPhyPortTable.setStatus('mandatory')
mcmFrPhyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPhyPortExtIfIndex"))
if mibBuilder.loadTexts: mcmFrPhyPortEntry.setStatus('mandatory')
mcmFrPhyPortExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortExtIfIndex.setStatus('mandatory')
mcmFrPhyPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortFlowControl.setStatus('mandatory')
mcmFrPhyPortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortThroughput.setStatus('deprecated')
mcmFrPhyPortDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortDelta.setStatus('mandatory')
mcmFrPhyPortConsectiveFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortConsectiveFrames.setStatus('mandatory')
mcmFrPhyPortMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortMtuSize.setStatus('deprecated')
mcmFrPhyPortConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortConnectTime.setStatus('mandatory')
mcmFrPhyPortLMISent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortLMISent.setStatus('mandatory')
mcmFrPhyPortLMIReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortLMIReceived.setStatus('mandatory')
mcmFrPhyPortXIDSent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortXIDSent.setStatus('mandatory')
mcmFrPhyPortXIDReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortXIDReceived.setStatus('mandatory')
mcmFrPhyPortCLLMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortCLLMSent.setStatus('mandatory')
mcmFrPhyPortCLLMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortCLLMReceived.setStatus('mandatory')
mcmFrPhyPortHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortHeaderErrors.setStatus('mandatory')
mcmFrPhyPortInvalidDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortInvalidDLCI.setStatus('mandatory')
mcmFrPhyPortShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortShortFrames.setStatus('mandatory')
mcmFrPhyPortLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortLongFrames.setStatus('mandatory')
mcmFrPhyPortIgnoredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortIgnoredFrames.setStatus('mandatory')
mcmFrPhyPortXIDExpirations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortXIDExpirations.setStatus('mandatory')
mcmFrPhyPortTxExpirations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxExpirations.setStatus('mandatory')
mcmFrPhyPortPVCLMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortPVCLMIStatus.setStatus('mandatory')
mcmFrPhyPortSVCLMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortSVCLMIStatus.setStatus('obsolete')
mcmFrPhyPortActivePanlDlciSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortActivePanlDlciSVCs.setStatus('mandatory')
mcmFrPhyPortRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxDataFrames.setStatus('deprecated')
mcmFrPhyPortTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxDataFrames.setStatus('deprecated')
mcmFrPhyPortRxActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxActivations.setStatus('mandatory')
mcmFrPhyPortRxDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxDeactivations.setStatus('mandatory')
mcmFrPhyPortRxOkAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxOkAcks.setStatus('mandatory')
mcmFrPhyPortRxErrAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxErrAcks.setStatus('mandatory')
mcmFrPhyPortRxUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxUnknowns.setStatus('mandatory')
mcmFrPhyPortRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxErrors.setStatus('mandatory')
mcmFrPhyPortRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxOctets.setStatus('mandatory')
mcmFrPhyPortTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxOctets.setStatus('mandatory')
mcmFrPhyPortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxThroughput.setStatus('mandatory')
mcmFrPhyPortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxThroughput.setStatus('mandatory')
mcmFrPhyPortTxMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxMaxFrameSize.setStatus('mandatory')
mcmFrPhyPortRxMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxMaxFrameSize.setStatus('mandatory')
mcmFrPhyPortRateEnf = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRateEnf.setStatus('mandatory')
mcmFrPhyPortTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxBc.setStatus('mandatory')
mcmFrPhyPortRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxBc.setStatus('mandatory')
mcmFrPhyPortTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortTxBe.setStatus('mandatory')
mcmFrPhyPortRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortRxBe.setStatus('mandatory')
mcmFrPhyPortDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPhyPortDataFrames.setStatus('mandatory')
mcmFrPVCPhyTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3), )
if mibBuilder.loadTexts: mcmFrPVCPhyTable.setStatus('mandatory')
mcmFrPVCPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCPhyIfIndex"))
if mibBuilder.loadTexts: mcmFrPVCPhyEntry.setStatus('mandatory')
mcmFrPVCPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCPhyIfIndex.setStatus('mandatory')
mcmFrPVCLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCLMIMode.setStatus('mandatory')
mcmFrPVCBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCBiDir.setStatus('mandatory')
mcmFrSVCPhyTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4), )
if mibBuilder.loadTexts: mcmFrSVCPhyTable.setStatus('mandatory')
mcmFrSVCPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCPhyIfIndex"))
if mibBuilder.loadTexts: mcmFrSVCPhyEntry.setStatus('mandatory')
mcmFrSVCPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCPhyIfIndex.setStatus('mandatory')
mcmFrSVCState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("q933svc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCState.setStatus('mandatory')
mcmFrSVCT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCT303.setStatus('mandatory')
mcmFrSVCT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCT305.setStatus('mandatory')
mcmFrSVCT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCT308.setStatus('mandatory')
mcmFrSVCT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCT310.setStatus('mandatory')
mcmFrSVCMaxCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxCalls.setStatus('mandatory')
mcmFrSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxTxSize.setStatus('mandatory')
mcmFrSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxRxSize.setStatus('mandatory')
mcmFrSVCMinDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMinDLCI.setStatus('mandatory')
mcmFrSVCMaxDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxDLCI.setStatus('mandatory')
mcmFrSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMinTxThroughput.setStatus('mandatory')
mcmFrSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMinRxThroughput.setStatus('mandatory')
mcmFrSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxTxThroughput.setStatus('mandatory')
mcmFrSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMaxRxThroughput.setStatus('mandatory')
mcmFrSVCTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCTxBurstSize.setStatus('mandatory')
mcmFrSVCRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCRxBurstSize.setStatus('mandatory')
mcmFrSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCExcessTxBurstSize.setStatus('mandatory')
mcmFrSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCExcessRxBurstSize.setStatus('mandatory')
mcmFrVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5), )
if mibBuilder.loadTexts: mcmFrVirtualPortTable.setStatus('mandatory')
mcmFrVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrVirtualPortIfIndex"))
if mibBuilder.loadTexts: mcmFrVirtualPortEntry.setStatus('mandatory')
mcmFrVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortIfIndex.setStatus('mandatory')
mcmFrVirtualPortPhyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortPhyPortIfIndex.setStatus('obsolete')
mcmFrVirtualPortPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortPPA.setStatus('obsolete')
mcmFrVirtualPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("easyRouting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortMode.setStatus('mandatory')
mcmFrVirtualPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("uninitialized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortState.setStatus('mandatory')
mcmFrVirtualPortEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortEntryStatus.setStatus('mandatory')
mcmFrVirtualPortProtocolBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ip-configured", 1), ("ipx-configured", 2), ("ip-and-ipx-configured", 3), ("bridge-configured", 4), ("ip-and-bridge-configured", 5), ("ipx-and-bridge-configured", 6), ("ip-and-ipx-and-bridge-configured", 7), ("sNA-configured", 8), ("x25-configured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortProtocolBinding.setStatus('mandatory')
mcmFrVirtualPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrVirtualPortNumber.setStatus('mandatory')
mcmFrSVCMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6), )
if mibBuilder.loadTexts: mcmFrSVCMapTable.setStatus('mandatory')
mcmFrSVCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCMapVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCMapDNA"))
if mibBuilder.loadTexts: mcmFrSVCMapEntry.setStatus('mandatory')
mcmFrSVCMapVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapVirtualPortIfIndex.setStatus('mandatory')
mcmFrSVCMapDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapDNA.setStatus('mandatory')
mcmFrSVCMapDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapDLCI.setStatus('mandatory')
mcmFrSVCMapMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMaxTxSize.setStatus('mandatory')
mcmFrSVCMapMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMaxRxSize.setStatus('mandatory')
mcmFrSVCMapMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMinTxThroughput.setStatus('mandatory')
mcmFrSVCMapMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMinRxThroughput.setStatus('mandatory')
mcmFrSVCMapMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMaxTxThroughput.setStatus('mandatory')
mcmFrSVCMapMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapMaxRxThroughput.setStatus('mandatory')
mcmFrSVCMapTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapTxBurstSize.setStatus('mandatory')
mcmFrSVCMapRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapRxBurstSize.setStatus('mandatory')
mcmFrSVCMapExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapExcessTxBurstSize.setStatus('mandatory')
mcmFrSVCMapExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapExcessRxBurstSize.setStatus('mandatory')
mcmFrSVCMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapPriority.setStatus('mandatory')
mcmFrSVCMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapEntryStatus.setStatus('mandatory')
mcmFrSVCMapTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapTransferPriority.setStatus('mandatory')
mcmFrSVCMapDisableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 16, 17, 18, 21, 27, 28, 29, 30, 31, 34, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 57, 58, 63, 65, 66, 70, 79, 81, 82, 87, 88, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 111, 127, 128))).clone(namedValues=NamedValues(("the-PVC-does-not-exist-ie-unassigned", 1), ("no-route-to-specified-transit-network", 2), ("no-route-to-destination", 3), ("channel-unacceptable", 6), ("call-awarded-and-being-delivered-in-an-est-channel", 7), ("normal-call-clearing", 16), ("remote-PVC-already-connected-ie-busy", 17), ("no-user-present-in-call", 18), ("remote-PVC-down-ie-unavailable", 21), ("destination-out-of-order", 27), ("invalid-number-format", 28), ("facility-rejected", 29), ("response-to-status-inquiry", 30), ("normal-unspecified", 31), ("no-DLCI-available", 34), ("network-out-of-order", 38), ("permanent-frame-mode-connection-out-of-service", 39), ("permanent-frame-mode-connection-operational", 40), ("temporary-failure", 41), ("switching-equipment-congestion", 42), ("access-information-discarded", 43), ("specified-DLCI-unavailable", 44), ("resource-unavailable", 47), ("quality-of-service-not-available", 49), ("requested-facility-not-subscribed", 50), ("bearer-capability-not-authorized", 57), ("bearer-capability-not-presently-available", 58), ("service-or-option-not-available-unspecified", 63), ("bearer-capability-not-implemented", 65), ("channel-type-not-implemented", 66), ("only-restricted-digital-capability-is-available", 70), ("service-or-option-not-implemented-unspecified", 79), ("invalid-call-reference", 81), ("identified-channel-does-not-exist", 82), ("user-not-member-of-CUG", 87), ("incompatible-destination", 88), ("non-existent-CUG", 90), ("invalid-transit-network-selection", 91), ("invalid-message-unspecified", 95), ("missing-element", 96), ("message-type-unknown", 97), ("message-not-compatible", 98), ("element-non-existent-or-not-implemented", 99), ("invalid-element", 100), ("invalid-message-for-state", 101), ("timer-recovery", 102), ("protocol-error-unspecified", 111), ("interworking-unspecified", 127), ("normal-condition", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapDisableCause.setStatus('mandatory')
mcmFrSvcMapSvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSvcMapSvcIfIndex.setStatus('mandatory')
mcmFrSVCMapDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapDiscardPriority.setStatus('mandatory')
mcmFrSVCMapSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapSetupPriority.setStatus('mandatory')
mcmFrSVCMapHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCMapHoldingPriority.setStatus('mandatory')
mcmFrPVCMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7), )
if mibBuilder.loadTexts: mcmFrPVCMapTable.setStatus('obsolete')
mcmFrPVCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCMapVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCMapDLCI"))
if mibBuilder.loadTexts: mcmFrPVCMapEntry.setStatus('obsolete')
mcmFrPVCMapVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapVirtualPortIfIndex.setStatus('obsolete')
mcmFrPVCMapDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapDLCI.setStatus('obsolete')
mcmFrPVCMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapState.setStatus('obsolete')
mcmFrPVCMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapEntryStatus.setStatus('obsolete')
mcmFrPVCMapPhysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCMapPhysIfIndex.setStatus('obsolete')
mcmFrSVCCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8), )
if mibBuilder.loadTexts: mcmFrSVCCircuitTable.setStatus('mandatory')
mcmFrSVCCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCCircuitIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCCircuitDNA"))
if mibBuilder.loadTexts: mcmFrSVCCircuitEntry.setStatus('mandatory')
mcmFrSVCCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitIfIndex.setStatus('mandatory')
mcmFrSVCCircuitDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitDNA.setStatus('mandatory')
mcmFrSVCCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitDlci.setStatus('mandatory')
mcmFrSVCCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitState.setStatus('mandatory')
mcmFrSVCCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedFECNs.setStatus('mandatory')
mcmFrSVCCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedBECNs.setStatus('mandatory')
mcmFrSVCCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitSentFrames.setStatus('mandatory')
mcmFrSVCCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitSentOctets.setStatus('mandatory')
mcmFrSVCCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedFrames.setStatus('mandatory')
mcmFrSVCCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitReceivedOctets.setStatus('mandatory')
mcmFrSVCCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitCreationTime.setStatus('mandatory')
mcmFrSVCCircuitCallOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitCallOriginator.setStatus('mandatory')
mcmFrSVCCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitLastTimeChange.setStatus('mandatory')
mcmFrSVCCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitCommittedBurst.setStatus('deprecated')
mcmFrSVCCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitExcessBurst.setStatus('deprecated')
mcmFrSVCCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitThroughput.setStatus('mandatory')
mcmFrSVCCircuitNegMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegMaxTxSize.setStatus('mandatory')
mcmFrSVCCircuitNegMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegMaxRxSize.setStatus('mandatory')
mcmFrSVCCircuitNegTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxThroughput.setStatus('mandatory')
mcmFrSVCCircuitNegRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxThroughput.setStatus('mandatory')
mcmFrSVCCircuitNegTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxBurst.setStatus('mandatory')
mcmFrSVCCircuitNegRxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxBurst.setStatus('mandatory')
mcmFrSVCCircuitNegTxExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegTxExcess.setStatus('mandatory')
mcmFrSVCCircuitNegRxExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitNegRxExcess.setStatus('mandatory')
mcmFrSVCCircuitTxDiscardCIRPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitTxDiscardCIRPolice.setStatus('mandatory')
mcmFrSVCCircuitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitPriority.setStatus('mandatory')
mcmFrSVCCircuitSvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitSvcIfIndex.setStatus('mandatory')
mcmFrSVCCircuitDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitDiscardPriority.setStatus('mandatory')
mcmFrSVCCircuitSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitSetupPriority.setStatus('mandatory')
mcmFrSVCCircuitHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 8, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrSVCCircuitHoldingPriority.setStatus('mandatory')
mcmFrAllSVCCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17), )
if mibBuilder.loadTexts: mcmFrAllSVCCircuitTable.setStatus('mandatory')
mcmFrAllSVCCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrAllSVCCircuitIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrAllSVCCircuitDlci"))
if mibBuilder.loadTexts: mcmFrAllSVCCircuitEntry.setStatus('mandatory')
mcmFrAllSVCCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitIfIndex.setStatus('mandatory')
mcmFrAllSVCCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDlci.setStatus('mandatory')
mcmFrAllSVCCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1490", 1), ("voice", 2), ("switched", 3), ("rfc1490switched", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitType.setStatus('mandatory')
mcmFrAllSVCCircuitDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDNA.setStatus('mandatory')
mcmFrAllSVCCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitState.setStatus('mandatory')
mcmFrAllSVCCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedFECNs.setStatus('mandatory')
mcmFrAllSVCCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedBECNs.setStatus('mandatory')
mcmFrAllSVCCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSentFrames.setStatus('mandatory')
mcmFrAllSVCCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSentOctets.setStatus('mandatory')
mcmFrAllSVCCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedFrames.setStatus('mandatory')
mcmFrAllSVCCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitReceivedOctets.setStatus('mandatory')
mcmFrAllSVCCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCreationTime.setStatus('mandatory')
mcmFrAllSVCCircuitCallOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCallOriginator.setStatus('mandatory')
mcmFrAllSVCCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitLastTimeChange.setStatus('mandatory')
mcmFrAllSVCCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitCommittedBurst.setStatus('deprecated')
mcmFrAllSVCCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitExcessBurst.setStatus('deprecated')
mcmFrAllSVCCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitThroughput.setStatus('mandatory')
mcmFrAllSVCCircuitNegMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegMaxTxSize.setStatus('mandatory')
mcmFrAllSVCCircuitNegMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegMaxRxSize.setStatus('mandatory')
mcmFrAllSVCCircuitNegTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxThroughput.setStatus('mandatory')
mcmFrAllSVCCircuitNegRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxThroughput.setStatus('mandatory')
mcmFrAllSVCCircuitNegTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxBurst.setStatus('mandatory')
mcmFrAllSVCCircuitNegRxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxBurst.setStatus('mandatory')
mcmFrAllSVCCircuitNegTxExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegTxExcess.setStatus('mandatory')
mcmFrAllSVCCircuitNegRxExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitNegRxExcess.setStatus('mandatory')
mcmFrAllSVCCircuitTxDiscardCIRPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitTxDiscardCIRPolice.setStatus('mandatory')
mcmFrAllSVCCircuitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitPriority.setStatus('mandatory')
mcmFrAllSVCCircuitSvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSvcIfIndex.setStatus('mandatory')
mcmFrAllSVCCircuitDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitDiscardPriority.setStatus('mandatory')
mcmFrAllSVCCircuitSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitSetupPriority.setStatus('mandatory')
mcmFrAllSVCCircuitHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 17, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrAllSVCCircuitHoldingPriority.setStatus('mandatory')
mcmFrLANSpvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18), )
if mibBuilder.loadTexts: mcmFrLANSpvcTable.setStatus('mandatory')
mcmFrLANSpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrLANSpvcVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrLANSpvcRemoteDLCI"))
if mibBuilder.loadTexts: mcmFrLANSpvcEntry.setStatus('mandatory')
mcmFrLANSpvcVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcVirtualPortIfIndex.setStatus('mandatory')
mcmFrLANSpvcRemoteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcRemoteDLCI.setStatus('mandatory')
mcmFrLANSpvcConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcConnectId.setStatus('mandatory')
mcmFrLANSpvcRemoteDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcRemoteDNA.setStatus('mandatory')
mcmFrLANSpvcDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcDLCI.setStatus('mandatory')
mcmFrLANSpvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcIfIndex.setStatus('mandatory')
mcmFrLANSpvcVPState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcVPState.setStatus('mandatory')
mcmFrLANSpvcSVCState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCState.setStatus('mandatory')
mcmFrLANSpvcConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcConnType.setStatus('mandatory')
mcmFrLANSpvcLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcLastChange.setStatus('mandatory')
mcmFrLANSpvcDisconnectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local-VP-is-down", 1), ("local-SVC-LMI-is-Down", 2), ("remote-PVC-LMI-is-down", 3), ("the-SVC-connection-is-down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcDisconnectReason.setStatus('mandatory')
mcmFrLANSpvcSVCTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19), )
if mibBuilder.loadTexts: mcmFrLANSpvcSVCTable.setStatus('mandatory')
mcmFrLANSpvcSVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrLANSpvcSVCConnectId"))
if mibBuilder.loadTexts: mcmFrLANSpvcSVCEntry.setStatus('mandatory')
mcmFrLANSpvcSVCConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCConnectId.setStatus('mandatory')
mcmFrLANSpvcSVCIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCIfIndex.setStatus('mandatory')
mcmFrLANSpvcSVCDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDNA.setStatus('mandatory')
mcmFrLANSpvcSVCDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDLCI.setStatus('mandatory')
mcmFrLANSpvcSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxSize.setStatus('mandatory')
mcmFrLANSpvcSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxSize.setStatus('mandatory')
mcmFrLANSpvcSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMinTxThroughput.setStatus('mandatory')
mcmFrLANSpvcSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMinRxThroughput.setStatus('mandatory')
mcmFrLANSpvcSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxThroughput.setStatus('mandatory')
mcmFrLANSpvcSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxThroughput.setStatus('mandatory')
mcmFrLANSpvcSVCMaxTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxTxBurstSize.setStatus('mandatory')
mcmFrLANSpvcSVCMaxRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCMaxRxBurstSize.setStatus('mandatory')
mcmFrLANSpvcSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCExcessTxBurstSize.setStatus('mandatory')
mcmFrLANSpvcSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCExcessRxBurstSize.setStatus('mandatory')
mcmFrLANSpvcSVCTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCTransferPriority.setStatus('mandatory')
mcmFrLANSpvcSVCReasonForDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 16, 17, 18, 21, 27, 28, 29, 30, 31, 34, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 57, 58, 63, 65, 66, 70, 79, 81, 82, 87, 88, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 111, 127, 128))).clone(namedValues=NamedValues(("the-PVC-does-not-exist-ie-unassigned", 1), ("no-route-to-specified-transit-network", 2), ("no-route-to-destination", 3), ("channel-unacceptable", 6), ("call-awarded-and-being-delivered-in-an-est-channel", 7), ("normal-call-clearing", 16), ("remote-PVC-already-connected-ie-busy", 17), ("no-user-present-in-call", 18), ("remote-PVC-down-ie-unavailable", 21), ("destination-out-of-order", 27), ("invalid-number-format", 28), ("facility-rejected", 29), ("response-to-status-inquiry", 30), ("normal-unspecified", 31), ("no-DLCI-available", 34), ("network-out-of-order", 38), ("permanent-frame-mode-connection-out-of-service", 39), ("permanent-frame-mode-connection-operational", 40), ("temporary-failure", 41), ("switching-equipment-congestion", 42), ("access-information-discarded", 43), ("specified-DLCI-unavailable", 44), ("resource-unavailable", 47), ("quality-of-service-not-available", 49), ("requested-facility-not-subscribed", 50), ("bearer-capability-not-authorized", 57), ("bearer-capability-not-presently-available", 58), ("service-or-option-not-available-unspecified", 63), ("bearer-capability-not-implemented", 65), ("channel-type-not-implemented", 66), ("only-restricted-digital-capability-is-available", 70), ("service-or-option-not-implemented-unspecified", 79), ("invalid-call-reference", 81), ("identified-channel-does-not-exist", 82), ("user-not-member-of-CUG", 87), ("incompatible-destination", 88), ("non-existent-CUG", 90), ("invalid-transit-network-selection", 91), ("invalid-message-unspecified", 95), ("missing-element", 96), ("message-type-unknown", 97), ("message-not-compatible", 98), ("element-non-existent-or-not-implemented", 99), ("invalid-element", 100), ("invalid-message-for-state", 101), ("timer-recovery", 102), ("protocol-error-unspecified", 111), ("interworking-unspecified", 127), ("normal-condition", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCReasonForDisconnect.setStatus('mandatory')
mcmFrLANSpvcSVCDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCDiscardPriority.setStatus('mandatory')
mcmFrLANSpvcSVCSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCSetupPriority.setStatus('mandatory')
mcmFrLANSpvcSVCHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 19, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLANSpvcSVCHoldingPriority.setStatus('mandatory')
mcmFrDlcmiSVCStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22), )
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusTable.setStatus('mandatory')
mcmFrDlcmiSVCStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrDlcmiSVCStatusIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrDlcmiSVCStatusDlci"))
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusEntry.setStatus('mandatory')
mcmFrDlcmiSVCStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusIfIndex.setStatus('mandatory')
mcmFrDlcmiSVCStatusDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusDlci.setStatus('mandatory')
mcmFrDlcmiSVCStatusCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusCardNumber.setStatus('mandatory')
mcmFrDlcmiSVCStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPortNumber.setStatus('mandatory')
mcmFrDlcmiSVCStatusTunnelPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusTunnelPvcDlci.setStatus('mandatory')
mcmFrDlcmiSVCStatusPeerCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerCardNumber.setStatus('mandatory')
mcmFrDlcmiSVCStatusPeerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerPortNumber.setStatus('mandatory')
mcmFrDlcmiSVCStatusPeerTunPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerTunPvcDlci.setStatus('mandatory')
mcmFrDlcmiSVCStatusPeerSvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrDlcmiSVCStatusPeerSvcDlci.setStatus('mandatory')
mcmFrTunnelPvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23), )
if mibBuilder.loadTexts: mcmFrTunnelPvcTable.setStatus('mandatory')
mcmFrTunnelPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrTunnelPvcIfIndex"))
if mibBuilder.loadTexts: mcmFrTunnelPvcEntry.setStatus('mandatory')
mcmFrTunnelPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcIfIndex.setStatus('mandatory')
mcmFrTunnelPvcDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcDlciNumber.setStatus('mandatory')
mcmFrTunnelPvcPhysicalCard = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysicalCard.setStatus('mandatory')
mcmFrTunnelPvcPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysicalPort.setStatus('mandatory')
mcmFrTunnelPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-panl", 1), ("dce-panl", 2), ("standard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcType.setStatus('mandatory')
mcmFrTunnelPvcPhysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcPhysPortIfIndex.setStatus('mandatory')
mcmFrTunnelPvcMaxRxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxRxFrameSize.setStatus('mandatory')
mcmFrTunnelPvcRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxBc.setStatus('mandatory')
mcmFrTunnelPvcRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxBe.setStatus('mandatory')
mcmFrTunnelPvcMaxRxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxRxCIR.setStatus('mandatory')
mcmFrTunnelPvcMaxTxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxTxFrameSize.setStatus('mandatory')
mcmFrTunnelPvcTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxBc.setStatus('mandatory')
mcmFrTunnelPvcTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxBe.setStatus('mandatory')
mcmFrTunnelPvcMaxTxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMaxTxCIR.setStatus('mandatory')
mcmFrTunnelPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcState.setStatus('mandatory')
mcmFrTunnelPvcRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxFrames.setStatus('mandatory')
mcmFrTunnelPvcTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxFrames.setStatus('mandatory')
mcmFrTunnelPvcRxDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxDeFrames.setStatus('mandatory')
mcmFrTunnelPvcRxExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxExcessFrames.setStatus('mandatory')
mcmFrTunnelPvcTxExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxExcessFrames.setStatus('mandatory')
mcmFrTunnelPvcRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxDiscards.setStatus('mandatory')
mcmFrTunnelPvcRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcRxOctets.setStatus('mandatory')
mcmFrTunnelPvcTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcTxOctets.setStatus('mandatory')
mcmFrTunnelPvcConsecFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcConsecFrames.setStatus('mandatory')
mcmFrTunnelPvcMinTxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 23, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrTunnelPvcMinTxCIR.setStatus('mandatory')
mcmFrNetlinkMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25), )
if mibBuilder.loadTexts: mcmFrNetlinkMapTable.setStatus('mandatory')
mcmFrNetlinkMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrNetlinkMapVPIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrNetlinkMapNetlinkIfIndex"))
if mibBuilder.loadTexts: mcmFrNetlinkMapEntry.setStatus('mandatory')
mcmFrNetlinkMapVPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrNetlinkMapVPIfIndex.setStatus('mandatory')
mcmFrNetlinkMapNetlinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrNetlinkMapNetlinkIfIndex.setStatus('mandatory')
mcmFrNetlinkMapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrNetlinkMapOperStatus.setStatus('mandatory')
nvmFrGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9))
nvmFrMaxDLCI = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMaxDLCI.setStatus('mandatory')
nvmFrMaxVirtualPorts = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMaxVirtualPorts.setStatus('mandatory')
nvmFrMaxDlciPerLine = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMaxDlciPerLine.setStatus('mandatory')
nvmFrDNANumberingPlan = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("e164", 1), ("x121", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDNANumberingPlan.setStatus('mandatory')
nvmFrPanlLmiTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPanlLmiTrapEnable.setStatus('mandatory')
nvmFrMsmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMsmTrapEnable.setStatus('mandatory')
nvmFrCoreTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrCoreTrapEnable.setStatus('mandatory')
nvmFrPlmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPlmTrapEnable.setStatus('mandatory')
nvmFrPhyPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10), )
if mibBuilder.loadTexts: nvmFrPhyPortTable.setStatus('mandatory')
nvmFrPhyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrPhyPortExtIfIndex"))
if mibBuilder.loadTexts: nvmFrPhyPortEntry.setStatus('mandatory')
nvmFrPhyPortExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPhyPortExtIfIndex.setStatus('mandatory')
nvmFrPhyPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortFlowControl.setStatus('mandatory')
nvmFrPhyPortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortThroughput.setStatus('deprecated')
nvmFrPhyPortDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortDelta.setStatus('mandatory')
nvmFrPhyPortConsectiveFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortConsectiveFrames.setStatus('mandatory')
nvmFrPhyPortMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortMtuSize.setStatus('deprecated')
nvmFrPhyPortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortTxThroughput.setStatus('mandatory')
nvmFrPhyPortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRxThroughput.setStatus('mandatory')
nvmFrPhyPortTxMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortTxMaxFrameSize.setStatus('mandatory')
nvmFrPhyPortRxMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRxMaxFrameSize.setStatus('mandatory')
nvmFrPhyPortRateEnf = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRateEnf.setStatus('mandatory')
nvmFrPhyPortTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortTxBc.setStatus('mandatory')
nvmFrPhyPortRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRxBc.setStatus('mandatory')
nvmFrPhyPortTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortTxBe.setStatus('mandatory')
nvmFrPhyPortRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPhyPortRxBe.setStatus('mandatory')
nvmFrPVCPhyTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11), )
if mibBuilder.loadTexts: nvmFrPVCPhyTable.setStatus('mandatory')
nvmFrPVCPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrPVCPhyIfIndex"))
if mibBuilder.loadTexts: nvmFrPVCPhyEntry.setStatus('mandatory')
nvmFrPVCPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCPhyIfIndex.setStatus('mandatory')
nvmFrPVCLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCLMIMode.setStatus('mandatory')
nvmFrPVCBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCBiDir.setStatus('mandatory')
nvmFrSVCPhyTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12), )
if mibBuilder.loadTexts: nvmFrSVCPhyTable.setStatus('mandatory')
nvmFrSVCPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrSVCPhyIfIndex"))
if mibBuilder.loadTexts: nvmFrSVCPhyEntry.setStatus('mandatory')
nvmFrSVCPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrSVCPhyIfIndex.setStatus('mandatory')
nvmFrSVCState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("q933svc", 1))).clone('q933svc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCState.setStatus('mandatory')
nvmFrSVCT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCT303.setStatus('mandatory')
nvmFrSVCT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCT305.setStatus('mandatory')
nvmFrSVCT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCT308.setStatus('mandatory')
nvmFrSVCT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCT310.setStatus('mandatory')
nvmFrSVCMaxCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxCalls.setStatus('mandatory')
nvmFrSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxTxSize.setStatus('mandatory')
nvmFrSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxRxSize.setStatus('mandatory')
nvmFrSVCMinDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMinDLCI.setStatus('mandatory')
nvmFrSVCMaxDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991)).clone(991)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxDLCI.setStatus('mandatory')
nvmFrSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMinTxThroughput.setStatus('mandatory')
nvmFrSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMinRxThroughput.setStatus('mandatory')
nvmFrSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxTxThroughput.setStatus('mandatory')
nvmFrSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMaxRxThroughput.setStatus('mandatory')
nvmFrSVCTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCTxBurstSize.setStatus('mandatory')
nvmFrSVCRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCRxBurstSize.setStatus('mandatory')
nvmFrSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCExcessTxBurstSize.setStatus('mandatory')
nvmFrSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCExcessRxBurstSize.setStatus('mandatory')
nvmFrVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13), )
if mibBuilder.loadTexts: nvmFrVirtualPortTable.setStatus('mandatory')
nvmFrVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrVirtualPortIfIndex"))
if mibBuilder.loadTexts: nvmFrVirtualPortEntry.setStatus('mandatory')
nvmFrVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortIfIndex.setStatus('mandatory')
nvmFrVirtualPortPhyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortPhyPortIfIndex.setStatus('obsolete')
nvmFrVirtualPortPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortPPA.setStatus('obsolete')
nvmFrVirtualPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("easyRouting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortMode.setStatus('mandatory')
nvmFrVirtualPortEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortEntryStatus.setStatus('mandatory')
nvmFrVirtualPortProtocolBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ip-configured", 1), ("ipx-configured", 2), ("ip-and-ipx-configured", 3), ("bridge-configured", 4), ("ip-and-bridge-configured", 5), ("ipx-and-bridge-configured", 6), ("ip-and-ipx-and-bridge-configured", 7), ("sNA-configured", 8), ("x25-configured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrVirtualPortProtocolBinding.setStatus('mandatory')
nvmFrVirtualPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrVirtualPortNumber.setStatus('mandatory')
nvmFrSVCMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14), )
if mibBuilder.loadTexts: nvmFrSVCMapTable.setStatus('mandatory')
nvmFrSVCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrSVCMapVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "nvmFrSVCMapDNA"))
if mibBuilder.loadTexts: nvmFrSVCMapEntry.setStatus('mandatory')
nvmFrSVCMapVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapVirtualPortIfIndex.setStatus('mandatory')
nvmFrSVCMapDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapDNA.setStatus('mandatory')
nvmFrSVCMapMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMaxTxSize.setStatus('mandatory')
nvmFrSVCMapMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMaxRxSize.setStatus('mandatory')
nvmFrSVCMapMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMinTxThroughput.setStatus('mandatory')
nvmFrSVCMapMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMinRxThroughput.setStatus('mandatory')
nvmFrSVCMapMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMaxTxThroughput.setStatus('mandatory')
nvmFrSVCMapMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapMaxRxThroughput.setStatus('mandatory')
nvmFrSVCMapTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapTxBurstSize.setStatus('mandatory')
nvmFrSVCMapRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapRxBurstSize.setStatus('mandatory')
nvmFrSVCMapExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapExcessTxBurstSize.setStatus('mandatory')
nvmFrSVCMapExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapExcessRxBurstSize.setStatus('mandatory')
nvmFrSVCMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapPriority.setStatus('mandatory')
nvmFrSVCMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapEntryStatus.setStatus('mandatory')
nvmFrSVCMapTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapTransferPriority.setStatus('mandatory')
nvmFrSVCMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapRowStatus.setStatus('mandatory')
nvmFrSVCMapDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapDiscardPriority.setStatus('mandatory')
nvmFrSVCMapSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapSetupPriority.setStatus('mandatory')
nvmFrSVCMapHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrSVCMapHoldingPriority.setStatus('mandatory')
nvmFrPVCMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15), )
if mibBuilder.loadTexts: nvmFrPVCMapTable.setStatus('obsolete')
nvmFrPVCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrPVCMapVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "nvmFrPVCMapDLCI"))
if mibBuilder.loadTexts: nvmFrPVCMapEntry.setStatus('obsolete')
nvmFrPVCMapVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCMapVirtualPortIfIndex.setStatus('obsolete')
nvmFrPVCMapDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 126975))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCMapDLCI.setStatus('obsolete')
nvmFrPVCMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCMapEntryStatus.setStatus('obsolete')
nvmFrPVCMapPhysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 15, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCMapPhysIfIndex.setStatus('obsolete')
nvmFrDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16), )
if mibBuilder.loadTexts: nvmFrDlcmiTable.setStatus('mandatory')
nvmFrDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrDlcmiIfIndex"))
if mibBuilder.loadTexts: nvmFrDlcmiEntry.setStatus('mandatory')
nvmFrDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrDlcmiIfIndex.setStatus('mandatory')
nvmFrDlcmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmi", 2), ("itut933A", 5), ("ansiT1617D1994", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiState.setStatus('mandatory')
nvmFrDlcmiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiAddress.setStatus('mandatory')
nvmFrDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiAddressLen.setStatus('mandatory')
nvmFrDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiPollingInterval.setStatus('mandatory')
nvmFrDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiFullEnquiryInterval.setStatus('mandatory')
nvmFrDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiErrorThreshold.setStatus('mandatory')
nvmFrDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrDlcmiMonitoredEvents.setStatus('mandatory')
nvmFrDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiMaxSupportedVCs.setStatus('mandatory')
nvmFrDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrDlcmiMulticast.setStatus('mandatory')
nvmFrLANSpvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20), )
if mibBuilder.loadTexts: nvmFrLANSpvcTable.setStatus('mandatory')
nvmFrLANSpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrLANSpvcVirtualPortIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "nvmFrLANSpvcRemoteDLCI"))
if mibBuilder.loadTexts: nvmFrLANSpvcEntry.setStatus('mandatory')
nvmFrLANSpvcVirtualPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcVirtualPortIfIndex.setStatus('mandatory')
nvmFrLANSpvcRemoteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcRemoteDLCI.setStatus('mandatory')
nvmFrLANSpvcConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLANSpvcConnectId.setStatus('mandatory')
nvmFrLANSpvcRemoteDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcRemoteDNA.setStatus('mandatory')
nvmFrLANSpvcConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcConnType.setStatus('mandatory')
nvmFrLANSpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcRowStatus.setStatus('mandatory')
nvmFrLANSpvcSVCTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21), )
if mibBuilder.loadTexts: nvmFrLANSpvcSVCTable.setStatus('mandatory')
nvmFrLANSpvcSVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrLANSpvcSVCConnectId"))
if mibBuilder.loadTexts: nvmFrLANSpvcSVCEntry.setStatus('mandatory')
nvmFrLANSpvcSVCConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCConnectId.setStatus('mandatory')
nvmFrLANSpvcSVCDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCDNA.setStatus('mandatory')
nvmFrLANSpvcSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxSize.setStatus('mandatory')
nvmFrLANSpvcSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxSize.setStatus('mandatory')
nvmFrLANSpvcSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMinTxThroughput.setStatus('mandatory')
nvmFrLANSpvcSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMinRxThroughput.setStatus('mandatory')
nvmFrLANSpvcSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxThroughput.setStatus('mandatory')
nvmFrLANSpvcSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxThroughput.setStatus('mandatory')
nvmFrLANSpvcSVCMaxTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxTxBurstSize.setStatus('mandatory')
nvmFrLANSpvcSVCMaxRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCMaxRxBurstSize.setStatus('mandatory')
nvmFrLANSpvcSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCExcessTxBurstSize.setStatus('mandatory')
nvmFrLANSpvcSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCExcessRxBurstSize.setStatus('mandatory')
nvmFrLANSpvcSVCTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCTransferPriority.setStatus('mandatory')
nvmFrLANSpvcSVCDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCDiscardPriority.setStatus('mandatory')
nvmFrLANSpvcSVCSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCSetupPriority.setStatus('mandatory')
nvmFrLANSpvcSVCHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 21, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLANSpvcSVCHoldingPriority.setStatus('mandatory')
nvmFrTunnelPvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24), )
if mibBuilder.loadTexts: nvmFrTunnelPvcTable.setStatus('mandatory')
nvmFrTunnelPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrTunnelPvcIfIndex"))
if mibBuilder.loadTexts: nvmFrTunnelPvcEntry.setStatus('mandatory')
nvmFrTunnelPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrTunnelPvcIfIndex.setStatus('mandatory')
nvmFrTunnelPvcDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcDlciNumber.setStatus('mandatory')
nvmFrTunnelPvcPhysicalCard = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysicalCard.setStatus('mandatory')
nvmFrTunnelPvcPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysicalPort.setStatus('mandatory')
nvmFrTunnelPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-panl", 1), ("dce-panl", 2), ("standard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcType.setStatus('mandatory')
nvmFrTunnelPvcPhysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrTunnelPvcPhysPortIfIndex.setStatus('mandatory')
nvmFrTunnelPvcMaxRxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxRxFrameSize.setStatus('mandatory')
nvmFrTunnelPvcRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcRxBc.setStatus('mandatory')
nvmFrTunnelPvcRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrTunnelPvcRxBe.setStatus('mandatory')
nvmFrTunnelPvcMaxRxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxRxCIR.setStatus('mandatory')
nvmFrTunnelPvcMaxTxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxTxFrameSize.setStatus('mandatory')
nvmFrTunnelPvcTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcTxBc.setStatus('mandatory')
nvmFrTunnelPvcTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrTunnelPvcTxBe.setStatus('mandatory')
nvmFrTunnelPvcMaxTxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMaxTxCIR.setStatus('mandatory')
nvmFrTunnelPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcRowStatus.setStatus('mandatory')
nvmFrTunnelPvcConsecFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcConsecFrames.setStatus('mandatory')
nvmFrTunnelPvcMinTxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 24, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrTunnelPvcMinTxCIR.setStatus('mandatory')
nvmFrNetlinkMapTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26), )
if mibBuilder.loadTexts: nvmFrNetlinkMapTable.setStatus('mandatory')
nvmFrNetlinkMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "nvmFrNetlinkMapVPIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "nvmFrNetlinkMapNetlinkIfIndex"))
if mibBuilder.loadTexts: nvmFrNetlinkMapEntry.setStatus('mandatory')
nvmFrNetlinkMapVPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrNetlinkMapVPIfIndex.setStatus('mandatory')
nvmFrNetlinkMapNetlinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrNetlinkMapNetlinkIfIndex.setStatus('mandatory')
nvmFrNetlinkMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrNetlinkMapRowStatus.setStatus('mandatory')
mcmFrPhyPortCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 1), )
if mibBuilder.loadTexts: mcmFrPhyPortCntrTable.setStatus('obsolete')
mcmFrPhyPortCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 1, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPhyPortCntrIfIndex"))
if mibBuilder.loadTexts: mcmFrPhyPortCntrEntry.setStatus('obsolete')
mcmFrPhyPortCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrPhyPortCntrIfIndex.setStatus('obsolete')
mcmFrPhyPortCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrPhyPortCntrAction.setStatus('obsolete')
mcmFrVirtualPortCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 2), )
if mibBuilder.loadTexts: mcmFrVirtualPortCntrTable.setStatus('obsolete')
mcmFrVirtualPortCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 2, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrVirtualPortCntrIfIndex"))
if mibBuilder.loadTexts: mcmFrVirtualPortCntrEntry.setStatus('obsolete')
mcmFrVirtualPortCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrVirtualPortCntrIfIndex.setStatus('obsolete')
mcmFrVirtualPortCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrVirtualPortCntrAction.setStatus('obsolete')
mcmFrPVCCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3), )
if mibBuilder.loadTexts: mcmFrPVCCntrTable.setStatus('obsolete')
mcmFrPVCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCCntrIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrPVCCntrDLCI"))
if mibBuilder.loadTexts: mcmFrPVCCntrEntry.setStatus('obsolete')
mcmFrPVCCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrPVCCntrIfIndex.setStatus('obsolete')
mcmFrPVCCntrDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 126975))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrPVCCntrDLCI.setStatus('obsolete')
mcmFrPVCCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrPVCCntrAction.setStatus('obsolete')
mcmFrSVCCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4), )
if mibBuilder.loadTexts: mcmFrSVCCntrTable.setStatus('obsolete')
mcmFrSVCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4, 1), ).setIndexNames((0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCCntrIfIndex"), (0, "MICOM-FRAMERELAY-MIB", "mcmFrSVCCntrDNA"))
if mibBuilder.loadTexts: mcmFrSVCCntrEntry.setStatus('obsolete')
mcmFrSVCCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrSVCCntrIfIndex.setStatus('obsolete')
mcmFrSVCCntrDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmFrSVCCntrDNA.setStatus('obsolete')
mcmFrSVCCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrSVCCntrAction.setStatus('obsolete')
mcmFrWanLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 7) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-SYS-MIB", "mcmSysIfExtModule"), ("MICOM-SYS-MIB", "mcmSysIfExtPPA"))
mcmFrWanLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 7) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-SYS-MIB", "mcmSysIfExtModule"), ("MICOM-SYS-MIB", "mcmSysIfExtPPA"))
mibBuilder.exportSymbols("MICOM-FRAMERELAY-MIB", mcmFrSVCCircuitNegRxExcess=mcmFrSVCCircuitNegRxExcess, mcmFrSVCMapExcessTxBurstSize=mcmFrSVCMapExcessTxBurstSize, mcmFrSVCCntrDNA=mcmFrSVCCntrDNA, mcmFrPhyPortCLLMSent=mcmFrPhyPortCLLMSent, mcmFrLANSpvcTable=mcmFrLANSpvcTable, mcmFrTunnelPvcTxBc=mcmFrTunnelPvcTxBc, mcmFrPhyPortMtuSize=mcmFrPhyPortMtuSize, mcmFrPhyPortCntrEntry=mcmFrPhyPortCntrEntry, mcmFrSVCMinDLCI=mcmFrSVCMinDLCI, mcmFrPhyPortCntrAction=mcmFrPhyPortCntrAction, mcmFrLANSpvcSVCMinRxThroughput=mcmFrLANSpvcSVCMinRxThroughput, nvmFrPVCPhyTable=nvmFrPVCPhyTable, nvmFrPhyPortMtuSize=nvmFrPhyPortMtuSize, mcmFrCoreTrapEnable=mcmFrCoreTrapEnable, nvmFrLANSpvcRowStatus=nvmFrLANSpvcRowStatus, nvmFrPhyPortTxBc=nvmFrPhyPortTxBc, mcmFrLANSpvcSVCReasonForDisconnect=mcmFrLANSpvcSVCReasonForDisconnect, nvmFrTunnelPvcTxBc=nvmFrTunnelPvcTxBc, mcmFrPhyPortRxDeactivations=mcmFrPhyPortRxDeactivations, mcmFrPhyPortRxOctets=mcmFrPhyPortRxOctets, mcmFrTunnelPvcMinTxCIR=mcmFrTunnelPvcMinTxCIR, mcmFrPVCCntrAction=mcmFrPVCCntrAction, nvmFrVirtualPortTable=nvmFrVirtualPortTable, nvmFrLANSpvcSVCMaxRxSize=nvmFrLANSpvcSVCMaxRxSize, mcmFrLANSpvcSVCMaxTxThroughput=mcmFrLANSpvcSVCMaxTxThroughput, mcmFrAllSVCCircuitType=mcmFrAllSVCCircuitType, mcmFrNetlinkMapNetlinkIfIndex=mcmFrNetlinkMapNetlinkIfIndex, nvmFrLANSpvcSVCTable=nvmFrLANSpvcSVCTable, mcmFrFramesSent=mcmFrFramesSent, nvmFrPVCLMIMode=nvmFrPVCLMIMode, nvmFrTunnelPvcPhysicalCard=nvmFrTunnelPvcPhysicalCard, mcmFrPhyPortRxErrors=mcmFrPhyPortRxErrors, mcmFrPhyPortCLLMReceived=mcmFrPhyPortCLLMReceived, mcmFrNetlinkMapOperStatus=mcmFrNetlinkMapOperStatus, nvmFrSVCMapHoldingPriority=nvmFrSVCMapHoldingPriority, mcmFrSVCT310=mcmFrSVCT310, mcmFrSVCCircuitPriority=mcmFrSVCCircuitPriority, mcmFrAllSVCCircuitLastTimeChange=mcmFrAllSVCCircuitLastTimeChange, nvmFrGlobalGroup=nvmFrGlobalGroup, mcmFrPhyPortEntry=mcmFrPhyPortEntry, mcmFrSVCCircuitIfIndex=mcmFrSVCCircuitIfIndex, mcmFrAllSVCCircuitReceivedBECNs=mcmFrAllSVCCircuitReceivedBECNs, mcmFrSVCState=mcmFrSVCState, mcmFrVirtualPortTable=mcmFrVirtualPortTable, mcmFrSVCCircuitDlci=mcmFrSVCCircuitDlci, nvmFrSVCMapMaxRxThroughput=nvmFrSVCMapMaxRxThroughput, mcmFrAllSVCCircuitCommittedBurst=mcmFrAllSVCCircuitCommittedBurst, mcmFrPhyPortXIDReceived=mcmFrPhyPortXIDReceived, nvmFrDlcmiMaxSupportedVCs=nvmFrDlcmiMaxSupportedVCs, nvmFrVirtualPortPhyPortIfIndex=nvmFrVirtualPortPhyPortIfIndex, nvmFrPhyPortExtIfIndex=nvmFrPhyPortExtIfIndex, mcmFrVirtualPortCntrTable=mcmFrVirtualPortCntrTable, mcmFrSVCCircuitNegTxThroughput=mcmFrSVCCircuitNegTxThroughput, mcmFrSVCPhyTable=mcmFrSVCPhyTable, mcmFrVirtualPortProtocolBinding=mcmFrVirtualPortProtocolBinding, mcmFrTunnelPvcEntry=mcmFrTunnelPvcEntry, mcmFrPhyPortConsectiveFrames=mcmFrPhyPortConsectiveFrames, mcmFrSVCCircuitNegRxBurst=mcmFrSVCCircuitNegRxBurst, mcmFrAllSVCCircuitDiscardPriority=mcmFrAllSVCCircuitDiscardPriority, mcmFrLANSpvcSVCSetupPriority=mcmFrLANSpvcSVCSetupPriority, mcmFrPhyPortInvalidDLCI=mcmFrPhyPortInvalidDLCI, nvmFrSVCMapDNA=nvmFrSVCMapDNA, mcmFrSVCCircuitSentOctets=mcmFrSVCCircuitSentOctets, mcmFrPVCMapEntry=mcmFrPVCMapEntry, mcmFrAllSVCCircuitReceivedFrames=mcmFrAllSVCCircuitReceivedFrames, mcmFrSVCMapMaxRxThroughput=mcmFrSVCMapMaxRxThroughput, nvmFrSVCMaxCalls=nvmFrSVCMaxCalls, mcmFrVirtualPortCntrAction=mcmFrVirtualPortCntrAction, mcmFrPVCCntrIfIndex=mcmFrPVCCntrIfIndex, mcmFrActivePanlDlciSVCs=mcmFrActivePanlDlciSVCs, mcmFrPhyPortActivePanlDlciSVCs=mcmFrPhyPortActivePanlDlciSVCs, mcmFrSVCCircuitCommittedBurst=mcmFrSVCCircuitCommittedBurst, mcmFrAllSVCCircuitTable=mcmFrAllSVCCircuitTable, mcmFrTunnelPvcMaxRxCIR=mcmFrTunnelPvcMaxRxCIR, nvmFrSVCMapExcessTxBurstSize=nvmFrSVCMapExcessTxBurstSize, mcmFrSVCT308=mcmFrSVCT308, mcmFrTunnelPvcRxFrames=mcmFrTunnelPvcRxFrames, mcmFrPhyPortCntrTable=mcmFrPhyPortCntrTable, mcmFrLANSpvcRemoteDLCI=mcmFrLANSpvcRemoteDLCI, mcmFrTunnelPvcRxDeFrames=mcmFrTunnelPvcRxDeFrames, nvmFrDlcmiAddressLen=nvmFrDlcmiAddressLen, mcmFrVirtualPortCntrIfIndex=mcmFrVirtualPortCntrIfIndex, mcmFrPhyPortConnectTime=mcmFrPhyPortConnectTime, nvmFrNetlinkMapNetlinkIfIndex=nvmFrNetlinkMapNetlinkIfIndex, mcmFrDlcmiSVCStatusEntry=mcmFrDlcmiSVCStatusEntry, mcmFrTunnelPvcTxOctets=mcmFrTunnelPvcTxOctets, nvmFrSVCMapMinTxThroughput=nvmFrSVCMapMinTxThroughput, nvmFrLANSpvcSVCMaxTxSize=nvmFrLANSpvcSVCMaxTxSize, nvmFrTunnelPvcRxBe=nvmFrTunnelPvcRxBe, mcmFrPVCPhyTable=mcmFrPVCPhyTable, mcmFrSVCCircuitNegRxThroughput=mcmFrSVCCircuitNegRxThroughput, mcmFrTunnelPvcMaxTxFrameSize=mcmFrTunnelPvcMaxTxFrameSize, nvmFrNetlinkMapTable=nvmFrNetlinkMapTable, mcmFrSVCCircuitState=mcmFrSVCCircuitState, mcmFrSVCMapPriority=mcmFrSVCMapPriority, mcmFrSVCMapMaxRxSize=mcmFrSVCMapMaxRxSize, mcmFrSVCCircuitDNA=mcmFrSVCCircuitDNA, mcmFrAllSVCCircuitTxDiscardCIRPolice=mcmFrAllSVCCircuitTxDiscardCIRPolice, nvmFrPhyPortTable=nvmFrPhyPortTable, mcmFrAllSVCCircuitHoldingPriority=mcmFrAllSVCCircuitHoldingPriority, mcmFrSVCCircuitNegMaxRxSize=mcmFrSVCCircuitNegMaxRxSize, mcmFrDlcmiSVCStatusTable=mcmFrDlcmiSVCStatusTable, nvmFrSVCT308=nvmFrSVCT308, nvmFrLANSpvcSVCSetupPriority=nvmFrLANSpvcSVCSetupPriority, mcmFrPhyPortTxDataFrames=mcmFrPhyPortTxDataFrames, mcmFrPhyPortTxMaxFrameSize=mcmFrPhyPortTxMaxFrameSize, nvmFrLANSpvcSVCTransferPriority=nvmFrLANSpvcSVCTransferPriority, mcmFrVirtualPortPhyPortIfIndex=mcmFrVirtualPortPhyPortIfIndex, mcmFrVirtualPortPPA=mcmFrVirtualPortPPA, mcmFrPhyPortTxThroughput=mcmFrPhyPortTxThroughput, mcmFrSVCMaxTxSize=mcmFrSVCMaxTxSize, nvmFrSVCMaxDLCI=nvmFrSVCMaxDLCI, mcmFrAllSVCCircuitNegRxThroughput=mcmFrAllSVCCircuitNegRxThroughput, nvmFrVirtualPortProtocolBinding=nvmFrVirtualPortProtocolBinding, mcmFrAllSVCCircuitState=mcmFrAllSVCCircuitState, nvmFrMaxDLCI=nvmFrMaxDLCI, mcmFrSVCPhyIfIndex=mcmFrSVCPhyIfIndex, nvmFrLANSpvcConnType=nvmFrLANSpvcConnType, nvmFrPhyPortTxBe=nvmFrPhyPortTxBe, Index=Index, mcmFrSVCExcessTxBurstSize=mcmFrSVCExcessTxBurstSize, mcmFrPhyPortRxThroughput=mcmFrPhyPortRxThroughput, mcmFrSVCCircuitReceivedBECNs=mcmFrSVCCircuitReceivedBECNs, mcmFrPhyPortPVCLMIStatus=mcmFrPhyPortPVCLMIStatus, mcmFrPVCCntrEntry=mcmFrPVCCntrEntry, nvmFrDlcmiMulticast=nvmFrDlcmiMulticast, mcmFrLANSpvcSVCExcessTxBurstSize=mcmFrLANSpvcSVCExcessTxBurstSize, nvmFrPVCPhyEntry=nvmFrPVCPhyEntry, mcmFrPhyPortXIDSent=mcmFrPhyPortXIDSent, mcmFrLANSpvcSVCConnectId=mcmFrLANSpvcSVCConnectId, mcmFrAllSVCCircuitReceivedOctets=mcmFrAllSVCCircuitReceivedOctets, mcmFrSVCMaxCalls=mcmFrSVCMaxCalls, mcmFrLANSpvcConnType=mcmFrLANSpvcConnType, mcmFrAllSVCCircuitReceivedFECNs=mcmFrAllSVCCircuitReceivedFECNs, nvmFrLANSpvcRemoteDNA=nvmFrLANSpvcRemoteDNA, mcmFrSVCCircuitNegTxExcess=mcmFrSVCCircuitNegTxExcess, mcmFrDlcmiSVCStatusPeerSvcDlci=mcmFrDlcmiSVCStatusPeerSvcDlci, nvmFrNetlinkMapVPIfIndex=nvmFrNetlinkMapVPIfIndex, nvmFrDlcmiState=nvmFrDlcmiState, mcmFrPhyPortFlowControl=mcmFrPhyPortFlowControl, mcmFrSVCCircuitExcessBurst=mcmFrSVCCircuitExcessBurst, mcmFrTunnelPvcType=mcmFrTunnelPvcType, nvmFrPVCPhyIfIndex=nvmFrPVCPhyIfIndex, nvmFrPhyPortRxThroughput=nvmFrPhyPortRxThroughput, mcmFrMsmTrapEnable=mcmFrMsmTrapEnable, mcmFrPlmTrapEnable=mcmFrPlmTrapEnable, nvmFrSVCPhyIfIndex=nvmFrSVCPhyIfIndex, nvmFrSVCMaxTxThroughput=nvmFrSVCMaxTxThroughput, mcmFrVirtualPortNumber=mcmFrVirtualPortNumber, nvmFrTunnelPvcIfIndex=nvmFrTunnelPvcIfIndex, mcmFrMaxVirtualPorts=mcmFrMaxVirtualPorts, nvmFrVirtualPortIfIndex=nvmFrVirtualPortIfIndex, mcmFrSVCCircuitThroughput=mcmFrSVCCircuitThroughput, nvmFrSVCMapMaxTxSize=nvmFrSVCMapMaxTxSize, mcmFrPhyPortRxBc=mcmFrPhyPortRxBc, nvmFrTunnelPvcDlciNumber=nvmFrTunnelPvcDlciNumber, mcmFrPVCMapPhysIfIndex=mcmFrPVCMapPhysIfIndex, mcmFrLANSpvcSVCState=mcmFrLANSpvcSVCState, mcmFrPhyPortRxMaxFrameSize=mcmFrPhyPortRxMaxFrameSize, nvmFrDlcmiEntry=nvmFrDlcmiEntry, mcmFrPhyPortDelta=mcmFrPhyPortDelta, mcmFrPVCCntrDLCI=mcmFrPVCCntrDLCI, nvmFrVirtualPortPPA=nvmFrVirtualPortPPA, mcmFrAllSVCCircuitSetupPriority=mcmFrAllSVCCircuitSetupPriority, mcmFrSVCMaxDLCI=mcmFrSVCMaxDLCI, mcmFrVirtualPortMode=mcmFrVirtualPortMode, nvmFrLANSpvcSVCExcessRxBurstSize=nvmFrLANSpvcSVCExcessRxBurstSize, mcmFrTunnelPvcDlciNumber=mcmFrTunnelPvcDlciNumber, nvmFrTunnelPvcMaxRxCIR=nvmFrTunnelPvcMaxRxCIR, mcmFrLANSpvcSVCDiscardPriority=mcmFrLANSpvcSVCDiscardPriority, nvmFrSVCMapTxBurstSize=nvmFrSVCMapTxBurstSize, nvmFrSVCMapEntryStatus=nvmFrSVCMapEntryStatus, nvmFrDlcmiIfIndex=nvmFrDlcmiIfIndex, mcmFrLANSpvcSVCIfIndex=mcmFrLANSpvcSVCIfIndex, mcmFrDlcmiSVCStatusPeerTunPvcDlci=mcmFrDlcmiSVCStatusPeerTunPvcDlci, nvmFrNetlinkMapEntry=nvmFrNetlinkMapEntry, mcmFrPhyPortLMISent=mcmFrPhyPortLMISent, nvmFrPhyPortConsectiveFrames=nvmFrPhyPortConsectiveFrames, mcmFrAllSVCCircuitCreationTime=mcmFrAllSVCCircuitCreationTime, mcmFrPVCMapDLCI=mcmFrPVCMapDLCI, mcmFrLANSpvcSVCTransferPriority=mcmFrLANSpvcSVCTransferPriority, nvmFrLANSpvcSVCDiscardPriority=nvmFrLANSpvcSVCDiscardPriority, mcmFrDlcmiSVCStatusIfIndex=mcmFrDlcmiSVCStatusIfIndex, nvmFrDlcmiAddress=nvmFrDlcmiAddress, mcmFrConnectTime=mcmFrConnectTime, mcmFrSVCMapMaxTxSize=mcmFrSVCMapMaxTxSize, nvmFrPhyPortRxMaxFrameSize=nvmFrPhyPortRxMaxFrameSize, nvmFrSVCMaxTxSize=nvmFrSVCMaxTxSize, nvmFrLANSpvcSVCExcessTxBurstSize=nvmFrLANSpvcSVCExcessTxBurstSize, mcmFrPVCMapEntryStatus=mcmFrPVCMapEntryStatus, mcmFrSVCTxBurstSize=mcmFrSVCTxBurstSize, mcmFrNetlinkMapEntry=mcmFrNetlinkMapEntry, nvmFrPhyPortTxThroughput=nvmFrPhyPortTxThroughput, mcmFrSVCCircuitTxDiscardCIRPolice=mcmFrSVCCircuitTxDiscardCIRPolice, mcmFrSVCMapTransferPriority=mcmFrSVCMapTransferPriority, mcmFrAllSVCCircuitNegMaxTxSize=mcmFrAllSVCCircuitNegMaxTxSize, mcmFrPanlLmiTrapEnable=mcmFrPanlLmiTrapEnable, mcmFrTunnelPvcTxFrames=mcmFrTunnelPvcTxFrames, nvmFrVirtualPortEntryStatus=nvmFrVirtualPortEntryStatus, mcmFrAllSVCCircuitNegRxBurst=mcmFrAllSVCCircuitNegRxBurst, mcmFrSVCMapVirtualPortIfIndex=mcmFrSVCMapVirtualPortIfIndex, nvmFrPhyPortRxBc=nvmFrPhyPortRxBc, nvmFrSVCPhyTable=nvmFrSVCPhyTable, nvmFrSVCMapEntry=nvmFrSVCMapEntry, mcmFrPhyPortLMIReceived=mcmFrPhyPortLMIReceived, mcmFrFramesReceived=mcmFrFramesReceived, nvmFrSVCRxBurstSize=nvmFrSVCRxBurstSize, mcmFrAllSVCCircuitNegRxExcess=mcmFrAllSVCCircuitNegRxExcess, nvmFrPhyPortRateEnf=nvmFrPhyPortRateEnf, nvmFrLANSpvcSVCDNA=nvmFrLANSpvcSVCDNA, mcmFrSVCT303=mcmFrSVCT303, mcmFrSVCMapMinRxThroughput=mcmFrSVCMapMinRxThroughput, nvmFrSVCMapMaxTxThroughput=nvmFrSVCMapMaxTxThroughput, nvmFrTunnelPvcTxBe=nvmFrTunnelPvcTxBe, mcmFrTunnelPvcTable=mcmFrTunnelPvcTable, nvmFrVirtualPortNumber=nvmFrVirtualPortNumber, mcmFrSVCMapTxBurstSize=mcmFrSVCMapTxBurstSize, mcmFrVirtualPortCntrEntry=mcmFrVirtualPortCntrEntry, mcmFrDNANumberingPlan=mcmFrDNANumberingPlan, nvmFrSVCMapMaxRxSize=nvmFrSVCMapMaxRxSize, nvmFrSVCMinRxThroughput=nvmFrSVCMinRxThroughput, mcmFrAllSVCCircuitPriority=mcmFrAllSVCCircuitPriority, mcmFrLANSpvcSVCDNA=mcmFrLANSpvcSVCDNA, mcmFrTunnelPvcIfIndex=mcmFrTunnelPvcIfIndex, mcmFrPVCMapTable=mcmFrPVCMapTable, mcmFrTunnelPvcRxOctets=mcmFrTunnelPvcRxOctets, mcmFrTunnelPvcState=mcmFrTunnelPvcState, mcmFrDlcmiSVCStatusPeerPortNumber=mcmFrDlcmiSVCStatusPeerPortNumber, nvmFrLANSpvcTable=nvmFrLANSpvcTable, mcmFrSVCMapHoldingPriority=mcmFrSVCMapHoldingPriority, mcmFrSVCCircuitSvcIfIndex=mcmFrSVCCircuitSvcIfIndex, mcmFrLANSpvcIfIndex=mcmFrLANSpvcIfIndex, mcmFrSVCCircuitLastTimeChange=mcmFrSVCCircuitLastTimeChange, nvmFrDlcmiTable=nvmFrDlcmiTable, nvmFrSVCMapRxBurstSize=nvmFrSVCMapRxBurstSize, nvmFrSVCPhyEntry=nvmFrSVCPhyEntry, nvmFrLANSpvcSVCHoldingPriority=nvmFrLANSpvcSVCHoldingPriority, mcmFrPhyPortTxBe=mcmFrPhyPortTxBe, mcmFrLANSpvcEntry=mcmFrLANSpvcEntry, mcmFrLANSpvcSVCHoldingPriority=mcmFrLANSpvcSVCHoldingPriority, mcmFrVirtualPortEntryStatus=mcmFrVirtualPortEntryStatus, mcmFrOctetsReceived=mcmFrOctetsReceived, mcmFrLANSpvcSVCMaxTxSize=mcmFrLANSpvcSVCMaxTxSize, nvmFrDlcmiPollingInterval=nvmFrDlcmiPollingInterval, nvmFrPVCMapEntryStatus=nvmFrPVCMapEntryStatus, mcmFrAllSVCCircuitCallOriginator=mcmFrAllSVCCircuitCallOriginator, nvmFrNetlinkMapRowStatus=nvmFrNetlinkMapRowStatus, nvmFrSVCT305=nvmFrSVCT305, mcmFrVirtualPortEntry=mcmFrVirtualPortEntry, mcmFrSVCMapDisableCause=mcmFrSVCMapDisableCause, nvmFrSVCMapDiscardPriority=nvmFrSVCMapDiscardPriority, mcmFrSVCCircuitCreationTime=mcmFrSVCCircuitCreationTime, mcmFrLANSpvcDisconnectReason=mcmFrLANSpvcDisconnectReason, nvmFrTunnelPvcTable=nvmFrTunnelPvcTable)
mibBuilder.exportSymbols("MICOM-FRAMERELAY-MIB", nvmFrDlcmiMonitoredEvents=nvmFrDlcmiMonitoredEvents, mcmFrTunnelPvcRxDiscards=mcmFrTunnelPvcRxDiscards, mcmFrPhyPortIgnoredFrames=mcmFrPhyPortIgnoredFrames, nvmFrMaxDlciPerLine=nvmFrMaxDlciPerLine, mcmFrAllSVCCircuitNegTxBurst=mcmFrAllSVCCircuitNegTxBurst, mcmFrSVCCircuitTable=mcmFrSVCCircuitTable, nvmFrVirtualPortMode=nvmFrVirtualPortMode, mcmFrDlcmiSVCStatusDlci=mcmFrDlcmiSVCStatusDlci, mcmFrSVCMapDiscardPriority=mcmFrSVCMapDiscardPriority, mcmFrAllSVCCircuitSvcIfIndex=mcmFrAllSVCCircuitSvcIfIndex, mcmFrPVCBiDir=mcmFrPVCBiDir, mcmFrSVCMapSetupPriority=mcmFrSVCMapSetupPriority, nvmFrSVCT310=nvmFrSVCT310, mcmFrTunnelPvcPhysicalCard=mcmFrTunnelPvcPhysicalCard, nvmFrSVCMapRowStatus=nvmFrSVCMapRowStatus, mcmFrLANSpvcVPState=mcmFrLANSpvcVPState, mcmFrPVCCntrTable=mcmFrPVCCntrTable, mcmFrSVCMinRxThroughput=mcmFrSVCMinRxThroughput, nvmFrLANSpvcSVCMaxRxThroughput=nvmFrLANSpvcSVCMaxRxThroughput, mcmFrPhyPortExtIfIndex=mcmFrPhyPortExtIfIndex, mcmFrPhyPortRxBe=mcmFrPhyPortRxBe, nvmFrDNANumberingPlan=nvmFrDNANumberingPlan, mcmFrTunnelPvcRxExcessFrames=mcmFrTunnelPvcRxExcessFrames, nvmFrSVCMinDLCI=nvmFrSVCMinDLCI, mcmFrPhyPortDataFrames=mcmFrPhyPortDataFrames, mcmFrMaxDlciPerLine=mcmFrMaxDlciPerLine, nvmFrPVCMapTable=nvmFrPVCMapTable, mcmFrAllSVCCircuitDNA=mcmFrAllSVCCircuitDNA, nvmFrPhyPortEntry=nvmFrPhyPortEntry, mcmFrSVCPhyEntry=mcmFrSVCPhyEntry, nvmFrMaxVirtualPorts=nvmFrMaxVirtualPorts, mcmFrSVCT305=mcmFrSVCT305, mcmFrTunnelPvcPhysPortIfIndex=mcmFrTunnelPvcPhysPortIfIndex, mcmFrSVCCircuitReceivedOctets=mcmFrSVCCircuitReceivedOctets, mcmFrPVCLMIMode=mcmFrPVCLMIMode, mcmFrSVCMaxRxThroughput=mcmFrSVCMaxRxThroughput, nvmFrPVCMapDLCI=nvmFrPVCMapDLCI, nvmFrPVCBiDir=nvmFrPVCBiDir, mcmFrTunnelPvcTxExcessFrames=mcmFrTunnelPvcTxExcessFrames, mcmFrPhyPortRxErrAcks=mcmFrPhyPortRxErrAcks, nvmFrPanlLmiTrapEnable=nvmFrPanlLmiTrapEnable, nvmFrLANSpvcSVCMaxTxBurstSize=nvmFrLANSpvcSVCMaxTxBurstSize, fr_control=fr_control, mcmFrVirtualPortState=mcmFrVirtualPortState, mcmFrAllSVCCircuitExcessBurst=mcmFrAllSVCCircuitExcessBurst, nvmFrSVCMapTransferPriority=nvmFrSVCMapTransferPriority, mcmFrLANSpvcSVCMaxRxSize=mcmFrLANSpvcSVCMaxRxSize, mcmFrTunnelPvcPhysicalPort=mcmFrTunnelPvcPhysicalPort, nvmFrTunnelPvcPhysPortIfIndex=nvmFrTunnelPvcPhysPortIfIndex, nvmFrSVCMapExcessRxBurstSize=nvmFrSVCMapExcessRxBurstSize, nvmFrSVCExcessRxBurstSize=nvmFrSVCExcessRxBurstSize, mcmFrLANSpvcVirtualPortIfIndex=mcmFrLANSpvcVirtualPortIfIndex, mcmFrTunnelPvcTxBe=mcmFrTunnelPvcTxBe, mcmFrPhyPortLongFrames=mcmFrPhyPortLongFrames, nvmFrLANSpvcSVCMinTxThroughput=nvmFrLANSpvcSVCMinTxThroughput, nvmFrPVCMapVirtualPortIfIndex=nvmFrPVCMapVirtualPortIfIndex, mcmFrGlobalGroupCntrAction=mcmFrGlobalGroupCntrAction, mcmFrDlcmiSVCStatusTunnelPvcDlci=mcmFrDlcmiSVCStatusTunnelPvcDlci, nvmFrLANSpvcConnectId=nvmFrLANSpvcConnectId, nvmFrTunnelPvcConsecFrames=nvmFrTunnelPvcConsecFrames, mcmFrPhyPortTxOctets=mcmFrPhyPortTxOctets, nvmFrPhyPortTxMaxFrameSize=nvmFrPhyPortTxMaxFrameSize, mcmFrAllSVCCircuitEntry=mcmFrAllSVCCircuitEntry, mcmFrDlcmiSVCStatusCardNumber=mcmFrDlcmiSVCStatusCardNumber, nvmFrMsmTrapEnable=nvmFrMsmTrapEnable, mcmFrPVCMapVirtualPortIfIndex=mcmFrPVCMapVirtualPortIfIndex, mcmFrPhyPortRxActivations=mcmFrPhyPortRxActivations, mcmFrSVCCircuitReceivedFECNs=mcmFrSVCCircuitReceivedFECNs, nvmFrDlcmiFullEnquiryInterval=nvmFrDlcmiFullEnquiryInterval, nvmFrPhyPortDelta=nvmFrPhyPortDelta, nvmFrTunnelPvcMaxTxCIR=nvmFrTunnelPvcMaxTxCIR, nvmFrCoreTrapEnable=nvmFrCoreTrapEnable, mcmFrNetlinkMapTable=mcmFrNetlinkMapTable, mcmFrLANSpvcSVCExcessRxBurstSize=mcmFrLANSpvcSVCExcessRxBurstSize, mcmFrSVCMapDLCI=mcmFrSVCMapDLCI, nvmFrDlcmiErrorThreshold=nvmFrDlcmiErrorThreshold, nvmFrLANSpvcSVCMaxRxBurstSize=nvmFrLANSpvcSVCMaxRxBurstSize, nvmFrTunnelPvcPhysicalPort=nvmFrTunnelPvcPhysicalPort, nvmFrSVCMapTable=nvmFrSVCMapTable, mcmFrSVCCircuitNegTxBurst=mcmFrSVCCircuitNegTxBurst, mcmFrSVCMaxRxSize=mcmFrSVCMaxRxSize, mcmFrLANSpvcSVCMaxRxBurstSize=mcmFrLANSpvcSVCMaxRxBurstSize, mcmFrLANSpvcSVCDLCI=mcmFrLANSpvcSVCDLCI, mcmFrPhyPortCntrIfIndex=mcmFrPhyPortCntrIfIndex, nvmFrSVCT303=nvmFrSVCT303, mcmFrWanLinkUp=mcmFrWanLinkUp, mcmFrPhyPortRateEnf=mcmFrPhyPortRateEnf, nvmFrLANSpvcSVCMinRxThroughput=nvmFrLANSpvcSVCMinRxThroughput, nvmFrPhyPortFlowControl=nvmFrPhyPortFlowControl, mcmFrPVCPhyIfIndex=mcmFrPVCPhyIfIndex, mcmFrTunnelPvcMaxRxFrameSize=mcmFrTunnelPvcMaxRxFrameSize, mcmFrPhyPortTxExpirations=mcmFrPhyPortTxExpirations, mcmFrLANSpvcRemoteDNA=mcmFrLANSpvcRemoteDNA, mcmFrSVCCircuitSetupPriority=mcmFrSVCCircuitSetupPriority, nvmFrLANSpvcEntry=nvmFrLANSpvcEntry, nvmFrLANSpvcSVCEntry=nvmFrLANSpvcSVCEntry, mcmFrSVCExcessRxBurstSize=mcmFrSVCExcessRxBurstSize, mcmFrAllSVCCircuitThroughput=mcmFrAllSVCCircuitThroughput, nvmFrSVCMapPriority=nvmFrSVCMapPriority, nvmFrTunnelPvcRxBc=nvmFrTunnelPvcRxBc, mcmFrSVCMapExcessRxBurstSize=mcmFrSVCMapExcessRxBurstSize, nvmFrSVCMapSetupPriority=nvmFrSVCMapSetupPriority, mcmFrSVCCntrEntry=mcmFrSVCCntrEntry, mcmFrLANSpvcLastChange=mcmFrLANSpvcLastChange, mcmFrTunnelPvcRxBc=mcmFrTunnelPvcRxBc, mcmFrGlobalGroup=mcmFrGlobalGroup, mcmFrSVCMapEntryStatus=mcmFrSVCMapEntryStatus, mcmFrLANSpvcDLCI=mcmFrLANSpvcDLCI, mcmFrLANSpvcSVCEntry=mcmFrLANSpvcSVCEntry, mcmFrPhyPortRxOkAcks=mcmFrPhyPortRxOkAcks, mcmFrSvcMapSvcIfIndex=mcmFrSvcMapSvcIfIndex, nvmFrSVCMapVirtualPortIfIndex=nvmFrSVCMapVirtualPortIfIndex, nvmFrTunnelPvcEntry=nvmFrTunnelPvcEntry, mcmFrPhyPortRxDataFrames=mcmFrPhyPortRxDataFrames, mcmFrSVCMapMinTxThroughput=mcmFrSVCMapMinTxThroughput, nvmFrPlmTrapEnable=nvmFrPlmTrapEnable, mcmFrLANSpvcConnectId=mcmFrLANSpvcConnectId, nvmFrTunnelPvcType=nvmFrTunnelPvcType, nvmFrPVCMapEntry=nvmFrPVCMapEntry, mcmFrSVCMapMaxTxThroughput=mcmFrSVCMapMaxTxThroughput, mcmFrNetlinkMapVPIfIndex=mcmFrNetlinkMapVPIfIndex, fr_configuration=fr_configuration, mcmFrAllSVCCircuitNegMaxRxSize=mcmFrAllSVCCircuitNegMaxRxSize, nvmFrTunnelPvcRowStatus=nvmFrTunnelPvcRowStatus, mcmFrTunnelPvcRxBe=mcmFrTunnelPvcRxBe, mcmFrVirtualPortIfIndex=mcmFrVirtualPortIfIndex, mcmFrPhyPortRxUnknowns=mcmFrPhyPortRxUnknowns, mcmFrPhyPortThroughput=mcmFrPhyPortThroughput, micom_frame_relay=micom_frame_relay, mcmFrSVCMaxTxThroughput=mcmFrSVCMaxTxThroughput, mcmFrPhyPortXIDExpirations=mcmFrPhyPortXIDExpirations, nvmFrPhyPortRxBe=nvmFrPhyPortRxBe, mcmFrLANSpvcSVCMinTxThroughput=mcmFrLANSpvcSVCMinTxThroughput, nvmFrPVCMapPhysIfIndex=nvmFrPVCMapPhysIfIndex, mcmFrSVCCircuitReceivedFrames=mcmFrSVCCircuitReceivedFrames, mcmFrPVCMapState=mcmFrPVCMapState, mcmFrSVCCircuitHoldingPriority=mcmFrSVCCircuitHoldingPriority, nvmFrVirtualPortEntry=nvmFrVirtualPortEntry, nvmFrSVCTxBurstSize=nvmFrSVCTxBurstSize, mcmFrSVCCircuitEntry=mcmFrSVCCircuitEntry, nvmFrSVCExcessTxBurstSize=nvmFrSVCExcessTxBurstSize, mcmFrSVCMinTxThroughput=mcmFrSVCMinTxThroughput, mcmFrAllSVCCircuitIfIndex=mcmFrAllSVCCircuitIfIndex, mcmFrPhyPortHeaderErrors=mcmFrPhyPortHeaderErrors, mcmFrActiveTunnelingPVCs=mcmFrActiveTunnelingPVCs, mcmFrPhyPortSVCLMIStatus=mcmFrPhyPortSVCLMIStatus, nvmFrSVCMaxRxSize=nvmFrSVCMaxRxSize, nvmFrLANSpvcSVCMaxTxThroughput=nvmFrLANSpvcSVCMaxTxThroughput, mcmFrSVCCntrTable=mcmFrSVCCntrTable, mcmFrSVCCntrIfIndex=mcmFrSVCCntrIfIndex, nvmFrLANSpvcSVCConnectId=nvmFrLANSpvcSVCConnectId, mcmFrSVCCircuitCallOriginator=mcmFrSVCCircuitCallOriginator, mcmFrSVCMapRxBurstSize=mcmFrSVCMapRxBurstSize, mcmFrSVCMapDNA=mcmFrSVCMapDNA, mcmFrTotalTunnelingPVCs=mcmFrTotalTunnelingPVCs, mcmFrLANSpvcSVCMaxTxBurstSize=mcmFrLANSpvcSVCMaxTxBurstSize, mcmFrPhyPortShortFrames=mcmFrPhyPortShortFrames, mcmFrTunnelPvcMaxTxCIR=mcmFrTunnelPvcMaxTxCIR, mcmFrAllSVCCircuitNegTxExcess=mcmFrAllSVCCircuitNegTxExcess, nvmFrPhyPortThroughput=nvmFrPhyPortThroughput, nvmFrLANSpvcVirtualPortIfIndex=nvmFrLANSpvcVirtualPortIfIndex, mcmFrLANSpvcSVCMaxRxThroughput=mcmFrLANSpvcSVCMaxRxThroughput, nvmFrTunnelPvcMaxTxFrameSize=nvmFrTunnelPvcMaxTxFrameSize, mcmFrMaxDLCI=mcmFrMaxDLCI, nvmFrTunnelPvcMaxRxFrameSize=nvmFrTunnelPvcMaxRxFrameSize, mcmFrSVCCircuitDiscardPriority=mcmFrSVCCircuitDiscardPriority, mcmFrLANSpvcSVCTable=mcmFrLANSpvcSVCTable, mcmFrSVCRxBurstSize=mcmFrSVCRxBurstSize, mcmFrSVCMapEntry=mcmFrSVCMapEntry, nvmFrSVCMaxRxThroughput=nvmFrSVCMaxRxThroughput, mcmFrDlcmiSVCStatusPortNumber=mcmFrDlcmiSVCStatusPortNumber, mcmFrTunnelPvcConsecFrames=mcmFrTunnelPvcConsecFrames, mcmFrWanLinkDown=mcmFrWanLinkDown, mcmFrPhyPortTable=mcmFrPhyPortTable, mcmFrAllSVCCircuitNegTxThroughput=mcmFrAllSVCCircuitNegTxThroughput, nvmFrTunnelPvcMinTxCIR=nvmFrTunnelPvcMinTxCIR, mcmFrSVCCircuitSentFrames=mcmFrSVCCircuitSentFrames, mcmFrSVCCntrAction=mcmFrSVCCntrAction, mcmFrDlcmiSVCStatusPeerCardNumber=mcmFrDlcmiSVCStatusPeerCardNumber, mcmFrOctetsSent=mcmFrOctetsSent, mcmFrPhyPortTxBc=mcmFrPhyPortTxBc, mcmFrSVCCircuitNegMaxTxSize=mcmFrSVCCircuitNegMaxTxSize, nvmFrLANSpvcRemoteDLCI=nvmFrLANSpvcRemoteDLCI, mcmFrAllSVCCircuitSentOctets=mcmFrAllSVCCircuitSentOctets, nvmFrSVCMinTxThroughput=nvmFrSVCMinTxThroughput, mcmFrAllSVCCircuitDlci=mcmFrAllSVCCircuitDlci, mcmFrAllSVCCircuitSentFrames=mcmFrAllSVCCircuitSentFrames, nvmFrSVCState=nvmFrSVCState, nvmFrSVCMapMinRxThroughput=nvmFrSVCMapMinRxThroughput, mcmFrSVCMapTable=mcmFrSVCMapTable, mcmFrPVCPhyEntry=mcmFrPVCPhyEntry)
