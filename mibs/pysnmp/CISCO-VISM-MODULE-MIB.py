#
# PySNMP MIB module CISCO-VISM-MODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VISM-MODULE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:02:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
voice, cardSpecific = mibBuilder.importSymbols("BASIS-MIB", "voice", "cardSpecific")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, TimeTicks, Bits, MibIdentifier, Counter32, Unsigned32, ModuleIdentity, Counter64, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "TimeTicks", "Bits", "MibIdentifier", "Counter32", "Unsigned32", "ModuleIdentity", "Counter64", "iso", "Integer32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoVismModuleMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 82))
ciscoVismModuleMIB.setRevisions(('2005-10-17 00:00', '2005-03-01 00:00', '2004-05-24 00:00', '2004-03-09 00:00', '2003-10-31 00:00', '2003-06-18 00:00',))
if mibBuilder.loadTexts: ciscoVismModuleMIB.setLastUpdated('200510170000Z')
if mibBuilder.loadTexts: ciscoVismModuleMIB.setOrganization('Cisco Systems, Inc.')
vismSystemPerfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 25))
vismCallStats = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 13))
vismConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17))
vismIpGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1))
vismVoIpGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2))
vismDspGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3))
vismSystemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4))
vismTrapObjGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5))
vismAal2Grp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6))
vismInteropGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7))
class VismFaxDeJitterMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unSpecified", 1), ("adaptive", 2), ("fixedWithTS", 3), ("fixedWithoutTS", 4), ("passThrough", 5))

class VismFaxDeJitterInitDelay(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100))
    namedValues = NamedValues(("unSpecified", 0), ("five", 5), ("ten", 10), ("fifteen", 15), ("twenty", 20), ("twentyfive", 25), ("thirty", 30), ("thirtyfive", 35), ("forty", 40), ("fortyfive", 45), ("fifty", 50), ("fiftyfive", 55), ("sixty", 60), ("sixtyfive", 65), ("seventy", 70), ("seventyfive", 75), ("eighty", 80), ("eightyfive", 85), ("ninety", 90), ("ninetyfive", 95), ("hundred", 100))

vismCPUUtilization = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCPUUtilization.setStatus('current')
vismMemoryUtilization = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismMemoryUtilization.setStatus('current')
vismSysPerfClrButton = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSysPerfClrButton.setStatus('current')
vismTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismTotalCalls.setStatus('current')
vismSuccessfulCalls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSuccessfulCalls.setStatus('current')
vismFailedCalls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismFailedCalls.setStatus('current')
vismCallStatsClrButton = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCallStatsClrButton.setStatus('current')
vismIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismIpAddress.setStatus('current')
vismSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSubNetMask.setStatus('current')
vismControlTos = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismControlTos.setStatus('current')
vismBearerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerIpAddress.setStatus('current')
vismBearerSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerSubNetMask.setStatus('current')
vismBearerTos = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerTos.setStatus('current')
vismRtcpRepInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 15000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRtcpRepInterval.setStatus('current')
vismRtpReceiveTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRtpReceiveTimer.setStatus('current')
vismPacketizationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40))).clone(namedValues=NamedValues(("tenms", 10), ("twentyms", 20), ("thirtyms", 30), ("fourtyms", 40))).clone('tenms')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPacketizationPeriod.setStatus('deprecated')
vismVoIpDtmfRelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpDtmfRelay.setStatus('current')
vismVoIpCasTransport = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpCasTransport.setStatus('current')
vismVoIpTripleRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpTripleRedundancy.setStatus('current')
vismVoIpVADTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 65535)).clone(250)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpVADTimer.setStatus('current')
vismVoIpNTECapabilityNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpNTECapabilityNegotiate.setStatus('current')
vismVoIpSIDPayloadType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpSIDPayloadType.setStatus('current')
vismVoIpDPvcOamCellGap = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000)).clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpDPvcOamCellGap.setStatus('current')
vismVoIpDPvcRetryCnt = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpDPvcRetryCnt.setStatus('current')
vismVoIpDPvcRecoverCnt = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpDPvcRecoverCnt.setStatus('current')
vismRtcpRecvMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRtcpRecvMultiplier.setStatus('current')
vismVoIpLapdTrunkPVC = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("control", 1), ("bearer", 2))).clone('control')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpLapdTrunkPVC.setStatus('current')
vismVoIpEventNegotiationPolicy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("proprietary", 2), ("all", 3))).clone('proprietary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpEventNegotiationPolicy.setStatus('current')
vismEcanCnfIdlePattern = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pattern1", 1), ("pattern2", 2), ("pattern3", 3), ("pattern4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismEcanCnfIdlePattern.setStatus('deprecated')
vismEcanCnfIdleDirection = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("either", 2), ("send", 3), ("receive", 4))).clone('both')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismEcanCnfIdleDirection.setStatus('deprecated')
vismCompCnfPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(80, 80), ValueRangeConstraint(160, 160), )).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCompCnfPacketSize.setStatus('current')
vismERL = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("zerodb", 1), ("threedb", 2), ("sixdb", 3), ("worstdb", 4))).clone('sixdb')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismERL.setStatus('current')
vismJitterDelayMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2))).clone('fixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismJitterDelayMode.setStatus('deprecated')
vismJitterInitialDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100))).clone(namedValues=NamedValues(("zero", 1), ("five", 5), ("ten", 10), ("fifteen", 15), ("twenty", 20), ("twentyfive", 25), ("thirty", 30), ("thirtyfive", 35), ("fourty", 40), ("fortyfive", 45), ("fifty", 50), ("fiftyfive", 55), ("sixty", 60), ("sixtyfive", 65), ("seventy", 70), ("seventyfive", 75), ("eighty", 80), ("eightyfive", 85), ("ninty", 90), ("ninetyfive", 95), ("hundred", 100))).clone('fourty')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismJitterInitialDelay.setStatus('deprecated')
vismAdaptiveGainControl = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAdaptiveGainControl.setStatus('current')
vismDspHealth = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDspHealth.setStatus('current')
vismUpspeedCodec = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("g-711u", 1), ("g-711a", 2), ("g-726-32", 3), ("clearChannel", 4), ("g-723h", 5), ("g-723l", 6), ("g-726-16", 7), ("g-726-24", 8), ("g-726-40", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismUpspeedCodec.setStatus('current')
vismPayloadType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPayloadType.setStatus('current')
vismDSPHeartbeat = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDSPHeartbeat.setStatus('current')
vismFaxDeJitterMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 12), VismFaxDeJitterMode().clone('unSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFaxDeJitterMode.setStatus('current')
vismFaxDeJitterInitialDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 13), VismFaxDeJitterInitDelay().clone('unSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFaxDeJitterInitialDelay.setStatus('current')
vismDaughterCardSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDaughterCardSerialNum.setStatus('current')
vismDaughterCardDescription = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDaughterCardDescription.setStatus('current')
vismDaughterCardHWRev = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDaughterCardHWRev.setStatus('current')
vismEcanEncoding = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mu-law", 1), ("a-law", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismEcanEncoding.setStatus('current')
vismMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99, 100))).clone(namedValues=NamedValues(("voipSwitching", 1), ("aal2Trunking", 2), ("aal1Svc", 3), ("switchedVoipCASBh", 4), ("switchedVoipPRIBh", 5), ("switchedAal2CASBh", 6), ("switchedAal2Svc", 7), ("switchedAal2Pvc", 8), ("voipAndAal1Svc", 9), ("voipAndAal2Trunking", 10), ("superMode", 99), ("unknownMode", 100))).clone('voipSwitching')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismMode.setStatus('current')
vismPrevMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("voipSwitching", 1), ("aal2Trunking", 2), ("aal1Svc", 3), ("aal2PvcSwitching", 4))).clone('voipSwitching')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPrevMode.setStatus('deprecated')
vismCacEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCacEnable.setStatus('current')
vismAvailableDs0Count = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAvailableDs0Count.setStatus('current')
vismAppliedTemplate = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAppliedTemplate.setStatus('current')
vismTftpServerDn = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismTftpServerDn.setStatus('current')
vismXgcpBearerNetworkType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("atm", 2))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismXgcpBearerNetworkType.setStatus('current')
vismXgcpBearerVCType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismXgcpBearerVCType.setStatus('current')
vismXgcpBearerConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal1Sdt", 1), ("aal2", 2), ("notApplicable", 3))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismXgcpBearerConnectionType.setStatus('current')
vismBearerContinuityTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerContinuityTimer.setStatus('current')
vismCodecNegotiationOption = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lcoRcdLcl", 1), ("lcoLclRcd", 2), ("rcdLcoLcl", 3), ("rcdLclLco", 4), ("lclLcoRcd", 5), ("lclRcdLco", 6))).clone('lcoRcdLcl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCodecNegotiationOption.setStatus('current')
vismProfileNegotiationOption = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lcoRcdLcl", 1), ("lcoLclRcd", 2), ("rcdLcoLcl", 3), ("rcdLclLco", 4), ("lclLcoRcd", 5), ("lclRcdLco", 6))).clone('lcoRcdLcl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismProfileNegotiationOption.setStatus('current')
vismCarrierLossPolicy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("previousCodec", 1), ("upspeedCodec", 2))).clone('previousCodec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCarrierLossPolicy.setStatus('current')
vismCacRejectionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("maintain", 2))).clone('maintain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCacRejectionPolicy.setStatus('current')
vismExtDnsServerDn = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismExtDnsServerDn.setStatus('current')
vismFeatureBitMap = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFeatureBitMap.setStatus('current')
vismVADTolerance = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVADTolerance.setStatus('current')
vismVADDutyCycle = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(61)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVADDutyCycle.setStatus('current')
vismAggregateTrafficClipping = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAggregateTrafficClipping.setStatus('current')
vismAggregateSvcBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAggregateSvcBandwidth.setStatus('current')
vismBearerContinuityTest = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerContinuityTest.setStatus('current')
vismCaleaEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCaleaEnable.setStatus('current')
vismMaxConfNum = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismMaxConfNum.setStatus('current')
vismLongDurationTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLongDurationTimer.setStatus('current')
vismContinuityCo1Timer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismContinuityCo1Timer.setStatus('current')
vismContinuityCo2Timer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismContinuityCo2Timer.setStatus('current')
vismReverseCotTone = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismReverseCotTone.setStatus('current')
vismSendDnEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSendDnEnable.setStatus('current')
vismSendDataGramSize = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSendDataGramSize.setStatus('current')
vismOamLoopThreshold = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismOamLoopThreshold.setStatus('current')
vismFreeDs0Threshold = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFreeDs0Threshold.setStatus('current')
vismCPUUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCPUUtilizationThreshold.setStatus('current')
vismMemoryUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismMemoryUtilizationThreshold.setStatus('current')
vismDualToneDetect = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDualToneDetect.setStatus('current')
vismAisSuppression = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAisSuppression.setStatus('deprecated')
vismBearerIpPingEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 41), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerIpPingEnable.setStatus('current')
vismTrapFilteringEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 42), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismTrapFilteringEnable.setStatus('current')
vismSplModemToneBitMap = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 43), Bits().clone(namedValues=NamedValues(("vism1560980Tone", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSplModemToneBitMap.setStatus('current')
vismSSRCEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 44), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSSRCEnable.setStatus('current')
vismOamLoopbackSetCLP = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 45), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismOamLoopbackSetCLP.setStatus('current')
vismPvcAlarmLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 46), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPvcAlarmLogEnable.setStatus('current')
vismPvcAlarmLogAdminTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(7200)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPvcAlarmLogAdminTimer.setStatus('current')
vismPvcAlarmLogOperTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPvcAlarmLogOperTimer.setStatus('current')
vismContinuityCheckCellEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 49), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismContinuityCheckCellEnable.setStatus('current')
vismXgcpSdpOst = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismXgcpSdpOst.setStatus('current')
vismDynamicPT = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDynamicPT.setStatus('current')
vismConfigChangeTypeBitMap = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismConfigChangeTypeBitMap.setStatus('current')
vismTrapIntIndex1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismTrapIntIndex1.setStatus('current')
vismTrapIntIndex2 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismTrapIntIndex2.setStatus('current')
vismTrapStrIndex1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 66))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismTrapStrIndex1.setStatus('current')
vismTrapIntegerValue = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vismTrapIntegerValue.setStatus('current')
vismAal2SubcellMuxing = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2SubcellMuxing.setStatus('current')
vismAal2DtmfRelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2DtmfRelay.setStatus('current')
vismAal2CasTransport = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CasTransport.setStatus('current')
vismAal2Type3Redundancy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2Type3Redundancy.setStatus('current')
vismAal2VADTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 65535)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2VADTimer.setStatus('current')
vismAal2CidFillTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidFillTimer.setStatus('current')
ciscoVismModuleMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 82, 2))
ciscoVismModuleMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1))
ciscoVismModuleMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 2))
ciscoVismModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 2, 1)).setObjects(("CISCO-VISM-MODULE-MIB", "ciscoVismPerfStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismCallStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismVoIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismDspGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismInteropGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismTrapObjGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismAal2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismModuleCompliance = ciscoVismModuleCompliance.setStatus('deprecated')
ciscoVismModuleCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 2, 2)).setObjects(("CISCO-VISM-MODULE-MIB", "ciscoVismPerfStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismCallStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismVoIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismDspGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemGroup1"), ("CISCO-VISM-MODULE-MIB", "ciscoVismInteropGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismTrapObjGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismAal2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismModuleCompliance1 = ciscoVismModuleCompliance1.setStatus('deprecated')
ciscoVismModuleComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 2, 3)).setObjects(("CISCO-VISM-MODULE-MIB", "ciscoVismPerfStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismCallStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismVoIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismDspGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemGroup1"), ("CISCO-VISM-MODULE-MIB", "ciscoVismInteropGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismTrapObjGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismAal2Group"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemFeatureGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismTrapVarbindGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismModuleComplianceRev2 = ciscoVismModuleComplianceRev2.setStatus('deprecated')
ciscoVismModuleComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 2, 4)).setObjects(("CISCO-VISM-MODULE-MIB", "ciscoVismPerfStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismCallStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismVoIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismDspGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemGroup1"), ("CISCO-VISM-MODULE-MIB", "ciscoVismInteropGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismTrapObjGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismAal2Group"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemFeatureGroupRev1"), ("CISCO-VISM-MODULE-MIB", "ciscoVismTrapVarbindGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismModuleComplianceRev3 = ciscoVismModuleComplianceRev3.setStatus('deprecated')
ciscoVismModuleComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 2, 5)).setObjects(("CISCO-VISM-MODULE-MIB", "ciscoVismPerfStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismCallStatsGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismVoIpGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismDspGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemGroup1"), ("CISCO-VISM-MODULE-MIB", "ciscoVismInteropGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismTrapObjGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismAal2Group"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemFeatureGroupRev1"), ("CISCO-VISM-MODULE-MIB", "ciscoVismTrapVarbindGroup"), ("CISCO-VISM-MODULE-MIB", "ciscoVismDspGroupSup1"), ("CISCO-VISM-MODULE-MIB", "ciscoVismSystemGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismModuleComplianceRev4 = ciscoVismModuleComplianceRev4.setStatus('current')
ciscoVismPerfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 1)).setObjects(("CISCO-VISM-MODULE-MIB", "vismCPUUtilization"), ("CISCO-VISM-MODULE-MIB", "vismMemoryUtilization"), ("CISCO-VISM-MODULE-MIB", "vismSysPerfClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismPerfStatsGroup = ciscoVismPerfStatsGroup.setStatus('current')
ciscoVismCallStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 2)).setObjects(("CISCO-VISM-MODULE-MIB", "vismTotalCalls"), ("CISCO-VISM-MODULE-MIB", "vismSuccessfulCalls"), ("CISCO-VISM-MODULE-MIB", "vismFailedCalls"), ("CISCO-VISM-MODULE-MIB", "vismCallStatsClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismCallStatsGroup = ciscoVismCallStatsGroup.setStatus('current')
ciscoVismIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 3)).setObjects(("CISCO-VISM-MODULE-MIB", "vismIpAddress"), ("CISCO-VISM-MODULE-MIB", "vismSubNetMask"), ("CISCO-VISM-MODULE-MIB", "vismControlTos"), ("CISCO-VISM-MODULE-MIB", "vismBearerIpAddress"), ("CISCO-VISM-MODULE-MIB", "vismBearerSubNetMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismIpGroup = ciscoVismIpGroup.setStatus('current')
ciscoVismVoIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 4)).setObjects(("CISCO-VISM-MODULE-MIB", "vismBearerTos"), ("CISCO-VISM-MODULE-MIB", "vismRtcpRepInterval"), ("CISCO-VISM-MODULE-MIB", "vismRtpReceiveTimer"), ("CISCO-VISM-MODULE-MIB", "vismVoIpDtmfRelay"), ("CISCO-VISM-MODULE-MIB", "vismVoIpCasTransport"), ("CISCO-VISM-MODULE-MIB", "vismVoIpTripleRedundancy"), ("CISCO-VISM-MODULE-MIB", "vismVoIpVADTimer"), ("CISCO-VISM-MODULE-MIB", "vismVoIpNTECapabilityNegotiate"), ("CISCO-VISM-MODULE-MIB", "vismVoIpSIDPayloadType"), ("CISCO-VISM-MODULE-MIB", "vismVoIpDPvcOamCellGap"), ("CISCO-VISM-MODULE-MIB", "vismVoIpDPvcRetryCnt"), ("CISCO-VISM-MODULE-MIB", "vismVoIpDPvcRecoverCnt"), ("CISCO-VISM-MODULE-MIB", "vismRtcpRecvMultiplier"), ("CISCO-VISM-MODULE-MIB", "vismVoIpLapdTrunkPVC"), ("CISCO-VISM-MODULE-MIB", "vismVoIpEventNegotiationPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismVoIpGroup = ciscoVismVoIpGroup.setStatus('current')
ciscoVismDspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 5)).setObjects(("CISCO-VISM-MODULE-MIB", "vismCompCnfPacketSize"), ("CISCO-VISM-MODULE-MIB", "vismERL"), ("CISCO-VISM-MODULE-MIB", "vismAdaptiveGainControl"), ("CISCO-VISM-MODULE-MIB", "vismDspHealth"), ("CISCO-VISM-MODULE-MIB", "vismUpspeedCodec"), ("CISCO-VISM-MODULE-MIB", "vismPayloadType"), ("CISCO-VISM-MODULE-MIB", "vismDSPHeartbeat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismDspGroup = ciscoVismDspGroup.setStatus('current')
ciscoVismSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 6)).setObjects(("CISCO-VISM-MODULE-MIB", "vismDaughterCardSerialNum"), ("CISCO-VISM-MODULE-MIB", "vismDaughterCardDescription"), ("CISCO-VISM-MODULE-MIB", "vismDaughterCardHWRev"), ("CISCO-VISM-MODULE-MIB", "vismEcanEncoding"), ("CISCO-VISM-MODULE-MIB", "vismMode"), ("CISCO-VISM-MODULE-MIB", "vismCacEnable"), ("CISCO-VISM-MODULE-MIB", "vismAvailableDs0Count"), ("CISCO-VISM-MODULE-MIB", "vismAppliedTemplate"), ("CISCO-VISM-MODULE-MIB", "vismTftpServerDn"), ("CISCO-VISM-MODULE-MIB", "vismXgcpBearerNetworkType"), ("CISCO-VISM-MODULE-MIB", "vismXgcpBearerVCType"), ("CISCO-VISM-MODULE-MIB", "vismXgcpBearerConnectionType"), ("CISCO-VISM-MODULE-MIB", "vismBearerContinuityTimer"), ("CISCO-VISM-MODULE-MIB", "vismCodecNegotiationOption"), ("CISCO-VISM-MODULE-MIB", "vismProfileNegotiationOption"), ("CISCO-VISM-MODULE-MIB", "vismCarrierLossPolicy"), ("CISCO-VISM-MODULE-MIB", "vismCacRejectionPolicy"), ("CISCO-VISM-MODULE-MIB", "vismExtDnsServerDn"), ("CISCO-VISM-MODULE-MIB", "vismFeatureBitMap"), ("CISCO-VISM-MODULE-MIB", "vismVADTolerance"), ("CISCO-VISM-MODULE-MIB", "vismVADDutyCycle"), ("CISCO-VISM-MODULE-MIB", "vismAggregateTrafficClipping"), ("CISCO-VISM-MODULE-MIB", "vismAggregateSvcBandwidth"), ("CISCO-VISM-MODULE-MIB", "vismBearerContinuityTest"), ("CISCO-VISM-MODULE-MIB", "vismCaleaEnable"), ("CISCO-VISM-MODULE-MIB", "vismMaxConfNum"), ("CISCO-VISM-MODULE-MIB", "vismLongDurationTimer"), ("CISCO-VISM-MODULE-MIB", "vismContinuityCo1Timer"), ("CISCO-VISM-MODULE-MIB", "vismContinuityCo2Timer"), ("CISCO-VISM-MODULE-MIB", "vismReverseCotTone"), ("CISCO-VISM-MODULE-MIB", "vismSendDnEnable"), ("CISCO-VISM-MODULE-MIB", "vismSendDataGramSize"), ("CISCO-VISM-MODULE-MIB", "vismOamLoopThreshold"), ("CISCO-VISM-MODULE-MIB", "vismFreeDs0Threshold"), ("CISCO-VISM-MODULE-MIB", "vismCPUUtilizationThreshold"), ("CISCO-VISM-MODULE-MIB", "vismMemoryUtilizationThreshold"), ("CISCO-VISM-MODULE-MIB", "vismDualToneDetect"), ("CISCO-VISM-MODULE-MIB", "vismAisSuppression"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSystemGroup = ciscoVismSystemGroup.setStatus('deprecated')
ciscoVismInteropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 7)).setObjects(("CISCO-VISM-MODULE-MIB", "vismXgcpSdpOst"), ("CISCO-VISM-MODULE-MIB", "vismDynamicPT"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismInteropGroup = ciscoVismInteropGroup.setStatus('current')
ciscoVismTrapObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 8)).setObjects(("CISCO-VISM-MODULE-MIB", "vismConfigChangeTypeBitMap"), ("CISCO-VISM-MODULE-MIB", "vismTrapIntIndex1"), ("CISCO-VISM-MODULE-MIB", "vismTrapIntIndex2"), ("CISCO-VISM-MODULE-MIB", "vismTrapStrIndex1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismTrapObjGroup = ciscoVismTrapObjGroup.setStatus('current')
ciscoVismAal2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 9)).setObjects(("CISCO-VISM-MODULE-MIB", "vismAal2SubcellMuxing"), ("CISCO-VISM-MODULE-MIB", "vismAal2DtmfRelay"), ("CISCO-VISM-MODULE-MIB", "vismAal2CasTransport"), ("CISCO-VISM-MODULE-MIB", "vismAal2Type3Redundancy"), ("CISCO-VISM-MODULE-MIB", "vismAal2VADTimer"), ("CISCO-VISM-MODULE-MIB", "vismAal2CidFillTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismAal2Group = ciscoVismAal2Group.setStatus('current')
ciscoVismDspDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 10)).setObjects(("CISCO-VISM-MODULE-MIB", "vismEcanCnfIdlePattern"), ("CISCO-VISM-MODULE-MIB", "vismEcanCnfIdleDirection"), ("CISCO-VISM-MODULE-MIB", "vismJitterDelayMode"), ("CISCO-VISM-MODULE-MIB", "vismJitterInitialDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismDspDeprecatedGroup = ciscoVismDspDeprecatedGroup.setStatus('deprecated')
ciscoVismSystemDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 11)).setObjects(("CISCO-VISM-MODULE-MIB", "vismPrevMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSystemDeprecatedGroup = ciscoVismSystemDeprecatedGroup.setStatus('deprecated')
ciscoVismVoIpDeprecateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 12)).setObjects(("CISCO-VISM-MODULE-MIB", "vismPacketizationPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismVoIpDeprecateGroup = ciscoVismVoIpDeprecateGroup.setStatus('deprecated')
ciscoVismSystemGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 13)).setObjects(("CISCO-VISM-MODULE-MIB", "vismDaughterCardSerialNum"), ("CISCO-VISM-MODULE-MIB", "vismDaughterCardDescription"), ("CISCO-VISM-MODULE-MIB", "vismDaughterCardHWRev"), ("CISCO-VISM-MODULE-MIB", "vismEcanEncoding"), ("CISCO-VISM-MODULE-MIB", "vismMode"), ("CISCO-VISM-MODULE-MIB", "vismCacEnable"), ("CISCO-VISM-MODULE-MIB", "vismAvailableDs0Count"), ("CISCO-VISM-MODULE-MIB", "vismAppliedTemplate"), ("CISCO-VISM-MODULE-MIB", "vismTftpServerDn"), ("CISCO-VISM-MODULE-MIB", "vismXgcpBearerNetworkType"), ("CISCO-VISM-MODULE-MIB", "vismXgcpBearerVCType"), ("CISCO-VISM-MODULE-MIB", "vismXgcpBearerConnectionType"), ("CISCO-VISM-MODULE-MIB", "vismBearerContinuityTimer"), ("CISCO-VISM-MODULE-MIB", "vismCodecNegotiationOption"), ("CISCO-VISM-MODULE-MIB", "vismProfileNegotiationOption"), ("CISCO-VISM-MODULE-MIB", "vismCarrierLossPolicy"), ("CISCO-VISM-MODULE-MIB", "vismCacRejectionPolicy"), ("CISCO-VISM-MODULE-MIB", "vismExtDnsServerDn"), ("CISCO-VISM-MODULE-MIB", "vismFeatureBitMap"), ("CISCO-VISM-MODULE-MIB", "vismVADTolerance"), ("CISCO-VISM-MODULE-MIB", "vismVADDutyCycle"), ("CISCO-VISM-MODULE-MIB", "vismAggregateTrafficClipping"), ("CISCO-VISM-MODULE-MIB", "vismAggregateSvcBandwidth"), ("CISCO-VISM-MODULE-MIB", "vismBearerContinuityTest"), ("CISCO-VISM-MODULE-MIB", "vismCaleaEnable"), ("CISCO-VISM-MODULE-MIB", "vismMaxConfNum"), ("CISCO-VISM-MODULE-MIB", "vismLongDurationTimer"), ("CISCO-VISM-MODULE-MIB", "vismContinuityCo1Timer"), ("CISCO-VISM-MODULE-MIB", "vismContinuityCo2Timer"), ("CISCO-VISM-MODULE-MIB", "vismReverseCotTone"), ("CISCO-VISM-MODULE-MIB", "vismSendDnEnable"), ("CISCO-VISM-MODULE-MIB", "vismSendDataGramSize"), ("CISCO-VISM-MODULE-MIB", "vismOamLoopThreshold"), ("CISCO-VISM-MODULE-MIB", "vismFreeDs0Threshold"), ("CISCO-VISM-MODULE-MIB", "vismCPUUtilizationThreshold"), ("CISCO-VISM-MODULE-MIB", "vismMemoryUtilizationThreshold"), ("CISCO-VISM-MODULE-MIB", "vismDualToneDetect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSystemGroup1 = ciscoVismSystemGroup1.setStatus('current')
ciscoVismSystemFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 14)).setObjects(("CISCO-VISM-MODULE-MIB", "vismBearerIpPingEnable"), ("CISCO-VISM-MODULE-MIB", "vismTrapFilteringEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSystemFeatureGroup = ciscoVismSystemFeatureGroup.setStatus('deprecated')
ciscoVismTrapVarbindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 15)).setObjects(("CISCO-VISM-MODULE-MIB", "vismTrapIntegerValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismTrapVarbindGroup = ciscoVismTrapVarbindGroup.setStatus('current')
ciscoVismSystemFeatureGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 16)).setObjects(("CISCO-VISM-MODULE-MIB", "vismBearerIpPingEnable"), ("CISCO-VISM-MODULE-MIB", "vismTrapFilteringEnable"), ("CISCO-VISM-MODULE-MIB", "vismSplModemToneBitMap"), ("CISCO-VISM-MODULE-MIB", "vismSSRCEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSystemFeatureGroupRev1 = ciscoVismSystemFeatureGroupRev1.setStatus('current')
ciscoVismSystemGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 17)).setObjects(("CISCO-VISM-MODULE-MIB", "vismOamLoopbackSetCLP"), ("CISCO-VISM-MODULE-MIB", "vismPvcAlarmLogEnable"), ("CISCO-VISM-MODULE-MIB", "vismPvcAlarmLogAdminTimer"), ("CISCO-VISM-MODULE-MIB", "vismPvcAlarmLogOperTimer"), ("CISCO-VISM-MODULE-MIB", "vismContinuityCheckCellEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSystemGroupSup1 = ciscoVismSystemGroupSup1.setStatus('current')
ciscoVismDspGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 82, 2, 1, 18)).setObjects(("CISCO-VISM-MODULE-MIB", "vismFaxDeJitterMode"), ("CISCO-VISM-MODULE-MIB", "vismFaxDeJitterInitialDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismDspGroupSup1 = ciscoVismDspGroupSup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-VISM-MODULE-MIB", ciscoVismIpGroup=ciscoVismIpGroup, vismCaleaEnable=vismCaleaEnable, vismContinuityCheckCellEnable=vismContinuityCheckCellEnable, vismCacEnable=vismCacEnable, vismDspHealth=vismDspHealth, vismTrapIntegerValue=vismTrapIntegerValue, vismAppliedTemplate=vismAppliedTemplate, vismAal2VADTimer=vismAal2VADTimer, vismAvailableDs0Count=vismAvailableDs0Count, ciscoVismInteropGroup=ciscoVismInteropGroup, ciscoVismSystemGroup=ciscoVismSystemGroup, ciscoVismSystemDeprecatedGroup=ciscoVismSystemDeprecatedGroup, vismConfigChangeTypeBitMap=vismConfigChangeTypeBitMap, ciscoVismModuleComplianceRev2=ciscoVismModuleComplianceRev2, vismFaxDeJitterInitialDelay=vismFaxDeJitterInitialDelay, vismBearerContinuityTest=vismBearerContinuityTest, vismMaxConfNum=vismMaxConfNum, vismProfileNegotiationOption=vismProfileNegotiationOption, vismEcanEncoding=vismEcanEncoding, vismCacRejectionPolicy=vismCacRejectionPolicy, vismVADTolerance=vismVADTolerance, vismFaxDeJitterMode=vismFaxDeJitterMode, vismAal2DtmfRelay=vismAal2DtmfRelay, vismOamLoopThreshold=vismOamLoopThreshold, vismUpspeedCodec=vismUpspeedCodec, ciscoVismPerfStatsGroup=ciscoVismPerfStatsGroup, vismAggregateTrafficClipping=vismAggregateTrafficClipping, vismEcanCnfIdlePattern=vismEcanCnfIdlePattern, ciscoVismModuleCompliance=ciscoVismModuleCompliance, vismCodecNegotiationOption=vismCodecNegotiationOption, vismVoIpEventNegotiationPolicy=vismVoIpEventNegotiationPolicy, vismPacketizationPeriod=vismPacketizationPeriod, vismDspGrp=vismDspGrp, vismSuccessfulCalls=vismSuccessfulCalls, vismSplModemToneBitMap=vismSplModemToneBitMap, vismTotalCalls=vismTotalCalls, vismFreeDs0Threshold=vismFreeDs0Threshold, vismReverseCotTone=vismReverseCotTone, ciscoVismVoIpGroup=ciscoVismVoIpGroup, vismIpAddress=vismIpAddress, vismSystemGrp=vismSystemGrp, vismFailedCalls=vismFailedCalls, vismEcanCnfIdleDirection=vismEcanCnfIdleDirection, vismAggregateSvcBandwidth=vismAggregateSvcBandwidth, ciscoVismDspDeprecatedGroup=ciscoVismDspDeprecatedGroup, vismDynamicPT=vismDynamicPT, vismTftpServerDn=vismTftpServerDn, vismVADDutyCycle=vismVADDutyCycle, vismDualToneDetect=vismDualToneDetect, vismCarrierLossPolicy=vismCarrierLossPolicy, vismTrapStrIndex1=vismTrapStrIndex1, vismPvcAlarmLogAdminTimer=vismPvcAlarmLogAdminTimer, vismXgcpSdpOst=vismXgcpSdpOst, vismVoIpDPvcRetryCnt=vismVoIpDPvcRetryCnt, ciscoVismModuleMIBGroups=ciscoVismModuleMIBGroups, ciscoVismModuleMIB=ciscoVismModuleMIB, vismFeatureBitMap=vismFeatureBitMap, vismCPUUtilization=vismCPUUtilization, vismPvcAlarmLogEnable=vismPvcAlarmLogEnable, vismOamLoopbackSetCLP=vismOamLoopbackSetCLP, vismVoIpLapdTrunkPVC=vismVoIpLapdTrunkPVC, ciscoVismDspGroupSup1=ciscoVismDspGroupSup1, vismSystemPerfStats=vismSystemPerfStats, ciscoVismSystemFeatureGroup=ciscoVismSystemFeatureGroup, vismVoIpVADTimer=vismVoIpVADTimer, vismBearerSubNetMask=vismBearerSubNetMask, vismAal2SubcellMuxing=vismAal2SubcellMuxing, vismBearerIpAddress=vismBearerIpAddress, ciscoVismTrapObjGroup=ciscoVismTrapObjGroup, vismContinuityCo1Timer=vismContinuityCo1Timer, ciscoVismCallStatsGroup=ciscoVismCallStatsGroup, vismPrevMode=vismPrevMode, vismTrapObjGrp=vismTrapObjGrp, vismXgcpBearerConnectionType=vismXgcpBearerConnectionType, vismCallStats=vismCallStats, ciscoVismVoIpDeprecateGroup=ciscoVismVoIpDeprecateGroup, vismBearerContinuityTimer=vismBearerContinuityTimer, vismAal2Type3Redundancy=vismAal2Type3Redundancy, vismXgcpBearerVCType=vismXgcpBearerVCType, ciscoVismSystemGroup1=ciscoVismSystemGroup1, vismDaughterCardSerialNum=vismDaughterCardSerialNum, vismContinuityCo2Timer=vismContinuityCo2Timer, ciscoVismTrapVarbindGroup=ciscoVismTrapVarbindGroup, vismDSPHeartbeat=vismDSPHeartbeat, vismIpGrp=vismIpGrp, vismLongDurationTimer=vismLongDurationTimer, vismCompCnfPacketSize=vismCompCnfPacketSize, vismAdaptiveGainControl=vismAdaptiveGainControl, vismERL=vismERL, VismFaxDeJitterInitDelay=VismFaxDeJitterInitDelay, vismRtcpRepInterval=vismRtcpRepInterval, vismVoIpCasTransport=vismVoIpCasTransport, vismBearerTos=vismBearerTos, vismDaughterCardHWRev=vismDaughterCardHWRev, vismCallStatsClrButton=vismCallStatsClrButton, vismDaughterCardDescription=vismDaughterCardDescription, vismMemoryUtilizationThreshold=vismMemoryUtilizationThreshold, vismConfig=vismConfig, vismSendDnEnable=vismSendDnEnable, vismPayloadType=vismPayloadType, ciscoVismModuleMIBCompliances=ciscoVismModuleMIBCompliances, vismRtpReceiveTimer=vismRtpReceiveTimer, ciscoVismSystemFeatureGroupRev1=ciscoVismSystemFeatureGroupRev1, vismVoIpDPvcRecoverCnt=vismVoIpDPvcRecoverCnt, vismAisSuppression=vismAisSuppression, ciscoVismModuleMIBConformance=ciscoVismModuleMIBConformance, VismFaxDeJitterMode=VismFaxDeJitterMode, ciscoVismAal2Group=ciscoVismAal2Group, vismVoIpDPvcOamCellGap=vismVoIpDPvcOamCellGap, vismCPUUtilizationThreshold=vismCPUUtilizationThreshold, vismControlTos=vismControlTos, vismVoIpTripleRedundancy=vismVoIpTripleRedundancy, vismAal2Grp=vismAal2Grp, vismTrapIntIndex1=vismTrapIntIndex1, vismExtDnsServerDn=vismExtDnsServerDn, ciscoVismModuleComplianceRev3=ciscoVismModuleComplianceRev3, vismBearerIpPingEnable=vismBearerIpPingEnable, vismVoIpGrp=vismVoIpGrp, vismInteropGrp=vismInteropGrp, vismSendDataGramSize=vismSendDataGramSize, vismAal2CasTransport=vismAal2CasTransport, PYSNMP_MODULE_ID=ciscoVismModuleMIB, vismJitterDelayMode=vismJitterDelayMode, ciscoVismModuleCompliance1=ciscoVismModuleCompliance1, vismVoIpDtmfRelay=vismVoIpDtmfRelay, vismRtcpRecvMultiplier=vismRtcpRecvMultiplier, vismSubNetMask=vismSubNetMask, vismVoIpNTECapabilityNegotiate=vismVoIpNTECapabilityNegotiate, vismAal2CidFillTimer=vismAal2CidFillTimer, vismTrapIntIndex2=vismTrapIntIndex2, ciscoVismSystemGroupSup1=ciscoVismSystemGroupSup1, vismTrapFilteringEnable=vismTrapFilteringEnable, ciscoVismDspGroup=ciscoVismDspGroup, vismPvcAlarmLogOperTimer=vismPvcAlarmLogOperTimer, vismMemoryUtilization=vismMemoryUtilization, vismXgcpBearerNetworkType=vismXgcpBearerNetworkType, vismJitterInitialDelay=vismJitterInitialDelay, ciscoVismModuleComplianceRev4=ciscoVismModuleComplianceRev4, vismMode=vismMode, vismSysPerfClrButton=vismSysPerfClrButton, vismVoIpSIDPayloadType=vismVoIpSIDPayloadType, vismSSRCEnable=vismSSRCEnable)
