#
# PySNMP MIB module INFORMANT-PERF-CITRIX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-PERF-CITRIX
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, Bits, Unsigned32, Integer32, IpAddress, ObjectIdentity, ModuleIdentity, Counter32, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Bits", "Unsigned32", "Integer32", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Counter32", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
InstanceName, informant = mibBuilder.importSymbols("WTCS", "InstanceName", "informant")
citrixPerformance = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 41))
citrixPerformance.setRevisions(('2008-06-13 22:54',))
if mibBuilder.loadTexts: citrixPerformance.setLastUpdated('200806132254Z')
if mibBuilder.loadTexts: citrixPerformance.setOrganization('Informant Systems, Inc.')
ctxCPUUtilizationMgmtUserTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1), )
if mibBuilder.loadTexts: ctxCPUUtilizationMgmtUserTable.setStatus('current')
ctxCPUUtilizationMgmtUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1), ).setIndexNames((0, "INFORMANT-PERF-CITRIX", "ctxcumuInstance"))
if mibBuilder.loadTexts: ctxCPUUtilizationMgmtUserEntry.setStatus('current')
ctxcumuInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuInstance.setStatus('current')
ctxcumuCPUEntitlement = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuCPUEntitlement.setStatus('current')
ctxcumuCPUReservation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuCPUReservation.setStatus('current')
ctxcumuCPUShares = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuCPUShares.setStatus('current')
ctxcumuCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuCPUUsage.setStatus('current')
ctxcumuLongTermCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuLongTermCPUUsage.setStatus('current')
ctxDataLayerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2), )
if mibBuilder.loadTexts: ctxDataLayerTable.setStatus('current')
ctxDataLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1), ).setIndexNames((0, "INFORMANT-PERF-CITRIX", "ctxdlInstance"))
if mibBuilder.loadTexts: ctxDataLayerEntry.setStatus('current')
ctxdlInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlInstance.setStatus('current')
ctxdlCommitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlCommitsPerSec.setStatus('current')
ctxdlContextsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlContextsPerSec.setStatus('current')
ctxdlDeletesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlDeletesPerSec.setStatus('current')
ctxdlInsertsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlInsertsPerSec.setStatus('current')
ctxdlNumberOfContextsInThePool = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlNumberOfContextsInThePool.setStatus('current')
ctxdlNumOfCntxtRequestsWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlNumOfCntxtRequestsWaiting.setStatus('current')
ctxdlReadStreamsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlReadStreamsCreatedPerSec.setStatus('current')
ctxdlStreamBytesReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlStreamBytesReadPerSec.setStatus('current')
ctxdlStreamBytesWrittenPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlStreamBytesWrittenPerSec.setStatus('current')
ctxdlStreamsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlStreamsCreatedPerSec.setStatus('current')
ctxdlUpdatesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlUpdatesPerSec.setStatus('current')
ctxdlWriteStreamsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlWriteStreamsCreatedPerSec.setStatus('current')
ctxIMANetworkingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3), )
if mibBuilder.loadTexts: ctxIMANetworkingTable.setStatus('current')
ctxIMANetworkingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1), ).setIndexNames((0, "INFORMANT-PERF-CITRIX", "ctximanInstance"))
if mibBuilder.loadTexts: ctxIMANetworkingEntry.setStatus('current')
ctximanInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctximanInstance.setStatus('current')
ctximanBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctximanBytesReceivedPerSec.setStatus('current')
ctximanBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctximanBytesSentPerSec.setStatus('current')
ctximanNetworkConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctximanNetworkConnections.setStatus('current')
citrixLicensing = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4))
ctxlAverageCheckInRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlAverageCheckInRspTimeMs.setStatus('current')
ctxlAverageCheckOutRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlAverageCheckOutRspTimeMs.setStatus('current')
ctxlLastRecordCheckInRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlLastRecordCheckInRspTimeMs.setStatus('current')
ctxlLastRecordCheckOutRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlLastRecordCheckOutRspTimeMs.setStatus('current')
ctxlServerConnectionFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlServerConnectionFailure.setStatus('current')
ctxlMaximumCheckInRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlMaximumCheckInRspTimeMs.setStatus('current')
ctxlMaximumCheckOutRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlMaximumCheckOutRspTimeMs.setStatus('current')
citrixMetaFramePresentationSvr = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5))
if mibBuilder.loadTexts: citrixMetaFramePresentationSvr.setStatus('current')
ctxmpsApplEnumerationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsApplEnumerationsPerSec.setStatus('current')
ctxmpsApplResolutionTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsApplResolutionTimeMs.setStatus('current')
ctxmpsApplResolutionFailedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsApplResolutionFailedPerSec.setStatus('current')
ctxmpsApplResolutionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsApplResolutionsPerSec.setStatus('current')
ctxmpsDataStoreConnectionFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreConnectionFailure.setStatus('current')
ctxmpsDataStoreBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreBytesRead.setStatus('current')
ctxmpsDataStoreBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreBytesReadPerSec.setStatus('current')
ctxmpsDataStoreBytesWritePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreBytesWritePerSec.setStatus('current')
ctxmpsDataStoreReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreReads.setStatus('current')
ctxmpsDataStoreReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreReadsPerSec.setStatus('current')
ctxmpsDataStoreWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreWritesPerSec.setStatus('current')
ctxmpsDSGatewayUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSGatewayUpdateCount.setStatus('current')
ctxmpsDSGatewayUpdateBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSGatewayUpdateBytesSent.setStatus('current')
ctxmpsDSQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSQueryCount.setStatus('current')
ctxmpsDSQueryRequestBytesReceive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSQueryRequestBytesReceive.setStatus('current')
ctxmpsDSQueryResponseBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSQueryResponseBytesSent.setStatus('current')
ctxmpsDSUpdateBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSUpdateBytesReceived.setStatus('current')
ctxmpsDSUpdatePacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSUpdatePacketsReceived.setStatus('current')
ctxmpsDSUpdateResponseBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSUpdateResponseBytesSent.setStatus('current')
ctxmpsDSBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSBytesReadPerSec.setStatus('current')
ctxmpsDSBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSBytesWrittenPerSec.setStatus('current')
ctxmpsDSReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSReadsPerSec.setStatus('current')
ctxmpsDSWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSWritesPerSec.setStatus('current')
ctxmpsFilteredApplEnumsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsFilteredApplEnumsPerSec.setStatus('current')
ctxmpsLCCacheBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsLCCacheBytesReadPerSec.setStatus('current')
ctxmpsLCCacheBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsLCCacheBytesWrittenPerSec.setStatus('current')
ctxmpsLCCacheReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsLCCacheReadsPerSec.setStatus('current')
ctxmpsLCCacheWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsLCCacheWritesPerSec.setStatus('current')
ctxmpsMaximumNumberOfXMLThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsMaximumNumberOfXMLThreads.setStatus('current')
ctxmpsNumberOfXMLThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsNumberOfXMLThreads.setStatus('current')
ctxmpsNumberOfBusyXMLThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsNumberOfBusyXMLThreads.setStatus('current')
ctxmpsResWorkItemQueueExecuteCnt = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsResWorkItemQueueExecuteCnt.setStatus('current')
ctxmpsResWorkItemQueueReadyCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsResWorkItemQueueReadyCount.setStatus('current')
ctxmpsWorkItemQueueExecuteCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsWorkItemQueueExecuteCount.setStatus('current')
ctxmpsWorkItemQueuePendingCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsWorkItemQueuePendingCount.setStatus('current')
ctxmpsWorkItemQueueReadyCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsWorkItemQueueReadyCount.setStatus('current')
ctxmpsZoneElections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsZoneElections.setStatus('current')
ctxmpsZoneElectionsWon = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsZoneElectionsWon.setStatus('current')
ctxSmartAuditorAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 41, 6))
ctxsaaActiveRecordingCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsaaActiveRecordingCount.setStatus('current')
ctxsaaReadSmartAuditorDriverSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsaaReadSmartAuditorDriverSec.setStatus('current')
ctxSmartAuditorStorageManager = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 41, 7))
ctxsasmActiveRecordingCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsasmActiveRecordingCount.setStatus('current')
ctxsasmMessageBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsasmMessageBytesPerSec.setStatus('current')
ctxsasmMessagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsasmMessagesPerSec.setStatus('current')
ctxDesktopBrokerDatabaseService = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 41, 8))
ctxdbdsHostedDesktopReleasesSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdbdsHostedDesktopReleasesSec.setStatus('current')
ctxdbdsHostedDesktopRequestsSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdbdsHostedDesktopRequestsSec.setStatus('current')
ctxdbdsHostedDesktopStateUpdSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdbdsHostedDesktopStateUpdSec.setStatus('current')
ctxICASessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9), )
if mibBuilder.loadTexts: ctxICASessionTable.setStatus('current')
ctxICASessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1), ).setIndexNames((0, "INFORMANT-PERF-CITRIX", "ctxisInstance"))
if mibBuilder.loadTexts: ctxICASessionEntry.setStatus('current')
ctxisInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInstance.setStatus('current')
ctxisInputAudioBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputAudioBandwidth.setStatus('current')
ctxisInputCOM1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputCOM1Bandwidth.setStatus('current')
ctxisInputCOM2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputCOM2Bandwidth.setStatus('current')
ctxisInputCOMBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputCOMBandwidth.setStatus('current')
ctxisInputClipboardBandwidt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputClipboardBandwidt.setStatus('current')
ctxisInputControlChanBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputControlChanBandwidth.setStatus('current')
ctxisInputDriveBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputDriveBandwidth.setStatus('current')
ctxisInputFontDataBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputFontDataBandwidth.setStatus('current')
ctxisInputLPT1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputLPT1Bandwidth.setStatus('current')
ctxisInputLPT2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputLPT2Bandwidth.setStatus('current')
ctxisInputLicensingBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputLicensingBandwidth.setStatus('current')
ctxisInputManagementBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputManagementBandwidth.setStatus('current')
ctxisInputPNBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputPNBandwidth.setStatus('current')
ctxisInputPrinterBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputPrinterBandwidth.setStatus('current')
ctxisInputSeamlessBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSeamlessBandwidth.setStatus('current')
ctxisInputSessionBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSessionBandwidth.setStatus('current')
ctxisInputSessionCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSessionCompression.setStatus('current')
ctxisInputSessionLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSessionLineSpeed.setStatus('current')
ctxisInputSpeedScreenDataChanBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSpeedScreenDataChanBW.setStatus('current')
ctxisInputTextEchoBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputTextEchoBandwidth.setStatus('current')
ctxisInputThinWireBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputThinWireBandwidth.setStatus('current')
ctxisInputVideoFrameBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputVideoFrameBandwidth.setStatus('current')
ctxisLatencyLastRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisLatencyLastRecorded.setStatus('current')
ctxisLatencySessionAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisLatencySessionAverage.setStatus('current')
ctxisLatencySessionDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisLatencySessionDeviation.setStatus('current')
ctxisOutputAudioBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputAudioBandwidth.setStatus('current')
ctxisOutputCOM1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputCOM1Bandwidth.setStatus('current')
ctxisOutputCOM2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputCOM2Bandwidth.setStatus('current')
ctxisOutputCOMBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputCOMBandwidth.setStatus('current')
ctxisOutputClipboardBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputClipboardBandwidth.setStatus('current')
ctxisOutputControlChannBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputControlChannBandwidth.setStatus('current')
ctxisOutputDriveBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputDriveBandwidth.setStatus('current')
ctxisOutputFontDataBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputFontDataBandwidth.setStatus('current')
ctxisOutputLPT1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputLPT1Bandwidth.setStatus('current')
ctxisOutputLPT2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputLPT2Bandwidth.setStatus('current')
ctxisOutputLicensingBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputLicensingBandwidth.setStatus('current')
ctxisOutputManagementBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputManagementBandwidth.setStatus('current')
ctxisOutputPNBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputPNBandwidth.setStatus('current')
ctxisOutputPrinterBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputPrinterBandwidth.setStatus('current')
ctxisOutputSeamlessBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSeamlessBandwidth.setStatus('current')
ctxisOutputSessionBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSessionBandwidth.setStatus('current')
ctxisOutputSessionCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSessionCompression.setStatus('current')
ctxisOutputSessionLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSessionLineSpeed.setStatus('current')
ctxisOutputSpeedScreenDataChanBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSpeedScreenDataChanBW.setStatus('current')
ctxisOutputTextEchoBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputTextEchoBandwidth.setStatus('current')
ctxisOutputThinWireBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputThinWireBandwidth.setStatus('current')
ctxisOutputVideoFrameBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputVideoFrameBandwidth.setStatus('current')
ctxSecureTicketAuthority = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10))
if mibBuilder.loadTexts: ctxSecureTicketAuthority.setStatus('current')
ctxstaSTABadDataRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTABadDataRequestCount.setStatus('current')
ctxstaSTABadRefreshRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTABadRefreshRequestCount.setStatus('current')
ctxstaSTABadTicketRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTABadTicketRequestCount.setStatus('current')
ctxstaSTACountOfActiveTickets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTACountOfActiveTickets.setStatus('current')
ctxstaSTAGoodDataRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAGoodDataRequestCount.setStatus('current')
ctxstaSTAGoodRefreshRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAGoodRefreshRequestCount.setStatus('current')
ctxstaSTAGoodTicketRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAGoodTicketRequestCount.setStatus('current')
ctxstaSTAPeakAllRequestRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAPeakAllRequestRate.setStatus('current')
ctxstaSTAPeakDataRequestRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAPeakDataRequestRate.setStatus('current')
ctxstaSTAPeakTicketRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAPeakTicketRefreshRate.setStatus('current')
ctxstaSTAPeakTicketRequestRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAPeakTicketRequestRate.setStatus('current')
ctxstaSTATicketTimeoutCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTATicketTimeoutCount.setStatus('current')
mibBuilder.exportSymbols("INFORMANT-PERF-CITRIX", ctxmpsDSQueryResponseBytesSent=ctxmpsDSQueryResponseBytesSent, ctxisLatencySessionAverage=ctxisLatencySessionAverage, ctxlLastRecordCheckInRspTimeMs=ctxlLastRecordCheckInRspTimeMs, ctxisInputPNBandwidth=ctxisInputPNBandwidth, citrixMetaFramePresentationSvr=citrixMetaFramePresentationSvr, ctxcumuCPUUsage=ctxcumuCPUUsage, ctxstaSTAGoodDataRequestCount=ctxstaSTAGoodDataRequestCount, ctxstaSTAPeakDataRequestRate=ctxstaSTAPeakDataRequestRate, ctxmpsDataStoreBytesReadPerSec=ctxmpsDataStoreBytesReadPerSec, ctxisOutputThinWireBandwidth=ctxisOutputThinWireBandwidth, ctxdlNumberOfContextsInThePool=ctxdlNumberOfContextsInThePool, ctxcumuCPUShares=ctxcumuCPUShares, ctxmpsZoneElectionsWon=ctxmpsZoneElectionsWon, ctxisInputDriveBandwidth=ctxisInputDriveBandwidth, ctxisInputSessionLineSpeed=ctxisInputSessionLineSpeed, ctxICASessionTable=ctxICASessionTable, ctxdlReadStreamsCreatedPerSec=ctxdlReadStreamsCreatedPerSec, ctxstaSTABadRefreshRequestCount=ctxstaSTABadRefreshRequestCount, ctxisInputAudioBandwidth=ctxisInputAudioBandwidth, ctxCPUUtilizationMgmtUserEntry=ctxCPUUtilizationMgmtUserEntry, ctxmpsDSGatewayUpdateCount=ctxmpsDSGatewayUpdateCount, ctxstaSTAGoodTicketRequestCount=ctxstaSTAGoodTicketRequestCount, ctxdlDeletesPerSec=ctxdlDeletesPerSec, ctxmpsWorkItemQueueReadyCount=ctxmpsWorkItemQueueReadyCount, ctxDesktopBrokerDatabaseService=ctxDesktopBrokerDatabaseService, citrixLicensing=citrixLicensing, ctxisInputManagementBandwidth=ctxisInputManagementBandwidth, ctximanNetworkConnections=ctximanNetworkConnections, ctxSecureTicketAuthority=ctxSecureTicketAuthority, ctxstaSTABadDataRequestCount=ctxstaSTABadDataRequestCount, ctxmpsApplResolutionsPerSec=ctxmpsApplResolutionsPerSec, ctxmpsDSGatewayUpdateBytesSent=ctxmpsDSGatewayUpdateBytesSent, ctxSmartAuditorAgent=ctxSmartAuditorAgent, ctxisInputSeamlessBandwidth=ctxisInputSeamlessBandwidth, ctxisLatencySessionDeviation=ctxisLatencySessionDeviation, ctxisInputTextEchoBandwidth=ctxisInputTextEchoBandwidth, ctxisInstance=ctxisInstance, ctxisOutputSpeedScreenDataChanBW=ctxisOutputSpeedScreenDataChanBW, ctxisInputCOM1Bandwidth=ctxisInputCOM1Bandwidth, ctxdlInsertsPerSec=ctxdlInsertsPerSec, ctxlServerConnectionFailure=ctxlServerConnectionFailure, ctxSmartAuditorStorageManager=ctxSmartAuditorStorageManager, ctxdlCommitsPerSec=ctxdlCommitsPerSec, ctxstaSTAPeakTicketRefreshRate=ctxstaSTAPeakTicketRefreshRate, ctxdlNumOfCntxtRequestsWaiting=ctxdlNumOfCntxtRequestsWaiting, ctxmpsDSReadsPerSec=ctxmpsDSReadsPerSec, ctxmpsNumberOfXMLThreads=ctxmpsNumberOfXMLThreads, ctxsaaActiveRecordingCount=ctxsaaActiveRecordingCount, ctxisInputControlChanBandwidth=ctxisInputControlChanBandwidth, ctxmpsDataStoreBytesRead=ctxmpsDataStoreBytesRead, ctxisInputSessionBandwidth=ctxisInputSessionBandwidth, ctxmpsMaximumNumberOfXMLThreads=ctxmpsMaximumNumberOfXMLThreads, ctxDataLayerEntry=ctxDataLayerEntry, ctxisOutputCOM1Bandwidth=ctxisOutputCOM1Bandwidth, ctxdbdsHostedDesktopReleasesSec=ctxdbdsHostedDesktopReleasesSec, ctxisInputSpeedScreenDataChanBW=ctxisInputSpeedScreenDataChanBW, ctxisOutputCOMBandwidth=ctxisOutputCOMBandwidth, ctxisInputLicensingBandwidth=ctxisInputLicensingBandwidth, ctximanBytesReceivedPerSec=ctximanBytesReceivedPerSec, ctxmpsDSBytesReadPerSec=ctxmpsDSBytesReadPerSec, ctxdlStreamsCreatedPerSec=ctxdlStreamsCreatedPerSec, ctxstaSTAPeakTicketRequestRate=ctxstaSTAPeakTicketRequestRate, ctxsasmMessageBytesPerSec=ctxsasmMessageBytesPerSec, ctxmpsLCCacheReadsPerSec=ctxmpsLCCacheReadsPerSec, ctxmpsDataStoreConnectionFailure=ctxmpsDataStoreConnectionFailure, ctxcumuInstance=ctxcumuInstance, ctxmpsZoneElections=ctxmpsZoneElections, ctxmpsDSUpdatePacketsReceived=ctxmpsDSUpdatePacketsReceived, ctxisInputLPT1Bandwidth=ctxisInputLPT1Bandwidth, ctxisOutputControlChannBandwidth=ctxisOutputControlChannBandwidth, ctxmpsFilteredApplEnumsPerSec=ctxmpsFilteredApplEnumsPerSec, citrixPerformance=citrixPerformance, ctximanBytesSentPerSec=ctximanBytesSentPerSec, ctxDataLayerTable=ctxDataLayerTable, ctxlMaximumCheckOutRspTimeMs=ctxlMaximumCheckOutRspTimeMs, ctxmpsDataStoreReadsPerSec=ctxmpsDataStoreReadsPerSec, ctxisOutputSeamlessBandwidth=ctxisOutputSeamlessBandwidth, ctxcumuCPUReservation=ctxcumuCPUReservation, ctxisInputFontDataBandwidth=ctxisInputFontDataBandwidth, ctxisInputVideoFrameBandwidth=ctxisInputVideoFrameBandwidth, ctxmpsDataStoreReads=ctxmpsDataStoreReads, ctxisInputThinWireBandwidth=ctxisInputThinWireBandwidth, ctxICASessionEntry=ctxICASessionEntry, ctxisOutputLPT2Bandwidth=ctxisOutputLPT2Bandwidth, PYSNMP_MODULE_ID=citrixPerformance, ctxcumuCPUEntitlement=ctxcumuCPUEntitlement, ctxlAverageCheckOutRspTimeMs=ctxlAverageCheckOutRspTimeMs, ctxmpsDSUpdateResponseBytesSent=ctxmpsDSUpdateResponseBytesSent, ctxmpsDataStoreWritesPerSec=ctxmpsDataStoreWritesPerSec, ctxstaSTATicketTimeoutCount=ctxstaSTATicketTimeoutCount, ctxdbdsHostedDesktopRequestsSec=ctxdbdsHostedDesktopRequestsSec, ctxisOutputFontDataBandwidth=ctxisOutputFontDataBandwidth, ctxisOutputLPT1Bandwidth=ctxisOutputLPT1Bandwidth, ctxmpsDataStoreBytesWritePerSec=ctxmpsDataStoreBytesWritePerSec, ctxmpsDSQueryCount=ctxmpsDSQueryCount, ctxisOutputPNBandwidth=ctxisOutputPNBandwidth, ctxdlStreamBytesReadPerSec=ctxdlStreamBytesReadPerSec, ctxdlStreamBytesWrittenPerSec=ctxdlStreamBytesWrittenPerSec, ctxlLastRecordCheckOutRspTimeMs=ctxlLastRecordCheckOutRspTimeMs, ctxdbdsHostedDesktopStateUpdSec=ctxdbdsHostedDesktopStateUpdSec, ctxlMaximumCheckInRspTimeMs=ctxlMaximumCheckInRspTimeMs, ctxisOutputAudioBandwidth=ctxisOutputAudioBandwidth, ctxmpsApplEnumerationsPerSec=ctxmpsApplEnumerationsPerSec, ctxisOutputPrinterBandwidth=ctxisOutputPrinterBandwidth, ctxisInputClipboardBandwidt=ctxisInputClipboardBandwidt, ctxisInputPrinterBandwidth=ctxisInputPrinterBandwidth, ctxmpsLCCacheBytesWrittenPerSec=ctxmpsLCCacheBytesWrittenPerSec, ctxdlWriteStreamsCreatedPerSec=ctxdlWriteStreamsCreatedPerSec, ctxlAverageCheckInRspTimeMs=ctxlAverageCheckInRspTimeMs, ctxmpsDSUpdateBytesReceived=ctxmpsDSUpdateBytesReceived, ctxisLatencyLastRecorded=ctxisLatencyLastRecorded, ctxcumuLongTermCPUUsage=ctxcumuLongTermCPUUsage, ctxisOutputTextEchoBandwidth=ctxisOutputTextEchoBandwidth, ctxisOutputVideoFrameBandwidth=ctxisOutputVideoFrameBandwidth, ctxIMANetworkingEntry=ctxIMANetworkingEntry, ctxstaSTAPeakAllRequestRate=ctxstaSTAPeakAllRequestRate, ctxisInputLPT2Bandwidth=ctxisInputLPT2Bandwidth, ctxmpsDSQueryRequestBytesReceive=ctxmpsDSQueryRequestBytesReceive, ctxisOutputClipboardBandwidth=ctxisOutputClipboardBandwidth, ctxdlInstance=ctxdlInstance, ctxisInputCOMBandwidth=ctxisInputCOMBandwidth, ctxIMANetworkingTable=ctxIMANetworkingTable, ctxisOutputSessionCompression=ctxisOutputSessionCompression, ctxisOutputCOM2Bandwidth=ctxisOutputCOM2Bandwidth, ctxisOutputManagementBandwidth=ctxisOutputManagementBandwidth, ctxmpsApplResolutionTimeMs=ctxmpsApplResolutionTimeMs, ctxmpsNumberOfBusyXMLThreads=ctxmpsNumberOfBusyXMLThreads, ctxisInputCOM2Bandwidth=ctxisInputCOM2Bandwidth, ctxmpsDSWritesPerSec=ctxmpsDSWritesPerSec, ctxstaSTACountOfActiveTickets=ctxstaSTACountOfActiveTickets, ctxsasmActiveRecordingCount=ctxsasmActiveRecordingCount, ctxisOutputDriveBandwidth=ctxisOutputDriveBandwidth, ctxmpsApplResolutionFailedPerSec=ctxmpsApplResolutionFailedPerSec, ctxstaSTAGoodRefreshRequestCount=ctxstaSTAGoodRefreshRequestCount, ctxdlContextsPerSec=ctxdlContextsPerSec, ctxsaaReadSmartAuditorDriverSec=ctxsaaReadSmartAuditorDriverSec, ctxisInputSessionCompression=ctxisInputSessionCompression, ctximanInstance=ctximanInstance, ctxmpsResWorkItemQueueReadyCount=ctxmpsResWorkItemQueueReadyCount, ctxsasmMessagesPerSec=ctxsasmMessagesPerSec, ctxmpsLCCacheWritesPerSec=ctxmpsLCCacheWritesPerSec, ctxisOutputLicensingBandwidth=ctxisOutputLicensingBandwidth, ctxmpsLCCacheBytesReadPerSec=ctxmpsLCCacheBytesReadPerSec, ctxisOutputSessionLineSpeed=ctxisOutputSessionLineSpeed, ctxmpsWorkItemQueueExecuteCount=ctxmpsWorkItemQueueExecuteCount, ctxmpsDSBytesWrittenPerSec=ctxmpsDSBytesWrittenPerSec, ctxmpsWorkItemQueuePendingCount=ctxmpsWorkItemQueuePendingCount, ctxstaSTABadTicketRequestCount=ctxstaSTABadTicketRequestCount, ctxCPUUtilizationMgmtUserTable=ctxCPUUtilizationMgmtUserTable, ctxdlUpdatesPerSec=ctxdlUpdatesPerSec, ctxmpsResWorkItemQueueExecuteCnt=ctxmpsResWorkItemQueueExecuteCnt, ctxisOutputSessionBandwidth=ctxisOutputSessionBandwidth)
