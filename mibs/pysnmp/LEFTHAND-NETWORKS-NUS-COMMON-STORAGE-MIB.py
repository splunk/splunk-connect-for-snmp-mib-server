#
# PySNMP MIB module LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
lhnModules, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-GLOBAL-REG", "lhnModules")
lhnNusCommonStorage, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-NUS-COMMON-MIB", "lhnNusCommonStorage")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, iso, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, MibIdentifier, Bits, Counter64, NotificationType, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "iso", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "MibIdentifier", "Bits", "Counter64", "NotificationType", "ObjectIdentity", "Gauge32")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
lhnNusCommonStorageModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 1, 8))
if mibBuilder.loadTexts: lhnNusCommonStorageModule.setLastUpdated('0106010000Z')
if mibBuilder.loadTexts: lhnNusCommonStorageModule.setOrganization('LeftHand Networks, Inc.')
storageDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceCount.setStatus('current')
storageDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2), )
if mibBuilder.loadTexts: storageDeviceTable.setStatus('current')
storageDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB", "storageDeviceIndex"))
if mibBuilder.loadTexts: storageDeviceEntry.setStatus('current')
storageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceIndex.setStatus('current')
storageDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceModel.setStatus('current')
storageDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceClass.setStatus('current')
storageDeviceCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 4), Counter64()).setUnits('Blocks (512 bytes)').setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceCapacity.setStatus('current')
storageDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceStatus.setStatus('current')
storageDeviceChain = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceChain.setStatus('current')
storageDeviceSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceSerialNo.setStatus('current')
storageDeviceBayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceBayStatus.setStatus('current')
storageDeviceTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageDeviceTemperature.setStatus('current')
storageRaidCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidCount.setStatus('current')
storageRaidTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4), )
if mibBuilder.loadTexts: storageRaidTable.setStatus('current')
storageRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB", "storageRaidIndex"))
if mibBuilder.loadTexts: storageRaidEntry.setStatus('current')
storageRaidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidIndex.setStatus('current')
storageRaidDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidDeviceName.setStatus('current')
storageRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidLevel.setStatus('current')
storageRaidDiskCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidDiskCount.setStatus('current')
storageRaidSpareDiskCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidSpareDiskCount.setStatus('current')
storageRaidSuperBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidSuperBlock.setStatus('current')
storageRaidChunkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 7), Integer32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidChunkSize.setStatus('current')
storageRaidDisks = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 4, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidDisks.setStatus('current')
storageRaidConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noRaid", 1), ("stripe", 2), ("mirror", 3), ("mirrorAndStripe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storageRaidConfiguration.setStatus('current')
storageRaidStatus = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("rebuilding", 2), ("degraded", 3), ("notRebuilding", 4), ("off", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageRaidStatus.setStatus('current')
storageRaidMinimumSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 8), Integer32()).setUnits('Kbytes / sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: storageRaidMinimumSpeed.setStatus('current')
storageRaidMaximumSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 4, 9), Integer32()).setUnits('Kbytes / sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: storageRaidMaximumSpeed.setStatus('current')
mibBuilder.exportSymbols("LEFTHAND-NETWORKS-NUS-COMMON-STORAGE-MIB", storageDeviceCapacity=storageDeviceCapacity, storageRaidConfiguration=storageRaidConfiguration, storageRaidStatus=storageRaidStatus, storageRaidSuperBlock=storageRaidSuperBlock, storageRaidMaximumSpeed=storageRaidMaximumSpeed, storageDeviceIndex=storageDeviceIndex, storageRaidDisks=storageRaidDisks, storageRaidIndex=storageRaidIndex, storageDeviceCount=storageDeviceCount, storageDeviceTemperature=storageDeviceTemperature, storageRaidMinimumSpeed=storageRaidMinimumSpeed, storageDeviceBayStatus=storageDeviceBayStatus, storageDeviceChain=storageDeviceChain, PYSNMP_MODULE_ID=lhnNusCommonStorageModule, storageRaidDiskCount=storageRaidDiskCount, storageDeviceEntry=storageDeviceEntry, storageRaidCount=storageRaidCount, storageDeviceClass=storageDeviceClass, storageDeviceModel=storageDeviceModel, storageDeviceStatus=storageDeviceStatus, storageRaidLevel=storageRaidLevel, storageRaidEntry=storageRaidEntry, lhnNusCommonStorageModule=lhnNusCommonStorageModule, storageRaidChunkSize=storageRaidChunkSize, storageDeviceTable=storageDeviceTable, storageRaidSpareDiskCount=storageRaidSpareDiskCount, storageRaidDeviceName=storageRaidDeviceName, storageDeviceSerialNo=storageDeviceSerialNo, storageRaidTable=storageRaidTable)
