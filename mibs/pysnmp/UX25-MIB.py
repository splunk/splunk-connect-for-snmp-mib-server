#
# PySNMP MIB module UX25-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UX25-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:23:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Bits, TimeTicks, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, ObjectIdentity, experimental, NotificationType, Counter64, Counter32, Integer32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Bits", "TimeTicks", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "ObjectIdentity", "experimental", "NotificationType", "Counter64", "Counter32", "Integer32", "Unsigned32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
ux25 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 10))
ux25AdmnChannelTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 1), )
if mibBuilder.loadTexts: ux25AdmnChannelTable.setStatus('mandatory')
ux25AdmnChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnChanneIndex"))
if mibBuilder.loadTexts: ux25AdmnChannelEntry.setStatus('mandatory')
ux25AdmnChanneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnChanneIndex.setStatus('mandatory')
ux25AdmnNetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("x25Llc", 1), ("x2588", 2), ("x2584", 3), ("x2580", 4), ("pss", 5), ("austpac", 6), ("datapac", 7), ("ddn", 8), ("telenet", 9), ("transpac", 10), ("tymnet", 11), ("datexP", 12), ("ddxP", 13), ("venusP", 14), ("accunet", 15), ("itapac", 16), ("datapak", 17), ("datanet", 18), ("dcs", 19), ("telepac", 20), ("fDatapac", 21), ("finpac", 22), ("pacnet", 23), ("luxpac", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnNetMode.setStatus('mandatory')
ux25AdmnProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x25ver80", 1), ("x25ver84", 2), ("x25ver88", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnProtocolVersion.setStatus('mandatory')
ux25AdmnInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dceMode", 1), ("dteMode", 2), ("dxeMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnInterfaceMode.setStatus('mandatory')
ux25AdmnLowestPVCVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLowestPVCVal.setStatus('mandatory')
ux25AdmnHighestPVCVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnHighestPVCVal.setStatus('mandatory')
ux25AdmnChannelLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelLIC.setStatus('mandatory')
ux25AdmnChannelHIC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelHIC.setStatus('mandatory')
ux25AdmnChannelLTC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelLTC.setStatus('mandatory')
ux25AdmnChannelHTC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelHTC.setStatus('mandatory')
ux25AdmnChannelLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelLOC.setStatus('mandatory')
ux25AdmnChannelHOC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelHOC.setStatus('mandatory')
ux25AdmnClassTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 2), )
if mibBuilder.loadTexts: ux25AdmnClassTable.setStatus('mandatory')
ux25AdmnClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnClassIndex"))
if mibBuilder.loadTexts: ux25AdmnClassEntry.setStatus('mandatory')
ux25AdmnClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnClassIndex.setStatus('mandatory')
ux25AdmnLocMaxThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocMaxThruPutClass.setStatus('mandatory')
ux25AdmnRemMaxThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemMaxThruPutClass.setStatus('mandatory')
ux25AdmnLocDefThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocDefThruPutClass.setStatus('mandatory')
ux25AdmnRemDefThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemDefThruPutClass.setStatus('mandatory')
ux25AdmnLocMinThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocMinThruPutClass.setStatus('mandatory')
ux25AdmnRemMinThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemMinThruPutClass.setStatus('mandatory')
ux25AdmnThclassNegToDef = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnThclassNegToDef.setStatus('mandatory')
ux25AdmnThclassType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noTcType", 1), ("loNibble", 2), ("highNibble", 3), ("bothNibbles", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnThclassType.setStatus('mandatory')
ux25AdmnThclassWinMap = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnThclassWinMap.setStatus('mandatory')
ux25AdmnThclassPackMap = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnThclassPackMap.setStatus('mandatory')
ux25AdmnPacketTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 3), )
if mibBuilder.loadTexts: ux25AdmnPacketTable.setStatus('mandatory')
ux25AdmnPacketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnPacketIndex"))
if mibBuilder.loadTexts: ux25AdmnPacketEntry.setStatus('mandatory')
ux25AdmnPacketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnPacketIndex.setStatus('mandatory')
ux25AdmnPktSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32))).clone(namedValues=NamedValues(("pktSeq8", 16), ("pktSeq128", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnPktSequencing.setStatus('mandatory')
ux25AdmnLocMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9))).clone(namedValues=NamedValues(("maxPktSz128", 7), ("maxPktSz256", 8), ("maxPktSz512", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocMaxPktSize.setStatus('mandatory')
ux25AdmnRemMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9))).clone(namedValues=NamedValues(("maxPktSz128", 7), ("maxPktSz256", 8), ("maxPktSz512", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemMaxPktSize.setStatus('mandatory')
ux25AdmnLocDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("defPktSz16", 4), ("defPktSz32", 5), ("defPktSz64", 6), ("defPktSz128", 7), ("defPktSz256", 8), ("defPktSz512", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocDefPktSize.setStatus('mandatory')
ux25AdmnRemDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("defPktSz16", 4), ("defPktSz32", 5), ("defPktSz64", 6), ("defPktSz128", 7), ("defPktSz256", 8), ("defPktSz512", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemDefPktSize.setStatus('mandatory')
ux25AdmnLocMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocMaxWinSize.setStatus('mandatory')
ux25AdmnRemMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemMaxWinSize.setStatus('mandatory')
ux25AdmnLocDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocDefWinSize.setStatus('mandatory')
ux25AdmnRemDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemDefWinSize.setStatus('mandatory')
ux25AdmnMaxNSDULimit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnMaxNSDULimit.setStatus('mandatory')
ux25AdmnAccNoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAccNoDiagnostic.setStatus('mandatory')
ux25AdmnUseDiagnosticPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnUseDiagnosticPacket.setStatus('mandatory')
ux25AdmnItutClearLen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnItutClearLen.setStatus('mandatory')
ux25AdmnBarDiagnosticPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarDiagnosticPacket.setStatus('mandatory')
ux25AdmnDiscNzDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDiscNzDiagnostic.setStatus('mandatory')
ux25AdmnAcceptHexAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAcceptHexAdd.setStatus('mandatory')
ux25AdmnBarNonPrivilegeListen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarNonPrivilegeListen.setStatus('mandatory')
ux25AdmnIntlAddrRecognition = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notDistinguished", 1), ("examineDnic", 2), ("prefix1", 3), ("prefix0", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnIntlAddrRecognition.setStatus('mandatory')
ux25AdmnDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDnic.setStatus('mandatory')
ux25AdmnIntlPrioritized = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnIntlPrioritized.setStatus('mandatory')
ux25AdmnPrtyEncodeCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x2588", 1), ("datapacPriority76", 2), ("datapacTraffic80", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnPrtyEncodeCtrl.setStatus('mandatory')
ux25AdmnPrtyPktForcedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("prioPktSz0", 1), ("prioPktSz4", 5), ("prioPktSz5", 6), ("prioPktSz6", 7), ("prioPktSz7", 8), ("prioPktSz8", 9), ("prioPktSz9", 10), ("prioPktSz10", 11), ("prioPktSz11", 12), ("prioPktSz12", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnPrtyPktForcedVal.setStatus('mandatory')
ux25AdmnSrcAddrCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSaCntrl", 1), ("omitDte", 2), ("useLocal", 3), ("forceLocal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSrcAddrCtrl.setStatus('mandatory')
ux25AdmnDbitInAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDbitInAccept.setStatus('mandatory')
ux25AdmnDbitOutAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDbitOutAccept.setStatus('mandatory')
ux25AdmnDbitInData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDbitInData.setStatus('mandatory')
ux25AdmnDbitOutData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDbitOutData.setStatus('mandatory')
ux25AdmnSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 4), )
if mibBuilder.loadTexts: ux25AdmnSubscriberTable.setStatus('mandatory')
ux25AdmnSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnSubscriberIndex"))
if mibBuilder.loadTexts: ux25AdmnSubscriberEntry.setStatus('mandatory')
ux25AdmnSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnSubscriberIndex.setStatus('mandatory')
ux25AdmnSubCugIaoa = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubCugIaoa.setStatus('mandatory')
ux25AdmnSubCugPref = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubCugPref.setStatus('mandatory')
ux25AdmnSubCugoa = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubCugoa.setStatus('mandatory')
ux25AdmnSubCugia = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubCugia.setStatus('mandatory')
ux25AdmnCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("extended", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnCugFormat.setStatus('mandatory')
ux25AdmnBarInCug = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarInCug.setStatus('mandatory')
ux25AdmnSubExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubExtended.setStatus('mandatory')
ux25AdmnBarExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarExtended.setStatus('mandatory')
ux25AdmnSubFstSelNoRstrct = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubFstSelNoRstrct.setStatus('mandatory')
ux25AdmnSubFstSelWthRstrct = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubFstSelWthRstrct.setStatus('mandatory')
ux25AdmnAccptRvsChrgng = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAccptRvsChrgng.setStatus('mandatory')
ux25AdmnSubLocChargePrevent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubLocChargePrevent.setStatus('mandatory')
ux25AdmnSubToaNpiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubToaNpiFormat.setStatus('mandatory')
ux25AdmnBarToaNpiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarToaNpiFormat.setStatus('mandatory')
ux25AdmnSubNuiOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubNuiOverride.setStatus('mandatory')
ux25AdmnBarInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarInCall.setStatus('mandatory')
ux25AdmnBarOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarOutCall.setStatus('mandatory')
ux25AdmnTimerTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 5), )
if mibBuilder.loadTexts: ux25AdmnTimerTable.setStatus('mandatory')
ux25AdmnTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnTimerIndex"))
if mibBuilder.loadTexts: ux25AdmnTimerEntry.setStatus('mandatory')
ux25AdmnTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnTimerIndex.setStatus('mandatory')
ux25AdmnAckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAckDelay.setStatus('mandatory')
ux25AdmnRstrtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRstrtTime.setStatus('mandatory')
ux25AdmnCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnCallTime.setStatus('mandatory')
ux25AdmnRstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRstTime.setStatus('mandatory')
ux25AdmnClrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnClrTime.setStatus('mandatory')
ux25AdmnWinStatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnWinStatTime.setStatus('mandatory')
ux25AdmnWinRotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnWinRotTime.setStatus('mandatory')
ux25AdmnIntrptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnIntrptTime.setStatus('mandatory')
ux25AdmnIdleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnIdleValue.setStatus('mandatory')
ux25AdmnConnectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnConnectValue.setStatus('mandatory')
ux25AdmnRstrtCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRstrtCnt.setStatus('mandatory')
ux25AdmnRstCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRstCnt.setStatus('mandatory')
ux25AdmnClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnClrCnt.setStatus('mandatory')
ux25AdmnLocalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocalDelay.setStatus('mandatory')
ux25AdmnAccessDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAccessDelay.setStatus('mandatory')
ux25OperChannelTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 6), )
if mibBuilder.loadTexts: ux25OperChannelTable.setStatus('mandatory')
ux25OperChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperChannelIndex"))
if mibBuilder.loadTexts: ux25OperChannelEntry.setStatus('mandatory')
ux25OperChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelIndex.setStatus('mandatory')
ux25OperNetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("x25Llc", 1), ("x2588", 2), ("x2584", 3), ("x2580", 4), ("pss", 5), ("austpac", 6), ("datapac", 7), ("ddn", 8), ("telenet", 9), ("transpac", 10), ("tymnet", 11), ("datexP", 12), ("ddxP", 13), ("venusP", 14), ("accunet", 15), ("itapac", 16), ("datapak", 17), ("datanet", 18), ("dcs", 19), ("telepac", 20), ("fDatapac", 21), ("finpac", 22), ("pacnet", 23), ("luxpac", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperNetMode.setStatus('mandatory')
ux25OperProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x25ver80", 1), ("x25ver84", 2), ("x25ver88", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperProtocolVersion.setStatus('mandatory')
ux25OperInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dceMode", 1), ("dteMode", 2), ("dxeMode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperInterfaceMode.setStatus('mandatory')
ux25OperLowestPVCVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLowestPVCVal.setStatus('mandatory')
ux25OperHighestPVCVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperHighestPVCVal.setStatus('mandatory')
ux25OperChannelLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelLIC.setStatus('mandatory')
ux25OperChannelHIC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelHIC.setStatus('mandatory')
ux25OperChannelLTC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelLTC.setStatus('mandatory')
ux25OperChannelHTC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelHTC.setStatus('mandatory')
ux25OperChannelLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelLOC.setStatus('mandatory')
ux25OperChannelHOC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelHOC.setStatus('mandatory')
ux25OperClassTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 7), )
if mibBuilder.loadTexts: ux25OperClassTable.setStatus('mandatory')
ux25OperClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperClassIndex"))
if mibBuilder.loadTexts: ux25OperClassEntry.setStatus('mandatory')
ux25OperClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperClassIndex.setStatus('mandatory')
ux25OperLocMaxThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocMaxThruPutClass.setStatus('mandatory')
ux25OperRemMaxThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemMaxThruPutClass.setStatus('mandatory')
ux25OperLocDefThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocDefThruPutClass.setStatus('mandatory')
ux25OperRemDefThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemDefThruPutClass.setStatus('mandatory')
ux25OperLocMinThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocMinThruPutClass.setStatus('mandatory')
ux25OperRemMinThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemMinThruPutClass.setStatus('mandatory')
ux25OperThclassNegToDef = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperThclassNegToDef.setStatus('mandatory')
ux25OperThclassType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noTcType", 1), ("loNibble", 2), ("highNibble", 3), ("bothNibbles", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperThclassType.setStatus('mandatory')
ux25OperThclassWinMap = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperThclassWinMap.setStatus('mandatory')
ux25OperThclassPackMap = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperThclassPackMap.setStatus('mandatory')
ux25OperPacketTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 8), )
if mibBuilder.loadTexts: ux25OperPacketTable.setStatus('mandatory')
ux25OperPacketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperPacketIndex"))
if mibBuilder.loadTexts: ux25OperPacketEntry.setStatus('mandatory')
ux25OperPacketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperPacketIndex.setStatus('mandatory')
ux25OperPktSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32))).clone(namedValues=NamedValues(("pktSeq8", 16), ("pktSeq128", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperPktSequencing.setStatus('mandatory')
ux25OperLocMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9))).clone(namedValues=NamedValues(("maxPktSz128", 7), ("maxPktSz256", 8), ("maxPktSz512", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocMaxPktSize.setStatus('mandatory')
ux25OperRemMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9))).clone(namedValues=NamedValues(("maxPktSz128", 7), ("maxPktSz256", 8), ("maxPktSz512", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemMaxPktSize.setStatus('mandatory')
ux25OperLocDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("defPktSz16", 4), ("defPktSz32", 5), ("defPktSz64", 6), ("defPktSz128", 7), ("defPktSz256", 8), ("defPktSz512", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocDefPktSize.setStatus('mandatory')
ux25OperRemDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("defPktSz16", 4), ("defPktSz32", 5), ("defPktSz64", 6), ("defPktSz128", 7), ("defPktSz256", 8), ("defPktSz512", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemDefPktSize.setStatus('mandatory')
ux25OperLocMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocMaxWinSize.setStatus('mandatory')
ux25OperRemMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemMaxWinSize.setStatus('mandatory')
ux25OperLocDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocDefWinSize.setStatus('mandatory')
ux25OperRemDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemDefWinSize.setStatus('mandatory')
ux25OperMaxNSDULimit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperMaxNSDULimit.setStatus('mandatory')
ux25OperAccNoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAccNoDiagnostic.setStatus('mandatory')
ux25OperUseDiagnosticPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperUseDiagnosticPacket.setStatus('mandatory')
ux25OperItutClearLen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperItutClearLen.setStatus('mandatory')
ux25OperBarDiagnosticPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarDiagnosticPacket.setStatus('mandatory')
ux25OperDiscNzDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDiscNzDiagnostic.setStatus('mandatory')
ux25OperAcceptHexAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAcceptHexAdd.setStatus('mandatory')
ux25OperBarNonPrivilegeListen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarNonPrivilegeListen.setStatus('mandatory')
ux25OperIntlAddrRecognition = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notDistinguished", 1), ("examineDnic", 2), ("prefix1", 3), ("prefix0", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperIntlAddrRecognition.setStatus('mandatory')
ux25OperDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDnic.setStatus('mandatory')
ux25OperIntlPrioritized = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperIntlPrioritized.setStatus('mandatory')
ux25OperPrtyEncodeCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x2588", 1), ("datapacPriority76", 2), ("datapacTraffic80", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperPrtyEncodeCtrl.setStatus('mandatory')
ux25OperPrtyPktForcedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("prioPktSz0", 1), ("prioPktSz4", 5), ("prioPktSz5", 6), ("prioPktSz6", 7), ("prioPktSz7", 8), ("prioPktSz8", 9), ("prioPktSz9", 10), ("prioPktSz10", 11), ("prioPktSz11", 12), ("prioPktSz12", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperPrtyPktForcedVal.setStatus('mandatory')
ux25OperSrcAddrCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSaCntrl", 1), ("omitDte", 2), ("useLocal", 3), ("forceLocal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSrcAddrCtrl.setStatus('mandatory')
ux25OperDbitInAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDbitInAccept.setStatus('mandatory')
ux25OperDbitOutAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDbitOutAccept.setStatus('mandatory')
ux25OperDbitInData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDbitInData.setStatus('mandatory')
ux25OperDbitOutData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDbitOutData.setStatus('mandatory')
ux25OperSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 9), )
if mibBuilder.loadTexts: ux25OperSubscriberTable.setStatus('mandatory')
ux25OperSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperSubscriberIndex"))
if mibBuilder.loadTexts: ux25OperSubscriberEntry.setStatus('mandatory')
ux25OperSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubscriberIndex.setStatus('mandatory')
ux25OperSubCugIaoa = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubCugIaoa.setStatus('mandatory')
ux25OperSubCugPref = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubCugPref.setStatus('mandatory')
ux25OperSubCugoa = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubCugoa.setStatus('mandatory')
ux25OperSubCugia = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubCugia.setStatus('mandatory')
ux25OperCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("extended", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperCugFormat.setStatus('mandatory')
ux25OperBarInCug = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarInCug.setStatus('mandatory')
ux25OperSubExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubExtended.setStatus('mandatory')
ux25OperBarExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarExtended.setStatus('mandatory')
ux25OperSubFstSelNoRstrct = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubFstSelNoRstrct.setStatus('mandatory')
ux25OperSubFstSelWthRstrct = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubFstSelWthRstrct.setStatus('mandatory')
ux25OperAccptRvsChrgng = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAccptRvsChrgng.setStatus('mandatory')
ux25OperSubLocChargePrevent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubLocChargePrevent.setStatus('mandatory')
ux25OperSubToaNpiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubToaNpiFormat.setStatus('mandatory')
ux25OperBarToaNpiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarToaNpiFormat.setStatus('mandatory')
ux25OperSubNuiOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubNuiOverride.setStatus('mandatory')
ux25OperBarInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarInCall.setStatus('mandatory')
ux25OperBarOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarOutCall.setStatus('mandatory')
ux25OperTimerTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 10), )
if mibBuilder.loadTexts: ux25OperTimerTable.setStatus('mandatory')
ux25OperTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperTimerIndex"))
if mibBuilder.loadTexts: ux25OperTimerEntry.setStatus('mandatory')
ux25OperTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperTimerIndex.setStatus('mandatory')
ux25OperAckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAckDelay.setStatus('mandatory')
ux25OperRstrtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRstrtTime.setStatus('mandatory')
ux25OperCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperCallTime.setStatus('mandatory')
ux25OperRstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRstTime.setStatus('mandatory')
ux25OperClrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperClrTime.setStatus('mandatory')
ux25OperWinStatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperWinStatTime.setStatus('mandatory')
ux25OperWinRotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperWinRotTime.setStatus('mandatory')
ux25OperIntrptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperIntrptTime.setStatus('mandatory')
ux25OperIdleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperIdleValue.setStatus('mandatory')
ux25OperConnectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperConnectValue.setStatus('mandatory')
ux25OperRstrtCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRstrtCnt.setStatus('mandatory')
ux25OperRstCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRstCnt.setStatus('mandatory')
ux25OperClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperClrCnt.setStatus('mandatory')
ux25OperLocalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocalDelay.setStatus('mandatory')
ux25OperAccessDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAccessDelay.setStatus('mandatory')
ux25StatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 11), )
if mibBuilder.loadTexts: ux25StatTable.setStatus('mandatory')
ux25StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1), ).setIndexNames((0, "UX25-MIB", "ux25StatIndex"))
if mibBuilder.loadTexts: ux25StatEntry.setStatus('mandatory')
ux25StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatIndex.setStatus('mandatory')
ux25StatCallsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatCallsRcvd.setStatus('mandatory')
ux25StatCallsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatCallsSent.setStatus('mandatory')
ux25StatCallsRcvdEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatCallsRcvdEstab.setStatus('mandatory')
ux25StatCallsSentEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatCallsSentEstab.setStatus('mandatory')
ux25StatDataPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatDataPktsRcvd.setStatus('mandatory')
ux25StatDataPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatDataPktsSent.setStatus('mandatory')
ux25StatRestartsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRestartsRcvd.setStatus('mandatory')
ux25StatRestartsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRestartsSent.setStatus('mandatory')
ux25StatRcvrNotRdyRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRcvrNotRdyRcvd.setStatus('mandatory')
ux25StatRcvrNotRdySent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRcvrNotRdySent.setStatus('mandatory')
ux25StatRcvrRdyRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRcvrRdyRcvd.setStatus('mandatory')
ux25StatRcvrRdySent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRcvrRdySent.setStatus('mandatory')
ux25StatResetsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatResetsRcvd.setStatus('mandatory')
ux25StatResetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatResetsSent.setStatus('mandatory')
ux25StatDiagPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatDiagPktsRcvd.setStatus('mandatory')
ux25StatDiagPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatDiagPktsSent.setStatus('mandatory')
ux25StatIntrptPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatIntrptPktsRcvd.setStatus('mandatory')
ux25StatIntrptPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatIntrptPktsSent.setStatus('mandatory')
ux25StatPVCsInDatTrnsfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatPVCsInDatTrnsfrState.setStatus('mandatory')
ux25StatSVCsInDatTrnsfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatSVCsInDatTrnsfrState.setStatus('mandatory')
mibBuilder.exportSymbols("UX25-MIB", ux25StatCallsSentEstab=ux25StatCallsSentEstab, ux25OperBarDiagnosticPacket=ux25OperBarDiagnosticPacket, ux25AdmnRstTime=ux25AdmnRstTime, ux25OperChannelEntry=ux25OperChannelEntry, ux25OperRstTime=ux25OperRstTime, ux25OperAccessDelay=ux25OperAccessDelay, ux25OperCugFormat=ux25OperCugFormat, ux25AdmnThclassNegToDef=ux25AdmnThclassNegToDef, ux25OperSrcAddrCtrl=ux25OperSrcAddrCtrl, ux25StatRcvrNotRdyRcvd=ux25StatRcvrNotRdyRcvd, ux25OperItutClearLen=ux25OperItutClearLen, ux25StatDataPktsRcvd=ux25StatDataPktsRcvd, ux25OperChannelLOC=ux25OperChannelLOC, ux25StatRestartsRcvd=ux25StatRestartsRcvd, ux25AdmnChannelHIC=ux25AdmnChannelHIC, ux25AdmnIntlPrioritized=ux25AdmnIntlPrioritized, ux25OperChannelLIC=ux25OperChannelLIC, ux25OperIntlAddrRecognition=ux25OperIntlAddrRecognition, ux25OperBarInCug=ux25OperBarInCug, ux25AdmnTimerTable=ux25AdmnTimerTable, ux25AdmnLocMaxPktSize=ux25AdmnLocMaxPktSize, ux25AdmnIntrptTime=ux25AdmnIntrptTime, ux25OperRemMaxWinSize=ux25OperRemMaxWinSize, ux25OperRemMaxThruPutClass=ux25OperRemMaxThruPutClass, ux25AdmnAccptRvsChrgng=ux25AdmnAccptRvsChrgng, ux25OperWinRotTime=ux25OperWinRotTime, ux25AdmnChannelTable=ux25AdmnChannelTable, ux25AdmnClrCnt=ux25AdmnClrCnt, ux25OperAccptRvsChrgng=ux25OperAccptRvsChrgng, ux25StatPVCsInDatTrnsfrState=ux25StatPVCsInDatTrnsfrState, ux25OperPacketTable=ux25OperPacketTable, ux25OperDbitOutAccept=ux25OperDbitOutAccept, ux25OperThclassType=ux25OperThclassType, ux25AdmnSubCugia=ux25AdmnSubCugia, ux25OperChannelTable=ux25OperChannelTable, ux25OperTimerTable=ux25OperTimerTable, ux25OperBarExtended=ux25OperBarExtended, ux25OperRstrtCnt=ux25OperRstrtCnt, ux25OperBarOutCall=ux25OperBarOutCall, ux25AdmnPktSequencing=ux25AdmnPktSequencing, ux25AdmnPrtyPktForcedVal=ux25AdmnPrtyPktForcedVal, ux25AdmnLocMinThruPutClass=ux25AdmnLocMinThruPutClass, ux25AdmnSubCugPref=ux25AdmnSubCugPref, ux25OperChannelHTC=ux25OperChannelHTC, ux25AdmnDbitInAccept=ux25AdmnDbitInAccept, ux25AdmnRemMaxThruPutClass=ux25AdmnRemMaxThruPutClass, ux25OperPacketEntry=ux25OperPacketEntry, ux25AdmnWinStatTime=ux25AdmnWinStatTime, ux25OperChannelHOC=ux25OperChannelHOC, ux25OperSubCugPref=ux25OperSubCugPref, ux25OperChannelIndex=ux25OperChannelIndex, ux25OperProtocolVersion=ux25OperProtocolVersion, ux25AdmnAccessDelay=ux25AdmnAccessDelay, ux25AdmnChannelLOC=ux25AdmnChannelLOC, ux25OperLocMinThruPutClass=ux25OperLocMinThruPutClass, ux25OperThclassWinMap=ux25OperThclassWinMap, ux25AdmnIdleValue=ux25AdmnIdleValue, ux25OperPrtyEncodeCtrl=ux25OperPrtyEncodeCtrl, ux25OperRemMinThruPutClass=ux25OperRemMinThruPutClass, ux25AdmnDbitInData=ux25AdmnDbitInData, ux25OperRemDefWinSize=ux25OperRemDefWinSize, ux25OperRemDefPktSize=ux25OperRemDefPktSize, ux25AdmnSubFstSelNoRstrct=ux25AdmnSubFstSelNoRstrct, ux25OperConnectValue=ux25OperConnectValue, ux25AdmnBarInCug=ux25AdmnBarInCug, ux25AdmnSubLocChargePrevent=ux25AdmnSubLocChargePrevent, ux25AdmnChanneIndex=ux25AdmnChanneIndex, ux25AdmnBarInCall=ux25AdmnBarInCall, ux25OperRemMaxPktSize=ux25OperRemMaxPktSize, ux25AdmnCallTime=ux25AdmnCallTime, ux25AdmnRemDefWinSize=ux25AdmnRemDefWinSize, ux25=ux25, ux25AdmnNetMode=ux25AdmnNetMode, ux25AdmnClassIndex=ux25AdmnClassIndex, ux25AdmnBarOutCall=ux25AdmnBarOutCall, ux25OperLocDefPktSize=ux25OperLocDefPktSize, ux25OperBarNonPrivilegeListen=ux25OperBarNonPrivilegeListen, ux25AdmnLocMaxWinSize=ux25AdmnLocMaxWinSize, ux25AdmnInterfaceMode=ux25AdmnInterfaceMode, ux25AdmnUseDiagnosticPacket=ux25AdmnUseDiagnosticPacket, ux25StatDiagPktsRcvd=ux25StatDiagPktsRcvd, ux25OperPacketIndex=ux25OperPacketIndex, ux25OperThclassNegToDef=ux25OperThclassNegToDef, ux25AdmnBarNonPrivilegeListen=ux25AdmnBarNonPrivilegeListen, ux25OperDiscNzDiagnostic=ux25OperDiscNzDiagnostic, ux25AdmnRstrtTime=ux25AdmnRstrtTime, ux25AdmnHighestPVCVal=ux25AdmnHighestPVCVal, ux25OperHighestPVCVal=ux25OperHighestPVCVal, ux25AdmnClrTime=ux25AdmnClrTime, ux25OperLocDefThruPutClass=ux25OperLocDefThruPutClass, ux25OperDbitInAccept=ux25OperDbitInAccept, ux25OperDbitInData=ux25OperDbitInData, ux25OperSubscriberTable=ux25OperSubscriberTable, ux25OperIdleValue=ux25OperIdleValue, ux25StatIntrptPktsSent=ux25StatIntrptPktsSent, ux25StatSVCsInDatTrnsfrState=ux25StatSVCsInDatTrnsfrState, ux25OperAckDelay=ux25OperAckDelay, ux25AdmnLowestPVCVal=ux25AdmnLowestPVCVal, ux25AdmnSubToaNpiFormat=ux25AdmnSubToaNpiFormat, ux25AdmnChannelEntry=ux25AdmnChannelEntry, ux25AdmnRemMaxPktSize=ux25AdmnRemMaxPktSize, ux25AdmnBarExtended=ux25AdmnBarExtended, ux25OperSubFstSelWthRstrct=ux25OperSubFstSelWthRstrct, ux25AdmnRemDefPktSize=ux25AdmnRemDefPktSize, ux25AdmnItutClearLen=ux25AdmnItutClearLen, ux25AdmnProtocolVersion=ux25AdmnProtocolVersion, ux25OperClassEntry=ux25OperClassEntry, ux25AdmnBarToaNpiFormat=ux25AdmnBarToaNpiFormat, ux25OperClrTime=ux25OperClrTime, ux25StatEntry=ux25StatEntry, ux25AdmnWinRotTime=ux25AdmnWinRotTime, ux25OperClassIndex=ux25OperClassIndex, ux25OperThclassPackMap=ux25OperThclassPackMap, ux25AdmnSubCugoa=ux25AdmnSubCugoa, ux25StatRestartsSent=ux25StatRestartsSent, ux25AdmnAcceptHexAdd=ux25AdmnAcceptHexAdd, ux25OperSubCugia=ux25OperSubCugia, ux25OperDnic=ux25OperDnic, ux25AdmnAckDelay=ux25AdmnAckDelay, usr=usr, ux25AdmnPrtyEncodeCtrl=ux25AdmnPrtyEncodeCtrl, ux25AdmnClassTable=ux25AdmnClassTable, ux25StatResetsSent=ux25StatResetsSent, ux25AdmnMaxNSDULimit=ux25AdmnMaxNSDULimit, ux25AdmnCugFormat=ux25AdmnCugFormat, ux25StatTable=ux25StatTable, ux25OperSubscriberEntry=ux25OperSubscriberEntry, ux25StatCallsSent=ux25StatCallsSent, ux25AdmnSubFstSelWthRstrct=ux25AdmnSubFstSelWthRstrct, ux25StatIntrptPktsRcvd=ux25StatIntrptPktsRcvd, ux25AdmnDbitOutData=ux25AdmnDbitOutData, ux25AdmnBarDiagnosticPacket=ux25AdmnBarDiagnosticPacket, ux25AdmnSrcAddrCtrl=ux25AdmnSrcAddrCtrl, ux25OperPrtyPktForcedVal=ux25OperPrtyPktForcedVal, ux25AdmnChannelLIC=ux25AdmnChannelLIC, ux25OperTimerIndex=ux25OperTimerIndex, ux25OperRstCnt=ux25OperRstCnt, ux25StatRcvrNotRdySent=ux25StatRcvrNotRdySent, ux25StatRcvrRdySent=ux25StatRcvrRdySent, ux25OperLowestPVCVal=ux25OperLowestPVCVal, ux25StatResetsRcvd=ux25StatResetsRcvd, ux25OperAccNoDiagnostic=ux25OperAccNoDiagnostic, ux25AdmnLocDefPktSize=ux25AdmnLocDefPktSize, ux25AdmnSubscriberTable=ux25AdmnSubscriberTable, ux25OperRstrtTime=ux25OperRstrtTime, ux25OperUseDiagnosticPacket=ux25OperUseDiagnosticPacket, ux25OperChannelHIC=ux25OperChannelHIC, ux25AdmnSubExtended=ux25AdmnSubExtended, ux25AdmnChannelHTC=ux25AdmnChannelHTC, ux25OperSubExtended=ux25OperSubExtended, ux25OperSubToaNpiFormat=ux25OperSubToaNpiFormat, ux25AdmnRstrtCnt=ux25AdmnRstrtCnt, ux25OperTimerEntry=ux25OperTimerEntry, ux25OperIntlPrioritized=ux25OperIntlPrioritized, ux25OperIntrptTime=ux25OperIntrptTime, ux25AdmnChannelLTC=ux25AdmnChannelLTC, ux25OperLocMaxPktSize=ux25OperLocMaxPktSize, ux25AdmnConnectValue=ux25AdmnConnectValue, ux25OperClrCnt=ux25OperClrCnt, ux25OperAcceptHexAdd=ux25OperAcceptHexAdd, ux25OperWinStatTime=ux25OperWinStatTime, nas=nas, ux25AdmnRemMaxWinSize=ux25AdmnRemMaxWinSize, ux25OperDbitOutData=ux25OperDbitOutData, ux25StatCallsRcvd=ux25StatCallsRcvd, ux25AdmnLocMaxThruPutClass=ux25AdmnLocMaxThruPutClass, ux25AdmnThclassWinMap=ux25AdmnThclassWinMap, ux25OperClassTable=ux25OperClassTable, ux25OperLocMaxWinSize=ux25OperLocMaxWinSize, ux25StatDiagPktsSent=ux25StatDiagPktsSent, ux25AdmnDiscNzDiagnostic=ux25AdmnDiscNzDiagnostic, ux25StatIndex=ux25StatIndex, ux25AdmnPacketIndex=ux25AdmnPacketIndex, ux25StatCallsRcvdEstab=ux25StatCallsRcvdEstab, ux25AdmnLocDefThruPutClass=ux25AdmnLocDefThruPutClass, ux25AdmnRstCnt=ux25AdmnRstCnt, ux25AdmnRemMinThruPutClass=ux25AdmnRemMinThruPutClass, ux25OperPktSequencing=ux25OperPktSequencing, ux25OperSubCugIaoa=ux25OperSubCugIaoa, ux25OperMaxNSDULimit=ux25OperMaxNSDULimit, ux25OperInterfaceMode=ux25OperInterfaceMode, ux25AdmnLocDefWinSize=ux25AdmnLocDefWinSize, ux25AdmnIntlAddrRecognition=ux25AdmnIntlAddrRecognition, ux25AdmnDbitOutAccept=ux25AdmnDbitOutAccept, ux25AdmnSubCugIaoa=ux25AdmnSubCugIaoa, ux25AdmnPacketEntry=ux25AdmnPacketEntry, ux25OperChannelLTC=ux25OperChannelLTC, ux25AdmnRemDefThruPutClass=ux25AdmnRemDefThruPutClass, ux25OperLocalDelay=ux25OperLocalDelay, ux25OperLocDefWinSize=ux25OperLocDefWinSize, ux25OperSubCugoa=ux25OperSubCugoa, ux25AdmnSubNuiOverride=ux25AdmnSubNuiOverride, ux25OperSubLocChargePrevent=ux25OperSubLocChargePrevent, ux25StatDataPktsSent=ux25StatDataPktsSent, ux25AdmnSubscriberIndex=ux25AdmnSubscriberIndex, ux25AdmnDnic=ux25AdmnDnic, ux25AdmnLocalDelay=ux25AdmnLocalDelay, ux25AdmnTimerIndex=ux25AdmnTimerIndex, ux25AdmnAccNoDiagnostic=ux25AdmnAccNoDiagnostic, ux25OperNetMode=ux25OperNetMode, ux25AdmnSubscriberEntry=ux25AdmnSubscriberEntry, ux25AdmnTimerEntry=ux25AdmnTimerEntry, ux25OperLocMaxThruPutClass=ux25OperLocMaxThruPutClass, ux25OperBarToaNpiFormat=ux25OperBarToaNpiFormat, ux25OperCallTime=ux25OperCallTime, ux25OperRemDefThruPutClass=ux25OperRemDefThruPutClass, ux25OperSubNuiOverride=ux25OperSubNuiOverride, ux25AdmnThclassPackMap=ux25AdmnThclassPackMap, ux25AdmnThclassType=ux25AdmnThclassType, ux25AdmnPacketTable=ux25AdmnPacketTable, ux25OperSubscriberIndex=ux25OperSubscriberIndex, ux25StatRcvrRdyRcvd=ux25StatRcvrRdyRcvd, ux25AdmnClassEntry=ux25AdmnClassEntry, ux25OperSubFstSelNoRstrct=ux25OperSubFstSelNoRstrct, ux25OperBarInCall=ux25OperBarInCall, ux25AdmnChannelHOC=ux25AdmnChannelHOC)
