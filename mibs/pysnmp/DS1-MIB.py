#
# PySNMP MIB module DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DS1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:57:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, transmission, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, NotificationType, Counter64, ObjectIdentity, ModuleIdentity, Gauge32, MibIdentifier, Unsigned32, Integer32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "transmission", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "NotificationType", "Counter64", "ObjectIdentity", "ModuleIdentity", "Gauge32", "MibIdentifier", "Unsigned32", "Integer32", "TimeTicks", "iso")
TruthValue, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "TimeStamp")
ds1 = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 18))
ds1.setRevisions(('2007-03-05 00:00', '2004-09-09 00:00', '1998-08-01 18:30', '1993-01-25 20:28',))
if mibBuilder.loadTexts: ds1.setLastUpdated('200703050000Z')
if mibBuilder.loadTexts: ds1.setOrganization('IETF AToM MIB Working Group')
dsx1ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 6), )
if mibBuilder.loadTexts: dsx1ConfigTable.setStatus('current')
dsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 6, 1), ).setIndexNames((0, "DS1-MIB", "dsx1LineIndex"))
if mibBuilder.loadTexts: dsx1ConfigEntry.setStatus('current')
dsx1LineIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineIndex.setStatus('current')
dsx1IfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IfIndex.setStatus('deprecated')
dsx1TimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TimeElapsed.setStatus('current')
dsx1ValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ValidIntervals.setStatus('current')
dsx1LineType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16))).clone(namedValues=NamedValues(("other", 1), ("dsx1ESF", 2), ("dsx1D4", 3), ("dsx1E1", 4), ("dsx1E1CRC", 5), ("dsx1E1MF", 6), ("dsx1E1CRCMF", 7), ("dsx1Unframed", 8), ("dsx1E1Unframed", 9), ("dsx1DS2M12", 10), ("dsx1E2", 11), ("dsx1E1Q50", 12), ("dsx1E1Q50CRC", 13), ("dsx1J1ESF", 14), ("dsx1J1Unframed", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineType.setStatus('current')
dsx1LineCoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dsx1JBZS", 1), ("dsx1B8ZS", 2), ("dsx1HDB3", 3), ("dsx1ZBTSI", 4), ("dsx1AMI", 5), ("other", 6), ("dsx1B6ZS", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineCoding.setStatus('current')
dsx1SendCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dsx1SendNoCode", 1), ("dsx1SendLineCode", 2), ("dsx1SendPayloadCode", 3), ("dsx1SendResetCode", 4), ("dsx1SendQRS", 5), ("dsx1Send511Pattern", 6), ("dsx1Send3in24Pattern", 7), ("dsx1SendOtherTestPattern", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1SendCode.setStatus('current')
dsx1CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1CircuitIdentifier.setStatus('current')
dsx1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx1NoLoop", 1), ("dsx1PayloadLoop", 2), ("dsx1LineLoop", 3), ("dsx1OtherLoop", 4), ("dsx1InwardLoop", 5), ("dsx1DualLoop", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LoopbackConfig.setStatus('current')
dsx1LineStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineStatus.setStatus('current')
dsx1SignalMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1SignalMode.setStatus('current')
dsx1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3), ("adaptive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TransmitClockSource.setStatus('current')
dsx1Fdl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1Fdl.setStatus('current')
dsx1InvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1InvalidIntervals.setStatus('current')
dsx1LineLength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setUnits('meters').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineLength.setStatus('current')
dsx1LineStatusLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineStatusLastChange.setStatus('current')
dsx1LineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineStatusChangeTrapEnable.setStatus('current')
dsx1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LoopbackStatus.setStatus('current')
dsx1Ds1ChannelNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1Ds1ChannelNumber.setStatus('current')
dsx1Channelization = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledDs0", 2), ("enabledDs1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1Channelization.setStatus('current')
dsx1LineMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csu", 1), ("dsu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineMode.setStatus('current')
dsx1LineBuildOut = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("neg75dB", 2), ("neg15dB", 3), ("neg225dB", 4), ("zerodB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineBuildOut.setStatus('current')
dsx1LineImpedance = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("unbalanced75ohms", 2), ("balanced100ohms", 3), ("balanced120ohms", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineImpedance.setStatus('current')
dsx1CurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 7), )
if mibBuilder.loadTexts: dsx1CurrentTable.setStatus('current')
dsx1CurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 7, 1), ).setIndexNames((0, "DS1-MIB", "dsx1CurrentIndex"))
if mibBuilder.loadTexts: dsx1CurrentEntry.setStatus('current')
dsx1CurrentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentIndex.setStatus('current')
dsx1CurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentESs.setStatus('current')
dsx1CurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentSESs.setStatus('current')
dsx1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentSEFSs.setStatus('current')
dsx1CurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentUASs.setStatus('current')
dsx1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentCSSs.setStatus('current')
dsx1CurrentPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentPCVs.setStatus('current')
dsx1CurrentLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLESs.setStatus('current')
dsx1CurrentBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentBESs.setStatus('current')
dsx1CurrentDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentDMs.setStatus('deprecated')
dsx1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLCVs.setStatus('current')
dsx1IntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 8), )
if mibBuilder.loadTexts: dsx1IntervalTable.setStatus('current')
dsx1IntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 8, 1), ).setIndexNames((0, "DS1-MIB", "dsx1IntervalIndex"), (0, "DS1-MIB", "dsx1IntervalNumber"))
if mibBuilder.loadTexts: dsx1IntervalEntry.setStatus('current')
dsx1IntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalIndex.setStatus('current')
dsx1IntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalNumber.setStatus('current')
dsx1IntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalESs.setStatus('current')
dsx1IntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalSESs.setStatus('current')
dsx1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalSEFSs.setStatus('current')
dsx1IntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalUASs.setStatus('current')
dsx1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalCSSs.setStatus('current')
dsx1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalPCVs.setStatus('current')
dsx1IntervalLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLESs.setStatus('current')
dsx1IntervalBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalBESs.setStatus('current')
dsx1IntervalDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalDMs.setStatus('deprecated')
dsx1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLCVs.setStatus('current')
dsx1IntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalValidData.setStatus('current')
dsx1TotalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 9), )
if mibBuilder.loadTexts: dsx1TotalTable.setStatus('current')
dsx1TotalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 9, 1), ).setIndexNames((0, "DS1-MIB", "dsx1TotalIndex"))
if mibBuilder.loadTexts: dsx1TotalEntry.setStatus('current')
dsx1TotalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalIndex.setStatus('current')
dsx1TotalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalESs.setStatus('current')
dsx1TotalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalSESs.setStatus('current')
dsx1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalSEFSs.setStatus('current')
dsx1TotalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalUASs.setStatus('current')
dsx1TotalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalCSSs.setStatus('current')
dsx1TotalPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalPCVs.setStatus('current')
dsx1TotalLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalLESs.setStatus('current')
dsx1TotalBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalBESs.setStatus('current')
dsx1TotalDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalDMs.setStatus('deprecated')
dsx1TotalLCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalLCVs.setStatus('current')
dsx1ChanMappingTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 16), )
if mibBuilder.loadTexts: dsx1ChanMappingTable.setStatus('current')
dsx1ChanMappingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DS1-MIB", "dsx1Ds1ChannelNumber"))
if mibBuilder.loadTexts: dsx1ChanMappingEntry.setStatus('current')
dsx1ChanMappedIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 16, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ChanMappedIfIndex.setStatus('current')
dsx1FarEndCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 10), )
if mibBuilder.loadTexts: dsx1FarEndCurrentTable.setStatus('current')
dsx1FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 10, 1), ).setIndexNames((0, "DS1-MIB", "dsx1FarEndCurrentIndex"))
if mibBuilder.loadTexts: dsx1FarEndCurrentEntry.setStatus('current')
dsx1FarEndCurrentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentIndex.setStatus('current')
dsx1FarEndTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTimeElapsed.setStatus('current')
dsx1FarEndValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndValidIntervals.setStatus('current')
dsx1FarEndCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentESs.setStatus('current')
dsx1FarEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentSESs.setStatus('current')
dsx1FarEndCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentSEFSs.setStatus('current')
dsx1FarEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentUASs.setStatus('current')
dsx1FarEndCurrentCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentCSSs.setStatus('current')
dsx1FarEndCurrentLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentLESs.setStatus('current')
dsx1FarEndCurrentPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentPCVs.setStatus('current')
dsx1FarEndCurrentBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentBESs.setStatus('current')
dsx1FarEndCurrentDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentDMs.setStatus('deprecated')
dsx1FarEndInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndInvalidIntervals.setStatus('current')
dsx1FarEndIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 11), )
if mibBuilder.loadTexts: dsx1FarEndIntervalTable.setStatus('current')
dsx1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 11, 1), ).setIndexNames((0, "DS1-MIB", "dsx1FarEndIntervalIndex"), (0, "DS1-MIB", "dsx1FarEndIntervalNumber"))
if mibBuilder.loadTexts: dsx1FarEndIntervalEntry.setStatus('current')
dsx1FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalIndex.setStatus('current')
dsx1FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalNumber.setStatus('current')
dsx1FarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalESs.setStatus('current')
dsx1FarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalSESs.setStatus('current')
dsx1FarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalSEFSs.setStatus('current')
dsx1FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalUASs.setStatus('current')
dsx1FarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalCSSs.setStatus('current')
dsx1FarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalLESs.setStatus('current')
dsx1FarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalPCVs.setStatus('current')
dsx1FarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalBESs.setStatus('current')
dsx1FarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalDMs.setStatus('deprecated')
dsx1FarEndIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalValidData.setStatus('current')
dsx1FarEndTotalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 12), )
if mibBuilder.loadTexts: dsx1FarEndTotalTable.setStatus('current')
dsx1FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 12, 1), ).setIndexNames((0, "DS1-MIB", "dsx1FarEndTotalIndex"))
if mibBuilder.loadTexts: dsx1FarEndTotalEntry.setStatus('current')
dsx1FarEndTotalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalIndex.setStatus('current')
dsx1FarEndTotalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalESs.setStatus('current')
dsx1FarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalSESs.setStatus('current')
dsx1FarEndTotalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalSEFSs.setStatus('current')
dsx1FarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalUASs.setStatus('current')
dsx1FarEndTotalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalCSSs.setStatus('current')
dsx1FarEndTotalLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalLESs.setStatus('current')
dsx1FarEndTotalPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalPCVs.setStatus('current')
dsx1FarEndTotalBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalBESs.setStatus('current')
dsx1FarEndTotalDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalDMs.setStatus('deprecated')
dsx1FracTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 13), )
if mibBuilder.loadTexts: dsx1FracTable.setStatus('deprecated')
dsx1FracEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 13, 1), ).setIndexNames((0, "DS1-MIB", "dsx1FracIndex"), (0, "DS1-MIB", "dsx1FracNumber"))
if mibBuilder.loadTexts: dsx1FracEntry.setStatus('deprecated')
dsx1FracIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FracIndex.setStatus('deprecated')
dsx1FracNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FracNumber.setStatus('deprecated')
dsx1FracIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1FracIfIndex.setStatus('deprecated')
ds1Traps = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 18, 15))
dsx1LineStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 10, 18, 15, 0, 1)).setObjects(("DS1-MIB", "dsx1LineStatus"), ("DS1-MIB", "dsx1LineStatusLastChange"))
if mibBuilder.loadTexts: dsx1LineStatusChange.setStatus('current')
ds1Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 18, 14))
ds1Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 18, 14, 1))
ds1Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 18, 14, 2))
ds1Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 1)).setObjects(("DS1-MIB", "ds1NearEndConfigGroup"), ("DS1-MIB", "ds1NearEndStatisticsGroup"), ("DS1-MIB", "ds1FarEndGroup"), ("DS1-MIB", "ds1NearEndOptionalConfigGroup"), ("DS1-MIB", "ds1DS2Group"), ("DS1-MIB", "ds1TransStatsGroup"), ("DS1-MIB", "ds1ChanMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1Compliance = ds1Compliance.setStatus('deprecated')
ds1MibT1PriCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 2)).setObjects(("DS1-MIB", "ds1NearEndConfigGroup"), ("DS1-MIB", "ds1NearEndStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1MibT1PriCompliance = ds1MibT1PriCompliance.setStatus('deprecated')
ds1MibE1PriCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 3)).setObjects(("DS1-MIB", "ds1NearEndConfigGroup"), ("DS1-MIB", "ds1NearEndStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1MibE1PriCompliance = ds1MibE1PriCompliance.setStatus('deprecated')
ds1Ds2Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 4)).setObjects(("DS1-MIB", "ds1DS2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1Ds2Compliance = ds1Ds2Compliance.setStatus('current')
ds1NCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 5)).setObjects(("DS1-MIB", "ds1NearEndConfigurationGroup"), ("DS1-MIB", "ds1NearEndStatisticsGroup"), ("DS1-MIB", "ds1FarEndGroup"), ("DS1-MIB", "ds1NearEndOptionalTrapGroup"), ("DS1-MIB", "ds1NearEndOptionalConfigGroup"), ("DS1-MIB", "ds1DS2Group"), ("DS1-MIB", "ds1TransStatsGroup"), ("DS1-MIB", "ds1ChanMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NCompliance = ds1NCompliance.setStatus('deprecated')
ds1MibT1PriNCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 6)).setObjects(("DS1-MIB", "ds1NearEndConfigurationGroup"), ("DS1-MIB", "ds1NearEndStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1MibT1PriNCompliance = ds1MibT1PriNCompliance.setStatus('deprecated')
ds1MibE1PriNCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 7)).setObjects(("DS1-MIB", "ds1NearEndConfigurationGroup"), ("DS1-MIB", "ds1NearEndStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1MibE1PriNCompliance = ds1MibE1PriNCompliance.setStatus('deprecated')
ds1J1Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 8)).setObjects(("DS1-MIB", "ds1NearEndCfgGroup"), ("DS1-MIB", "ds1NearEndStatGroup"), ("DS1-MIB", "ds1FarEndNGroup"), ("DS1-MIB", "ds1NearEndOptionalTrapGroup"), ("DS1-MIB", "ds1NearEndOptionalConfigGroup"), ("DS1-MIB", "ds1DS2Group"), ("DS1-MIB", "ds1TransStatsGroup"), ("DS1-MIB", "ds1ChanMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1J1Compliance = ds1J1Compliance.setStatus('current')
ds1NMibT1PriNCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 9)).setObjects(("DS1-MIB", "ds1NearEndCfgGroup"), ("DS1-MIB", "ds1NearEndStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NMibT1PriNCompliance = ds1NMibT1PriNCompliance.setStatus('current')
ds1NMibE1PriNCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 18, 14, 2, 10)).setObjects(("DS1-MIB", "ds1NearEndCfgGroup"), ("DS1-MIB", "ds1NearEndStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NMibE1PriNCompliance = ds1NMibE1PriNCompliance.setStatus('current')
ds1NearEndConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 1)).setObjects(("DS1-MIB", "dsx1LineIndex"), ("DS1-MIB", "dsx1TimeElapsed"), ("DS1-MIB", "dsx1ValidIntervals"), ("DS1-MIB", "dsx1LineType"), ("DS1-MIB", "dsx1LineCoding"), ("DS1-MIB", "dsx1SendCode"), ("DS1-MIB", "dsx1CircuitIdentifier"), ("DS1-MIB", "dsx1LoopbackConfig"), ("DS1-MIB", "dsx1LineStatus"), ("DS1-MIB", "dsx1SignalMode"), ("DS1-MIB", "dsx1TransmitClockSource"), ("DS1-MIB", "dsx1Fdl"), ("DS1-MIB", "dsx1InvalidIntervals"), ("DS1-MIB", "dsx1LineLength"), ("DS1-MIB", "dsx1LoopbackStatus"), ("DS1-MIB", "dsx1Ds1ChannelNumber"), ("DS1-MIB", "dsx1Channelization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NearEndConfigGroup = ds1NearEndConfigGroup.setStatus('deprecated')
ds1NearEndStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 2)).setObjects(("DS1-MIB", "dsx1CurrentIndex"), ("DS1-MIB", "dsx1CurrentESs"), ("DS1-MIB", "dsx1CurrentSESs"), ("DS1-MIB", "dsx1CurrentSEFSs"), ("DS1-MIB", "dsx1CurrentUASs"), ("DS1-MIB", "dsx1CurrentCSSs"), ("DS1-MIB", "dsx1CurrentPCVs"), ("DS1-MIB", "dsx1CurrentLESs"), ("DS1-MIB", "dsx1CurrentBESs"), ("DS1-MIB", "dsx1CurrentDMs"), ("DS1-MIB", "dsx1CurrentLCVs"), ("DS1-MIB", "dsx1IntervalIndex"), ("DS1-MIB", "dsx1IntervalNumber"), ("DS1-MIB", "dsx1IntervalESs"), ("DS1-MIB", "dsx1IntervalSESs"), ("DS1-MIB", "dsx1IntervalSEFSs"), ("DS1-MIB", "dsx1IntervalUASs"), ("DS1-MIB", "dsx1IntervalCSSs"), ("DS1-MIB", "dsx1IntervalPCVs"), ("DS1-MIB", "dsx1IntervalLESs"), ("DS1-MIB", "dsx1IntervalBESs"), ("DS1-MIB", "dsx1IntervalDMs"), ("DS1-MIB", "dsx1IntervalLCVs"), ("DS1-MIB", "dsx1IntervalValidData"), ("DS1-MIB", "dsx1TotalIndex"), ("DS1-MIB", "dsx1TotalESs"), ("DS1-MIB", "dsx1TotalSESs"), ("DS1-MIB", "dsx1TotalSEFSs"), ("DS1-MIB", "dsx1TotalUASs"), ("DS1-MIB", "dsx1TotalCSSs"), ("DS1-MIB", "dsx1TotalPCVs"), ("DS1-MIB", "dsx1TotalLESs"), ("DS1-MIB", "dsx1TotalBESs"), ("DS1-MIB", "dsx1TotalDMs"), ("DS1-MIB", "dsx1TotalLCVs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NearEndStatisticsGroup = ds1NearEndStatisticsGroup.setStatus('deprecated')
ds1FarEndGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 3)).setObjects(("DS1-MIB", "dsx1FarEndCurrentIndex"), ("DS1-MIB", "dsx1FarEndTimeElapsed"), ("DS1-MIB", "dsx1FarEndValidIntervals"), ("DS1-MIB", "dsx1FarEndCurrentESs"), ("DS1-MIB", "dsx1FarEndCurrentSESs"), ("DS1-MIB", "dsx1FarEndCurrentSEFSs"), ("DS1-MIB", "dsx1FarEndCurrentUASs"), ("DS1-MIB", "dsx1FarEndCurrentCSSs"), ("DS1-MIB", "dsx1FarEndCurrentLESs"), ("DS1-MIB", "dsx1FarEndCurrentPCVs"), ("DS1-MIB", "dsx1FarEndCurrentBESs"), ("DS1-MIB", "dsx1FarEndCurrentDMs"), ("DS1-MIB", "dsx1FarEndInvalidIntervals"), ("DS1-MIB", "dsx1FarEndIntervalIndex"), ("DS1-MIB", "dsx1FarEndIntervalNumber"), ("DS1-MIB", "dsx1FarEndIntervalESs"), ("DS1-MIB", "dsx1FarEndIntervalSESs"), ("DS1-MIB", "dsx1FarEndIntervalSEFSs"), ("DS1-MIB", "dsx1FarEndIntervalUASs"), ("DS1-MIB", "dsx1FarEndIntervalCSSs"), ("DS1-MIB", "dsx1FarEndIntervalLESs"), ("DS1-MIB", "dsx1FarEndIntervalPCVs"), ("DS1-MIB", "dsx1FarEndIntervalBESs"), ("DS1-MIB", "dsx1FarEndIntervalDMs"), ("DS1-MIB", "dsx1FarEndIntervalValidData"), ("DS1-MIB", "dsx1FarEndTotalIndex"), ("DS1-MIB", "dsx1FarEndTotalESs"), ("DS1-MIB", "dsx1FarEndTotalSESs"), ("DS1-MIB", "dsx1FarEndTotalSEFSs"), ("DS1-MIB", "dsx1FarEndTotalUASs"), ("DS1-MIB", "dsx1FarEndTotalCSSs"), ("DS1-MIB", "dsx1FarEndTotalLESs"), ("DS1-MIB", "dsx1FarEndTotalPCVs"), ("DS1-MIB", "dsx1FarEndTotalBESs"), ("DS1-MIB", "dsx1FarEndTotalDMs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1FarEndGroup = ds1FarEndGroup.setStatus('deprecated')
ds1DeprecatedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 4)).setObjects(("DS1-MIB", "dsx1IfIndex"), ("DS1-MIB", "dsx1FracIndex"), ("DS1-MIB", "dsx1FracNumber"), ("DS1-MIB", "dsx1FracIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1DeprecatedGroup = ds1DeprecatedGroup.setStatus('deprecated')
ds1NearEndOptionalConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 5)).setObjects(("DS1-MIB", "dsx1LineStatusLastChange"), ("DS1-MIB", "dsx1LineStatusChangeTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NearEndOptionalConfigGroup = ds1NearEndOptionalConfigGroup.setStatus('current')
ds1DS2Group = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 6)).setObjects(("DS1-MIB", "dsx1LineIndex"), ("DS1-MIB", "dsx1LineType"), ("DS1-MIB", "dsx1LineCoding"), ("DS1-MIB", "dsx1SendCode"), ("DS1-MIB", "dsx1LineStatus"), ("DS1-MIB", "dsx1SignalMode"), ("DS1-MIB", "dsx1TransmitClockSource"), ("DS1-MIB", "dsx1Channelization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1DS2Group = ds1DS2Group.setStatus('current')
ds1TransStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 7)).setObjects(("DS1-MIB", "dsx1CurrentESs"), ("DS1-MIB", "dsx1CurrentSESs"), ("DS1-MIB", "dsx1CurrentUASs"), ("DS1-MIB", "dsx1IntervalESs"), ("DS1-MIB", "dsx1IntervalSESs"), ("DS1-MIB", "dsx1IntervalUASs"), ("DS1-MIB", "dsx1TotalESs"), ("DS1-MIB", "dsx1TotalSESs"), ("DS1-MIB", "dsx1TotalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1TransStatsGroup = ds1TransStatsGroup.setStatus('current')
ds1NearEndOptionalTrapGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 8)).setObjects(("DS1-MIB", "dsx1LineStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NearEndOptionalTrapGroup = ds1NearEndOptionalTrapGroup.setStatus('current')
ds1ChanMappingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 9)).setObjects(("DS1-MIB", "dsx1ChanMappedIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1ChanMappingGroup = ds1ChanMappingGroup.setStatus('current')
ds1NearEndConfigurationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 10)).setObjects(("DS1-MIB", "dsx1LineIndex"), ("DS1-MIB", "dsx1TimeElapsed"), ("DS1-MIB", "dsx1ValidIntervals"), ("DS1-MIB", "dsx1LineType"), ("DS1-MIB", "dsx1LineCoding"), ("DS1-MIB", "dsx1SendCode"), ("DS1-MIB", "dsx1CircuitIdentifier"), ("DS1-MIB", "dsx1LoopbackConfig"), ("DS1-MIB", "dsx1LineStatus"), ("DS1-MIB", "dsx1SignalMode"), ("DS1-MIB", "dsx1TransmitClockSource"), ("DS1-MIB", "dsx1Fdl"), ("DS1-MIB", "dsx1InvalidIntervals"), ("DS1-MIB", "dsx1LineLength"), ("DS1-MIB", "dsx1LoopbackStatus"), ("DS1-MIB", "dsx1Ds1ChannelNumber"), ("DS1-MIB", "dsx1Channelization"), ("DS1-MIB", "dsx1LineMode"), ("DS1-MIB", "dsx1LineBuildOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NearEndConfigurationGroup = ds1NearEndConfigurationGroup.setStatus('deprecated')
ds1NearEndCfgGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 11)).setObjects(("DS1-MIB", "dsx1LineIndex"), ("DS1-MIB", "dsx1TimeElapsed"), ("DS1-MIB", "dsx1ValidIntervals"), ("DS1-MIB", "dsx1LineType"), ("DS1-MIB", "dsx1LineCoding"), ("DS1-MIB", "dsx1SendCode"), ("DS1-MIB", "dsx1CircuitIdentifier"), ("DS1-MIB", "dsx1LoopbackConfig"), ("DS1-MIB", "dsx1LineStatus"), ("DS1-MIB", "dsx1SignalMode"), ("DS1-MIB", "dsx1TransmitClockSource"), ("DS1-MIB", "dsx1Fdl"), ("DS1-MIB", "dsx1InvalidIntervals"), ("DS1-MIB", "dsx1LineLength"), ("DS1-MIB", "dsx1LoopbackStatus"), ("DS1-MIB", "dsx1Ds1ChannelNumber"), ("DS1-MIB", "dsx1Channelization"), ("DS1-MIB", "dsx1LineMode"), ("DS1-MIB", "dsx1LineBuildOut"), ("DS1-MIB", "dsx1LineImpedance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NearEndCfgGroup = ds1NearEndCfgGroup.setStatus('current')
ds1NearEndStatGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 12)).setObjects(("DS1-MIB", "dsx1CurrentIndex"), ("DS1-MIB", "dsx1CurrentESs"), ("DS1-MIB", "dsx1CurrentSESs"), ("DS1-MIB", "dsx1CurrentSEFSs"), ("DS1-MIB", "dsx1CurrentUASs"), ("DS1-MIB", "dsx1CurrentCSSs"), ("DS1-MIB", "dsx1CurrentPCVs"), ("DS1-MIB", "dsx1CurrentLESs"), ("DS1-MIB", "dsx1CurrentBESs"), ("DS1-MIB", "dsx1CurrentLCVs"), ("DS1-MIB", "dsx1IntervalIndex"), ("DS1-MIB", "dsx1IntervalNumber"), ("DS1-MIB", "dsx1IntervalESs"), ("DS1-MIB", "dsx1IntervalSESs"), ("DS1-MIB", "dsx1IntervalSEFSs"), ("DS1-MIB", "dsx1IntervalUASs"), ("DS1-MIB", "dsx1IntervalCSSs"), ("DS1-MIB", "dsx1IntervalPCVs"), ("DS1-MIB", "dsx1IntervalLESs"), ("DS1-MIB", "dsx1IntervalBESs"), ("DS1-MIB", "dsx1IntervalLCVs"), ("DS1-MIB", "dsx1IntervalValidData"), ("DS1-MIB", "dsx1TotalIndex"), ("DS1-MIB", "dsx1TotalESs"), ("DS1-MIB", "dsx1TotalSESs"), ("DS1-MIB", "dsx1TotalSEFSs"), ("DS1-MIB", "dsx1TotalUASs"), ("DS1-MIB", "dsx1TotalCSSs"), ("DS1-MIB", "dsx1TotalPCVs"), ("DS1-MIB", "dsx1TotalLESs"), ("DS1-MIB", "dsx1TotalBESs"), ("DS1-MIB", "dsx1TotalLCVs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1NearEndStatGroup = ds1NearEndStatGroup.setStatus('current')
ds1FarEndNGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 18, 14, 1, 13)).setObjects(("DS1-MIB", "dsx1FarEndCurrentIndex"), ("DS1-MIB", "dsx1FarEndTimeElapsed"), ("DS1-MIB", "dsx1FarEndValidIntervals"), ("DS1-MIB", "dsx1FarEndCurrentESs"), ("DS1-MIB", "dsx1FarEndCurrentSESs"), ("DS1-MIB", "dsx1FarEndCurrentSEFSs"), ("DS1-MIB", "dsx1FarEndCurrentUASs"), ("DS1-MIB", "dsx1FarEndCurrentCSSs"), ("DS1-MIB", "dsx1FarEndCurrentLESs"), ("DS1-MIB", "dsx1FarEndCurrentPCVs"), ("DS1-MIB", "dsx1FarEndCurrentBESs"), ("DS1-MIB", "dsx1FarEndInvalidIntervals"), ("DS1-MIB", "dsx1FarEndIntervalIndex"), ("DS1-MIB", "dsx1FarEndIntervalNumber"), ("DS1-MIB", "dsx1FarEndIntervalESs"), ("DS1-MIB", "dsx1FarEndIntervalSESs"), ("DS1-MIB", "dsx1FarEndIntervalSEFSs"), ("DS1-MIB", "dsx1FarEndIntervalUASs"), ("DS1-MIB", "dsx1FarEndIntervalCSSs"), ("DS1-MIB", "dsx1FarEndIntervalLESs"), ("DS1-MIB", "dsx1FarEndIntervalPCVs"), ("DS1-MIB", "dsx1FarEndIntervalBESs"), ("DS1-MIB", "dsx1FarEndIntervalValidData"), ("DS1-MIB", "dsx1FarEndTotalIndex"), ("DS1-MIB", "dsx1FarEndTotalESs"), ("DS1-MIB", "dsx1FarEndTotalSESs"), ("DS1-MIB", "dsx1FarEndTotalSEFSs"), ("DS1-MIB", "dsx1FarEndTotalUASs"), ("DS1-MIB", "dsx1FarEndTotalCSSs"), ("DS1-MIB", "dsx1FarEndTotalLESs"), ("DS1-MIB", "dsx1FarEndTotalPCVs"), ("DS1-MIB", "dsx1FarEndTotalBESs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds1FarEndNGroup = ds1FarEndNGroup.setStatus('current')
mibBuilder.exportSymbols("DS1-MIB", ds1NearEndOptionalConfigGroup=ds1NearEndOptionalConfigGroup, dsx1IntervalIndex=dsx1IntervalIndex, dsx1IntervalUASs=dsx1IntervalUASs, dsx1LineCoding=dsx1LineCoding, dsx1ValidIntervals=dsx1ValidIntervals, ds1NearEndConfigGroup=ds1NearEndConfigGroup, dsx1LoopbackConfig=dsx1LoopbackConfig, dsx1FarEndTotalSESs=dsx1FarEndTotalSESs, dsx1FarEndTotalEntry=dsx1FarEndTotalEntry, dsx1LineLength=dsx1LineLength, dsx1FarEndCurrentPCVs=dsx1FarEndCurrentPCVs, dsx1FarEndIntervalValidData=dsx1FarEndIntervalValidData, dsx1IfIndex=dsx1IfIndex, ds1NearEndCfgGroup=ds1NearEndCfgGroup, ds1NMibT1PriNCompliance=ds1NMibT1PriNCompliance, dsx1FarEndTotalIndex=dsx1FarEndTotalIndex, ds1Compliance=ds1Compliance, dsx1IntervalDMs=dsx1IntervalDMs, dsx1FarEndIntervalDMs=dsx1FarEndIntervalDMs, dsx1FarEndTotalCSSs=dsx1FarEndTotalCSSs, ds1Ds2Compliance=ds1Ds2Compliance, dsx1FarEndCurrentSEFSs=dsx1FarEndCurrentSEFSs, dsx1LineStatusLastChange=dsx1LineStatusLastChange, ds1NearEndConfigurationGroup=ds1NearEndConfigurationGroup, dsx1IntervalPCVs=dsx1IntervalPCVs, dsx1TotalCSSs=dsx1TotalCSSs, dsx1Fdl=dsx1Fdl, dsx1FarEndTotalESs=dsx1FarEndTotalESs, dsx1FarEndCurrentESs=dsx1FarEndCurrentESs, dsx1FarEndIntervalUASs=dsx1FarEndIntervalUASs, dsx1TotalLCVs=dsx1TotalLCVs, ds1FarEndNGroup=ds1FarEndNGroup, dsx1FarEndCurrentLESs=dsx1FarEndCurrentLESs, dsx1IntervalTable=dsx1IntervalTable, dsx1ChanMappingTable=dsx1ChanMappingTable, ds1MibE1PriNCompliance=ds1MibE1PriNCompliance, dsx1CurrentESs=dsx1CurrentESs, dsx1TotalESs=dsx1TotalESs, ds1DeprecatedGroup=ds1DeprecatedGroup, dsx1TotalSEFSs=dsx1TotalSEFSs, ds1NCompliance=ds1NCompliance, dsx1FarEndCurrentBESs=dsx1FarEndCurrentBESs, dsx1CurrentTable=dsx1CurrentTable, dsx1LineType=dsx1LineType, dsx1FarEndIntervalSESs=dsx1FarEndIntervalSESs, dsx1IntervalBESs=dsx1IntervalBESs, dsx1ConfigTable=dsx1ConfigTable, dsx1LineBuildOut=dsx1LineBuildOut, ds1J1Compliance=ds1J1Compliance, dsx1IntervalLCVs=dsx1IntervalLCVs, dsx1IntervalNumber=dsx1IntervalNumber, ds1MibT1PriCompliance=ds1MibT1PriCompliance, dsx1CurrentLCVs=dsx1CurrentLCVs, dsx1CurrentSESs=dsx1CurrentSESs, dsx1ChanMappedIfIndex=dsx1ChanMappedIfIndex, ds1=ds1, ds1MibE1PriCompliance=ds1MibE1PriCompliance, dsx1TotalSESs=dsx1TotalSESs, dsx1LineStatusChangeTrapEnable=dsx1LineStatusChangeTrapEnable, dsx1CurrentCSSs=dsx1CurrentCSSs, dsx1FracTable=dsx1FracTable, dsx1FarEndIntervalIndex=dsx1FarEndIntervalIndex, dsx1FracIndex=dsx1FracIndex, ds1NMibE1PriNCompliance=ds1NMibE1PriNCompliance, dsx1LineMode=dsx1LineMode, PYSNMP_MODULE_ID=ds1, dsx1FarEndCurrentDMs=dsx1FarEndCurrentDMs, dsx1CurrentDMs=dsx1CurrentDMs, dsx1Ds1ChannelNumber=dsx1Ds1ChannelNumber, dsx1LineImpedance=dsx1LineImpedance, dsx1FracEntry=dsx1FracEntry, dsx1FarEndIntervalCSSs=dsx1FarEndIntervalCSSs, dsx1FarEndTotalTable=dsx1FarEndTotalTable, dsx1IntervalESs=dsx1IntervalESs, ds1Compliances=ds1Compliances, ds1Traps=ds1Traps, dsx1FarEndCurrentCSSs=dsx1FarEndCurrentCSSs, dsx1FarEndCurrentTable=dsx1FarEndCurrentTable, dsx1FarEndTotalPCVs=dsx1FarEndTotalPCVs, dsx1FarEndCurrentUASs=dsx1FarEndCurrentUASs, ds1FarEndGroup=ds1FarEndGroup, dsx1FarEndIntervalESs=dsx1FarEndIntervalESs, dsx1TotalDMs=dsx1TotalDMs, dsx1LineStatus=dsx1LineStatus, dsx1IntervalValidData=dsx1IntervalValidData, dsx1FarEndCurrentSESs=dsx1FarEndCurrentSESs, dsx1FarEndTotalLESs=dsx1FarEndTotalLESs, dsx1LoopbackStatus=dsx1LoopbackStatus, ds1DS2Group=ds1DS2Group, dsx1ConfigEntry=dsx1ConfigEntry, dsx1CircuitIdentifier=dsx1CircuitIdentifier, dsx1FarEndTimeElapsed=dsx1FarEndTimeElapsed, dsx1LineStatusChange=dsx1LineStatusChange, dsx1FarEndCurrentEntry=dsx1FarEndCurrentEntry, dsx1LineIndex=dsx1LineIndex, dsx1TotalLESs=dsx1TotalLESs, dsx1SendCode=dsx1SendCode, dsx1CurrentPCVs=dsx1CurrentPCVs, dsx1CurrentBESs=dsx1CurrentBESs, dsx1FarEndIntervalLESs=dsx1FarEndIntervalLESs, dsx1TimeElapsed=dsx1TimeElapsed, dsx1TotalUASs=dsx1TotalUASs, dsx1TotalBESs=dsx1TotalBESs, dsx1FarEndIntervalBESs=dsx1FarEndIntervalBESs, dsx1FarEndIntervalEntry=dsx1FarEndIntervalEntry, ds1NearEndStatisticsGroup=ds1NearEndStatisticsGroup, dsx1CurrentIndex=dsx1CurrentIndex, dsx1FracNumber=dsx1FracNumber, dsx1TotalPCVs=dsx1TotalPCVs, dsx1FracIfIndex=dsx1FracIfIndex, dsx1FarEndInvalidIntervals=dsx1FarEndInvalidIntervals, dsx1FarEndTotalBESs=dsx1FarEndTotalBESs, dsx1FarEndTotalSEFSs=dsx1FarEndTotalSEFSs, ds1NearEndStatGroup=ds1NearEndStatGroup, ds1MibT1PriNCompliance=ds1MibT1PriNCompliance, ds1Groups=ds1Groups, dsx1IntervalCSSs=dsx1IntervalCSSs, dsx1IntervalSESs=dsx1IntervalSESs, dsx1TotalEntry=dsx1TotalEntry, ds1TransStatsGroup=ds1TransStatsGroup, dsx1IntervalEntry=dsx1IntervalEntry, dsx1FarEndCurrentIndex=dsx1FarEndCurrentIndex, dsx1CurrentEntry=dsx1CurrentEntry, dsx1CurrentLESs=dsx1CurrentLESs, dsx1FarEndIntervalNumber=dsx1FarEndIntervalNumber, ds1NearEndOptionalTrapGroup=ds1NearEndOptionalTrapGroup, dsx1FarEndIntervalPCVs=dsx1FarEndIntervalPCVs, dsx1TransmitClockSource=dsx1TransmitClockSource, dsx1ChanMappingEntry=dsx1ChanMappingEntry, dsx1FarEndValidIntervals=dsx1FarEndValidIntervals, dsx1CurrentUASs=dsx1CurrentUASs, dsx1IntervalLESs=dsx1IntervalLESs, dsx1InvalidIntervals=dsx1InvalidIntervals, dsx1CurrentSEFSs=dsx1CurrentSEFSs, dsx1FarEndIntervalSEFSs=dsx1FarEndIntervalSEFSs, dsx1FarEndTotalDMs=dsx1FarEndTotalDMs, dsx1IntervalSEFSs=dsx1IntervalSEFSs, dsx1TotalTable=dsx1TotalTable, dsx1SignalMode=dsx1SignalMode, dsx1FarEndTotalUASs=dsx1FarEndTotalUASs, dsx1Channelization=dsx1Channelization, dsx1FarEndIntervalTable=dsx1FarEndIntervalTable, ds1ChanMappingGroup=ds1ChanMappingGroup, dsx1TotalIndex=dsx1TotalIndex, ds1Conformance=ds1Conformance)
