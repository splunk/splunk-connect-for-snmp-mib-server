#
# PySNMP MIB module IBM-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Bits, Gauge32, IpAddress, ObjectIdentity, enterprises, Counter64, TimeTicks, MibIdentifier, Counter32, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Bits", "Gauge32", "IpAddress", "ObjectIdentity", "enterprises", "Counter64", "TimeTicks", "MibIdentifier", "Counter32", "Unsigned32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibmIROCroutinginterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17))
ibminterfaceClearTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1), )
if mibBuilder.loadTexts: ibminterfaceClearTable.setStatus('mandatory')
ibminterfaceClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibminterfaceClearEntry.setStatus('mandatory')
ibminterfaceClearInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearInOctets.setStatus('mandatory')
ibminterfaceClearInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearInUcastPkts.setStatus('mandatory')
ibminterfaceClearInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearInMulticastPkts.setStatus('mandatory')
ibminterfaceClearInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearInErrors.setStatus('mandatory')
ibminterfaceClearInAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearInAll.setStatus('mandatory')
ibminterfaceClearOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearOutOctets.setStatus('mandatory')
ibminterfaceClearOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearOutUcastPkts.setStatus('mandatory')
ibminterfaceClearOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearOutMulticastPkts.setStatus('mandatory')
ibminterfaceClearOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearOutErrors.setStatus('mandatory')
ibminterfaceClearOutAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearOutAll.setStatus('mandatory')
ibminterfaceClearMaintTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearMaintTest.setStatus('mandatory')
ibminterfaceClearDeviceSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearDeviceSpecific.setStatus('mandatory')
ibminterfaceClearAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibminterfaceClearAll.setStatus('mandatory')
mibBuilder.exportSymbols("IBM-INTERFACE-MIB", ibminterfaceClearDeviceSpecific=ibminterfaceClearDeviceSpecific, ibminterfaceClearOutAll=ibminterfaceClearOutAll, ibminterfaceClearInAll=ibminterfaceClearInAll, ibminterfaceClearEntry=ibminterfaceClearEntry, ibminterfaceClearInUcastPkts=ibminterfaceClearInUcastPkts, ibminterfaceClearTable=ibminterfaceClearTable, ibmIROCroutinginterface=ibmIROCroutinginterface, ibminterfaceClearInOctets=ibminterfaceClearInOctets, ibminterfaceClearInErrors=ibminterfaceClearInErrors, ibminterfaceClearOutOctets=ibminterfaceClearOutOctets, ibminterfaceClearOutUcastPkts=ibminterfaceClearOutUcastPkts, ibminterfaceClearOutMulticastPkts=ibminterfaceClearOutMulticastPkts, ibminterfaceClearMaintTest=ibminterfaceClearMaintTest, ibminterfaceClearInMulticastPkts=ibminterfaceClearInMulticastPkts, ibminterfaceClearOutErrors=ibminterfaceClearOutErrors, ibminterfaceClearAll=ibminterfaceClearAll)
