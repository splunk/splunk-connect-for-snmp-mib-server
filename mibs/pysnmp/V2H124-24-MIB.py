#
# PySNMP MIB module V2H124-24-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/V2H124-24-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
BridgeId, dot1dStpPortEntry, dot1dStpPort, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "dot1dStpPortEntry", "dot1dStpPort", "Timeout")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, MibIdentifier, Unsigned32, Gauge32, Integer32, IpAddress, Counter32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Gauge32", "Integer32", "IpAddress", "Counter32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "ModuleIdentity", "Bits")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
v2h124_24MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 12, 30)).setLabel("v2h124-24MIB")
v2h124_24MIB.setRevisions(('2004-01-21 20:31', '2003-12-12 17:04', '2003-07-25 19:59', '2003-07-18 21:42', '2003-12-06 00:00',))
if mibBuilder.loadTexts: v2h124_24MIB.setLastUpdated('200401212031Z')
if mibBuilder.loadTexts: v2h124_24MIB.setOrganization('Enterasys Networks, Inc')
v2h124_24MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1)).setLabel("v2h124-24MIBObjects")
v2h124_24Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 2)).setLabel("v2h124-24Notifications")
v2h124_24Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 3)).setLabel("v2h124-24Conformance")
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10))
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 14))
qosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 19))
lineMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24))
class ValidStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

switchManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchManagementVlan.setStatus('current')
v2h124switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124switchNumber.setStatus('current')
v2h124switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3), )
if mibBuilder.loadTexts: v2h124switchInfoTable.setStatus('current')
v2h124switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1), ).setIndexNames((0, "V2H124-24-MIB", "v2h124swUnitIndex"))
if mibBuilder.loadTexts: v2h124switchInfoEntry.setStatus('current')
v2h124swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: v2h124swUnitIndex.setStatus('current')
v2h124swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swHardwareVer.setStatus('current')
v2h124swMicrocodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swMicrocodeVer.setStatus('current')
v2h124swLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swLoaderVer.setStatus('current')
v2h124swBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swBootRomVer.setStatus('current')
v2h124swOpCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swOpCodeVer.setStatus('current')
v2h124swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swPortNumber.setStatus('current')
v2h124swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swPowerStatus.setStatus('current')
v2h124swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swRoleInSystem.setStatus('current')
v2h124swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swSerialNumber.setStatus('current')
v2h124swExpansionSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notPresent", 1), ("other", 2), ("hundredBaseFxScMmf", 3), ("hundredBaseFxScSmf", 4), ("hundredBaseFxMtrjMmf", 5), ("thousandBaseSxScMmf", 6), ("thousandBaseSxMtrjMmf", 7), ("thousandBaseXGbic", 8), ("thousandBaseLxScSmf", 9), ("thousandBaseT", 10), ("stackingModule", 11), ("thousandBaseSfp", 12), ("tenHundredBaseT4port", 13), ("tenHundredBaseFxMtrj4port", 14), ("comboStackingSfp", 15), ("tenHundredBaseT", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swExpansionSlot1.setStatus('current')
v2h124swExpansionSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notPresent", 1), ("other", 2), ("hundredBaseFxScMmf", 3), ("hundredBaseFxScSmf", 4), ("hundredBaseFxMtrjMmf", 5), ("thousandBaseSxScMmf", 6), ("thousandBaseSxMtrjMmf", 7), ("thousandBaseXGbic", 8), ("thousandBaseLxScSmf", 9), ("thousandBaseT", 10), ("stackingModule", 11), ("thousandBaseSfp", 12), ("tenHundredBaseT4port", 13), ("tenHundredBaseFxMtrj4port", 14), ("comboStackingSfp", 15), ("tenHundredBaseT", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swExpansionSlot2.setStatus('current')
v2h124swServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2h124swServiceTag.setStatus('current')
switchOperState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchOperState.setStatus('current')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 5))
swProdName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
swProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdVersion.setStatus('current')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
swChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisServiceTag.setStatus('current')
switchIndivPowerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 6), )
if mibBuilder.loadTexts: switchIndivPowerTable.setStatus('current')
switchIndivPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 6, 1), ).setIndexNames((0, "V2H124-24-MIB", "swIndivPowerUnitIndex"), (0, "V2H124-24-MIB", "swIndivPowerIndex"))
if mibBuilder.loadTexts: switchIndivPowerEntry.setStatus('current')
swIndivPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setStatus('current')
swIndivPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalPower", 1), ("externalPower", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerIndex.setStatus('current')
swIndivPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("green", 2), ("red", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerStatus.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3, 3, 1), ).setIndexNames((0, "V2H124-24-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 3, 3, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 4, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 4, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setStatus('current')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2, 1), )
dot1dStpPortEntry.registerAugmentions(("V2H124-24-MIB", "staPortEntry"))
staPortEntry.setIndexNames(*dot1dStpPortEntry.getIndexNames())
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
staPortFastForward = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortFastForward.setStatus('current')
staPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortProtocolMigration.setStatus('current')
staPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePort.setStatus('current')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
staPortLongPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongPathCost.setStatus('current')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
staTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTxHoldCount.setStatus('current')
staPathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPathCostMethod.setStatus('current')
xstMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6))
xstInstanceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4), )
if mibBuilder.loadTexts: xstInstanceCfgTable.setStatus('current')
xstInstanceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1), ).setIndexNames((0, "V2H124-24-MIB", "xstInstanceCfgIndex"))
if mibBuilder.loadTexts: xstInstanceCfgEntry.setStatus('current')
xstInstanceCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: xstInstanceCfgIndex.setStatus('current')
xstInstanceCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstanceCfgPriority.setStatus('current')
xstInstanceCfgTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setStatus('current')
xstInstanceCfgTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setStatus('current')
xstInstanceCfgDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setStatus('current')
xstInstanceCfgRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setStatus('current')
xstInstanceCfgRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setStatus('current')
xstInstanceCfgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setStatus('current')
xstInstanceCfgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setStatus('current')
xstInstanceCfgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setStatus('current')
xstInstanceCfgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setStatus('current')
xstInstanceCfgBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setStatus('current')
xstInstanceCfgBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setStatus('current')
xstInstanceCfgBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setStatus('current')
xstInstanceCfgTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setStatus('current')
xstInstanceCfgPathCostMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setStatus('current')
xstInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5), )
if mibBuilder.loadTexts: xstInstancePortTable.setStatus('current')
xstInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1), ).setIndexNames((0, "V2H124-24-MIB", "xstInstanceCfgIndex"), (0, "BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: xstInstancePortEntry.setStatus('current')
xstInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPriority.setStatus('current')
xstInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortState.setStatus('current')
xstInstancePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortEnable.setStatus('current')
xstInstancePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPathCost.setStatus('current')
xstInstancePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setStatus('current')
xstInstancePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setStatus('current')
xstInstancePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setStatus('current')
xstInstancePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setStatus('current')
xstInstancePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setStatus('current')
xstInstancePortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 5, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPortRole.setStatus('current')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
restartConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfigFile.setStatus('current')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 8, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 8, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "mirrorDestinationPort"), (0, "V2H124-24-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 8, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
mirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 8, 1, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorStatus.setStatus('current')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 2), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
igmpSnoopQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryCount.setStatus('current')
igmpSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setStatus('current')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('current')
igmpSnoopRouterPortExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopRouterPortExpireTime.setStatus('current')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 8, 1), ).setIndexNames((0, "V2H124-24-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
igmpSnoopRouterCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 8, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setStatus('current')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 9, 1), ).setIndexNames((0, "V2H124-24-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
igmpSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 9, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setStatus('current')
igmpSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 10), )
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setStatus('current')
igmpSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 10, 1), ).setIndexNames((0, "V2H124-24-MIB", "igmpSnoopMulticastCurrentVlanIndex"), (0, "V2H124-24-MIB", "igmpSnoopMulticastCurrentIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setStatus('current')
igmpSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setStatus('current')
igmpSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setStatus('current')
igmpSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 10, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setStatus('current')
igmpSnoopMulticastCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 10, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentStatus.setStatus('current')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 11, 1), ).setIndexNames((0, "V2H124-24-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "V2H124-24-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
igmpSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 9, 11, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setStatus('current')
netConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 1), )
if mibBuilder.loadTexts: netConfigTable.setStatus('current')
netConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "netConfigIfIndex"), (0, "V2H124-24-MIB", "netConfigIPAddress"), (0, "V2H124-24-MIB", "netConfigSubnetMask"))
if mibBuilder.loadTexts: netConfigEntry.setStatus('current')
netConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: netConfigIfIndex.setStatus('current')
netConfigIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
netConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
netConfigPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigPrimaryInterface.setStatus('current')
netConfigUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unnumbered", 1), ("notUnnumbered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigUnnumbered.setStatus('current')
netConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigStatus.setStatus('current')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
ipDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpRestart.setStatus('current')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
bcastStormSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pkt-rate", 1), ("octet-rate", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormSampleType.setStatus('current')
bcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPktRate.setStatus('current')
bcastStormOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormOctetRate.setStatus('current')
bcastStormPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPercent.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12, 2), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12, 2, 1), ).setIndexNames((0, "V2H124-24-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hybrid", 1), ("dot1qTrunk", 2), ("access", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
prioIpPrecDscpStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("precedence", 2), ("dscp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecDscpStatus.setStatus('current')
prioIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 2), )
if mibBuilder.loadTexts: prioIpPrecTable.setStatus('current')
prioIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 2, 1), ).setIndexNames((0, "V2H124-24-MIB", "prioIpPrecPort"), (0, "V2H124-24-MIB", "prioIpPrecValue"))
if mibBuilder.loadTexts: prioIpPrecEntry.setStatus('current')
prioIpPrecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: prioIpPrecPort.setStatus('current')
prioIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioIpPrecValue.setStatus('current')
prioIpPrecCos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecCos.setStatus('current')
prioIpPrecRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecRestoreDefault.setStatus('current')
prioIpDscpTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 4), )
if mibBuilder.loadTexts: prioIpDscpTable.setStatus('current')
prioIpDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 4, 1), ).setIndexNames((0, "V2H124-24-MIB", "prioIpDscpPort"), (0, "V2H124-24-MIB", "prioIpDscpValue"))
if mibBuilder.loadTexts: prioIpDscpEntry.setStatus('current')
prioIpDscpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpDscpPort.setStatus('current')
prioIpDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: prioIpDscpValue.setStatus('current')
prioIpDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpCos.setStatus('current')
prioIpDscpRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpRestoreDefault.setStatus('current')
prioIpPortEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPortEnableStatus.setStatus('current')
prioIpPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 7), )
if mibBuilder.loadTexts: prioIpPortTable.setStatus('current')
prioIpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 7, 1), ).setIndexNames((0, "V2H124-24-MIB", "prioIpPortPhysPort"), (0, "V2H124-24-MIB", "prioIpPortValue"))
if mibBuilder.loadTexts: prioIpPortEntry.setStatus('current')
prioIpPortPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpPortPhysPort.setStatus('current')
prioIpPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: prioIpPortValue.setStatus('current')
prioIpPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortCos.setStatus('current')
prioIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 7, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortStatus.setStatus('current')
prioCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 8))
prioCopyIpPrec = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPrec.setStatus('current')
prioCopyIpDscp = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpDscp.setStatus('current')
prioCopyIpPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPort.setStatus('current')
prioWrrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 9), )
if mibBuilder.loadTexts: prioWrrTable.setStatus('current')
prioWrrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 9, 1), ).setIndexNames((0, "V2H124-24-MIB", "prioWrrTrafficClass"))
if mibBuilder.loadTexts: prioWrrEntry.setStatus('current')
prioWrrTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrTrafficClass.setStatus('current')
prioWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrWeight.setStatus('current')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 14, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 14, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "trapDestAddress"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 14, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 14, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1))
rateLimitStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateLimitStatus.setStatus('current')
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1, 2), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1, 2, 1), ).setIndexNames((0, "V2H124-24-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
rlPortInputLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputLimit.setStatus('current')
rlPortOutputLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputLimit.setStatus('current')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1, 2, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 1, 2, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
markerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2))
markerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1), )
if mibBuilder.loadTexts: markerTable.setStatus('current')
markerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "markerIfIndex"), (0, "V2H124-24-MIB", "markerAclName"))
if mibBuilder.loadTexts: markerEntry.setStatus('current')
markerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: markerIfIndex.setStatus('current')
markerAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: markerAclName.setStatus('current')
markerActionBitList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("dscp", 0), ("precedence", 1), ("priority", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerActionBitList.setStatus('current')
markerDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerDscp.setStatus('current')
markerPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerPrecedence.setStatus('current')
markerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerPriority.setStatus('current')
markerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerStatus.setStatus('current')
cosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 3))
prioAclToCosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 3, 1), )
if mibBuilder.loadTexts: prioAclToCosMappingTable.setStatus('current')
prioAclToCosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 3, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "prioAclToCosMappingIfIndex"), (0, "V2H124-24-MIB", "prioAclToCosMappingAclName"))
if mibBuilder.loadTexts: prioAclToCosMappingEntry.setStatus('current')
prioAclToCosMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: prioAclToCosMappingIfIndex.setStatus('current')
prioAclToCosMappingAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: prioAclToCosMappingAclName.setStatus('current')
prioAclToCosMappingCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingCosValue.setStatus('current')
prioAclToCosMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 16, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingStatus.setStatus('current')
portSecurityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 2))
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 4))
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 5))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6))
aclMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7))
portSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 2, 1), )
if mibBuilder.loadTexts: portSecPortTable.setStatus('current')
portSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 2, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "portSecPortIndex"))
if mibBuilder.loadTexts: portSecPortEntry.setStatus('current')
portSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portSecPortIndex.setStatus('current')
portSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecPortStatus.setStatus('current')
portSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("shutdown", 3), ("trapAndShutdown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAction.setStatus('current')
portSecMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMaxMacCount.setStatus('current')
radiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
radiusServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPortNumber.setStatus('current')
radiusServerKey = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
radiusServerRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
radiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
tacacsServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerAddress.setStatus('current')
tacacsServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerPortNumber.setStatus('current')
tacacsServerKey = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerKey.setStatus('current')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6, 1), ).setIndexNames((0, "V2H124-24-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: sshConnID.setStatus('current')
sshConnMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMajorVersion.setStatus('current')
sshConnMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMinorVersion.setStatus('current')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
sshConnEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("tribeDes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnEncryptionType.setStatus('current')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
sshDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisconnect", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshDisconnect.setStatus('current')
aclIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1), )
if mibBuilder.loadTexts: aclIpAceTable.setStatus('current')
aclIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "aclIpAceName"), (0, "V2H124-24-MIB", "aclIpAceIndex"))
if mibBuilder.loadTexts: aclIpAceEntry.setStatus('current')
aclIpAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclIpAceName.setStatus('current')
aclIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclIpAceIndex.setStatus('current')
aclIpAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpAcePrecedence.setStatus('current')
aclIpAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceAction.setStatus('current')
aclIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddr.setStatus('current')
aclIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddrBitmask.setStatus('current')
aclIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddr.setStatus('current')
aclIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddrBitmask.setStatus('current')
aclIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceProtocol.setStatus('current')
aclIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAcePrec.setStatus('current')
aclIpAceTos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceTos.setStatus('current')
aclIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDscp.setStatus('current')
aclIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourcePortOp.setStatus('current')
aclIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinSourcePort.setStatus('current')
aclIpAceMaxSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxSourcePort.setStatus('current')
aclIpAceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourcePortBitmask.setStatus('current')
aclIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestPortOp.setStatus('current')
aclIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinDestPort.setStatus('current')
aclIpAceMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxDestPort.setStatus('current')
aclIpAceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestPortBitmask.setStatus('current')
aclIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCode.setStatus('current')
aclIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCodeBitmask.setStatus('current')
aclIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceStatus.setStatus('current')
aclMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2), )
if mibBuilder.loadTexts: aclMacAceTable.setStatus('current')
aclMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1), ).setIndexNames((0, "V2H124-24-MIB", "aclMacAceName"), (0, "V2H124-24-MIB", "aclMacAceIndex"))
if mibBuilder.loadTexts: aclMacAceEntry.setStatus('current')
aclMacAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclMacAceName.setStatus('current')
aclMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclMacAceIndex.setStatus('current')
aclMacAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacAcePrecedence.setStatus('current')
aclMacAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceAction.setStatus('current')
aclMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAcePktformat.setStatus('current')
aclMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddr.setStatus('current')
aclMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddrBitmask.setStatus('current')
aclMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddr.setStatus('current')
aclMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddrBitmask.setStatus('current')
aclMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceVidOp.setStatus('current')
aclMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinVid.setStatus('current')
aclMacAceVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceVidBitmask.setStatus('current')
aclMacAceMaxVid = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxVid.setStatus('current')
aclMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceEtherTypeOp.setStatus('current')
aclMacAceEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceEtherTypeBitmask.setStatus('current')
aclMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinEtherType.setStatus('current')
aclMacAceMaxEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxEtherType.setStatus('current')
aclMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceStatus.setStatus('current')
aclAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 3), )
if mibBuilder.loadTexts: aclAclGroupTable.setStatus('current')
aclAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 3, 1), ).setIndexNames((0, "V2H124-24-MIB", "aclAclGroupIfIndex"))
if mibBuilder.loadTexts: aclAclGroupEntry.setStatus('current')
aclAclGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aclAclGroupIfIndex.setStatus('current')
aclAclGroupIngressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressIpAcl.setStatus('current')
aclAclGroupEgressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressIpAcl.setStatus('current')
aclAclGroupIngressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressMacAcl.setStatus('current')
aclAclGroupEgressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressMacAcl.setStatus('current')
aclIngressIpMaskTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4), )
if mibBuilder.loadTexts: aclIngressIpMaskTable.setStatus('current')
aclIngressIpMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1), ).setIndexNames((0, "V2H124-24-MIB", "aclIngressIpMaskIndex"))
if mibBuilder.loadTexts: aclIngressIpMaskEntry.setStatus('current')
aclIngressIpMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclIngressIpMaskIndex.setStatus('current')
aclIngressIpMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIngressIpMaskPrecedence.setStatus('current')
aclIngressIpMaskIsEnableTos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 3), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableTos.setStatus('current')
aclIngressIpMaskIsEnableDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 4), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableDscp.setStatus('current')
aclIngressIpMaskIsEnablePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 5), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnablePrecedence.setStatus('current')
aclIngressIpMaskIsEnableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableProtocol.setStatus('current')
aclIngressIpMaskSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskSourceIpAddrBitmask.setStatus('current')
aclIngressIpMaskDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskDestIpAddrBitmask.setStatus('current')
aclIngressIpMaskSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskSourcePortBitmask.setStatus('current')
aclIngressIpMaskDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskDestPortBitmask.setStatus('current')
aclIngressIpMaskControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskControlCodeBitmask.setStatus('current')
aclIngressIpMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskStatus.setStatus('current')
aclEgressIpMaskTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5), )
if mibBuilder.loadTexts: aclEgressIpMaskTable.setStatus('current')
aclEgressIpMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1), ).setIndexNames((0, "V2H124-24-MIB", "aclEgressIpMaskIndex"))
if mibBuilder.loadTexts: aclEgressIpMaskEntry.setStatus('current')
aclEgressIpMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclEgressIpMaskIndex.setStatus('current')
aclEgressIpMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEgressIpMaskPrecedence.setStatus('current')
aclEgressIpMaskIsEnableTos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 3), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableTos.setStatus('current')
aclEgressIpMaskIsEnableDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 4), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableDscp.setStatus('current')
aclEgressIpMaskIsEnablePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 5), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnablePrecedence.setStatus('current')
aclEgressIpMaskIsEnableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableProtocol.setStatus('current')
aclEgressIpMaskSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskSourceIpAddrBitmask.setStatus('current')
aclEgressIpMaskDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskDestIpAddrBitmask.setStatus('current')
aclEgressIpMaskSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskSourcePortBitmask.setStatus('current')
aclEgressIpMaskDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskDestPortBitmask.setStatus('current')
aclEgressIpMaskControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskControlCodeBitmask.setStatus('current')
aclEgressIpMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 5, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskStatus.setStatus('current')
aclIngressMacMaskTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6), )
if mibBuilder.loadTexts: aclIngressMacMaskTable.setStatus('current')
aclIngressMacMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1), ).setIndexNames((0, "V2H124-24-MIB", "aclIngressMacMaskIndex"))
if mibBuilder.loadTexts: aclIngressMacMaskEntry.setStatus('current')
aclIngressMacMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclIngressMacMaskIndex.setStatus('current')
aclIngressMacMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIngressMacMaskPrecedence.setStatus('current')
aclIngressMacMaskSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskSourceMacAddrBitmask.setStatus('current')
aclIngressMacMaskDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskDestMacAddrBitmask.setStatus('current')
aclIngressMacMaskVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskVidBitmask.setStatus('current')
aclIngressMacMaskEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskEtherTypeBitmask.setStatus('current')
aclIngressMacMaskIsEnablePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1, 7), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskIsEnablePktformat.setStatus('current')
aclIngressMacMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskStatus.setStatus('current')
aclEgressMacMaskTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7), )
if mibBuilder.loadTexts: aclEgressMacMaskTable.setStatus('current')
aclEgressMacMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1), ).setIndexNames((0, "V2H124-24-MIB", "aclEgressMacMaskIndex"))
if mibBuilder.loadTexts: aclEgressMacMaskEntry.setStatus('current')
aclEgressMacMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclEgressMacMaskIndex.setStatus('current')
aclEgressMacMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEgressMacMaskPrecedence.setStatus('current')
aclEgressMacMaskSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskSourceMacAddrBitmask.setStatus('current')
aclEgressMacMaskDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskDestMacAddrBitmask.setStatus('current')
aclEgressMacMaskVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskVidBitmask.setStatus('current')
aclEgressMacMaskEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskEtherTypeBitmask.setStatus('current')
aclEgressMacMaskIsEnablePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1, 7), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskIsEnablePktformat.setStatus('current')
aclEgressMacMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 17, 7, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskStatus.setStatus('current')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 19, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
consoleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 1))
telnetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 2))
consoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits7", 1), ("databits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDataBits.setStatus('current')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partyNone", 1), ("partyEven", 2), ("partyOdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
consoleBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baudRate9600", 1), ("baudRate19200", 2), ("baudRate38400", 3), ("baudRate57600", 4), ("baudRate115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleBaudRate.setStatus('current')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits1", 1), ("stopbits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
consoleExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleExecTimeout.setStatus('current')
consolePasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePasswordThreshold.setStatus('current')
consoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSilentTime.setStatus('current')
telnetExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetExecTimeout.setStatus('current')
telnetPasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPasswordThreshold.setStatus('current')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 1))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
sntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("broadcast", 2), ("anycast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServiceMode.setStatus('current')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 1, 4), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 1, 4, 1), ).setIndexNames((0, "V2H124-24-MIB", "sntpServerIndex"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sntpServerIndex.setStatus('current')
sntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerIpAddress.setStatus('current')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 23, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
fileCopyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1))
fileCopySrcOperType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcOperType.setStatus('current')
fileCopySrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcFileName.setStatus('current')
fileCopyDestOperType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestOperType.setStatus('current')
fileCopyDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestFileName.setStatus('current')
fileCopyFileType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2), ("bootRom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyFileType.setStatus('current')
fileCopyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyTftpServer.setStatus('current')
fileCopyUnitId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUnitId.setStatus('current')
fileCopyAction = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyAction.setStatus('current')
fileCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyStatus.setStatus('current')
fileCopyTftpErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyTftpErrMsg.setStatus('current')
fileCopyTftpServerHostName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyTftpServerHostName.setStatus('current')
fileInfoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2))
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1, 1), ).setIndexNames((0, "V2H124-24-MIB", "fileInfoUnitID"), (1, "V2H124-24-MIB", "fileInfoFileName"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("diag", 1), ("runtime", 2), ("syslog", 3), ("cmdlog", 4), ("config", 5), ("postlog", 6), ("private", 7), ("certificate", 8), ("webarchive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 1, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
v2h124_24Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 2, 1)).setLabel("v2h124-24Traps")
v2h124_24TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 2, 1, 0)).setLabel("v2h124-24TrapsPrefix")
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 12, 30, 2, 1, 0, 1)).setObjects(("V2H124-24-MIB", "swIndivPowerUnitIndex"), ("V2H124-24-MIB", "swIndivPowerIndex"), ("V2H124-24-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
mibBuilder.exportSymbols("V2H124-24-MIB", igmpSnoopMulticastCurrentTable=igmpSnoopMulticastCurrentTable, aclIpAceControlCodeBitmask=aclIpAceControlCodeBitmask, aclMacAceDestMacAddr=aclMacAceDestMacAddr, fileMgt=fileMgt, netConfigStatus=netConfigStatus, staPortAdminEdgePort=staPortAdminEdgePort, telnetMgt=telnetMgt, sysTimeMgt=sysTimeMgt, aclMacAceTable=aclMacAceTable, radiusMgt=radiusMgt, aclIngressIpMaskControlCodeBitmask=aclIngressIpMaskControlCodeBitmask, aclIpAceDestIpAddrBitmask=aclIpAceDestIpAddrBitmask, aclIngressMacMaskVidBitmask=aclIngressMacMaskVidBitmask, staPortTable=staPortTable, xstInstancePortPathCost=xstInstancePortPathCost, prioCopyIpPort=prioCopyIpPort, markerEntry=markerEntry, fileCopyTftpServerHostName=fileCopyTftpServerHostName, swProdDescription=swProdDescription, netConfigEntry=netConfigEntry, aclAclGroupEgressIpAcl=aclAclGroupEgressIpAcl, xstInstancePortPortRole=xstInstancePortPortRole, aclIngressIpMaskDestIpAddrBitmask=aclIngressIpMaskDestIpAddrBitmask, aclIngressIpMaskTable=aclIngressIpMaskTable, bcastStormMgt=bcastStormMgt, xstInstanceCfgTimeSinceTopologyChange=xstInstanceCfgTimeSinceTopologyChange, prioIpPrecRestoreDefault=prioIpPrecRestoreDefault, prioIpDscpPort=prioIpDscpPort, sntpServerIndex=sntpServerIndex, portIndex=portIndex, aclMgt=aclMgt, aclIngressIpMaskIsEnablePrecedence=aclIngressIpMaskIsEnablePrecedence, fileInfoFileSize=fileInfoFileSize, igmpSnoopRouterStaticStatus=igmpSnoopRouterStaticStatus, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, xstInstanceCfgPathCostMethod=xstInstanceCfgPathCostMethod, aclAclGroupIfIndex=aclAclGroupIfIndex, aclEgressIpMaskSourcePortBitmask=aclEgressIpMaskSourcePortBitmask, aclIngressIpMaskEntry=aclIngressIpMaskEntry, v2h124swPortNumber=v2h124swPortNumber, switchOperState=switchOperState, trunkTable=trunkTable, portCapabilities=portCapabilities, aclIpAceSourcePortBitmask=aclIpAceSourcePortBitmask, xstInstanceCfgTxHoldCount=xstInstanceCfgTxHoldCount, vlanPortTable=vlanPortTable, swPowerStatusChangeTrap=swPowerStatusChangeTrap, rlPortOutputLimit=rlPortOutputLimit, portTable=portTable, aclMacAceAction=aclMacAceAction, igmpSnoopRouterCurrentStatus=igmpSnoopRouterCurrentStatus, fileInfoMgt=fileInfoMgt, igmpSnoopMulticastCurrentStatus=igmpSnoopMulticastCurrentStatus, prioAclToCosMappingAclName=prioAclToCosMappingAclName, vlanTable=vlanTable, sshServerMajorVersion=sshServerMajorVersion, rlPortOutputStatus=rlPortOutputStatus, trunkCreation=trunkCreation, rateLimitPortTable=rateLimitPortTable, markerPriority=markerPriority, ipHttpPort=ipHttpPort, trunkStatus=trunkStatus, vlanAddressMethod=vlanAddressMethod, v2h124switchInfoEntry=v2h124switchInfoEntry, igmpSnoopMulticastCurrentEntry=igmpSnoopMulticastCurrentEntry, xstInstanceCfgBridgeHelloTime=xstInstanceCfgBridgeHelloTime, aclEgressIpMaskEntry=aclEgressIpMaskEntry, fileCopyTftpErrMsg=fileCopyTftpErrMsg, aclEgressMacMaskVidBitmask=aclEgressMacMaskVidBitmask, aclIngressIpMaskDestPortBitmask=aclIngressIpMaskDestPortBitmask, sshConnStatus=sshConnStatus, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, aclIpAceMaxSourcePort=aclIpAceMaxSourcePort, prioAclToCosMappingIfIndex=prioAclToCosMappingIfIndex, aclMacAceSourceMacAddr=aclMacAceSourceMacAddr, aclIngressIpMaskIsEnableDscp=aclIngressIpMaskIsEnableDscp, sshDisconnect=sshDisconnect, swProdUrl=swProdUrl, aclEgressIpMaskIsEnableProtocol=aclEgressIpMaskIsEnableProtocol, fileCopyAction=fileCopyAction, aclIpAcePrecedence=aclIpAcePrecedence, aclAclGroupEntry=aclAclGroupEntry, fileInfoCreationTime=fileInfoCreationTime, v2h124swLoaderVer=v2h124swLoaderVer, aclIngressIpMaskPrecedence=aclIngressIpMaskPrecedence, aclMacAceStatus=aclMacAceStatus, aclMacAceMaxVid=aclMacAceMaxVid, aclMacAceVidBitmask=aclMacAceVidBitmask, sshConnMinorVersion=sshConnMinorVersion, staSystemStatus=staSystemStatus, bcastStormPercent=bcastStormPercent, sntpPollInterval=sntpPollInterval, aclEgressIpMaskTable=aclEgressIpMaskTable, aclIngressIpMaskStatus=aclIngressIpMaskStatus, prioIpPortTable=prioIpPortTable, aclIngressMacMaskIndex=aclIngressMacMaskIndex, swIndivPowerIndex=swIndivPowerIndex, staPortLongPathCost=staPortLongPathCost, aclEgressIpMaskStatus=aclEgressIpMaskStatus, fileInfoEntry=fileInfoEntry, fileInfoDelete=fileInfoDelete, lacpPortTable=lacpPortTable, sntpStatus=sntpStatus, igmpSnoopQueryInterval=igmpSnoopQueryInterval, swIdentifier=swIdentifier, igmpSnoopRouterPortExpireTime=igmpSnoopRouterPortExpireTime, netConfigIPAddress=netConfigIPAddress, aclIpAceDestPortBitmask=aclIpAceDestPortBitmask, sshTimeout=sshTimeout, aclIpAceSourceIpAddrBitmask=aclIpAceSourceIpAddrBitmask, lacpPortEntry=lacpPortEntry, aclIpAceControlCode=aclIpAceControlCode, aclMacAceDestMacAddrBitmask=aclMacAceDestMacAddrBitmask, prioIpPortEntry=prioIpPortEntry, prioWrrTable=prioWrrTable, portSecMaxMacCount=portSecMaxMacCount, mirrorStatus=mirrorStatus, mirrorType=mirrorType, rlPortIndex=rlPortIndex, rlPortInputStatus=rlPortInputStatus, lacpPortIndex=lacpPortIndex, xstInstanceCfgRootCost=xstInstanceCfgRootCost, aclMacAcePktformat=aclMacAcePktformat, aclIngressIpMaskIsEnableTos=aclIngressIpMaskIsEnableTos, vlanPortMode=vlanPortMode, markerStatus=markerStatus, portSecurityMgt=portSecurityMgt, igmpSnoopMulticastCurrentVlanIndex=igmpSnoopMulticastCurrentVlanIndex, radiusServerAddress=radiusServerAddress, mirrorMgt=mirrorMgt, prioIpPrecCos=prioIpPrecCos, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, switchIndivPowerEntry=switchIndivPowerEntry, staPortEntry=staPortEntry, trapDestAddress=trapDestAddress, staPortAdminPointToPoint=staPortAdminPointToPoint, markerAclName=markerAclName, aclMacAceMinVid=aclMacAceMinVid, sntpServerIpAddress=sntpServerIpAddress, aclEgressMacMaskEtherTypeBitmask=aclEgressMacMaskEtherTypeBitmask, aclEgressIpMaskIndex=aclEgressIpMaskIndex, prioIpPortEnableStatus=prioIpPortEnableStatus, xstInstancePortDesignatedCost=xstInstancePortDesignatedCost, portSecPortIndex=portSecPortIndex, sysLogMgt=sysLogMgt, aclEgressMacMaskIsEnablePktformat=aclEgressMacMaskIsEnablePktformat, telnetPasswordThreshold=telnetPasswordThreshold, xstInstanceCfgTable=xstInstanceCfgTable, v2h124_24MIBObjects=v2h124_24MIBObjects, aclEgressIpMaskSourceIpAddrBitmask=aclEgressIpMaskSourceIpAddrBitmask, fileInfoUnitID=fileInfoUnitID, prioIpPortStatus=prioIpPortStatus, mirrorSourcePort=mirrorSourcePort, igmpSnoopMulticastCurrentPorts=igmpSnoopMulticastCurrentPorts, aclIpAceAction=aclIpAceAction, radiusServerPortNumber=radiusServerPortNumber, v2h124switchNumber=v2h124switchNumber, aclEgressMacMaskEntry=aclEgressMacMaskEntry, aclEgressMacMaskSourceMacAddrBitmask=aclEgressMacMaskSourceMacAddrBitmask, staPortFastForward=staPortFastForward, igmpSnoopStatus=igmpSnoopStatus, sshConnUserName=sshConnUserName, xstInstanceCfgEntry=xstInstanceCfgEntry, aclIngressMacMaskEntry=aclIngressMacMaskEntry, portFlowCtrlCfg=portFlowCtrlCfg, trunkIndex=trunkIndex, aclEgressMacMaskTable=aclEgressMacMaskTable, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, trunkPorts=trunkPorts, v2h124_24Traps=v2h124_24Traps, markerTable=markerTable, fileInfoIsStartUp=fileInfoIsStartUp, xstInstanceCfgHelloTime=xstInstanceCfgHelloTime, vlanPortEntry=vlanPortEntry, sysTimeZoneName=sysTimeZoneName, fileCopyDestOperType=fileCopyDestOperType, v2h124_24MIB=v2h124_24MIB, lacpPortStatus=lacpPortStatus, consolePasswordThreshold=consolePasswordThreshold, fileInfoTable=fileInfoTable, aclIpAceStatus=aclIpAceStatus, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, xstInstancePortEntry=xstInstancePortEntry, markerActionBitList=markerActionBitList, staTxHoldCount=staTxHoldCount, sshConnMajorVersion=sshConnMajorVersion, v2h124swSerialNumber=v2h124swSerialNumber, swChassisServiceTag=swChassisServiceTag, xstInstanceCfgIndex=xstInstanceCfgIndex, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, prioAclToCosMappingCosValue=prioAclToCosMappingCosValue, aclIngressIpMaskSourceIpAddrBitmask=aclIngressIpMaskSourceIpAddrBitmask, prioAclToCosMappingStatus=prioAclToCosMappingStatus, aclEgressIpMaskDestPortBitmask=aclEgressIpMaskDestPortBitmask, igmpSnoopMulticastCurrentIpAddress=igmpSnoopMulticastCurrentIpAddress, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, bcastStormEntry=bcastStormEntry, consoleParity=consoleParity, aclIngressMacMaskDestMacAddrBitmask=aclIngressMacMaskDestMacAddrBitmask, aclIpAcePrec=aclIpAcePrec, portMgt=portMgt, aclMacAceMinEtherType=aclMacAceMinEtherType, sysLogStatus=sysLogStatus, sntpServiceMode=sntpServiceMode, xstInstancePortDesignatedPort=xstInstancePortDesignatedPort, netDefaultGateway=netDefaultGateway, restartControl=restartControl, aclIpAceIndex=aclIpAceIndex, bcastStormTable=bcastStormTable, aclIngressMacMaskTable=aclIngressMacMaskTable, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, portSpeedDpxStatus=portSpeedDpxStatus, xstInstancePortTable=xstInstancePortTable, prioAclToCosMappingTable=prioAclToCosMappingTable, sshConnID=sshConnID, restartConfigFile=restartConfigFile, fileCopyTftpServer=fileCopyTftpServer, prioCopyIpDscp=prioCopyIpDscp, trapDestVersion=trapDestVersion, rateLimitMgt=rateLimitMgt, consoleStopBits=consoleStopBits, staPortProtocolMigration=staPortProtocolMigration, radiusServerKey=radiusServerKey, staProtocolType=staProtocolType, bcastStormIfIndex=bcastStormIfIndex, consoleBaudRate=consoleBaudRate, sshConnEncryptionType=sshConnEncryptionType, ipHttpsPort=ipHttpsPort, consoleMgt=consoleMgt, aclIpAceDestPortOp=aclIpAceDestPortOp, aclIngressMacMaskIsEnablePktformat=aclIngressMacMaskIsEnablePktformat, v2h124swHardwareVer=v2h124swHardwareVer, bcastStormPktRate=bcastStormPktRate, trunkValidNumber=trunkValidNumber, v2h124swExpansionSlot2=v2h124swExpansionSlot2, v2h124swRoleInSystem=v2h124swRoleInSystem, aclIpAceMinDestPort=aclIpAceMinDestPort, aclMacAceMaxEtherType=aclMacAceMaxEtherType, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, aclIngressMacMaskStatus=aclIngressMacMaskStatus, xstInstancePortForwardTransitions=xstInstancePortForwardTransitions, radiusServerRetransmit=radiusServerRetransmit, aclIngressMacMaskSourceMacAddrBitmask=aclIngressMacMaskSourceMacAddrBitmask, mirrorEntry=mirrorEntry, consoleDataBits=consoleDataBits, swProdManufacturer=swProdManufacturer, xstInstancePortDesignatedBridge=xstInstancePortDesignatedBridge, netConfigTable=netConfigTable, prioIpPrecDscpStatus=prioIpPrecDscpStatus, prioIpPrecTable=prioIpPrecTable, telnetExecTimeout=telnetExecTimeout, fileInfoFileType=fileInfoFileType, aclEgressIpMaskIsEnablePrecedence=aclEgressIpMaskIsEnablePrecedence, xstInstancePortEnable=xstInstancePortEnable)
mibBuilder.exportSymbols("V2H124-24-MIB", PYSNMP_MODULE_ID=v2h124_24MIB, sshServerStatus=sshServerStatus, aclIngressIpMaskSourcePortBitmask=aclIngressIpMaskSourcePortBitmask, priorityMgt=priorityMgt, mirrorDestinationPort=mirrorDestinationPort, switchManagementVlan=switchManagementVlan, xstInstanceCfgBridgeForwardDelay=xstInstanceCfgBridgeForwardDelay, bcastStormOctetRate=bcastStormOctetRate, aclMacAceSourceMacAddrBitmask=aclMacAceSourceMacAddrBitmask, aclEgressIpMaskControlCodeBitmask=aclEgressIpMaskControlCodeBitmask, sshConnInfoEntry=sshConnInfoEntry, xstInstanceCfgTopChanges=xstInstanceCfgTopChanges, prioIpDscpValue=prioIpDscpValue, trunkMgt=trunkMgt, restartMgt=restartMgt, trapDestCommunity=trapDestCommunity, cosMgt=cosMgt, v2h124swBootRomVer=v2h124swBootRomVer, swIndivPowerStatus=swIndivPowerStatus, consoleExecTimeout=consoleExecTimeout, aclIpAceEntry=aclIpAceEntry, sntpServerTable=sntpServerTable, aclEgressMacMaskStatus=aclEgressMacMaskStatus, trapDestMgt=trapDestMgt, prioCopy=prioCopy, netConfigIfIndex=netConfigIfIndex, fileCopyUnitId=fileCopyUnitId, aclEgressIpMaskPrecedence=aclEgressIpMaskPrecedence, trapDestEntry=trapDestEntry, ValidStatus=ValidStatus, aclEgressIpMaskDestIpAddrBitmask=aclEgressIpMaskDestIpAddrBitmask, sntpMgt=sntpMgt, sysLogHistoryRamLevel=sysLogHistoryRamLevel, portSpeedDpxCfg=portSpeedDpxCfg, aclAclGroupIngressMacAcl=aclAclGroupIngressMacAcl, aclIpAceSourcePortOp=aclIpAceSourcePortOp, staMgt=staMgt, portSecPortStatus=portSecPortStatus, aclEgressIpMaskIsEnableDscp=aclEgressIpMaskIsEnableDscp, fileInfoFileName=fileInfoFileName, trunkMaxId=trunkMaxId, v2h124swPowerStatus=v2h124swPowerStatus, portTrunkIndex=portTrunkIndex, xstInstanceCfgRootPort=xstInstanceCfgRootPort, vlanEntry=vlanEntry, prioWrrWeight=prioWrrWeight, aclMacAceName=aclMacAceName, prioWrrTrafficClass=prioWrrTrafficClass, v2h124_24Conformance=v2h124_24Conformance, prioIpPortCos=prioIpPortCos, igmpSnoopMulticastStaticStatus=igmpSnoopMulticastStaticStatus, portEntry=portEntry, aclMacAcePrecedence=aclMacAcePrecedence, tacacsServerKey=tacacsServerKey, ipHttpState=ipHttpState, prioIpDscpCos=prioIpDscpCos, aclIpAceMaxDestPort=aclIpAceMaxDestPort, fileCopyFileType=fileCopyFileType, xstInstancePortDesignatedRoot=xstInstancePortDesignatedRoot, securityMgt=securityMgt, prioIpPortPhysPort=prioIpPortPhysPort, restartOpCodeFile=restartOpCodeFile, rlPortInputLimit=rlPortInputLimit, ipDhcpRestart=ipDhcpRestart, v2h124_24TrapsPrefix=v2h124_24TrapsPrefix, ipMgt=ipMgt, portSecPortTable=portSecPortTable, igmpSnoopVersion=igmpSnoopVersion, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, portFlowCtrlStatus=portFlowCtrlStatus, aclMacAceIndex=aclMacAceIndex, aclEgressIpMaskIsEnableTos=aclEgressIpMaskIsEnableTos, trapDestTable=trapDestTable, aclIpAceTable=aclIpAceTable, aclIpAceSourceIpAddr=aclIpAceSourceIpAddr, aclIngressIpMaskIndex=aclIngressIpMaskIndex, sshMgt=sshMgt, tacacsServerPortNumber=tacacsServerPortNumber, aclIpAceDscp=aclIpAceDscp, aclEgressMacMaskDestMacAddrBitmask=aclEgressMacMaskDestMacAddrBitmask, prioIpPrecEntry=prioIpPrecEntry, xstInstanceCfgMaxAge=xstInstanceCfgMaxAge, xstInstanceCfgPriority=xstInstanceCfgPriority, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, consoleSilentTime=consoleSilentTime, v2h124swServiceTag=v2h124swServiceTag, switchIndivPowerTable=switchIndivPowerTable, xstMgt=xstMgt, aclEgressMacMaskIndex=aclEgressMacMaskIndex, vlanMgt=vlanMgt, v2h124switchInfoTable=v2h124switchInfoTable, markerMgt=markerMgt, xstInstanceCfgDesignatedRoot=xstInstanceCfgDesignatedRoot, prioIpDscpRestoreDefault=prioIpDscpRestoreDefault, aclIpAceTos=aclIpAceTos, sysTimeZone=sysTimeZone, portSecAction=portSecAction, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, markerDscp=markerDscp, portName=portName, aclAclGroupIngressIpAcl=aclAclGroupIngressIpAcl, prioWrrEntry=prioWrrEntry, prioIpPrecValue=prioIpPrecValue, aclIpAceName=aclIpAceName, rateLimitPortEntry=rateLimitPortEntry, igmpSnoopQueryCount=igmpSnoopQueryCount, xstInstancePortState=xstInstancePortState, aclIngressMacMaskPrecedence=aclIngressMacMaskPrecedence, switchProductId=switchProductId, staPathCostMethod=staPathCostMethod, sshConnInfoTable=sshConnInfoTable, portType=portType, igmpSnoopQuerier=igmpSnoopQuerier, aclAclGroupEgressMacAcl=aclAclGroupEgressMacAcl, swIndivPowerUnitIndex=swIndivPowerUnitIndex, qosMgt=qosMgt, trunkEntry=trunkEntry, trapDestStatus=trapDestStatus, v2h124swMicrocodeVer=v2h124swMicrocodeVer, fileCopySrcFileName=fileCopySrcFileName, aclIpAceDestIpAddr=aclIpAceDestIpAddr, prioIpPortValue=prioIpPortValue, staPortOperPointToPoint=staPortOperPointToPoint, tacacsMgt=tacacsMgt, mirrorTable=mirrorTable, fileCopyMgt=fileCopyMgt, v2h124_24Notifications=v2h124_24Notifications, prioAclToCosMappingEntry=prioAclToCosMappingEntry, netConfigUnnumbered=netConfigUnnumbered, v2h124swOpCodeVer=v2h124swOpCodeVer, sshAuthRetries=sshAuthRetries, aclMacAceEntry=aclMacAceEntry, swProdName=swProdName, aclIpAceProtocol=aclIpAceProtocol, sshServerMinorVersion=sshServerMinorVersion, sntpServerEntry=sntpServerEntry, xstInstancePortPriority=xstInstancePortPriority, aclMacAceEtherTypeOp=aclMacAceEtherTypeOp, aclMacAceEtherTypeBitmask=aclMacAceEtherTypeBitmask, v2h124swExpansionSlot1=v2h124swExpansionSlot1, igmpSnoopMgt=igmpSnoopMgt, fileCopyStatus=fileCopyStatus, staPortOperEdgePort=staPortOperEdgePort, aclMacAceVidOp=aclMacAceVidOp, prioIpDscpTable=prioIpDscpTable, portSecPortEntry=portSecPortEntry, fileCopyDestFileName=fileCopyDestFileName, bcastStormStatus=bcastStormStatus, xstInstanceCfgHoldTime=xstInstanceCfgHoldTime, ipHttpsState=ipHttpsState, xstInstanceCfgForwardDelay=xstInstanceCfgForwardDelay, radiusServerTimeout=radiusServerTimeout, aclIngressIpMaskIsEnableProtocol=aclIngressIpMaskIsEnableProtocol, vlanPortIndex=vlanPortIndex, prioIpDscpEntry=prioIpDscpEntry, vlanIndex=vlanIndex, prioCopyIpPrec=prioCopyIpPrec, netConfigPrimaryInterface=netConfigPrimaryInterface, tacacsServerAddress=tacacsServerAddress, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, lacpMgt=lacpMgt, markerIfIndex=markerIfIndex, fileCopySrcOperType=fileCopySrcOperType, swProdVersion=swProdVersion, aclIpAceMinSourcePort=aclIpAceMinSourcePort, netConfigSubnetMask=netConfigSubnetMask, bcastStormSampleType=bcastStormSampleType, portAutonegotiation=portAutonegotiation, markerPrecedence=markerPrecedence, aclIngressMacMaskEtherTypeBitmask=aclIngressMacMaskEtherTypeBitmask, rateLimitStatus=rateLimitStatus, lineMgt=lineMgt, aclEgressMacMaskPrecedence=aclEgressMacMaskPrecedence, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, sysCurrentTime=sysCurrentTime, v2h124swUnitIndex=v2h124swUnitIndex, switchMgt=switchMgt, prioIpPrecPort=prioIpPrecPort, aclAclGroupTable=aclAclGroupTable, xstInstanceCfgBridgeMaxAge=xstInstanceCfgBridgeMaxAge)
