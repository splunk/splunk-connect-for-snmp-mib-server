#
# PySNMP MIB module IPV4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPV4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:45:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
apIpv4, = mibBuilder.importSymbols("APENT-MIB", "apIpv4")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, ModuleIdentity, NotificationType, Bits, Integer32, MibIdentifier, TimeTicks, IpAddress, Counter64, Unsigned32, Counter32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Bits", "Integer32", "MibIdentifier", "TimeTicks", "IpAddress", "Counter64", "Unsigned32", "Counter32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
apIpv4Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 1))
if mibBuilder.loadTexts: apIpv4Mib.setLastUpdated('9801282000Z')
if mibBuilder.loadTexts: apIpv4Mib.setOrganization('ArrowPoint Communications Inc.')
apIpv4SourceRoute = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4SourceRoute.setStatus('current')
apIpv4RecordRoute = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4RecordRoute.setStatus('current')
apIpv4SubnetBcast = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4SubnetBcast.setStatus('current')
apIpv4EcmpMethod = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("address", 1), ("round", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4EcmpMethod.setStatus('current')
apIpv4OrphanTimer = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 6), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OrphanTimer.setStatus('current')
apIpv4LogRouteChanges = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4LogRouteChanges.setStatus('current')
apIpv4ReachRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4ReachRoutes.setStatus('current')
apIpv4ReachRoutesMem = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4ReachRoutesMem.setStatus('current')
apIpv4TotalRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4TotalRoutes.setStatus('current')
apIpv4TotalRoutesMem = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4TotalRoutesMem.setStatus('current')
apIpv4ReachHosts = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4ReachHosts.setStatus('current')
apIpv4ReachHostsMem = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4ReachHostsMem.setStatus('current')
apIpv4TotalHosts = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4TotalHosts.setStatus('current')
apIpv4TotalHostsMem = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4TotalHostsMem.setStatus('current')
apIpv4PoolMem = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4PoolMem.setStatus('current')
apIpv4B2BRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4B2BRedundancy.setStatus('current')
apIpv4Opportunistic = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("all", 2), ("disable", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4Opportunistic.setStatus('current')
apIpv4RedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("backup", 2), ("master", 3))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4RedundancyState.setStatus('current')
apIpv4RedundancyIf = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4RedundancyIf.setStatus('current')
apIpv4RedundancyMaster = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4RedundancyMaster.setStatus('current')
apIpv4RedundancyMasterMode = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4RedundancyMasterMode.setStatus('current')
apIpv4EcmpSticky = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4EcmpSticky.setStatus('current')
apIpv4ImplicitService = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4ImplicitService.setStatus('current')
apIpv4RedundancyLinkFailTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 25), )
if mibBuilder.loadTexts: apIpv4RedundancyLinkFailTable.setStatus('current')
apIpv4RedundancyLinkFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 25, 1), ).setIndexNames((0, "IPV4-MIB", "apIpv4RedundancyLinkFailIfIndex"))
if mibBuilder.loadTexts: apIpv4RedundancyLinkFailEntry.setStatus('current')
apIpv4RedundancyLinkFailIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4RedundancyLinkFailIfIndex.setStatus('current')
apIpv4RedundancyLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 25, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4RedundancyLinkStatus.setStatus('current')
apIpv4RedundancyFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noFailure", 0), ("phylinkFail", 1), ("uplinkFailure", 2), ("otherSwitchAssertMaster", 3))).clone('noFailure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4RedundancyFailReason.setStatus('current')
apIpv4VrrpVRID = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4VrrpVRID.setStatus('current')
apIpv4VrrpPriority = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4VrrpPriority.setStatus('current')
apIpv4numUplinkServices = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4numUplinkServices.setStatus('current')
apIpv4numViableUplinks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4numViableUplinks.setStatus('current')
apIpv4numPhylinkMarked = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4numPhylinkMarked.setStatus('current')
apIpv4toMasterStateCnt = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4toMasterStateCnt.setStatus('current')
apIpv4toBackupStateCnt = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4toBackupStateCnt.setStatus('current')
apIpv4RedundancyTrap = NotificationType((1, 3, 6, 1, 4, 1, 2467, 1, 9, 1) + (0,1))
mibBuilder.exportSymbols("IPV4-MIB", apIpv4EcmpMethod=apIpv4EcmpMethod, apIpv4SubnetBcast=apIpv4SubnetBcast, PYSNMP_MODULE_ID=apIpv4Mib, apIpv4EcmpSticky=apIpv4EcmpSticky, apIpv4RedundancyFailReason=apIpv4RedundancyFailReason, apIpv4RedundancyLinkFailTable=apIpv4RedundancyLinkFailTable, apIpv4numViableUplinks=apIpv4numViableUplinks, apIpv4RedundancyMasterMode=apIpv4RedundancyMasterMode, apIpv4ReachHostsMem=apIpv4ReachHostsMem, apIpv4RedundancyIf=apIpv4RedundancyIf, apIpv4toMasterStateCnt=apIpv4toMasterStateCnt, apIpv4Mib=apIpv4Mib, apIpv4RedundancyLinkStatus=apIpv4RedundancyLinkStatus, apIpv4RecordRoute=apIpv4RecordRoute, apIpv4TotalRoutes=apIpv4TotalRoutes, apIpv4RedundancyState=apIpv4RedundancyState, apIpv4LogRouteChanges=apIpv4LogRouteChanges, apIpv4RedundancyTrap=apIpv4RedundancyTrap, apIpv4PoolMem=apIpv4PoolMem, apIpv4ReachRoutes=apIpv4ReachRoutes, apIpv4RedundancyMaster=apIpv4RedundancyMaster, apIpv4toBackupStateCnt=apIpv4toBackupStateCnt, apIpv4VrrpPriority=apIpv4VrrpPriority, apIpv4TotalRoutesMem=apIpv4TotalRoutesMem, apIpv4TotalHosts=apIpv4TotalHosts, apIpv4TotalHostsMem=apIpv4TotalHostsMem, apIpv4Opportunistic=apIpv4Opportunistic, apIpv4OrphanTimer=apIpv4OrphanTimer, apIpv4ImplicitService=apIpv4ImplicitService, apIpv4B2BRedundancy=apIpv4B2BRedundancy, apIpv4ReachHosts=apIpv4ReachHosts, apIpv4numPhylinkMarked=apIpv4numPhylinkMarked, apIpv4SourceRoute=apIpv4SourceRoute, apIpv4ReachRoutesMem=apIpv4ReachRoutesMem, apIpv4VrrpVRID=apIpv4VrrpVRID, apIpv4RedundancyLinkFailIfIndex=apIpv4RedundancyLinkFailIfIndex, apIpv4RedundancyLinkFailEntry=apIpv4RedundancyLinkFailEntry, apIpv4numUplinkServices=apIpv4numUplinkServices)
