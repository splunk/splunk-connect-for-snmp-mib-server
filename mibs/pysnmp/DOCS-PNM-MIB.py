#
# PySNMP MIB module DOCS-PNM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-PNM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:38:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
TenthdB, = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdB")
docsIf3CmSpectrumAnalysisCtrlCmd, = mibBuilder.importSymbols("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmd")
DsOfdmModulationType, = mibBuilder.importSymbols("DOCS-IF31-MIB", "DsOfdmModulationType")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, MibIdentifier, Counter32, Gauge32, TimeTicks, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, iso, NotificationType, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Counter32", "Gauge32", "TimeTicks", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "iso", "NotificationType", "Unsigned32", "ModuleIdentity")
DisplayString, TextualConvention, TimeStamp, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "RowStatus", "MacAddress", "TruthValue")
docsPnmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27))
docsPnmMIB.setRevisions(('2017-04-13 00:00', '2016-12-15 00:00', '2016-09-01 00:00', '2016-05-05 00:00', '2015-11-04 00:00', '2015-05-20 00:00', '2015-04-21 00:00',))
if mibBuilder.loadTexts: docsPnmMIB.setLastUpdated('201704130000Z')
if mibBuilder.loadTexts: docsPnmMIB.setOrganization('Cable Television Laboratories, Inc.')
class MeasStatusType(TextualConvention, Integer32):
    reference = 'DOCSIS 3.1 Cable Modem Operations Support System Interface Specification CM-SP-CM-OSSIv3.1, PNM section.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("inactive", 2), ("busy", 3), ("sampleReady", 4), ("error", 5), ("resourceUnavailable", 6), ("sampleTruncated", 7))

class ThousandthdB(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-3'

class UsOfdmaWindowingSizeType(TextualConvention, Unsigned32):
    reference = 'DOCSIS 3.1 Cable Modem Operations Support System Interface Specification CM-SP-CM-OSSIv3.1, PNM section.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(96, 96), ValueRangeConstraint(128, 128), ValueRangeConstraint(160, 160), ValueRangeConstraint(192, 192), ValueRangeConstraint(224, 224), )
docsPnmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 0))
docsPnmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1))
docsPnmMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2))
docsPnmMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 1))
docsPnmMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 2))
docsPnmBulkData = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1))
docsPnmCmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2))
docsPnmCmtsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3))
docsPnmBulkCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 1))
docsPnmCmtsOptObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9))
docsPnmCmtsUtscObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10))
docsPnmBulkDestIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 1, 1), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmBulkDestIpAddrType.setStatus('current')
docsPnmBulkDestIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmBulkDestIpAddr.setStatus('current')
docsPnmBulkDestPath = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmBulkDestPath.setStatus('current')
docsPnmBulkUploadControl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAutoUpload", 2), ("autoUpload", 3))).clone('autoUpload')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmBulkUploadControl.setStatus('current')
docsPnmBulkFileTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 2), )
if mibBuilder.loadTexts: docsPnmBulkFileTable.setStatus('current')
docsPnmBulkFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 2, 1), ).setIndexNames((0, "DOCS-PNM-MIB", "docsPnmBulkFileIndex"))
if mibBuilder.loadTexts: docsPnmBulkFileEntry.setStatus('current')
docsPnmBulkFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsPnmBulkFileIndex.setStatus('current')
docsPnmBulkFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmBulkFileName.setStatus('current')
docsPnmBulkFileControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("tftpUpload", 2), ("cancelUpload", 3), ("deleteFile", 4))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmBulkFileControl.setStatus('current')
docsPnmBulkFileUploadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("availableForUpload", 2), ("uploadInProgress", 3), ("uploadCompleted", 4), ("uploadPending", 5), ("uploadCancelled", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmBulkFileUploadStatus.setStatus('current')
docsPnmCmControlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 1))
docsPnmCmCtlTest = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("dsSpectrumAnalyzer", 2), ("dsOfdmSymbolCapture", 3), ("dsOfdmChanEstCoef", 4), ("dsConstellationDisp", 5), ("dsOfdmRxMERPerSubCar", 6), ("dsOfdmCodewordErrorRate", 7), ("dsHistogram", 8), ("usPreEqualizerCoef", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmCtlTest.setStatus('current')
docsPnmCmCtlTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmCtlTestDuration.setStatus('current')
docsPnmCmCtlStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ready", 2), ("testInProgress", 3), ("tempReject", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmCtlStatus.setStatus('current')
docsPnmCmDsOfdmSymCapTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2), )
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymCapTable.setStatus('current')
docsPnmCmDsOfdmSymCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymCapEntry.setStatus('current')
docsPnmCmDsOfdmSymTrigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymTrigEnable.setStatus('current')
docsPnmCmDsOfdmSymTrigEnableTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymTrigEnableTimeout.setStatus('current')
docsPnmCmDsOfdmSymTrigGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymTrigGroupId.setStatus('current')
docsPnmCmDsOfdmSymRxWindowing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymRxWindowing.setStatus('current')
docsPnmCmDsOfdmSymTransactionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymTransactionId.setStatus('current')
docsPnmCmDsOfdmSymSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 6), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymSampleRate.setStatus('current')
docsPnmCmDsOfdmSymFftLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ValueRangeConstraint(8192, 8192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymFftLength.setStatus('current')
docsPnmCmDsOfdmSymMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 8), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymMeasStatus.setStatus('current')
docsPnmCmDsOfdmSymCaptFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 2, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmSymCaptFileName.setStatus('current')
docsPnmCmOfdmChanEstCoefTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3), )
if mibBuilder.loadTexts: docsPnmCmOfdmChanEstCoefTable.setStatus('current')
docsPnmCmOfdmChanEstCoefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmOfdmChanEstCoefEntry.setStatus('current')
docsPnmCmOfdmChEstCoefTrigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefTrigEnable.setStatus('current')
docsPnmCmOfdmChEstCoefAmpRipplePkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 2), ThousandthdB()).setUnits('ThousandthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefAmpRipplePkToPk.setStatus('current')
docsPnmCmOfdmChEstCoefAmpRippleRms = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 3), ThousandthdB()).setUnits('ThousandthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefAmpRippleRms.setStatus('current')
docsPnmCmOfdmChEstCoefAmpSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 4), Integer32()).setUnits('ThousandthdB/MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefAmpSlope.setStatus('current')
docsPnmCmOfdmChEstCoefGrpDelayRipplePkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 5), Unsigned32()).setUnits('ThousandthNsec').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefGrpDelayRipplePkToPk.setStatus('current')
docsPnmCmOfdmChEstCoefGrpDelayRippleRms = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 6), Unsigned32()).setUnits('ThousandthNsec').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefGrpDelayRippleRms.setStatus('current')
docsPnmCmOfdmChEstCoefMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 7), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefMeasStatus.setStatus('current')
docsPnmCmOfdmChEstCoefFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefFileName.setStatus('current')
docsPnmCmOfdmChEstCoefAmpMean = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 9), ThousandthdB()).setUnits('ThousandthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefAmpMean.setStatus('current')
docsPnmCmOfdmChEstCoefGrpDelaySlope = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 10), Integer32()).setUnits('ThousandthNsec/MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefGrpDelaySlope.setStatus('current')
docsPnmCmOfdmChEstCoefGrpDelayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 3, 1, 11), Integer32()).setUnits('ThousandthNsec').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmOfdmChEstCoefGrpDelayMean.setStatus('current')
docsPnmCmDsConstDispMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 4), )
if mibBuilder.loadTexts: docsPnmCmDsConstDispMeasTable.setStatus('current')
docsPnmCmDsConstDispMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmDsConstDispMeasEntry.setStatus('current')
docsPnmCmDsConstDispTrigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsConstDispTrigEnable.setStatus('current')
docsPnmCmDsConstDispModOrderOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsConstDispModOrderOffset.setStatus('current')
docsPnmCmDsConstDispNumSampleSymb = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(8192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsConstDispNumSampleSymb.setStatus('current')
docsPnmCmDsConstDispSelModOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 4, 1, 4), DsOfdmModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsConstDispSelModOrder.setStatus('current')
docsPnmCmDsConstDispMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 4, 1, 5), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsConstDispMeasStatus.setStatus('current')
docsPnmCmDsConstDispFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 4, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsConstDispFileName.setStatus('current')
docsPnmCmDsOfdmRxMerTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5), )
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerTable.setStatus('current')
docsPnmCmDsOfdmRxMerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerEntry.setStatus('current')
docsPnmCmDsOfdmRxMerFileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerFileEnable.setStatus('current')
docsPnmCmDsOfdmRxMerPercentile = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerPercentile.setStatus('current')
docsPnmCmDsOfdmRxMerMean = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundredthDb').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerMean.setStatus('current')
docsPnmCmDsOfdmRxMerStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundredthDb').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerStdDev.setStatus('current')
docsPnmCmDsOfdmRxMerThrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('quarterDb').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerThrVal.setStatus('current')
docsPnmCmDsOfdmRxMerThrHighestFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1, 6), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerThrHighestFreq.setStatus('current')
docsPnmCmDsOfdmRxMerMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1, 7), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerMeasStatus.setStatus('current')
docsPnmCmDsOfdmRxMerFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 5, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmRxMerFileName.setStatus('current')
docsPnmCmDsOfdmMerMarTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6), )
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarTable.setStatus('current')
docsPnmCmDsOfdmMerMarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarEntry.setStatus('current')
docsPnmCmDsOfdmMerMarProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarProfileId.setStatus('current')
docsPnmCmDsOfdmMerMarThrshldOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 2), Unsigned32()).setUnits('quarterDb').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarThrshldOffset.setStatus('current')
docsPnmCmDsOfdmMerMarMeasEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarMeasEnable.setStatus('current')
docsPnmCmDsOfdmMerMarNumSymPerSubCarToAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarNumSymPerSubCarToAvg.setStatus('current')
docsPnmCmDsOfdmMerMarReqAvgMer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 5), Unsigned32()).setUnits('quarterDb').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarReqAvgMer.setStatus('current')
docsPnmCmDsOfdmMerMarNumSubCarBelowThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarNumSubCarBelowThrshld.setStatus('current')
docsPnmCmDsOfdmMerMarMeasuredAvgMer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 7), Unsigned32()).setUnits('hundrethdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarMeasuredAvgMer.setStatus('current')
docsPnmCmDsOfdmMerMarAvgMerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 8), Unsigned32()).setUnits('hundrethdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarAvgMerMargin.setStatus('current')
docsPnmCmDsOfdmMerMarMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 6, 1, 9), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmMerMarMeasStatus.setStatus('current')
docsPnmCmDsOfdmFecTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 7), )
if mibBuilder.loadTexts: docsPnmCmDsOfdmFecTable.setStatus('current')
docsPnmCmDsOfdmFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmDsOfdmFecEntry.setStatus('current')
docsPnmCmDsOfdmFecSumType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("interval10min", 2), ("interval24hr", 3))).clone('interval10min')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmFecSumType.setStatus('current')
docsPnmCmDsOfdmFecFileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 7, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmFecFileEnable.setStatus('current')
docsPnmCmDsOfdmFecMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 7, 1, 3), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmFecMeasStatus.setStatus('current')
docsPnmCmDsOfdmFecFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 7, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmFecFileName.setStatus('current')
docsPnmCmDsOfdmReqMERObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8))
docsPnmCmDsOfdmReqMerQam16 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 1), Unsigned32().clone(60)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam16.setStatus('current')
docsPnmCmDsOfdmReqMerQam64 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 2), Unsigned32().clone(84)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam64.setStatus('current')
docsPnmCmDsOfdmReqMerQam128 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 3), Unsigned32().clone(96)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam128.setStatus('current')
docsPnmCmDsOfdmReqMerQam256 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 4), Unsigned32().clone(108)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam256.setStatus('current')
docsPnmCmDsOfdmReqMerQam512 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 5), Unsigned32().clone(122)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam512.setStatus('current')
docsPnmCmDsOfdmReqMerQam1024 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 6), Unsigned32().clone(136)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam1024.setStatus('current')
docsPnmCmDsOfdmReqMerQam2048 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 7), Unsigned32().clone(148)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam2048.setStatus('current')
docsPnmCmDsOfdmReqMerQam4096 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 8), Unsigned32().clone(164)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam4096.setStatus('current')
docsPnmCmDsOfdmReqMerQam8192 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 9), Unsigned32().clone(184)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam8192.setStatus('current')
docsPnmCmDsOfdmReqMerQam16384 = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 8, 10), Unsigned32().clone(208)).setUnits('quarterdB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmReqMerQam16384.setStatus('current')
docsPnmCmDsHistTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 9), )
if mibBuilder.loadTexts: docsPnmCmDsHistTable.setStatus('current')
docsPnmCmDsHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmDsHistEntry.setStatus('current')
docsPnmCmDsHistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 9, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsHistEnable.setStatus('current')
docsPnmCmDsHistTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsHistTimeOut.setStatus('current')
docsPnmCmDsHistMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 9, 1, 3), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsHistMeasStatus.setStatus('current')
docsPnmCmDsHistFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 9, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsHistFileName.setStatus('current')
docsPnmCmUsPreEqTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10), )
if mibBuilder.loadTexts: docsPnmCmUsPreEqTable.setStatus('current')
docsPnmCmUsPreEqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmUsPreEqEntry.setStatus('current')
docsPnmCmUsPreEqFileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmUsPreEqFileEnable.setStatus('current')
docsPnmCmUsPreEqAmpRipplePkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 2), ThousandthdB()).setUnits('ThousandthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqAmpRipplePkToPk.setStatus('current')
docsPnmCmUsPreEqAmpRippleRms = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 3), ThousandthdB()).setUnits('ThousandthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqAmpRippleRms.setStatus('current')
docsPnmCmUsPreEqAmpSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 4), Integer32()).setUnits('ThousandthdB/MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqAmpSlope.setStatus('current')
docsPnmCmUsPreEqGrpDelayRipplePkToPk = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 5), Unsigned32()).setUnits('nsec').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqGrpDelayRipplePkToPk.setStatus('current')
docsPnmCmUsPreEqGrpDelayRippleRms = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 6), Unsigned32()).setUnits('nsec').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqGrpDelayRippleRms.setStatus('current')
docsPnmCmUsPreEqPreEqCoAdjStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("success", 2), ("clipped", 3), ("rejected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqPreEqCoAdjStatus.setStatus('current')
docsPnmCmUsPreEqMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 8), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqMeasStatus.setStatus('current')
docsPnmCmUsPreEqLastUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmUsPreEqLastUpdateFileName.setStatus('current')
docsPnmCmUsPreEqFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmUsPreEqFileName.setStatus('current')
docsPnmCmUsPreEqAmpMean = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 11), ThousandthdB()).setUnits('ThousandthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqAmpMean.setStatus('current')
docsPnmCmUsPreEqGrpDelaySlope = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 12), Integer32()).setUnits('ThousandthNsec/MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqGrpDelaySlope.setStatus('current')
docsPnmCmUsPreEqGrpDelayMean = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 10, 1, 13), Integer32()).setUnits('ThousandthNsec').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmUsPreEqGrpDelayMean.setStatus('current')
docsPnmCmDsOfdmModProfTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 11), )
if mibBuilder.loadTexts: docsPnmCmDsOfdmModProfTable.setStatus('current')
docsPnmCmDsOfdmModProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmDsOfdmModProfEntry.setStatus('current')
docsPnmCmDsOfdmModProfFileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 11, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmModProfFileEnable.setStatus('current')
docsPnmCmDsOfdmModProfMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 11, 1, 2), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmDsOfdmModProfMeasStatus.setStatus('current')
docsPnmCmDsOfdmModProfFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 2, 11, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmDsOfdmModProfFileName.setStatus('current')
docsIf3CmSpectrumAnalysisCtrlCmdFileEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdFileEnable.setStatus('current')
docsIf3CmSpectrumAnalysisCtrlCmdMeasStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 11), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdMeasStatus.setStatus('current')
docsIf3CmSpectrumAnalysisCtrlCmdFileName = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdFileName.setStatus('current')
docsPnmCmtsDsOfdmSymCapTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1), )
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymCapTable.setStatus('current')
docsPnmCmtsDsOfdmSymCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymCapEntry.setStatus('current')
docsPnmCmtsDsOfdmSymTrigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymTrigEnable.setStatus('current')
docsPnmCmtsDsOfdmSymTrigGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymTrigGroupId.setStatus('current')
docsPnmCmtsDsOfdmSymFirstActSubCarIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymFirstActSubCarIdx.setStatus('current')
docsPnmCmtsDsOfdmSymLastActSubCarIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymLastActSubCarIdx.setStatus('current')
docsPnmCmtsDsOfdmSymRxWindowing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymRxWindowing.setStatus('current')
docsPnmCmtsDsOfdmSymTransactionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymTransactionId.setStatus('current')
docsPnmCmtsDsOfdmSymSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 7), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymSampleRate.setStatus('current')
docsPnmCmtsDsOfdmSymFftLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ValueRangeConstraint(8192, 8192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymFftLength.setStatus('current')
docsPnmCmtsDsOfdmSymMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 9), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymMeasStatus.setStatus('current')
docsPnmCmtsDsOfdmSymCaptFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 1, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmSymCaptFileName.setStatus('current')
docsPnmCmtsDsOfdmNoisePwrRatioTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 2), )
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmNoisePwrRatioTable.setStatus('current')
docsPnmCmtsDsOfdmNoisePwrRatioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmNoisePwrRatioEntry.setStatus('current')
docsPnmCmtsDsOfdmNprStartSubcar = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmNprStartSubcar.setStatus('current')
docsPnmCmtsDsOfdmNprStopSubcar = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmNprStopSubcar.setStatus('current')
docsPnmCmtsDsOfdmNprEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmNprEnable.setStatus('current')
docsPnmCmtsDsOfdmNprDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsDsOfdmNprDuration.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3), )
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeTable.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeEntry.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeCmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeCmMacAddr.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeUseIdleSid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeUseIdleSid.setStatus('current')
docsPnmCmtsUsOfdmaAQProbePreEqOn = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbePreEqOn.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeEnable.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeTimeout.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeNumSymToCapt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setUnits('symbols').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeNumSymToCapt.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeMaxCaptSymbols = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeMaxCaptSymbols.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeNumSamples.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeTimeStamp.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 10), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeMeasStatus.setStatus('current')
docsPnmCmtsUsOfdmaAQProbeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 3, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaAQProbeFileName.setStatus('current')
docsPnmCmtsUsImpNoiseTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4), )
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseTable.setStatus('current')
docsPnmCmtsUsImpNoiseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseEntry.setStatus('current')
docsPnmCmtsUsImpNoiseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseEnable.setStatus('current')
docsPnmCmtsUsImpNoiseFreeRunDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseFreeRunDuration.setStatus('current')
docsPnmCmtsUsImpNoiseStTrigLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 3), Unsigned32().clone(300)).setUnits('microvolts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseStTrigLvl.setStatus('current')
docsPnmCmtsUsImpNoiseEndTrigLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 4), Unsigned32().clone(150)).setUnits('microvolts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseEndTrigLvl.setStatus('current')
docsPnmCmtsUsImpNoiseCenterFrq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 5), Unsigned32().clone(7000000)).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseCenterFrq.setStatus('current')
docsPnmCmtsUsImpNoiseMeasBw = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(160, 160), ValueRangeConstraint(320, 320), ValueRangeConstraint(640, 640), ValueRangeConstraint(1280, 1280), ValueRangeConstraint(2560, 2560), ValueRangeConstraint(5120, 5120), )).clone(2560)).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseMeasBw.setStatus('current')
docsPnmCmtsUsImpNoiseNumEvtsCnted = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseNumEvtsCnted.setStatus('current')
docsPnmCmtsUsImpNoiseLastEvtTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseLastEvtTimeStamp.setStatus('current')
docsPnmCmtsUsImpNoiseLastEvtDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 9), Unsigned32()).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseLastEvtDuration.setStatus('current')
docsPnmCmtsUsImpNoiseLastEvtAvgPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 10), Integer32()).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseLastEvtAvgPwr.setStatus('current')
docsPnmCmtsUsImpNoiseMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 11), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseMeasStatus.setStatus('current')
docsPnmCmtsUsImpNoiseFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 4, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsImpNoiseFileName.setStatus('current')
docsPnmCmtsUsHistTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 5), )
if mibBuilder.loadTexts: docsPnmCmtsUsHistTable.setStatus('current')
docsPnmCmtsUsHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUsHistEntry.setStatus('current')
docsPnmCmtsUsHistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsHistEnable.setStatus('current')
docsPnmCmtsUsHistTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsHistTimeOut.setStatus('current')
docsPnmCmtsUsHistMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 5, 1, 3), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsHistMeasStatus.setStatus('current')
docsPnmCmtsUsHistFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 5, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsHistFileName.setStatus('current')
docsPnmCmtsUsOfdmaRxPwrTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 6), )
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxPwrTable.setStatus('current')
docsPnmCmtsUsOfdmaRxPwrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxPwrCmMac"))
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxPwrEntry.setStatus('current')
docsPnmCmtsUsOfdmaRxPwrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 6, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxPwrEnable.setStatus('current')
docsPnmCmtsUsOfdmaRxPwrCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxPwrCmMac.setStatus('current')
docsPnmCmtsUsOfdmaRxPwrPreEq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxPwrPreEq.setStatus('current')
docsPnmCmtsUsOfdmaRxPwrNumAvgs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxPwrNumAvgs.setStatus('current')
docsPnmCmtsUsOfdmaRxPwrOnePtSixPsd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 6, 1, 5), TenthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxPwrOnePtSixPsd.setStatus('current')
docsPnmCmtsUsOfdmaRxPwrMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 6, 1, 6), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxPwrMeasStatus.setStatus('current')
docsPnmCmtsUsOfdmaRxMerTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 7), )
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxMerTable.setStatus('current')
docsPnmCmtsUsOfdmaRxMerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxMerEntry.setStatus('current')
docsPnmCmtsUsOfdmaRxMerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxMerEnable.setStatus('current')
docsPnmCmtsUsOfdmaRxMerCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 7, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxMerCmMac.setStatus('current')
docsPnmCmtsUsOfdmaRxMerPreEq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 7, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxMerPreEq.setStatus('current')
docsPnmCmtsUsOfdmaRxMerNumAvgs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxMerNumAvgs.setStatus('current')
docsPnmCmtsUsOfdmaRxMerMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 7, 1, 5), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxMerMeasStatus.setStatus('current')
docsPnmCmtsUsOfdmaRxMerFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 7, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsOfdmaRxMerFileName.setStatus('current')
docsPnmCmtsUsSpecAnTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8), )
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnTable.setStatus('deprecated')
docsPnmCmtsUsSpecAnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnEntry.setStatus('deprecated')
docsPnmCmtsUsSpecAnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnEnable.setStatus('deprecated')
docsPnmCmtsUsSpecAnTrigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("freeRunning", 2), ("miniSlotCount", 3), ("sid", 4), ("idleSid", 5), ("minislotNumber", 6), ("cmMac", 7), ("quietProbeSymbol", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnTrigMode.setStatus('deprecated')
docsPnmCmtsUsSpecAnMiniSlotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnMiniSlotCnt.setStatus('deprecated')
docsPnmCmtsUsSpecAnSid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnSid.setStatus('deprecated')
docsPnmCmtsUsSpecAnMiniSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnMiniSlotNum.setStatus('deprecated')
docsPnmCmtsUsSpecAnCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 6), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnCmMac.setStatus('deprecated')
docsPnmCmtsUsSpecAnCenterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 7), Unsigned32()).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnCenterFreq.setStatus('deprecated')
docsPnmCmtsUsSpecAnSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnSpan.setStatus('deprecated')
docsPnmCmtsUsSpecAnNumberOfBins = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnNumberOfBins.setStatus('deprecated')
docsPnmCmtsUsSpecAnMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 10), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnMeasStatus.setStatus('deprecated')
docsPnmCmtsUsSpecAnFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 8, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUsSpecAnFileName.setStatus('deprecated')
docsPnmCmtsOptReqTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1), )
if mibBuilder.loadTexts: docsPnmCmtsOptReqTable.setStatus('current')
docsPnmCmtsOptReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1), ).setIndexNames((0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqCmMacAddr"), (0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqDsOfdmChanCfgIndex"), (0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqDsOfdmProfCfgId"))
if mibBuilder.loadTexts: docsPnmCmtsOptReqEntry.setStatus('current')
docsPnmCmtsOptReqCmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsPnmCmtsOptReqCmMacAddr.setStatus('current')
docsPnmCmtsOptReqDsOfdmChanCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsPnmCmtsOptReqDsOfdmChanCfgIndex.setStatus('current')
docsPnmCmtsOptReqDsOfdmProfCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: docsPnmCmtsOptReqDsOfdmProfCfgId.setStatus('current')
docsPnmCmtsOptReqOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("abort", 3))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqOpCode.setStatus('current')
docsPnmCmtsOptReqProfileTest = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 5), Bits().clone(namedValues=NamedValues(("rxMerSubCarrierStats", 0), ("rxMerSubCarrierThreshComp", 1), ("snrMarginCandidateProfile", 2), ("codewordStats", 3), ("codewordThreshComp", 4), ("ncpFieldStats", 5), ("ncpCrcThreshComp", 6), ("reserved", 7), ("other", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqProfileTest.setStatus('current')
docsPnmCmtsOptReqMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqMaxDuration.setStatus('current')
docsPnmCmtsOptReqMaxCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 7), Unsigned32()).setUnits('Number of Codewords').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqMaxCodewords.setStatus('current')
docsPnmCmtsOptReqMaxUncorrectableCws = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 8), Unsigned32()).setUnits('Number of Codewords').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqMaxUncorrectableCws.setStatus('current')
docsPnmCmtsOptReqCwTaggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqCwTaggingEnabled.setStatus('current')
docsPnmCmtsOptReqNcpFields = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqNcpFields.setStatus('current')
docsPnmCmtsOptReqMaxNcpCrcFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqMaxNcpCrcFails.setStatus('current')
docsPnmCmtsOptReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptReqStatus.setStatus('current')
docsPnmCmtsOptMerThreshCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 2), )
if mibBuilder.loadTexts: docsPnmCmtsOptMerThreshCfgTable.setStatus('current')
docsPnmCmtsOptMerThreshCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 2, 1), ).setIndexNames((0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqDsOfdmChanCfgIndex"), (0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqDsOfdmProfCfgId"), (0, "DOCS-PNM-MIB", "docsPnmCmtsOptMerThreshCfgModOrder"))
if mibBuilder.loadTexts: docsPnmCmtsOptMerThreshCfgEntry.setStatus('current')
docsPnmCmtsOptMerThreshCfgModOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 2, 1, 1), DsOfdmModulationType())
if mibBuilder.loadTexts: docsPnmCmtsOptMerThreshCfgModOrder.setStatus('current')
docsPnmCmtsOptMerThreshCfgRxMerVsBitloadingTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('QuarterdB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptMerThreshCfgRxMerVsBitloadingTarget.setStatus('current')
docsPnmCmtsOptMerThreshCfgRxMerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 2, 1, 3), Unsigned32()).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptMerThreshCfgRxMerMargin.setStatus('current')
docsPnmCmtsOptMerThreshCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptMerThreshCfgStatus.setStatus('current')
docsPnmCmtsOptProfChgCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 3), )
if mibBuilder.loadTexts: docsPnmCmtsOptProfChgCfgTable.setStatus('current')
docsPnmCmtsOptProfChgCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 3, 1), ).setIndexNames((0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqCmMacAddr"), (0, "DOCS-PNM-MIB", "docsPnmCmtsOptProfChgCfgIfIndex"))
if mibBuilder.loadTexts: docsPnmCmtsOptProfChgCfgEntry.setStatus('current')
docsPnmCmtsOptProfChgCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: docsPnmCmtsOptProfChgCfgIfIndex.setStatus('current')
docsPnmCmtsOptProfChgCfgDsProfList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptProfChgCfgDsProfList.setStatus('current')
docsPnmCmtsOptProfChgCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsPnmCmtsOptProfChgCfgStatus.setStatus('current')
docsPnmCmtsOptRespTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4), )
if mibBuilder.loadTexts: docsPnmCmtsOptRespTable.setStatus('current')
docsPnmCmtsOptRespEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1), ).setIndexNames((0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqCmMacAddr"), (0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqDsOfdmChanCfgIndex"), (0, "DOCS-PNM-MIB", "docsPnmCmtsOptReqDsOfdmProfCfgId"))
if mibBuilder.loadTexts: docsPnmCmtsOptRespEntry.setStatus('current')
docsPnmCmtsOptRespStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("testing", 1), ("profileAlreadyUnderTest", 2), ("unavailableResources", 3), ("maxDurationExpired", 4), ("aborted", 5), ("complete", 6), ("profileAlreadyAssigned", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespStatus.setStatus('current')
docsPnmCmtsOptRespFirstActiveSubcarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(148, 7895))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespFirstActiveSubcarrierNum.setStatus('current')
docsPnmCmtsOptRespMerData = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7680))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespMerData.setStatus('current')
docsPnmCmtsOptRespMerPassFailData = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7680))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespMerPassFailData.setStatus('current')
docsPnmCmtsOptRespNumSubcarriersBelowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespNumSubcarriersBelowThresh.setStatus('current')
docsPnmCmtsOptRespSnrMarginData = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespSnrMarginData.setStatus('current')
docsPnmCmtsOptRespCodewordCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 7), Counter64()).setUnits('Number of Codewords').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespCodewordCt.setStatus('current')
docsPnmCmtsOptRespCorrectedCodewordCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 8), Counter64()).setUnits('Number of Codewords').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespCorrectedCodewordCt.setStatus('current')
docsPnmCmtsOptRespUncorrectableCodewordCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 9), Counter64()).setUnits('Number of Codewords').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespUncorrectableCodewordCt.setStatus('current')
docsPnmCmtsOptRespNcpFieldCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespNcpFieldCt.setStatus('current')
docsPnmCmtsOptRespNcpCrcFailCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 9, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsOptRespNcpCrcFailCt.setStatus('current')
docsPnmCmtsUtscCapabTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 1), )
if mibBuilder.loadTexts: docsPnmCmtsUtscCapabTable.setStatus('current')
docsPnmCmtsUtscCapabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUtscCapabEntry.setStatus('current')
docsPnmCmtsUtscCapabTriggerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 1, 1, 1), Bits().clone(namedValues=NamedValues(("other", 0), ("freeRunning", 1), ("miniSlotCount", 2), ("sid", 3), ("idleSid", 4), ("cmMac", 5), ("quietProbeSymbol", 6), ("burstIuc", 7), ("timestamp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscCapabTriggerMode.setStatus('current')
docsPnmCmtsUtscCapabOutputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 1, 1, 2), Bits().clone(namedValues=NamedValues(("other", 0), ("timeIQ", 1), ("fftPower", 2), ("rawAdc", 3), ("fftIQ", 4), ("fftAmplitude", 5), ("fftDb", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscCapabOutputFormat.setStatus('current')
docsPnmCmtsUtscCapabWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 1, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("rectangular", 1), ("hann", 2), ("blackmanHarris", 3), ("hamming", 4), ("flatTop", 5), ("gaussian", 6), ("chebyshev", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscCapabWindow.setStatus('current')
docsPnmCmtsUtscCapabDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscCapabDescription.setStatus('current')
docsPnmCmtsUtscCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2), )
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgTable.setStatus('current')
docsPnmCmtsUtscCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-PNM-MIB", "docsPnmCmtsUtscCfgIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgEntry.setStatus('current')
docsPnmCmtsUtscCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgIndex.setStatus('current')
docsPnmCmtsUtscCfgLogicalChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgLogicalChIfIndex.setStatus('current')
docsPnmCmtsUtscCfgTriggerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("freeRunning", 2), ("miniSlotCount", 3), ("sid", 4), ("idleSid", 5), ("cmMac", 6), ("quietProbeSymbol", 7), ("burstIuc", 8), ("timestamp", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgTriggerMode.setStatus('current')
docsPnmCmtsUtscCfgMinislotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgMinislotCount.setStatus('current')
docsPnmCmtsUtscCfgSid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgSid.setStatus('current')
docsPnmCmtsUtscCfgCmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgCmMacAddr.setStatus('current')
docsPnmCmtsUtscCfgTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 7), TimeStamp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgTimestamp.setStatus('current')
docsPnmCmtsUtscCfgCenterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgCenterFreq.setStatus('current')
docsPnmCmtsUtscCfgSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgSpan.setStatus('current')
docsPnmCmtsUtscCfgNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgNumBins.setStatus('current')
docsPnmCmtsUtscCfgAveraging = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgAveraging.setStatus('current')
docsPnmCmtsUtscCfgFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgFilename.setStatus('current')
docsPnmCmtsUtscCfgQualifyCenterFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgQualifyCenterFreq.setStatus('current')
docsPnmCmtsUtscCfgQualifyBw = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgQualifyBw.setStatus('current')
docsPnmCmtsUtscCfgQualifyThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgQualifyThrshld.setStatus('current')
docsPnmCmtsUtscCfgWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("rectangular", 2), ("hann", 3), ("blackmanHarris", 4), ("hamming", 5), ("flatTop", 6), ("gaussian", 7), ("chebyshev", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgWindow.setStatus('current')
docsPnmCmtsUtscCfgOutputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("timeIQ", 1), ("fftPower", 2), ("rawAdc", 3), ("fftIQ", 4), ("fftAmplitude", 5), ("fftDb", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgOutputFormat.setStatus('current')
docsPnmCmtsUtscCfgRepeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgRepeatPeriod.setStatus('current')
docsPnmCmtsUtscCfgFreeRunDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgFreeRunDuration.setStatus('current')
docsPnmCmtsUtscCfgTriggerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgTriggerCount.setStatus('current')
docsPnmCmtsUtscCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 2, 1, 21), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCfgStatus.setStatus('current')
docsPnmCmtsUtscCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 3), )
if mibBuilder.loadTexts: docsPnmCmtsUtscCtrlTable.setStatus('current')
docsPnmCmtsUtscCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-PNM-MIB", "docsPnmCmtsUtscCfgIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUtscCtrlEntry.setStatus('current')
docsPnmCmtsUtscCtrlInitiateTest = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsPnmCmtsUtscCtrlInitiateTest.setStatus('current')
docsPnmCmtsUtscStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 4), )
if mibBuilder.loadTexts: docsPnmCmtsUtscStatusTable.setStatus('current')
docsPnmCmtsUtscStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-PNM-MIB", "docsPnmCmtsUtscCfgIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUtscStatusEntry.setStatus('current')
docsPnmCmtsUtscStatusMeasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 4, 1, 1), MeasStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscStatusMeasStatus.setStatus('current')
docsPnmCmtsUtscResultTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 5), )
if mibBuilder.loadTexts: docsPnmCmtsUtscResultTable.setStatus('current')
docsPnmCmtsUtscResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-PNM-MIB", "docsPnmCmtsUtscCfgIndex"))
if mibBuilder.loadTexts: docsPnmCmtsUtscResultEntry.setStatus('current')
docsPnmCmtsUtscResultSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscResultSampleRate.setStatus('current')
docsPnmCmtsUtscResultUsSampleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscResultUsSampleSize.setStatus('current')
docsPnmCmtsUtscResultSampleTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscResultSampleTimestamp.setStatus('current')
docsPnmCmtsUtscResultResolutionBw = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscResultResolutionBw.setStatus('current')
docsPnmCmtsUtscResultOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 1, 3, 10, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsPnmCmtsUtscResultOutput.setStatus('current')
docsPnmCmtsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 1, 1)).setObjects(("DOCS-PNM-MIB", "docsPnmBulkDataGroup"), ("DOCS-PNM-MIB", "docsPnmCmtsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsPnmCmtsCompliance = docsPnmCmtsCompliance.setStatus('current')
docsPnmCmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 1, 2)).setObjects(("DOCS-PNM-MIB", "docsPnmBulkDataGroup"), ("DOCS-PNM-MIB", "docsPnmCmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsPnmCmCompliance = docsPnmCmCompliance.setStatus('current')
docsPnmCmtsDeprecatedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 1, 3)).setObjects(("DOCS-PNM-MIB", "docsPnmCmtsDeprecatedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsPnmCmtsDeprecatedCompliance = docsPnmCmtsDeprecatedCompliance.setStatus('deprecated')
docsPnmBulkDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 2, 1)).setObjects(("DOCS-PNM-MIB", "docsPnmBulkDestIpAddrType"), ("DOCS-PNM-MIB", "docsPnmBulkDestIpAddr"), ("DOCS-PNM-MIB", "docsPnmBulkDestPath"), ("DOCS-PNM-MIB", "docsPnmBulkUploadControl"), ("DOCS-PNM-MIB", "docsPnmBulkFileName"), ("DOCS-PNM-MIB", "docsPnmBulkFileControl"), ("DOCS-PNM-MIB", "docsPnmBulkFileUploadStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsPnmBulkDataGroup = docsPnmBulkDataGroup.setStatus('current')
docsPnmCmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 2, 2)).setObjects(("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymTrigEnable"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymTrigGroupId"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymFirstActSubCarIdx"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymLastActSubCarIdx"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymRxWindowing"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymTransactionId"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymSampleRate"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymFftLength"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmSymCaptFileName"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmNprStartSubcar"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmNprStopSubcar"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmNprEnable"), ("DOCS-PNM-MIB", "docsPnmCmtsDsOfdmNprDuration"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeCmMacAddr"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeUseIdleSid"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbePreEqOn"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeEnable"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeTimeout"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeNumSymToCapt"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeMaxCaptSymbols"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeNumSamples"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeTimeStamp"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaAQProbeFileName"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseEnable"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseFreeRunDuration"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseStTrigLvl"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseEndTrigLvl"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseCenterFrq"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseMeasBw"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseNumEvtsCnted"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseLastEvtTimeStamp"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseLastEvtDuration"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseLastEvtAvgPwr"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsUsImpNoiseFileName"), ("DOCS-PNM-MIB", "docsPnmCmtsUsHistEnable"), ("DOCS-PNM-MIB", "docsPnmCmtsUsHistTimeOut"), ("DOCS-PNM-MIB", "docsPnmCmtsUsHistMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsUsHistFileName"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxPwrEnable"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxPwrPreEq"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxPwrNumAvgs"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxPwrOnePtSixPsd"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxPwrMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxMerEnable"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxMerCmMac"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxMerPreEq"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxMerNumAvgs"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxMerMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsUsOfdmaRxMerFileName"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqOpCode"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqProfileTest"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqMaxDuration"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqMaxCodewords"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqMaxUncorrectableCws"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqCwTaggingEnabled"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqNcpFields"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqMaxNcpCrcFails"), ("DOCS-PNM-MIB", "docsPnmCmtsOptReqStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsOptMerThreshCfgRxMerVsBitloadingTarget"), ("DOCS-PNM-MIB", "docsPnmCmtsOptMerThreshCfgRxMerMargin"), ("DOCS-PNM-MIB", "docsPnmCmtsOptMerThreshCfgStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsOptProfChgCfgDsProfList"), ("DOCS-PNM-MIB", "docsPnmCmtsOptProfChgCfgStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespFirstActiveSubcarrierNum"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespMerData"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespMerPassFailData"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespNumSubcarriersBelowThresh"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespSnrMarginData"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespCodewordCt"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespCorrectedCodewordCt"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespUncorrectableCodewordCt"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespNcpFieldCt"), ("DOCS-PNM-MIB", "docsPnmCmtsOptRespNcpCrcFailCt"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCapabTriggerMode"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCapabOutputFormat"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCapabWindow"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCapabDescription"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgLogicalChIfIndex"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgTriggerMode"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgMinislotCount"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgSid"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgCmMacAddr"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgTimestamp"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgCenterFreq"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgSpan"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgNumBins"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgAveraging"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgFilename"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgQualifyCenterFreq"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgQualifyBw"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgQualifyThrshld"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgWindow"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgOutputFormat"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgRepeatPeriod"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgFreeRunDuration"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgTriggerCount"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCfgStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscCtrlInitiateTest"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscStatusMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscResultSampleRate"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscResultUsSampleSize"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscResultSampleTimestamp"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscResultResolutionBw"), ("DOCS-PNM-MIB", "docsPnmCmtsUtscResultOutput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsPnmCmtsGroup = docsPnmCmtsGroup.setStatus('current')
docsPnmCmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 2, 3)).setObjects(("DOCS-PNM-MIB", "docsPnmCmCtlTest"), ("DOCS-PNM-MIB", "docsPnmCmCtlTestDuration"), ("DOCS-PNM-MIB", "docsPnmCmCtlStatus"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymTrigEnable"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymTrigEnableTimeout"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymTrigGroupId"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymRxWindowing"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymTransactionId"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymSampleRate"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymFftLength"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmSymCaptFileName"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefTrigEnable"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefAmpRipplePkToPk"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefAmpRippleRms"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefAmpSlope"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefGrpDelayRipplePkToPk"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefGrpDelayRippleRms"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefFileName"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefAmpMean"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefGrpDelaySlope"), ("DOCS-PNM-MIB", "docsPnmCmOfdmChEstCoefGrpDelayMean"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmModProfFileEnable"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmModProfMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmModProfFileName"), ("DOCS-PNM-MIB", "docsPnmCmDsConstDispTrigEnable"), ("DOCS-PNM-MIB", "docsPnmCmDsConstDispModOrderOffset"), ("DOCS-PNM-MIB", "docsPnmCmDsConstDispNumSampleSymb"), ("DOCS-PNM-MIB", "docsPnmCmDsConstDispSelModOrder"), ("DOCS-PNM-MIB", "docsPnmCmDsConstDispMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmDsConstDispFileName"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmRxMerFileEnable"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmRxMerPercentile"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmRxMerMean"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmRxMerStdDev"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmRxMerThrVal"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmRxMerThrHighestFreq"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmRxMerMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmRxMerFileName"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarProfileId"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarThrshldOffset"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarMeasEnable"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarNumSymPerSubCarToAvg"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarReqAvgMer"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarNumSubCarBelowThrshld"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarMeasuredAvgMer"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmMerMarAvgMerMargin"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmFecSumType"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmFecFileEnable"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmFecMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmFecFileName"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam16"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam64"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam128"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam256"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam512"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam1024"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam2048"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam4096"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam8192"), ("DOCS-PNM-MIB", "docsPnmCmDsOfdmReqMerQam16384"), ("DOCS-PNM-MIB", "docsPnmCmDsHistEnable"), ("DOCS-PNM-MIB", "docsPnmCmDsHistTimeOut"), ("DOCS-PNM-MIB", "docsPnmCmDsHistMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmDsHistFileName"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqFileEnable"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqAmpRipplePkToPk"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqAmpRippleRms"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqAmpSlope"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqGrpDelayRipplePkToPk"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqGrpDelayRippleRms"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqPreEqCoAdjStatus"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqLastUpdateFileName"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqFileName"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqAmpMean"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqGrpDelaySlope"), ("DOCS-PNM-MIB", "docsPnmCmUsPreEqGrpDelayMean"), ("DOCS-PNM-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdFileEnable"), ("DOCS-PNM-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdMeasStatus"), ("DOCS-PNM-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsPnmCmGroup = docsPnmCmGroup.setStatus('current')
docsPnmCmtsDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 27, 2, 2, 4)).setObjects(("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnEnable"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnTrigMode"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnMiniSlotCnt"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnSid"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnMiniSlotNum"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnCmMac"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnCenterFreq"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnSpan"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnNumberOfBins"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnMeasStatus"), ("DOCS-PNM-MIB", "docsPnmCmtsUsSpecAnFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsPnmCmtsDeprecatedGroup = docsPnmCmtsDeprecatedGroup.setStatus('deprecated')
mibBuilder.exportSymbols("DOCS-PNM-MIB", docsPnmCmtsUsImpNoiseFileName=docsPnmCmtsUsImpNoiseFileName, docsPnmCmtsOptProfChgCfgEntry=docsPnmCmtsOptProfChgCfgEntry, docsPnmCmDsOfdmRxMerStdDev=docsPnmCmDsOfdmRxMerStdDev, docsPnmCmDsOfdmSymCapEntry=docsPnmCmDsOfdmSymCapEntry, docsPnmCmtsUsHistMeasStatus=docsPnmCmtsUsHistMeasStatus, docsPnmCmtsUtscCfgIndex=docsPnmCmtsUtscCfgIndex, docsPnmCmtsUtscCfgTriggerCount=docsPnmCmtsUtscCfgTriggerCount, docsPnmCmDsOfdmFecSumType=docsPnmCmDsOfdmFecSumType, docsPnmCmDsOfdmSymMeasStatus=docsPnmCmDsOfdmSymMeasStatus, docsPnmCmtsDsOfdmNprDuration=docsPnmCmtsDsOfdmNprDuration, docsPnmCmtsUsOfdmaAQProbeFileName=docsPnmCmtsUsOfdmaAQProbeFileName, docsPnmCmtsOptRespCodewordCt=docsPnmCmtsOptRespCodewordCt, docsPnmCmtsGroup=docsPnmCmtsGroup, docsPnmCmtsDsOfdmNprEnable=docsPnmCmtsDsOfdmNprEnable, docsPnmCmtsUsOfdmaRxMerMeasStatus=docsPnmCmtsUsOfdmaRxMerMeasStatus, docsPnmCmUsPreEqAmpSlope=docsPnmCmUsPreEqAmpSlope, docsPnmCmDsOfdmSymSampleRate=docsPnmCmDsOfdmSymSampleRate, docsPnmCmtsOptRespFirstActiveSubcarrierNum=docsPnmCmtsOptRespFirstActiveSubcarrierNum, docsPnmCmtsDsOfdmSymSampleRate=docsPnmCmtsDsOfdmSymSampleRate, docsPnmCmtsUsOfdmaAQProbeUseIdleSid=docsPnmCmtsUsOfdmaAQProbeUseIdleSid, docsPnmCmtsUsOfdmaAQProbeEntry=docsPnmCmtsUsOfdmaAQProbeEntry, docsPnmCmtsUtscCfgCenterFreq=docsPnmCmtsUtscCfgCenterFreq, docsPnmCmtsUtscResultOutput=docsPnmCmtsUtscResultOutput, docsPnmCmUsPreEqTable=docsPnmCmUsPreEqTable, docsPnmCmtsUtscCfgMinislotCount=docsPnmCmtsUtscCfgMinislotCount, docsPnmCmDsOfdmReqMerQam64=docsPnmCmDsOfdmReqMerQam64, docsPnmCmtsUsOfdmaAQProbeTimeStamp=docsPnmCmtsUsOfdmaAQProbeTimeStamp, docsPnmCmDsHistEntry=docsPnmCmDsHistEntry, docsPnmCmtsOptMerThreshCfgRxMerVsBitloadingTarget=docsPnmCmtsOptMerThreshCfgRxMerVsBitloadingTarget, docsPnmCmtsOptReqStatus=docsPnmCmtsOptReqStatus, docsPnmCmtsUsImpNoiseEnable=docsPnmCmtsUsImpNoiseEnable, docsPnmCmtsOptRespUncorrectableCodewordCt=docsPnmCmtsOptRespUncorrectableCodewordCt, PYSNMP_MODULE_ID=docsPnmMIB, docsPnmMibObjects=docsPnmMibObjects, UsOfdmaWindowingSizeType=UsOfdmaWindowingSizeType, docsPnmCmtsUtscCfgFilename=docsPnmCmtsUtscCfgFilename, docsPnmCmDsHistFileName=docsPnmCmDsHistFileName, docsPnmCmDsOfdmModProfTable=docsPnmCmDsOfdmModProfTable, docsPnmCmtsUsOfdmaRxPwrPreEq=docsPnmCmtsUsOfdmaRxPwrPreEq, docsPnmCmtsUsOfdmaRxMerNumAvgs=docsPnmCmtsUsOfdmaRxMerNumAvgs, docsPnmCmtsCompliance=docsPnmCmtsCompliance, docsPnmCmtsUsImpNoiseLastEvtAvgPwr=docsPnmCmtsUsImpNoiseLastEvtAvgPwr, docsPnmCmtsDsOfdmNprStartSubcar=docsPnmCmtsDsOfdmNprStartSubcar, docsPnmCmCtlStatus=docsPnmCmCtlStatus, docsPnmBulkDataGroup=docsPnmBulkDataGroup, docsPnmCmtsUsOfdmaRxMerEntry=docsPnmCmtsUsOfdmaRxMerEntry, docsPnmCmtsUtscCfgTriggerMode=docsPnmCmtsUtscCfgTriggerMode, docsPnmCmUsPreEqAmpRipplePkToPk=docsPnmCmUsPreEqAmpRipplePkToPk, docsPnmCmtsOptReqDsOfdmProfCfgId=docsPnmCmtsOptReqDsOfdmProfCfgId, docsPnmCmtsUtscCapabDescription=docsPnmCmtsUtscCapabDescription, docsPnmCmtsUsOfdmaRxMerCmMac=docsPnmCmtsUsOfdmaRxMerCmMac, docsPnmCmDsOfdmMerMarMeasStatus=docsPnmCmDsOfdmMerMarMeasStatus, docsPnmCmtsDsOfdmSymFirstActSubCarIdx=docsPnmCmtsDsOfdmSymFirstActSubCarIdx, docsPnmCmtsUsSpecAnCenterFreq=docsPnmCmtsUsSpecAnCenterFreq, docsPnmCmtsUtscCfgStatus=docsPnmCmtsUtscCfgStatus, docsPnmCmtsUtscCtrlInitiateTest=docsPnmCmtsUtscCtrlInitiateTest, docsPnmCmDsOfdmRxMerFileName=docsPnmCmDsOfdmRxMerFileName, docsPnmCmtsUsImpNoiseEntry=docsPnmCmtsUsImpNoiseEntry, docsPnmCmtsUsSpecAnMiniSlotNum=docsPnmCmtsUsSpecAnMiniSlotNum, docsPnmCmDsOfdmSymFftLength=docsPnmCmDsOfdmSymFftLength, docsPnmCmOfdmChEstCoefMeasStatus=docsPnmCmOfdmChEstCoefMeasStatus, docsPnmCmDsOfdmReqMerQam16=docsPnmCmDsOfdmReqMerQam16, docsPnmCmDsOfdmRxMerTable=docsPnmCmDsOfdmRxMerTable, docsPnmCmtsUsImpNoiseNumEvtsCnted=docsPnmCmtsUsImpNoiseNumEvtsCnted, docsPnmCmDsOfdmReqMerQam1024=docsPnmCmDsOfdmReqMerQam1024, docsPnmCmtsUsSpecAnMiniSlotCnt=docsPnmCmtsUsSpecAnMiniSlotCnt, docsPnmCmtsOptReqProfileTest=docsPnmCmtsOptReqProfileTest, docsPnmCmtsOptReqNcpFields=docsPnmCmtsOptReqNcpFields, docsPnmCmtsUsOfdmaRxPwrEnable=docsPnmCmtsUsOfdmaRxPwrEnable, docsPnmCmCompliance=docsPnmCmCompliance, docsPnmCmtsDsOfdmNoisePwrRatioEntry=docsPnmCmtsDsOfdmNoisePwrRatioEntry, docsPnmCmtsDsOfdmSymTrigEnable=docsPnmCmtsDsOfdmSymTrigEnable, docsPnmCmtsOptReqDsOfdmChanCfgIndex=docsPnmCmtsOptReqDsOfdmChanCfgIndex, docsPnmCmtsOptRespMerData=docsPnmCmtsOptRespMerData, docsPnmCmtsDeprecatedCompliance=docsPnmCmtsDeprecatedCompliance, docsPnmBulkFileIndex=docsPnmBulkFileIndex, docsPnmCmDsOfdmReqMERObjects=docsPnmCmDsOfdmReqMERObjects, docsPnmCmtsUsHistEnable=docsPnmCmtsUsHistEnable, docsPnmCmtsUsOfdmaAQProbeTable=docsPnmCmtsUsOfdmaAQProbeTable, docsPnmCmtsUsOfdmaAQProbeNumSymToCapt=docsPnmCmtsUsOfdmaAQProbeNumSymToCapt, docsPnmCmOfdmChEstCoefTrigEnable=docsPnmCmOfdmChEstCoefTrigEnable, docsPnmCmDsOfdmMerMarEntry=docsPnmCmDsOfdmMerMarEntry, docsPnmCmDsOfdmMerMarThrshldOffset=docsPnmCmDsOfdmMerMarThrshldOffset, docsPnmCmtsOptRespNcpFieldCt=docsPnmCmtsOptRespNcpFieldCt, docsPnmCmtsDsOfdmSymFftLength=docsPnmCmtsDsOfdmSymFftLength, docsPnmCmDsConstDispFileName=docsPnmCmDsConstDispFileName, docsPnmCmtsDsOfdmSymCaptFileName=docsPnmCmtsDsOfdmSymCaptFileName, docsPnmCmtsUsHistFileName=docsPnmCmtsUsHistFileName, docsPnmCmtsOptMerThreshCfgModOrder=docsPnmCmtsOptMerThreshCfgModOrder, docsPnmCmtsUtscCapabEntry=docsPnmCmtsUtscCapabEntry, docsPnmCmOfdmChEstCoefAmpRipplePkToPk=docsPnmCmOfdmChEstCoefAmpRipplePkToPk, docsPnmCmDsConstDispMeasTable=docsPnmCmDsConstDispMeasTable, docsPnmCmDsOfdmRxMerEntry=docsPnmCmDsOfdmRxMerEntry, docsPnmCmUsPreEqGrpDelayMean=docsPnmCmUsPreEqGrpDelayMean, docsPnmCmtsUtscResultTable=docsPnmCmtsUtscResultTable, docsPnmCmtsOptRespNcpCrcFailCt=docsPnmCmtsOptRespNcpCrcFailCt, docsPnmCmtsUtscCapabWindow=docsPnmCmtsUtscCapabWindow, docsPnmCmControlObjects=docsPnmCmControlObjects, docsPnmCmDsOfdmSymCaptFileName=docsPnmCmDsOfdmSymCaptFileName, docsPnmCmDsOfdmReqMerQam2048=docsPnmCmDsOfdmReqMerQam2048, docsPnmCmUsPreEqGrpDelayRipplePkToPk=docsPnmCmUsPreEqGrpDelayRipplePkToPk, docsPnmCmDsOfdmModProfFileEnable=docsPnmCmDsOfdmModProfFileEnable, docsPnmCmtsUsImpNoiseStTrigLvl=docsPnmCmtsUsImpNoiseStTrigLvl, docsIf3CmSpectrumAnalysisCtrlCmdFileName=docsIf3CmSpectrumAnalysisCtrlCmdFileName, docsPnmCmOfdmChEstCoefAmpSlope=docsPnmCmOfdmChEstCoefAmpSlope, docsPnmCmtsUsOfdmaAQProbeMaxCaptSymbols=docsPnmCmtsUsOfdmaAQProbeMaxCaptSymbols, docsPnmCmtsOptMerThreshCfgTable=docsPnmCmtsOptMerThreshCfgTable, docsPnmCmtsDsOfdmSymLastActSubCarIdx=docsPnmCmtsDsOfdmSymLastActSubCarIdx, docsPnmCmDsOfdmRxMerMeasStatus=docsPnmCmDsOfdmRxMerMeasStatus, docsPnmCmUsPreEqLastUpdateFileName=docsPnmCmUsPreEqLastUpdateFileName, docsPnmCmtsUtscResultResolutionBw=docsPnmCmtsUtscResultResolutionBw, docsPnmBulkFileName=docsPnmBulkFileName, docsPnmBulkUploadControl=docsPnmBulkUploadControl, docsPnmCmDsOfdmMerMarTable=docsPnmCmDsOfdmMerMarTable, docsPnmCmtsUtscCfgNumBins=docsPnmCmtsUtscCfgNumBins, docsPnmCmtsUsSpecAnFileName=docsPnmCmtsUsSpecAnFileName, docsPnmCmtsUtscCfgWindow=docsPnmCmtsUtscCfgWindow, docsPnmCmtsUtscStatusMeasStatus=docsPnmCmtsUtscStatusMeasStatus, docsPnmCmDsConstDispNumSampleSymb=docsPnmCmDsConstDispNumSampleSymb, docsPnmCmtsOptMerThreshCfgEntry=docsPnmCmtsOptMerThreshCfgEntry, docsIf3CmSpectrumAnalysisCtrlCmdFileEnable=docsIf3CmSpectrumAnalysisCtrlCmdFileEnable, docsPnmBulkFileTable=docsPnmBulkFileTable, docsPnmCmDsConstDispMeasStatus=docsPnmCmDsConstDispMeasStatus, docsPnmCmUsPreEqPreEqCoAdjStatus=docsPnmCmUsPreEqPreEqCoAdjStatus, docsPnmCmtsOptObjects=docsPnmCmtsOptObjects, docsPnmCmtsUtscObjects=docsPnmCmtsUtscObjects, docsPnmCmtsUsOfdmaRxMerEnable=docsPnmCmtsUsOfdmaRxMerEnable, docsPnmCmtsOptReqTable=docsPnmCmtsOptReqTable, docsPnmCmtsDsOfdmSymRxWindowing=docsPnmCmtsDsOfdmSymRxWindowing, MeasStatusType=MeasStatusType, docsPnmCmDsConstDispMeasEntry=docsPnmCmDsConstDispMeasEntry, docsPnmCmDsOfdmSymTrigGroupId=docsPnmCmDsOfdmSymTrigGroupId, docsPnmCmtsUtscCfgAveraging=docsPnmCmtsUtscCfgAveraging, docsPnmCmDsOfdmFecEntry=docsPnmCmDsOfdmFecEntry, docsPnmCmDsOfdmRxMerPercentile=docsPnmCmDsOfdmRxMerPercentile, docsPnmCmtsUsOfdmaRxMerPreEq=docsPnmCmtsUsOfdmaRxMerPreEq, docsPnmBulkFileEntry=docsPnmBulkFileEntry, docsPnmCmOfdmChanEstCoefEntry=docsPnmCmOfdmChanEstCoefEntry, docsPnmCmtsUsSpecAnEnable=docsPnmCmtsUsSpecAnEnable, docsPnmCmtsOptReqCwTaggingEnabled=docsPnmCmtsOptReqCwTaggingEnabled, docsPnmCmtsOptRespStatus=docsPnmCmtsOptRespStatus, docsPnmMIB=docsPnmMIB, docsPnmCmtsDsOfdmSymTrigGroupId=docsPnmCmtsDsOfdmSymTrigGroupId, ThousandthdB=ThousandthdB, docsPnmCmDsOfdmReqMerQam256=docsPnmCmDsOfdmReqMerQam256, docsPnmCmOfdmChEstCoefGrpDelaySlope=docsPnmCmOfdmChEstCoefGrpDelaySlope, docsPnmCmtsUtscResultSampleTimestamp=docsPnmCmtsUtscResultSampleTimestamp, docsPnmCmtsObjects=docsPnmCmtsObjects, docsPnmCmtsUsOfdmaRxPwrCmMac=docsPnmCmtsUsOfdmaRxPwrCmMac, docsPnmCmtsUsImpNoiseTable=docsPnmCmtsUsImpNoiseTable, docsPnmCmtsOptReqMaxCodewords=docsPnmCmtsOptReqMaxCodewords, docsPnmCmtsUtscCfgCmMacAddr=docsPnmCmtsUtscCfgCmMacAddr, docsPnmCmCtlTestDuration=docsPnmCmCtlTestDuration, docsPnmCmtsDsOfdmNoisePwrRatioTable=docsPnmCmtsDsOfdmNoisePwrRatioTable, docsPnmCmtsOptReqOpCode=docsPnmCmtsOptReqOpCode, docsPnmCmDsOfdmSymTrigEnableTimeout=docsPnmCmDsOfdmSymTrigEnableTimeout, docsPnmCmtsOptReqEntry=docsPnmCmtsOptReqEntry, docsPnmBulkDestIpAddrType=docsPnmBulkDestIpAddrType, docsPnmCmtsUsImpNoiseFreeRunDuration=docsPnmCmtsUsImpNoiseFreeRunDuration, docsPnmCmtsUsOfdmaAQProbeTimeout=docsPnmCmtsUsOfdmaAQProbeTimeout, docsPnmCmtsUsSpecAnNumberOfBins=docsPnmCmtsUsSpecAnNumberOfBins, docsPnmCmDsConstDispSelModOrder=docsPnmCmDsConstDispSelModOrder, docsIf3CmSpectrumAnalysisCtrlCmdMeasStatus=docsIf3CmSpectrumAnalysisCtrlCmdMeasStatus, docsPnmBulkDestIpAddr=docsPnmBulkDestIpAddr, docsPnmCmtsUtscResultUsSampleSize=docsPnmCmtsUtscResultUsSampleSize, docsPnmCmDsOfdmReqMerQam8192=docsPnmCmDsOfdmReqMerQam8192, docsPnmCmOfdmChEstCoefGrpDelayRipplePkToPk=docsPnmCmOfdmChEstCoefGrpDelayRipplePkToPk, docsPnmCmDsOfdmReqMerQam128=docsPnmCmDsOfdmReqMerQam128, docsPnmCmDsHistTable=docsPnmCmDsHistTable, docsPnmCmtsUsOfdmaRxPwrTable=docsPnmCmtsUsOfdmaRxPwrTable, docsPnmCmtsUtscCfgSpan=docsPnmCmtsUtscCfgSpan, docsPnmCmtsUsOfdmaRxPwrMeasStatus=docsPnmCmtsUsOfdmaRxPwrMeasStatus, docsPnmCmDsOfdmReqMerQam512=docsPnmCmDsOfdmReqMerQam512, docsPnmBulkDestPath=docsPnmBulkDestPath, docsPnmCmtsUsImpNoiseEndTrigLvl=docsPnmCmtsUsImpNoiseEndTrigLvl, docsPnmCmDsOfdmMerMarAvgMerMargin=docsPnmCmDsOfdmMerMarAvgMerMargin, docsPnmCmtsDsOfdmSymCapTable=docsPnmCmtsDsOfdmSymCapTable, docsPnmCmtsUsSpecAnSpan=docsPnmCmtsUsSpecAnSpan, docsPnmCmOfdmChEstCoefAmpRippleRms=docsPnmCmOfdmChEstCoefAmpRippleRms, docsPnmCmOfdmChEstCoefFileName=docsPnmCmOfdmChEstCoefFileName, docsPnmCmDsOfdmFecTable=docsPnmCmDsOfdmFecTable, docsPnmCmOfdmChanEstCoefTable=docsPnmCmOfdmChanEstCoefTable, docsPnmCmUsPreEqGrpDelayRippleRms=docsPnmCmUsPreEqGrpDelayRippleRms, docsPnmCmtsUtscResultEntry=docsPnmCmtsUtscResultEntry, docsPnmCmtsOptRespSnrMarginData=docsPnmCmtsOptRespSnrMarginData, docsPnmCmDsOfdmModProfMeasStatus=docsPnmCmDsOfdmModProfMeasStatus, docsPnmCmDsOfdmReqMerQam4096=docsPnmCmDsOfdmReqMerQam4096, docsPnmCmDsOfdmFecFileName=docsPnmCmDsOfdmFecFileName, docsPnmCmDsOfdmRxMerThrHighestFreq=docsPnmCmDsOfdmRxMerThrHighestFreq, docsPnmCmtsUsOfdmaRxPwrEntry=docsPnmCmtsUsOfdmaRxPwrEntry, docsPnmCmtsUsOfdmaRxPwrOnePtSixPsd=docsPnmCmtsUsOfdmaRxPwrOnePtSixPsd, docsPnmCmtsOptReqMaxDuration=docsPnmCmtsOptReqMaxDuration, docsPnmCmDsOfdmRxMerFileEnable=docsPnmCmDsOfdmRxMerFileEnable, docsPnmCmDsOfdmFecFileEnable=docsPnmCmDsOfdmFecFileEnable, docsPnmCmDsOfdmSymRxWindowing=docsPnmCmDsOfdmSymRxWindowing, docsPnmCmtsUsOfdmaAQProbeNumSamples=docsPnmCmtsUsOfdmaAQProbeNumSamples, docsPnmCmtsOptReqMaxUncorrectableCws=docsPnmCmtsOptReqMaxUncorrectableCws, docsPnmCmOfdmChEstCoefGrpDelayRippleRms=docsPnmCmOfdmChEstCoefGrpDelayRippleRms, docsPnmCmDsOfdmModProfEntry=docsPnmCmDsOfdmModProfEntry, docsPnmCmtsOptProfChgCfgStatus=docsPnmCmtsOptProfChgCfgStatus, docsPnmCmtsOptRespCorrectedCodewordCt=docsPnmCmtsOptRespCorrectedCodewordCt, docsPnmCmtsUsOfdmaRxMerFileName=docsPnmCmtsUsOfdmaRxMerFileName, docsPnmCmDsOfdmRxMerMean=docsPnmCmDsOfdmRxMerMean, docsPnmCmDsOfdmMerMarMeasuredAvgMer=docsPnmCmDsOfdmMerMarMeasuredAvgMer, docsPnmCmtsOptRespMerPassFailData=docsPnmCmtsOptRespMerPassFailData, docsPnmCmtsUsOfdmaAQProbePreEqOn=docsPnmCmtsUsOfdmaAQProbePreEqOn, docsPnmCmtsUtscCapabOutputFormat=docsPnmCmtsUtscCapabOutputFormat, docsPnmCmtsOptMerThreshCfgStatus=docsPnmCmtsOptMerThreshCfgStatus, docsPnmCmUsPreEqGrpDelaySlope=docsPnmCmUsPreEqGrpDelaySlope, docsPnmCmDsOfdmMerMarMeasEnable=docsPnmCmDsOfdmMerMarMeasEnable, docsPnmCmtsUtscCfgQualifyThrshld=docsPnmCmtsUtscCfgQualifyThrshld, docsPnmCmGroup=docsPnmCmGroup, docsPnmCmtsOptRespNumSubcarriersBelowThresh=docsPnmCmtsOptRespNumSubcarriersBelowThresh, docsPnmCmtsUsHistTimeOut=docsPnmCmtsUsHistTimeOut, docsPnmCmtsUtscCapabTriggerMode=docsPnmCmtsUtscCapabTriggerMode, docsPnmBulkFileControl=docsPnmBulkFileControl, docsPnmCmUsPreEqMeasStatus=docsPnmCmUsPreEqMeasStatus, docsPnmBulkData=docsPnmBulkData, docsPnmCmtsDsOfdmSymMeasStatus=docsPnmCmtsDsOfdmSymMeasStatus, docsPnmCmtsUsImpNoiseCenterFrq=docsPnmCmtsUsImpNoiseCenterFrq, docsPnmCmtsUsHistTable=docsPnmCmtsUsHistTable, docsPnmCmtsUtscStatusTable=docsPnmCmtsUtscStatusTable, docsPnmCmtsUtscStatusEntry=docsPnmCmtsUtscStatusEntry, docsPnmCmDsConstDispModOrderOffset=docsPnmCmDsConstDispModOrderOffset, docsPnmCmtsOptProfChgCfgDsProfList=docsPnmCmtsOptProfChgCfgDsProfList, docsPnmCmDsOfdmFecMeasStatus=docsPnmCmDsOfdmFecMeasStatus, docsPnmBulkCtl=docsPnmBulkCtl, docsPnmCmDsHistMeasStatus=docsPnmCmDsHistMeasStatus, docsPnmCmtsUtscCfgOutputFormat=docsPnmCmtsUtscCfgOutputFormat, docsPnmCmUsPreEqFileEnable=docsPnmCmUsPreEqFileEnable, docsPnmBulkFileUploadStatus=docsPnmBulkFileUploadStatus, docsPnmCmOfdmChEstCoefAmpMean=docsPnmCmOfdmChEstCoefAmpMean, docsPnmCmDsConstDispTrigEnable=docsPnmCmDsConstDispTrigEnable, docsPnmCmDsOfdmMerMarProfileId=docsPnmCmDsOfdmMerMarProfileId, docsPnmCmDsOfdmMerMarNumSubCarBelowThrshld=docsPnmCmDsOfdmMerMarNumSubCarBelowThrshld, docsPnmCmtsOptMerThreshCfgRxMerMargin=docsPnmCmtsOptMerThreshCfgRxMerMargin, docsPnmMibConformance=docsPnmMibConformance, docsPnmCmCtlTest=docsPnmCmCtlTest, docsPnmCmUsPreEqFileName=docsPnmCmUsPreEqFileName, docsPnmCmtsDsOfdmSymTransactionId=docsPnmCmtsDsOfdmSymTransactionId, docsPnmCmtsUsSpecAnCmMac=docsPnmCmtsUsSpecAnCmMac, docsPnmCmtsOptRespEntry=docsPnmCmtsOptRespEntry, docsPnmCmtsUtscCapabTable=docsPnmCmtsUtscCapabTable, docsPnmCmtsUsImpNoiseLastEvtDuration=docsPnmCmtsUsImpNoiseLastEvtDuration, docsPnmCmtsUsImpNoiseMeasStatus=docsPnmCmtsUsImpNoiseMeasStatus, docsPnmCmDsOfdmSymCapTable=docsPnmCmDsOfdmSymCapTable, docsPnmCmtsUtscCfgSid=docsPnmCmtsUtscCfgSid, docsPnmCmOfdmChEstCoefGrpDelayMean=docsPnmCmOfdmChEstCoefGrpDelayMean, docsPnmCmtsUsImpNoiseMeasBw=docsPnmCmtsUsImpNoiseMeasBw, docsPnmCmtsUtscCfgQualifyCenterFreq=docsPnmCmtsUtscCfgQualifyCenterFreq, docsPnmNotifications=docsPnmNotifications, docsPnmCmtsUtscCtrlEntry=docsPnmCmtsUtscCtrlEntry, docsPnmCmtsUsSpecAnEntry=docsPnmCmtsUsSpecAnEntry, docsPnmCmtsUsSpecAnSid=docsPnmCmtsUsSpecAnSid)
mibBuilder.exportSymbols("DOCS-PNM-MIB", docsPnmCmUsPreEqEntry=docsPnmCmUsPreEqEntry, docsPnmCmtsUsHistEntry=docsPnmCmtsUsHistEntry, docsPnmCmDsOfdmReqMerQam16384=docsPnmCmDsOfdmReqMerQam16384, docsPnmCmtsUtscCfgRepeatPeriod=docsPnmCmtsUtscCfgRepeatPeriod, docsPnmCmtsOptProfChgCfgTable=docsPnmCmtsOptProfChgCfgTable, docsPnmCmtsUsOfdmaRxMerTable=docsPnmCmtsUsOfdmaRxMerTable, docsPnmCmtsOptRespTable=docsPnmCmtsOptRespTable, docsPnmCmDsOfdmSymTrigEnable=docsPnmCmDsOfdmSymTrigEnable, docsPnmCmDsOfdmMerMarNumSymPerSubCarToAvg=docsPnmCmDsOfdmMerMarNumSymPerSubCarToAvg, docsPnmCmtsUsOfdmaAQProbeEnable=docsPnmCmtsUsOfdmaAQProbeEnable, docsPnmCmtsUsOfdmaAQProbeMeasStatus=docsPnmCmtsUsOfdmaAQProbeMeasStatus, docsPnmCmtsUsImpNoiseLastEvtTimeStamp=docsPnmCmtsUsImpNoiseLastEvtTimeStamp, docsPnmCmtsUsSpecAnTable=docsPnmCmtsUsSpecAnTable, docsPnmCmtsUtscCfgTable=docsPnmCmtsUtscCfgTable, docsPnmCmtsOptProfChgCfgIfIndex=docsPnmCmtsOptProfChgCfgIfIndex, docsPnmCmtsDsOfdmSymCapEntry=docsPnmCmtsDsOfdmSymCapEntry, docsPnmCmtsUtscCfgQualifyBw=docsPnmCmtsUtscCfgQualifyBw, docsPnmCmtsUsOfdmaAQProbeCmMacAddr=docsPnmCmtsUsOfdmaAQProbeCmMacAddr, docsPnmCmDsOfdmModProfFileName=docsPnmCmDsOfdmModProfFileName, docsPnmCmtsUtscCtrlTable=docsPnmCmtsUtscCtrlTable, docsPnmCmtsDeprecatedGroup=docsPnmCmtsDeprecatedGroup, docsPnmCmDsHistEnable=docsPnmCmDsHistEnable, docsPnmCmtsOptReqCmMacAddr=docsPnmCmtsOptReqCmMacAddr, docsPnmCmtsOptReqMaxNcpCrcFails=docsPnmCmtsOptReqMaxNcpCrcFails, docsPnmCmtsUtscCfgFreeRunDuration=docsPnmCmtsUtscCfgFreeRunDuration, docsPnmCmDsOfdmSymTransactionId=docsPnmCmDsOfdmSymTransactionId, docsPnmMibCompliances=docsPnmMibCompliances, docsPnmCmtsUtscCfgLogicalChIfIndex=docsPnmCmtsUtscCfgLogicalChIfIndex, docsPnmCmUsPreEqAmpRippleRms=docsPnmCmUsPreEqAmpRippleRms, docsPnmCmUsPreEqAmpMean=docsPnmCmUsPreEqAmpMean, docsPnmCmDsOfdmMerMarReqAvgMer=docsPnmCmDsOfdmMerMarReqAvgMer, docsPnmCmtsUsOfdmaRxPwrNumAvgs=docsPnmCmtsUsOfdmaRxPwrNumAvgs, docsPnmCmtsUtscCfgTimestamp=docsPnmCmtsUtscCfgTimestamp, docsPnmCmtsUsSpecAnMeasStatus=docsPnmCmtsUsSpecAnMeasStatus, docsPnmCmtsDsOfdmNprStopSubcar=docsPnmCmtsDsOfdmNprStopSubcar, docsPnmCmtsUtscCfgEntry=docsPnmCmtsUtscCfgEntry, docsPnmMibGroups=docsPnmMibGroups, docsPnmCmDsOfdmRxMerThrVal=docsPnmCmDsOfdmRxMerThrVal, docsPnmCmtsUtscResultSampleRate=docsPnmCmtsUtscResultSampleRate, docsPnmCmtsUsSpecAnTrigMode=docsPnmCmtsUsSpecAnTrigMode, docsPnmCmDsHistTimeOut=docsPnmCmDsHistTimeOut, docsPnmCmObjects=docsPnmCmObjects)
