#
# PySNMP MIB module HPN-ICF-MPLS-BGP-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-MPLS-BGP-VPN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:28:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
hpnicfMpls, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfMpls")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, ModuleIdentity, experimental, NotificationType, MibIdentifier, ObjectIdentity, TimeTicks, iso, Counter32, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "experimental", "NotificationType", "MibIdentifier", "ObjectIdentity", "TimeTicks", "iso", "Counter32", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Unsigned32")
StorageType, TimeStamp, DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TimeStamp", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
hpnicfMplsVpn = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3))
hpnicfMplsVpn.setRevisions(('2001-07-20 12:00', '2001-07-17 12:00', '2001-07-10 12:00', '2001-06-19 12:00', '2001-05-30 12:00', '2000-09-30 12:00',))
if mibBuilder.loadTexts: hpnicfMplsVpn.setLastUpdated('200107201200Z')
if mibBuilder.loadTexts: hpnicfMplsVpn.setOrganization('')
class HpnicfMplsVpnId(TextualConvention, OctetString):
    reference = "RFC 2685 [VPN-RFC2685] Fox B., et al, 'Virtual Private Networks Identifier', September 1999."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class HpnicfMplsVpnRouteDistinguisher(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

hpnicfmplsVpnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1))
hpnicfmplsVpnScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 1))
hpnicfmplsVpnConf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2))
hpnicfmplsVpnRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3))
hpnicfmplsVpnConfiguredVrfs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnConfiguredVrfs.setStatus('current')
hpnicfmplsVpnActiveVrfs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnActiveVrfs.setStatus('current')
hpnicfmplsVpnInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfmplsVpnInterfaceConfTable.setStatus('current')
hpnicfmplsVpnInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfName"), (0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnInterfaceConfIndex"))
if mibBuilder.loadTexts: hpnicfmplsVpnInterfaceConfEntry.setStatus('current')
hpnicfmplsVpnInterfaceConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnInterfaceConfIndex.setStatus('current')
hpnicfmplsVpnInterfaceLabelEdgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("providerEdge", 1), ("customerEdge", 2))).clone('providerEdge')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnInterfaceLabelEdgeType.setStatus('current')
hpnicfmplsVpnInterfaceVpnClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("carrierOfCarrier", 1), ("enterprise", 2), ("interProvider", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnInterfaceVpnClassification.setStatus('current')
hpnicfmplsVpnInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnInterfaceIpAddress.setStatus('current')
hpnicfmplsVpnInterfaceIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnInterfaceIpAddressMask.setStatus('current')
hpnicfmplsVpnInterfaceConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnInterfaceConfRowStatus.setStatus('current')
hpnicfmplsVpnVrfConfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfmplsVpnVrfConfTable.setStatus('current')
hpnicfmplsVpnVrfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfName"))
if mibBuilder.loadTexts: hpnicfmplsVpnVrfConfEntry.setStatus('current')
hpnicfmplsVpnVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 1), HpnicfMplsVpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfName.setStatus('current')
hpnicfmplsVpnVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 2), HpnicfMplsVpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteDistinguisher.setStatus('current')
hpnicfmplsVpnVrfNetPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("isis", 4), ("bgp", 5), ("static", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfNetPrefixType.setStatus('current')
hpnicfmplsVpnVrfNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfNetPrefix.setStatus('current')
hpnicfmplsVpnVrfIpRouteRedistributeConn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfIpRouteRedistributeConn.setStatus('current')
hpnicfmplsVpnVrfIpRouteRedistributeStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfIpRouteRedistributeStatic.setStatus('current')
hpnicfmplsVpnVrfIpRouteRedistributeRip = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfIpRouteRedistributeRip.setStatus('current')
hpnicfmplsVpnVrfConfHighRouteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfConfHighRouteThreshold.setStatus('current')
hpnicfmplsVpnVrfConfIsWarnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfConfIsWarnOnly.setStatus('current')
hpnicfmplsVpnVrfConfMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfConfMaxRoutes.setStatus('current')
hpnicfmplsVpnVrfConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfConfRowStatus.setStatus('current')
hpnicfmplsVpnVrfRouteTargetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 3), )
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteTargetTable.setStatus('current')
hpnicfmplsVpnVrfRouteTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfName"), (0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfRouteTarget"), (0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfRouteTargetType"))
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteTargetEntry.setStatus('current')
hpnicfmplsVpnVrfRouteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 3, 1, 1), HpnicfMplsVpnRouteDistinguisher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteTarget.setStatus('current')
hpnicfmplsVpnVrfRouteTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteTargetType.setStatus('current')
hpnicfmplsVpnVrfRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteTargetRowStatus.setStatus('current')
hpnicfmplsVpnVrfBgpNbrAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 4), )
if mibBuilder.loadTexts: hpnicfmplsVpnVrfBgpNbrAddrTable.setStatus('current')
hpnicfmplsVpnVrfBgpNbrAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfName"), (0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfBgpNbrAddr"))
if mibBuilder.loadTexts: hpnicfmplsVpnVrfBgpNbrAddrEntry.setStatus('current')
hpnicfmplsVpnVrfBgpNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 4, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfBgpNbrAddr.setStatus('current')
hpnicfmplsVpnVrfBgpNbrRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ce", 1), ("pe", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfBgpNbrRole.setStatus('current')
hpnicfmplsVpnVrfBgpNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfBgpNbrType.setStatus('current')
hpnicfmplsVpnVrfBgpNbrAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfBgpNbrAsNumber.setStatus('current')
hpnicfmplsVpnVrfBgpNbrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mplsVpnVrfBgpNbrSetUp", 1), ("mplsVpnVrfBgpNbrSetDown", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfBgpNbrAdminStatus.setStatus('current')
hpnicfmplsVpnVrfBgpNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfBgpNbrRowStatus.setStatus('current')
hpnicfmplsVpnVrfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3, 1), )
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteTable.setStatus('current')
hpnicfmplsVpnVrfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfName"), (0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfRouteDest"), (0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfRouteMask"), (0, "HPN-ICF-MPLS-BGP-VPN-MIB", "hpnicfmplsVpnVrfRouteNextHop"))
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteEntry.setStatus('current')
hpnicfmplsVpnVrfRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3, 1, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteDest.setStatus('current')
hpnicfmplsVpnVrfRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3, 1, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteMask.setStatus('current')
hpnicfmplsVpnVrfRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteNextHop.setStatus('current')
hpnicfmplsVpnVrfRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3, 1, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteIfIndex.setStatus('current')
hpnicfmplsVpnVrfRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteProto.setStatus('current')
hpnicfmplsVpnVrfRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 3, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsVpnVrfRouteRowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-MPLS-BGP-VPN-MIB", hpnicfmplsVpnVrfRouteRowStatus=hpnicfmplsVpnVrfRouteRowStatus, hpnicfmplsVpnVrfRouteDistinguisher=hpnicfmplsVpnVrfRouteDistinguisher, hpnicfmplsVpnInterfaceIpAddress=hpnicfmplsVpnInterfaceIpAddress, hpnicfmplsVpnVrfConfMaxRoutes=hpnicfmplsVpnVrfConfMaxRoutes, hpnicfmplsVpnInterfaceIpAddressMask=hpnicfmplsVpnInterfaceIpAddressMask, hpnicfmplsVpnVrfIpRouteRedistributeStatic=hpnicfmplsVpnVrfIpRouteRedistributeStatic, hpnicfmplsVpnVrfRouteEntry=hpnicfmplsVpnVrfRouteEntry, HpnicfMplsVpnRouteDistinguisher=HpnicfMplsVpnRouteDistinguisher, hpnicfmplsVpnVrfConfRowStatus=hpnicfmplsVpnVrfConfRowStatus, hpnicfmplsVpnVrfNetPrefix=hpnicfmplsVpnVrfNetPrefix, hpnicfmplsVpnVrfBgpNbrAddrEntry=hpnicfmplsVpnVrfBgpNbrAddrEntry, hpnicfmplsVpnRoute=hpnicfmplsVpnRoute, hpnicfmplsVpnActiveVrfs=hpnicfmplsVpnActiveVrfs, hpnicfmplsVpnVrfConfEntry=hpnicfmplsVpnVrfConfEntry, hpnicfmplsVpnConf=hpnicfmplsVpnConf, hpnicfmplsVpnVrfRouteTargetRowStatus=hpnicfmplsVpnVrfRouteTargetRowStatus, hpnicfmplsVpnVrfBgpNbrAdminStatus=hpnicfmplsVpnVrfBgpNbrAdminStatus, hpnicfmplsVpnVrfConfIsWarnOnly=hpnicfmplsVpnVrfConfIsWarnOnly, hpnicfmplsVpnVrfConfTable=hpnicfmplsVpnVrfConfTable, hpnicfmplsVpnInterfaceVpnClassification=hpnicfmplsVpnInterfaceVpnClassification, hpnicfmplsVpnVrfBgpNbrAddrTable=hpnicfmplsVpnVrfBgpNbrAddrTable, hpnicfmplsVpnInterfaceConfRowStatus=hpnicfmplsVpnInterfaceConfRowStatus, hpnicfmplsVpnVrfRouteIfIndex=hpnicfmplsVpnVrfRouteIfIndex, hpnicfmplsVpnVrfConfHighRouteThreshold=hpnicfmplsVpnVrfConfHighRouteThreshold, hpnicfmplsVpnVrfRouteMask=hpnicfmplsVpnVrfRouteMask, HpnicfMplsVpnId=HpnicfMplsVpnId, hpnicfmplsVpnVrfName=hpnicfmplsVpnVrfName, hpnicfmplsVpnInterfaceConfTable=hpnicfmplsVpnInterfaceConfTable, hpnicfmplsVpnVrfIpRouteRedistributeConn=hpnicfmplsVpnVrfIpRouteRedistributeConn, hpnicfmplsVpnVrfRouteNextHop=hpnicfmplsVpnVrfRouteNextHop, hpnicfmplsVpnInterfaceConfIndex=hpnicfmplsVpnInterfaceConfIndex, hpnicfmplsVpnVrfRouteProto=hpnicfmplsVpnVrfRouteProto, hpnicfmplsVpnVrfRouteTargetTable=hpnicfmplsVpnVrfRouteTargetTable, hpnicfmplsVpnVrfIpRouteRedistributeRip=hpnicfmplsVpnVrfIpRouteRedistributeRip, hpnicfmplsVpnVrfBgpNbrAddr=hpnicfmplsVpnVrfBgpNbrAddr, hpnicfmplsVpnVrfRouteDest=hpnicfmplsVpnVrfRouteDest, hpnicfmplsVpnVrfBgpNbrAsNumber=hpnicfmplsVpnVrfBgpNbrAsNumber, hpnicfmplsVpnVrfRouteTable=hpnicfmplsVpnVrfRouteTable, hpnicfmplsVpnVrfRouteTargetEntry=hpnicfmplsVpnVrfRouteTargetEntry, hpnicfmplsVpnObjects=hpnicfmplsVpnObjects, hpnicfmplsVpnInterfaceConfEntry=hpnicfmplsVpnInterfaceConfEntry, hpnicfmplsVpnScalars=hpnicfmplsVpnScalars, hpnicfmplsVpnConfiguredVrfs=hpnicfmplsVpnConfiguredVrfs, hpnicfmplsVpnVrfNetPrefixType=hpnicfmplsVpnVrfNetPrefixType, hpnicfmplsVpnVrfBgpNbrType=hpnicfmplsVpnVrfBgpNbrType, hpnicfmplsVpnVrfRouteTarget=hpnicfmplsVpnVrfRouteTarget, hpnicfmplsVpnVrfRouteTargetType=hpnicfmplsVpnVrfRouteTargetType, hpnicfmplsVpnVrfBgpNbrRole=hpnicfmplsVpnVrfBgpNbrRole, hpnicfMplsVpn=hpnicfMplsVpn, hpnicfmplsVpnInterfaceLabelEdgeType=hpnicfmplsVpnInterfaceLabelEdgeType, PYSNMP_MODULE_ID=hpnicfMplsVpn, hpnicfmplsVpnVrfBgpNbrRowStatus=hpnicfmplsVpnVrfBgpNbrRowStatus)
