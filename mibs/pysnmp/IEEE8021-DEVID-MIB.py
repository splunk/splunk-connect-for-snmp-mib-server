#
# PySNMP MIB module IEEE8021-DEVID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-DEVID-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
entPhysicalIndex, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "PhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, ObjectIdentity, IpAddress, Unsigned32, Integer32, Counter32, MibIdentifier, Bits, ModuleIdentity, Gauge32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "ObjectIdentity", "IpAddress", "Unsigned32", "Integer32", "Counter32", "MibIdentifier", "Bits", "ModuleIdentity", "Gauge32", "TimeTicks", "iso")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ieee8021DevIDMIB = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 17))
ieee8021DevIDMIB.setRevisions(('2009-06-25 00:00',))
if mibBuilder.loadTexts: ieee8021DevIDMIB.setLastUpdated('200906250000Z')
if mibBuilder.loadTexts: ieee8021DevIDMIB.setOrganization('IEEE 802.1 Working Group')
devIDMIBNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 0))
devIDMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1))
devIDMIBConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2))
class DevIDErrorStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("internalError", 2))

class DevIDAlgorithmIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("rsaEncryption", 1), ("idecPublicKey", 2))

devIDGlobalMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 1))
devIDMgmtMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 2))
devIDStatsMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 3))
devIDPublicKeyCount = MibScalar((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyCount.setStatus('current')
devIDPublicKeyTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2), )
if mibBuilder.loadTexts: devIDPublicKeyTable.setStatus('current')
devIDPublicKeyEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: devIDPublicKeyEntry.setStatus('current')
devIDPublicKeyIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: devIDPublicKeyIndex.setStatus('current')
devIDPublicKeyEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devIDPublicKeyEnabled.setStatus('current')
devIDPublicKeyAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 3), DevIDAlgorithmIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyAlgorithm.setStatus('current')
devIDPublicKeyPubkeySHA1Hash = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyPubkeySHA1Hash.setStatus('current')
devIDPublicKeyErrStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 5), DevIDErrorStatus().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyErrStatus.setStatus('current')
devIDCredentialCount = MibScalar((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialCount.setStatus('current')
devIDCredentialTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4), )
if mibBuilder.loadTexts: devIDCredentialTable.setStatus('current')
devIDCredentialEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1), ).setIndexNames((0, "IEEE8021-DEVID-MIB", "devIDCredentialIndex"))
if mibBuilder.loadTexts: devIDCredentialEntry.setStatus('current')
devIDCredentialIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: devIDCredentialIndex.setStatus('current')
devIDCredentialEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devIDCredentialEnabled.setStatus('current')
devIDCredentialSHA1Hash = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSHA1Hash.setStatus('current')
devIDCredentialSerialNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSerialNumber.setStatus('current')
devIDCredentialIssuer = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialIssuer.setStatus('current')
devIDCredentialSubject = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSubject.setStatus('current')
devIDCredentialSubjectAltName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSubjectAltName.setStatus('current')
devIDCredentialEntityIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 8), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialEntityIndex.setStatus('current')
devIDCredentialPubkeyIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialPubkeyIndex.setStatus('current')
devIDCredentialErrStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 10), DevIDErrorStatus().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialErrStatus.setStatus('current')
devIDStatisticsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5), )
if mibBuilder.loadTexts: devIDStatisticsTable.setStatus('current')
devIDStatisticsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: devIDStatisticsEntry.setStatus('current')
devIDStatisticKeyGenerationCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyGenerationCount.setStatus('current')
devIDStatisticKeyInsertionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyInsertionCount.setStatus('current')
devIDStatisticKeyDeletionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyDeletionCount.setStatus('current')
devIDStatisticCSRGenerationCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCSRGenerationCount.setStatus('current')
devIDStatisticCredentialInsertionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCredentialInsertionCount.setStatus('current')
devIDStatisticCredentialDeletionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCredentialDeletionCount.setStatus('current')
devIDMIBCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2, 1))
devIDMIBGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2, 2))
devIDMIBModuleCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 17, 2, 1, 1)).setObjects(("IEEE8021-DEVID-MIB", "devIDMIBObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBModuleCompliance = devIDMIBModuleCompliance.setStatus('current')
devIDMIBObjectGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 17, 2, 2, 1)).setObjects(("IEEE8021-DEVID-MIB", "devIDPublicKeyCount"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyEnabled"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyAlgorithm"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyPubkeySHA1Hash"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyErrStatus"), ("IEEE8021-DEVID-MIB", "devIDCredentialCount"), ("IEEE8021-DEVID-MIB", "devIDCredentialEnabled"), ("IEEE8021-DEVID-MIB", "devIDCredentialSHA1Hash"), ("IEEE8021-DEVID-MIB", "devIDCredentialSerialNumber"), ("IEEE8021-DEVID-MIB", "devIDCredentialIssuer"), ("IEEE8021-DEVID-MIB", "devIDCredentialSubject"), ("IEEE8021-DEVID-MIB", "devIDCredentialSubjectAltName"), ("IEEE8021-DEVID-MIB", "devIDCredentialEntityIndex"), ("IEEE8021-DEVID-MIB", "devIDCredentialPubkeyIndex"), ("IEEE8021-DEVID-MIB", "devIDCredentialErrStatus"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyGenerationCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyInsertionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyDeletionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCSRGenerationCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCredentialInsertionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCredentialDeletionCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBObjectGroup = devIDMIBObjectGroup.setStatus('current')
mibBuilder.exportSymbols("IEEE8021-DEVID-MIB", devIDCredentialEnabled=devIDCredentialEnabled, devIDCredentialPubkeyIndex=devIDCredentialPubkeyIndex, devIDMIBGroups=devIDMIBGroups, devIDMIBObjects=devIDMIBObjects, devIDStatsMIBObjects=devIDStatsMIBObjects, devIDCredentialEntityIndex=devIDCredentialEntityIndex, devIDMgmtMIBObjects=devIDMgmtMIBObjects, devIDPublicKeyErrStatus=devIDPublicKeyErrStatus, devIDPublicKeyAlgorithm=devIDPublicKeyAlgorithm, ieee8021DevIDMIB=ieee8021DevIDMIB, devIDStatisticCredentialDeletionCount=devIDStatisticCredentialDeletionCount, devIDCredentialTable=devIDCredentialTable, devIDCredentialEntry=devIDCredentialEntry, devIDCredentialSubject=devIDCredentialSubject, devIDStatisticsTable=devIDStatisticsTable, PYSNMP_MODULE_ID=ieee8021DevIDMIB, devIDStatisticKeyInsertionCount=devIDStatisticKeyInsertionCount, devIDCredentialIssuer=devIDCredentialIssuer, devIDGlobalMIBObjects=devIDGlobalMIBObjects, devIDPublicKeyPubkeySHA1Hash=devIDPublicKeyPubkeySHA1Hash, devIDMIBCompliances=devIDMIBCompliances, devIDMIBModuleCompliance=devIDMIBModuleCompliance, devIDCredentialIndex=devIDCredentialIndex, DevIDErrorStatus=DevIDErrorStatus, devIDPublicKeyCount=devIDPublicKeyCount, devIDCredentialSubjectAltName=devIDCredentialSubjectAltName, devIDStatisticCSRGenerationCount=devIDStatisticCSRGenerationCount, devIDMIBConformance=devIDMIBConformance, devIDPublicKeyTable=devIDPublicKeyTable, devIDCredentialSerialNumber=devIDCredentialSerialNumber, devIDPublicKeyEnabled=devIDPublicKeyEnabled, devIDStatisticsEntry=devIDStatisticsEntry, devIDCredentialCount=devIDCredentialCount, devIDPublicKeyEntry=devIDPublicKeyEntry, devIDStatisticKeyDeletionCount=devIDStatisticKeyDeletionCount, devIDMIBNotifications=devIDMIBNotifications, devIDCredentialErrStatus=devIDCredentialErrStatus, devIDPublicKeyIndex=devIDPublicKeyIndex, devIDMIBObjectGroup=devIDMIBObjectGroup, devIDCredentialSHA1Hash=devIDCredentialSHA1Hash, devIDStatisticKeyGenerationCount=devIDStatisticKeyGenerationCount, DevIDAlgorithmIdentifier=DevIDAlgorithmIdentifier, devIDStatisticCredentialInsertionCount=devIDStatisticCredentialInsertionCount)
