#
# PySNMP MIB module APPIAN-PPORT-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-SONET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:08:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AcSlotNumber, AcNodeId, AcAdminStatus, AcOpStatus, acPport, AcPortNumber = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcSlotNumber", "AcNodeId", "AcAdminStatus", "AcOpStatus", "acPport", "AcPortNumber")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, Integer32, Unsigned32, ObjectIdentity, MibIdentifier, Bits, NotificationType, Counter64, IpAddress, iso, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "Integer32", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Bits", "NotificationType", "Counter64", "IpAddress", "iso", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
acSonet = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6))
acSonet.setRevisions(('1900-02-23 16:00',))
if mibBuilder.loadTexts: acSonet.setLastUpdated('0002231600Z')
if mibBuilder.loadTexts: acSonet.setOrganization('Appian Communications, Inc.')
class AcTraceString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

acSonetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1))
acSonetObjectsPath = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2))
acSonetObjectsVT = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3))
acSonetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1))
acSonetSection = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2))
acSonetLine = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3))
acSonetFarEndLine = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4))
acSonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1))
acSonetFarEndPath = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2))
acSonetVT = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1))
acSonetFarEndVT = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2))
acSonetPortTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1), )
if mibBuilder.loadTexts: acSonetPortTable.setStatus('current')
acSonetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPortNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPortSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPortPort"))
if mibBuilder.loadTexts: acSonetPortEntry.setStatus('current')
acSonetPortNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortNodeId.setStatus('current')
acSonetPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortSlot.setStatus('current')
acSonetPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortPort.setStatus('current')
acSonetPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortAdminStatus.setStatus('current')
acSonetPortOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortOpStatus.setStatus('current')
acSonetPortOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortOpCode.setStatus('current')
acSonetPortMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2))).clone('sonet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortMediumType.setStatus('current')
acSonetPortTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortTimeElapsed.setStatus('current')
acSonetPortValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortValidIntervals.setStatus('current')
acSonetPortMediumLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b3zs", 2), ("cmi", 3), ("nrz", 4), ("rz", 5))).clone('nrz')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortMediumLineCoding.setStatus('current')
acSonetPortMediumLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("short-single", 2), ("long-single", 3), ("multi", 4), ("coax", 5), ("utp", 6), ("intermediate", 7))).clone('multi')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortMediumLineType.setStatus('current')
acSonetPortTransmitterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortTransmitterEnable.setStatus('current')
acSonetPortCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortCircuitIdentifier.setStatus('current')
acSonetPortInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortInvalidIntervals.setStatus('current')
acSonetPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("facility", 1), ("terminal", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortLoopbackConfig.setStatus('current')
acSonetPortResetCurrentPMregs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortResetCurrentPMregs.setStatus('current')
acSonetPortResetAllPMregs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortResetAllPMregs.setStatus('current')
acSonetPortConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ring", 1), ("interconnect", 2))).clone('interconnect')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortConnectionType.setStatus('current')
acSonetPortRingIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 19), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortRingIdentifier.setStatus('current')
acSonetPortRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortRingName.setStatus('current')
acSonetThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2), )
if mibBuilder.loadTexts: acSonetThresholdTable.setStatus('current')
acSonetThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetThresholdPort"))
if mibBuilder.loadTexts: acSonetThresholdEntry.setStatus('current')
acSonetThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetThresholdNodeId.setStatus('current')
acSonetThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetThresholdSlot.setStatus('current')
acSonetThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetThresholdPort.setStatus('current')
acSonetThresholdSESSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("bellcore", 2), ("ansi93", 3), ("itu", 4), ("ansi97", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetThresholdSESSet.setStatus('current')
acSonetDCCTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3), )
if mibBuilder.loadTexts: acSonetDCCTable.setStatus('current')
acSonetDCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetDCCNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetDCCSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetDCCPort"))
if mibBuilder.loadTexts: acSonetDCCEntry.setStatus('current')
acSonetDCCNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetDCCNodeId.setStatus('current')
acSonetDCCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetDCCSlot.setStatus('current')
acSonetDCCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetDCCPort.setStatus('current')
acSonetDCCSectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetDCCSectionEnable.setStatus('current')
acSonetDCCLineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetDCCLineEnable.setStatus('current')
acSonetDCCAppianEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetDCCAppianEnable.setStatus('current')
acSonetDCCSectionFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetDCCSectionFail.setStatus('current')
acSonetDCCLineFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetDCCLineFail.setStatus('current')
acSonetDCCAppianFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetDCCAppianFail.setStatus('current')
acSonetSection15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1), )
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalTable.setStatus('current')
acSonetSection15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSection15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSection15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSection15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSection15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalEntry.setStatus('current')
acSonetSection15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalNodeId.setStatus('current')
acSonetSection15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSlot.setStatus('current')
acSonetSection15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalPort.setStatus('current')
acSonetSection15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalNumber.setStatus('current')
acSonetSection15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalValidStats.setStatus('current')
acSonetSection15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalResetStats.setStatus('current')
acSonetSection15MinuteIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalStatus.setStatus('current')
acSonetSection15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalESs.setStatus('current')
acSonetSection15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSESs.setStatus('current')
acSonetSection15MinuteIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSEFSs.setStatus('current')
acSonetSection15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalCVs.setStatus('current')
acSonetSectionDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2), )
if mibBuilder.loadTexts: acSonetSectionDayIntervalTable.setStatus('current')
acSonetSectionDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetSectionDayIntervalEntry.setStatus('current')
acSonetSectionDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionDayIntervalNodeId.setStatus('current')
acSonetSectionDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionDayIntervalSlot.setStatus('current')
acSonetSectionDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionDayIntervalPort.setStatus('current')
acSonetSectionDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionDayIntervalNumber.setStatus('current')
acSonetSectionDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalValidStats.setStatus('current')
acSonetSectionDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionDayIntervalResetStats.setStatus('current')
acSonetSectionDayIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalStatus.setStatus('current')
acSonetSectionDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalESs.setStatus('current')
acSonetSectionDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalSESs.setStatus('current')
acSonetSectionDayIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalSEFSs.setStatus('current')
acSonetSectionDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalCVs.setStatus('current')
acSonetSectionThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3), )
if mibBuilder.loadTexts: acSonetSectionThresholdTable.setStatus('current')
acSonetSectionThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetSectionThresholdEntry.setStatus('current')
acSonetSectionThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionThresholdNodeId.setStatus('current')
acSonetSectionThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionThresholdSlot.setStatus('current')
acSonetSectionThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionThresholdPort.setStatus('current')
acSonetSectionThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionThresholdSelectionNum.setStatus('current')
acSonetSectionThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 5), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdAdminStatus.setStatus('deprecated')
acSonetSectionThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdESs.setStatus('current')
acSonetSectionThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdSESs.setStatus('current')
acSonetSectionThresholdSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdSEFSs.setStatus('current')
acSonetSectionThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdCVs.setStatus('current')
acSonetSectionTIMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4), )
if mibBuilder.loadTexts: acSonetSectionTIMTable.setStatus('current')
acSonetSectionTIMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionTIMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionTIMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionTIMPort"))
if mibBuilder.loadTexts: acSonetSectionTIMEntry.setStatus('current')
acSonetSectionTIMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionTIMNodeId.setStatus('current')
acSonetSectionTIMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionTIMSlot.setStatus('current')
acSonetSectionTIMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionTIMPort.setStatus('current')
acSonetSectionTIMGenerateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMGenerateEnable.setStatus('current')
acSonetSectionTIMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMDetectEnable.setStatus('current')
acSonetSectionTIMTransmitedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 6), AcTraceString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMTransmitedString.setStatus('current')
acSonetSectionTIMExpectedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 7), AcTraceString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMExpectedString.setStatus('current')
acSonetSectionTIMReceivedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 8), AcTraceString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionTIMReceivedString.setStatus('current')
acSonetSectionTIMFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionTIMFailure.setStatus('current')
acSonetSectionTIMFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("void", 0), ("t64", 1), ("t64-crlf", 2), ("t16", 3), ("t16-msb1", 4), ("t16-crc7", 5))).clone('void')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMFormat.setStatus('current')
acSonetSectionTIMMismatchZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMMismatchZeros.setStatus('current')
acSonetSectionSSMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5), )
if mibBuilder.loadTexts: acSonetSectionSSMTable.setStatus('current')
acSonetSectionSSMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionSSMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionSSMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionSSMPort"))
if mibBuilder.loadTexts: acSonetSectionSSMEntry.setStatus('current')
acSonetSectionSSMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionSSMNodeId.setStatus('current')
acSonetSectionSSMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionSSMSlot.setStatus('current')
acSonetSectionSSMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionSSMPort.setStatus('current')
acSonetSectionSSMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionSSMDetectEnable.setStatus('current')
acSonetSectionSSMTransmitedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionSSMTransmitedValue.setStatus('current')
acSonetSectionSSMReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionSSMReceivedValue.setStatus('current')
acSonetLine15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1), )
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalTable.setStatus('current')
acSonetLine15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetLine15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLine15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLine15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLine15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalEntry.setStatus('current')
acSonetLine15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalNodeId.setStatus('current')
acSonetLine15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalSlot.setStatus('current')
acSonetLine15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalPort.setStatus('current')
acSonetLine15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalNumber.setStatus('current')
acSonetLine15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalValidStats.setStatus('current')
acSonetLine15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalResetStats.setStatus('current')
acSonetLine15MinuteIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalStatus.setStatus('current')
acSonetLine15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalESs.setStatus('current')
acSonetLine15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalSESs.setStatus('current')
acSonetLine15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalCVs.setStatus('current')
acSonetLine15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalUASs.setStatus('current')
acSonetLine15MinuteIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalBER.setStatus('current')
acSonetLineDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2), )
if mibBuilder.loadTexts: acSonetLineDayIntervalTable.setStatus('current')
acSonetLineDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetLineDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetLineDayIntervalEntry.setStatus('current')
acSonetLineDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineDayIntervalNodeId.setStatus('current')
acSonetLineDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineDayIntervalSlot.setStatus('current')
acSonetLineDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineDayIntervalPort.setStatus('current')
acSonetLineDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineDayIntervalNumber.setStatus('current')
acSonetLineDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalValidStats.setStatus('current')
acSonetLineDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineDayIntervalResetStats.setStatus('current')
acSonetLineDayIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalStatus.setStatus('current')
acSonetLineDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalESs.setStatus('current')
acSonetLineDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalSESs.setStatus('current')
acSonetLineDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalCVs.setStatus('current')
acSonetLineDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalUASs.setStatus('current')
acSonetLineDayIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalBER.setStatus('deprecated')
acSonetLineThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3), )
if mibBuilder.loadTexts: acSonetLineThresholdTable.setStatus('current')
acSonetLineThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetLineThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetLineThresholdEntry.setStatus('current')
acSonetLineThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineThresholdNodeId.setStatus('current')
acSonetLineThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineThresholdSlot.setStatus('current')
acSonetLineThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineThresholdPort.setStatus('current')
acSonetLineThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineThresholdSelectionNum.setStatus('current')
acSonetLineThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 5), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdAdminStatus.setStatus('deprecated')
acSonetLineThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdESs.setStatus('current')
acSonetLineThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdSESs.setStatus('current')
acSonetLineThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdCVs.setStatus('current')
acSonetLineThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdUASs.setStatus('current')
acSonetFarEndLine15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1), )
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalTable.setStatus('current')
acSonetFarEndLine15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLine15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLine15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLine15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLine15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalEntry.setStatus('current')
acSonetFarEndLine15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalNodeId.setStatus('current')
acSonetFarEndLine15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalSlot.setStatus('current')
acSonetFarEndLine15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalPort.setStatus('current')
acSonetFarEndLine15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalNumber.setStatus('current')
acSonetFarEndLine15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalValidStats.setStatus('current')
acSonetFarEndLine15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalResetStats.setStatus('current')
acSonetFarEndLine15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalESs.setStatus('current')
acSonetFarEndLine15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalSESs.setStatus('current')
acSonetFarEndLine15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalCVs.setStatus('current')
acSonetFarEndLine15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalUASs.setStatus('current')
acSonetFarEndLineDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2), )
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalTable.setStatus('current')
acSonetFarEndLineDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalEntry.setStatus('current')
acSonetFarEndLineDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalNodeId.setStatus('current')
acSonetFarEndLineDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalSlot.setStatus('current')
acSonetFarEndLineDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalPort.setStatus('current')
acSonetFarEndLineDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalNumber.setStatus('current')
acSonetFarEndLineDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalValidStats.setStatus('current')
acSonetFarEndLineDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalResetStats.setStatus('current')
acSonetFarEndLineDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalESs.setStatus('current')
acSonetFarEndLineDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalSESs.setStatus('current')
acSonetFarEndLineDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalCVs.setStatus('current')
acSonetFarEndLineDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalUASs.setStatus('current')
acSonetFarEndLineThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3), )
if mibBuilder.loadTexts: acSonetFarEndLineThresholdTable.setStatus('current')
acSonetFarEndLineThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetFarEndLineThresholdEntry.setStatus('current')
acSonetFarEndLineThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdNodeId.setStatus('current')
acSonetFarEndLineThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSlot.setStatus('current')
acSonetFarEndLineThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdPort.setStatus('current')
acSonetFarEndLineThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSelectionNum.setStatus('current')
acSonetFarEndLineThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 5), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdAdminStatus.setStatus('deprecated')
acSonetFarEndLineThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdESs.setStatus('current')
acSonetFarEndLineThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSESs.setStatus('current')
acSonetFarEndLineThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdCVs.setStatus('current')
acSonetFarEndLineThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdUASs.setStatus('current')
acSonetPath15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1), )
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalTable.setStatus('current')
acSonetPath15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalEntry.setStatus('current')
acSonetPath15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalNodeId.setStatus('current')
acSonetPath15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalSlot.setStatus('current')
acSonetPath15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalPort.setStatus('current')
acSonetPath15MinuteIntervalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalPath.setStatus('current')
acSonetPath15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalNumber.setStatus('current')
acSonetPath15MinuteIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalStatus.setStatus('current')
acSonetPath15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalValidStats.setStatus('current')
acSonetPath15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalResetStats.setStatus('current')
acSonetPath15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalESs.setStatus('current')
acSonetPath15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalSESs.setStatus('current')
acSonetPath15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalCVs.setStatus('current')
acSonetPath15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalUASs.setStatus('current')
acSonetPath15MinuteIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalBER.setStatus('current')
acSonetPathDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2), )
if mibBuilder.loadTexts: acSonetPathDayIntervalTable.setStatus('current')
acSonetPathDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetPathDayIntervalEntry.setStatus('current')
acSonetPathDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalNodeId.setStatus('current')
acSonetPathDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalSlot.setStatus('current')
acSonetPathDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalPort.setStatus('current')
acSonetPathDayIntervalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalPath.setStatus('current')
acSonetPathDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalNumber.setStatus('current')
acSonetPathDayIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalStatus.setStatus('current')
acSonetPathDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalValidStats.setStatus('current')
acSonetPathDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathDayIntervalResetStats.setStatus('current')
acSonetPathDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalESs.setStatus('current')
acSonetPathDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalSESs.setStatus('current')
acSonetPathDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalCVs.setStatus('current')
acSonetPathDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalUASs.setStatus('current')
acSonetPathDayIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalBER.setStatus('deprecated')
acSonetPathThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3), )
if mibBuilder.loadTexts: acSonetPathThresholdTable.setStatus('current')
acSonetPathThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetPathThresholdEntry.setStatus('current')
acSonetPathThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdNodeId.setStatus('current')
acSonetPathThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdSlot.setStatus('current')
acSonetPathThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdPort.setStatus('current')
acSonetPathThresholdPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdPath.setStatus('current')
acSonetPathThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdSelectionNum.setStatus('current')
acSonetPathThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 6), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdAdminStatus.setStatus('deprecated')
acSonetPathThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdESs.setStatus('current')
acSonetPathThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdSESs.setStatus('current')
acSonetPathThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdCVs.setStatus('current')
acSonetPathThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdUASs.setStatus('current')
acSonetPathRDITable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4), )
if mibBuilder.loadTexts: acSonetPathRDITable.setStatus('current')
acSonetPathRDIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathRDINodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathRDISlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathRDIPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathRDIPath"))
if mibBuilder.loadTexts: acSonetPathRDIEntry.setStatus('current')
acSonetPathRDINodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathRDINodeId.setStatus('current')
acSonetPathRDISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathRDISlot.setStatus('current')
acSonetPathRDIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathRDIPort.setStatus('current')
acSonetPathRDIPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathRDIPath.setStatus('current')
acSonetPathRDIOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rdi", 1), ("erdi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathRDIOpMode.setStatus('current')
acSonetPathTIMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5), )
if mibBuilder.loadTexts: acSonetPathTIMTable.setStatus('current')
acSonetPathTIMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathTIMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathTIMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathTIMPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathTIMPath"))
if mibBuilder.loadTexts: acSonetPathTIMEntry.setStatus('current')
acSonetPathTIMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathTIMNodeId.setStatus('current')
acSonetPathTIMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathTIMSlot.setStatus('current')
acSonetPathTIMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathTIMPort.setStatus('current')
acSonetPathTIMPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathTIMPath.setStatus('current')
acSonetPathTIMGenerateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMGenerateEnable.setStatus('current')
acSonetPathTIMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMDetectEnable.setStatus('current')
acSonetPathTIMTransmitedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 7), AcTraceString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMTransmitedString.setStatus('current')
acSonetPathTIMExpectedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 8), AcTraceString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMExpectedString.setStatus('current')
acSonetPathTIMReceivedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 9), AcTraceString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathTIMReceivedString.setStatus('current')
acSonetPathTIMFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathTIMFailure.setStatus('current')
acSonetPathTIMFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("void", 0), ("t64", 1), ("t64-crlf", 2), ("t16", 3), ("t16-msb1", 4), ("t16-crc7", 5))).clone('void')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMFormat.setStatus('current')
acSonetPathTIMMismatchZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMMismatchZeros.setStatus('current')
acSonetPathPLMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6), )
if mibBuilder.loadTexts: acSonetPathPLMTable.setStatus('current')
acSonetPathPLMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathPLMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathPLMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathPLMPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathPLMPath"))
if mibBuilder.loadTexts: acSonetPathPLMEntry.setStatus('current')
acSonetPathPLMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathPLMNodeId.setStatus('current')
acSonetPathPLMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathPLMSlot.setStatus('current')
acSonetPathPLMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathPLMPort.setStatus('current')
acSonetPathPLMPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathPLMPath.setStatus('current')
acSonetPathPLMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathPLMDetectEnable.setStatus('current')
acSonetPathPLMTransmitedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathPLMTransmitedValue.setStatus('current')
acSonetPathPLMExpectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathPLMExpectedValue.setStatus('current')
acSonetPathPLMReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathPLMReceivedValue.setStatus('current')
acSonetPathPLMMismatchFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathPLMMismatchFailure.setStatus('current')
acSonetPathPLMUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathPLMUnequipped.setStatus('current')
acSonetFarEndPath15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1), )
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalTable.setStatus('current')
acSonetFarEndPath15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalEntry.setStatus('current')
acSonetFarEndPath15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalNodeId.setStatus('current')
acSonetFarEndPath15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalSlot.setStatus('current')
acSonetFarEndPath15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalPort.setStatus('current')
acSonetFarEndPath15MinuteIntervalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalPath.setStatus('current')
acSonetFarEndPath15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalNumber.setStatus('current')
acSonetFarEndPath15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalValidStats.setStatus('current')
acSonetFarEndPath15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalResetStats.setStatus('current')
acSonetFarEndPath15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalESs.setStatus('current')
acSonetFarEndPath15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalSESs.setStatus('current')
acSonetFarEndPath15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalCVs.setStatus('current')
acSonetFarEndPath15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalUASs.setStatus('current')
acSonetFarEndPathDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2), )
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalTable.setStatus('current')
acSonetFarEndPathDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalEntry.setStatus('current')
acSonetFarEndPathDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalNodeId.setStatus('current')
acSonetFarEndPathDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalSlot.setStatus('current')
acSonetFarEndPathDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalPort.setStatus('current')
acSonetFarEndPathDayIntervalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalPath.setStatus('current')
acSonetFarEndPathDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalNumber.setStatus('current')
acSonetFarEndPathDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalValidStats.setStatus('current')
acSonetFarEndPathDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalResetStats.setStatus('current')
acSonetFarEndPathDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalESs.setStatus('current')
acSonetFarEndPathDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalSESs.setStatus('current')
acSonetFarEndPathDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalCVs.setStatus('current')
acSonetFarEndPathDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalUASs.setStatus('current')
acSonetFarEndPathThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3), )
if mibBuilder.loadTexts: acSonetFarEndPathThresholdTable.setStatus('current')
acSonetFarEndPathThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetFarEndPathThresholdEntry.setStatus('current')
acSonetFarEndPathThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdNodeId.setStatus('current')
acSonetFarEndPathThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSlot.setStatus('current')
acSonetFarEndPathThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdPort.setStatus('current')
acSonetFarEndPathThresholdPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdPath.setStatus('current')
acSonetFarEndPathThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSelectionNum.setStatus('current')
acSonetFarEndPathThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 6), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdAdminStatus.setStatus('deprecated')
acSonetFarEndPathThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdESs.setStatus('current')
acSonetFarEndPathThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSESs.setStatus('current')
acSonetFarEndPathThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdCVs.setStatus('current')
acSonetFarEndPathThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdUASs.setStatus('current')
acSonetVT15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1), )
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalTable.setStatus('current')
acSonetVT15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalEntry.setStatus('current')
acSonetVT15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalNodeId.setStatus('current')
acSonetVT15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalSlot.setStatus('current')
acSonetVT15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalPort.setStatus('current')
acSonetVT15MinuteIntervalVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalVT.setStatus('current')
acSonetVT15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalNumber.setStatus('current')
acSonetVT15MinuteIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalStatus.setStatus('current')
acSonetVT15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalValidStats.setStatus('current')
acSonetVT15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalResetStats.setStatus('current')
acSonetVT15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalESs.setStatus('current')
acSonetVT15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalSESs.setStatus('current')
acSonetVT15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalCVs.setStatus('current')
acSonetVT15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalUASs.setStatus('current')
acSonetVT15MinuteIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalBER.setStatus('current')
acSonetVTDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2), )
if mibBuilder.loadTexts: acSonetVTDayIntervalTable.setStatus('current')
acSonetVTDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetVTDayIntervalEntry.setStatus('current')
acSonetVTDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalNodeId.setStatus('current')
acSonetVTDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalSlot.setStatus('current')
acSonetVTDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalPort.setStatus('current')
acSonetVTDayIntervalVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalVT.setStatus('current')
acSonetVTDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalNumber.setStatus('current')
acSonetVTDayIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalStatus.setStatus('current')
acSonetVTDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalValidStats.setStatus('current')
acSonetVTDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTDayIntervalResetStats.setStatus('current')
acSonetVTDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalESs.setStatus('current')
acSonetVTDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalSESs.setStatus('current')
acSonetVTDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalCVs.setStatus('current')
acSonetVTDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalUASs.setStatus('current')
acSonetVTDayIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalBER.setStatus('deprecated')
acSonetVTThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3), )
if mibBuilder.loadTexts: acSonetVTThresholdTable.setStatus('current')
acSonetVTThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetVTThresholdEntry.setStatus('current')
acSonetVTThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdNodeId.setStatus('current')
acSonetVTThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdSlot.setStatus('current')
acSonetVTThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdPort.setStatus('current')
acSonetVTThresholdVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdVT.setStatus('current')
acSonetVTThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdSelectionNum.setStatus('current')
acSonetVTThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 6), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdAdminStatus.setStatus('deprecated')
acSonetVTThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdESs.setStatus('current')
acSonetVTThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdSESs.setStatus('current')
acSonetVTThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdCVs.setStatus('current')
acSonetVTThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdUASs.setStatus('current')
acSonetVTRDITable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4), )
if mibBuilder.loadTexts: acSonetVTRDITable.setStatus('current')
acSonetVTRDIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTRDINodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTRDISlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTRDIPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTRDIVT"))
if mibBuilder.loadTexts: acSonetVTRDIEntry.setStatus('current')
acSonetVTRDINodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTRDINodeId.setStatus('current')
acSonetVTRDISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTRDISlot.setStatus('current')
acSonetVTRDIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTRDIPort.setStatus('current')
acSonetVTRDIVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTRDIVT.setStatus('current')
acSonetVTRDIOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rdi", 1), ("erdi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTRDIOpMode.setStatus('current')
acSonetVTPLMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5), )
if mibBuilder.loadTexts: acSonetVTPLMTable.setStatus('current')
acSonetVTPLMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTPLMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTPLMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTPLMPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTPLMVT"))
if mibBuilder.loadTexts: acSonetVTPLMEntry.setStatus('current')
acSonetVTPLMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTPLMNodeId.setStatus('current')
acSonetVTPLMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTPLMSlot.setStatus('current')
acSonetVTPLMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTPLMPort.setStatus('current')
acSonetVTPLMVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTPLMVT.setStatus('current')
acSonetVTPLMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTPLMDetectEnable.setStatus('current')
acSonetVTPLMTransmitedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTPLMTransmitedValue.setStatus('current')
acSonetVTPLMExpectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTPLMExpectedValue.setStatus('current')
acSonetVTPLMReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTPLMReceivedValue.setStatus('current')
acSonetVTPLMMismatchFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTPLMMismatchFailure.setStatus('current')
acSonetVTPLMUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTPLMUnequipped.setStatus('current')
acSonetFarEndVT15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1), )
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalTable.setStatus('current')
acSonetFarEndVT15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalEntry.setStatus('current')
acSonetFarEndVT15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalNodeId.setStatus('current')
acSonetFarEndVT15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalSlot.setStatus('current')
acSonetFarEndVT15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalPort.setStatus('current')
acSonetFarEndVT15MinuteIntervalVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalVT.setStatus('current')
acSonetFarEndVT15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalNumber.setStatus('current')
acSonetFarEndVT15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalValidStats.setStatus('current')
acSonetFarEndVT15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalResetStats.setStatus('current')
acSonetFarEndVT15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalESs.setStatus('current')
acSonetFarEndVT15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalSESs.setStatus('current')
acSonetFarEndVT15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalCVs.setStatus('current')
acSonetFarEndVT15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalUASs.setStatus('current')
acSonetFarEndVTDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2), )
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalTable.setStatus('current')
acSonetFarEndVTDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalEntry.setStatus('current')
acSonetFarEndVTDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalNodeId.setStatus('current')
acSonetFarEndVTDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalSlot.setStatus('current')
acSonetFarEndVTDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalPort.setStatus('current')
acSonetFarEndVTDayIntervalVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalVT.setStatus('current')
acSonetFarEndVTDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalNumber.setStatus('current')
acSonetFarEndVTDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalValidStats.setStatus('current')
acSonetFarEndVTDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalResetStats.setStatus('current')
acSonetFarEndVTDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalESs.setStatus('current')
acSonetFarEndVTDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalSESs.setStatus('current')
acSonetFarEndVTDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalCVs.setStatus('current')
acSonetFarEndVTDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalUASs.setStatus('current')
acSonetFarEndVTThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3), )
if mibBuilder.loadTexts: acSonetFarEndVTThresholdTable.setStatus('current')
acSonetFarEndVTThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetFarEndVTThresholdEntry.setStatus('current')
acSonetFarEndVTThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdNodeId.setStatus('current')
acSonetFarEndVTThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSlot.setStatus('current')
acSonetFarEndVTThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdPort.setStatus('current')
acSonetFarEndVTThresholdVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdVT.setStatus('current')
acSonetFarEndVTThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSelectionNum.setStatus('current')
acSonetFarEndVTThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 6), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdAdminStatus.setStatus('deprecated')
acSonetFarEndVTThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdESs.setStatus('current')
acSonetFarEndVTThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSESs.setStatus('current')
acSonetFarEndVTThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdCVs.setStatus('current')
acSonetFarEndVTThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdUASs.setStatus('current')
acSonetPortProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4), )
if mibBuilder.loadTexts: acSonetPortProtectionTable.setStatus('current')
acSonetPortProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPortProtectionNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPortProtectionSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPortProtectionPort"))
if mibBuilder.loadTexts: acSonetPortProtectionEntry.setStatus('current')
acSonetPortProtectionNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortProtectionNodeId.setStatus('current')
acSonetPortProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortProtectionSlot.setStatus('current')
acSonetPortProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortProtectionPort.setStatus('current')
acSonetPortProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("west", 3), ("east", 4), ("match", 5), ("ring", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPortProtectionType.setStatus('current')
acSonetLineProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4), )
if mibBuilder.loadTexts: acSonetLineProtectionTable.setStatus('current')
acSonetLineProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetLineProtectionNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineProtectionSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineProtectionPort"))
if mibBuilder.loadTexts: acSonetLineProtectionEntry.setStatus('current')
acSonetLineProtectionNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineProtectionNodeId.setStatus('current')
acSonetLineProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineProtectionSlot.setStatus('current')
acSonetLineProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineProtectionPort.setStatus('current')
acSonetLineProtectionArchitecture = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("one-plus-one", 2), ("one-to-one", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionArchitecture.setStatus('current')
acSonetLineProtectionOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionOpMode.setStatus('current')
acSonetLineProtectionSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonrevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionSwitchType.setStatus('current')
acSonetLineProtectionSFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionSFThreshold.setStatus('current')
acSonetLineProtectionSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionSDThreshold.setStatus('current')
acSonetLineProtectionActiveTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionActiveTraffic.setStatus('current')
acSonetLineProtectionProtectionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionProtectionSwitch.setStatus('current')
acSonetLineProtectionFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionFail.setStatus('current')
acSonetLineProtectionChannelMismatchFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionChannelMismatchFail.setStatus('current')
acSonetLineProtectionModeMismatchFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionModeMismatchFail.setStatus('current')
acSonetLineProtectionFarEndLineFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionFarEndLineFail.setStatus('current')
acSonetLineProtectionWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionWTRTime.setStatus('current')
acSonetLineProtectionManCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("clear", 1), ("lockout-protection", 2), ("force-working", 3), ("force-protection", 4), ("manual-working", 5), ("manual-protection", 6), ("exercise", 7), ("lockout-working", 8), ("clear-lockout-working", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionManCommand.setStatus('current')
acSonetPathProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7), )
if mibBuilder.loadTexts: acSonetPathProtectionTable.setStatus('current')
acSonetPathProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathProtectionNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathProtectionSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathProtectionPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathProtectionPath"))
if mibBuilder.loadTexts: acSonetPathProtectionEntry.setStatus('current')
acSonetPathProtectionNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathProtectionNodeId.setStatus('current')
acSonetPathProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathProtectionSlot.setStatus('current')
acSonetPathProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathProtectionPort.setStatus('current')
acSonetPathProtectionPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathProtectionPath.setStatus('current')
acSonetPathProtectionSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonrevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionSwitchType.setStatus('current')
acSonetPathProtectionSFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionSFThreshold.setStatus('current')
acSonetPathProtectionSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionSDThreshold.setStatus('current')
acSonetPathProtectionActiveTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathProtectionActiveTraffic.setStatus('current')
acSonetPathProtectionProtectionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathProtectionProtectionSwitch.setStatus('current')
acSonetPathProtectionWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionWTRTime.setStatus('current')
acSonetPathProtectionWTITime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionWTITime.setStatus('current')
acSonetPathProtectionWTCTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionWTCTime.setStatus('current')
acSonetPathProtectionWTRelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionWTRelTime.setStatus('current')
acSonetPathProtectionManSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("clear", 1), ("lockout-protection", 2), ("force-working", 3), ("force-protection", 4), ("manual-working", 5), ("manual-protection", 6), ("exercise", 7), ("lockout-working", 8), ("clear-lockout-working", 9), ("extra-traffic", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionManSwitch.setStatus('current')
acSonetPathProtectionSwitchOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("bridged", 2), ("switched", 3), ("passthrough", 4), ("extra-traffic", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathProtectionSwitchOpStatus.setStatus('current')
acSonetPathProtectionProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("odp", 1), ("upsr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionProtectionMode.setStatus('deprecated')
acSonetVTProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6), )
if mibBuilder.loadTexts: acSonetVTProtectionTable.setStatus('current')
acSonetVTProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTProtectionNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTProtectionSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTProtectionPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTProtectionVT"))
if mibBuilder.loadTexts: acSonetVTProtectionEntry.setStatus('current')
acSonetVTProtectionNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTProtectionNodeId.setStatus('current')
acSonetVTProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTProtectionSlot.setStatus('current')
acSonetVTProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTProtectionPort.setStatus('current')
acSonetVTProtectionVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTProtectionVT.setStatus('current')
acSonetVTProtectionSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonrevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionSwitchType.setStatus('current')
acSonetVTProtectionSFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionSFThreshold.setStatus('current')
acSonetVTProtectionSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionSDThreshold.setStatus('current')
acSonetVTProtectionProtectionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTProtectionProtectionSwitch.setStatus('current')
acSonetVTProtectionWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionWTRTime.setStatus('current')
acSonetVTProtectionManSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clear", 1), ("lockout-protection", 2), ("force-working", 3), ("force-protection", 4), ("manual-working", 5), ("manual-protection", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionManSwitch.setStatus('current')
acSonetVTProtectionActiveTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTProtectionActiveTraffic.setStatus('current')
mibBuilder.exportSymbols("APPIAN-PPORT-SONET-MIB", acSonetVTPLMExpectedValue=acSonetVTPLMExpectedValue, acSonetVTPLMSlot=acSonetVTPLMSlot, acSonetPath15MinuteIntervalSlot=acSonetPath15MinuteIntervalSlot, acSonetSectionThresholdESs=acSonetSectionThresholdESs, acSonetFarEndLine15MinuteIntervalUASs=acSonetFarEndLine15MinuteIntervalUASs, acSonetVT15MinuteIntervalEntry=acSonetVT15MinuteIntervalEntry, acSonetLine15MinuteIntervalNumber=acSonetLine15MinuteIntervalNumber, acSonetVTPLMDetectEnable=acSonetVTPLMDetectEnable, acSonetVTRDISlot=acSonetVTRDISlot, acSonetFarEndPathDayIntervalPort=acSonetFarEndPathDayIntervalPort, acSonetPathPLMMismatchFailure=acSonetPathPLMMismatchFailure, acSonetFarEndPathThresholdUASs=acSonetFarEndPathThresholdUASs, acSonetPortNodeId=acSonetPortNodeId, acSonetLineThresholdTable=acSonetLineThresholdTable, acSonetFarEndPathThresholdESs=acSonetFarEndPathThresholdESs, acSonetFarEndVT15MinuteIntervalUASs=acSonetFarEndVT15MinuteIntervalUASs, acSonetPathTIMExpectedString=acSonetPathTIMExpectedString, acSonetFarEndPath15MinuteIntervalNumber=acSonetFarEndPath15MinuteIntervalNumber, acSonetFarEndPathThresholdEntry=acSonetFarEndPathThresholdEntry, acSonetSectionTIMFailure=acSonetSectionTIMFailure, acSonetPathPLMTransmitedValue=acSonetPathPLMTransmitedValue, acSonetFarEndPath15MinuteIntervalValidStats=acSonetFarEndPath15MinuteIntervalValidStats, acSonetFarEndPathDayIntervalPath=acSonetFarEndPathDayIntervalPath, acSonetFarEndVT15MinuteIntervalNodeId=acSonetFarEndVT15MinuteIntervalNodeId, acSonetPathPLMTable=acSonetPathPLMTable, acSonetPortProtectionNodeId=acSonetPortProtectionNodeId, acSonetLine=acSonetLine, acSonetPathRDIEntry=acSonetPathRDIEntry, PYSNMP_MODULE_ID=acSonet, acSonetPortMediumType=acSonetPortMediumType, acSonetSection15MinuteIntervalSlot=acSonetSection15MinuteIntervalSlot, acSonetLineDayIntervalSESs=acSonetLineDayIntervalSESs, acSonetLineProtectionSFThreshold=acSonetLineProtectionSFThreshold, acSonetDCCTable=acSonetDCCTable, acSonetSectionTIMTransmitedString=acSonetSectionTIMTransmitedString, acSonetSectionThresholdSlot=acSonetSectionThresholdSlot, acSonetPortInvalidIntervals=acSonetPortInvalidIntervals, acSonetPortResetAllPMregs=acSonetPortResetAllPMregs, acSonetSection15MinuteIntervalPort=acSonetSection15MinuteIntervalPort, acSonetVTProtectionEntry=acSonetVTProtectionEntry, acSonetVTPLMPort=acSonetVTPLMPort, acSonetPath15MinuteIntervalPort=acSonetPath15MinuteIntervalPort, acSonetLineDayIntervalSlot=acSonetLineDayIntervalSlot, acSonetFarEndVT15MinuteIntervalSESs=acSonetFarEndVT15MinuteIntervalSESs, acSonetSectionSSMTable=acSonetSectionSSMTable, acSonetLineProtectionFail=acSonetLineProtectionFail, acSonetLineThresholdAdminStatus=acSonetLineThresholdAdminStatus, acSonetFarEndLine15MinuteIntervalPort=acSonetFarEndLine15MinuteIntervalPort, acSonetLineDayIntervalEntry=acSonetLineDayIntervalEntry, acSonetFarEndPathDayIntervalTable=acSonetFarEndPathDayIntervalTable, acSonetFarEndPath=acSonetFarEndPath, acSonetFarEndVTDayIntervalPort=acSonetFarEndVTDayIntervalPort, acSonetPathDayIntervalNumber=acSonetPathDayIntervalNumber, acSonetFarEndVTThresholdUASs=acSonetFarEndVTThresholdUASs, acSonetSectionDayIntervalSEFSs=acSonetSectionDayIntervalSEFSs, acSonetVTPLMVT=acSonetVTPLMVT, acSonetPathThresholdAdminStatus=acSonetPathThresholdAdminStatus, acSonetThresholdSlot=acSonetThresholdSlot, acSonetPathTIMReceivedString=acSonetPathTIMReceivedString, acSonetSectionThresholdTable=acSonetSectionThresholdTable, acSonetVTDayIntervalStatus=acSonetVTDayIntervalStatus, acSonetPath15MinuteIntervalStatus=acSonetPath15MinuteIntervalStatus, acSonet=acSonet, acSonetSection15MinuteIntervalCVs=acSonetSection15MinuteIntervalCVs, acSonetFarEndPathThresholdAdminStatus=acSonetFarEndPathThresholdAdminStatus, acSonetFarEndVT=acSonetFarEndVT, acSonetFarEndLineDayIntervalNumber=acSonetFarEndLineDayIntervalNumber, acSonetLineProtectionSwitchType=acSonetLineProtectionSwitchType, acSonetVT15MinuteIntervalVT=acSonetVT15MinuteIntervalVT, acSonetFarEndLineDayIntervalTable=acSonetFarEndLineDayIntervalTable, acSonetVTRDIPort=acSonetVTRDIPort, acSonetPathProtectionPath=acSonetPathProtectionPath, acSonetSectionTIMFormat=acSonetSectionTIMFormat, acSonetFarEndPathDayIntervalEntry=acSonetFarEndPathDayIntervalEntry, acSonetSectionSSMNodeId=acSonetSectionSSMNodeId, acSonetFarEndPathThresholdNodeId=acSonetFarEndPathThresholdNodeId, acSonetVTDayIntervalVT=acSonetVTDayIntervalVT, acSonetVTDayIntervalUASs=acSonetVTDayIntervalUASs, acSonetFarEndVTDayIntervalNumber=acSonetFarEndVTDayIntervalNumber, acSonetPathRDINodeId=acSonetPathRDINodeId, acSonetFarEndVTThresholdVT=acSonetFarEndVTThresholdVT, acSonetLine15MinuteIntervalNodeId=acSonetLine15MinuteIntervalNodeId, acSonetSection15MinuteIntervalResetStats=acSonetSection15MinuteIntervalResetStats, acSonetObjects=acSonetObjects, acSonetSectionSSMDetectEnable=acSonetSectionSSMDetectEnable, acSonetPathDayIntervalSlot=acSonetPathDayIntervalSlot, acSonetFarEndLine15MinuteIntervalNumber=acSonetFarEndLine15MinuteIntervalNumber, acSonetPathTIMPath=acSonetPathTIMPath, acSonetFarEndVT15MinuteIntervalValidStats=acSonetFarEndVT15MinuteIntervalValidStats, acSonetPortProtectionSlot=acSonetPortProtectionSlot, acSonetLineDayIntervalValidStats=acSonetLineDayIntervalValidStats, acSonetVTThresholdSESs=acSonetVTThresholdSESs, acSonetSectionDayIntervalNodeId=acSonetSectionDayIntervalNodeId, acSonetSection15MinuteIntervalNodeId=acSonetSection15MinuteIntervalNodeId, acSonetVTDayIntervalResetStats=acSonetVTDayIntervalResetStats, acSonetVTPLMMismatchFailure=acSonetVTPLMMismatchFailure, acSonetPathPLMNodeId=acSonetPathPLMNodeId, acSonetVT15MinuteIntervalCVs=acSonetVT15MinuteIntervalCVs, acSonetSectionThresholdPort=acSonetSectionThresholdPort, acSonetFarEndLineThresholdESs=acSonetFarEndLineThresholdESs, acSonetVTDayIntervalValidStats=acSonetVTDayIntervalValidStats, acSonetSection15MinuteIntervalEntry=acSonetSection15MinuteIntervalEntry, acSonetPortMediumLineType=acSonetPortMediumLineType, acSonetSectionTIMMismatchZeros=acSonetSectionTIMMismatchZeros, acSonetSectionTIMExpectedString=acSonetSectionTIMExpectedString, acSonetVTDayIntervalTable=acSonetVTDayIntervalTable, acSonetPathThresholdCVs=acSonetPathThresholdCVs, acSonetPathTIMMismatchZeros=acSonetPathTIMMismatchZeros, acSonetPathTIMEntry=acSonetPathTIMEntry, acSonetPortTimeElapsed=acSonetPortTimeElapsed, acSonetLineThresholdESs=acSonetLineThresholdESs, acSonetPathTIMNodeId=acSonetPathTIMNodeId, acSonetVTDayIntervalEntry=acSonetVTDayIntervalEntry, acSonetPortProtectionPort=acSonetPortProtectionPort, acSonetLineProtectionSDThreshold=acSonetLineProtectionSDThreshold, acSonetObjectsPath=acSonetObjectsPath, acSonetVTProtectionSwitchType=acSonetVTProtectionSwitchType, acSonetPathProtectionWTITime=acSonetPathProtectionWTITime, acSonetDCCNodeId=acSonetDCCNodeId, acSonetFarEndLineDayIntervalValidStats=acSonetFarEndLineDayIntervalValidStats, acSonetVTDayIntervalSESs=acSonetVTDayIntervalSESs, acSonetPathDayIntervalESs=acSonetPathDayIntervalESs, acSonetVTDayIntervalNodeId=acSonetVTDayIntervalNodeId, acSonetPathDayIntervalTable=acSonetPathDayIntervalTable, acSonetLineDayIntervalResetStats=acSonetLineDayIntervalResetStats, acSonetVTProtectionSFThreshold=acSonetVTProtectionSFThreshold, acSonetFarEndPath15MinuteIntervalPath=acSonetFarEndPath15MinuteIntervalPath, acSonetFarEndVTDayIntervalValidStats=acSonetFarEndVTDayIntervalValidStats, acSonetLineThresholdSlot=acSonetLineThresholdSlot, acSonetFarEndVTThresholdAdminStatus=acSonetFarEndVTThresholdAdminStatus, acSonetSectionThresholdEntry=acSonetSectionThresholdEntry, acSonetPortLoopbackConfig=acSonetPortLoopbackConfig, acSonetPortResetCurrentPMregs=acSonetPortResetCurrentPMregs, acSonetFarEndPathThresholdPort=acSonetFarEndPathThresholdPort, acSonetFarEndVT15MinuteIntervalCVs=acSonetFarEndVT15MinuteIntervalCVs, acSonetPathProtectionWTRTime=acSonetPathProtectionWTRTime, acSonetLineDayIntervalTable=acSonetLineDayIntervalTable, acSonetSectionDayIntervalESs=acSonetSectionDayIntervalESs, acSonetPath15MinuteIntervalNodeId=acSonetPath15MinuteIntervalNodeId, acSonetFarEndPathThresholdCVs=acSonetFarEndPathThresholdCVs, acSonetFarEndPath15MinuteIntervalUASs=acSonetFarEndPath15MinuteIntervalUASs, acSonetPathTIMPort=acSonetPathTIMPort, acSonetLine15MinuteIntervalTable=acSonetLine15MinuteIntervalTable, acSonetPath15MinuteIntervalCVs=acSonetPath15MinuteIntervalCVs, acSonetSectionTIMGenerateEnable=acSonetSectionTIMGenerateEnable, acSonetLineDayIntervalBER=acSonetLineDayIntervalBER, acSonetPathProtectionSlot=acSonetPathProtectionSlot, acSonetPathPLMExpectedValue=acSonetPathPLMExpectedValue, acSonetLineDayIntervalCVs=acSonetLineDayIntervalCVs, acSonetPortTable=acSonetPortTable, acSonetFarEndPathThresholdSlot=acSonetFarEndPathThresholdSlot, acSonetDCCSlot=acSonetDCCSlot, acSonetVT15MinuteIntervalNodeId=acSonetVT15MinuteIntervalNodeId, acSonetFarEndVTDayIntervalESs=acSonetFarEndVTDayIntervalESs, acSonetFarEndVTThresholdPort=acSonetFarEndVTThresholdPort, acSonetPathDayIntervalResetStats=acSonetPathDayIntervalResetStats, acSonetFarEndPathDayIntervalValidStats=acSonetFarEndPathDayIntervalValidStats, acSonetSectionDayIntervalTable=acSonetSectionDayIntervalTable, acSonetFarEndLineThresholdSESs=acSonetFarEndLineThresholdSESs, acSonetThresholdPort=acSonetThresholdPort, acSonetFarEndPathThresholdPath=acSonetFarEndPathThresholdPath, acSonetPathProtectionManSwitch=acSonetPathProtectionManSwitch, acSonetLine15MinuteIntervalSlot=acSonetLine15MinuteIntervalSlot, acSonetPathDayIntervalEntry=acSonetPathDayIntervalEntry, acSonetPathThresholdSelectionNum=acSonetPathThresholdSelectionNum, acSonetSection=acSonetSection, acSonetSectionDayIntervalSESs=acSonetSectionDayIntervalSESs, acSonetFarEndLineDayIntervalEntry=acSonetFarEndLineDayIntervalEntry, acSonetLineProtectionProtectionSwitch=acSonetLineProtectionProtectionSwitch, acSonetSectionDayIntervalResetStats=acSonetSectionDayIntervalResetStats, acSonetDCCAppianEnable=acSonetDCCAppianEnable, acSonetFarEndLineDayIntervalUASs=acSonetFarEndLineDayIntervalUASs, acSonetPath15MinuteIntervalSESs=acSonetPath15MinuteIntervalSESs, acSonetPath15MinuteIntervalEntry=acSonetPath15MinuteIntervalEntry, acSonetPathDayIntervalUASs=acSonetPathDayIntervalUASs, acSonetVT15MinuteIntervalSlot=acSonetVT15MinuteIntervalSlot, acSonetPortRingName=acSonetPortRingName, acSonetLineDayIntervalNodeId=acSonetLineDayIntervalNodeId, acSonetFarEndVT15MinuteIntervalPort=acSonetFarEndVT15MinuteIntervalPort, acSonetPathProtectionWTRelTime=acSonetPathProtectionWTRelTime, acSonetVTRDIEntry=acSonetVTRDIEntry, acSonetLineThresholdUASs=acSonetLineThresholdUASs, acSonetSectionDayIntervalStatus=acSonetSectionDayIntervalStatus, acSonetSectionThresholdCVs=acSonetSectionThresholdCVs, acSonetPort=acSonetPort, acSonetSection15MinuteIntervalSESs=acSonetSection15MinuteIntervalSESs, acSonetVTDayIntervalCVs=acSonetVTDayIntervalCVs, acSonetFarEndVTDayIntervalTable=acSonetFarEndVTDayIntervalTable, acSonetPathThresholdEntry=acSonetPathThresholdEntry, acSonetFarEndVT15MinuteIntervalResetStats=acSonetFarEndVT15MinuteIntervalResetStats, acSonetVTThresholdPort=acSonetVTThresholdPort, acSonetSectionTIMPort=acSonetSectionTIMPort, acSonetPath15MinuteIntervalBER=acSonetPath15MinuteIntervalBER, acSonetSectionDayIntervalCVs=acSonetSectionDayIntervalCVs, acSonetSectionDayIntervalPort=acSonetSectionDayIntervalPort, acSonetThresholdNodeId=acSonetThresholdNodeId, acSonetFarEndVT15MinuteIntervalNumber=acSonetFarEndVT15MinuteIntervalNumber, acSonetLineProtectionNodeId=acSonetLineProtectionNodeId, acSonetLineProtectionFarEndLineFail=acSonetLineProtectionFarEndLineFail, acSonetPathThresholdSlot=acSonetPathThresholdSlot, acSonetFarEndVT15MinuteIntervalTable=acSonetFarEndVT15MinuteIntervalTable, acSonetVTRDINodeId=acSonetVTRDINodeId, acSonetSectionThresholdAdminStatus=acSonetSectionThresholdAdminStatus, acSonetSectionSSMTransmitedValue=acSonetSectionSSMTransmitedValue, acSonetPathProtectionNodeId=acSonetPathProtectionNodeId, acSonetPathTIMGenerateEnable=acSonetPathTIMGenerateEnable, acSonetPortProtectionTable=acSonetPortProtectionTable, acSonetFarEndPathThresholdSESs=acSonetFarEndPathThresholdSESs, acSonetPortTransmitterEnable=acSonetPortTransmitterEnable, acSonetSectionTIMReceivedString=acSonetSectionTIMReceivedString, acSonetFarEndVTDayIntervalSESs=acSonetFarEndVTDayIntervalSESs, acSonetFarEndPathDayIntervalResetStats=acSonetFarEndPathDayIntervalResetStats, acSonetPath15MinuteIntervalNumber=acSonetPath15MinuteIntervalNumber, acSonetFarEndVTThresholdCVs=acSonetFarEndVTThresholdCVs, acSonetLineProtectionActiveTraffic=acSonetLineProtectionActiveTraffic, acSonetPathProtectionTable=acSonetPathProtectionTable, acSonetLineThresholdNodeId=acSonetLineThresholdNodeId, acSonetPath15MinuteIntervalTable=acSonetPath15MinuteIntervalTable, acSonetPathDayIntervalSESs=acSonetPathDayIntervalSESs, acSonetPathDayIntervalPath=acSonetPathDayIntervalPath, acSonetSectionDayIntervalNumber=acSonetSectionDayIntervalNumber, acSonetPathTIMTable=acSonetPathTIMTable, acSonetSectionSSMSlot=acSonetSectionSSMSlot, acSonetVTThresholdESs=acSonetVTThresholdESs, acSonetLine15MinuteIntervalEntry=acSonetLine15MinuteIntervalEntry, acSonetPathThresholdTable=acSonetPathThresholdTable, acSonetPortProtectionEntry=acSonetPortProtectionEntry, acSonetSectionTIMDetectEnable=acSonetSectionTIMDetectEnable, acSonetVTRDIVT=acSonetVTRDIVT, acSonetPathTIMFailure=acSonetPathTIMFailure, acSonetVT15MinuteIntervalStatus=acSonetVT15MinuteIntervalStatus, acSonetSectionTIMTable=acSonetSectionTIMTable, acSonetFarEndLineThresholdSlot=acSonetFarEndLineThresholdSlot, acSonetPathProtectionSwitchOpStatus=acSonetPathProtectionSwitchOpStatus, acSonetFarEndVTThresholdTable=acSonetFarEndVTThresholdTable, acSonetLineProtectionOpMode=acSonetLineProtectionOpMode, acSonetVTProtectionProtectionSwitch=acSonetVTProtectionProtectionSwitch, acSonetVTThresholdUASs=acSonetVTThresholdUASs, acSonetLineThresholdPort=acSonetLineThresholdPort, acSonetFarEndVTDayIntervalEntry=acSonetFarEndVTDayIntervalEntry, acSonetVTPLMEntry=acSonetVTPLMEntry, acSonetPortValidIntervals=acSonetPortValidIntervals, acSonetVTRDIOpMode=acSonetVTRDIOpMode, acSonetVTDayIntervalSlot=acSonetVTDayIntervalSlot, acSonetVTProtectionNodeId=acSonetVTProtectionNodeId, acSonetSectionDayIntervalValidStats=acSonetSectionDayIntervalValidStats, acSonetPathPLMDetectEnable=acSonetPathPLMDetectEnable, acSonetFarEndVTDayIntervalUASs=acSonetFarEndVTDayIntervalUASs, acSonetPortEntry=acSonetPortEntry, acSonetVTProtectionTable=acSonetVTProtectionTable, acSonetLineThresholdSelectionNum=acSonetLineThresholdSelectionNum, acSonetVTPLMNodeId=acSonetVTPLMNodeId, acSonetFarEndLine15MinuteIntervalEntry=acSonetFarEndLine15MinuteIntervalEntry, acSonetPortProtectionType=acSonetPortProtectionType)
mibBuilder.exportSymbols("APPIAN-PPORT-SONET-MIB", acSonetVTThresholdEntry=acSonetVTThresholdEntry, acSonetFarEndPathDayIntervalCVs=acSonetFarEndPathDayIntervalCVs, acSonetFarEndVTThresholdSESs=acSonetFarEndVTThresholdSESs, acSonetVT15MinuteIntervalPort=acSonetVT15MinuteIntervalPort, acSonetLineProtectionModeMismatchFail=acSonetLineProtectionModeMismatchFail, acSonetPathRDIPath=acSonetPathRDIPath, acSonetSection15MinuteIntervalValidStats=acSonetSection15MinuteIntervalValidStats, acSonetFarEndPath15MinuteIntervalPort=acSonetFarEndPath15MinuteIntervalPort, acSonetPortSlot=acSonetPortSlot, acSonetVTProtectionSlot=acSonetVTProtectionSlot, acSonetFarEndPathDayIntervalSESs=acSonetFarEndPathDayIntervalSESs, acSonetPath15MinuteIntervalValidStats=acSonetPath15MinuteIntervalValidStats, acSonetPathThresholdESs=acSonetPathThresholdESs, acSonetPortRingIdentifier=acSonetPortRingIdentifier, acSonetSection15MinuteIntervalNumber=acSonetSection15MinuteIntervalNumber, acSonetPathRDISlot=acSonetPathRDISlot, acSonetVTPLMTransmitedValue=acSonetVTPLMTransmitedValue, acSonetFarEndLineThresholdUASs=acSonetFarEndLineThresholdUASs, acSonetVTProtectionManSwitch=acSonetVTProtectionManSwitch, acSonetFarEndPath15MinuteIntervalResetStats=acSonetFarEndPath15MinuteIntervalResetStats, acSonetFarEndPath15MinuteIntervalESs=acSonetFarEndPath15MinuteIntervalESs, acSonetVTThresholdSelectionNum=acSonetVTThresholdSelectionNum, acSonetPathThresholdNodeId=acSonetPathThresholdNodeId, acSonetSectionDayIntervalSlot=acSonetSectionDayIntervalSlot, acSonetFarEndLineThresholdAdminStatus=acSonetFarEndLineThresholdAdminStatus, acSonetVTProtectionSDThreshold=acSonetVTProtectionSDThreshold, acSonetSectionThresholdSESs=acSonetSectionThresholdSESs, acSonetPathPLMPort=acSonetPathPLMPort, acSonetLineDayIntervalStatus=acSonetLineDayIntervalStatus, acSonetDCCLineEnable=acSonetDCCLineEnable, acSonetFarEndVTDayIntervalVT=acSonetFarEndVTDayIntervalVT, acSonetPortCircuitIdentifier=acSonetPortCircuitIdentifier, acSonetFarEndLineThresholdNodeId=acSonetFarEndLineThresholdNodeId, acSonetSectionSSMReceivedValue=acSonetSectionSSMReceivedValue, acSonetFarEndLine15MinuteIntervalResetStats=acSonetFarEndLine15MinuteIntervalResetStats, acSonetVT=acSonetVT, acSonetPathTIMDetectEnable=acSonetPathTIMDetectEnable, acSonetPathProtectionWTCTime=acSonetPathProtectionWTCTime, acSonetFarEndVTDayIntervalResetStats=acSonetFarEndVTDayIntervalResetStats, acSonetThresholdSESSet=acSonetThresholdSESSet, acSonetPathTIMFormat=acSonetPathTIMFormat, acSonetFarEndPath15MinuteIntervalSlot=acSonetFarEndPath15MinuteIntervalSlot, acSonetFarEndVT15MinuteIntervalVT=acSonetFarEndVT15MinuteIntervalVT, acSonetLineThresholdCVs=acSonetLineThresholdCVs, acSonetLine15MinuteIntervalBER=acSonetLine15MinuteIntervalBER, acSonetVTThresholdNodeId=acSonetVTThresholdNodeId, acSonetPathDayIntervalValidStats=acSonetPathDayIntervalValidStats, acSonetVTDayIntervalNumber=acSonetVTDayIntervalNumber, acSonetSectionThresholdNodeId=acSonetSectionThresholdNodeId, acSonetVT15MinuteIntervalResetStats=acSonetVT15MinuteIntervalResetStats, acSonetLineThresholdSESs=acSonetLineThresholdSESs, acSonetSectionTIMNodeId=acSonetSectionTIMNodeId, acSonetSection15MinuteIntervalSEFSs=acSonetSection15MinuteIntervalSEFSs, acSonetFarEndLine15MinuteIntervalNodeId=acSonetFarEndLine15MinuteIntervalNodeId, acSonetDCCPort=acSonetDCCPort, acSonetFarEndPath15MinuteIntervalTable=acSonetFarEndPath15MinuteIntervalTable, acSonetFarEndLineThresholdPort=acSonetFarEndLineThresholdPort, acSonetSectionDayIntervalEntry=acSonetSectionDayIntervalEntry, acSonetVT15MinuteIntervalNumber=acSonetVT15MinuteIntervalNumber, acSonetFarEndLineDayIntervalNodeId=acSonetFarEndLineDayIntervalNodeId, acSonetPathThresholdUASs=acSonetPathThresholdUASs, acSonetPathProtectionSDThreshold=acSonetPathProtectionSDThreshold, acSonetLineDayIntervalUASs=acSonetLineDayIntervalUASs, acSonetPathProtectionProtectionMode=acSonetPathProtectionProtectionMode, acSonetFarEndPathDayIntervalUASs=acSonetFarEndPathDayIntervalUASs, acSonetLineDayIntervalNumber=acSonetLineDayIntervalNumber, acSonetFarEndLine15MinuteIntervalSESs=acSonetFarEndLine15MinuteIntervalSESs, acSonetPath15MinuteIntervalPath=acSonetPath15MinuteIntervalPath, acSonetFarEndPathDayIntervalSlot=acSonetFarEndPathDayIntervalSlot, acSonetDCCLineFail=acSonetDCCLineFail, acSonetVTThresholdCVs=acSonetVTThresholdCVs, acSonetLine15MinuteIntervalESs=acSonetLine15MinuteIntervalESs, acSonetVTProtectionPort=acSonetVTProtectionPort, acSonetVTRDITable=acSonetVTRDITable, acSonetVT15MinuteIntervalSESs=acSonetVT15MinuteIntervalSESs, acSonetFarEndVTThresholdSelectionNum=acSonetFarEndVTThresholdSelectionNum, acSonetLineProtectionSlot=acSonetLineProtectionSlot, acSonetPortOpCode=acSonetPortOpCode, acSonetFarEndPathDayIntervalNodeId=acSonetFarEndPathDayIntervalNodeId, acSonetVT15MinuteIntervalTable=acSonetVT15MinuteIntervalTable, acSonetFarEndPath15MinuteIntervalSESs=acSonetFarEndPath15MinuteIntervalSESs, acSonetThresholdEntry=acSonetThresholdEntry, acSonetFarEndVTThresholdSlot=acSonetFarEndVTThresholdSlot, acSonetPathProtectionActiveTraffic=acSonetPathProtectionActiveTraffic, acSonetSectionTIMSlot=acSonetSectionTIMSlot, acSonetPortOpStatus=acSonetPortOpStatus, acSonetFarEndLineThresholdSelectionNum=acSonetFarEndLineThresholdSelectionNum, acSonetFarEndLine15MinuteIntervalTable=acSonetFarEndLine15MinuteIntervalTable, acSonetFarEndLineDayIntervalESs=acSonetFarEndLineDayIntervalESs, acSonetVTPLMReceivedValue=acSonetVTPLMReceivedValue, acSonetFarEndVTDayIntervalNodeId=acSonetFarEndVTDayIntervalNodeId, acSonetFarEndVTThresholdESs=acSonetFarEndVTThresholdESs, acSonetPathProtectionSFThreshold=acSonetPathProtectionSFThreshold, acSonetLine15MinuteIntervalResetStats=acSonetLine15MinuteIntervalResetStats, acSonetSection15MinuteIntervalESs=acSonetSection15MinuteIntervalESs, acSonetLineProtectionManCommand=acSonetLineProtectionManCommand, acSonetPathDayIntervalBER=acSonetPathDayIntervalBER, acSonetSectionSSMPort=acSonetSectionSSMPort, acSonetLine15MinuteIntervalCVs=acSonetLine15MinuteIntervalCVs, acSonetPathRDIPort=acSonetPathRDIPort, acSonetDCCAppianFail=acSonetDCCAppianFail, acSonetPathProtectionProtectionSwitch=acSonetPathProtectionProtectionSwitch, acSonetVTThresholdTable=acSonetVTThresholdTable, acSonetPathTIMTransmitedString=acSonetPathTIMTransmitedString, acSonetPathRDIOpMode=acSonetPathRDIOpMode, acSonetFarEndLineDayIntervalSESs=acSonetFarEndLineDayIntervalSESs, acSonetVTProtectionVT=acSonetVTProtectionVT, acSonetVTThresholdVT=acSonetVTThresholdVT, acSonetFarEndVT15MinuteIntervalESs=acSonetFarEndVT15MinuteIntervalESs, acSonetSection15MinuteIntervalTable=acSonetSection15MinuteIntervalTable, acSonetSectionThresholdSelectionNum=acSonetSectionThresholdSelectionNum, acSonetFarEndLineDayIntervalPort=acSonetFarEndLineDayIntervalPort, acSonetPath15MinuteIntervalUASs=acSonetPath15MinuteIntervalUASs, acSonetPathPLMPath=acSonetPathPLMPath, acSonetVTPLMUnequipped=acSonetVTPLMUnequipped, acSonetPathThresholdSESs=acSonetPathThresholdSESs, acSonetVTDayIntervalESs=acSonetVTDayIntervalESs, acSonetFarEndVTThresholdNodeId=acSonetFarEndVTThresholdNodeId, acSonetFarEndPath15MinuteIntervalEntry=acSonetFarEndPath15MinuteIntervalEntry, acSonetLineProtectionChannelMismatchFail=acSonetLineProtectionChannelMismatchFail, acSonetLineProtectionPort=acSonetLineProtectionPort, acSonetFarEndLineThresholdTable=acSonetFarEndLineThresholdTable, acSonetDCCSectionFail=acSonetDCCSectionFail, acSonetSectionSSMEntry=acSonetSectionSSMEntry, acSonetFarEndLineDayIntervalResetStats=acSonetFarEndLineDayIntervalResetStats, acSonetPath15MinuteIntervalESs=acSonetPath15MinuteIntervalESs, acSonetPathProtectionSwitchType=acSonetPathProtectionSwitchType, acSonetSectionThresholdSEFSs=acSonetSectionThresholdSEFSs, acSonetVT15MinuteIntervalValidStats=acSonetVT15MinuteIntervalValidStats, AcTraceString=AcTraceString, acSonetDCCSectionEnable=acSonetDCCSectionEnable, acSonetPathDayIntervalCVs=acSonetPathDayIntervalCVs, acSonetFarEndPath15MinuteIntervalCVs=acSonetFarEndPath15MinuteIntervalCVs, acSonetFarEndPath15MinuteIntervalNodeId=acSonetFarEndPath15MinuteIntervalNodeId, acSonetFarEndLine15MinuteIntervalESs=acSonetFarEndLine15MinuteIntervalESs, acSonetPathTIMSlot=acSonetPathTIMSlot, acSonetPathDayIntervalStatus=acSonetPathDayIntervalStatus, acSonetPathPLMUnequipped=acSonetPathPLMUnequipped, acSonetPathThresholdPort=acSonetPathThresholdPort, acSonetFarEndLineDayIntervalSlot=acSonetFarEndLineDayIntervalSlot, acSonetPortMediumLineCoding=acSonetPortMediumLineCoding, acSonetDCCEntry=acSonetDCCEntry, acSonetPortPort=acSonetPortPort, acSonetPathPLMEntry=acSonetPathPLMEntry, acSonetLine15MinuteIntervalSESs=acSonetLine15MinuteIntervalSESs, acSonetPathPLMSlot=acSonetPathPLMSlot, acSonetPathProtectionPort=acSonetPathProtectionPort, acSonetLineProtectionArchitecture=acSonetLineProtectionArchitecture, acSonetVTDayIntervalBER=acSonetVTDayIntervalBER, acSonetPath=acSonetPath, acSonetFarEndVT15MinuteIntervalSlot=acSonetFarEndVT15MinuteIntervalSlot, acSonetVTPLMTable=acSonetVTPLMTable, acSonetObjectsVT=acSonetObjectsVT, acSonetLineProtectionWTRTime=acSonetLineProtectionWTRTime, acSonetFarEndVTDayIntervalSlot=acSonetFarEndVTDayIntervalSlot, acSonetSectionTIMEntry=acSonetSectionTIMEntry, acSonetFarEndPathDayIntervalNumber=acSonetFarEndPathDayIntervalNumber, acSonetVTThresholdSlot=acSonetVTThresholdSlot, acSonetVT15MinuteIntervalBER=acSonetVT15MinuteIntervalBER, acSonetFarEndLineThresholdEntry=acSonetFarEndLineThresholdEntry, acSonetPathDayIntervalNodeId=acSonetPathDayIntervalNodeId, acSonetFarEndPathThresholdTable=acSonetFarEndPathThresholdTable, acSonetPortConnectionType=acSonetPortConnectionType, acSonetFarEndVTDayIntervalCVs=acSonetFarEndVTDayIntervalCVs, acSonetFarEndLine15MinuteIntervalSlot=acSonetFarEndLine15MinuteIntervalSlot, acSonetFarEndLineDayIntervalCVs=acSonetFarEndLineDayIntervalCVs, acSonetPath15MinuteIntervalResetStats=acSonetPath15MinuteIntervalResetStats, acSonetLine15MinuteIntervalStatus=acSonetLine15MinuteIntervalStatus, acSonetSection15MinuteIntervalStatus=acSonetSection15MinuteIntervalStatus, acSonetLine15MinuteIntervalUASs=acSonetLine15MinuteIntervalUASs, acSonetFarEndLine15MinuteIntervalValidStats=acSonetFarEndLine15MinuteIntervalValidStats, acSonetFarEndLineThresholdCVs=acSonetFarEndLineThresholdCVs, acSonetPathRDITable=acSonetPathRDITable, acSonetFarEndPathDayIntervalESs=acSonetFarEndPathDayIntervalESs, acSonetFarEndLine15MinuteIntervalCVs=acSonetFarEndLine15MinuteIntervalCVs, acSonetPathPLMReceivedValue=acSonetPathPLMReceivedValue, acSonetThresholdTable=acSonetThresholdTable, acSonetFarEndVTThresholdEntry=acSonetFarEndVTThresholdEntry, acSonetLineDayIntervalESs=acSonetLineDayIntervalESs, acSonetPathProtectionEntry=acSonetPathProtectionEntry, acSonetLine15MinuteIntervalValidStats=acSonetLine15MinuteIntervalValidStats, acSonetVTProtectionActiveTraffic=acSonetVTProtectionActiveTraffic, acSonetLineThresholdEntry=acSonetLineThresholdEntry, acSonetFarEndPathThresholdSelectionNum=acSonetFarEndPathThresholdSelectionNum, acSonetPathThresholdPath=acSonetPathThresholdPath, acSonetLineProtectionTable=acSonetLineProtectionTable, acSonetPathDayIntervalPort=acSonetPathDayIntervalPort, acSonetVT15MinuteIntervalESs=acSonetVT15MinuteIntervalESs, acSonetVTDayIntervalPort=acSonetVTDayIntervalPort, acSonetLineProtectionEntry=acSonetLineProtectionEntry, acSonetVTThresholdAdminStatus=acSonetVTThresholdAdminStatus, acSonetFarEndVT15MinuteIntervalEntry=acSonetFarEndVT15MinuteIntervalEntry, acSonetLine15MinuteIntervalPort=acSonetLine15MinuteIntervalPort, acSonetFarEndLine=acSonetFarEndLine, acSonetLineDayIntervalPort=acSonetLineDayIntervalPort, acSonetPortAdminStatus=acSonetPortAdminStatus, acSonetVT15MinuteIntervalUASs=acSonetVT15MinuteIntervalUASs, acSonetVTProtectionWTRTime=acSonetVTProtectionWTRTime)
