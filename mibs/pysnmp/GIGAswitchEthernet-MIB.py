#
# PySNMP MIB module GIGAswitchEthernet-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GIGAswitchEthernet-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:06:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, MibIdentifier, Counter32, Gauge32, IpAddress, Integer32, TimeTicks, ObjectIdentity, enterprises, NotificationType, ModuleIdentity, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "MibIdentifier", "Counter32", "Gauge32", "IpAddress", "Integer32", "TimeTicks", "ObjectIdentity", "enterprises", "NotificationType", "ModuleIdentity", "iso", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class EventValueType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("integer", 2), ("longInteger", 3), ("string", 4), ("octets", 5), ("ipAddress", 6), ("macAddress", 7), ("timeTicks", 8))

class ResourceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16))
    namedValues = NamedValues(("system", 1), ("module", 2), ("fan", 3), ("temperatureSensor", 4), ("interface", 5), ("powerSupply", 6), ("display", 7), ("switchPort", 8), ("bridge", 9), ("vlan", 10), ("aft", 11), ("inboundGroupTable", 12), ("outboundGroupTable", 13), ("event", 15), ("alarm", 16))

class ResourceId(ObjectIdentifier):
    pass

class DisplayString(OctetString):
    pass

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

class EventCategory(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("userDefined", 1), ("coldstart", 2), ("warmstart", 3), ("linkUp", 4), ("linkDown", 5), ("newResource", 6), ("deletedResource", 7), ("tempStatus", 8), ("configuration", 9), ("scheduled", 10), ("authentication", 11), ("system", 12), ("risingThreshold", 13), ("fallingThreshold", 14), ("fanStatus", 15), ("powerStatus", 16), ("status", 17), ("bridgeNewRoot", 18), ("bridgeTopChange", 19), ("switchFabricStatus", 20))

dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
mib_extensions_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18)).setLabel("mib-extensions-1")
gsEMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39))
gsEAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1))
gsEAgentGen = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 1))
gsEAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEAgentMIBVersion.setStatus('mandatory')
gsEAgentMgrIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEAgentMgrIndex.setStatus('mandatory')
gsEAgentCommunity = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2))
gsECommunityTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1), )
if mibBuilder.loadTexts: gsECommunityTable.setStatus('mandatory')
gsECommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsECommunityIndex"))
if mibBuilder.loadTexts: gsECommunityEntry.setStatus('mandatory')
gsECommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsECommunityIndex.setStatus('mandatory')
gsECommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsECommunityString.setStatus('mandatory')
gsECommunityAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any", 1), ("ipv4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsECommunityAddressType.setStatus('mandatory')
gsECommunityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsECommunityAddress.setStatus('mandatory')
gsECommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("readOnly", 2), ("readWrite", 3), ("moreSpecific", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsECommunityAccess.setStatus('mandatory')
gsECommunityTrapReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsECommunityTrapReceiver.setStatus('mandatory')
gsECommunitySecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("administrator", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsECommunitySecurityLevel.setStatus('mandatory')
gsECommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsECommunityStatus.setStatus('mandatory')
gsEAgentWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 3))
gsEAgentWebServerURL = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEAgentWebServerURL.setStatus('mandatory')
gsEAgentWebServerHelpDirectory = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEAgentWebServerHelpDirectory.setStatus('mandatory')
gsEChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3))
gsEChassisGen = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 1))
gsEChassisType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p550", 1), ("p220", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEChassisType.setStatus('mandatory')
gsEChassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEChassisSlots.setStatus('mandatory')
gsEInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2))
gsEInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1), )
if mibBuilder.loadTexts: gsEInventoryTable.setStatus('mandatory')
gsEInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEInventoryResourceType"), (0, "GIGAswitchEthernet-MIB", "gsEInventoryResourceIndex"))
if mibBuilder.loadTexts: gsEInventoryEntry.setStatus('mandatory')
gsEInventoryResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1, 1, 1), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEInventoryResourceType.setStatus('mandatory')
gsEInventoryResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1, 1, 2), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEInventoryResourceIndex.setStatus('mandatory')
gsEInventoryModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEInventoryModelNumber.setStatus('mandatory')
gsEInventorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEInventorySerialNumber.setStatus('mandatory')
gsEInventoryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEInventoryVersion.setStatus('mandatory')
gsEInventoryManufactureInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEInventoryManufactureInfo.setStatus('mandatory')
gsEInventoryScratchPad = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEInventoryScratchPad.setStatus('mandatory')
gsEPowerSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3))
gsEPowerSupplies = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1))
gsEPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1, 1), )
if mibBuilder.loadTexts: gsEPowerSupplyTable.setStatus('mandatory')
gsEPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPowerSupplyIndex"))
if mibBuilder.loadTexts: gsEPowerSupplyEntry.setStatus('mandatory')
gsEPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerSupplyIndex.setStatus('mandatory')
gsEPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("psA", 2), ("psB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerSupplyType.setStatus('mandatory')
gsEPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerSupplyStatus.setStatus('mandatory')
gsEPowerSupplyInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerSupplyInputStatus.setStatus('mandatory')
gsEPowerSupplyOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerSupplyOutputStatus.setStatus('mandatory')
gsEPowerSupplyOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerSupplyOutputCapacity.setStatus('mandatory')
gsEPowerMgmtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 2))
gsEPowerCapacity = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerCapacity.setStatus('mandatory')
gsEPowerUsed = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerUsed.setStatus('mandatory')
gsEPowerMgmtCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 3))
gsEPowerControlTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 3, 1), )
if mibBuilder.loadTexts: gsEPowerControlTable.setStatus('mandatory')
gsEPowerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 3, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEModuleIndex"))
if mibBuilder.loadTexts: gsEPowerControlEntry.setStatus('mandatory')
gsEPowerControlUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPowerControlUsed.setStatus('mandatory')
gsEPowerControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("normal", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPowerControlPriority.setStatus('mandatory')
gsEPowerControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("poweredDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPowerControlMode.setStatus('mandatory')
gsETemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4))
gsETempTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4, 1), )
if mibBuilder.loadTexts: gsETempTable.setStatus('mandatory')
gsETempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsETempIndex"))
if mibBuilder.loadTexts: gsETempEntry.setStatus('mandatory')
gsETempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsETempIndex.setStatus('mandatory')
gsETempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsETempValue.setStatus('mandatory')
gsETempUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsETempUpperLimit.setStatus('mandatory')
gsETempUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsETempUpperWarning.setStatus('mandatory')
gsETempLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsETempLowerWarning.setStatus('mandatory')
gsETempLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsETempLowerLimit.setStatus('mandatory')
gsEModules = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5))
gsEModuleTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1), )
if mibBuilder.loadTexts: gsEModuleTable.setStatus('mandatory')
gsEModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEModuleIndex"))
if mibBuilder.loadTexts: gsEModuleEntry.setStatus('mandatory')
gsEModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEModuleIndex.setStatus('mandatory')
gsEModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEModuleName.setStatus('mandatory')
gsEModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("unknown", 1), ("m5502-1000", 2), ("m2206-1000", 3), ("m5520-100TX-QS", 4), ("m5510-100FX", 5), ("m5500-SUP", 6), ("m5504-1000", 7), ("m2201-1000", 8), ("m5520-100TX-I", 9), ("m2202-100FX", 10), ("m5510R-100FX", 11), ("m5512R-100TX", 12), ("m5500R-SUP", 13), ("m5502R-1000", 14), ("m2200-SUP", 15), ("m2204-100TX", 16), ("m2224-100TX", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEModuleType.setStatus('mandatory')
gsEModuleBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gigabit", 1), ("fastEthernet", 2), ("supervisor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEModuleBaseType.setStatus('mandatory')
gsEModuleSlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEModuleSlotWidth.setStatus('mandatory')
gsEModuleSlotOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEModuleSlotOffset.setStatus('mandatory')
gsEModulePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEModulePorts.setStatus('mandatory')
gsEPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6))
gsEPortMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1))
gsEPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1), )
if mibBuilder.loadTexts: gsEPortTable.setStatus('mandatory')
gsEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPortIndex"))
if mibBuilder.loadTexts: gsEPortEntry.setStatus('mandatory')
gsEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortIndex.setStatus('mandatory')
gsEPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortName.setStatus('mandatory')
gsEPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("ether-ten-oneHundred", 2), ("ether-oneHundred", 3), ("ether-gigabit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortType.setStatus('mandatory')
gsEPortBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("ether-ten-oneHundred", 2), ("ether-oneHundred", 3), ("ether-gigabit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortBaseType.setStatus('mandatory')
gsEPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortMode.setStatus('mandatory')
gsEPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("okay", 2), ("warning", 3), ("disabledButOkay", 4), ("linkFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortStatus.setStatus('mandatory')
gsEPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("internal", 1), ("rj45", 2), ("fiber-ST", 3), ("fiber-SC", 4), ("rs-232", 5), ("aui", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortConnector.setStatus('mandatory')
gsEPortSpeedState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ten-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("one-gigabit-per-second", 3), ("under-negotiation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortSpeedState.setStatus('mandatory')
gsEPortDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2), ("under-negotiation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortDuplexState.setStatus('mandatory')
gsEPortGroupBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 1, 1, 1, 10), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortGroupBinding.setStatus('mandatory')
gsEPortFlowControlMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 2))
gsEPortFlowControlTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 2, 1), )
if mibBuilder.loadTexts: gsEPortFlowControlTable.setStatus('mandatory')
gsEPortFlowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 2, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPortIndex"))
if mibBuilder.loadTexts: gsEPortFlowControlEntry.setStatus('mandatory')
gsEPortFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-with-aggressive-backoff", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortFlowControlMode.setStatus('mandatory')
gsEPortDuplexMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 3))
gsEPortDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 3, 1), )
if mibBuilder.loadTexts: gsEPortDuplexTable.setStatus('mandatory')
gsEPortDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 3, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPortIndex"))
if mibBuilder.loadTexts: gsEPortDuplexEntry.setStatus('mandatory')
gsEPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortDuplexMode.setStatus('mandatory')
gsEPortSpeedMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 4))
gsEPortSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 4, 1), )
if mibBuilder.loadTexts: gsEPortSpeedTable.setStatus('mandatory')
gsEPortSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 4, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPortIndex"))
if mibBuilder.loadTexts: gsEPortSpeedEntry.setStatus('mandatory')
gsEPortSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ten-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortSpeedMode.setStatus('mandatory')
gsEPortAutoNegotiationMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 5))
gsEPortAutoNegotiationTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 5, 1), )
if mibBuilder.loadTexts: gsEPortAutoNegotiationTable.setStatus('mandatory')
gsEPortAutoNegotiationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 5, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPortIndex"))
if mibBuilder.loadTexts: gsEPortAutoNegotiationEntry.setStatus('mandatory')
gsEPortAutoNegotiationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 5, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("manualConfiguration", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortAutoNegotiationMode.setStatus('mandatory')
gsEPortAutoNegotiationSpeedAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ten-and-one-hundred-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("ten-megabits-per-second", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortAutoNegotiationSpeedAdvertisement.setStatus('mandatory')
gsEPortAutoNegotiationDuplexAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 5, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-and-half-duplex", 1), ("half-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortAutoNegotiationDuplexAdvertisement.setStatus('mandatory')
gsEPortRateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 6))
gsEPortRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 6, 1), )
if mibBuilder.loadTexts: gsEPortRateLimitTable.setStatus('mandatory')
gsEPortRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 6, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPortIndex"))
if mibBuilder.loadTexts: gsEPortRateLimitEntry.setStatus('mandatory')
gsEPortRateLimitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 6, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableIncludeKnownMulticast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortRateLimitMode.setStatus('mandatory')
gsEPortRateLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 6, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("one-percent", 1), ("two-percent", 2), ("five-percent", 3), ("ten-percent", 4), ("twenty-percent", 5), ("forty-percent", 6), ("eighty-percent", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortRateLimitRate.setStatus('mandatory')
gsEPortRateLimitBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 6, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rateLimit1", 1), ("rateLimit2", 2), ("rateLimit4", 3), ("rateLimit8", 4), ("rateLimit16", 5), ("rateLimit32", 6), ("rateLimit64", 7), ("rateLimit128", 8), ("rateLimit256", 9), ("rateLimit1024", 10), ("rateLimit2048", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortRateLimitBurstSize.setStatus('mandatory')
gsEPortCategoryMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 8))
gsEPortCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 8, 1), )
if mibBuilder.loadTexts: gsEPortCategoryTable.setStatus('mandatory')
gsEPortCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 8, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPortIndex"))
if mibBuilder.loadTexts: gsEPortCategoryEntry.setStatus('mandatory')
gsEPortCategoryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 6, 8, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userPort", 1), ("servicePort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortCategoryMode.setStatus('mandatory')
gsEBufferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7))
gsEBufferTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1), )
if mibBuilder.loadTexts: gsEBufferTable.setStatus('mandatory')
gsEBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEBufferIndex"))
if mibBuilder.loadTexts: gsEBufferEntry.setStatus('mandatory')
gsEBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferIndex.setStatus('mandatory')
gsEBufferFabricPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 2), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferFabricPort.setStatus('mandatory')
gsEBufferFabricPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferFabricPortDirection.setStatus('mandatory')
gsEBufferSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 4), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferSwitchPort.setStatus('mandatory')
gsEBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferMemory.setStatus('mandatory')
gsEBufferAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("quarter-second", 2), ("one-second", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBufferAgeTimer.setStatus('mandatory')
gsEBufferPriorityServicing = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("strictPriority", 1), ("everyTenThousand", 2), ("everyThousand", 3), ("everyHundred", 4), ("everyFour", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBufferPriorityServicing.setStatus('mandatory')
gsEBufferPriorityAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("tenPercent", 2), ("twentyPercent", 3), ("thirtyPercent", 4), ("fortyPercent", 5), ("fiftyPercent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBufferPriorityAllocation.setStatus('mandatory')
gsEBufferPriorityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5), ("five", 6), ("six", 7), ("seven", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBufferPriorityThreshold.setStatus('mandatory')
gsEBufferCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informationNotAvailable", 1), ("notCongested", 2), ("congested", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferCongestion.setStatus('mandatory')
gsEBufferHighOverflowDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferHighOverflowDrops.setStatus('mandatory')
gsEBufferLowOverflowDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferLowOverflowDrops.setStatus('mandatory')
gsEBufferHighStaleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferHighStaleDrops.setStatus('mandatory')
gsEBufferLowStaleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferLowStaleDrops.setStatus('mandatory')
gsEBufferCongestionDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 3, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBufferCongestionDrops.setStatus('mandatory')
gsESwitching = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5))
gsESwitchingLayerII = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1))
gsESwitchGen = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 1))
gsESwitchSTPConfig = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ieee8021dStp", 1), ("stpPerVlan", 2), ("twoLayerStp", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchSTPConfig.setStatus('mandatory')
gsESwitchAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchAgingTime.setStatus('mandatory')
gsESwitchSuperAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchSuperAgingTime.setStatus('mandatory')
gsEBridgeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2))
gsEBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1), )
if mibBuilder.loadTexts: gsEBridgeTable.setStatus('mandatory')
gsEBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEBridgeIndex"))
if mibBuilder.loadTexts: gsEBridgeEntry.setStatus('mandatory')
gsEBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeIndex.setStatus('mandatory')
gsEBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeType.setStatus('mandatory')
gsEBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgeMode.setStatus('mandatory')
gsEBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStatus.setStatus('mandatory')
gsEBridgeStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgeStpPriority.setStatus('mandatory')
gsEBridgeStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpTimeSinceTopologyChange.setStatus('mandatory')
gsEBridgeStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpTopChanges.setStatus('mandatory')
gsEBridgeStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpDesignatedRoot.setStatus('mandatory')
gsEBridgeStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpRootCost.setStatus('mandatory')
gsEBridgeStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpRootPort.setStatus('mandatory')
gsEBridgeStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpMaxAge.setStatus('mandatory')
gsEBridgeStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpHelloTime.setStatus('mandatory')
gsEBridgeStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpHoldTime.setStatus('mandatory')
gsEBridgeStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgeStpForwardDelay.setStatus('mandatory')
gsEBridgeStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgeStpBridgeMaxAge.setStatus('mandatory')
gsEBridgeStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgeStpBridgeHelloTime.setStatus('mandatory')
gsEBridgeStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 2, 1, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgeStpBridgeForwardDelay.setStatus('mandatory')
gsEBridgePortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3))
gsEBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1), )
if mibBuilder.loadTexts: gsEBridgePortTable.setStatus('mandatory')
gsEBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEBridgePortIndex"))
if mibBuilder.loadTexts: gsEBridgePortEntry.setStatus('mandatory')
gsEBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgePortIndex.setStatus('mandatory')
gsEBridgePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgePortPriority.setStatus('mandatory')
gsEBridgePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgePortState.setStatus('mandatory')
gsEBridgePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgePortEnable.setStatus('mandatory')
gsEBridgePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgePortPathCost.setStatus('mandatory')
gsEBridgePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgePortDesignatedRoot.setStatus('mandatory')
gsEBridgePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgePortDesignatedCost.setStatus('mandatory')
gsEBridgePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgePortDesignatedBridge.setStatus('mandatory')
gsEBridgePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgePortDesignatedPort.setStatus('mandatory')
gsEBridgePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEBridgePortForwardTransitions.setStatus('mandatory')
gsEBridgePortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgePortFastStart.setStatus('deprecated')
gsEBridgePortSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useCurrentValues", 1), ("setDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgePortSetDefault.setStatus('mandatory')
gsEBridgePortEnableChangeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEBridgePortEnableChangeDetection.setStatus('mandatory')
gsEL2AddrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4))
gsEL2AddrDatabaseMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1))
gsEL2AddressTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1), )
if mibBuilder.loadTexts: gsEL2AddressTable.setStatus('mandatory')
gsEL2AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEL2AddressIndex"))
if mibBuilder.loadTexts: gsEL2AddressEntry.setStatus('mandatory')
gsEL2AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressIndex.setStatus('mandatory')
gsEL2AddressTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressTableIndex.setStatus('mandatory')
gsEL2AddressMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressMacAddress.setStatus('mandatory')
gsEL2AddressPortBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 4), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressPortBinding.setStatus('mandatory')
gsEL2AddressBindingValid = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressBindingValid.setStatus('mandatory')
gsEL2AddressVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressVlanID.setStatus('mandatory')
gsEL2AddressPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityZero", 1), ("priorityFour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressPriority.setStatus('mandatory')
gsEL2AddressForward = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalForward", 1), ("specialDelivery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressForward.setStatus('mandatory')
gsEL2AddressCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalForward", 1), ("copyCPU", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressCopy.setStatus('mandatory')
gsEL2AddressPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressPersistence.setStatus('mandatory')
gsEL2AddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("learned", 2), ("self", 3), ("mgmt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressStatus.setStatus('mandatory')
gsEL2AddrSummaryMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 2))
gsEL2AddrSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 2, 1), )
if mibBuilder.loadTexts: gsEL2AddrSummaryTable.setStatus('mandatory')
gsEL2AddrSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 2, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEL2AddressIndex"))
if mibBuilder.loadTexts: gsEL2AddrSummaryEntry.setStatus('mandatory')
gsEL2AddrSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddrSummary.setStatus('mandatory')
gsEL2AddrControlMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3))
gsEL2AddressControlTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1), )
if mibBuilder.loadTexts: gsEL2AddressControlTable.setStatus('mandatory')
gsEL2AddressControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEAgentMgrIndex"))
if mibBuilder.loadTexts: gsEL2AddressControlEntry.setStatus('mandatory')
gsEL2AddressControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressControlIndex.setStatus('mandatory')
gsEL2AddressControlMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressControlMacAddress.setStatus('mandatory')
gsEL2AddressControlPortBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1, 1, 3), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressControlPortBinding.setStatus('mandatory')
gsEL2AddressControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressControlVlanID.setStatus('mandatory')
gsEL2AddressControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityZero", 1), ("priorityFour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressControlPriority.setStatus('mandatory')
gsEL2AddressControlPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permanent", 1), ("deleteOnReset", 2), ("deleteOnTimeout", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressControlPersistence.setStatus('mandatory')
gsEL2AddressControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("success", 3), ("otherError", 4), ("entryExistsError", 5), ("invalidMacAddress", 6), ("invalidPortBinding", 7), ("invalidVlanID", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressControlStatus.setStatus('mandatory')
gsEL2AddrChangeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4))
gsEL2AddressChangeLast = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressChangeLast.setStatus('mandatory')
gsEL2AddressChangeWraps = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressChangeWraps.setStatus('mandatory')
gsEL2AddressChangeMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEL2AddressChangeMaxEntries.setStatus('mandatory')
gsEL2AddressChangeTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 4), )
if mibBuilder.loadTexts: gsEL2AddressChangeTable.setStatus('mandatory')
gsEL2AddressChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 4, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEL2AddressChangeWrapCount"), (0, "GIGAswitchEthernet-MIB", "gsEL2AddressChangeIndex"))
if mibBuilder.loadTexts: gsEL2AddressChangeEntry.setStatus('mandatory')
gsEL2AddressChangeWrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressChangeWrapCount.setStatus('mandatory')
gsEL2AddressChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressChangeIndex.setStatus('mandatory')
gsEL2AddressChangeIndexChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressChangeIndexChanged.setStatus('mandatory')
gsEL2AddressChangeSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 1, 4, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEL2AddressChangeSummary.setStatus('mandatory')
gsESwitchPortMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2))
gsESwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1), )
if mibBuilder.loadTexts: gsESwitchPortTable.setStatus('mandatory')
gsESwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsESwitchPortIndex"))
if mibBuilder.loadTexts: gsESwitchPortEntry.setStatus('mandatory')
gsESwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsESwitchPortIndex.setStatus('mandatory')
gsESwitchPortSTAPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortSTAPMode.setStatus('mandatory')
gsESwitchPortConvertToStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learnAsDynamic", 1), ("convertToStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortConvertToStatic.setStatus('mandatory')
gsESwitchPortLearningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortLearningMode.setStatus('mandatory')
gsESwitchPortHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortHuntGroup.setStatus('mandatory')
gsESwitchPortPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 6), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsESwitchPortPhysicalPort.setStatus('mandatory')
gsESwitchPortKnownMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortKnownMode.setStatus('mandatory')
gsESwitchPortMappingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port-based", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortMappingMethod.setStatus('mandatory')
gsESwitchPortTrunkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ieee8021q", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortTrunkingMode.setStatus('mandatory')
gsESwitchPortVlanBindingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortVlanBindingMethod.setStatus('mandatory')
gsESwitchPortIgnoreTag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useTag", 1), ("ignoreTag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortIgnoreTag.setStatus('mandatory')
gsESwitchPortVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortVlanID.setStatus('mandatory')
gsESwitchPortAutoVlanCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortAutoVlanCreation.setStatus('mandatory')
gsESwitchPortMirrorMode = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsESwitchPortMirrorMode.setStatus('mandatory')
gsESwitchPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsESwitchPortIfIndex.setStatus('mandatory')
gsESwitchPortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsESwitchPortFastStart.setStatus('mandatory')
gsEHuntGroupMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4))
gsEHuntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4, 1), )
if mibBuilder.loadTexts: gsEHuntGroupTable.setStatus('mandatory')
gsEHuntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEHuntGroupIndex"))
if mibBuilder.loadTexts: gsEHuntGroupEntry.setStatus('mandatory')
gsEHuntGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEHuntGroupIndex.setStatus('mandatory')
gsEHuntGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEHuntGroupName.setStatus('mandatory')
gsEHuntGroupBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4, 1, 1, 3), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEHuntGroupBasePort.setStatus('mandatory')
gsEHuntGroupNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEHuntGroupNumberOfPorts.setStatus('mandatory')
gsEHuntGroupLoadSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEHuntGroupLoadSharing.setStatus('mandatory')
gsEHuntGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("deleteRequest", 3), ("active", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEHuntGroupStatus.setStatus('mandatory')
gsEPortMirroringMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 5))
gsEPortMirroringTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 5, 1), )
if mibBuilder.loadTexts: gsEPortMirroringTable.setStatus('mandatory')
gsEPortMirroringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 5, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEPortMirroringIndex"))
if mibBuilder.loadTexts: gsEPortMirroringEntry.setStatus('mandatory')
gsEPortMirroringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 5, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEPortMirroringIndex.setStatus('mandatory')
gsEPortMirroringSourceSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortMirroringSourceSubPort.setStatus('mandatory')
gsEPortMirroringSamplerType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("periodic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortMirroringSamplerType.setStatus('mandatory')
gsEPortMirroringRate = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortMirroringRate.setStatus('mandatory')
gsEPortMirroringMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 5, 5, 1, 1, 5), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEPortMirroringMirrorPort.setStatus('mandatory')
gsEVlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7))
gsEVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1))
gsEVlanTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1), )
if mibBuilder.loadTexts: gsEVlanTable.setStatus('mandatory')
gsEVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEVlanID"))
if mibBuilder.loadTexts: gsEVlanEntry.setStatus('mandatory')
gsEVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEVlanID.setStatus('mandatory')
gsEVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVlanName.setStatus('mandatory')
gsEVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEVlanIfIndex.setStatus('mandatory')
gsEVlanAFTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVlanAFTIndex.setStatus('mandatory')
gsEVlanBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1, 5), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVlanBridgeIndex.setStatus('mandatory')
gsEVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("destroyRequest", 3), ("underDestruction", 4), ("active", 5), ("otherError", 6), ("entryExistsError", 7), ("invalidVlanID", 8), ("invalidVlanName", 9), ("invalidVlanAFTIndex", 10), ("invalidVlanBridgeIndex", 11), ("invalidVlanInitialHashTableSize", 12), ("invalidVlanAutoIncrementHTSize", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVlanStatus.setStatus('mandatory')
gsEVlanInitialHashTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVlanInitialHashTableSize.setStatus('mandatory')
gsEVlanAutoIncrementHTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVlanAutoIncrementHTSize.setStatus('mandatory')
gsEVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 4))
gsEVirtualSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 4, 1), )
if mibBuilder.loadTexts: gsEVirtualSwitchPortTable.setStatus('mandatory')
gsEVirtualSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 4, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEVirtualSwitchPortIndex"))
if mibBuilder.loadTexts: gsEVirtualSwitchPortEntry.setStatus('mandatory')
gsEVirtualSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 4, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEVirtualSwitchPortIndex.setStatus('mandatory')
gsEVirtualSwitchPortFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("trunkingFormat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVirtualSwitchPortFormat.setStatus('mandatory')
gsEVirtualSwitchPortBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 4, 1, 1, 3), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVirtualSwitchPortBridgePort.setStatus('mandatory')
gsEVirtualSwitchPortBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEVirtualSwitchPortBindingType.setStatus('mandatory')
gsEVirtualSwitchPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("otherError", 4), ("entryExistsError", 5), ("entryNoExistError", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEVirtualSwitchPortStatus.setStatus('mandatory')
gsEEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10))
gsEEventMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 1))
gsEEventTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 1, 1), )
if mibBuilder.loadTexts: gsEEventTable.setStatus('mandatory')
gsEEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 1, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEEventIndex"))
if mibBuilder.loadTexts: gsEEventEntry.setStatus('mandatory')
gsEEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventIndex.setStatus('mandatory')
gsEEventMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEEventMode.setStatus('mandatory')
gsEEventLogAction = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEEventLogAction.setStatus('mandatory')
gsEEventTrapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEEventTrapAction.setStatus('mandatory')
gsEEventConsoleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEEventConsoleAction.setStatus('mandatory')
gsEEventLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 2))
gsELogTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsELogTableMaxSize.setStatus('mandatory')
gsELogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsELogLastEntry.setStatus('mandatory')
gsELogWraps = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsELogWraps.setStatus('mandatory')
gsEEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3))
gsEEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1), )
if mibBuilder.loadTexts: gsEEventLogTable.setStatus('mandatory')
gsEEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEEventLogIndex"))
if mibBuilder.loadTexts: gsEEventLogEntry.setStatus('mandatory')
gsEEventLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogEventIndex.setStatus('mandatory')
gsEEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogIndex.setStatus('mandatory')
gsEEventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogTime.setStatus('mandatory')
gsEEventLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogDescr.setStatus('mandatory')
gsEEventLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 5), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogType.setStatus('mandatory')
gsEEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogSeverity.setStatus('mandatory')
gsEEventLogDTM = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogDTM.setStatus('mandatory')
gsEEventLogResType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 8), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogResType.setStatus('mandatory')
gsEEventLogResID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 9), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogResID.setStatus('mandatory')
gsEEventLogResLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogResLeaf.setStatus('mandatory')
gsEEventLogValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 11), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogValueType.setStatus('mandatory')
gsEEventLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogValue.setStatus('mandatory')
gsEEventLogEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogEpochTime.setStatus('mandatory')
gsEEventLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventLogID.setStatus('mandatory')
gsEShutdownLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 4))
gsEShutdownLogTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gsEShutdownLogTableMaxSize.setStatus('mandatory')
gsEShutdownLogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEShutdownLogLastEntry.setStatus('mandatory')
gsEShutdownLogAcknowledged = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-acknowledged", 1), ("acknowledged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEShutdownLogAcknowledged.setStatus('mandatory')
gsEEventShutdownLog = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5))
gsEEventShutdownLogTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1), )
if mibBuilder.loadTexts: gsEEventShutdownLogTable.setStatus('mandatory')
gsEEventShutdownLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEEventShutdownLogIndex"))
if mibBuilder.loadTexts: gsEEventShutdownLogEntry.setStatus('mandatory')
gsEEventShutdownLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogEventIndex.setStatus('mandatory')
gsEEventShutdownLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogIndex.setStatus('mandatory')
gsEEventShutdownLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogTime.setStatus('mandatory')
gsEEventShutdownLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogDescr.setStatus('mandatory')
gsEEventShutdownLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 5), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogType.setStatus('mandatory')
gsEEventShutdownLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogSeverity.setStatus('mandatory')
gsEEventShutdownLogDTM = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogDTM.setStatus('mandatory')
gsEEventShutdownLogResType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 8), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogResType.setStatus('mandatory')
gsEEventShutdownLogResID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 9), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogResID.setStatus('mandatory')
gsEEventShutdownLogResLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogResLeaf.setStatus('mandatory')
gsEEventShutdownLogValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 11), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogValueType.setStatus('mandatory')
gsEEventShutdownLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogValue.setStatus('mandatory')
gsEEventShutdownLogEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogEpochTime.setStatus('mandatory')
gsEEventShutdownLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventShutdownLogID.setStatus('mandatory')
gsEEventTrapMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6))
gsEEventTrapEventIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapEventIndex.setStatus('mandatory')
gsEEventTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapTime.setStatus('mandatory')
gsEEventTrapDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapDescr.setStatus('mandatory')
gsEEventTrapType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 4), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapType.setStatus('mandatory')
gsEEventTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapSeverity.setStatus('mandatory')
gsEEventTrapDTM = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapDTM.setStatus('mandatory')
gsEEventTrapResType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 7), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapResType.setStatus('mandatory')
gsEEventTrapResID = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 8), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapResID.setStatus('mandatory')
gsEEventTrapResLeaf = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapResLeaf.setStatus('mandatory')
gsEEventTrapValueType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 10), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapValueType.setStatus('mandatory')
gsEEventTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapValue.setStatus('mandatory')
gsEEventTrapEpochTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapEpochTime.setStatus('mandatory')
gsEEventTrapID = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 10, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEEventTrapID.setStatus('mandatory')
gsEAlarmMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11))
gsEAlarmGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 1))
gsEAlarmGeneralActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEAlarmGeneralActiveEntries.setStatus('mandatory')
gsEAlarmGeneralTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEAlarmGeneralTimeStamp.setStatus('mandatory')
gsEAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2))
gsEActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2), )
if mibBuilder.loadTexts: gsEActiveAlarmTable.setStatus('mandatory')
gsEActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1), ).setIndexNames((0, "GIGAswitchEthernet-MIB", "gsEActiveAlarmIndex"))
if mibBuilder.loadTexts: gsEActiveAlarmEntry.setStatus('mandatory')
gsEActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmIndex.setStatus('mandatory')
gsEActiveAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmName.setStatus('mandatory')
gsEActiveAlarmValueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmValueHigh.setStatus('mandatory')
gsEActiveAlarmValueLow = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmValueLow.setStatus('mandatory')
gsEActiveAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmVariable.setStatus('mandatory')
gsEActiveAlarmResType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 6), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmResType.setStatus('mandatory')
gsEActiveAlarmResID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 7), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmResID.setStatus('mandatory')
gsEActiveAlarmLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmLeaf.setStatus('mandatory')
gsEActiveAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 11, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gsEActiveAlarmOwner.setStatus('mandatory')
gsESnmpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 13))
gsESystemTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 13) + (0,2)).setObjects(("GIGAswitchEthernet-MIB", "gsEEventTrapEventIndex"), ("GIGAswitchEthernet-MIB", "gsEEventTrapTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDescr"), ("GIGAswitchEthernet-MIB", "gsEEventTrapType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapSeverity"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDTM"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResID"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResLeaf"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValueType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValue"), ("GIGAswitchEthernet-MIB", "gsEEventTrapEpochTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapID"))
gsEConfigurationTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 13) + (0,3)).setObjects(("GIGAswitchEthernet-MIB", "gsEEventTrapEventIndex"), ("GIGAswitchEthernet-MIB", "gsEEventTrapTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDescr"), ("GIGAswitchEthernet-MIB", "gsEEventTrapType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapSeverity"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDTM"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResID"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResLeaf"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValueType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValue"), ("GIGAswitchEthernet-MIB", "gsEEventTrapEpochTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapID"))
gsETemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 13) + (0,4)).setObjects(("GIGAswitchEthernet-MIB", "gsEEventTrapEventIndex"), ("GIGAswitchEthernet-MIB", "gsEEventTrapTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDescr"), ("GIGAswitchEthernet-MIB", "gsEEventTrapType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapSeverity"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDTM"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResID"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResLeaf"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValueType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValue"), ("GIGAswitchEthernet-MIB", "gsEEventTrapEpochTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapID"))
gsEResourceTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 13) + (0,5)).setObjects(("GIGAswitchEthernet-MIB", "gsEEventTrapEventIndex"), ("GIGAswitchEthernet-MIB", "gsEEventTrapTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDescr"), ("GIGAswitchEthernet-MIB", "gsEEventTrapType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapSeverity"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDTM"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResID"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResLeaf"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValueType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValue"), ("GIGAswitchEthernet-MIB", "gsEEventTrapEpochTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapID"))
gsEFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 13) + (0,6)).setObjects(("GIGAswitchEthernet-MIB", "gsEEventTrapEventIndex"), ("GIGAswitchEthernet-MIB", "gsEEventTrapTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDescr"), ("GIGAswitchEthernet-MIB", "gsEEventTrapType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapSeverity"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDTM"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResID"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResLeaf"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValueType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValue"), ("GIGAswitchEthernet-MIB", "gsEEventTrapEpochTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapID"))
gsEPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 39, 13) + (0,9)).setObjects(("GIGAswitchEthernet-MIB", "gsEEventTrapEventIndex"), ("GIGAswitchEthernet-MIB", "gsEEventTrapTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDescr"), ("GIGAswitchEthernet-MIB", "gsEEventTrapType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapSeverity"), ("GIGAswitchEthernet-MIB", "gsEEventTrapDTM"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResID"), ("GIGAswitchEthernet-MIB", "gsEEventTrapResLeaf"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValueType"), ("GIGAswitchEthernet-MIB", "gsEEventTrapValue"), ("GIGAswitchEthernet-MIB", "gsEEventTrapEpochTime"), ("GIGAswitchEthernet-MIB", "gsEEventTrapID"))
mibBuilder.exportSymbols("GIGAswitchEthernet-MIB", gsEBridgeType=gsEBridgeType, gsEVirtualSwitchPortEntry=gsEVirtualSwitchPortEntry, gsEChassisGen=gsEChassisGen, gsEActiveAlarmLeaf=gsEActiveAlarmLeaf, MacAddress=MacAddress, gsEEventLog=gsEEventLog, gsEPortRateLimitRate=gsEPortRateLimitRate, gsEBufferCongestionDrops=gsEBufferCongestionDrops, gsEChassis=gsEChassis, gsEVlanBridgeIndex=gsEVlanBridgeIndex, gsEEventLogResLeaf=gsEEventLogResLeaf, gsEActiveAlarmVariable=gsEActiveAlarmVariable, gsEBridgeStpTimeSinceTopologyChange=gsEBridgeStpTimeSinceTopologyChange, gsEAlarmGeneralActiveEntries=gsEAlarmGeneralActiveEntries, gsEHuntGroupName=gsEHuntGroupName, gsEPortMirroringEntry=gsEPortMirroringEntry, gsEModuleSlotWidth=gsEModuleSlotWidth, gsEAgentWebServerURL=gsEAgentWebServerURL, gsEPowerTrap=gsEPowerTrap, gsEL2AddrControlMgt=gsEL2AddrControlMgt, gsEBridgePortState=gsEBridgePortState, gsEModules=gsEModules, gsEModuleTable=gsEModuleTable, gsESwitchPortTable=gsESwitchPortTable, gsEL2AddressChangeWrapCount=gsEL2AddressChangeWrapCount, gsETempEntry=gsETempEntry, gsELogWraps=gsELogWraps, gsEEventTrapMgmt=gsEEventTrapMgmt, gsEActiveAlarmResType=gsEActiveAlarmResType, gsEPortRateLimitMode=gsEPortRateLimitMode, gsEShutdownLogMgt=gsEShutdownLogMgt, gsEBufferIndex=gsEBufferIndex, gsEAgentMIBVersion=gsEAgentMIBVersion, gsEInventoryManufactureInfo=gsEInventoryManufactureInfo, gsEBridgePortPriority=gsEBridgePortPriority, gsEVlanAutoIncrementHTSize=gsEVlanAutoIncrementHTSize, gsEResourceTrap=gsEResourceTrap, gsEEventTrapDTM=gsEEventTrapDTM, gsEBridgePortFastStart=gsEBridgePortFastStart, gsEActiveAlarmTable=gsEActiveAlarmTable, gsESnmpTraps=gsESnmpTraps, gsEActiveAlarmValueHigh=gsEActiveAlarmValueHigh, gsESwitchPortAutoVlanCreation=gsESwitchPortAutoVlanCreation, gsECommunitySecurityLevel=gsECommunitySecurityLevel, gsEInventoryResourceType=gsEInventoryResourceType, gsEL2AddressChangeTable=gsEL2AddressChangeTable, gsEL2AddressChangeEntry=gsEL2AddressChangeEntry, gsEPowerSystems=gsEPowerSystems, gsESwitchPortKnownMode=gsESwitchPortKnownMode, gsEAlarms=gsEAlarms, gsEEventLogResID=gsEEventLogResID, gsEPortMgt=gsEPortMgt, gsEPortDuplexMode=gsEPortDuplexMode, gsEVirtualSwitchPortIndex=gsEVirtualSwitchPortIndex, gsEHuntGroupStatus=gsEHuntGroupStatus, gsEL2AddressControlIndex=gsEL2AddressControlIndex, gsEEventTrapAction=gsEEventTrapAction, gsEBridgeStpBridgeHelloTime=gsEBridgeStpBridgeHelloTime, gsEInventoryModelNumber=gsEInventoryModelNumber, gsEL2AddressCopy=gsEL2AddressCopy, gsEBridgeStpHoldTime=gsEBridgeStpHoldTime, gsEAgentWeb=gsEAgentWeb, gsEAlarmGeneral=gsEAlarmGeneral, gsECommunityTable=gsECommunityTable, gsEEventShutdownLogTable=gsEEventShutdownLogTable, gsEInventoryTable=gsEInventoryTable, gsEPortType=gsEPortType, gsEL2AddressControlPriority=gsEL2AddressControlPriority, gsEBridgePortMgmt=gsEBridgePortMgmt, gsEL2AddrDatabaseMgt=gsEL2AddrDatabaseMgt, gsEL2AddressControlTable=gsEL2AddressControlTable, gsEBufferMemory=gsEBufferMemory, ResourceType=ResourceType, gsEPowerSupplies=gsEPowerSupplies, gsEPortAutoNegotiationSpeedAdvertisement=gsEPortAutoNegotiationSpeedAdvertisement, gsEPortAutoNegotiationTable=gsEPortAutoNegotiationTable, gsEPortMirroringSourceSubPort=gsEPortMirroringSourceSubPort, gsEL2AddressChangeMaxEntries=gsEL2AddressChangeMaxEntries, gsEConfigurationTrap=gsEConfigurationTrap, gsEEventLogResType=gsEEventLogResType, gsEL2AddressMacAddress=gsEL2AddressMacAddress, dec=dec, gsEPortDuplexMgt=gsEPortDuplexMgt, gsEPowerSupplyOutputStatus=gsEPowerSupplyOutputStatus, gsEBridgeStpRootCost=gsEBridgeStpRootCost, gsESwitchPortPhysicalPort=gsESwitchPortPhysicalPort, gsEActiveAlarmResID=gsEActiveAlarmResID, gsEEventShutdownLogResLeaf=gsEEventShutdownLogResLeaf, gsEVlanInitialHashTableSize=gsEVlanInitialHashTableSize, gsESwitchPortVlanID=gsESwitchPortVlanID, gsESwitchingLayerII=gsESwitchingLayerII, gsEL2AddressVlanID=gsEL2AddressVlanID, gsESwitchPortIgnoreTag=gsESwitchPortIgnoreTag, gsEPortIndex=gsEPortIndex, gsEEventLogMgt=gsEEventLogMgt, gsEBufferEntry=gsEBufferEntry, gsEVlanTable=gsEVlanTable, gsEEventLogSeverity=gsEEventLogSeverity, gsEPortRateLimitEntry=gsEPortRateLimitEntry, gsEVirtualSwitchPortStatus=gsEVirtualSwitchPortStatus, gsEPowerUsed=gsEPowerUsed, gsEL2AddressChangeIndex=gsEL2AddressChangeIndex, gsEL2AddressBindingValid=gsEL2AddressBindingValid, gsEInventoryVersion=gsEInventoryVersion, gsEModuleBaseType=gsEModuleBaseType, gsEL2AddrSummaryTable=gsEL2AddrSummaryTable, gsEHuntGroupMgt=gsEHuntGroupMgt, gsEBridgePortEnableChangeDetection=gsEBridgePortEnableChangeDetection, gsEL2AddressControlStatus=gsEL2AddressControlStatus, gsEPortRateLimitMgt=gsEPortRateLimitMgt, gsEEventTrapResID=gsEEventTrapResID, gsEBridgeStpHelloTime=gsEBridgeStpHelloTime, gsEVlans=gsEVlans, gsESwitchPortFastStart=gsESwitchPortFastStart, gsEPortGroupBinding=gsEPortGroupBinding, gsEVlanAFTIndex=gsEVlanAFTIndex, gsEActiveAlarmEntry=gsEActiveAlarmEntry, gsEBufferFabricPort=gsEBufferFabricPort, gsEVirtualSwitchPortBridgePort=gsEVirtualSwitchPortBridgePort, gsEActiveAlarmOwner=gsEActiveAlarmOwner, gsESwitchPortIndex=gsESwitchPortIndex, gsEVlanID=gsEVlanID, gsESystemTrap=gsESystemTrap, gsETempIndex=gsETempIndex, gsEAgentGen=gsEAgentGen, gsEBridgeStpBridgeMaxAge=gsEBridgeStpBridgeMaxAge, gsEL2AddressStatus=gsEL2AddressStatus, gsEActiveAlarmIndex=gsEActiveAlarmIndex, gsEEventTrapEventIndex=gsEEventTrapEventIndex, DisplayString=DisplayString, gsEPortSpeedMode=gsEPortSpeedMode, gsEPortMode=gsEPortMode, gsEModuleType=gsEModuleType, gsEPortFlowControlEntry=gsEPortFlowControlEntry, gsEL2AddressIndex=gsEL2AddressIndex, gsECommunityString=gsECommunityString, gsEBridgePortPathCost=gsEBridgePortPathCost, gsEBridgeStpBridgeForwardDelay=gsEBridgeStpBridgeForwardDelay, gsEPortMirroringIndex=gsEPortMirroringIndex, gsEEventShutdownLogDescr=gsEEventShutdownLogDescr, gsEPowerControlEntry=gsEPowerControlEntry, ema=ema, gsECommunityStatus=gsECommunityStatus, gsEBridgePortEntry=gsEBridgePortEntry, gsEEventShutdownLogEventIndex=gsEEventShutdownLogEventIndex, gsEBufferLowStaleDrops=gsEBufferLowStaleDrops, gsEEventLogType=gsEEventLogType, gsEPowerSupplyEntry=gsEPowerSupplyEntry, gsEL2AddressControlMacAddress=gsEL2AddressControlMacAddress, gsEAgentCommunity=gsEAgentCommunity, gsESwitchAgingTime=gsESwitchAgingTime, gsEBridgeEntry=gsEBridgeEntry, gsEShutdownLogTableMaxSize=gsEShutdownLogTableMaxSize, gsEEventTrapResLeaf=gsEEventTrapResLeaf, gsEModulePorts=gsEModulePorts, gsEL2AddressEntry=gsEL2AddressEntry, gsEBufferSwitchPort=gsEBufferSwitchPort, gsEEventLogIndex=gsEEventLogIndex, gsETempValue=gsETempValue, gsEPortName=gsEPortName, gsEEventLogTime=gsEEventLogTime, EventValueType=EventValueType, gsECommunityTrapReceiver=gsECommunityTrapReceiver, gsEL2AddressControlPortBinding=gsEL2AddressControlPortBinding, gsEEventShutdownLogResType=gsEEventShutdownLogResType, gsEEventLogValueType=gsEEventLogValueType, gsEHuntGroupNumberOfPorts=gsEHuntGroupNumberOfPorts, gsEBridgeStpRootPort=gsEBridgeStpRootPort, gsELogTableMaxSize=gsELogTableMaxSize, gsEBridgePortDesignatedBridge=gsEBridgePortDesignatedBridge, gsEHuntGroupLoadSharing=gsEHuntGroupLoadSharing, gsEEventTrapSeverity=gsEEventTrapSeverity, gsEInventorySerialNumber=gsEInventorySerialNumber, gsETempLowerWarning=gsETempLowerWarning, gsEBridgePortDesignatedRoot=gsEBridgePortDesignatedRoot, gsETempUpperLimit=gsETempUpperLimit, gsEBufferMgt=gsEBufferMgt, gsEEvents=gsEEvents, gsETemperatureTrap=gsETemperatureTrap, gsETempUpperWarning=gsETempUpperWarning, gsEModuleSlotOffset=gsEModuleSlotOffset, gsEEventShutdownLogDTM=gsEEventShutdownLogDTM, gsEPortSpeedTable=gsEPortSpeedTable, gsEHuntGroupBasePort=gsEHuntGroupBasePort, gsEBridgeMgmt=gsEBridgeMgmt, gsEEventShutdownLogValueType=gsEEventShutdownLogValueType, gsEL2AddressControlEntry=gsEL2AddressControlEntry, gsEVirtualSwitchPortFormat=gsEVirtualSwitchPortFormat, gsEPortCategoryEntry=gsEPortCategoryEntry, gsESwitchPortSTAPMode=gsESwitchPortSTAPMode, gsEPortAutoNegotiationDuplexAdvertisement=gsEPortAutoNegotiationDuplexAdvertisement, gsEEventEntry=gsEEventEntry, gsEL2AddressPriority=gsEL2AddressPriority, gsEEventShutdownLogTime=gsEEventShutdownLogTime, gsECommunityEntry=gsECommunityEntry, gsEPowerSupplyStatus=gsEPowerSupplyStatus, gsEBufferPriorityThreshold=gsEBufferPriorityThreshold, gsEHuntGroupTable=gsEHuntGroupTable, gsEVirtualSwitchPortTable=gsEVirtualSwitchPortTable, gsEEventLogDTM=gsEEventLogDTM, Timeout=Timeout, gsECommunityAddress=gsECommunityAddress, gsEL2AddressChangeLast=gsEL2AddressChangeLast, gsEAlarmGeneralTimeStamp=gsEAlarmGeneralTimeStamp, gsETempTable=gsETempTable, gsEEventShutdownLogResID=gsEEventShutdownLogResID, gsEPortAutoNegotiationEntry=gsEPortAutoNegotiationEntry, RowStatus=RowStatus, gsEEventIndex=gsEEventIndex, gsESwitchPortMgt=gsESwitchPortMgt, gsEPortCategoryTable=gsEPortCategoryTable, gsEBufferHighStaleDrops=gsEBufferHighStaleDrops, gsEPortStatus=gsEPortStatus, gsEActiveAlarmValueLow=gsEActiveAlarmValueLow, gsEL2AddressChangeWraps=gsEL2AddressChangeWraps, EventCategory=EventCategory, gsEL2AddressControlPersistence=gsEL2AddressControlPersistence, gsEVlanName=gsEVlanName, gsEL2AddrSummaryEntry=gsEL2AddrSummaryEntry, gsEPortMirroringSamplerType=gsEPortMirroringSamplerType, gsEBridgeTable=gsEBridgeTable, gsEEventLogDescr=gsEEventLogDescr, gsEBridgeStpForwardDelay=gsEBridgeStpForwardDelay, gsEL2AddrSummary=gsEL2AddrSummary, gsEPowerControlTable=gsEPowerControlTable, BridgeId=BridgeId, gsEEventLogID=gsEEventLogID, gsEAlarmMgt=gsEAlarmMgt, gsEPowerControlMode=gsEPowerControlMode, gsEPortRateLimitTable=gsEPortRateLimitTable, gsEModuleName=gsEModuleName, gsEAgent=gsEAgent, gsEEventShutdownLog=gsEEventShutdownLog, gsEPortFlowControlTable=gsEPortFlowControlTable, gsEEventTrapValueType=gsEEventTrapValueType, gsEBridgeStpMaxAge=gsEBridgeStpMaxAge, gsEPortSpeedState=gsEPortSpeedState, gsEBridgePortDesignatedPort=gsEBridgePortDesignatedPort, gsEVlanMgt=gsEVlanMgt, gsEL2AddressTable=gsEL2AddressTable, gsEPowerControlPriority=gsEPowerControlPriority, gsEPorts=gsEPorts, gsEPortAutoNegotiationMgt=gsEPortAutoNegotiationMgt, gsEBufferFabricPortDirection=gsEBufferFabricPortDirection, gsESwitchPortMirrorMode=gsESwitchPortMirrorMode, gsEL2AddrMgmt=gsEL2AddrMgmt, gsEVirtualSwitchPortBindingType=gsEVirtualSwitchPortBindingType, gsEModuleEntry=gsEModuleEntry, gsEShutdownLogAcknowledged=gsEShutdownLogAcknowledged, gsEInventoryScratchPad=gsEInventoryScratchPad, gsEHuntGroupIndex=gsEHuntGroupIndex, gsEL2AddressControlVlanID=gsEL2AddressControlVlanID, gsEAgentMgrIndex=gsEAgentMgrIndex, gsEPowerSupplyType=gsEPowerSupplyType)
mibBuilder.exportSymbols("GIGAswitchEthernet-MIB", gsEPortDuplexTable=gsEPortDuplexTable, gsEPortSpeedEntry=gsEPortSpeedEntry, gsEPowerCapacity=gsEPowerCapacity, gsEBridgeMode=gsEBridgeMode, gsEPowerSupplyInputStatus=gsEPowerSupplyInputStatus, gsEPortDuplexState=gsEPortDuplexState, gsEFanTrap=gsEFanTrap, gsEVirtualPorts=gsEVirtualPorts, gsEPortFlowControlMgt=gsEPortFlowControlMgt, gsECommunityIndex=gsECommunityIndex, gsEPortSpeedMgt=gsEPortSpeedMgt, gsEPortTable=gsEPortTable, gsEEventTrapID=gsEEventTrapID, gsEBufferHighOverflowDrops=gsEBufferHighOverflowDrops, gsEEventLogEntry=gsEEventLogEntry, gsEBridgePortDesignatedCost=gsEBridgePortDesignatedCost, gsEBridgePortIndex=gsEBridgePortIndex, gsELogLastEntry=gsELogLastEntry, gsEPowerControlUsed=gsEPowerControlUsed, gsEPowerMgmtGen=gsEPowerMgmtGen, gsEPortConnector=gsEPortConnector, gsEPortEntry=gsEPortEntry, gsEPortRateLimitBurstSize=gsEPortRateLimitBurstSize, gsEEventTrapTime=gsEEventTrapTime, gsESwitchPortConvertToStatic=gsESwitchPortConvertToStatic, gsEL2AddressChangeIndexChanged=gsEL2AddressChangeIndexChanged, gsEInventory=gsEInventory, gsEBufferCongestion=gsEBufferCongestion, gsEL2AddrChangeMgt=gsEL2AddrChangeMgt, gsEEventTrapDescr=gsEEventTrapDescr, gsEBridgePortEnable=gsEBridgePortEnable, gsESwitchSuperAgingTime=gsESwitchSuperAgingTime, gsEVlanIfIndex=gsEVlanIfIndex, gsESwitching=gsESwitching, gsEPowerSupplyOutputCapacity=gsEPowerSupplyOutputCapacity, gsEEventShutdownLogID=gsEEventShutdownLogID, gsEBridgeStpPriority=gsEBridgeStpPriority, gsEPortDuplexEntry=gsEPortDuplexEntry, gsEPortFlowControlMode=gsEPortFlowControlMode, gsEBridgeIndex=gsEBridgeIndex, gsESwitchPortEntry=gsESwitchPortEntry, gsEEventLogValue=gsEEventLogValue, gsEPortMirroringRate=gsEPortMirroringRate, gsEBridgePortSetDefault=gsEBridgePortSetDefault, gsEEventTrapValue=gsEEventTrapValue, gsEMIB=gsEMIB, gsEPowerMgmtCtl=gsEPowerMgmtCtl, gsEEventConsoleAction=gsEEventConsoleAction, gsEActiveAlarmName=gsEActiveAlarmName, gsEPortCategoryMode=gsEPortCategoryMode, gsEPortMirroringMgt=gsEPortMirroringMgt, gsEL2AddressPersistence=gsEL2AddressPersistence, gsESwitchPortTrunkingMode=gsESwitchPortTrunkingMode, gsEBridgePortTable=gsEBridgePortTable, gsEBufferPriorityServicing=gsEBufferPriorityServicing, gsEPowerSupplyTable=gsEPowerSupplyTable, gsESwitchPortIfIndex=gsESwitchPortIfIndex, gsETempLowerLimit=gsETempLowerLimit, gsETemperature=gsETemperature, gsESwitchGen=gsESwitchGen, gsESwitchPortMappingMethod=gsESwitchPortMappingMethod, gsEEventTrapEpochTime=gsEEventTrapEpochTime, gsEL2AddressPortBinding=gsEL2AddressPortBinding, gsEPortMirroringTable=gsEPortMirroringTable, gsEEventMode=gsEEventMode, gsEShutdownLogLastEntry=gsEShutdownLogLastEntry, gsEPortMirroringMirrorPort=gsEPortMirroringMirrorPort, gsEEventLogTable=gsEEventLogTable, gsESwitchPortLearningMode=gsESwitchPortLearningMode, gsEVlanEntry=gsEVlanEntry, gsEEventTrapType=gsEEventTrapType, gsEBridgeStpDesignatedRoot=gsEBridgeStpDesignatedRoot, gsECommunityAccess=gsECommunityAccess, gsEVlanStatus=gsEVlanStatus, gsEEventShutdownLogIndex=gsEEventShutdownLogIndex, gsEHuntGroupEntry=gsEHuntGroupEntry, gsESwitchPortVlanBindingMethod=gsESwitchPortVlanBindingMethod, gsEEventTable=gsEEventTable, ResourceId=ResourceId, gsEBridgeStatus=gsEBridgeStatus, gsEBufferAgeTimer=gsEBufferAgeTimer, gsEL2AddressChangeSummary=gsEL2AddressChangeSummary, gsEEventLogEpochTime=gsEEventLogEpochTime, gsEBufferLowOverflowDrops=gsEBufferLowOverflowDrops, gsEL2AddressForward=gsEL2AddressForward, gsEBridgePortForwardTransitions=gsEBridgePortForwardTransitions, gsESwitchPortHuntGroup=gsESwitchPortHuntGroup, gsEInventoryEntry=gsEInventoryEntry, gsEPortAutoNegotiationMode=gsEPortAutoNegotiationMode, gsEEventLogAction=gsEEventLogAction, gsEL2AddressTableIndex=gsEL2AddressTableIndex, gsEChassisType=gsEChassisType, gsEBufferTable=gsEBufferTable, gsECommunityAddressType=gsECommunityAddressType, gsEInventoryResourceIndex=gsEInventoryResourceIndex, gsEEventShutdownLogValue=gsEEventShutdownLogValue, gsESwitchSTPConfig=gsESwitchSTPConfig, gsEEventLogEventIndex=gsEEventLogEventIndex, gsEAgentWebServerHelpDirectory=gsEAgentWebServerHelpDirectory, gsEEventMgt=gsEEventMgt, gsEModuleIndex=gsEModuleIndex, gsEEventShutdownLogEpochTime=gsEEventShutdownLogEpochTime, gsEEventShutdownLogEntry=gsEEventShutdownLogEntry, gsEBufferPriorityAllocation=gsEBufferPriorityAllocation, gsEPortBaseType=gsEPortBaseType, gsEChassisSlots=gsEChassisSlots, mib_extensions_1=mib_extensions_1, gsEEventShutdownLogSeverity=gsEEventShutdownLogSeverity, gsEPowerSupplyIndex=gsEPowerSupplyIndex, gsEEventShutdownLogType=gsEEventShutdownLogType, gsEPortCategoryMgt=gsEPortCategoryMgt, gsEL2AddrSummaryMgt=gsEL2AddrSummaryMgt, gsEEventTrapResType=gsEEventTrapResType, gsEBridgeStpTopChanges=gsEBridgeStpTopChanges)
