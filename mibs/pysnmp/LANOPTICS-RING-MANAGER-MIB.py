#
# PySNMP MIB module LANOPTICS-RING-MANAGER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANOPTICS-RING-MANAGER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, enterprises, IpAddress, Bits, ObjectIdentity, Gauge32, TimeTicks, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "enterprises", "IpAddress", "Bits", "ObjectIdentity", "Gauge32", "TimeTicks", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "MibIdentifier", "Counter32")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
class BITMAP(Integer32):
    pass

class RING_CONFIGURATION(OctetString):
    pass

lanOptics = MibIdentifier((1, 3, 6, 1, 4, 1, 224))
lanOpticsDot5Monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 5))
rmServerReportingTo = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmServerReportingTo.setStatus('mandatory')
rmRingStatus = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("beaconing", 1), ("single-station", 2), ("errors-increasing", 3), ("excessive-errors", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingStatus.setStatus('mandatory')
rmServerHealthText = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmServerHealthText.setStatus('mandatory')
rmServerHealth = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initial-State", 1), ("not-Active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmServerHealth.setStatus('mandatory')
rmRingEventInLog = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingEventInLog.setStatus('mandatory')
rmRingEventTable = MibTable((1, 3, 6, 1, 4, 1, 224, 5, 6), )
if mibBuilder.loadTexts: rmRingEventTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 6, 1) + (1000, ), Integer32())
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 6, 1) + (1001, ), Integer32())
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 6, 1) + (1002, ), Integer32())
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 6, 1) + (1003, ), Integer32())
rmRingEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 5, 6, 1), ).setIndexNames((0, "LANOPTICS-RING-MANAGER-MIB", "pysmiFakeCol1000"), (0, "LANOPTICS-RING-MANAGER-MIB", "pysmiFakeCol1001"), (0, "LANOPTICS-RING-MANAGER-MIB", "pysmiFakeCol1002"), (0, "LANOPTICS-RING-MANAGER-MIB", "pysmiFakeCol1003"))
if mibBuilder.loadTexts: rmRingEventEntry.setStatus('mandatory')
rmRingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingEvent.setStatus('mandatory')
rmRingBeaconingStatus = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingBeaconingStatus.setStatus('mandatory')
rmRingIsoErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingIsoErrorStatus.setStatus('mandatory')
rmRingSingleStationStatus = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingSingleStationStatus.setStatus('mandatory')
rmRingFullConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 10), RING_CONFIGURATION()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingFullConfiguration.setStatus('mandatory')
rmRingConfigurationUpdate = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 11), RING_CONFIGURATION()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingConfigurationUpdate.setStatus('mandatory')
rmServerInitProcess = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmServerInitProcess.setStatus('mandatory')
rmServerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 13), BITMAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmServerAdminState.setStatus('mandatory')
rmServerOperatingState = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 14), BITMAP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmServerOperatingState.setStatus('mandatory')
rmServerAdminParameters = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 15), BITMAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmServerAdminParameters.setStatus('mandatory')
rmServerOperatingParameters = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 16), BITMAP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmServerOperatingParameters.setStatus('mandatory')
rmDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 224, 5, 17), )
if mibBuilder.loadTexts: rmDeviceStatusTable.setStatus('mandatory')
rmDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 5, 17, 1), ).setIndexNames((0, "LANOPTICS-RING-MANAGER-MIB", "rmDeviceMacAddress"))
if mibBuilder.loadTexts: rmDeviceEntry.setStatus('mandatory')
rmDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceMacAddress.setStatus('mandatory')
rmDeviceUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceUpstream.setStatus('mandatory')
rmDeviceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("removed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmDeviceAdminState.setStatus('mandatory')
rmDeviceOperateState = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("removed", 4), ("neverInserted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceOperateState.setStatus('mandatory')
rmDevicePhysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDevicePhysLocation.setStatus('mandatory')
rmDeviceGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceGroupAddress.setStatus('mandatory')
rmDeviceFunctionAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceFunctionAddress.setStatus('mandatory')
rmDeviceProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceProductID.setStatus('mandatory')
rmDeviceStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceStationID.setStatus('mandatory')
rmDeviceStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceStationStatus.setStatus('mandatory')
rmDeviceFunctionClass = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceFunctionClass.setStatus('mandatory')
rmDeviceAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceAccessPriority.setStatus('mandatory')
rmDeviceMicroLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceMicroLevel.setStatus('mandatory')
rmDeviceMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceMonitored.setStatus('mandatory')
rmDeviceDaysAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceDaysAllowed.setStatus('mandatory')
rmDeviceHoursAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 5, 17, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDeviceHoursAllowed.setStatus('mandatory')
rmRingPollProcessStatus = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingPollProcessStatus.setStatus('mandatory')
rmRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingNumber.setStatus('mandatory')
rmRingSoftErrorTimer = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingSoftErrorTimer.setStatus('mandatory')
rmRingIsolatingTab = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingIsolatingTab.setStatus('mandatory')
rmRingCongestTab = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingCongestTab.setStatus('mandatory')
rmRingNonIsolatingTab = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingNonIsolatingTab.setStatus('mandatory')
rmRingAutoRemove = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmRingAutoRemove.setStatus('mandatory')
rmRingAllowedDaysPartition1 = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmRingAllowedDaysPartition1.setStatus('mandatory')
rmRingAllowedDaysPartition2 = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmRingAllowedDaysPartition2.setStatus('mandatory')
rmRingAllowedHoursPartition1 = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmRingAllowedHoursPartition1.setStatus('mandatory')
rmRingAllowedHoursPartition2 = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmRingAllowedHoursPartition2.setStatus('mandatory')
rmServerPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmServerPowerOn.setStatus('mandatory')
rmTRLastErrorClass = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("adapter-error", 1), ("beaconing", 2), ("iso-increasing", 3), ("iso-excessive", 4), ("iso-decay", 5), ("congestion", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmTRLastErrorClass.setStatus('mandatory')
rmTRLastErrorType = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmTRLastErrorType.setStatus('mandatory')
rmTRFaultDomainNode1 = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 50), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmTRFaultDomainNode1.setStatus('mandatory')
rmTRFaultDomainNode2 = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 51), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmTRFaultDomainNode2.setStatus('mandatory')
rmIsoTresholdExceededCount = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIsoTresholdExceededCount.setStatus('mandatory')
rmNonIsoTresholdExceededCount = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmNonIsoTresholdExceededCount.setStatus('mandatory')
rmCongestionTresholdExceededCount = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmCongestionTresholdExceededCount.setStatus('mandatory')
rmBeaconCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmBeaconCounter.setStatus('mandatory')
rmSpareCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmSpareCounter.setStatus('mandatory')
rmPurgeCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmPurgeCounter.setStatus('mandatory')
rmClaimCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmClaimCounter.setStatus('mandatory')
rmAdapterResetCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmAdapterResetCounter.setStatus('mandatory')
rmLostFramesCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmLostFramesCounter.setStatus('mandatory')
rmCongestionCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmCongestionCounter.setStatus('mandatory')
rmFrameCopyCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmFrameCopyCounter.setStatus('mandatory')
rmFrequencyErrorCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmFrequencyErrorCounter.setStatus('mandatory')
rmTokenCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmTokenCounter.setStatus('mandatory')
rmLineCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmLineCounter.setStatus('mandatory')
rmInternalCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmInternalCounter.setStatus('mandatory')
rmBurstCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmBurstCounter.setStatus('mandatory')
rmARIFCICounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmARIFCICounter.setStatus('mandatory')
rmAbortCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmAbortCounter.setStatus('mandatory')
rmPollFailCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmPollFailCounter.setStatus('mandatory')
rmNoResponseCounter = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmNoResponseCounter.setStatus('mandatory')
rmWholeRingCounters = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 72), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmWholeRingCounters.setStatus('mandatory')
rmResetOldDevicesSetup = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmResetOldDevicesSetup.setStatus('mandatory')
rmResetErrorCounters = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmResetErrorCounters.setStatus('mandatory')
rmSetCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 75), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmSetCurrentTime.setStatus('mandatory')
rmRingFirstSplitConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 76), RING_CONFIGURATION()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingFirstSplitConfiguration.setStatus('mandatory')
rmRingNextSplitConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 224, 5, 77), RING_CONFIGURATION()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmRingNextSplitConfiguration.setStatus('mandatory')
mibBuilder.exportSymbols("LANOPTICS-RING-MANAGER-MIB", rmServerAdminState=rmServerAdminState, rmRingAllowedHoursPartition2=rmRingAllowedHoursPartition2, rmDeviceDaysAllowed=rmDeviceDaysAllowed, rmRingSingleStationStatus=rmRingSingleStationStatus, rmTRLastErrorType=rmTRLastErrorType, rmLostFramesCounter=rmLostFramesCounter, rmServerReportingTo=rmServerReportingTo, rmTRLastErrorClass=rmTRLastErrorClass, rmDevicePhysLocation=rmDevicePhysLocation, rmTRFaultDomainNode2=rmTRFaultDomainNode2, rmRingAutoRemove=rmRingAutoRemove, rmServerHealth=rmServerHealth, pysmiFakeCol1000=pysmiFakeCol1000, pysmiFakeCol1001=pysmiFakeCol1001, rmDeviceGroupAddress=rmDeviceGroupAddress, rmServerOperatingState=rmServerOperatingState, rmDeviceHoursAllowed=rmDeviceHoursAllowed, rmIsoTresholdExceededCount=rmIsoTresholdExceededCount, BITMAP=BITMAP, rmRingNonIsolatingTab=rmRingNonIsolatingTab, rmAdapterResetCounter=rmAdapterResetCounter, rmSetCurrentTime=rmSetCurrentTime, rmRingPollProcessStatus=rmRingPollProcessStatus, rmBurstCounter=rmBurstCounter, rmRingAllowedDaysPartition2=rmRingAllowedDaysPartition2, rmDeviceStationStatus=rmDeviceStationStatus, rmRingEvent=rmRingEvent, rmServerAdminParameters=rmServerAdminParameters, rmRingAllowedDaysPartition1=rmRingAllowedDaysPartition1, rmDeviceMonitored=rmDeviceMonitored, rmDeviceProductID=rmDeviceProductID, rmDeviceAdminState=rmDeviceAdminState, rmDeviceStatusTable=rmDeviceStatusTable, rmDeviceEntry=rmDeviceEntry, rmRingNumber=rmRingNumber, rmNonIsoTresholdExceededCount=rmNonIsoTresholdExceededCount, rmRingFirstSplitConfiguration=rmRingFirstSplitConfiguration, rmAbortCounter=rmAbortCounter, rmPurgeCounter=rmPurgeCounter, rmRingAllowedHoursPartition1=rmRingAllowedHoursPartition1, rmRingEventInLog=rmRingEventInLog, rmRingStatus=rmRingStatus, rmDeviceOperateState=rmDeviceOperateState, rmNoResponseCounter=rmNoResponseCounter, rmSpareCounter=rmSpareCounter, rmDeviceMacAddress=rmDeviceMacAddress, rmLineCounter=rmLineCounter, rmRingFullConfiguration=rmRingFullConfiguration, rmWholeRingCounters=rmWholeRingCounters, rmDeviceAccessPriority=rmDeviceAccessPriority, rmTokenCounter=rmTokenCounter, rmARIFCICounter=rmARIFCICounter, rmResetErrorCounters=rmResetErrorCounters, rmServerHealthText=rmServerHealthText, rmRingEventEntry=rmRingEventEntry, rmInternalCounter=rmInternalCounter, rmRingCongestTab=rmRingCongestTab, rmCongestionCounter=rmCongestionCounter, rmRingBeaconingStatus=rmRingBeaconingStatus, rmDeviceUpstream=rmDeviceUpstream, rmRingIsoErrorStatus=rmRingIsoErrorStatus, rmRingConfigurationUpdate=rmRingConfigurationUpdate, lanOptics=lanOptics, rmRingEventTable=rmRingEventTable, rmDeviceMicroLevel=rmDeviceMicroLevel, rmCongestionTresholdExceededCount=rmCongestionTresholdExceededCount, pysmiFakeCol1002=pysmiFakeCol1002, pysmiFakeCol1003=pysmiFakeCol1003, rmRingNextSplitConfiguration=rmRingNextSplitConfiguration, lanOpticsDot5Monitor=lanOpticsDot5Monitor, rmServerOperatingParameters=rmServerOperatingParameters, rmFrameCopyCounter=rmFrameCopyCounter, rmTRFaultDomainNode1=rmTRFaultDomainNode1, rmDeviceFunctionClass=rmDeviceFunctionClass, rmRingSoftErrorTimer=rmRingSoftErrorTimer, rmRingIsolatingTab=rmRingIsolatingTab, rmBeaconCounter=rmBeaconCounter, rmFrequencyErrorCounter=rmFrequencyErrorCounter, rmPollFailCounter=rmPollFailCounter, rmServerInitProcess=rmServerInitProcess, rmDeviceStationID=rmDeviceStationID, rmDeviceFunctionAddress=rmDeviceFunctionAddress, RING_CONFIGURATION=RING_CONFIGURATION, rmClaimCounter=rmClaimCounter, rmResetOldDevicesSetup=rmResetOldDevicesSetup, rmServerPowerOn=rmServerPowerOn)
