#
# PySNMP MIB module ELTEX-L2-TUNNEL-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-L2-TUNNEL-CONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
QosLayer2Cos, = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "QosLayer2Cos")
eltexLtd, = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "eltexLtd")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, Gauge32, ModuleIdentity, ObjectIdentity, Bits, NotificationType, iso, Unsigned32, Counter64, MibIdentifier, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Bits", "NotificationType", "iso", "Unsigned32", "Counter64", "MibIdentifier", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
eltexL2TunnelConfig = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 37))
if mibBuilder.loadTexts: eltexL2TunnelConfig.setLastUpdated('201509080000Z')
if mibBuilder.loadTexts: eltexL2TunnelConfig.setOrganization('Eltex Enterprise Co, Ltd.')
eltexLtcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 37, 1))
eltexLtcGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 37, 1, 1))
eltexLtcTunneledProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 37, 1, 2))
eltexLtcTunnelThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 37, 1, 3))
eltexLtcTunnelStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 37, 1, 4))
class EltexLtcTunneledProtocolIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("stp", 1))

eltexLtcNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 37, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexLtcNotificationEnable.setStatus('current')
eltexLtcTunnelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 37, 1, 1, 2), MacAddress().clone(hexValue="0100EEEE0000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexLtcTunnelMacAddress.setStatus('current')
eltexLtcTunneledProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 37, 1, 2, 1), )
if mibBuilder.loadTexts: eltexLtcTunneledProtocolTable.setStatus('current')
eltexLtcTunneledProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 37, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltexLtcTunneledProtocolEntry.setStatus('current')
eltexLtcTunneledProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("stp", 0), ("workaround", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexLtcTunneledProtocolType.setStatus('current')
eltexLtcTunnelCos = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 2, 1, 1, 2), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexLtcTunnelCos.setStatus('current')
eltexLtcTunnelThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 37, 1, 3, 1), )
if mibBuilder.loadTexts: eltexLtcTunnelThresholdTable.setStatus('current')
eltexLtcTunnelThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 37, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ELTEX-L2-TUNNEL-CONFIG-MIB", "eltexLtcTunnelThresholdProtocolIndex"))
if mibBuilder.loadTexts: eltexLtcTunnelThresholdEntry.setStatus('current')
eltexLtcTunnelThresholdProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 3, 1, 1, 1), EltexLtcTunneledProtocolIndex())
if mibBuilder.loadTexts: eltexLtcTunnelThresholdProtocolIndex.setStatus('current')
eltexLtcTunnelDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 3, 1, 1, 2), Unsigned32()).setUnits('PDUs/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexLtcTunnelDropThreshold.setStatus('current')
eltexLtcTunnelShutdownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 3, 1, 1, 3), Unsigned32()).setUnits('PDUs/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexLtcTunnelShutdownThreshold.setStatus('current')
eltexLtcTunnelStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 37, 1, 4, 1), )
if mibBuilder.loadTexts: eltexLtcTunnelStatisticsTable.setStatus('current')
eltexLtcTunnelStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 37, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ELTEX-L2-TUNNEL-CONFIG-MIB", "eltexLtcTunneledProtocolIndex"))
if mibBuilder.loadTexts: eltexLtcTunnelStatisticsEntry.setStatus('current')
eltexLtcTunneledProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 4, 1, 1, 1), EltexLtcTunneledProtocolIndex())
if mibBuilder.loadTexts: eltexLtcTunneledProtocolIndex.setStatus('current')
eltexLtcTunnelEncapStats = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 4, 1, 1, 2), Counter32()).setUnits('encapsulated PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexLtcTunnelEncapStats.setStatus('current')
eltexLtcTunnelDecapStats = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 4, 1, 1, 3), Counter32()).setUnits('de-encapsulated PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexLtcTunnelDecapStats.setStatus('current')
eltexLtcTunnelDropStats = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 37, 1, 4, 1, 1, 4), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexLtcTunnelDropStats.setStatus('current')
eltexLtcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 37, 2))
eltexLtcMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 37, 2, 0))
eltexLtcTunnelDropThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 35265, 37, 2, 0, 1)).setObjects(("ELTEX-L2-TUNNEL-CONFIG-MIB", "eltexLtcTunnelDropThreshold"))
if mibBuilder.loadTexts: eltexLtcTunnelDropThresholdExceeded.setStatus('current')
eltexLtcTunnelShutdownThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 35265, 37, 2, 0, 2)).setObjects(("ELTEX-L2-TUNNEL-CONFIG-MIB", "eltexLtcTunnelShutdownThreshold"))
if mibBuilder.loadTexts: eltexLtcTunnelShutdownThresholdExceeded.setStatus('current')
mibBuilder.exportSymbols("ELTEX-L2-TUNNEL-CONFIG-MIB", PYSNMP_MODULE_ID=eltexL2TunnelConfig, eltexLtcTunnelShutdownThreshold=eltexLtcTunnelShutdownThreshold, eltexLtcTunnelThresholdTable=eltexLtcTunnelThresholdTable, eltexLtcTunnelDropThresholdExceeded=eltexLtcTunnelDropThresholdExceeded, eltexLtcTunnelThresholdEntry=eltexLtcTunnelThresholdEntry, eltexLtcNotificationEnable=eltexLtcNotificationEnable, eltexLtcTunneledProtocolIndex=eltexLtcTunneledProtocolIndex, eltexLtcMIBNotificationsPrefix=eltexLtcMIBNotificationsPrefix, eltexLtcTunnelMacAddress=eltexLtcTunnelMacAddress, eltexLtcMIBObjects=eltexLtcMIBObjects, eltexLtcTunneledProtocol=eltexLtcTunneledProtocol, eltexLtcMIBNotifications=eltexLtcMIBNotifications, eltexLtcTunnelDropStats=eltexLtcTunnelDropStats, eltexLtcTunnelThreshold=eltexLtcTunnelThreshold, eltexL2TunnelConfig=eltexL2TunnelConfig, eltexLtcTunnelCos=eltexLtcTunnelCos, eltexLtcTunnelStatisticsTable=eltexLtcTunnelStatisticsTable, eltexLtcTunnelStatistics=eltexLtcTunnelStatistics, eltexLtcTunnelEncapStats=eltexLtcTunnelEncapStats, eltexLtcTunneledProtocolTable=eltexLtcTunneledProtocolTable, eltexLtcTunnelDecapStats=eltexLtcTunnelDecapStats, eltexLtcTunnelShutdownThresholdExceeded=eltexLtcTunnelShutdownThresholdExceeded, eltexLtcTunnelStatisticsEntry=eltexLtcTunnelStatisticsEntry, eltexLtcTunnelDropThreshold=eltexLtcTunnelDropThreshold, eltexLtcGlobal=eltexLtcGlobal, EltexLtcTunneledProtocolIndex=EltexLtcTunneledProtocolIndex, eltexLtcTunneledProtocolType=eltexLtcTunneledProtocolType, eltexLtcTunneledProtocolEntry=eltexLtcTunneledProtocolEntry, eltexLtcTunnelThresholdProtocolIndex=eltexLtcTunnelThresholdProtocolIndex)
