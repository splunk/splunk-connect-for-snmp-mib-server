#
# PySNMP MIB module ALCATEL-IND1-DHCP-SRV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-DHCP-SRV-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:01:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1DhcpSrv, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1DhcpSrv")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, Unsigned32, Bits, Integer32, Counter32, Counter64, ModuleIdentity, NotificationType, MibIdentifier, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "Unsigned32", "Bits", "Integer32", "Counter32", "Counter64", "ModuleIdentity", "NotificationType", "MibIdentifier", "iso", "TimeTicks")
DisplayString, TextualConvention, DateAndTime, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "MacAddress")
alcatelIND1DhcpSrvMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1))
alcatelIND1DhcpSrvMIB.setRevisions(('2009-10-26 00:00',))
if mibBuilder.loadTexts: alcatelIND1DhcpSrvMIB.setLastUpdated('200812100000Z')
if mibBuilder.loadTexts: alcatelIND1DhcpSrvMIB.setOrganization('Alcatel - Architects Of An Internet World')
alcatelIND1DhcpSrvMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 0))
if mibBuilder.loadTexts: alcatelIND1DhcpSrvMIBNotifications.setStatus('current')
alcatelIND1DhcpSrvMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1))
if mibBuilder.loadTexts: alcatelIND1DhcpSrvMIBObjects.setStatus('current')
alcatelIND1DhcpSrvMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 2))
if mibBuilder.loadTexts: alcatelIND1DhcpSrvMIBConformance.setStatus('current')
alcatelIND1DhcpSrvMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1DhcpSrvMIBGroups.setStatus('current')
alcatelIND1DhcpSrvMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1DhcpSrvMIBCompliances.setStatus('current')
alaDhcpSrvGlobalConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDhcpSrvGlobalConfigStatus.setStatus('current')
alaDhcpSrvGlobalRestart = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("restart", 2))).clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDhcpSrvGlobalRestart.setStatus('current')
alaDhcpSrvGlobalClearStat = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDhcpSrvGlobalClearStat.setStatus('current')
alaDhcpSrvLease = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4))
alaDhcpSrvLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaDhcpSrvLeaseTable.setStatus('current')
alaDhcpSrvLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseInetAddressType"), (0, "ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseInetAddress"))
if mibBuilder.loadTexts: alaDhcpSrvLeaseEntry.setStatus('current')
alaDhcpSrvLeaseInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDhcpSrvLeaseInetAddressType.setStatus('current')
alaDhcpSrvLeaseInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: alaDhcpSrvLeaseInetAddress.setStatus('current')
alaDhcpSrvLeaseMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDhcpSrvLeaseMACAddress.setStatus('current')
alaDhcpSrvLeaseLeaseGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDhcpSrvLeaseLeaseGrant.setStatus('current')
alaDhcpSrvLeaseLeaseExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDhcpSrvLeaseLeaseExpiry.setStatus('current')
alaDhcpSrvLeaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("dynamic", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDhcpSrvLeaseType.setStatus('current')
alaDhcpSrvTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 5))
alaDhcpSrvLeaseUtilizationThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 0, 1)).setObjects(("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseThresholdStatus"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvSubnetDescriptor"))
if mibBuilder.loadTexts: alaDhcpSrvLeaseUtilizationThresholdTrap.setStatus('current')
alaDhcpSrvLeaseThresholdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crossedBelow80Threshold", 1), ("crossedAbove80Threshold", 2), ("reached100Threshold", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDhcpSrvLeaseThresholdStatus.setStatus('current')
alaDhcpSrvSubnetDescriptor = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 1, 5, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDhcpSrvSubnetDescriptor.setStatus('current')
alcatelIND1DhcpSrvMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvGlobalConfigGroup"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseGroup"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvNotificationGroup"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseUtilizationThresholdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1DhcpSrvMIBCompliance = alcatelIND1DhcpSrvMIBCompliance.setStatus('current')
alaDhcpSrvGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvGlobalConfigStatus"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvGlobalRestart"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvGlobalClearStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpSrvGlobalConfigGroup = alaDhcpSrvGlobalConfigGroup.setStatus('current')
alaDhcpSrvLeaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseMACAddress"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseLeaseGrant"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseLeaseExpiry"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpSrvLeaseGroup = alaDhcpSrvLeaseGroup.setStatus('current')
alaDhcpSrvNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseUtilizationThresholdTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpSrvNotificationGroup = alaDhcpSrvNotificationGroup.setStatus('current')
alaDhcpSrvLeaseUtilizationThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 59, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvLeaseThresholdStatus"), ("ALCATEL-IND1-DHCP-SRV-MIB", "alaDhcpSrvSubnetDescriptor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpSrvLeaseUtilizationThresholdGroup = alaDhcpSrvLeaseUtilizationThresholdGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-DHCP-SRV-MIB", alcatelIND1DhcpSrvMIBCompliance=alcatelIND1DhcpSrvMIBCompliance, alcatelIND1DhcpSrvMIBGroups=alcatelIND1DhcpSrvMIBGroups, alaDhcpSrvLeaseThresholdStatus=alaDhcpSrvLeaseThresholdStatus, alaDhcpSrvSubnetDescriptor=alaDhcpSrvSubnetDescriptor, alcatelIND1DhcpSrvMIB=alcatelIND1DhcpSrvMIB, alcatelIND1DhcpSrvMIBCompliances=alcatelIND1DhcpSrvMIBCompliances, alaDhcpSrvGlobalRestart=alaDhcpSrvGlobalRestart, alaDhcpSrvLease=alaDhcpSrvLease, alaDhcpSrvTrapsObj=alaDhcpSrvTrapsObj, alaDhcpSrvLeaseInetAddressType=alaDhcpSrvLeaseInetAddressType, alcatelIND1DhcpSrvMIBConformance=alcatelIND1DhcpSrvMIBConformance, alaDhcpSrvLeaseLeaseGrant=alaDhcpSrvLeaseLeaseGrant, alaDhcpSrvGlobalClearStat=alaDhcpSrvGlobalClearStat, alaDhcpSrvLeaseTable=alaDhcpSrvLeaseTable, alaDhcpSrvGlobalConfigGroup=alaDhcpSrvGlobalConfigGroup, alaDhcpSrvLeaseGroup=alaDhcpSrvLeaseGroup, alcatelIND1DhcpSrvMIBNotifications=alcatelIND1DhcpSrvMIBNotifications, alaDhcpSrvGlobalConfigStatus=alaDhcpSrvGlobalConfigStatus, alaDhcpSrvLeaseUtilizationThresholdGroup=alaDhcpSrvLeaseUtilizationThresholdGroup, alaDhcpSrvLeaseInetAddress=alaDhcpSrvLeaseInetAddress, alaDhcpSrvLeaseMACAddress=alaDhcpSrvLeaseMACAddress, alaDhcpSrvLeaseType=alaDhcpSrvLeaseType, PYSNMP_MODULE_ID=alcatelIND1DhcpSrvMIB, alaDhcpSrvLeaseUtilizationThresholdTrap=alaDhcpSrvLeaseUtilizationThresholdTrap, alaDhcpSrvNotificationGroup=alaDhcpSrvNotificationGroup, alcatelIND1DhcpSrvMIBObjects=alcatelIND1DhcpSrvMIBObjects, alaDhcpSrvLeaseLeaseExpiry=alaDhcpSrvLeaseLeaseExpiry, alaDhcpSrvLeaseEntry=alaDhcpSrvLeaseEntry)
