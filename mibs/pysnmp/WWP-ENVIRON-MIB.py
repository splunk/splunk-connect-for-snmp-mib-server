#
# PySNMP MIB module WWP-ENVIRON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-ENVIRON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:30:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, TimeTicks, ObjectIdentity, iso, NotificationType, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, Unsigned32, Integer32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "ObjectIdentity", "iso", "NotificationType", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "Unsigned32", "Integer32", "IpAddress", "MibIdentifier")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpEnvironMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 13))
wwpEnvironMIB.setRevisions(('2003-04-28 00:00', '2003-03-11 00:00', '2001-04-03 17:00',))
if mibBuilder.loadTexts: wwpEnvironMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpEnvironMIB.setOrganization('World Wide Packets, Inc')
class PortList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

wwpEnvironMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1))
wwpEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1))
wwpEnvBatteryModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 1))
wwpEnvPowerSupplyModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2))
wwpEnvFanModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3))
wwpEnvTempSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4))
wwpEnvPortPowerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5))
wwpEnvNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 6))
wwpEnvPortalBatteryModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7))
wwpEnvDoorModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 8))
wwpEnvDryContactModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9))
wwpEnvRFModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 10))
wwpEnvironMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2))
wwpEnvironMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0))
wwpEnvironMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 3))
wwpEnvironMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 3, 1))
wwpEnvironMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 3, 2))
wwpEnvBattStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("presentAndWorking", 1), ("presentButNotWorking", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvBattStatus.setStatus('current')
wwpEnvPowerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wwpEnvPowerTable.setStatus('current')
wwpEnvPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1), ).setIndexNames((0, "WWP-ENVIRON-MIB", "wwpEnvPowerSupplyNum"))
if mibBuilder.loadTexts: wwpEnvPowerEntry.setStatus('current')
wwpEnvPowerSupplyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPowerSupplyNum.setStatus('current')
wwpEnvPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("infoNotAvailable", 1), ("notInstalled", 2), ("installedAndOperating", 3), ("installedAndNotOperating", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPowerSupplyState.setStatus('current')
wwpEnvPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ac-dc", 1), ("dc-dc", 2), ("notSupported", 3), ("highOutput", 4), ("external", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPowerSupplyType.setStatus('current')
wwpEnvPowerSupplyRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("redundant", 1), ("notRedundant", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPowerSupplyRedundancy.setStatus('current')
wwpEnvRedPowerSupplyNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvRedPowerSupplyNotifEnabled.setStatus('deprecated')
wwpEnvFanModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1), )
if mibBuilder.loadTexts: wwpEnvFanModuleTable.setStatus('current')
wwpEnvFanModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1), ).setIndexNames((0, "WWP-ENVIRON-MIB", "wwpEnvFanModuleNum"))
if mibBuilder.loadTexts: wwpEnvFanModuleEntry.setStatus('current')
wwpEnvFanModuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanModuleNum.setStatus('current')
wwpEnvFanModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("infoNotAvailable", 1), ("notInstalled", 2), ("installedAndOperating", 3), ("installedAndNotOperating", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanModuleState.setStatus('current')
wwpEnvFanAvgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanAvgSpeed.setStatus('current')
wwpEnvFanCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanCurrentSpeed.setStatus('current')
wwpEnvFanMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanMinSpeed.setStatus('current')
wwpEnvFanModuleNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvFanModuleNotifEnabled.setStatus('current')
wwpEnvTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1), )
if mibBuilder.loadTexts: wwpEnvTempSensorTable.setStatus('current')
wwpEnvTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1), ).setIndexNames((0, "WWP-ENVIRON-MIB", "wwpEnvTempSensorNum"))
if mibBuilder.loadTexts: wwpEnvTempSensorEntry.setStatus('current')
wwpEnvTempSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvTempSensorNum.setStatus('current')
wwpEnvTempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 2), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvTempSensorValue.setStatus('current')
wwpEnvTempSensorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 3), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvTempSensorHighThreshold.setStatus('current')
wwpEnvTempSensorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 4), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvTempSensorLowThreshold.setStatus('current')
wwpEnvTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("higherThanThreshold", 0), ("normal", 1), ("lowerThanThreshold", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvTempSensorState.setStatus('current')
wwpEnvTempNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvTempNotifEnabled.setStatus('current')
wwpPortPowerMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1), )
if mibBuilder.loadTexts: wwpPortPowerMgmtTable.setStatus('current')
wwpPortPowerMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1, 1), ).setIndexNames((0, "WWP-ENVIRON-MIB", "wwpEnvPortBankId"))
if mibBuilder.loadTexts: wwpPortPowerMgmtEntry.setStatus('current')
wwpEnvPortBankId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortBankId.setStatus('current')
wwpEnvPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortMap.setStatus('current')
wwpEnvPortBankOn = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvPortBankOn.setStatus('current')
wwpPowerSwitchingOp = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("acToBattery", 1), ("bateryToAC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPowerSwitchingOp.setStatus('current')
wwpEnvPortalBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortalBatteryStatus.setStatus('current')
wwpEnvPortalBatteryVoltageLevel = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortalBatteryVoltageLevel.setStatus('current')
wwpEnvPortalBatteryCondition = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortalBatteryCondition.setStatus('current')
wwpEnvPortalPowerSource = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primaryPower", 1), ("battery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortalPowerSource.setStatus('current')
wwpEnvBatteryNormalStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryNormalStateName.setStatus('current')
wwpEnvBatteryLowStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryLowStateName.setStatus('current')
wwpEnvBatteryGoodStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryGoodStateName.setStatus('current')
wwpEnvBatteryBadStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryBadStateName.setStatus('current')
wwpEnvBatteryPresentStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPresentStateName.setStatus('current')
wwpEnvBatteryMissingStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryMissingStateName.setStatus('current')
wwpEnvBatteryPowerPrimaryStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPowerPrimaryStateName.setStatus('current')
wwpEnvBatteryPowerBatteryStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPowerBatteryStateName.setStatus('current')
wwpEnvBatteryLowStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryLowStateNotifEnabled.setStatus('current')
wwpEnvBatteryBadStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryBadStateNotifEnabled.setStatus('current')
wwpEnvBatteryMissingStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryMissingStateNotifEnabled.setStatus('current')
wwpEnvBatteryPowerNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPowerNotifEnabled.setStatus('current')
wwpEnvBatteryPeriodicTrapsTimer = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8760))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPeriodicTrapsTimer.setStatus('current')
wwpEnvBatteryPowerUpTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPowerUpTrapsEnable.setStatus('current')
wwpEnvDoorState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvDoorState.setStatus('current')
wwpEnvDoorNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 8, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDoorNotifEnabled.setStatus('current')
wwpEnvDryContactOpenStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateName.setStatus('current')
wwpEnvDryContactOpenStateChgAccumulate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateChgAccumulate.setStatus('current')
wwpEnvDryContactOpenStateCount = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateCount.setStatus('current')
wwpEnvDryContactOpenStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateNotifEnabled.setStatus('current')
wwpEnvDryContactCloseStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateName.setStatus('current')
wwpEnvDryContactCloseStateChgAccumulate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateChgAccumulate.setStatus('current')
wwpEnvDryContactCloseStateCount = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateCount.setStatus('current')
wwpEnvDryContactCloseStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateNotifEnabled.setStatus('current')
wwpEnvRFModuleState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvRFModuleState.setStatus('current')
wwpEnvRFModuleSignalDetect = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 10, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvRFModuleSignalDetect.setStatus('current')
wwpEnvPowerSupplyStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 1)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPowerSupplyNum"), ("WWP-ENVIRON-MIB", "wwpEnvPowerSupplyState"), ("WWP-ENVIRON-MIB", "wwpEnvPowerSupplyType"))
if mibBuilder.loadTexts: wwpEnvPowerSupplyStatusNotification.setStatus('current')
wwpEnvFanModuleNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 2)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvFanModuleNum"), ("WWP-ENVIRON-MIB", "wwpEnvFanModuleState"))
if mibBuilder.loadTexts: wwpEnvFanModuleNotification.setStatus('current')
wwpEnvTempNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 3)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvTempSensorState"), ("WWP-ENVIRON-MIB", "wwpEnvTempSensorValue"), ("WWP-ENVIRON-MIB", "wwpEnvTempSensorHighThreshold"), ("WWP-ENVIRON-MIB", "wwpEnvTempSensorLowThreshold"))
if mibBuilder.loadTexts: wwpEnvTempNotification.setStatus('current')
wwpEnvPowerSwitchNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 4)).setObjects(("WWP-ENVIRON-MIB", "wwpPowerSwitchingOp"))
if mibBuilder.loadTexts: wwpEnvPowerSwitchNotification.setStatus('current')
wwpEnvPortalBatteryStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 5)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPortalBatteryStatus"))
if mibBuilder.loadTexts: wwpEnvPortalBatteryStatusNotification.setStatus('current')
wwpEnvPortalBatteryVoltageLevelNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 6)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPortalBatteryVoltageLevel"))
if mibBuilder.loadTexts: wwpEnvPortalBatteryVoltageLevelNotification.setStatus('current')
wwpEnvPortalBatteryConditionNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 7)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPortalBatteryCondition"))
if mibBuilder.loadTexts: wwpEnvPortalBatteryConditionNotification.setStatus('current')
wwpEnvPortalPowerSourceNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 8)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPortalPowerSource"))
if mibBuilder.loadTexts: wwpEnvPortalPowerSourceNotification.setStatus('current')
wwpEnvDoorStateChgNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 9)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvDoorState"))
if mibBuilder.loadTexts: wwpEnvDoorStateChgNotification.setStatus('current')
wwpEnvDryContactOpenStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 10)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvDryContactOpenStateName"), ("WWP-ENVIRON-MIB", "wwpEnvDryContactOpenStateCount"))
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateNotification.setStatus('current')
wwpEnvDryContactCloseStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 11)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvDryContactCloseStateName"), ("WWP-ENVIRON-MIB", "wwpEnvDryContactCloseStateCount"))
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateNotification.setStatus('current')
mibBuilder.exportSymbols("WWP-ENVIRON-MIB", wwpEnvBatteryPeriodicTrapsTimer=wwpEnvBatteryPeriodicTrapsTimer, wwpEnvPortalPowerSourceNotification=wwpEnvPortalPowerSourceNotification, wwpEnvDoorStateChgNotification=wwpEnvDoorStateChgNotification, wwpEnvDryContactOpenStateName=wwpEnvDryContactOpenStateName, wwpPortPowerMgmtTable=wwpPortPowerMgmtTable, wwpEnvBatteryLowStateNotifEnabled=wwpEnvBatteryLowStateNotifEnabled, wwpEnvBatteryPresentStateName=wwpEnvBatteryPresentStateName, wwpEnvNotif=wwpEnvNotif, wwpEnvDoorModule=wwpEnvDoorModule, PYSNMP_MODULE_ID=wwpEnvironMIB, wwpEnvBatteryPowerPrimaryStateName=wwpEnvBatteryPowerPrimaryStateName, wwpEnvironMIB=wwpEnvironMIB, wwpEnvPowerSupplyNum=wwpEnvPowerSupplyNum, wwpEnvDoorState=wwpEnvDoorState, wwpPortPowerMgmtEntry=wwpPortPowerMgmtEntry, wwpEnvTempSensorState=wwpEnvTempSensorState, wwpEnvTempNotification=wwpEnvTempNotification, wwpEnvFanMinSpeed=wwpEnvFanMinSpeed, wwpEnvPowerEntry=wwpEnvPowerEntry, wwpEnvTempSensorHighThreshold=wwpEnvTempSensorHighThreshold, wwpEnvironMIBCompliances=wwpEnvironMIBCompliances, wwpEnviron=wwpEnviron, wwpEnvDryContactModule=wwpEnvDryContactModule, wwpEnvBatteryMissingStateName=wwpEnvBatteryMissingStateName, wwpEnvDryContactCloseStateNotifEnabled=wwpEnvDryContactCloseStateNotifEnabled, wwpEnvPowerTable=wwpEnvPowerTable, wwpEnvRedPowerSupplyNotifEnabled=wwpEnvRedPowerSupplyNotifEnabled, wwpEnvPortBankOn=wwpEnvPortBankOn, wwpEnvTempSensorEntry=wwpEnvTempSensorEntry, wwpEnvRFModuleSignalDetect=wwpEnvRFModuleSignalDetect, wwpEnvironMIBGroups=wwpEnvironMIBGroups, wwpEnvDryContactCloseStateCount=wwpEnvDryContactCloseStateCount, wwpEnvPowerSupplyState=wwpEnvPowerSupplyState, wwpEnvTempSensorNum=wwpEnvTempSensorNum, wwpEnvDryContactCloseStateName=wwpEnvDryContactCloseStateName, wwpEnvPowerSupplyStatusNotification=wwpEnvPowerSupplyStatusNotification, wwpEnvPortalPowerSource=wwpEnvPortalPowerSource, wwpEnvTempSensor=wwpEnvTempSensor, wwpEnvironMIBNotifications=wwpEnvironMIBNotifications, wwpEnvPowerSupplyRedundancy=wwpEnvPowerSupplyRedundancy, wwpEnvDryContactOpenStateNotifEnabled=wwpEnvDryContactOpenStateNotifEnabled, wwpEnvDoorNotifEnabled=wwpEnvDoorNotifEnabled, wwpEnvPortBankId=wwpEnvPortBankId, wwpEnvPortalBatteryStatus=wwpEnvPortalBatteryStatus, wwpEnvPortalBatteryVoltageLevelNotification=wwpEnvPortalBatteryVoltageLevelNotification, wwpEnvTempNotifEnabled=wwpEnvTempNotifEnabled, wwpEnvPortMap=wwpEnvPortMap, wwpEnvironMIBObjects=wwpEnvironMIBObjects, wwpEnvBatteryPowerNotifEnabled=wwpEnvBatteryPowerNotifEnabled, wwpEnvBatteryNormalStateName=wwpEnvBatteryNormalStateName, wwpEnvPowerSupplyModule=wwpEnvPowerSupplyModule, wwpEnvBatteryBadStateName=wwpEnvBatteryBadStateName, wwpEnvPortalBatteryStatusNotification=wwpEnvPortalBatteryStatusNotification, wwpEnvPortalBatteryVoltageLevel=wwpEnvPortalBatteryVoltageLevel, wwpEnvDryContactOpenStateNotification=wwpEnvDryContactOpenStateNotification, wwpEnvTempSensorValue=wwpEnvTempSensorValue, wwpEnvBatteryPowerBatteryStateName=wwpEnvBatteryPowerBatteryStateName, wwpEnvPortalBatteryModule=wwpEnvPortalBatteryModule, wwpEnvBatteryGoodStateName=wwpEnvBatteryGoodStateName, wwpEnvPowerSupplyType=wwpEnvPowerSupplyType, wwpEnvBatteryModule=wwpEnvBatteryModule, wwpEnvironMIBNotificationPrefix=wwpEnvironMIBNotificationPrefix, wwpEnvPortalBatteryConditionNotification=wwpEnvPortalBatteryConditionNotification, wwpEnvBatteryBadStateNotifEnabled=wwpEnvBatteryBadStateNotifEnabled, wwpEnvFanModuleNum=wwpEnvFanModuleNum, wwpEnvTempSensorTable=wwpEnvTempSensorTable, wwpEnvFanModule=wwpEnvFanModule, wwpEnvFanCurrentSpeed=wwpEnvFanCurrentSpeed, wwpEnvironMIBConformance=wwpEnvironMIBConformance, wwpEnvFanModuleState=wwpEnvFanModuleState, wwpEnvTempSensorLowThreshold=wwpEnvTempSensorLowThreshold, wwpEnvDryContactOpenStateChgAccumulate=wwpEnvDryContactOpenStateChgAccumulate, wwpEnvPowerSwitchNotification=wwpEnvPowerSwitchNotification, wwpEnvBatteryLowStateName=wwpEnvBatteryLowStateName, wwpEnvBatteryMissingStateNotifEnabled=wwpEnvBatteryMissingStateNotifEnabled, PortList=PortList, wwpEnvDryContactCloseStateChgAccumulate=wwpEnvDryContactCloseStateChgAccumulate, wwpEnvFanModuleTable=wwpEnvFanModuleTable, wwpEnvDryContactOpenStateCount=wwpEnvDryContactOpenStateCount, wwpPowerSwitchingOp=wwpPowerSwitchingOp, wwpEnvBatteryPowerUpTrapsEnable=wwpEnvBatteryPowerUpTrapsEnable, wwpEnvBattStatus=wwpEnvBattStatus, wwpEnvRFModuleState=wwpEnvRFModuleState, wwpEnvFanAvgSpeed=wwpEnvFanAvgSpeed, wwpEnvFanModuleEntry=wwpEnvFanModuleEntry, wwpEnvDryContactCloseStateNotification=wwpEnvDryContactCloseStateNotification, wwpEnvFanModuleNotifEnabled=wwpEnvFanModuleNotifEnabled, wwpEnvRFModule=wwpEnvRFModule, wwpEnvPortalBatteryCondition=wwpEnvPortalBatteryCondition, wwpEnvFanModuleNotification=wwpEnvFanModuleNotification, wwpEnvPortPowerMgmt=wwpEnvPortPowerMgmt)
