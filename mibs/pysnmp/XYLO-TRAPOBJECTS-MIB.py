#
# PySNMP MIB module XYLO-TRAPOBJECTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLO-TRAPOBJECTS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:39:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, TimeTicks, Gauge32, Integer32, MibIdentifier, NotificationType, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "TimeTicks", "Gauge32", "Integer32", "MibIdentifier", "NotificationType", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
callmgmtTrapObj, genericTrapObj, anxTrapHostInfo, modemTrapObj, wanTrapObj = mibBuilder.importSymbols("XYLO-MIB-SMI", "callmgmtTrapObj", "genericTrapObj", "anxTrapHostInfo", "modemTrapObj", "wanTrapObj")
wanBpvThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanBpvThreshold.setStatus('mandatory')
wanOofThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanOofThreshold.setStatus('mandatory')
wanEsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanEsThreshold.setStatus('mandatory')
wanCvThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanCvThreshold.setStatus('mandatory')
wanEsfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanEsfThreshold.setStatus('mandatory')
wanSesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanSesThreshold.setStatus('mandatory')
wanUasThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanUasThreshold.setStatus('mandatory')
wanBesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanBesThreshold.setStatus('mandatory')
wanLofcThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanLofcThreshold.setStatus('mandatory')
wanCssThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanCssThreshold.setStatus('mandatory')
ds0ErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0ErrorThreshold.setStatus('mandatory')
mdmErrorTrapThresh = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmErrorTrapThresh.setStatus('mandatory')
callBeginTrapObj = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callBeginTrapObj.setStatus('mandatory')
callEndTrapThresh = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callEndTrapThresh.setStatus('mandatory')
unexpectDisconnectTrapThresh = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unexpectDisconnectTrapThresh.setStatus('mandatory')
forcedCallDisconnectTrapThresh = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forcedCallDisconnectTrapThresh.setStatus('mandatory')
diallnkTrpEna = MibScalar((1, 3, 6, 1, 4, 1, 15, 100, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diallnkTrpEna.setStatus('mandatory')
anxTrapHostMax = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapHostMax.setStatus('mandatory')
anxTrapHostCurEnt = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapHostCurEnt.setStatus('mandatory')
anxTrapHostNext = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapHostNext.setStatus('mandatory')
anxTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 10, 4), )
if mibBuilder.loadTexts: anxTrapHostTable.setStatus('mandatory')
anxTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1), ).setIndexNames((0, "XYLO-TRAPOBJECTS-MIB", "anxTrapHostIndex"))
if mibBuilder.loadTexts: anxTrapHostEntry.setStatus('mandatory')
anxTrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapHostIndex.setStatus('mandatory')
anxTrapHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("ignore", 3), ("delete", 4), ("create", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTrapHostStatus.setStatus('mandatory')
anxTrapHostAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTrapHostAddrType.setStatus('mandatory')
anxTrapHostNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTrapHostNetAddr.setStatus('mandatory')
anxTrapHostComm = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTrapHostComm.setStatus('mandatory')
anxTrapHostAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTrapHostAgeTime.setStatus('mandatory')
anxTrapHostPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTrapHostPortNumber.setStatus('mandatory')
anxTrapHostGrouping = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 10, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTrapHostGrouping.setStatus('mandatory')
anxTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapUserName.setStatus('mandatory')
anxTrapPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapPortIndex.setStatus('mandatory')
anxTrapPortType = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("async", 1), ("sync", 2), ("virtual", 3), ("dialout", 4), ("ethernet", 5), ("rfc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapPortType.setStatus('mandatory')
anxTrapInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapInetAddr.setStatus('mandatory')
anxTrapAttackErrcode = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("maxThreshold", 1), ("timeThreshold", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapAttackErrcode.setStatus('mandatory')
anxTrapAttackErrmsg = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapAttackErrmsg.setStatus('mandatory')
anxTrapDbErrcode = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read-error", 1), ("write-error", 2), ("protect-error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapDbErrcode.setStatus('mandatory')
anxTrapDbErrmsg = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxTrapDbErrmsg.setStatus('mandatory')
trapModemMsg = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapModemMsg.setStatus('mandatory')
operImageModemImage = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operImageModemImage.setStatus('mandatory')
wanVersion = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanVersion.setStatus('mandatory')
trapAfdMsg = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 10, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAfdMsg.setStatus('mandatory')
mibBuilder.exportSymbols("XYLO-TRAPOBJECTS-MIB", wanCvThreshold=wanCvThreshold, wanEsThreshold=wanEsThreshold, unexpectDisconnectTrapThresh=unexpectDisconnectTrapThresh, anxTrapHostAddrType=anxTrapHostAddrType, wanEsfThreshold=wanEsfThreshold, anxTrapHostMax=anxTrapHostMax, wanVersion=wanVersion, anxTrapHostStatus=anxTrapHostStatus, anxTrapAttackErrcode=anxTrapAttackErrcode, anxTrapHostEntry=anxTrapHostEntry, anxTrapPortType=anxTrapPortType, wanCssThreshold=wanCssThreshold, anxTrapPortIndex=anxTrapPortIndex, anxTrapInetAddr=anxTrapInetAddr, wanOofThreshold=wanOofThreshold, anxTrapHostComm=anxTrapHostComm, anxTrapHostTable=anxTrapHostTable, ds0ErrorThreshold=ds0ErrorThreshold, anxTrapHostCurEnt=anxTrapHostCurEnt, operImageModemImage=operImageModemImage, diallnkTrpEna=diallnkTrpEna, wanBpvThreshold=wanBpvThreshold, forcedCallDisconnectTrapThresh=forcedCallDisconnectTrapThresh, wanUasThreshold=wanUasThreshold, wanSesThreshold=wanSesThreshold, callEndTrapThresh=callEndTrapThresh, trapModemMsg=trapModemMsg, anxTrapHostNext=anxTrapHostNext, anxTrapHostIndex=anxTrapHostIndex, anxTrapHostPortNumber=anxTrapHostPortNumber, anxTrapHostAgeTime=anxTrapHostAgeTime, anxTrapUserName=anxTrapUserName, mdmErrorTrapThresh=mdmErrorTrapThresh, anxTrapHostNetAddr=anxTrapHostNetAddr, anxTrapAttackErrmsg=anxTrapAttackErrmsg, anxTrapHostGrouping=anxTrapHostGrouping, trapAfdMsg=trapAfdMsg, anxTrapDbErrcode=anxTrapDbErrcode, wanBesThreshold=wanBesThreshold, anxTrapDbErrmsg=anxTrapDbErrmsg, wanLofcThreshold=wanLofcThreshold, callBeginTrapObj=callBeginTrapObj)
