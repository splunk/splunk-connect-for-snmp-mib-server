#
# PySNMP MIB module CXLlcFrConv-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXLlcFrConv-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
Alias, cxLlcFrConv = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxLlcFrConv")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ModuleIdentity, IpAddress, ObjectIdentity, NotificationType, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Unsigned32, Integer32, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "IpAddress", "ObjectIdentity", "NotificationType", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Unsigned32", "Integer32", "Gauge32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

llcfrcnvSysRouteConnectInterval = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 900)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSysRouteConnectInterval.setStatus('mandatory')
llcfrcnvMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvMibLevel.setStatus('mandatory')
llcfrcnvSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10), )
if mibBuilder.loadTexts: llcfrcnvSapTable.setStatus('mandatory')
llcfrcnvSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1), ).setIndexNames((0, "CXLlcFrConv-MIB", "llcfrcnvSapNumber"))
if mibBuilder.loadTexts: llcfrcnvSapEntry.setStatus('mandatory')
llcfrcnvSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapNumber.setStatus('mandatory')
llcfrcnvSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapRowStatus.setStatus('mandatory')
llcfrcnvSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapAlias.setStatus('mandatory')
llcfrcnvSapSrcLlcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapSrcLlcSap.setStatus('mandatory')
llcfrcnvSapDstLlcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapDstLlcSap.setStatus('mandatory')
llcfrcnvSapRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapRouteIndex.setStatus('mandatory')
llcfrcnvSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: llcfrcnvSapControl.setStatus('mandatory')
llcfrcnvSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLine", 1), ("unbound", 2), ("bound", 3), ("connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapState.setStatus('mandatory')
llcfrcnvSapTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapTxFrames.setStatus('mandatory')
llcfrcnvSapRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapRxFrames.setStatus('mandatory')
llcfrcnvSapTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapTxOctets.setStatus('mandatory')
llcfrcnvSapRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapRxOctets.setStatus('mandatory')
llcfrcnvSapUnopenedServiceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapUnopenedServiceDiscards.setStatus('mandatory')
llcfrcnvSapTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapTxResets.setStatus('mandatory')
llcfrcnvSapRxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapRxResets.setStatus('mandatory')
llcfrcnvSapHostMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 16), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapHostMacAddr.setStatus('mandatory')
llcfrcnvSapCntrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 17), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapCntrMacAddr.setStatus('mandatory')
llcfrcnvSysRouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11), )
if mibBuilder.loadTexts: llcfrcnvSysRouteTable.setStatus('mandatory')
llcfrcnvSysRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1), ).setIndexNames((0, "CXLlcFrConv-MIB", "llcfrcnvSRIndex"))
if mibBuilder.loadTexts: llcfrcnvSysRouteEntry.setStatus('mandatory')
llcfrcnvSRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSRIndex.setStatus('mandatory')
llcfrcnvSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSRRowStatus.setStatus('mandatory')
llcfrcnvSRDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSRDestAlias.setStatus('mandatory')
llcfrcnvSRControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: llcfrcnvSRControl.setStatus('mandatory')
llcfrcnvSRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2), ("priority-low", 3), ("priority-high", 4))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSRPriority.setStatus('mandatory')
llcfrcnvSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 6), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSRSubRef.setStatus('mandatory')
llcfrcnvSRRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("inProgress", 3), ("connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSRRouteStatus.setStatus('mandatory')
llcfrcnvSRClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("remoteAllocFailure", 3), ("remoteNoAccess", 4), ("remotePvcDown", 5), ("remotePvcBusy", 6), ("localFcnFailure", 7), ("remoteFcnFailure", 8), ("remoteAliasNotFound", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSRClearStatus.setStatus('mandatory')
llcfrcnvSROutSuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSROutSuccessfullConnects.setStatus('mandatory')
llcfrcnvSROutUnsuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSROutUnsuccessfullConnects.setStatus('mandatory')
mibBuilder.exportSymbols("CXLlcFrConv-MIB", MacAddress=MacAddress, llcfrcnvSapTable=llcfrcnvSapTable, llcfrcnvSapState=llcfrcnvSapState, llcfrcnvSapTxFrames=llcfrcnvSapTxFrames, llcfrcnvSapTxOctets=llcfrcnvSapTxOctets, llcfrcnvSRControl=llcfrcnvSRControl, llcfrcnvSysRouteConnectInterval=llcfrcnvSysRouteConnectInterval, llcfrcnvMibLevel=llcfrcnvMibLevel, llcfrcnvSapCntrMacAddr=llcfrcnvSapCntrMacAddr, llcfrcnvSapNumber=llcfrcnvSapNumber, llcfrcnvSRSubRef=llcfrcnvSRSubRef, llcfrcnvSapUnopenedServiceDiscards=llcfrcnvSapUnopenedServiceDiscards, llcfrcnvSapTxResets=llcfrcnvSapTxResets, llcfrcnvSysRouteEntry=llcfrcnvSysRouteEntry, llcfrcnvSapHostMacAddr=llcfrcnvSapHostMacAddr, llcfrcnvSRRowStatus=llcfrcnvSRRowStatus, llcfrcnvSRIndex=llcfrcnvSRIndex, llcfrcnvSapEntry=llcfrcnvSapEntry, llcfrcnvSROutSuccessfullConnects=llcfrcnvSROutSuccessfullConnects, llcfrcnvSapControl=llcfrcnvSapControl, llcfrcnvSapSrcLlcSap=llcfrcnvSapSrcLlcSap, llcfrcnvSysRouteTable=llcfrcnvSysRouteTable, SubRef=SubRef, llcfrcnvSRClearStatus=llcfrcnvSRClearStatus, llcfrcnvSapRxOctets=llcfrcnvSapRxOctets, llcfrcnvSapRouteIndex=llcfrcnvSapRouteIndex, llcfrcnvSapRxFrames=llcfrcnvSapRxFrames, llcfrcnvSRPriority=llcfrcnvSRPriority, llcfrcnvSROutUnsuccessfullConnects=llcfrcnvSROutUnsuccessfullConnects, llcfrcnvSapAlias=llcfrcnvSapAlias, llcfrcnvSRRouteStatus=llcfrcnvSRRouteStatus, llcfrcnvSapDstLlcSap=llcfrcnvSapDstLlcSap, llcfrcnvSapRowStatus=llcfrcnvSapRowStatus, llcfrcnvSRDestAlias=llcfrcnvSRDestAlias, llcfrcnvSapRxResets=llcfrcnvSapRxResets)
