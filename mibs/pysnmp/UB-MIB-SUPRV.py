#
# PySNMP MIB module UB-MIB-SUPRV (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UB-MIB-SUPRV
# Produced by pysmi-0.3.4 at Mon Apr 29 21:21:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
DisplayString, ifIndex = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString", "ifIndex")
PhysAddress, = mibBuilder.importSymbols("RFC1213", "PhysAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, Counter32, enterprises, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, TimeTicks, Gauge32, iso, Unsigned32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Counter32", "enterprises", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Gauge32", "iso", "Unsigned32", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ubNode = MibIdentifier((1, 3, 6, 1, 4, 1, 75))
ubEquip = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1))
ubTrapAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 3))
ubSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 4))
ubSuprv = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1, 1))
hub = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1, 1, 1))
card = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1, 1, 2))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1, 1, 3))
ubSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 4, 1))
hubId = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubId.setStatus('mandatory')
hubType = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 11))).clone(namedValues=NamedValues(("oneSlot-ASE1000", 1), ("twoSlot-ASE2000", 3), ("fiveSlot-ASE3000", 5), ("elevenSlot-ASE7000", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubType.setStatus('mandatory')
hubName = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubName.setStatus('mandatory')
hubSerNumber = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubSerNumber.setStatus('mandatory')
hubIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubIPAddr.setStatus('mandatory')
hubPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("normalPower", 2), ("acPowerAbnormal", 3), ("highTemp", 4), ("onePsModuleFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPowerSupplyStatus.setStatus('mandatory')
hubTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("abnormalTemperature", 2), ("normalTemperature", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubTempStatus.setStatus('mandatory')
hubPollTime = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notApplicable", 1), ("no-polling-requested", 2), ("oneHalfSec", 3), ("oneSec", 4), ("onePt5secs", 5), ("twoSecs", 6), ("twoPt5secs", 7), ("threeSecs", 8), ("threePt5secs", 9), ("fourSecs", 10), ("fourPt5secs", 11), ("fiveSecs", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPollTime.setStatus('mandatory')
hubResetAction = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("not-requested", 2), ("resetAllCards", 3), ("forceLoad", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubResetAction.setStatus('mandatory')
hubAFS = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normalAirflow", 2), ("abnormalAirflow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAFS.setStatus('mandatory')
ensupStaticNetConfig = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("netAndSupDirect", 2), ("supOnly", 3), ("netOnly", 4), ("supElseBridge", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupStaticNetConfig.setStatus('mandatory')
ensupDynamicNetStatus = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("netAndSupDirect", 2), ("supOnly", 3), ("netOnly", 4), ("bridgeOnly", 5), ("netOrSupLoopback", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupDynamicNetStatus.setStatus('mandatory')
ensupNetBridgeSlot = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notApplicable", 1), ("slot-1", 2), ("slot-2", 3), ("slot-3", 4), ("slot-4", 5), ("slot-5", 6), ("slot-6", 7), ("slot-7", 8), ("slot-8", 9), ("slot-9", 10), ("slot-10", 11), ("slot-11", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupNetBridgeSlot.setStatus('mandatory')
ensupCarrierCounter = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupCarrierCounter.setStatus('mandatory')
ensupNetUtilization = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupNetUtilization.setStatus('mandatory')
ensupNetUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupNetUtilThreshold.setStatus('mandatory')
a1gTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7), )
if mibBuilder.loadTexts: a1gTable.setStatus('mandatory')
a1gEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "a1gSlotId"))
if mibBuilder.loadTexts: a1gEntry.setStatus('mandatory')
a1gSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gSlotId.setStatus('mandatory')
a1gPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gPorts.setStatus('mandatory')
a1gOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("initializing", 2), ("powerOnDiagnostics", 3), ("debugMode", 4), ("onlineDiagnostics", 5), ("moduleFault", 6), ("netBooting", 7), ("netLoading", 8), ("cbLoading", 9), ("up", 10), ("standby", 11), ("softwareDisabled", 12), ("reset", 13), ("inactive", 14), ("active", 15), ("notResponding", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gOperStatus.setStatus('mandatory')
a1gTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("abnormalTemperature", 2), ("normalTemperature", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gTempStatus.setStatus('mandatory')
a1gEthBusAdmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("unlock", 2), ("lock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1gEthBusAdmAction.setStatus('mandatory')
a1gEthBusMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("unlocked", 2), ("locked", 3), ("notResponding", 4), ("autosegmented", 5), ("hardwareFault", 6), ("lockedByJumper", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gEthBusMgmtStatus.setStatus('mandatory')
a1gNetMgmtBusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("enabled", 2), ("notResponding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gNetMgmtBusOperStatus.setStatus('mandatory')
a1gProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("notApplicable", 1), ("suprv-780", 2), ("suprv-700", 3), ("brsuprv-760", 4), ("brsuprv-710", 5), ("net-500", 6), ("net-550", 7), ("brnet-560", 8), ("brnet-510", 9), ("trc-400", 10), ("ecm-300", 11), ("tec-900", 12), ("fec-800", 13), ("ecm-310", 14), ("async-100", 15), ("mtm-7100", 16), ("m3270", 17), ("lebr-5300", 18), ("ltebr-5500", 19), ("lttbr-5550", 20), ("t1ebr-6300", 21), ("t1tbr-6500", 22), ("lftbr-5560", 23), ("lfebr-5360", 24), ("lebr-5340", 25), ("ecm-320-1", 26), ("ecm-320-2", 27), ("trc-410-1", 28), ("trc-410-2", 29), ("suprv-790", 30), ("ausup-700s", 31), ("tpsup-700s", 32), ("suprv-790s16", 33), ("fosup-700s", 34), ("suprv-700s", 35), ("net-500s", 36), ("rr-8300", 37), ("rr-8310", 38), ("rr-8320", 39), ("rr-8500", 40), ("rr-8510", 41), ("rr-8520", 42), ("fBrR-5361", 43), ("eTBrR-5530", 44), ("eBrR-5330", 45), ("suprv-790s4", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gProductType.setStatus('mandatory')
a1gUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gUpTime.setStatus('mandatory')
a1gResets = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gResets.setStatus('mandatory')
a1gResetAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noResetRequested", 1), ("enterDebugMode", 2), ("podThenDebug", 3), ("podThenNetdownload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1gResetAction.setStatus('mandatory')
configTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8), )
if mibBuilder.loadTexts: configTable.setStatus('mandatory')
configEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "configSlotId"))
if mibBuilder.loadTexts: configEntry.setStatus('mandatory')
configSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configSlotId.setStatus('mandatory')
configFaultActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("reset", 2), ("stayInReset", 3), ("noSupvAction", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFaultActionType.setStatus('mandatory')
configRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRetries.setStatus('mandatory')
configPowerUpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("debug", 2), ("podThenDebug", 3), ("podThenNetdownload", 4), ("pod-CopyUserMem-Run", 5), ("pod-CopyDefaults-Run", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPowerUpMode.setStatus('mandatory')
a1imTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9), )
if mibBuilder.loadTexts: a1imTable.setStatus('mandatory')
a1imEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "a1imSlotId"))
if mibBuilder.loadTexts: a1imEntry.setStatus('mandatory')
a1imSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imSlotId.setStatus('mandatory')
a1imMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imMACAddr.setStatus('mandatory')
a1imPodDiagnosticMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imPodDiagnosticMsg.setStatus('mandatory')
a1imModuleFault = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("noFault", 2), ("parityError", 3), ("networkError", 4), ("diagosticError", 5), ("operationalError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imModuleFault.setStatus('mandatory')
a1imHaltReason = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("notAvailable", 1), ("unexpectedSoftInterrupt", 2), ("halted", 3), ("singleStepped", 4), ("breakpoint", 5), ("errorDivideByZero", 6), ("badSingleStep", 7), ("nonMaskableInterrupt", 8), ("badBreakpoint", 9), ("arithmeticOverflow", 10), ("exceededArrayBounds", 11), ("invalidOpcode", 12), ("invalidEscapeOpcode", 13), ("timer-0Interrupt", 14), ("reservedInterrupt", 15), ("dma-0Interrupt", 16), ("dma-1Interrupt", 17), ("int-0Interrupt", 18), ("int-1Interrupt", 19), ("int-2Interrupt", 20), ("timer-1Interrupt", 21), ("timer-2Interrupt", 22), ("parityError", 23), ("watchDogTimeout", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imHaltReason.setStatus('mandatory')
a1imDebugRegisters = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imDebugRegisters.setStatus('mandatory')
tplTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10), )
if mibBuilder.loadTexts: tplTable.setStatus('mandatory')
tplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tplSlotId"))
if mibBuilder.loadTexts: tplEntry.setStatus('mandatory')
tplSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplSlotId.setStatus('mandatory')
tplIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplIPAddress.setStatus('mandatory')
tplNiuName = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplNiuName.setStatus('mandatory')
tplProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("xns", 2), ("tcpIp", 3), ("iso", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplProtocolType.setStatus('mandatory')
tplSuprvPollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("responding", 2), ("notResponding", 3), ("pollingSuspended", 4), ("cannotPoll", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplSuprvPollStatus.setStatus('mandatory')
imenEthBusTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11), )
if mibBuilder.loadTexts: imenEthBusTable.setStatus('mandatory')
imenEthBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "imenSlotId"))
if mibBuilder.loadTexts: imenEthBusEntry.setStatus('mandatory')
imenSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenSlotId.setStatus('mandatory')
imenTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenTransmitPkts.setStatus('mandatory')
imenReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenReceivePkts.setStatus('mandatory')
imenCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenCRCErrors.setStatus('mandatory')
imenCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenCollisions.setStatus('mandatory')
brdgTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12), )
if mibBuilder.loadTexts: brdgTable.setStatus('mandatory')
brdgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "brdgSlotId"), (0, "UB-MIB-SUPRV", "brdgIfId"))
if mibBuilder.loadTexts: brdgEntry.setStatus('mandatory')
brdgSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgSlotId.setStatus('mandatory')
brdgIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgIfId.setStatus('mandatory')
brdgIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ethernetBus", 2), ("baseband802-3", 3), ("fourMbps802-5", 4), ("fddi", 5), ("t1", 6), ("broadband802-3", 7), ("sixteenMbps802-5", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgIfType.setStatus('mandatory')
brdgIfFault = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("linkDown", 2), ("linkUp", 3), ("linkLoopbackTest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgIfFault.setStatus('mandatory')
brdgIfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgIfMACAddr.setStatus('mandatory')
ecTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13), )
if mibBuilder.loadTexts: ecTable.setStatus('mandatory')
ecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "ecSlotId"))
if mibBuilder.loadTexts: ecEntry.setStatus('mandatory')
ecSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecSlotId.setStatus('mandatory')
ecCarrierCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecCarrierCounter.setStatus('mandatory')
ecFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normalFan", 2), ("abnormalFan", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecFanStatus.setStatus('mandatory')
netTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14), )
if mibBuilder.loadTexts: netTable.setStatus('mandatory')
netEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "netSlotId"))
if mibBuilder.loadTexts: netEntry.setStatus('mandatory')
netSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netSlotId.setStatus('mandatory')
netBackboneType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("baseband", 2), ("broadband", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBackboneType.setStatus('mandatory')
netFault = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("internalFault", 2), ("auiBad", 3), ("mdiBad", 4), ("bufferedRepeaterBad", 5), ("normal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netFault.setStatus('mandatory')
netBackboneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("netOnly", 2), ("netAndSupDirect", 3), ("loopback", 4), ("bridgeOnly", 5), ("standby", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBackboneStatus.setStatus('mandatory')
brnTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15), )
if mibBuilder.loadTexts: brnTable.setStatus('mandatory')
brnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "brnSlotId"), (0, "UB-MIB-SUPRV", "brnIfId"))
if mibBuilder.loadTexts: brnEntry.setStatus('mandatory')
brnSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnSlotId.setStatus('mandatory')
brnIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("if-1", 1), ("if-ETHBUS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnIfId.setStatus('mandatory')
brnIfEthDLCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("parityError", 3), ("collisions-16", 4), ("collision", 5), ("underflow", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnIfEthDLCStatus.setStatus('mandatory')
brnCarrierCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnCarrierCounter.setStatus('mandatory')
brnCarrierTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnCarrierTimeInterval.setStatus('mandatory')
brnTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnTransmitPkts.setStatus('mandatory')
brnReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnReceivePkts.setStatus('mandatory')
brnCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnCRCErrors.setStatus('mandatory')
brnCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnCollisions.setStatus('mandatory')
brnPktsAborted16Colls = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnPktsAborted16Colls.setStatus('mandatory')
brnShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnShortPkts.setStatus('mandatory')
brnAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnAlignmentErrors.setStatus('mandatory')
brnOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnOverflows.setStatus('mandatory')
brnUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnUnderflows.setStatus('mandatory')
tr16cTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16), )
if mibBuilder.loadTexts: tr16cTable.setStatus('mandatory')
tr16cEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16cSlotId"))
if mibBuilder.loadTexts: tr16cEntry.setStatus('mandatory')
tr16cSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cSlotId.setStatus('mandatory')
tr16cTier = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tier-1", 1), ("tier-2", 2), ("tier-3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cTier.setStatus('mandatory')
tr16cOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("beaconDetectInProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cOperState.setStatus('mandatory')
tr16cRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cRingNumber.setStatus('mandatory')
tr16cManufacturerID = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cManufacturerID.setStatus('mandatory')
tr16cManufacturerProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cManufacturerProductID.setStatus('mandatory')
tr16cManufProductVers = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cManufProductVers.setStatus('mandatory')
tr16cActiveMonitorPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cActiveMonitorPortNumber.setStatus('mandatory')
tr16cRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("fourMbps", 2), ("sixteenMbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cRingSpeed.setStatus('mandatory')
tr16cLLCFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cLLCFrames.setStatus('mandatory')
tr16cMACFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cMACFrames.setStatus('mandatory')
tr16cOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cOctets.setStatus('mandatory')
tr16cMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cMulticastFrames.setStatus('mandatory')
tr16cBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cBroadcastFrames.setStatus('mandatory')
tr16cFrameCheckSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cFrameCheckSequences.setStatus('mandatory')
tr16cAutoPartitionEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 16), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16cAutoPartitionEnableTimer.setStatus('mandatory')
tr16cAutoPartitionHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 17), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16cAutoPartitionHoldTimer.setStatus('mandatory')
tr16cAutoPartitionRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16cAutoPartitionRetries.setStatus('mandatory')
tr16cLLCSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cLLCSamples.setStatus('mandatory')
tr16cMACSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cMACSamples.setStatus('mandatory')
tr16cUpTimeMS = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cUpTimeMS.setStatus('mandatory')
tr16cResetDurableUserAttrs = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetComplete", 1), ("setToDefaults", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16cResetDurableUserAttrs.setStatus('mandatory')
tr16reTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17), )
if mibBuilder.loadTexts: tr16reTable.setStatus('mandatory')
tr16reEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16reSlotId"))
if mibBuilder.loadTexts: tr16reEntry.setStatus('mandatory')
tr16reSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reSlotId.setStatus('mandatory')
tr16reLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reLostFrames.setStatus('mandatory')
tr16reRcvCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reRcvCongestionErrors.setStatus('mandatory')
tr16reFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reFrequencyErrors.setStatus('mandatory')
tr16reFrameCopyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reFrameCopyErrors.setStatus('mandatory')
tr16reTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reTokenErrors.setStatus('mandatory')
ecpTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ecpTable.setStatus('mandatory')
ecpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "ecpSlotId"), (0, "UB-MIB-SUPRV", "ecpPortId"))
if mibBuilder.loadTexts: ecpEntry.setStatus('mandatory')
ecpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSlotId.setStatus('mandatory')
ecpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpPortId.setStatus('mandatory')
ecpMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("enabled", 2), ("lockedByNMC", 3), ("autosegmented", 4), ("faultyLockedBySuprv", 5), ("lowLight", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpMgmtStatus.setStatus('mandatory')
ecpAdmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("unlocked", 2), ("locked", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpAdmAction.setStatus('mandatory')
ecpCarrierCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpCarrierCounter.setStatus('mandatory')
ecfpTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2), )
if mibBuilder.loadTexts: ecfpTable.setStatus('mandatory')
ecfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "ecfpSlotId"), (0, "UB-MIB-SUPRV", "ecfpPortId"))
if mibBuilder.loadTexts: ecfpEntry.setStatus('mandatory')
ecfpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecfpSlotId.setStatus('mandatory')
ecfpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecfpPortId.setStatus('mandatory')
ecfpMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecfpMACAddr.setStatus('mandatory')
ecfpTxIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecfpTxIdleTime.setStatus('mandatory')
ec10btpTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3), )
if mibBuilder.loadTexts: ec10btpTable.setStatus('mandatory')
ec10btpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "ec10btpSlotId"), (0, "UB-MIB-SUPRV", "ec10btpPortId"))
if mibBuilder.loadTexts: ec10btpEntry.setStatus('mandatory')
ec10btpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ec10btpSlotId.setStatus('mandatory')
ec10btpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ec10btpPortId.setStatus('mandatory')
ec10btpLinkTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("testLocked", 2), ("testFailed", 3), ("testPassed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ec10btpLinkTestStatus.setStatus('mandatory')
ec10btpLinkTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("unlockIntegrityTest", 2), ("lockIntegrityTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ec10btpLinkTestAction.setStatus('mandatory')
trcpTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4), )
if mibBuilder.loadTexts: trcpTable.setStatus('mandatory')
trcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "trcpSlotId"), (0, "UB-MIB-SUPRV", "trcpPortId"))
if mibBuilder.loadTexts: trcpEntry.setStatus('mandatory')
trcpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcpSlotId.setStatus('mandatory')
trcpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("rs1", 1), ("rs2", 2), ("rs3", 3), ("rs4", 4), ("rs5", 5), ("rs6", 6), ("rs7", 7), ("rs8", 8), ("rs9", 9), ("rs10", 10), ("rs11", 11), ("rs12", 12), ("rs13", 13), ("rs14", 14), ("rs15", 15), ("rs16", 16), ("rs17", 17), ("rs18", 18), ("rs19", 19), ("rs20", 20), ("in", 21), ("out", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcpPortId.setStatus('mandatory')
trcpAdmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("unlock", 2), ("lock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trcpAdmAction.setStatus('mandatory')
trcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("stationInserted", 2), ("selfBypass", 3), ("portError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcpOperStatus.setStatus('mandatory')
tr16p1Table = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5), )
if mibBuilder.loadTexts: tr16p1Table.setStatus('mandatory')
tr16p1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16p1SlotId"), (0, "UB-MIB-SUPRV", "tr16p1PortId"))
if mibBuilder.loadTexts: tr16p1Entry.setStatus('mandatory')
tr16p1SlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p1SlotId.setStatus('mandatory')
tr16p1PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rs1", 1), ("rs2", 2), ("rs3", 3), ("rs4", 4), ("rs5", 5), ("rs6", 6), ("rs7", 7), ("rs8", 8), ("rs9", 9), ("rs10", 10), ("rs11", 11), ("rs12", 12), ("in", 13), ("out", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p1PortId.setStatus('mandatory')
tr16p1InsertionState = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("inserted", 2), ("bypassed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p1InsertionState.setStatus('mandatory')
tr16p1AllowInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("insertionNotAllowed", 2), ("insertionAllowed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16p1AllowInsert.setStatus('mandatory')
tr16p1ForceInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noForcedInsertion", 2), ("forcedInsertion", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16p1ForceInsert.setStatus('mandatory')
tr16p1PhantomState = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("phantomVoltagePresent", 2), ("phantomVoltageAbsent", 3), ("wiringFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p1PhantomState.setStatus('mandatory')
tr16p2Table = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6), )
if mibBuilder.loadTexts: tr16p2Table.setStatus('mandatory')
tr16p2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16p2SlotId"), (0, "UB-MIB-SUPRV", "tr16p2PortId"))
if mibBuilder.loadTexts: tr16p2Entry.setStatus('mandatory')
tr16p2SlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2SlotId.setStatus('mandatory')
tr16p2PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rs1", 1), ("rs2", 2), ("rs3", 3), ("rs4", 4), ("rs5", 5), ("rs6", 6), ("rs7", 7), ("rs8", 8), ("rs9", 9), ("rs10", 10), ("rs11", 11), ("rs12", 12), ("in", 13), ("out", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2PortId.setStatus('mandatory')
tr16p2OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("portOperational", 2), ("autoPartitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2OperState.setStatus('mandatory')
tr16p2BeaconDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2BeaconDetects.setStatus('mandatory')
tr16p2LastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2LastSourceAddress.setStatus('mandatory')
tr16p2LLCFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2LLCFramesTransmitted.setStatus('mandatory')
tr16p2LLCFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2LLCFramesReceived.setStatus('mandatory')
tr16p2MACFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2MACFramesTransmitted.setStatus('mandatory')
tr16p2MACFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2MACFramesReceived.setStatus('mandatory')
tr16p2OctetsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2OctetsTransmitted.setStatus('mandatory')
tr16p2OctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2OctetsReceived.setStatus('mandatory')
tr16p2MulticastsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2MulticastsTransmitted.setStatus('mandatory')
tr16p2BroadcastsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2BroadcastsTransmitted.setStatus('mandatory')
tr16p2FCSErrorsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2FCSErrorsTransmitted.setStatus('mandatory')
tr16p2FCSErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2FCSErrorsReceived.setStatus('mandatory')
tr16p2LastSourceAddressUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2LastSourceAddressUptime.setStatus('mandatory')
tr16p3Table = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7), )
if mibBuilder.loadTexts: tr16p3Table.setStatus('mandatory')
tr16p3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16p3SlotId"), (0, "UB-MIB-SUPRV", "tr16p3PortId"))
if mibBuilder.loadTexts: tr16p3Entry.setStatus('mandatory')
tr16p3SlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3SlotId.setStatus('mandatory')
tr16p3PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rs1", 1), ("rs2", 2), ("rs3", 3), ("rs4", 4), ("rs5", 5), ("rs6", 6), ("rs7", 7), ("rs8", 8), ("rs9", 9), ("rs10", 10), ("rs11", 11), ("rs12", 12), ("in", 13), ("out", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3PortId.setStatus('mandatory')
tr16p3LineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3LineErrors.setStatus('mandatory')
tr16p3InternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3InternalErrors.setStatus('mandatory')
tr16p3Burst5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3Burst5Errors.setStatus('mandatory')
tr16p3AcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3AcErrors.setStatus('mandatory')
tr16p3AbortDelimiters = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3AbortDelimiters.setStatus('mandatory')
trapInstanceId = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 1), Integer32())
if mibBuilder.loadTexts: trapInstanceId.setStatus('mandatory')
trapSlotId = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 2), Integer32())
if mibBuilder.loadTexts: trapSlotId.setStatus('optional')
trapProductType = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 3), Integer32())
if mibBuilder.loadTexts: trapProductType.setStatus('mandatory')
trapPortID = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 4), Integer32())
if mibBuilder.loadTexts: trapPortID.setStatus('optional')
trapPortCount = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 15), Integer32())
if mibBuilder.loadTexts: trapPortCount.setStatus('optional')
trapPortMask = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 16), OctetString())
if mibBuilder.loadTexts: trapPortMask.setStatus('optional')
trpsbTable = MibTable((1, 3, 6, 1, 4, 1, 75, 4, 1, 2), )
if mibBuilder.loadTexts: trpsbTable.setStatus('mandatory')
trpsbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 4, 1, 2, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "trpsbIpAddress"))
if mibBuilder.loadTexts: trpsbEntry.setStatus('mandatory')
trpsbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 4, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trpsbIpAddress.setStatus('mandatory')
trpsbCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 4, 1, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trpsbCommunity.setStatus('mandatory')
trpsbActions = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("subscribeToTraps", 2), ("subscriptionToTrapsCancelled", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trpsbActions.setStatus('mandatory')
moduleInserted = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,1)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,2)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleFaulty = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,3)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleDown = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,4)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleReset = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,5)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleDebug = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,6)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleHighTemperature = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,7)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
ethBusUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,8)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
ethBusLocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,9)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleNetIfEnabled = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,16)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleNetIfDisabled = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,17)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleNetIfLoopBack = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,18)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleNetIfInternalError = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,19)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleNetIfExternalError = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,20)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleParityError = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,21)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleFanBad = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,22)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
beaconDetected = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,23)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
moduleTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,24)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,32)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portLocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,33)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portAutoSegmented = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,34)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portFault = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,35)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portForced = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,36)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portNotForced = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,37)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portLobeFault = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,38)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portLobeFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,39)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"))
portLinkTestUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,40)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
portLinkTestLocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,41)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
badPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,48)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
powerSupplyHiTemp = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,49)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
networkIfError = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,50)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
networkIfOK = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,51)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
tempBad = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,52))
tempOK = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,53)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
fTPSBad = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,54)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
netUtilThreshold = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,55)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
enclosureFanBad = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,56)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
servicePortLogin = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,64)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
servicePortLogout = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,65)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
mibBuilder.exportSymbols("UB-MIB-SUPRV", tr16p2LastSourceAddressUptime=tr16p2LastSourceAddressUptime, a1imPodDiagnosticMsg=a1imPodDiagnosticMsg, moduleFanBad=moduleFanBad, a1gNetMgmtBusOperStatus=a1gNetMgmtBusOperStatus, ec10btpTable=ec10btpTable, hubSerNumber=hubSerNumber, tr16cManufacturerID=tr16cManufacturerID, configTable=configTable, tempOK=tempOK, trapPortID=trapPortID, ecfpSlotId=ecfpSlotId, tr16reLostFrames=tr16reLostFrames, netTable=netTable, ubEquip=ubEquip, tr16cLLCSamples=tr16cLLCSamples, portLobeFault=portLobeFault, tr16p2OperState=tr16p2OperState, ensupStaticNetConfig=ensupStaticNetConfig, ecSlotId=ecSlotId, brnTransmitPkts=brnTransmitPkts, tplTable=tplTable, ecTable=ecTable, moduleNetIfLoopBack=moduleNetIfLoopBack, tr16p2Table=tr16p2Table, a1imTable=a1imTable, tr16cFrameCheckSequences=tr16cFrameCheckSequences, brnReceivePkts=brnReceivePkts, trpsbCommunity=trpsbCommunity, brnIfEthDLCStatus=brnIfEthDLCStatus, tr16cAutoPartitionEnableTimer=tr16cAutoPartitionEnableTimer, ecpAdmAction=ecpAdmAction, ecfpPortId=ecfpPortId, ecpEntry=ecpEntry, tr16p1PortId=tr16p1PortId, portUnlocked=portUnlocked, fTPSBad=fTPSBad, tr16cTable=tr16cTable, tr16cAutoPartitionRetries=tr16cAutoPartitionRetries, brdgSlotId=brdgSlotId, ensupCarrierCounter=ensupCarrierCounter, hubId=hubId, tr16p2OctetsReceived=tr16p2OctetsReceived, badPowerSupply=badPowerSupply, tr16p1Table=tr16p1Table, portLinkTestUnlocked=portLinkTestUnlocked, a1imSlotId=a1imSlotId, tr16cLLCFrames=tr16cLLCFrames, ecfpTxIdleTime=ecfpTxIdleTime, tr16p2Entry=tr16p2Entry, moduleTemperatureNormal=moduleTemperatureNormal, a1gEntry=a1gEntry, hubIPAddr=hubIPAddr, tr16cEntry=tr16cEntry, hubTempStatus=hubTempStatus, tr16cBroadcastFrames=tr16cBroadcastFrames, tr16reFrameCopyErrors=tr16reFrameCopyErrors, moduleDown=moduleDown, trpsbActions=trpsbActions, tr16reEntry=tr16reEntry, a1gProductType=a1gProductType, a1gTable=a1gTable, tr16cRingSpeed=tr16cRingSpeed, tr16p3LineErrors=tr16p3LineErrors, card=card, tplSlotId=tplSlotId, tr16p2LLCFramesTransmitted=tr16p2LLCFramesTransmitted, tr16p3Burst5Errors=tr16p3Burst5Errors, trapSlotId=trapSlotId, tr16reTable=tr16reTable, netUtilThreshold=netUtilThreshold, tr16p1SlotId=tr16p1SlotId, networkIfOK=networkIfOK, ensupDynamicNetStatus=ensupDynamicNetStatus, ecfpEntry=ecfpEntry, imenCollisions=imenCollisions, a1gSlotId=a1gSlotId, tr16cRingNumber=tr16cRingNumber, hubPowerSupplyStatus=hubPowerSupplyStatus, ecpCarrierCounter=ecpCarrierCounter, trapInstanceId=trapInstanceId, imenEthBusTable=imenEthBusTable, port=port, moduleHighTemperature=moduleHighTemperature, tr16cManufacturerProductID=tr16cManufacturerProductID, brdgIfType=brdgIfType, portLobeFaultCleared=portLobeFaultCleared, imenReceivePkts=imenReceivePkts, tr16cMACFrames=tr16cMACFrames, tr16cAutoPartitionHoldTimer=tr16cAutoPartitionHoldTimer, hubResetAction=hubResetAction, ubNode=ubNode, netEntry=netEntry, brnCarrierTimeInterval=brnCarrierTimeInterval, a1gUpTime=a1gUpTime, ecpTable=ecpTable, brdgIfId=brdgIfId, tr16cSlotId=tr16cSlotId, tr16cResetDurableUserAttrs=tr16cResetDurableUserAttrs, tr16reFrequencyErrors=tr16reFrequencyErrors, tr16p2MACFramesTransmitted=tr16p2MACFramesTransmitted, tr16reTokenErrors=tr16reTokenErrors, tr16p3PortId=tr16p3PortId, a1gTempStatus=a1gTempStatus, tr16p3InternalErrors=tr16p3InternalErrors, tr16p3SlotId=tr16p3SlotId, trcpTable=trcpTable, trcpPortId=trcpPortId, tr16p2FCSErrorsReceived=tr16p2FCSErrorsReceived, brnShortPkts=brnShortPkts, a1imDebugRegisters=a1imDebugRegisters, powerSupplyHiTemp=powerSupplyHiTemp, tr16p1ForceInsert=tr16p1ForceInsert, ec10btpSlotId=ec10btpSlotId, ecCarrierCounter=ecCarrierCounter, hubAFS=hubAFS, tr16p1Entry=tr16p1Entry, tr16p3AcErrors=tr16p3AcErrors, ubTrapAttrs=ubTrapAttrs, imenSlotId=imenSlotId, tr16cMulticastFrames=tr16cMulticastFrames, moduleInserted=moduleInserted, ensupNetBridgeSlot=ensupNetBridgeSlot, trapPortMask=trapPortMask, ec10btpEntry=ec10btpEntry, ec10btpLinkTestStatus=ec10btpLinkTestStatus, tr16p3Table=tr16p3Table, tplSuprvPollStatus=tplSuprvPollStatus, tr16p2OctetsTransmitted=tr16p2OctetsTransmitted, a1imMACAddr=a1imMACAddr, tplIPAddress=tplIPAddress, brnIfId=brnIfId, configEntry=configEntry, moduleRemoved=moduleRemoved, portNotForced=portNotForced, brnCRCErrors=brnCRCErrors, moduleDebug=moduleDebug, tr16p2MACFramesReceived=tr16p2MACFramesReceived, moduleNetIfDisabled=moduleNetIfDisabled, imenTransmitPkts=imenTransmitPkts, tempBad=tempBad, brnAlignmentErrors=brnAlignmentErrors, ec10btpPortId=ec10btpPortId, tr16cMACSamples=tr16cMACSamples, servicePortLogin=servicePortLogin, ubSuprv=ubSuprv, tplNiuName=tplNiuName, tplProtocolType=tplProtocolType, tr16p2SlotId=tr16p2SlotId, configSlotId=configSlotId, tr16p3Entry=tr16p3Entry, ensupNetUtilThreshold=ensupNetUtilThreshold, a1gResetAction=a1gResetAction, ecpMgmtStatus=ecpMgmtStatus, trcpSlotId=trcpSlotId, moduleNetIfEnabled=moduleNetIfEnabled, tr16reSlotId=tr16reSlotId, trapProductType=trapProductType, a1gEthBusMgmtStatus=a1gEthBusMgmtStatus, netSlotId=netSlotId, ethBusUnlocked=ethBusUnlocked, portAutoSegmented=portAutoSegmented, portLocked=portLocked, a1imEntry=a1imEntry, a1gPorts=a1gPorts, trpsbIpAddress=trpsbIpAddress, tr16p2LastSourceAddress=tr16p2LastSourceAddress, tr16p2BeaconDetects=tr16p2BeaconDetects, tr16p1AllowInsert=tr16p1AllowInsert, tr16p3AbortDelimiters=tr16p3AbortDelimiters, hubType=hubType, imenCRCErrors=imenCRCErrors, portFault=portFault, hubName=hubName, brnCollisions=brnCollisions, trapPortCount=trapPortCount, configPowerUpMode=configPowerUpMode, tr16cActiveMonitorPortNumber=tr16cActiveMonitorPortNumber, brnTable=brnTable, trpsbTable=trpsbTable, a1gResets=a1gResets, moduleFaulty=moduleFaulty, tr16cOperState=tr16cOperState, tr16cTier=tr16cTier, tr16p2FCSErrorsTransmitted=tr16p2FCSErrorsTransmitted, brnUnderflows=brnUnderflows, brnEntry=brnEntry, tr16p2BroadcastsTransmitted=tr16p2BroadcastsTransmitted, tr16p1InsertionState=tr16p1InsertionState, configRetries=configRetries, brnPktsAborted16Colls=brnPktsAborted16Colls, tr16p2PortId=tr16p2PortId, hub=hub, trpsbEntry=trpsbEntry, tr16reRcvCongestionErrors=tr16reRcvCongestionErrors, moduleParityError=moduleParityError, moduleNetIfExternalError=moduleNetIfExternalError, ec10btpLinkTestAction=ec10btpLinkTestAction, moduleReset=moduleReset, tplEntry=tplEntry, netBackboneStatus=netBackboneStatus, ubSystem=ubSystem, brnOverflows=brnOverflows, netBackboneType=netBackboneType, ecfpTable=ecfpTable, tr16p1PhantomState=tr16p1PhantomState, ecpPortId=ecpPortId, networkIfError=networkIfError, netFault=netFault, a1imModuleFault=a1imModuleFault, brdgIfMACAddr=brdgIfMACAddr, portForced=portForced, portLinkTestLocked=portLinkTestLocked, a1gOperStatus=a1gOperStatus, brnSlotId=brnSlotId, tr16cOctets=tr16cOctets, ethBusLocked=ethBusLocked, a1gEthBusAdmAction=a1gEthBusAdmAction, brdgIfFault=brdgIfFault, tr16cManufProductVers=tr16cManufProductVers, tr16p2LLCFramesReceived=tr16p2LLCFramesReceived, ecpSlotId=ecpSlotId, ecFanStatus=ecFanStatus, moduleNetIfInternalError=moduleNetIfInternalError, ensupNetUtilization=ensupNetUtilization, trcpOperStatus=trcpOperStatus, beaconDetected=beaconDetected, ubSecurity=ubSecurity, ecEntry=ecEntry, brdgTable=brdgTable, hubPollTime=hubPollTime, imenEthBusEntry=imenEthBusEntry, a1imHaltReason=a1imHaltReason, ecfpMACAddr=ecfpMACAddr, configFaultActionType=configFaultActionType, enclosureFanBad=enclosureFanBad, brdgEntry=brdgEntry, tr16cUpTimeMS=tr16cUpTimeMS, trcpAdmAction=trcpAdmAction, brnCarrierCounter=brnCarrierCounter, trcpEntry=trcpEntry, tr16p2MulticastsTransmitted=tr16p2MulticastsTransmitted, servicePortLogout=servicePortLogout)
