#
# PySNMP MIB module TERACOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERACOM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, enterprises, ModuleIdentity, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, IpAddress, snmpModules, Unsigned32, MibIdentifier, NotificationType, ObjectIdentity, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "ModuleIdentity", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "IpAddress", "snmpModules", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity", "Counter32", "Gauge32")
DateAndTime, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "MacAddress", "TextualConvention", "DisplayString")
snmpMIB = ModuleIdentity((1, 3, 6, 1, 6, 3, 1))
snmpMIB.setRevisions(('2015-05-27 00:00',))
if mibBuilder.loadTexts: snmpMIB.setLastUpdated('201505270000Z')
if mibBuilder.loadTexts: snmpMIB.setOrganization('TERACOM')
teracom = MibIdentifier((1, 3, 6, 1, 4, 1, 38783))
tcw240b = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1))
trapNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 0))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 1))
setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 1))
monitorNcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3))
tcw240bMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 4))
tcw240bMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 4, 1))
tcw240bMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 4, 2))
class CONTROLLED(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("manual", 0), ("sensor11", 1), ("sensor21", 2), ("sensor31", 3), ("sensor41", 4), ("sensor51", 5), ("sensor61", 6), ("sensor71", 7), ("sensor81", 8), ("sensor12", 9), ("sensor22", 10), ("sensor32", 11), ("sensor42", 12), ("sensor52", 13), ("sensor62", 14), ("sensor72", 15), ("sensor82", 16), ("analog1", 17), ("analog2", 18), ("analog3", 19), ("analog4", 20), ("digital1", 21), ("digital2", 22), ("digital3", 23), ("digital4", 24), ("scheduler1", 25), ("scheduler2", 26), ("scheduler3", 27), ("scheduler4", 28))

name = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('current')
version = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('current')
dateTime = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dateTime.setStatus('current')
deviceID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceID.setStatus('current')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('current')
deviceIP = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIP.setStatus('current')
io = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2))
sensorsSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1))
sensor1setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1))
sensor2setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2))
sensor3setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3))
sensor4setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4))
sensor5setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5))
sensor6setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6))
sensor7setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7))
sensor8setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8))
s1description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s1description.setStatus('current')
sensor11setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 2))
sensor12setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 3))
s11MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s11MAXx10Int.setStatus('current')
s11MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s11MINx10Int.setStatus('current')
s11HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s11HYSTx10Int.setStatus('current')
s12MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s12MAXx10Int.setStatus('current')
s12MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s12MINx10Int.setStatus('current')
s12HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s12HYSTx10Int.setStatus('current')
s2description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s2description.setStatus('current')
sensor21setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 2))
sensor22setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 3))
s21MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s21MAXx10Int.setStatus('current')
s21MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s21MINx10Int.setStatus('current')
s21HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s21HYSTx10Int.setStatus('current')
s22MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s22MAXx10Int.setStatus('current')
s22MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s22MINx10Int.setStatus('current')
s22HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s22HYSTx10Int.setStatus('current')
s3description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3description.setStatus('current')
sensor31setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 2))
sensor32setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 3))
s31MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s31MAXx10Int.setStatus('current')
s31MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s31MINx10Int.setStatus('current')
s31HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s31HYSTx10Int.setStatus('current')
s32MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s32MAXx10Int.setStatus('current')
s32MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s32MINx10Int.setStatus('current')
s32HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s32HYSTx10Int.setStatus('current')
s4description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s4description.setStatus('current')
sensor41setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 2))
sensor42setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 3))
s41MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s41MAXx10Int.setStatus('current')
s41MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s41MINx10Int.setStatus('current')
s41HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s41HYSTx10Int.setStatus('current')
s42MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s42MAXx10Int.setStatus('current')
s42MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s42MINx10Int.setStatus('current')
s42HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 4, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s42HYSTx10Int.setStatus('current')
s5description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5description.setStatus('current')
sensor51setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 2))
sensor52setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 3))
s51MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s51MAXx10Int.setStatus('current')
s51MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s51MINx10Int.setStatus('current')
s51HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s51HYSTx10Int.setStatus('current')
s52MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s52MAXx10Int.setStatus('current')
s52MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s52MINx10Int.setStatus('current')
s52HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 5, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s52HYSTx10Int.setStatus('current')
s6description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s6description.setStatus('current')
sensor61setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 2))
sensor62setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 3))
s61MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s61MAXx10Int.setStatus('current')
s61MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s61MINx10Int.setStatus('current')
s61HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s61HYSTx10Int.setStatus('current')
s62MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s62MAXx10Int.setStatus('current')
s62MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s62MINx10Int.setStatus('current')
s62HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 6, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s62HYSTx10Int.setStatus('current')
s7description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s7description.setStatus('current')
sensor71setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 2))
sensor72setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 3))
s71MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s71MAXx10Int.setStatus('current')
s71MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s71MINx10Int.setStatus('current')
s71HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s71HYSTx10Int.setStatus('current')
s72MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s72MAXx10Int.setStatus('current')
s72MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s72MINx10Int.setStatus('current')
s72HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 7, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s72HYSTx10Int.setStatus('current')
s8description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s8description.setStatus('current')
sensor81setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 2))
sensor82setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 3))
s81MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s81MAXx10Int.setStatus('current')
s81MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s81MINx10Int.setStatus('current')
s81HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s81HYSTx10Int.setStatus('current')
s82MAXx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s82MAXx10Int.setStatus('current')
s82MINx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s82MINx10Int.setStatus('current')
s82HYSTx10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 1, 8, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s82HYSTx10Int.setStatus('current')
analogSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2))
analog1setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 1))
analog2setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 2))
analog3setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 3))
analog4setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 4))
voltage1description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage1description.setStatus('current')
voltage1max = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage1max.setStatus('current')
voltage1min = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage1min.setStatus('current')
voltage1hyst = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage1hyst.setStatus('current')
voltage2description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage2description.setStatus('current')
voltage2max = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage2max.setStatus('current')
voltage2min = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage2min.setStatus('current')
voltage2hyst = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage2hyst.setStatus('current')
voltage3description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage3description.setStatus('current')
voltage3max = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage3max.setStatus('current')
voltage3min = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage3min.setStatus('current')
voltage3hyst = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage3hyst.setStatus('current')
voltage4description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage4description.setStatus('current')
voltage4max = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage4max.setStatus('current')
voltage4min = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage4min.setStatus('current')
voltage4hyst = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltage4hyst.setStatus('current')
digitalSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 3))
digitalInput1description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInput1description.setStatus('current')
digitalInput2description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInput2description.setStatus('current')
digitalInput3description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInput3description.setStatus('current')
digitalInput4description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInput4description.setStatus('current')
relaysSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4))
relay1setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 1))
relay2setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 2))
relay3setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 3))
relay4setup = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 4))
relay1description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay1description.setStatus('current')
relay1pulseWidth = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay1pulseWidth.setStatus('current')
relay1controlledBy = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 1, 3), CONTROLLED()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay1controlledBy.setStatus('current')
relay2description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay2description.setStatus('current')
relay2pulseWidth = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay2pulseWidth.setStatus('current')
relay2controlledBy = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 2, 3), CONTROLLED()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay2controlledBy.setStatus('current')
relay3description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay3description.setStatus('current')
relay3pulseWidth = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay3pulseWidth.setStatus('current')
relay3controlledBy = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 3, 3), CONTROLLED()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay3controlledBy.setStatus('current')
relay4description = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay4description.setStatus('current')
relay4pulseWidth = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay4pulseWidth.setStatus('current')
relay4controlledBy = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 2, 2, 4, 4, 3), CONTROLLED()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay4controlledBy.setStatus('current')
sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1))
sensor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 1))
s11x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s11x10Int.setStatus('current')
s12x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s12x10Int.setStatus('current')
s1ID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s1ID.setStatus('current')
sensor2 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 2))
s21x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s21x10Int.setStatus('current')
s22x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s22x10Int.setStatus('current')
s2ID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 2, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s2ID.setStatus('current')
sensor3 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 3))
s31x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s31x10Int.setStatus('current')
s32x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s32x10Int.setStatus('current')
s3ID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 3, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ID.setStatus('current')
sensor4 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 4))
s41x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s41x10Int.setStatus('current')
s42x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s42x10Int.setStatus('current')
s4ID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 4, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s4ID.setStatus('current')
sensor5 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 5))
s51x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s51x10Int.setStatus('current')
s52x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s52x10Int.setStatus('current')
s5ID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 5, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5ID.setStatus('current')
sensor6 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 6))
s61x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s61x10Int.setStatus('current')
s62x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s62x10Int.setStatus('current')
s6ID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 6, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s6ID.setStatus('current')
sensor7 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 7))
s71x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s71x10Int.setStatus('current')
s72x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s72x10Int.setStatus('current')
s7ID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 7, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s7ID.setStatus('current')
sensor8 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 8))
s81x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s81x10Int.setStatus('current')
s82x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s82x10Int.setStatus('current')
s8ID = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 1, 8, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s8ID.setStatus('current')
analog = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2))
voltage1x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage1x10Int.setStatus('current')
voltage2x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage2x10Int.setStatus('current')
voltage3x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage3x10Int.setStatus('current')
voltage4x10Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage4x10Int.setStatus('current')
voltage1x100Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage1x100Int.setStatus('current')
voltage2x100Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage2x100Int.setStatus('current')
voltage3x100Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage3x100Int.setStatus('current')
voltage4x100Int = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltage4x100Int.setStatus('current')
digital = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 3))
digitalInput1State = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInput1State.setStatus('current')
digitalInput2State = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInput2State.setStatus('current')
digitalInput3State = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInput3State.setStatus('current')
digitalInput4State = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInput4State.setStatus('current')
relays = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4))
relay1 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 1))
relay1State = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay1State.setStatus('current')
relay1Pulse = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay1Pulse.setStatus('current')
relay2 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 2))
relay2State = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay2State.setStatus('current')
relay2Pulse = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay2Pulse.setStatus('current')
relay3 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 3))
relay3State = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay3State.setStatus('current')
relay3Pulse = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay3Pulse.setStatus('current')
relay4 = MibIdentifier((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 4))
relay4State = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay4State.setStatus('current')
relay4Pulse = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay4Pulse.setStatus('current')
configurationSaved = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unsaved", 0), ("saved", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationSaved.setStatus('current')
restartDevice = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cancel", 0), ("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartDevice.setStatus('current')
temperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("celcius", 0), ("fahrenheit", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureUnit.setStatus('current')
hardwareErr = MibScalar((1, 3, 6, 1, 4, 1, 38783, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noErr", 0), ("owErr", 1), ("hwErr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareErr.setStatus('current')
snmp_trap_notification = NotificationType((1, 3, 6, 1, 4, 1, 38783, 1, 0, 1)).setLabel("snmp-trap-notification").setObjects(("TERACOM-MIB", "digitalInput1State"), ("TERACOM-MIB", "digitalInput2State"), ("TERACOM-MIB", "digitalInput3State"), ("TERACOM-MIB", "digitalInput4State"), ("TERACOM-MIB", "voltage1x10Int"), ("TERACOM-MIB", "voltage2x10Int"), ("TERACOM-MIB", "voltage3x10Int"), ("TERACOM-MIB", "voltage4x10Int"), ("TERACOM-MIB", "s11x10Int"), ("TERACOM-MIB", "s12x10Int"), ("TERACOM-MIB", "s21x10Int"), ("TERACOM-MIB", "s22x10Int"), ("TERACOM-MIB", "s31x10Int"), ("TERACOM-MIB", "s32x10Int"), ("TERACOM-MIB", "s41x10Int"), ("TERACOM-MIB", "s42x10Int"), ("TERACOM-MIB", "s51x10Int"), ("TERACOM-MIB", "s52x10Int"), ("TERACOM-MIB", "s61x10Int"), ("TERACOM-MIB", "s62x10Int"), ("TERACOM-MIB", "s71x10Int"), ("TERACOM-MIB", "s72x10Int"), ("TERACOM-MIB", "s81x10Int"), ("TERACOM-MIB", "s82x10Int"), ("TERACOM-MIB", "restartDevice"))
if mibBuilder.loadTexts: snmp_trap_notification.setStatus('current')
tcw240bMIBCompliances1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 38783, 1, 4, 1, 1)).setObjects(("TERACOM-MIB", "tcw240bProductGroup"), ("TERACOM-MIB", "tcw240bSetupGroup"), ("TERACOM-MIB", "tcw240bMonitorGroup"), ("TERACOM-MIB", "tcw240bTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tcw240bMIBCompliances1 = tcw240bMIBCompliances1.setStatus('current')
tcw240bProductGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 38783, 1, 4, 2, 1)).setObjects(("TERACOM-MIB", "name"), ("TERACOM-MIB", "version"), ("TERACOM-MIB", "dateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tcw240bProductGroup = tcw240bProductGroup.setStatus('current')
tcw240bSetupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 38783, 1, 4, 2, 2)).setObjects(("TERACOM-MIB", "deviceID"), ("TERACOM-MIB", "hostName"), ("TERACOM-MIB", "deviceIP"), ("TERACOM-MIB", "s1description"), ("TERACOM-MIB", "s11MAXx10Int"), ("TERACOM-MIB", "s11MINx10Int"), ("TERACOM-MIB", "s11HYSTx10Int"), ("TERACOM-MIB", "s12MAXx10Int"), ("TERACOM-MIB", "s12MINx10Int"), ("TERACOM-MIB", "s12HYSTx10Int"), ("TERACOM-MIB", "s2description"), ("TERACOM-MIB", "s21MAXx10Int"), ("TERACOM-MIB", "s21MINx10Int"), ("TERACOM-MIB", "s21HYSTx10Int"), ("TERACOM-MIB", "s22MAXx10Int"), ("TERACOM-MIB", "s22MINx10Int"), ("TERACOM-MIB", "s22HYSTx10Int"), ("TERACOM-MIB", "s3description"), ("TERACOM-MIB", "s31MAXx10Int"), ("TERACOM-MIB", "s31MINx10Int"), ("TERACOM-MIB", "s31HYSTx10Int"), ("TERACOM-MIB", "s32MAXx10Int"), ("TERACOM-MIB", "s32MINx10Int"), ("TERACOM-MIB", "s32HYSTx10Int"), ("TERACOM-MIB", "s4description"), ("TERACOM-MIB", "s41MAXx10Int"), ("TERACOM-MIB", "s41MINx10Int"), ("TERACOM-MIB", "s41HYSTx10Int"), ("TERACOM-MIB", "s42MAXx10Int"), ("TERACOM-MIB", "s42MINx10Int"), ("TERACOM-MIB", "s42HYSTx10Int"), ("TERACOM-MIB", "s5description"), ("TERACOM-MIB", "s51MAXx10Int"), ("TERACOM-MIB", "s51MINx10Int"), ("TERACOM-MIB", "s51HYSTx10Int"), ("TERACOM-MIB", "s52MAXx10Int"), ("TERACOM-MIB", "s52MINx10Int"), ("TERACOM-MIB", "s52HYSTx10Int"), ("TERACOM-MIB", "s6description"), ("TERACOM-MIB", "s61MAXx10Int"), ("TERACOM-MIB", "s61MINx10Int"), ("TERACOM-MIB", "s61HYSTx10Int"), ("TERACOM-MIB", "s62MAXx10Int"), ("TERACOM-MIB", "s62MINx10Int"), ("TERACOM-MIB", "s62HYSTx10Int"), ("TERACOM-MIB", "s7description"), ("TERACOM-MIB", "s71MAXx10Int"), ("TERACOM-MIB", "s71MINx10Int"), ("TERACOM-MIB", "s71HYSTx10Int"), ("TERACOM-MIB", "s72MAXx10Int"), ("TERACOM-MIB", "s72MINx10Int"), ("TERACOM-MIB", "s72HYSTx10Int"), ("TERACOM-MIB", "s8description"), ("TERACOM-MIB", "s81MAXx10Int"), ("TERACOM-MIB", "s81MINx10Int"), ("TERACOM-MIB", "s81HYSTx10Int"), ("TERACOM-MIB", "s82MAXx10Int"), ("TERACOM-MIB", "s82MINx10Int"), ("TERACOM-MIB", "s82HYSTx10Int"), ("TERACOM-MIB", "voltage1description"), ("TERACOM-MIB", "voltage1max"), ("TERACOM-MIB", "voltage1min"), ("TERACOM-MIB", "voltage1hyst"), ("TERACOM-MIB", "voltage2description"), ("TERACOM-MIB", "voltage2max"), ("TERACOM-MIB", "voltage2min"), ("TERACOM-MIB", "voltage2hyst"), ("TERACOM-MIB", "voltage3description"), ("TERACOM-MIB", "voltage3max"), ("TERACOM-MIB", "voltage3min"), ("TERACOM-MIB", "voltage3hyst"), ("TERACOM-MIB", "voltage4description"), ("TERACOM-MIB", "voltage4max"), ("TERACOM-MIB", "voltage4min"), ("TERACOM-MIB", "voltage4hyst"), ("TERACOM-MIB", "digitalInput1description"), ("TERACOM-MIB", "digitalInput2description"), ("TERACOM-MIB", "digitalInput3description"), ("TERACOM-MIB", "digitalInput4description"), ("TERACOM-MIB", "relay1description"), ("TERACOM-MIB", "relay1pulseWidth"), ("TERACOM-MIB", "relay1controlledBy"), ("TERACOM-MIB", "relay2description"), ("TERACOM-MIB", "relay2pulseWidth"), ("TERACOM-MIB", "relay2controlledBy"), ("TERACOM-MIB", "relay3description"), ("TERACOM-MIB", "relay3pulseWidth"), ("TERACOM-MIB", "relay3controlledBy"), ("TERACOM-MIB", "relay4description"), ("TERACOM-MIB", "relay4pulseWidth"), ("TERACOM-MIB", "relay4controlledBy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tcw240bSetupGroup = tcw240bSetupGroup.setStatus('current')
tcw240bMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 38783, 1, 4, 2, 3)).setObjects(("TERACOM-MIB", "s11x10Int"), ("TERACOM-MIB", "s12x10Int"), ("TERACOM-MIB", "s1ID"), ("TERACOM-MIB", "s21x10Int"), ("TERACOM-MIB", "s22x10Int"), ("TERACOM-MIB", "s2ID"), ("TERACOM-MIB", "s31x10Int"), ("TERACOM-MIB", "s32x10Int"), ("TERACOM-MIB", "s3ID"), ("TERACOM-MIB", "s41x10Int"), ("TERACOM-MIB", "s42x10Int"), ("TERACOM-MIB", "s4ID"), ("TERACOM-MIB", "s51x10Int"), ("TERACOM-MIB", "s52x10Int"), ("TERACOM-MIB", "s5ID"), ("TERACOM-MIB", "s61x10Int"), ("TERACOM-MIB", "s62x10Int"), ("TERACOM-MIB", "s6ID"), ("TERACOM-MIB", "s71x10Int"), ("TERACOM-MIB", "s72x10Int"), ("TERACOM-MIB", "s7ID"), ("TERACOM-MIB", "s81x10Int"), ("TERACOM-MIB", "s82x10Int"), ("TERACOM-MIB", "s8ID"), ("TERACOM-MIB", "voltage1x10Int"), ("TERACOM-MIB", "voltage2x10Int"), ("TERACOM-MIB", "voltage3x10Int"), ("TERACOM-MIB", "voltage4x10Int"), ("TERACOM-MIB", "voltage1x100Int"), ("TERACOM-MIB", "voltage2x100Int"), ("TERACOM-MIB", "voltage3x100Int"), ("TERACOM-MIB", "voltage4x100Int"), ("TERACOM-MIB", "digitalInput1State"), ("TERACOM-MIB", "digitalInput2State"), ("TERACOM-MIB", "digitalInput3State"), ("TERACOM-MIB", "digitalInput4State"), ("TERACOM-MIB", "relay1State"), ("TERACOM-MIB", "relay1Pulse"), ("TERACOM-MIB", "relay2State"), ("TERACOM-MIB", "relay2Pulse"), ("TERACOM-MIB", "relay3State"), ("TERACOM-MIB", "relay3Pulse"), ("TERACOM-MIB", "relay4State"), ("TERACOM-MIB", "relay4Pulse"), ("TERACOM-MIB", "configurationSaved"), ("TERACOM-MIB", "restartDevice"), ("TERACOM-MIB", "temperatureUnit"), ("TERACOM-MIB", "hardwareErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tcw240bMonitorGroup = tcw240bMonitorGroup.setStatus('current')
tcw240bTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 38783, 1, 4, 2, 4)).setObjects(("TERACOM-MIB", "snmp_trap_notification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tcw240bTrapGroup = tcw240bTrapGroup.setStatus('current')
mibBuilder.exportSymbols("TERACOM-MIB", relay1setup=relay1setup, s71x10Int=s71x10Int, relaysSetup=relaysSetup, analogSetup=analogSetup, tcw240bMIBGroups=tcw240bMIBGroups, sensor7setup=sensor7setup, s22HYSTx10Int=s22HYSTx10Int, setup=setup, s32x10Int=s32x10Int, s61MINx10Int=s61MINx10Int, sensor5setup=sensor5setup, s21MAXx10Int=s21MAXx10Int, voltage4min=voltage4min, network=network, digital=digital, sensor52setup=sensor52setup, s52x10Int=s52x10Int, relay3pulseWidth=relay3pulseWidth, sensor6=sensor6, tcw240bProductGroup=tcw240bProductGroup, s21x10Int=s21x10Int, digitalInput3State=digitalInput3State, digitalSetup=digitalSetup, s41HYSTx10Int=s41HYSTx10Int, relay4description=relay4description, sensor32setup=sensor32setup, digitalInput1description=digitalInput1description, relay3controlledBy=relay3controlledBy, s11x10Int=s11x10Int, s22MAXx10Int=s22MAXx10Int, voltage1description=voltage1description, s71MAXx10Int=s71MAXx10Int, sensor82setup=sensor82setup, s62x10Int=s62x10Int, voltage4x100Int=voltage4x100Int, relay2=relay2, relay3Pulse=relay3Pulse, restartDevice=restartDevice, digitalInput3description=digitalInput3description, s81MAXx10Int=s81MAXx10Int, s12x10Int=s12x10Int, tcw240bMIBConformance=tcw240bMIBConformance, s1description=s1description, s2description=s2description, s51MAXx10Int=s51MAXx10Int, sensor72setup=sensor72setup, voltage4hyst=voltage4hyst, s4ID=s4ID, s81x10Int=s81x10Int, s12HYSTx10Int=s12HYSTx10Int, sensor22setup=sensor22setup, relays=relays, deviceID=deviceID, s81HYSTx10Int=s81HYSTx10Int, s11HYSTx10Int=s11HYSTx10Int, s41x10Int=s41x10Int, relay1State=relay1State, version=version, voltage2x10Int=voltage2x10Int, relay4=relay4, sensor1setup=sensor1setup, hardwareErr=hardwareErr, voltage2x100Int=voltage2x100Int, s52HYSTx10Int=s52HYSTx10Int, sensor7=sensor7, s3ID=s3ID, s42MAXx10Int=s42MAXx10Int, s42MINx10Int=s42MINx10Int, s5ID=s5ID, relay3State=relay3State, monitorNcontrol=monitorNcontrol, s62MINx10Int=s62MINx10Int, relay1=relay1, tcw240bMIBCompliances=tcw240bMIBCompliances, s11MAXx10Int=s11MAXx10Int, s32HYSTx10Int=s32HYSTx10Int, s82HYSTx10Int=s82HYSTx10Int, relay2pulseWidth=relay2pulseWidth, s41MINx10Int=s41MINx10Int, relay1controlledBy=relay1controlledBy, sensor2=sensor2, analog3setup=analog3setup, s81MINx10Int=s81MINx10Int, s72x10Int=s72x10Int, digitalInput4State=digitalInput4State, s12MAXx10Int=s12MAXx10Int, s41MAXx10Int=s41MAXx10Int, voltage3min=voltage3min, voltage4max=voltage4max, teracom=teracom, s7ID=s7ID, relay4State=relay4State, sensor71setup=sensor71setup, digitalInput2description=digitalInput2description, s12MINx10Int=s12MINx10Int, s3description=s3description, relay1description=relay1description, voltage4x10Int=voltage4x10Int, voltage3x10Int=voltage3x10Int, digitalInput4description=digitalInput4description, s31MAXx10Int=s31MAXx10Int, s71MINx10Int=s71MINx10Int, voltage3hyst=voltage3hyst, CONTROLLED=CONTROLLED, voltage3description=voltage3description, relay2description=relay2description, s61MAXx10Int=s61MAXx10Int, dateTime=dateTime, s82x10Int=s82x10Int, PYSNMP_MODULE_ID=snmpMIB, voltage2min=voltage2min, sensor4=sensor4, sensor6setup=sensor6setup, sensor5=sensor5, s31HYSTx10Int=s31HYSTx10Int, sensor62setup=sensor62setup, relay4Pulse=relay4Pulse, s22MINx10Int=s22MINx10Int, s42HYSTx10Int=s42HYSTx10Int, tcw240bSetupGroup=tcw240bSetupGroup, sensor51setup=sensor51setup, s82MAXx10Int=s82MAXx10Int, voltage1x100Int=voltage1x100Int, s52MINx10Int=s52MINx10Int, sensor81setup=sensor81setup, s82MINx10Int=s82MINx10Int, relay3description=relay3description, s6ID=s6ID, voltage1max=voltage1max, snmpMIB=snmpMIB, voltage2hyst=voltage2hyst, sensor1=sensor1, s8ID=s8ID, temperatureUnit=temperatureUnit, hostName=hostName, s72MINx10Int=s72MINx10Int, s61x10Int=s61x10Int, s51HYSTx10Int=s51HYSTx10Int, digitalInput1State=digitalInput1State, s11MINx10Int=s11MINx10Int, s61HYSTx10Int=s61HYSTx10Int, product=product, s42x10Int=s42x10Int, s1ID=s1ID, name=name, s72HYSTx10Int=s72HYSTx10Int, sensor21setup=sensor21setup, analog1setup=analog1setup, relay3setup=relay3setup, s52MAXx10Int=s52MAXx10Int, sensor42setup=sensor42setup, s72MAXx10Int=s72MAXx10Int, sensor3=sensor3, relay4pulseWidth=relay4pulseWidth, configurationSaved=configurationSaved, digitalInput2State=digitalInput2State, s21HYSTx10Int=s21HYSTx10Int, tcw240bTrapGroup=tcw240bTrapGroup, sensor8setup=sensor8setup, voltage1x10Int=voltage1x10Int, voltage1min=voltage1min, voltage2max=voltage2max, sensor4setup=sensor4setup, s21MINx10Int=s21MINx10Int, s8description=s8description, relay1Pulse=relay1Pulse, s32MINx10Int=s32MINx10Int, relay2Pulse=relay2Pulse, voltage1hyst=voltage1hyst, trapNotifications=trapNotifications, sensor3setup=sensor3setup, io=io, voltage2description=voltage2description, s4description=s4description, relay4controlledBy=relay4controlledBy, s62MAXx10Int=s62MAXx10Int, tcw240b=tcw240b, sensor61setup=sensor61setup, s31MINx10Int=s31MINx10Int, s5description=s5description, voltage3max=voltage3max, deviceIP=deviceIP, voltage4description=voltage4description, sensor2setup=sensor2setup, sensors=sensors, relay1pulseWidth=relay1pulseWidth, sensorsSetup=sensorsSetup, s32MAXx10Int=s32MAXx10Int, relay3=relay3, s51x10Int=s51x10Int, s62HYSTx10Int=s62HYSTx10Int, analog2setup=analog2setup, snmp_trap_notification=snmp_trap_notification, sensor8=sensor8, relay4setup=relay4setup, s22x10Int=s22x10Int, voltage3x100Int=voltage3x100Int, s31x10Int=s31x10Int, tcw240bMonitorGroup=tcw240bMonitorGroup, sensor11setup=sensor11setup, s71HYSTx10Int=s71HYSTx10Int, tcw240bMIBCompliances1=tcw240bMIBCompliances1, s6description=s6description, analog4setup=analog4setup, relay2controlledBy=relay2controlledBy, sensor12setup=sensor12setup, sensor31setup=sensor31setup, s2ID=s2ID, s51MINx10Int=s51MINx10Int, relay2setup=relay2setup, sensor41setup=sensor41setup, s7description=s7description, relay2State=relay2State, analog=analog)
