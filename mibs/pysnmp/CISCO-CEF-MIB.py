#
# PySNMP MIB module CISCO-CEF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CEF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
CefFailureReason, CefIpVersion, CefForwardingElementSpecialType, CefPathType, CefPrefixSearchState, CefMplsLabelList, CefCCStatus, CefAdjacencySource, CefAdjLinkType, CefCCAction, CefCCType, CefAdminStatus, CefOperStatus = mibBuilder.importSymbols("CISCO-CEF-TC", "CefFailureReason", "CefIpVersion", "CefForwardingElementSpecialType", "CefPathType", "CefPrefixSearchState", "CefMplsLabelList", "CefCCStatus", "CefAdjacencySource", "CefAdjLinkType", "CefCCAction", "CefCCType", "CefAdminStatus", "CefOperStatus")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
MplsVpnId, = mibBuilder.importSymbols("MPLS-VPN-MIB", "MplsVpnId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Counter64, ModuleIdentity, Bits, Counter32, ObjectIdentity, Gauge32, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Counter64", "ModuleIdentity", "Bits", "Counter32", "ObjectIdentity", "Gauge32", "NotificationType", "IpAddress")
RowStatus, TimeStamp, TestAndIncr, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "TestAndIncr", "TextualConvention", "DisplayString", "TruthValue")
ciscoCefMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 492))
ciscoCefMIB.setRevisions(('2006-01-30 00:00',))
if mibBuilder.loadTexts: ciscoCefMIB.setLastUpdated('200601300000Z')
if mibBuilder.loadTexts: ciscoCefMIB.setOrganization('Cisco System, Inc.')
ciscoCefMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 0))
ciscoCefMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1))
ciscoCefMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 2))
cefFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1))
cefAdj = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2))
cefFE = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3))
cefGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4))
cefInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 5))
cefPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6))
cefCC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7))
cefStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8))
cefNotifCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 9))
cefFIBSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 1))
cefFIBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cefFIBSummaryTable.setStatus('current')
cefFIBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefFIBIpVersion"))
if mibBuilder.loadTexts: cefFIBSummaryEntry.setStatus('current')
cefFIBIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 1, 1, 1, 1), CefIpVersion())
if mibBuilder.loadTexts: cefFIBIpVersion.setStatus('current')
cefFIBSummaryFwdPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFIBSummaryFwdPrefixes.setStatus('current')
cefPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2), )
if mibBuilder.loadTexts: cefPrefixTable.setStatus('current')
cefPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefPrefixType"), (0, "CISCO-CEF-MIB", "cefPrefixAddr"), (0, "CISCO-CEF-MIB", "cefPrefixLen"))
if mibBuilder.loadTexts: cefPrefixEntry.setStatus('current')
cefPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cefPrefixType.setStatus('current')
cefPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cefPrefixAddr.setStatus('current')
cefPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cefPrefixLen.setStatus('current')
cefPrefixForwardingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixForwardingInfo.setStatus('current')
cefPrefixPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixPkts.setStatus('current')
cefPrefixHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixHCPkts.setStatus('current')
cefPrefixBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixBytes.setStatus('current')
cefPrefixHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 8), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixHCBytes.setStatus('current')
cefPrefixInternalNRPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixInternalNRPkts.setStatus('current')
cefPrefixInternalNRHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixInternalNRHCPkts.setStatus('current')
cefPrefixInternalNRBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 11), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixInternalNRBytes.setStatus('current')
cefPrefixInternalNRHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 12), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixInternalNRHCBytes.setStatus('current')
cefPrefixExternalNRPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixExternalNRPkts.setStatus('current')
cefPrefixExternalNRHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 14), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixExternalNRHCPkts.setStatus('current')
cefPrefixExternalNRBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 15), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixExternalNRBytes.setStatus('current')
cefPrefixExternalNRHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 2, 1, 16), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPrefixExternalNRHCBytes.setStatus('current')
cefLMPrefixSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 3), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefLMPrefixSpinLock.setStatus('current')
cefLMPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 4), )
if mibBuilder.loadTexts: cefLMPrefixTable.setStatus('current')
cefLMPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefLMPrefixDestAddrType"), (0, "CISCO-CEF-MIB", "cefLMPrefixDestAddr"))
if mibBuilder.loadTexts: cefLMPrefixEntry.setStatus('current')
cefLMPrefixDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cefLMPrefixDestAddrType.setStatus('current')
cefLMPrefixDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: cefLMPrefixDestAddr.setStatus('current')
cefLMPrefixState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 4, 1, 3), CefPrefixSearchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefLMPrefixState.setStatus('current')
cefLMPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefLMPrefixAddr.setStatus('current')
cefLMPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 4, 1, 5), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefLMPrefixLen.setStatus('current')
cefLMPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cefLMPrefixRowStatus.setStatus('current')
cefPathTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 5), )
if mibBuilder.loadTexts: cefPathTable.setStatus('current')
cefPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefPrefixType"), (0, "CISCO-CEF-MIB", "cefPrefixAddr"), (0, "CISCO-CEF-MIB", "cefPrefixLen"), (0, "CISCO-CEF-MIB", "cefPathId"))
if mibBuilder.loadTexts: cefPathEntry.setStatus('current')
cefPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cefPathId.setStatus('current')
cefPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 5, 1, 2), CefPathType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPathType.setStatus('current')
cefPathInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 5, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPathInterface.setStatus('current')
cefPathNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPathNextHopAddr.setStatus('current')
cefPathRecurseVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 1, 5, 1, 5), MplsVpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPathRecurseVrfName.setStatus('current')
cefAdjSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 1))
cefAdjSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 1, 1), )
if mibBuilder.loadTexts: cefAdjSummaryTable.setStatus('current')
cefAdjSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefAdjSummaryLinkType"))
if mibBuilder.loadTexts: cefAdjSummaryEntry.setStatus('current')
cefAdjSummaryLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 1, 1, 1, 1), CefAdjLinkType())
if mibBuilder.loadTexts: cefAdjSummaryLinkType.setStatus('current')
cefAdjSummaryComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjSummaryComplete.setStatus('current')
cefAdjSummaryIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjSummaryIncomplete.setStatus('current')
cefAdjSummaryFixup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjSummaryFixup.setStatus('current')
cefAdjSummaryRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjSummaryRedirect.setStatus('current')
cefAdjTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2), )
if mibBuilder.loadTexts: cefAdjTable.setStatus('current')
cefAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "IF-MIB", "ifIndex"), (0, "CISCO-CEF-MIB", "cefAdjNextHopAddrType"), (0, "CISCO-CEF-MIB", "cefAdjNextHopAddr"), (0, "CISCO-CEF-MIB", "cefAdjConnId"), (0, "CISCO-CEF-MIB", "cefAdjSummaryLinkType"))
if mibBuilder.loadTexts: cefAdjEntry.setStatus('current')
cefAdjNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cefAdjNextHopAddrType.setStatus('current')
cefAdjNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cefAdjNextHopAddr.setStatus('current')
cefAdjConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), )))
if mibBuilder.loadTexts: cefAdjConnId.setStatus('current')
cefAdjSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 4), CefAdjacencySource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjSource.setStatus('current')
cefAdjEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjEncap.setStatus('current')
cefAdjFixup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjFixup.setStatus('current')
cefAdjMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjMTU.setStatus('current')
cefAdjForwardingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjForwardingInfo.setStatus('current')
cefAdjPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjPkts.setStatus('current')
cefAdjHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjHCPkts.setStatus('current')
cefAdjBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 11), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjBytes.setStatus('current')
cefAdjHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 2, 2, 1, 12), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefAdjHCBytes.setStatus('current')
cefFESelectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1), )
if mibBuilder.loadTexts: cefFESelectionTable.setStatus('current')
cefFESelectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefFESelectionName"), (0, "CISCO-CEF-MIB", "cefFESelectionId"))
if mibBuilder.loadTexts: cefFESelectionEntry.setStatus('current')
cefFESelectionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cefFESelectionName.setStatus('current')
cefFESelectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cefFESelectionId.setStatus('current')
cefFESelectionSpecial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 3), CefForwardingElementSpecialType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionSpecial.setStatus('current')
cefFESelectionLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 4), CefMplsLabelList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionLabels.setStatus('current')
cefFESelectionAdjLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 5), CefAdjLinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionAdjLinkType.setStatus('current')
cefFESelectionAdjInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionAdjInterface.setStatus('current')
cefFESelectionAdjNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionAdjNextHopAddrType.setStatus('current')
cefFESelectionAdjNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionAdjNextHopAddr.setStatus('current')
cefFESelectionAdjConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionAdjConnId.setStatus('current')
cefFESelectionVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 10), MplsVpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionVrfName.setStatus('current')
cefFESelectionWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefFESelectionWeight.setStatus('current')
cefCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1), )
if mibBuilder.loadTexts: cefCfgTable.setStatus('current')
cefCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefFIBIpVersion"))
if mibBuilder.loadTexts: cefCfgEntry.setStatus('current')
cefCfgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 1), CefAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCfgAdminState.setStatus('current')
cefCfgOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 2), CefOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefCfgOperState.setStatus('current')
cefCfgDistributionAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 3), CefAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCfgDistributionAdminState.setStatus('current')
cefCfgDistributionOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 4), CefOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefCfgDistributionOperState.setStatus('current')
cefCfgAccountingMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 5), Bits().clone(namedValues=NamedValues(("nonRecursive", 0), ("perPrefix", 1), ("prefixLength", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCfgAccountingMap.setStatus('current')
cefCfgLoadSharingAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("original", 2), ("tunnel", 3), ("universal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCfgLoadSharingAlgorithm.setStatus('current')
cefCfgLoadSharingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCfgLoadSharingID.setStatus('current')
cefCfgTrafficStatsLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCfgTrafficStatsLoadInterval.setStatus('current')
cefCfgTrafficStatsUpdateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCfgTrafficStatsUpdateRate.setStatus('current')
cefResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 2), )
if mibBuilder.loadTexts: cefResourceTable.setStatus('current')
cefResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefResourceEntry.setStatus('current')
cefResourceMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 2, 1, 1), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefResourceMemoryUsed.setStatus('current')
cefResourceFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 4, 2, 1, 2), CefFailureReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefResourceFailureReason.setStatus('current')
cefIntTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 5, 1), )
if mibBuilder.loadTexts: cefIntTable.setStatus('current')
cefIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefFIBIpVersion"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cefIntEntry.setStatus('current')
cefIntSwitchingState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cefEnabled", 1), ("distCefEnabled", 2), ("cefDisabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefIntSwitchingState.setStatus('current')
cefIntLoadSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perPacket", 1), ("perDestination", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefIntLoadSharing.setStatus('current')
cefIntNonrecursiveAccouting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefIntNonrecursiveAccouting.setStatus('current')
cefPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6, 1), )
if mibBuilder.loadTexts: cefPeerTable.setStatus('current')
cefPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "entPeerPhysicalIndex"))
if mibBuilder.loadTexts: cefPeerEntry.setStatus('current')
entPeerPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6, 1, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: entPeerPhysicalIndex.setStatus('current')
cefPeerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("peerDisabled", 1), ("peerUp", 2), ("peerHold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPeerOperState.setStatus('current')
cefPeerNumberOfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPeerNumberOfResets.setStatus('current')
cefPeerFIBTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6, 2), )
if mibBuilder.loadTexts: cefPeerFIBTable.setStatus('current')
cefPeerFIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "entPeerPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefFIBIpVersion"))
if mibBuilder.loadTexts: cefPeerFIBEntry.setStatus('current')
cefPeerFIBOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("peerFIBDown", 1), ("peerFIBUp", 2), ("peerFIBReloadRequest", 3), ("peerFIBReloading", 4), ("peerFIBSynced", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefPeerFIBOperState.setStatus('current')
cefStatsPrefixLenTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1), )
if mibBuilder.loadTexts: cefStatsPrefixLenTable.setStatus('current')
cefStatsPrefixLenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefFIBIpVersion"), (0, "CISCO-CEF-MIB", "cefStatsPrefixLen"))
if mibBuilder.loadTexts: cefStatsPrefixLenEntry.setStatus('current')
cefStatsPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 1), InetAddressPrefixLength())
if mibBuilder.loadTexts: cefStatsPrefixLen.setStatus('current')
cefStatsPrefixQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefStatsPrefixQueries.setStatus('current')
cefStatsPrefixHCQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefStatsPrefixHCQueries.setStatus('current')
cefStatsPrefixInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefStatsPrefixInserts.setStatus('current')
cefStatsPrefixHCInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefStatsPrefixHCInserts.setStatus('current')
cefStatsPrefixDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefStatsPrefixDeletes.setStatus('current')
cefStatsPrefixHCDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefStatsPrefixHCDeletes.setStatus('current')
cefStatsPrefixElements = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefStatsPrefixElements.setStatus('current')
cefStatsPrefixHCElements = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 1, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefStatsPrefixHCElements.setStatus('current')
cefSwitchingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2), )
if mibBuilder.loadTexts: cefSwitchingStatsTable.setStatus('current')
cefSwitchingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CEF-MIB", "cefFIBIpVersion"), (0, "CISCO-CEF-MIB", "cefSwitchingIndex"))
if mibBuilder.loadTexts: cefSwitchingStatsEntry.setStatus('current')
cefSwitchingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cefSwitchingIndex.setStatus('current')
cefSwitchingPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefSwitchingPath.setStatus('current')
cefSwitchingDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefSwitchingDrop.setStatus('current')
cefSwitchingHCDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefSwitchingHCDrop.setStatus('current')
cefSwitchingPunt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefSwitchingPunt.setStatus('current')
cefSwitchingHCPunt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefSwitchingHCPunt.setStatus('current')
cefSwitchingPunt2Host = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefSwitchingPunt2Host.setStatus('current')
cefSwitchingHCPunt2Host = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 8, 2, 1, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cefSwitchingHCPunt2Host.setStatus('current')
cefCCGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 1), )
if mibBuilder.loadTexts: cefCCGlobalTable.setStatus('current')
cefCCGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-CEF-MIB", "cefFIBIpVersion"))
if mibBuilder.loadTexts: cefCCGlobalEntry.setStatus('current')
cefCCGlobalAutoRepairEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCCGlobalAutoRepairEnabled.setStatus('current')
cefCCGlobalAutoRepairDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 1, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCCGlobalAutoRepairDelay.setStatus('current')
cefCCGlobalAutoRepairHoldDown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 1, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCCGlobalAutoRepairHoldDown.setStatus('current')
cefCCGlobalErrorMsgEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCCGlobalErrorMsgEnabled.setStatus('current')
cefCCGlobalFullScanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 1, 1, 5), CefCCAction().clone('ccActionNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCCGlobalFullScanAction.setStatus('current')
cefCCGlobalFullScanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 1, 1, 6), CefCCStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefCCGlobalFullScanStatus.setStatus('current')
cefCCTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2), )
if mibBuilder.loadTexts: cefCCTypeTable.setStatus('current')
cefCCTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-CEF-MIB", "cefFIBIpVersion"), (0, "CISCO-CEF-MIB", "cefCCType"))
if mibBuilder.loadTexts: cefCCTypeEntry.setStatus('current')
cefCCType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1, 1), CefCCType())
if mibBuilder.loadTexts: cefCCType.setStatus('current')
cefCCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCCEnabled.setStatus('current')
cefCCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCCCount.setStatus('current')
cefCCPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefCCPeriod.setStatus('current')
cefCCQueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefCCQueriesSent.setStatus('current')
cefCCQueriesIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefCCQueriesIgnored.setStatus('current')
cefCCQueriesChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefCCQueriesChecked.setStatus('current')
cefCCQueriesIterated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefCCQueriesIterated.setStatus('current')
cefInconsistencyRecordTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3), )
if mibBuilder.loadTexts: cefInconsistencyRecordTable.setStatus('current')
cefInconsistencyRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1), ).setIndexNames((0, "CISCO-CEF-MIB", "cefFIBIpVersion"), (0, "CISCO-CEF-MIB", "cefInconsistencyRecId"))
if mibBuilder.loadTexts: cefInconsistencyRecordEntry.setStatus('current')
cefInconsistencyRecId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cefInconsistencyRecId.setStatus('current')
cefInconsistencyPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefInconsistencyPrefixType.setStatus('current')
cefInconsistencyPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefInconsistencyPrefixAddr.setStatus('current')
cefInconsistencyPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefInconsistencyPrefixLen.setStatus('current')
cefInconsistencyVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1, 5), MplsVpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefInconsistencyVrfName.setStatus('current')
cefInconsistencyCCType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1, 6), CefCCType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefInconsistencyCCType.setStatus('current')
cefInconsistencyEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1, 7), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefInconsistencyEntity.setStatus('current')
cefInconsistencyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("missing", 1), ("checksumErr", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefInconsistencyReason.setStatus('current')
entLastInconsistencyDetectTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entLastInconsistencyDetectTime.setStatus('current')
cefInconsistencyReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 5), CefCCAction().clone('ccActionNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefInconsistencyReset.setStatus('current')
cefInconsistencyResetStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 7, 6), CefCCStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefInconsistencyResetStatus.setStatus('current')
cefResourceFailureNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefResourceFailureNotifEnable.setStatus('current')
cefPeerStateChangeNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefPeerStateChangeNotifEnable.setStatus('current')
cefPeerFIBStateChangeNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 9, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefPeerFIBStateChangeNotifEnable.setStatus('current')
cefNotifThrottlingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 3600), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefNotifThrottlingInterval.setStatus('current')
cefInconsistencyNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 492, 1, 9, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefInconsistencyNotifEnable.setStatus('current')
cefResourceFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 492, 0, 1)).setObjects(("CISCO-CEF-MIB", "cefResourceFailureReason"))
if mibBuilder.loadTexts: cefResourceFailure.setStatus('current')
cefPeerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 492, 0, 2)).setObjects(("CISCO-CEF-MIB", "cefPeerOperState"))
if mibBuilder.loadTexts: cefPeerStateChange.setStatus('current')
cefPeerFIBStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 492, 0, 3)).setObjects(("CISCO-CEF-MIB", "cefPeerFIBOperState"))
if mibBuilder.loadTexts: cefPeerFIBStateChange.setStatus('current')
cefInconsistencyDetection = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 492, 0, 4)).setObjects(("CISCO-CEF-MIB", "entLastInconsistencyDetectTime"))
if mibBuilder.loadTexts: cefInconsistencyDetection.setStatus('current')
cefMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 2, 1))
cefMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 492, 2, 2))
cefMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 492, 2, 2, 1)).setObjects(("CISCO-CEF-MIB", "cefGroup"), ("CISCO-CEF-MIB", "cefNotifCntlGroup"), ("CISCO-CEF-MIB", "cefNotificationGroup"), ("CISCO-CEF-MIB", "cefDistributedGroup"), ("CISCO-CEF-MIB", "cefHCStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefMIBCompliance = cefMIBCompliance.setStatus('current')
cefGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 492, 2, 1, 1)).setObjects(("CISCO-CEF-MIB", "cefFIBSummaryFwdPrefixes"), ("CISCO-CEF-MIB", "cefPrefixForwardingInfo"), ("CISCO-CEF-MIB", "cefPrefixPkts"), ("CISCO-CEF-MIB", "cefPrefixBytes"), ("CISCO-CEF-MIB", "cefPrefixInternalNRPkts"), ("CISCO-CEF-MIB", "cefPrefixInternalNRBytes"), ("CISCO-CEF-MIB", "cefPrefixExternalNRPkts"), ("CISCO-CEF-MIB", "cefPrefixExternalNRBytes"), ("CISCO-CEF-MIB", "cefLMPrefixSpinLock"), ("CISCO-CEF-MIB", "cefLMPrefixState"), ("CISCO-CEF-MIB", "cefLMPrefixAddr"), ("CISCO-CEF-MIB", "cefLMPrefixLen"), ("CISCO-CEF-MIB", "cefLMPrefixRowStatus"), ("CISCO-CEF-MIB", "cefPathType"), ("CISCO-CEF-MIB", "cefPathInterface"), ("CISCO-CEF-MIB", "cefPathNextHopAddr"), ("CISCO-CEF-MIB", "cefPathRecurseVrfName"), ("CISCO-CEF-MIB", "cefAdjSummaryComplete"), ("CISCO-CEF-MIB", "cefAdjSummaryIncomplete"), ("CISCO-CEF-MIB", "cefAdjSummaryFixup"), ("CISCO-CEF-MIB", "cefAdjSummaryRedirect"), ("CISCO-CEF-MIB", "cefAdjSource"), ("CISCO-CEF-MIB", "cefAdjEncap"), ("CISCO-CEF-MIB", "cefAdjFixup"), ("CISCO-CEF-MIB", "cefAdjMTU"), ("CISCO-CEF-MIB", "cefAdjForwardingInfo"), ("CISCO-CEF-MIB", "cefAdjPkts"), ("CISCO-CEF-MIB", "cefAdjBytes"), ("CISCO-CEF-MIB", "cefFESelectionSpecial"), ("CISCO-CEF-MIB", "cefFESelectionLabels"), ("CISCO-CEF-MIB", "cefFESelectionAdjLinkType"), ("CISCO-CEF-MIB", "cefFESelectionAdjInterface"), ("CISCO-CEF-MIB", "cefFESelectionAdjNextHopAddrType"), ("CISCO-CEF-MIB", "cefFESelectionAdjNextHopAddr"), ("CISCO-CEF-MIB", "cefFESelectionAdjConnId"), ("CISCO-CEF-MIB", "cefFESelectionVrfName"), ("CISCO-CEF-MIB", "cefFESelectionWeight"), ("CISCO-CEF-MIB", "cefCfgAdminState"), ("CISCO-CEF-MIB", "cefCfgOperState"), ("CISCO-CEF-MIB", "cefCfgAccountingMap"), ("CISCO-CEF-MIB", "cefCfgLoadSharingAlgorithm"), ("CISCO-CEF-MIB", "cefCfgLoadSharingID"), ("CISCO-CEF-MIB", "cefCfgTrafficStatsLoadInterval"), ("CISCO-CEF-MIB", "cefCfgTrafficStatsUpdateRate"), ("CISCO-CEF-MIB", "cefResourceMemoryUsed"), ("CISCO-CEF-MIB", "cefResourceFailureReason"), ("CISCO-CEF-MIB", "cefIntSwitchingState"), ("CISCO-CEF-MIB", "cefIntLoadSharing"), ("CISCO-CEF-MIB", "cefIntNonrecursiveAccouting"), ("CISCO-CEF-MIB", "cefStatsPrefixQueries"), ("CISCO-CEF-MIB", "cefStatsPrefixInserts"), ("CISCO-CEF-MIB", "cefStatsPrefixDeletes"), ("CISCO-CEF-MIB", "cefStatsPrefixElements"), ("CISCO-CEF-MIB", "cefSwitchingPath"), ("CISCO-CEF-MIB", "cefSwitchingDrop"), ("CISCO-CEF-MIB", "cefSwitchingPunt"), ("CISCO-CEF-MIB", "cefSwitchingPunt2Host"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefGroup = cefGroup.setStatus('current')
cefDistributedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 492, 2, 1, 2)).setObjects(("CISCO-CEF-MIB", "cefCfgDistributionAdminState"), ("CISCO-CEF-MIB", "cefCfgDistributionOperState"), ("CISCO-CEF-MIB", "cefPeerOperState"), ("CISCO-CEF-MIB", "cefPeerNumberOfResets"), ("CISCO-CEF-MIB", "cefPeerFIBOperState"), ("CISCO-CEF-MIB", "cefCCGlobalAutoRepairEnabled"), ("CISCO-CEF-MIB", "cefCCGlobalAutoRepairDelay"), ("CISCO-CEF-MIB", "cefCCGlobalAutoRepairHoldDown"), ("CISCO-CEF-MIB", "cefCCGlobalErrorMsgEnabled"), ("CISCO-CEF-MIB", "cefCCGlobalFullScanStatus"), ("CISCO-CEF-MIB", "cefCCGlobalFullScanAction"), ("CISCO-CEF-MIB", "cefCCEnabled"), ("CISCO-CEF-MIB", "cefCCCount"), ("CISCO-CEF-MIB", "cefCCPeriod"), ("CISCO-CEF-MIB", "cefCCQueriesSent"), ("CISCO-CEF-MIB", "cefCCQueriesIgnored"), ("CISCO-CEF-MIB", "cefCCQueriesChecked"), ("CISCO-CEF-MIB", "cefCCQueriesIterated"), ("CISCO-CEF-MIB", "entLastInconsistencyDetectTime"), ("CISCO-CEF-MIB", "cefInconsistencyPrefixType"), ("CISCO-CEF-MIB", "cefInconsistencyPrefixAddr"), ("CISCO-CEF-MIB", "cefInconsistencyPrefixLen"), ("CISCO-CEF-MIB", "cefInconsistencyVrfName"), ("CISCO-CEF-MIB", "cefInconsistencyCCType"), ("CISCO-CEF-MIB", "cefInconsistencyEntity"), ("CISCO-CEF-MIB", "cefInconsistencyReason"), ("CISCO-CEF-MIB", "cefInconsistencyReset"), ("CISCO-CEF-MIB", "cefInconsistencyResetStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefDistributedGroup = cefDistributedGroup.setStatus('current')
cefHCStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 492, 2, 1, 3)).setObjects(("CISCO-CEF-MIB", "cefPrefixHCPkts"), ("CISCO-CEF-MIB", "cefPrefixHCBytes"), ("CISCO-CEF-MIB", "cefPrefixInternalNRHCPkts"), ("CISCO-CEF-MIB", "cefPrefixInternalNRHCBytes"), ("CISCO-CEF-MIB", "cefPrefixExternalNRHCPkts"), ("CISCO-CEF-MIB", "cefPrefixExternalNRHCBytes"), ("CISCO-CEF-MIB", "cefAdjHCPkts"), ("CISCO-CEF-MIB", "cefAdjHCBytes"), ("CISCO-CEF-MIB", "cefStatsPrefixHCQueries"), ("CISCO-CEF-MIB", "cefStatsPrefixHCInserts"), ("CISCO-CEF-MIB", "cefStatsPrefixHCDeletes"), ("CISCO-CEF-MIB", "cefStatsPrefixHCElements"), ("CISCO-CEF-MIB", "cefSwitchingHCDrop"), ("CISCO-CEF-MIB", "cefSwitchingHCPunt"), ("CISCO-CEF-MIB", "cefSwitchingHCPunt2Host"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefHCStatsGroup = cefHCStatsGroup.setStatus('current')
cefNotifCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 492, 2, 1, 5)).setObjects(("CISCO-CEF-MIB", "cefResourceFailureNotifEnable"), ("CISCO-CEF-MIB", "cefPeerStateChangeNotifEnable"), ("CISCO-CEF-MIB", "cefPeerFIBStateChangeNotifEnable"), ("CISCO-CEF-MIB", "cefNotifThrottlingInterval"), ("CISCO-CEF-MIB", "cefInconsistencyNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefNotifCntlGroup = cefNotifCntlGroup.setStatus('current')
cefNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 492, 2, 1, 6)).setObjects(("CISCO-CEF-MIB", "cefResourceFailure"), ("CISCO-CEF-MIB", "cefPeerStateChange"), ("CISCO-CEF-MIB", "cefPeerFIBStateChange"), ("CISCO-CEF-MIB", "cefInconsistencyDetection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefNotificationGroup = cefNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CEF-MIB", cefCCGlobalFullScanAction=cefCCGlobalFullScanAction, cefAdjHCPkts=cefAdjHCPkts, cefLMPrefixTable=cefLMPrefixTable, cefCCGlobalTable=cefCCGlobalTable, cefCCGlobalFullScanStatus=cefCCGlobalFullScanStatus, cefMIBCompliance=cefMIBCompliance, cefFIBSummaryFwdPrefixes=cefFIBSummaryFwdPrefixes, cefInconsistencyRecId=cefInconsistencyRecId, cefDistributedGroup=cefDistributedGroup, cefInconsistencyPrefixType=cefInconsistencyPrefixType, cefPeerStateChange=cefPeerStateChange, cefStatsPrefixHCDeletes=cefStatsPrefixHCDeletes, cefPrefixInternalNRBytes=cefPrefixInternalNRBytes, cefInconsistencyReason=cefInconsistencyReason, cefPrefixHCBytes=cefPrefixHCBytes, cefPrefixInternalNRHCPkts=cefPrefixInternalNRHCPkts, cefStatsPrefixElements=cefStatsPrefixElements, cefFIBIpVersion=cefFIBIpVersion, cefSwitchingPath=cefSwitchingPath, cefInconsistencyCCType=cefInconsistencyCCType, cefLMPrefixDestAddr=cefLMPrefixDestAddr, cefAdjSummaryLinkType=cefAdjSummaryLinkType, cefCfgLoadSharingID=cefCfgLoadSharingID, cefCCEnabled=cefCCEnabled, cefPrefixInternalNRHCBytes=cefPrefixInternalNRHCBytes, cefCfgEntry=cefCfgEntry, cefAdjNextHopAddr=cefAdjNextHopAddr, cefResourceTable=cefResourceTable, ciscoCefMIBObjects=ciscoCefMIBObjects, cefCCTypeEntry=cefCCTypeEntry, cefNotificationGroup=cefNotificationGroup, cefFIBSummaryTable=cefFIBSummaryTable, cefResourceFailureNotifEnable=cefResourceFailureNotifEnable, cefInterface=cefInterface, cefPrefixExternalNRPkts=cefPrefixExternalNRPkts, cefLMPrefixRowStatus=cefLMPrefixRowStatus, cefAdjSummaryIncomplete=cefAdjSummaryIncomplete, cefAdjBytes=cefAdjBytes, cefPathTable=cefPathTable, entLastInconsistencyDetectTime=entLastInconsistencyDetectTime, cefMIBCompliances=cefMIBCompliances, cefPathEntry=cefPathEntry, cefCCType=cefCCType, cefPrefixHCPkts=cefPrefixHCPkts, cefCfgDistributionAdminState=cefCfgDistributionAdminState, cefPeerFIBEntry=cefPeerFIBEntry, cefStatsPrefixHCElements=cefStatsPrefixHCElements, cefCCQueriesIterated=cefCCQueriesIterated, cefFESelectionAdjLinkType=cefFESelectionAdjLinkType, cefSwitchingStatsEntry=cefSwitchingStatsEntry, cefInconsistencyRecordTable=cefInconsistencyRecordTable, cefPathInterface=cefPathInterface, cefCCGlobalAutoRepairHoldDown=cefCCGlobalAutoRepairHoldDown, cefSwitchingStatsTable=cefSwitchingStatsTable, cefPrefixExternalNRHCPkts=cefPrefixExternalNRHCPkts, cefAdjSummary=cefAdjSummary, cefPeerFIBStateChangeNotifEnable=cefPeerFIBStateChangeNotifEnable, cefStatsPrefixLenEntry=cefStatsPrefixLenEntry, cefAdjConnId=cefAdjConnId, cefStatsPrefixDeletes=cefStatsPrefixDeletes, cefFIB=cefFIB, cefSwitchingPunt2Host=cefSwitchingPunt2Host, cefPrefixAddr=cefPrefixAddr, cefHCStatsGroup=cefHCStatsGroup, cefAdjFixup=cefAdjFixup, ciscoCefMIB=ciscoCefMIB, cefPrefixPkts=cefPrefixPkts, cefPeerFIBOperState=cefPeerFIBOperState, cefPrefixExternalNRBytes=cefPrefixExternalNRBytes, cefStatsPrefixInserts=cefStatsPrefixInserts, cefFE=cefFE, cefPrefixForwardingInfo=cefPrefixForwardingInfo, ciscoCefMIBConform=ciscoCefMIBConform, cefFESelectionId=cefFESelectionId, cefFESelectionWeight=cefFESelectionWeight, cefPeerFIBStateChange=cefPeerFIBStateChange, cefGlobal=cefGlobal, cefNotifCntl=cefNotifCntl, cefResourceMemoryUsed=cefResourceMemoryUsed, cefPrefixInternalNRPkts=cefPrefixInternalNRPkts, cefStatsPrefixQueries=cefStatsPrefixQueries, cefAdjSummaryRedirect=cefAdjSummaryRedirect, cefAdj=cefAdj, cefAdjSummaryFixup=cefAdjSummaryFixup, cefSwitchingHCDrop=cefSwitchingHCDrop, cefLMPrefixLen=cefLMPrefixLen, cefAdjNextHopAddrType=cefAdjNextHopAddrType, cefAdjForwardingInfo=cefAdjForwardingInfo, cefFESelectionVrfName=cefFESelectionVrfName, cefCCGlobalAutoRepairDelay=cefCCGlobalAutoRepairDelay, cefSwitchingHCPunt=cefSwitchingHCPunt, cefInconsistencyEntity=cefInconsistencyEntity, cefAdjSource=cefAdjSource, cefPeerFIBTable=cefPeerFIBTable, cefSwitchingDrop=cefSwitchingDrop, cefGroup=cefGroup, cefCCGlobalErrorMsgEnabled=cefCCGlobalErrorMsgEnabled, cefPathType=cefPathType, cefIntNonrecursiveAccouting=cefIntNonrecursiveAccouting, cefPrefixEntry=cefPrefixEntry, cefLMPrefixDestAddrType=cefLMPrefixDestAddrType, cefFESelectionAdjNextHopAddr=cefFESelectionAdjNextHopAddr, cefFESelectionAdjInterface=cefFESelectionAdjInterface, cefFESelectionLabels=cefFESelectionLabels, cefPrefixType=cefPrefixType, cefPeerOperState=cefPeerOperState, cefCfgTable=cefCfgTable, cefPrefixBytes=cefPrefixBytes, cefCCQueriesSent=cefCCQueriesSent, cefPathRecurseVrfName=cefPathRecurseVrfName, cefStatsPrefixHCInserts=cefStatsPrefixHCInserts, cefAdjPkts=cefAdjPkts, cefResourceEntry=cefResourceEntry, cefAdjSummaryEntry=cefAdjSummaryEntry, cefCfgTrafficStatsUpdateRate=cefCfgTrafficStatsUpdateRate, ciscoCefMIBNotifs=ciscoCefMIBNotifs, cefInconsistencyReset=cefInconsistencyReset, PYSNMP_MODULE_ID=ciscoCefMIB, cefFESelectionTable=cefFESelectionTable, cefResourceFailure=cefResourceFailure, cefAdjSummaryTable=cefAdjSummaryTable, cefCCQueriesChecked=cefCCQueriesChecked, cefResourceFailureReason=cefResourceFailureReason, cefIntSwitchingState=cefIntSwitchingState, cefInconsistencyRecordEntry=cefInconsistencyRecordEntry, cefLMPrefixAddr=cefLMPrefixAddr, cefInconsistencyDetection=cefInconsistencyDetection, cefSwitchingIndex=cefSwitchingIndex, cefCCGlobalAutoRepairEnabled=cefCCGlobalAutoRepairEnabled, cefNotifCntlGroup=cefNotifCntlGroup, cefPeerEntry=cefPeerEntry, cefInconsistencyNotifEnable=cefInconsistencyNotifEnable, cefNotifThrottlingInterval=cefNotifThrottlingInterval, entPeerPhysicalIndex=entPeerPhysicalIndex, cefStats=cefStats, cefPeerNumberOfResets=cefPeerNumberOfResets, cefCCPeriod=cefCCPeriod, cefFESelectionAdjNextHopAddrType=cefFESelectionAdjNextHopAddrType, cefStatsPrefixLenTable=cefStatsPrefixLenTable, cefPrefixTable=cefPrefixTable, cefCfgTrafficStatsLoadInterval=cefCfgTrafficStatsLoadInterval, cefFIBSummary=cefFIBSummary, cefStatsPrefixLen=cefStatsPrefixLen, cefPrefixLen=cefPrefixLen, cefCfgLoadSharingAlgorithm=cefCfgLoadSharingAlgorithm, cefIntTable=cefIntTable, cefFESelectionSpecial=cefFESelectionSpecial, cefInconsistencyResetStatus=cefInconsistencyResetStatus, cefPrefixExternalNRHCBytes=cefPrefixExternalNRHCBytes, cefLMPrefixSpinLock=cefLMPrefixSpinLock, cefFESelectionEntry=cefFESelectionEntry, cefCfgAdminState=cefCfgAdminState, cefCCQueriesIgnored=cefCCQueriesIgnored, cefAdjEncap=cefAdjEncap, cefIntEntry=cefIntEntry, cefCC=cefCC, cefInconsistencyPrefixAddr=cefInconsistencyPrefixAddr, cefStatsPrefixHCQueries=cefStatsPrefixHCQueries, cefMIBGroups=cefMIBGroups, cefLMPrefixState=cefLMPrefixState, cefAdjHCBytes=cefAdjHCBytes, cefAdjTable=cefAdjTable, cefIntLoadSharing=cefIntLoadSharing, cefCfgOperState=cefCfgOperState, cefPeer=cefPeer, cefInconsistencyPrefixLen=cefInconsistencyPrefixLen, cefPeerStateChangeNotifEnable=cefPeerStateChangeNotifEnable, cefPathNextHopAddr=cefPathNextHopAddr, cefFESelectionAdjConnId=cefFESelectionAdjConnId, cefAdjMTU=cefAdjMTU, cefSwitchingPunt=cefSwitchingPunt, cefLMPrefixEntry=cefLMPrefixEntry, cefCCTypeTable=cefCCTypeTable, cefFIBSummaryEntry=cefFIBSummaryEntry, cefAdjSummaryComplete=cefAdjSummaryComplete, cefFESelectionName=cefFESelectionName, cefCCCount=cefCCCount, cefSwitchingHCPunt2Host=cefSwitchingHCPunt2Host, cefPathId=cefPathId, cefCfgDistributionOperState=cefCfgDistributionOperState, cefCCGlobalEntry=cefCCGlobalEntry, cefCfgAccountingMap=cefCfgAccountingMap, cefAdjEntry=cefAdjEntry, cefInconsistencyVrfName=cefInconsistencyVrfName, cefPeerTable=cefPeerTable)
