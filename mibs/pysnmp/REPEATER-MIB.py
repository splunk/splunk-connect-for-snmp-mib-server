#
# PySNMP MIB module REPEATER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REPEATER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:47:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, iso, ObjectIdentity, Counter64, Counter32, Integer32, Bits, Unsigned32, enterprises, NotificationType, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "iso", "ObjectIdentity", "Counter64", "Counter32", "Integer32", "Bits", "Unsigned32", "enterprises", "NotificationType", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4))
ctron = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1))
ctphysical = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1))
repeater = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1))
repeaterRev4 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4))
rptr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1))
rptrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1))
rptrMgmtName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtName.setStatus('mandatory')
rptrMgmtPortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortCount.setStatus('mandatory')
rptrMgmtPortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtPortsEnable.setStatus('mandatory')
rptrMgmtPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortsOn.setStatus('mandatory')
rptrMgmtPortsOper = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortsOper.setStatus('mandatory')
rptrMgmtBoardMap = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtBoardMap.setStatus('mandatory')
rptrMgmtInterfaceNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtInterfaceNum.setStatus('mandatory')
rptrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2))
rptrPktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1))
rptrPktStatsPackets = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsPackets.setStatus('mandatory')
rptrPktStatsBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsBytes.setStatus('mandatory')
rptrPktStatsColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsColls.setStatus('mandatory')
rptrPktStatsErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsErrors.setStatus('mandatory')
rptrPktStatsAlign = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsAlign.setStatus('mandatory')
rptrPktStatsCRC = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsCRC.setStatus('mandatory')
rptrPktStatsOOW = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsOOW.setStatus('mandatory')
rptrPktStatsNoRsc = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsNoRsc.setStatus('mandatory')
rptrProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2))
rptrProtocolsOSI = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsOSI.setStatus('mandatory')
rptrProtocolsNovell = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsNovell.setStatus('mandatory')
rptrProtocolsBanyan = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsBanyan.setStatus('mandatory')
rptrProtocolsDECNet = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsDECNet.setStatus('mandatory')
rptrProtocolsXNS = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsXNS.setStatus('mandatory')
rptrProtocolsIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsIP.setStatus('mandatory')
rptrProtocolsCtron = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsCtron.setStatus('mandatory')
rptrProtocolsAppletalk = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsAppletalk.setStatus('mandatory')
rptrProtocolsOther = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsOther.setStatus('mandatory')
rptrFrameSizes = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3))
rptrFrameSzRunt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSzRunt.setStatus('mandatory')
rptrFrameSz64To127 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz64To127.setStatus('mandatory')
rptrFrameSz128To255 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz128To255.setStatus('mandatory')
rptrFrameSz256To511 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz256To511.setStatus('mandatory')
rptrFrameSz512To1023 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz512To1023.setStatus('mandatory')
rptrFrameSz1024To1518 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz1024To1518.setStatus('mandatory')
rptrFrameSzGiant = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSzGiant.setStatus('mandatory')
rptrAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3))
rptrAlarmsTrafEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsTrafEnable.setStatus('mandatory')
rptrAlarmsTrafThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsTrafThreshold.setStatus('mandatory')
rptrAlarmsCollEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsCollEnable.setStatus('mandatory')
rptrAlarmsCollThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsCollThreshold.setStatus('mandatory')
rptrAlarmsErrEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrEnable.setStatus('mandatory')
rptrAlarmsErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrThreshold.setStatus('mandatory')
rptrAlarmsErrSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrSource.setStatus('mandatory')
rptrAlarmsAlarmTimebase = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsAlarmTimebase.setStatus('mandatory')
rptrRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4))
rptrRedund = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1))
rptrRedundReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundReset.setStatus('mandatory')
rptrRedundPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundPollInterval.setStatus('mandatory')
rptrRedundTestTOD = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundTestTOD.setStatus('mandatory')
rptrRedundPerformTest = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTest", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundPerformTest.setStatus('mandatory')
rptrRedundMaxCrcts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundMaxCrcts.setStatus('mandatory')
rptrRedundCrctTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2), )
if mibBuilder.loadTexts: rptrRedundCrctTable.setStatus('mandatory')
rptrRedundCrctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrRedundCrctId"))
if mibBuilder.loadTexts: rptrRedundCrctEntry.setStatus('mandatory')
rptrRedundCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctId.setStatus('mandatory')
rptrRedundCrctName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctName.setStatus('mandatory')
rptrRedundCrctRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctRetrys.setStatus('mandatory')
rptrRedundCrctNumBPs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctNumBPs.setStatus('mandatory')
rptrRedundCrctNumAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctNumAddr.setStatus('mandatory')
rptrRedundCrctAddAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctAddAddr.setStatus('mandatory')
rptrRedundCrctDelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctDelAddr.setStatus('mandatory')
rptrRedundCrctEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctEnable.setStatus('mandatory')
rptrRedundCrctReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctReset.setStatus('mandatory')
rptrRedundPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3), )
if mibBuilder.loadTexts: rptrRedundPortTable.setStatus('mandatory')
rptrRedundPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrRedundPortId"), (0, "REPEATER-MIB", "rptrRedundPortCrctId"))
if mibBuilder.loadTexts: rptrRedundPortEntry.setStatus('mandatory')
rptrRedundPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortId.setStatus('mandatory')
rptrRedundPortCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortCrctId.setStatus('mandatory')
rptrRedundPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortNum.setStatus('mandatory')
rptrRedundPortBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortBoardNum.setStatus('mandatory')
rptrRedundPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortType.setStatus('mandatory')
rptrRedundAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4), )
if mibBuilder.loadTexts: rptrRedundAddrTable.setStatus('mandatory')
rptrRedundAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrRedundAddrId"), (0, "REPEATER-MIB", "rptrRedundAddrCrctId"))
if mibBuilder.loadTexts: rptrRedundAddrEntry.setStatus('mandatory')
rptrRedundAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrId.setStatus('mandatory')
rptrRedundAddrCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrCrctId.setStatus('mandatory')
rptrRedundAddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrIPAddr.setStatus('mandatory')
rptrSourceAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5))
rptrSrcAddrListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1), )
if mibBuilder.loadTexts: rptrSrcAddrListTable.setStatus('mandatory')
rptrSrcAddrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrSrcAddrListId"))
if mibBuilder.loadTexts: rptrSrcAddrListEntry.setStatus('mandatory')
rptrSrcAddrListId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrListId.setStatus('mandatory')
rptrSrcAddrAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrAddressList.setStatus('mandatory')
rptrSrcAddrSrcTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2), )
if mibBuilder.loadTexts: rptrSrcAddrSrcTable.setStatus('mandatory')
rptrSrcAddrSrcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrSrcAddrSrcTableEntryId"))
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntry.setStatus('mandatory')
rptrSrcAddrSrcTableEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryId.setStatus('mandatory')
rptrSrcAddrSrcTableEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPort.setStatus('mandatory')
rptrSrcAddrSrcTableEntryPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPortGroup.setStatus('mandatory')
rptrSrcAddrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3))
rptrSrcAddrMgmtSrcAgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtSrcAgeInterval.setStatus('mandatory')
rptrSrcAddrMgmtPortLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtPortLock.setStatus('mandatory')
rptrSrcAddrMgmtActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrMgmtActiveUsers.setStatus('mandatory')
rptrPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2))
rptrPortGrpMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpMgmtTable.setStatus('mandatory')
rptrPortGrpMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpMgmtGrpId"))
if mibBuilder.loadTexts: rptrPortGrpMgmtEntry.setStatus('mandatory')
rptrPortGrpMgmtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtGrpId.setStatus('mandatory')
rptrPortGrpMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpMgmtName.setStatus('mandatory')
rptrPortGrpMgmtPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortCount.setStatus('mandatory')
rptrPortGrpMgmtPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsEnable.setStatus('mandatory')
rptrPortGrpMgmtPortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOn.setStatus('mandatory')
rptrPortGrpMgmtPortsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOper.setStatus('mandatory')
rptrPortGrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2))
rptrPortGrpPktStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpPktStatsTbl.setStatus('mandatory')
rptrPortGrpPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpPktStatsId"))
if mibBuilder.loadTexts: rptrPortGrpPktStatsEntry.setStatus('mandatory')
rptrPortGrpPktStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsId.setStatus('mandatory')
rptrPortGrpPktStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsPkts.setStatus('mandatory')
rptrPortGrpPktStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsBytes.setStatus('mandatory')
rptrPortGrpPktStatsColls = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsColls.setStatus('mandatory')
rptrPortGrpPktStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsErrors.setStatus('mandatory')
rptrPortGrpPktStatsAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsAlign.setStatus('mandatory')
rptrPortGrpPktStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsCRC.setStatus('mandatory')
rptrPortGrpPktStatsOOW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsOOW.setStatus('mandatory')
rptrPortGrpProtocolTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: rptrPortGrpProtocolTbl.setStatus('mandatory')
rptrPortGrpProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpProtocolId"))
if mibBuilder.loadTexts: rptrPortGrpProtocolEntry.setStatus('mandatory')
rptrPortGrpProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolId.setStatus('mandatory')
rptrPortGrpProtocolOSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolOSI.setStatus('mandatory')
rptrPortGrpProtocolNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolNovell.setStatus('mandatory')
rptrPortGrpProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolBanyan.setStatus('mandatory')
rptrPortGrpProtocolDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolDECNet.setStatus('mandatory')
rptrPortGrpProtocolXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolXNS.setStatus('mandatory')
rptrPortGrpProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolIP.setStatus('mandatory')
rptrPortGrpProtocolCtron = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolCtron.setStatus('mandatory')
rptrPortGrpProtocolAppletalk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolAppletalk.setStatus('mandatory')
rptrPortGrpProtocolOther = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolOther.setStatus('mandatory')
rptrPortGrpFrameSzTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3), )
if mibBuilder.loadTexts: rptrPortGrpFrameSzTbl.setStatus('mandatory')
rptrPortGrpFrameSzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpFrameSzId"))
if mibBuilder.loadTexts: rptrPortGrpFrameSzEntry.setStatus('mandatory')
rptrPortGrpFrameSzId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzId.setStatus('mandatory')
rptrPortGrpFrameSzRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzRunt.setStatus('mandatory')
rptrPortGrpFrameSz64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz64To127.setStatus('mandatory')
rptrPortGrpFrameSz128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz128To255.setStatus('mandatory')
rptrPortGrpFrameSz256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz256To511.setStatus('mandatory')
rptrPortGrpFrameSz512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz512To1023.setStatus('mandatory')
rptrPortGrpFrameSz1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz1024To1518.setStatus('mandatory')
rptrPortGrpFrameSzGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzGiant.setStatus('mandatory')
rptrPortGrpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: rptrPortGrpAlarmTable.setStatus('mandatory')
rptrPortGrpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpAlarmId"))
if mibBuilder.loadTexts: rptrPortGrpAlarmEntry.setStatus('mandatory')
rptrPortGrpAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpAlarmId.setStatus('mandatory')
rptrPortGrpAlarmTrafEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafEnable.setStatus('mandatory')
rptrPortGrpAlarmTrafThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafThreshold.setStatus('mandatory')
rptrPortGrpAlarmTrafGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafGrpDisable.setStatus('mandatory')
rptrPortGrpAlarmCollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollEnable.setStatus('mandatory')
rptrPortGrpAlarmCollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollThreshold.setStatus('mandatory')
rptrPortGrpAlarmCollBdDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollBdDisable.setStatus('mandatory')
rptrPortGrpAlarmErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrEnable.setStatus('mandatory')
rptrPortGrpAlarmErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrThreshold.setStatus('mandatory')
rptrPortGrpAlarmErrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrSource.setStatus('mandatory')
rptrPortGrpAlarmErrGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrGrpDisable.setStatus('mandatory')
rptrPortGrpSrcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: rptrPortGrpSrcAddrTable.setStatus('mandatory')
rptrPortGrpSrcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpSrcAddrId"))
if mibBuilder.loadTexts: rptrPortGrpSrcAddrEntry.setStatus('mandatory')
rptrPortGrpSrcAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrId.setStatus('mandatory')
rptrPortGrpSrcAddrActiveUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrActiveUsers.setStatus('mandatory')
rptrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3))
rptrPortMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: rptrPortMgmtTable.setStatus('mandatory')
rptrPortMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortMgmtPortId"), (0, "REPEATER-MIB", "rptrPortMgmtPortGrpId"))
if mibBuilder.loadTexts: rptrPortMgmtEntry.setStatus('mandatory')
rptrPortMgmtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortId.setStatus('mandatory')
rptrPortMgmtPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortGrpId.setStatus('mandatory')
rptrPortMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortMgmtName.setStatus('mandatory')
rptrPortMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortMgmtAdminState.setStatus('mandatory')
rptrPortMgmtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOperational", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtOperState.setStatus('mandatory')
prtrPortMgmtPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtrPortMgmtPortType.setStatus('mandatory')
rptrPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2))
rptrPortPktStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: rptrPortPktStatsTbl.setStatus('mandatory')
rptrPortPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortPktStatsPortId"), (0, "REPEATER-MIB", "rptrPortPktStatsPortGrpId"))
if mibBuilder.loadTexts: rptrPortPktStatsEntry.setStatus('mandatory')
rptrPortPktStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPortId.setStatus('mandatory')
rptrPortPktStatsPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPortGrpId.setStatus('mandatory')
rptrPortPktStatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPackets.setStatus('mandatory')
rptrPortPktStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsBytes.setStatus('mandatory')
rptrPortPktStatsColls = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsColls.setStatus('mandatory')
rptrPortPktStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsErrors.setStatus('mandatory')
rptrPortPktStatsAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsAlign.setStatus('mandatory')
rptrPortPktStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsCRC.setStatus('mandatory')
rptrPortPktStatsOOW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsOOW.setStatus('mandatory')
rptrPortProtocolTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2), )
if mibBuilder.loadTexts: rptrPortProtocolTbl.setStatus('mandatory')
rptrPortProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortProtocolPortId"), (0, "REPEATER-MIB", "rptrPortProtocolPortGrpId"))
if mibBuilder.loadTexts: rptrPortProtocolEntry.setStatus('mandatory')
rptrPortProtocolPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolPortId.setStatus('mandatory')
rptrPortProtocolPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolPortGrpId.setStatus('mandatory')
rptrPortProtocolOSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolOSI.setStatus('mandatory')
rptrPortProtocolNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolNovell.setStatus('mandatory')
rptrPortProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolBanyan.setStatus('mandatory')
rptrPortProtocolDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolDECNet.setStatus('mandatory')
rptrPortProtocolXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolXNS.setStatus('mandatory')
rptrPortProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolIP.setStatus('mandatory')
rptrPortProtocolCtron = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolCtron.setStatus('mandatory')
rptrPortProtocolAppletalk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolAppletalk.setStatus('mandatory')
rptrPortProtocolOther = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolOther.setStatus('mandatory')
rptrPortFrameSzTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3), )
if mibBuilder.loadTexts: rptrPortFrameSzTbl.setStatus('mandatory')
rptrPortFrameSzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortFrameSzPortId"), (0, "REPEATER-MIB", "rptrPortFrameSzPortGrpId"))
if mibBuilder.loadTexts: rptrPortFrameSzEntry.setStatus('mandatory')
rptrPortFrameSzPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzPortId.setStatus('mandatory')
rptrPortFrameSzPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzPortGrpId.setStatus('mandatory')
rptrPortFrameSzRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzRunt.setStatus('mandatory')
rptrPortFrameSz64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz64To127.setStatus('mandatory')
rptrPortFrameSz128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz128To255.setStatus('mandatory')
rptrPortFrameSz256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz256To511.setStatus('mandatory')
rptrPortFrameSz512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz512To1023.setStatus('mandatory')
rptrPortFrameSz1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz1024To1518.setStatus('mandatory')
rptrPortFrameSzGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzGiant.setStatus('mandatory')
rptrPortAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3), )
if mibBuilder.loadTexts: rptrPortAlarmTable.setStatus('mandatory')
rptrPortAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortAlarmPortId"), (0, "REPEATER-MIB", "rptrPortAlarmPortGrpId"))
if mibBuilder.loadTexts: rptrPortAlarmEntry.setStatus('mandatory')
rptrPortAlarmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlarmPortId.setStatus('mandatory')
rptrPortAlarmPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlarmPortGrpId.setStatus('mandatory')
rptrPortAlarmTrafEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafEnable.setStatus('mandatory')
rptrPortAlarmTrafThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafThreshold.setStatus('mandatory')
rptrPortAlarmTrafPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafPortDisable.setStatus('mandatory')
rptrPortAlarmCollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollEnable.setStatus('mandatory')
rptrPortAlarmCollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollThreshold.setStatus('mandatory')
rptrPortAlarmCollPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollPortDisable.setStatus('mandatory')
rptrPortAlarmErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrEnable.setStatus('mandatory')
rptrPortAlarmErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrThreshold.setStatus('mandatory')
rptrPortAlarmErrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrSource.setStatus('mandatory')
rptrPortAlarmErrPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrPortDisable.setStatus('mandatory')
rptrPortRedundTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4), )
if mibBuilder.loadTexts: rptrPortRedundTable.setStatus('mandatory')
rptrPortRedundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortRedundPortId"), (0, "REPEATER-MIB", "rptrPortRedundPortGrpId"))
if mibBuilder.loadTexts: rptrPortRedundEntry.setStatus('mandatory')
rptrPortRedundPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRedundPortId.setStatus('mandatory')
rptrPortRedundPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRedundPortGrpId.setStatus('mandatory')
rptrPortRedundCrctNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundCrctNum.setStatus('mandatory')
rptrPortRedundType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundType.setStatus('mandatory')
rptrPortRedundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundStatus.setStatus('mandatory')
rptrPortSrcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5), )
if mibBuilder.loadTexts: rptrPortSrcAddrTable.setStatus('mandatory')
rptrPortSrcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortSrcAddrPortId"), (0, "REPEATER-MIB", "rptrPortSrcAddrPortGrpId"))
if mibBuilder.loadTexts: rptrPortSrcAddrEntry.setStatus('mandatory')
rptrPortSrcAddrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrPortId.setStatus('mandatory')
rptrPortSrcAddrPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrPortGrpId.setStatus('mandatory')
rptrPortSrcAddrTopoState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrTopoState.setStatus('mandatory')
rptrPortSrcAddrForceTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noForce", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSrcAddrForceTrunk.setStatus('mandatory')
rptrPortSrcAddrActiveUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrActiveUsers.setStatus('mandatory')
rptrPortSrcAddrListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6), )
if mibBuilder.loadTexts: rptrPortSrcAddrListTable.setStatus('mandatory')
rptrPortSrcAddrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortSrcAddrListId"), (0, "REPEATER-MIB", "rptrPortSrcAddrListPortId"), (0, "REPEATER-MIB", "rptrPortSrcAddrListPortGrpId"))
if mibBuilder.loadTexts: rptrPortSrcAddrListEntry.setStatus('mandatory')
rptrPortSrcAddrListId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListId.setStatus('mandatory')
rptrPortSrcAddrListPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListPortId.setStatus('mandatory')
rptrPortSrcAddrListPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListPortGrpId.setStatus('mandatory')
rptrPortSrcAddrAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrAddressList.setStatus('mandatory')
rptrPortHardwareTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7), )
if mibBuilder.loadTexts: rptrPortHardwareTable.setStatus('mandatory')
rptrPortHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortHardwarePortId"), (0, "REPEATER-MIB", "rptrPortHardwarePortGrpId"))
if mibBuilder.loadTexts: rptrPortHardwareEntry.setStatus('mandatory')
rptrPortHardwarePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwarePortId.setStatus('mandatory')
rptrPortHardwarePortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwarePortGrpId.setStatus('mandatory')
rptrPortHardwareSegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSegmented", 1), ("segmented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwareSegStatus.setStatus('mandatory')
rptrPortHardwareLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notLinked", 1), ("linked", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwareLinkStatus.setStatus('mandatory')
mibBuilder.exportSymbols("REPEATER-MIB", rptrPortGrpAlarmTable=rptrPortGrpAlarmTable, rptrSrcAddrMgmtPortLock=rptrSrcAddrMgmtPortLock, rptrPort=rptrPort, rptrPortMgmtOperState=rptrPortMgmtOperState, rptrPortGrpAlarmTrafEnable=rptrPortGrpAlarmTrafEnable, rptrSrcAddrAddressList=rptrSrcAddrAddressList, rptrPortFrameSzGiant=rptrPortFrameSzGiant, rptrPortGrpProtocolNovell=rptrPortGrpProtocolNovell, rptrPortAlarmErrEnable=rptrPortAlarmErrEnable, rptrPktStatsAlign=rptrPktStatsAlign, rptrSrcAddrSrcTableEntryPort=rptrSrcAddrSrcTableEntryPort, rptrPortGrpMgmtGrpId=rptrPortGrpMgmtGrpId, rptrRedundCrctReset=rptrRedundCrctReset, rptrPortProtocolOther=rptrPortProtocolOther, rptrRedundPortType=rptrRedundPortType, rptrPortFrameSzPortId=rptrPortFrameSzPortId, rptrPortAlarmTrafEnable=rptrPortAlarmTrafEnable, rptrRedundPollInterval=rptrRedundPollInterval, rptrPortSrcAddrEntry=rptrPortSrcAddrEntry, rptrPortPktStatsEntry=rptrPortPktStatsEntry, repeater=repeater, rptrMgmtPortsOn=rptrMgmtPortsOn, rptrPortAlarmCollThreshold=rptrPortAlarmCollThreshold, rptrPortProtocolXNS=rptrPortProtocolXNS, rptrProtocolsDECNet=rptrProtocolsDECNet, rptrPktStatsNoRsc=rptrPktStatsNoRsc, rptrRedund=rptrRedund, rptrPortGrpPktStatsEntry=rptrPortGrpPktStatsEntry, rptrPortGrpFrameSzGiant=rptrPortGrpFrameSzGiant, rptrPortFrameSzPortGrpId=rptrPortFrameSzPortGrpId, rptrPortRedundCrctNum=rptrPortRedundCrctNum, rptrMgmtPortsEnable=rptrMgmtPortsEnable, rptrAlarmsErrThreshold=rptrAlarmsErrThreshold, rptrRedundCrctNumAddr=rptrRedundCrctNumAddr, rptrRedundPortCrctId=rptrRedundPortCrctId, rptrRedundCrctEnable=rptrRedundCrctEnable, rptrRedundAddrIPAddr=rptrRedundAddrIPAddr, rptrPortGrpProtocolCtron=rptrPortGrpProtocolCtron, rptrAlarmsTrafEnable=rptrAlarmsTrafEnable, rptrPortGrpAlarmCollBdDisable=rptrPortGrpAlarmCollBdDisable, rptrRedundReset=rptrRedundReset, rptrFrameSz128To255=rptrFrameSz128To255, rptrPortGrpAlarmErrThreshold=rptrPortGrpAlarmErrThreshold, rptrPortProtocolIP=rptrPortProtocolIP, rptrPortGrpSrcAddrId=rptrPortGrpSrcAddrId, rptrProtocolsNovell=rptrProtocolsNovell, rptrRedundCrctEntry=rptrRedundCrctEntry, rptrPortPktStatsColls=rptrPortPktStatsColls, rptrProtocolsXNS=rptrProtocolsXNS, rptrRedundPerformTest=rptrRedundPerformTest, rptrPortGrpAlarmErrGrpDisable=rptrPortGrpAlarmErrGrpDisable, rptrPortStats=rptrPortStats, rptrPortGrpProtocolDECNet=rptrPortGrpProtocolDECNet, rptrPortSrcAddrListTable=rptrPortSrcAddrListTable, rptrPortGrpAlarmEntry=rptrPortGrpAlarmEntry, rptrRedundAddrCrctId=rptrRedundAddrCrctId, rptrPortSrcAddrActiveUsers=rptrPortSrcAddrActiveUsers, rptrFrameSz256To511=rptrFrameSz256To511, rptrPortGrpSrcAddrEntry=rptrPortGrpSrcAddrEntry, rptrPortRedundType=rptrPortRedundType, rptrFrameSz512To1023=rptrFrameSz512To1023, rptrPortGrpFrameSz512To1023=rptrPortGrpFrameSz512To1023, rptrPortAlarmErrThreshold=rptrPortAlarmErrThreshold, rptrPktStatsErrors=rptrPktStatsErrors, rptrPortPktStatsErrors=rptrPortPktStatsErrors, rptrPortAlarmTable=rptrPortAlarmTable, rptrPortGrpProtocolOther=rptrPortGrpProtocolOther, rptrMgmtInterfaceNum=rptrMgmtInterfaceNum, rptrPortSrcAddrTable=rptrPortSrcAddrTable, rptrProtocolsOther=rptrProtocolsOther, rptrPortSrcAddrListId=rptrPortSrcAddrListId, rptrPortProtocolEntry=rptrPortProtocolEntry, rptrRedundCrctTable=rptrRedundCrctTable, ctron=ctron, rptrSrcAddrSrcTableEntryPortGroup=rptrSrcAddrSrcTableEntryPortGroup, rptrPortProtocolPortGrpId=rptrPortProtocolPortGrpId, rptrSrcAddrSrcTable=rptrSrcAddrSrcTable, rptrPortPktStatsBytes=rptrPortPktStatsBytes, rptrPktStatsColls=rptrPktStatsColls, rptrFrameSzRunt=rptrFrameSzRunt, rptrPortSrcAddrForceTrunk=rptrPortSrcAddrForceTrunk, rptrPortSrcAddrAddressList=rptrPortSrcAddrAddressList, rptrRedundAddrEntry=rptrRedundAddrEntry, rptrPortGrpProtocolEntry=rptrPortGrpProtocolEntry, rptrPortGrpPktStatsTbl=rptrPortGrpPktStatsTbl, rptrPortPktStatsPortGrpId=rptrPortPktStatsPortGrpId, rptrPortFrameSz256To511=rptrPortFrameSz256To511, rptrPortGrpMgmtPortsOn=rptrPortGrpMgmtPortsOn, rptrPortGrpPktStatsAlign=rptrPortGrpPktStatsAlign, rptrPortGrpFrameSz128To255=rptrPortGrpFrameSz128To255, rptrRedundPortEntry=rptrRedundPortEntry, rptrAlarmsAlarmTimebase=rptrAlarmsAlarmTimebase, rptrPortGrpStats=rptrPortGrpStats, rptrPortPktStatsCRC=rptrPortPktStatsCRC, rptrPortPktStatsOOW=rptrPortPktStatsOOW, rptrPortGrpAlarmErrEnable=rptrPortGrpAlarmErrEnable, rptrPortAlarmTrafThreshold=rptrPortAlarmTrafThreshold, rptrPortGrpFrameSz256To511=rptrPortGrpFrameSz256To511, rptrPortMgmtPortGrpId=rptrPortMgmtPortGrpId, rptrPortGrpFrameSz1024To1518=rptrPortGrpFrameSz1024To1518, rptrPortProtocolPortId=rptrPortProtocolPortId, rptrProtocolsOSI=rptrProtocolsOSI, rptrProtocolsBanyan=rptrProtocolsBanyan, rptrPortFrameSz128To255=rptrPortFrameSz128To255, rptrPortRedundEntry=rptrPortRedundEntry, rptrPortRedundPortGrpId=rptrPortRedundPortGrpId, rptrPortHardwareEntry=rptrPortHardwareEntry, rptrPortFrameSzTbl=rptrPortFrameSzTbl, rptrPortSrcAddrPortGrpId=rptrPortSrcAddrPortGrpId, rptrPortGrpAlarmTrafGrpDisable=rptrPortGrpAlarmTrafGrpDisable, rptrPortHardwareSegStatus=rptrPortHardwareSegStatus, rptrPortGrpPktStatsPkts=rptrPortGrpPktStatsPkts, rptrPortProtocolBanyan=rptrPortProtocolBanyan, rptrFrameSizes=rptrFrameSizes, rptrMgmtPortCount=rptrMgmtPortCount, rptrSrcAddrMgmt=rptrSrcAddrMgmt, rptrPortGrpFrameSzRunt=rptrPortGrpFrameSzRunt, rptrPortAlarmEntry=rptrPortAlarmEntry, rptrPortAlarmPortId=rptrPortAlarmPortId, prtrPortMgmtPortType=prtrPortMgmtPortType, rptrPktStatsPackets=rptrPktStatsPackets, rptrPortSrcAddrListPortGrpId=rptrPortSrcAddrListPortGrpId, rptrPortGrpPktStatsOOW=rptrPortGrpPktStatsOOW, rptrPortGrpAlarmId=rptrPortGrpAlarmId, rptrPortAlarmCollPortDisable=rptrPortAlarmCollPortDisable, rptrPortAlarmErrSource=rptrPortAlarmErrSource, rptrRedundPortBoardNum=rptrRedundPortBoardNum, rptrPortPktStatsTbl=rptrPortPktStatsTbl, rptrPortGrpSrcAddrTable=rptrPortGrpSrcAddrTable, rptrPortSrcAddrPortId=rptrPortSrcAddrPortId, rptrPortAlarmCollEnable=rptrPortAlarmCollEnable, rptrPortGrpPktStatsCRC=rptrPortGrpPktStatsCRC, rptrFrameSzGiant=rptrFrameSzGiant, rptrSrcAddrSrcTableEntryId=rptrSrcAddrSrcTableEntryId, rptrPortPktStatsAlign=rptrPortPktStatsAlign, rptrAlarms=rptrAlarms, rptrPortGrpMgmtEntry=rptrPortGrpMgmtEntry, rptrPortMgmtTable=rptrPortMgmtTable, rptrSrcAddrMgmtSrcAgeInterval=rptrSrcAddrMgmtSrcAgeInterval, rptrPortProtocolCtron=rptrPortProtocolCtron, rptrPortGrpAlarmTrafThreshold=rptrPortGrpAlarmTrafThreshold, rptrFrameSz1024To1518=rptrFrameSz1024To1518, rptrPortGrpProtocolTbl=rptrPortGrpProtocolTbl, rptrPortRedundPortId=rptrPortRedundPortId, ctphysical=ctphysical, rptrPortGrpMgmtPortsOper=rptrPortGrpMgmtPortsOper, rptrPortProtocolTbl=rptrPortProtocolTbl, rptrPortGrpFrameSzId=rptrPortGrpFrameSzId, rptrSrcAddrListEntry=rptrSrcAddrListEntry, rptrPortProtocolOSI=rptrPortProtocolOSI, rptrSrcAddrSrcTableEntry=rptrSrcAddrSrcTableEntry, rptrPortFrameSz1024To1518=rptrPortFrameSz1024To1518, rptrPortGrpFrameSzEntry=rptrPortGrpFrameSzEntry, rptrPortFrameSzEntry=rptrPortFrameSzEntry, rptrPktStats=rptrPktStats, rptrPortGrpProtocolId=rptrPortGrpProtocolId, rptrPortGrpSrcAddrActiveUsers=rptrPortGrpSrcAddrActiveUsers, rptrPortSrcAddrTopoState=rptrPortSrcAddrTopoState, rptrPortSrcAddrListPortId=rptrPortSrcAddrListPortId, rptrPortHardwarePortId=rptrPortHardwarePortId, rptrRedundCrctId=rptrRedundCrctId, rptrPortMgmtPortId=rptrPortMgmtPortId, rptrMgmt=rptrMgmt, rptrRedundCrctNumBPs=rptrRedundCrctNumBPs, rptrRedundAddrTable=rptrRedundAddrTable, rptrRedundPortTable=rptrRedundPortTable, rptrPktStatsCRC=rptrPktStatsCRC, rptrPortMgmtName=rptrPortMgmtName, rptrRedundCrctAddAddr=rptrRedundCrctAddAddr, rptrPortGroup=rptrPortGroup, rptrProtocolsCtron=rptrProtocolsCtron, rptrRedundancy=rptrRedundancy, rptrPortAlarmPortGrpId=rptrPortAlarmPortGrpId, rptrPortGrpMgmtName=rptrPortGrpMgmtName, rptrSrcAddrListTable=rptrSrcAddrListTable, rptrPortGrpFrameSz64To127=rptrPortGrpFrameSz64To127, rptrPortProtocolAppletalk=rptrPortProtocolAppletalk, rptrMgmtName=rptrMgmtName, rptrPortAlarmTrafPortDisable=rptrPortAlarmTrafPortDisable, rptrPortGrpFrameSzTbl=rptrPortGrpFrameSzTbl, rptrAlarmsTrafThreshold=rptrAlarmsTrafThreshold, rptrPortFrameSzRunt=rptrPortFrameSzRunt, rptrPortRedundStatus=rptrPortRedundStatus, rptrRedundPortId=rptrRedundPortId, rptrProtocolsIP=rptrProtocolsIP, rptrPortAlarmErrPortDisable=rptrPortAlarmErrPortDisable, mibs=mibs, rptrPortGrpMgmtPortCount=rptrPortGrpMgmtPortCount, rptrPortSrcAddrListEntry=rptrPortSrcAddrListEntry, rptrProtocols=rptrProtocols, rptrRedundMaxCrcts=rptrRedundMaxCrcts, rptrPortGrpMgmtTable=rptrPortGrpMgmtTable, rptrMgmtPortsOper=rptrMgmtPortsOper, rptrSrcAddrMgmtActiveUsers=rptrSrcAddrMgmtActiveUsers, rptrSourceAddress=rptrSourceAddress, rptrRedundCrctRetrys=rptrRedundCrctRetrys, rptrPortRedundTable=rptrPortRedundTable, rptrAlarmsErrSource=rptrAlarmsErrSource, rptrPortGrpProtocolAppletalk=rptrPortGrpProtocolAppletalk, rptrPortPktStatsPackets=rptrPortPktStatsPackets, rptrPortGrpAlarmCollThreshold=rptrPortGrpAlarmCollThreshold, rptrPortGrpPktStatsBytes=rptrPortGrpPktStatsBytes, rptr=rptr, rptrSrcAddrListId=rptrSrcAddrListId, rptrPortFrameSz512To1023=rptrPortFrameSz512To1023, rptrPortGrpPktStatsId=rptrPortGrpPktStatsId, rptrPortHardwarePortGrpId=rptrPortHardwarePortGrpId, rptrPortGrpProtocolXNS=rptrPortGrpProtocolXNS, rptrRedundPortNum=rptrRedundPortNum, rptrAlarmsErrEnable=rptrAlarmsErrEnable, rptrPortHardwareLinkStatus=rptrPortHardwareLinkStatus, rptrPktStatsBytes=rptrPktStatsBytes, repeaterRev4=repeaterRev4, rptrPortGrpAlarmCollEnable=rptrPortGrpAlarmCollEnable, rptrPortProtocolNovell=rptrPortProtocolNovell, cabletron=cabletron, rptrStats=rptrStats, rptrPktStatsOOW=rptrPktStatsOOW, rptrAlarmsCollThreshold=rptrAlarmsCollThreshold, rptrPortGrpPktStatsErrors=rptrPortGrpPktStatsErrors, rptrPortMgmtAdminState=rptrPortMgmtAdminState, rptrRedundTestTOD=rptrRedundTestTOD, rptrRedundAddrId=rptrRedundAddrId, rptrMgmtBoardMap=rptrMgmtBoardMap, rptrPortGrpProtocolIP=rptrPortGrpProtocolIP, rptrPortProtocolDECNet=rptrPortProtocolDECNet, rptrPortGrpProtocolOSI=rptrPortGrpProtocolOSI, rptrRedundCrctDelAddr=rptrRedundCrctDelAddr, rptrPortMgmtEntry=rptrPortMgmtEntry, rptrPortGrpProtocolBanyan=rptrPortGrpProtocolBanyan, rptrPortPktStatsPortId=rptrPortPktStatsPortId, rptrPortGrpPktStatsColls=rptrPortGrpPktStatsColls, rptrPortGrpAlarmErrSource=rptrPortGrpAlarmErrSource, rptrRedundCrctName=rptrRedundCrctName, rptrPortGrpMgmtPortsEnable=rptrPortGrpMgmtPortsEnable, rptrPortFrameSz64To127=rptrPortFrameSz64To127, rptrAlarmsCollEnable=rptrAlarmsCollEnable, rptrFrameSz64To127=rptrFrameSz64To127, rptrProtocolsAppletalk=rptrProtocolsAppletalk, rptrPortHardwareTable=rptrPortHardwareTable)
