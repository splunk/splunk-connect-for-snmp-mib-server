#
# PySNMP MIB module JUNIPER-PAE-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-PAE-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:49:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
jnxExPaeExtension, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExPaeExtension")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, NotificationType, iso, Unsigned32, Gauge32, Counter64, ModuleIdentity, TimeTicks, ObjectIdentity, MibIdentifier, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "NotificationType", "iso", "Unsigned32", "Gauge32", "Counter64", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32")
TextualConvention, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "MacAddress")
jnxPaeExtensionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1))
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setLastUpdated('200706071000Z')
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setOrganization('Juniper Networks, Inc.')
jnxPaeExtensionMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 0))
jnxPaeExtensionMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1))
jnxAuthProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAuthProfileName.setStatus('current')
jnxPaeAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: jnxPaeAuthConfigTable.setStatus('current')
jnxPaeAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: jnxPaeAuthConfigEntry.setStatus('current')
jnxPaeAuthConfigMacAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacAuthStatus.setStatus('current')
jnxPaeAuthConfigGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigGuestVlan.setStatus('current')
jnxPaeAuthConfigNumberRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigNumberRetries.setStatus('current')
jnxPaeAuthConfigSupplicantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single", 1), ("single-secure", 2), ("multiple", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigSupplicantMode.setStatus('current')
jnxPaeAuthConfigMacRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacRadius.setStatus('current')
jnxPaeAuthConfigMacRadiusRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacRadiusRestrict.setStatus('current')
jnxPaeAuthConfigReAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigReAuthenticate.setStatus('current')
jnxPaeAuthConfigQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigQuietPeriod.setStatus('current')
jnxPaeAuthConfigMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMaxRequests.setStatus('current')
jnxPaeAuthConfigClientsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigClientsRejected.setStatus('current')
jnxPaeAuthConfigServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigServerTimeout.setStatus('current')
jnxPaeAuthConfigSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigSuppTimeout.setStatus('current')
jnxPaeAuthConfigTransmitPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigTransmitPeriod.setStatus('current')
jnxStaticMacAuthBypassTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: jnxStaticMacAuthBypassTable.setStatus('current')
jnxStaticMacAuthBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacAddress"))
if mibBuilder.loadTexts: jnxStaticMacAuthBypassEntry.setStatus('current')
jnxStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: jnxStaticMacAddress.setStatus('current')
jnxStaticMacVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStaticMacVlanName.setStatus('current')
jnxStaticMacAuthBypassIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: jnxStaticMacAuthBypassIfTable.setStatus('current')
jnxStaticMacAuthBypassIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacAddress"), (0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacIfIndex"))
if mibBuilder.loadTexts: jnxStaticMacAuthBypassIfEntry.setStatus('current')
jnxStaticMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStaticMacIfIndex.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-PAE-EXTENSION-MIB", jnxStaticMacAuthBypassEntry=jnxStaticMacAuthBypassEntry, jnxPaeAuthConfigEntry=jnxPaeAuthConfigEntry, jnxPaeAuthConfigMacRadiusRestrict=jnxPaeAuthConfigMacRadiusRestrict, jnxStaticMacAddress=jnxStaticMacAddress, jnxPaeExtensionMIB=jnxPaeExtensionMIB, jnxStaticMacIfIndex=jnxStaticMacIfIndex, jnxStaticMacAuthBypassTable=jnxStaticMacAuthBypassTable, jnxPaeAuthConfigSupplicantMode=jnxPaeAuthConfigSupplicantMode, jnxPaeAuthConfigMaxRequests=jnxPaeAuthConfigMaxRequests, jnxPaeAuthConfigReAuthenticate=jnxPaeAuthConfigReAuthenticate, jnxPaeAuthConfigMacRadius=jnxPaeAuthConfigMacRadius, jnxPaeAuthConfigClientsRejected=jnxPaeAuthConfigClientsRejected, jnxPaeAuthConfigSuppTimeout=jnxPaeAuthConfigSuppTimeout, jnxPaeAuthConfigMacAuthStatus=jnxPaeAuthConfigMacAuthStatus, jnxStaticMacAuthBypassIfEntry=jnxStaticMacAuthBypassIfEntry, jnxAuthProfileName=jnxAuthProfileName, jnxPaeAuthConfigQuietPeriod=jnxPaeAuthConfigQuietPeriod, jnxPaeExtensionMIBObjects=jnxPaeExtensionMIBObjects, jnxPaeAuthConfigTable=jnxPaeAuthConfigTable, jnxPaeAuthConfigGuestVlan=jnxPaeAuthConfigGuestVlan, jnxPaeAuthConfigServerTimeout=jnxPaeAuthConfigServerTimeout, jnxStaticMacAuthBypassIfTable=jnxStaticMacAuthBypassIfTable, jnxPaeExtensionMIBNotification=jnxPaeExtensionMIBNotification, jnxStaticMacVlanName=jnxStaticMacVlanName, jnxPaeAuthConfigTransmitPeriod=jnxPaeAuthConfigTransmitPeriod, PYSNMP_MODULE_ID=jnxPaeExtensionMIB, jnxPaeAuthConfigNumberRetries=jnxPaeAuthConfigNumberRetries)
