#
# PySNMP MIB module ISO3201-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISO3201-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, enterprises, IpAddress, Unsigned32, Counter64, Gauge32, Bits, Integer32, ModuleIdentity, iso, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "IpAddress", "Unsigned32", "Counter64", "Gauge32", "Bits", "Integer32", "ModuleIdentity", "iso", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCT3201PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28), )
if mibBuilder.loadTexts: cdx6500PPCT3201PortTable.setStatus('mandatory')
cdx6500PPCT3201PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201PCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCT3201PortEntry.setStatus('mandatory')
iso3201PCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgPortNum.setStatus('mandatory')
iso3201PCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50))).clone(namedValues=NamedValues(("iso3201", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgPortType.setStatus('mandatory')
iso3201PCfgPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 8, 13, 14, 15, 16, 99))).clone(namedValues=NamedValues(("speed300", 3), ("speed1200", 4), ("speed600", 5), ("speed1800", 8), ("speed2400", 13), ("speed4800", 14), ("speed9600", 15), ("speed19200", 16), ("speed7200", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgPortSpeed.setStatus('mandatory')
iso3201PCfgNoOfControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgNoOfControllers.setStatus('mandatory')
iso3201PCfgResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgResponseTimeout.setStatus('mandatory')
iso3201PCfgInterChrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgInterChrTimeout.setStatus('mandatory')
iso3201PCfgNoOfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgNoOfRetries.setStatus('mandatory')
iso3201PCfgNoOfConsecRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgNoOfConsecRetries.setStatus('mandatory')
iso3201PCfgSlowPollWaitCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgSlowPollWaitCycle.setStatus('mandatory')
iso3201PCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgElectricalInterfaceType.setStatus('mandatory')
iso3201PCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgV24ElectricalInterfaceOption.setStatus('mandatory')
iso3201PCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500SPCT3201StnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7), )
if mibBuilder.loadTexts: cdx6500SPCT3201StnTable.setStatus('mandatory')
cdx6500SPCT3201StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SCfgPortNum"), (0, "ISO3201-OPT-MIB", "iso3201SCfgStnNum"))
if mibBuilder.loadTexts: cdx6500SPCT3201StnEntry.setStatus('mandatory')
iso3201SCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgPortNum.setStatus('mandatory')
iso3201SCfgStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgStnNum.setStatus('mandatory')
iso3201SCfgControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgControllerAddress.setStatus('mandatory')
iso3201SCfgAutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgAutocallMnemonic.setStatus('mandatory')
iso3201SCfgAutocallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgAutocallTimeout.setStatus('mandatory')
iso3201SCfgMaxNoAutocallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgMaxNoAutocallAttempts.setStatus('mandatory')
iso3201SCfgX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgX25Address.setStatus('mandatory')
iso3201SCfgBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("billingDisabled", 1), ("billingEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgBillingRecords.setStatus('mandatory')
cdx6500PPST3201PStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29), )
if mibBuilder.loadTexts: cdx6500PPST3201PStatsTable.setStatus('mandatory')
cdx6500PPST3201PStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201PStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPST3201PStatsEntry.setStatus('mandatory')
iso3201PStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortNum.setStatus('mandatory')
iso3201PStatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortStatus.setStatus('mandatory')
iso3201PStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50))).clone(namedValues=NamedValues(("iso3201", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortType.setStatus('mandatory')
iso3201PStatsPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 8, 13, 14, 15, 16, 99))).clone(namedValues=NamedValues(("speed300", 3), ("speed1200", 4), ("speed600", 5), ("speed1800", 8), ("speed2400", 13), ("speed4800", 14), ("speed9600", 15), ("speed19200", 16), ("speed7200", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortSpeed.setStatus('mandatory')
iso3201PStatsPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortUtilIn.setStatus('mandatory')
iso3201PStatsPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortUtilOut.setStatus('mandatory')
iso3201PStatsLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsLineStatus.setStatus('mandatory')
iso3201PStatsTxChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxChrs.setStatus('mandatory')
iso3201PStatsTxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxMsgs.setStatus('mandatory')
iso3201PStatsTxPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxPolls.setStatus('mandatory')
iso3201PStatsTxSelects = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxSelects.setStatus('mandatory')
iso3201PStatsTxACKs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxACKs.setStatus('mandatory')
iso3201PStatsTxNAKs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxNAKs.setStatus('mandatory')
iso3201PStatsTxENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxENQs.setStatus('mandatory')
iso3201PStatsRxChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxChrs.setStatus('mandatory')
iso3201PStatsRxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxMsgs.setStatus('mandatory')
iso3201PStatsRxACKs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxACKs.setStatus('mandatory')
iso3201PStatsRxNAKs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxNAKs.setStatus('mandatory')
iso3201PStatsRxENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxENQs.setStatus('mandatory')
cdx6500SPST3201StnTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6))
cdx6500SPST3201SStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1), )
if mibBuilder.loadTexts: cdx6500SPST3201SStatsTable.setStatus('mandatory')
cdx6500SPST3201StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SStatsPortNum"), (0, "ISO3201-OPT-MIB", "iso3201SStatsStnNum"))
if mibBuilder.loadTexts: cdx6500SPST3201StnEntry.setStatus('mandatory')
iso3201SStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsPortNum.setStatus('mandatory')
iso3201SStatsStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsStnNum.setStatus('mandatory')
iso3201SStatsControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsControllerAddress.setStatus('mandatory')
iso3201SStatsStnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("up", 3), ("suspended", 4), ("blocked", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsStnState.setStatus('mandatory')
iso3201SStatsCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("calling", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsCurrentStatus.setStatus('mandatory')
iso3201SStatsNoOfAutocallAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsNoOfAutocallAttmpts.setStatus('mandatory')
iso3201SStatsNxtAutocallAttmpt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsNxtAutocallAttmpt.setStatus('mandatory')
iso3201SStatsLastClearCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastClearCauseCode.setStatus('mandatory')
iso3201SStatsLastClearDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastClearDiagCode.setStatus('mandatory')
iso3201SStatsLastInCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastInCalledAddress.setStatus('mandatory')
iso3201SStatsLastInCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastInCallingAddress.setStatus('mandatory')
iso3201SStatsLastInCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastInCallFacilities.setStatus('mandatory')
iso3201SStatsLastInCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastInCallCUD.setStatus('mandatory')
iso3201SStatsLastOutCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastOutCalledAddress.setStatus('mandatory')
iso3201SStatsLastOutCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastOutCallingAddress.setStatus('mandatory')
iso3201SStatsLastOutCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastOutCallFacilities.setStatus('mandatory')
iso3201SStatsLastOutCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastOutCallCUD.setStatus('mandatory')
cdx6500SPST3201PktSummTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: cdx6500SPST3201PktSummTable.setStatus('mandatory')
cdx6500SPST3201PktSummEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SStatsPktSummPortNum"), (0, "ISO3201-OPT-MIB", "iso3201SStatsPktSummStnNum"))
if mibBuilder.loadTexts: cdx6500SPST3201PktSummEntry.setStatus('mandatory')
iso3201SStatsPktSummPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsPktSummPortNum.setStatus('mandatory')
iso3201SStatsPktSummStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsPktSummStnNum.setStatus('mandatory')
iso3201SStatsTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxData.setStatus('mandatory')
iso3201SStatsTxCallRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxCallRequest.setStatus('mandatory')
iso3201SStatsTxCallAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxCallAccept.setStatus('mandatory')
iso3201SStatsTxClearRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxClearRequest.setStatus('mandatory')
iso3201SStatsTxClearConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxClearConfirm.setStatus('mandatory')
iso3201SStatsTxResetRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxResetRequest.setStatus('mandatory')
iso3201SStatsTxResetConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxResetConfirm.setStatus('mandatory')
iso3201SStatsTxWindowClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxWindowClosed.setStatus('mandatory')
iso3201SStatsRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxData.setStatus('mandatory')
iso3201SStatsRxCallRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxCallRequest.setStatus('mandatory')
iso3201SStatsRxCallAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxCallAccept.setStatus('mandatory')
iso3201SStatsRxClearRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxClearRequest.setStatus('mandatory')
iso3201SStatsRxClearConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxClearConfirm.setStatus('mandatory')
iso3201SStatsRxResetRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxResetRequest.setStatus('mandatory')
iso3201SStatsRxResetConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxResetConfirm.setStatus('mandatory')
iso3201SStatsRxWindowClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxWindowClosed.setStatus('mandatory')
cdx6500SPST3201SummTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: cdx6500SPST3201SummTable.setStatus('mandatory')
cdx6500SPST3201SummEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SStatsSummPortNum"), (0, "ISO3201-OPT-MIB", "iso3201SStatsSummStnNum"))
if mibBuilder.loadTexts: cdx6500SPST3201SummEntry.setStatus('mandatory')
iso3201SStatsSummPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsSummPortNum.setStatus('mandatory')
iso3201SStatsSummStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsSummStnNum.setStatus('mandatory')
iso3201SStatsTxPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxPolls.setStatus('mandatory')
iso3201SStatsTxSelects = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxSelects.setStatus('mandatory')
iso3201SStatsTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxDataBytes.setStatus('mandatory')
iso3201SStatsTxDataMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxDataMsgs.setStatus('mandatory')
iso3201SStatsTxDataMsgsPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxDataMsgsPerHour.setStatus('mandatory')
iso3201SStatsTxAvgMsgLength = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxAvgMsgLength.setStatus('mandatory')
iso3201SStatsTxMsgsNAKed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxMsgsNAKed.setStatus('mandatory')
iso3201SStatsTxSelectRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxSelectRetryExhausted.setStatus('mandatory')
iso3201SStatsTxNAKRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxNAKRetryExhausted.setStatus('mandatory')
iso3201SStatsTxENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxENQs.setStatus('mandatory')
iso3201SStatsTxENQRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxENQRetryExhausted.setStatus('mandatory')
iso3201SStatsTxPollingSuspendedByHost = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxPollingSuspendedByHost.setStatus('mandatory')
iso3201SStatsRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxDataBytes.setStatus('mandatory')
iso3201SStatsRxDataMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxDataMsgs.setStatus('mandatory')
iso3201SStatsRxDataMsgsPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxDataMsgsPerHour.setStatus('mandatory')
iso3201SStatsRxAvgMsgLength = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxAvgMsgLength.setStatus('mandatory')
iso3201SStatsRxMsgsNAKed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxMsgsNAKed.setStatus('mandatory')
iso3201SStatsRxMsgsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxMsgsAborted.setStatus('mandatory')
iso3201SStatsRxSelectsNAKed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxSelectsNAKed.setStatus('mandatory')
iso3201SStatsRxInvRespToSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxInvRespToSelect.setStatus('mandatory')
iso3201SStatsRxNAKRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxNAKRetryExhausted.setStatus('mandatory')
iso3201SStatsRxENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxENQs.setStatus('mandatory')
iso3201SStatsRxENQRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxENQRetryExhausted.setStatus('mandatory')
iso3201SStatsRxInterChrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxInterChrTimeout.setStatus('mandatory')
iso3201SStatsRxPollTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxPollTimeout.setStatus('mandatory')
iso3201SStatsRxSelectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxSelectTimeout.setStatus('mandatory')
iso3201SStatsRxReceiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxReceiveTimeout.setStatus('mandatory')
iso3201SStatsRxParityErrorsOnCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxParityErrorsOnCntrl.setStatus('mandatory')
cdx6500Cont3201Table = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11))
cdx6500Cont3201PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1), )
if mibBuilder.loadTexts: cdx6500Cont3201PortTable.setStatus('mandatory')
cdx6500Cont3201PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201PContPortNum"))
if mibBuilder.loadTexts: cdx6500Cont3201PortEntry.setStatus('mandatory')
iso3201PContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: iso3201PContPortNum.setStatus('mandatory')
iso3201ContPortBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContPortBoot.setStatus('mandatory')
iso3201ContPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContPortEnable.setStatus('mandatory')
iso3201ContPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContPortDisable.setStatus('mandatory')
iso3201ContPortResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noreset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContPortResetStats.setStatus('mandatory')
cdx6500Cont3201StnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2), )
if mibBuilder.loadTexts: cdx6500Cont3201StnTable.setStatus('mandatory')
cdx6500Cont3201StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SContPortNum"), (0, "ISO3201-OPT-MIB", "iso3201ContStnNum"))
if mibBuilder.loadTexts: cdx6500Cont3201StnEntry.setStatus('mandatory')
iso3201SContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: iso3201SContPortNum.setStatus('mandatory')
iso3201ContStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: iso3201ContStnNum.setStatus('mandatory')
iso3201ContStnBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContStnBoot.setStatus('mandatory')
iso3201ContStnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContStnEnable.setStatus('mandatory')
iso3201ContStnDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContStnDisable.setStatus('mandatory')
iso3201ContStnResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContStnResetStats.setStatus('mandatory')
mibBuilder.exportSymbols("ISO3201-OPT-MIB", iso3201SStatsTxMsgsNAKed=iso3201SStatsTxMsgsNAKed, cdx6500Cont3201PortTable=cdx6500Cont3201PortTable, iso3201PStatsTxNAKs=iso3201PStatsTxNAKs, cdx6500PPST3201PStatsEntry=cdx6500PPST3201PStatsEntry, cdx6500SPST3201SummEntry=cdx6500SPST3201SummEntry, iso3201SStatsRxAvgMsgLength=iso3201SStatsRxAvgMsgLength, iso3201SStatsRxClearRequest=iso3201SStatsRxClearRequest, cdx6500Cont3201PortEntry=cdx6500Cont3201PortEntry, iso3201SStatsRxInterChrTimeout=iso3201SStatsRxInterChrTimeout, iso3201SStatsRxENQRetryExhausted=iso3201SStatsRxENQRetryExhausted, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500SPST3201StnEntry=cdx6500SPST3201StnEntry, iso3201ContStnDisable=iso3201ContStnDisable, cdx6500PPCT3201PortEntry=cdx6500PPCT3201PortEntry, iso3201PCfgPortSpeed=iso3201PCfgPortSpeed, iso3201SStatsTxWindowClosed=iso3201SStatsTxWindowClosed, iso3201PStatsTxMsgs=iso3201PStatsTxMsgs, iso3201PStatsRxACKs=iso3201PStatsRxACKs, cdx6500Controls=cdx6500Controls, iso3201PCfgNoOfRetries=iso3201PCfgNoOfRetries, iso3201SCfgX25Address=iso3201SCfgX25Address, cdx6500PPST3201PStatsTable=cdx6500PPST3201PStatsTable, iso3201PContPortNum=iso3201PContPortNum, iso3201SStatsRxDataMsgs=iso3201SStatsRxDataMsgs, iso3201SStatsTxData=iso3201SStatsTxData, codex=codex, iso3201SCfgAutocallMnemonic=iso3201SCfgAutocallMnemonic, iso3201SStatsRxReceiveTimeout=iso3201SStatsRxReceiveTimeout, iso3201PCfgElectricalInterfaceType=iso3201PCfgElectricalInterfaceType, iso3201SStatsRxInvRespToSelect=iso3201SStatsRxInvRespToSelect, iso3201PCfgHighSpeedElectricalInterfaceOption=iso3201PCfgHighSpeedElectricalInterfaceOption, cdxProductSpecific=cdxProductSpecific, iso3201SStatsTxENQs=iso3201SStatsTxENQs, iso3201PStatsTxSelects=iso3201PStatsTxSelects, iso3201SStatsRxPollTimeout=iso3201SStatsRxPollTimeout, iso3201PCfgInterChrTimeout=iso3201PCfgInterChrTimeout, iso3201PStatsRxNAKs=iso3201PStatsRxNAKs, iso3201PCfgPortType=iso3201PCfgPortType, iso3201ContStnEnable=iso3201ContStnEnable, iso3201SStatsRxResetConfirm=iso3201SStatsRxResetConfirm, cdx6500SPCT3201StnTable=cdx6500SPCT3201StnTable, iso3201SStatsNxtAutocallAttmpt=iso3201SStatsNxtAutocallAttmpt, iso3201SStatsRxNAKRetryExhausted=iso3201SStatsRxNAKRetryExhausted, iso3201PCfgNoOfConsecRetries=iso3201PCfgNoOfConsecRetries, iso3201PCfgNoOfControllers=iso3201PCfgNoOfControllers, iso3201PCfgV24ElectricalInterfaceOption=iso3201PCfgV24ElectricalInterfaceOption, iso3201SStatsRxResetRequest=iso3201SStatsRxResetRequest, iso3201SStatsTxPollingSuspendedByHost=iso3201SStatsTxPollingSuspendedByHost, iso3201PStatsPortUtilIn=iso3201PStatsPortUtilIn, iso3201SStatsRxDataMsgsPerHour=iso3201SStatsRxDataMsgsPerHour, iso3201SStatsTxClearRequest=iso3201SStatsTxClearRequest, iso3201SCfgPortNum=iso3201SCfgPortNum, cdx6500SPCT3201StnEntry=cdx6500SPCT3201StnEntry, iso3201SStatsControllerAddress=iso3201SStatsControllerAddress, iso3201SStatsStnState=iso3201SStatsStnState, cdx6500Statistics=cdx6500Statistics, iso3201SStatsTxAvgMsgLength=iso3201SStatsTxAvgMsgLength, iso3201SStatsLastInCallCUD=iso3201SStatsLastInCallCUD, cdx6500Cont3201StnEntry=cdx6500Cont3201StnEntry, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, iso3201PCfgPortNum=iso3201PCfgPortNum, iso3201PCfgSlowPollWaitCycle=iso3201PCfgSlowPollWaitCycle, iso3201PStatsLineStatus=iso3201PStatsLineStatus, cdx6500PPCT3201PortTable=cdx6500PPCT3201PortTable, iso3201PStatsPortNum=iso3201PStatsPortNum, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, iso3201PStatsRxENQs=iso3201PStatsRxENQs, iso3201SStatsRxClearConfirm=iso3201SStatsRxClearConfirm, iso3201ContPortResetStats=iso3201ContPortResetStats, iso3201ContStnNum=iso3201ContStnNum, iso3201SStatsSummPortNum=iso3201SStatsSummPortNum, iso3201ContStnResetStats=iso3201ContStnResetStats, iso3201SStatsRxSelectsNAKed=iso3201SStatsRxSelectsNAKed, iso3201SStatsLastOutCallingAddress=iso3201SStatsLastOutCallingAddress, iso3201SStatsRxMsgsNAKed=iso3201SStatsRxMsgsNAKed, iso3201PStatsPortSpeed=iso3201PStatsPortSpeed, iso3201SStatsRxWindowClosed=iso3201SStatsRxWindowClosed, iso3201SStatsRxParityErrorsOnCntrl=iso3201SStatsRxParityErrorsOnCntrl, iso3201SStatsLastInCalledAddress=iso3201SStatsLastInCalledAddress, iso3201SStatsCurrentStatus=iso3201SStatsCurrentStatus, iso3201PStatsPortUtilOut=iso3201PStatsPortUtilOut, iso3201PStatsTxPolls=iso3201PStatsTxPolls, iso3201SCfgControllerAddress=iso3201SCfgControllerAddress, iso3201SStatsLastOutCalledAddress=iso3201SStatsLastOutCalledAddress, iso3201SStatsRxDataBytes=iso3201SStatsRxDataBytes, iso3201SStatsPktSummStnNum=iso3201SStatsPktSummStnNum, iso3201SCfgBillingRecords=iso3201SCfgBillingRecords, iso3201SStatsTxSelects=iso3201SStatsTxSelects, iso3201SStatsTxDataMsgs=iso3201SStatsTxDataMsgs, iso3201SStatsTxENQRetryExhausted=iso3201SStatsTxENQRetryExhausted, iso3201PStatsTxENQs=iso3201PStatsTxENQs, iso3201SStatsTxResetRequest=iso3201SStatsTxResetRequest, iso3201ContPortEnable=iso3201ContPortEnable, iso3201SStatsRxENQs=iso3201SStatsRxENQs, cdx6500SPST3201SStatsTable=cdx6500SPST3201SStatsTable, iso3201SStatsTxResetConfirm=iso3201SStatsTxResetConfirm, iso3201SStatsTxCallRequest=iso3201SStatsTxCallRequest, iso3201SStatsLastOutCallCUD=iso3201SStatsLastOutCallCUD, iso3201PStatsRxChrs=iso3201PStatsRxChrs, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, iso3201PStatsTxACKs=iso3201PStatsTxACKs, cdx6500Cont3201StnTable=cdx6500Cont3201StnTable, cdx6500SPST3201SummTable=cdx6500SPST3201SummTable, cdx6500SPST3201StnTable=cdx6500SPST3201StnTable, cdx6500SPST3201PktSummEntry=cdx6500SPST3201PktSummEntry, iso3201SContPortNum=iso3201SContPortNum, iso3201SStatsSummStnNum=iso3201SStatsSummStnNum, iso3201SStatsTxClearConfirm=iso3201SStatsTxClearConfirm, iso3201SStatsPortNum=iso3201SStatsPortNum, iso3201SStatsRxCallAccept=iso3201SStatsRxCallAccept, iso3201PStatsRxMsgs=iso3201PStatsRxMsgs, iso3201PCfgResponseTimeout=iso3201PCfgResponseTimeout, iso3201SStatsLastOutCallFacilities=iso3201SStatsLastOutCallFacilities, iso3201SStatsLastInCallingAddress=iso3201SStatsLastInCallingAddress, iso3201SCfgAutocallTimeout=iso3201SCfgAutocallTimeout, iso3201SCfgMaxNoAutocallAttempts=iso3201SCfgMaxNoAutocallAttempts, cdx6500Configuration=cdx6500Configuration, iso3201SStatsPktSummPortNum=iso3201SStatsPktSummPortNum, iso3201SStatsLastInCallFacilities=iso3201SStatsLastInCallFacilities, iso3201ContPortBoot=iso3201ContPortBoot, iso3201PStatsPortStatus=iso3201PStatsPortStatus, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, iso3201SStatsTxNAKRetryExhausted=iso3201SStatsTxNAKRetryExhausted, iso3201SStatsRxMsgsAborted=iso3201SStatsRxMsgsAborted, iso3201SStatsRxSelectTimeout=iso3201SStatsRxSelectTimeout, iso3201SStatsStnNum=iso3201SStatsStnNum, cdx6500=cdx6500, iso3201SStatsLastClearCauseCode=iso3201SStatsLastClearCauseCode, iso3201SStatsLastClearDiagCode=iso3201SStatsLastClearDiagCode, iso3201SStatsNoOfAutocallAttmpts=iso3201SStatsNoOfAutocallAttmpts, iso3201SStatsRxCallRequest=iso3201SStatsRxCallRequest, iso3201SStatsTxDataMsgsPerHour=iso3201SStatsTxDataMsgsPerHour, iso3201PStatsTxChrs=iso3201PStatsTxChrs, iso3201SStatsRxData=iso3201SStatsRxData, cdx6500SPST3201PktSummTable=cdx6500SPST3201PktSummTable, iso3201SStatsTxDataBytes=iso3201SStatsTxDataBytes, cdx6500Cont3201Table=cdx6500Cont3201Table, iso3201ContPortDisable=iso3201ContPortDisable, iso3201SStatsTxCallAccept=iso3201SStatsTxCallAccept, iso3201SStatsTxSelectRetryExhausted=iso3201SStatsTxSelectRetryExhausted, iso3201PStatsPortType=iso3201PStatsPortType, iso3201SCfgStnNum=iso3201SCfgStnNum, iso3201ContStnBoot=iso3201ContStnBoot, DisplayString=DisplayString, iso3201SStatsTxPolls=iso3201SStatsTxPolls, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup)
