#
# PySNMP MIB module HH3C-HPEOC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-HPEOC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, Counter64, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "Counter64", "Gauge32", "TimeTicks")
TruthValue, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "DisplayString")
hh3cHPEOC = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 84))
if mibBuilder.loadTexts: hh3cHPEOC.setLastUpdated('200708281008Z')
if mibBuilder.loadTexts: hh3cHPEOC.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cHPEOCSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1))
hh3cHPEOCCltVlanType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee8021q", 1), ("portbased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCCltVlanType.setStatus('current')
hh3cHPEOCCltVlanManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 2), )
if mibBuilder.loadTexts: hh3cHPEOCCltVlanManTable.setStatus('current')
hh3cHPEOCCltVlanManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cHPEOCCltVlanManEntry.setStatus('current')
hh3cHPEOCCltEthPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("debug", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCCltEthPortType.setStatus('current')
hh3cHPEOCCltSysManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 3), )
if mibBuilder.loadTexts: hh3cHPEOCCltSysManTable.setStatus('current')
hh3cHPEOCCltSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cHPEOCCltSysManEntry.setStatus('current')
hh3cHPEOCCltDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCCltDescr.setStatus('current')
hh3cHPEOCCltFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCCltFwVersion.setStatus('current')
hh3cHPEOCCnuSysManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 4), )
if mibBuilder.loadTexts: hh3cHPEOCCnuSysManTable.setStatus('current')
hh3cHPEOCCnuSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cHPEOCCnuSysManEntry.setStatus('current')
hh3cHPEOCCnuBcastControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCCnuBcastControl.setStatus('current')
hh3cHPEOCCnuAnonymStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCCnuAnonymStatus.setStatus('current')
hh3cHPEOCCnuMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCCnuMacLimit.setStatus('current')
hh3cHPEOCCltAutoUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCCltAutoUpgrade.setStatus('current')
hh3cHPEOCOnLineCnuNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCOnLineCnuNumber.setStatus('current')
hh3cHPEOCCpuMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCCpuMacAddress.setStatus('current')
hh3cHPEOCOffLineCnuNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCOffLineCnuNumber.setStatus('current')
hh3cHPEOCDownLoadCNUFWResult = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cHPEOCDownLoadCNUFWResult.setStatus('current')
hh3cHPEOCCltAutoUpgradeType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flash", 1), ("ftp", 2), ("tftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCCltAutoUpgradeType.setStatus('current')
hh3cHPEOCAutoUpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 11))
hh3cHPEOCServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCServerAddress.setStatus('current')
hh3cHPEOCServerUser = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCServerUser.setStatus('current')
hh3cHPEOCServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 84, 1, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cHPEOCServerPassword.setStatus('current')
hh3cHPEOCCableInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2))
hh3cHPEOCCableInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1), )
if mibBuilder.loadTexts: hh3cHPEOCCableInfoTable.setStatus('current')
hh3cHPEOCCableInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cHPEOCCableInfoEntry.setStatus('current')
hh3cHPEOCFECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCFECErrors.setStatus('current')
hh3cHPEOCAvgBitsPerCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCAvgBitsPerCarrier.setStatus('current')
hh3cHPEOCAvgSNRPerCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCAvgSNRPerCarrier.setStatus('current')
hh3cHPEOCAvgInPBCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCAvgInPBCRCErrors.setStatus('current')
hh3cHPEOCInTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCInTotalPkts.setStatus('current')
hh3cHPEOCAvgOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCAvgOutPower.setStatus('current')
hh3cHPEOCAvgOutPBCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCAvgOutPBCRCErrors.setStatus('current')
hh3cHPEOCOutTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCOutTotalPkts.setStatus('current')
hh3cHPEOCBitPerSymbolTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 2), )
if mibBuilder.loadTexts: hh3cHPEOCBitPerSymbolTable.setStatus('current')
hh3cHPEOCBitPerSymbolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-HPEOC-MIB", "hh3cHPEOCBitPerSymbolIndex"))
if mibBuilder.loadTexts: hh3cHPEOCBitPerSymbolEntry.setStatus('current')
hh3cHPEOCBitPerSymbolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cHPEOCBitPerSymbolIndex.setStatus('current')
hh3cHPEOCBitPerSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 84, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cHPEOCBitPerSymbol.setStatus('current')
mibBuilder.exportSymbols("HH3C-HPEOC-MIB", hh3cHPEOCCableInfo=hh3cHPEOCCableInfo, hh3cHPEOCAvgOutPower=hh3cHPEOCAvgOutPower, hh3cHPEOCBitPerSymbolTable=hh3cHPEOCBitPerSymbolTable, hh3cHPEOCCableInfoTable=hh3cHPEOCCableInfoTable, hh3cHPEOCFECErrors=hh3cHPEOCFECErrors, hh3cHPEOCAvgBitsPerCarrier=hh3cHPEOCAvgBitsPerCarrier, hh3cHPEOCCltVlanManEntry=hh3cHPEOCCltVlanManEntry, hh3cHPEOCCltFwVersion=hh3cHPEOCCltFwVersion, hh3cHPEOCServerAddress=hh3cHPEOCServerAddress, hh3cHPEOCCltVlanType=hh3cHPEOCCltVlanType, hh3cHPEOCAutoUpObjects=hh3cHPEOCAutoUpObjects, hh3cHPEOCInTotalPkts=hh3cHPEOCInTotalPkts, hh3cHPEOCSystem=hh3cHPEOCSystem, hh3cHPEOCServerUser=hh3cHPEOCServerUser, hh3cHPEOCCnuSysManEntry=hh3cHPEOCCnuSysManEntry, hh3cHPEOCAvgOutPBCRCErrors=hh3cHPEOCAvgOutPBCRCErrors, hh3cHPEOCCltAutoUpgrade=hh3cHPEOCCltAutoUpgrade, hh3cHPEOCAvgInPBCRCErrors=hh3cHPEOCAvgInPBCRCErrors, hh3cHPEOCBitPerSymbol=hh3cHPEOCBitPerSymbol, hh3cHPEOCCnuSysManTable=hh3cHPEOCCnuSysManTable, hh3cHPEOCDownLoadCNUFWResult=hh3cHPEOCDownLoadCNUFWResult, hh3cHPEOCCltAutoUpgradeType=hh3cHPEOCCltAutoUpgradeType, hh3cHPEOCCnuBcastControl=hh3cHPEOCCnuBcastControl, PYSNMP_MODULE_ID=hh3cHPEOC, hh3cHPEOC=hh3cHPEOC, hh3cHPEOCAvgSNRPerCarrier=hh3cHPEOCAvgSNRPerCarrier, hh3cHPEOCCltVlanManTable=hh3cHPEOCCltVlanManTable, hh3cHPEOCCableInfoEntry=hh3cHPEOCCableInfoEntry, hh3cHPEOCBitPerSymbolIndex=hh3cHPEOCBitPerSymbolIndex, hh3cHPEOCCpuMacAddress=hh3cHPEOCCpuMacAddress, hh3cHPEOCCnuAnonymStatus=hh3cHPEOCCnuAnonymStatus, hh3cHPEOCCltEthPortType=hh3cHPEOCCltEthPortType, hh3cHPEOCCnuMacLimit=hh3cHPEOCCnuMacLimit, hh3cHPEOCOnLineCnuNumber=hh3cHPEOCOnLineCnuNumber, hh3cHPEOCOutTotalPkts=hh3cHPEOCOutTotalPkts, hh3cHPEOCOffLineCnuNumber=hh3cHPEOCOffLineCnuNumber, hh3cHPEOCServerPassword=hh3cHPEOCServerPassword, hh3cHPEOCBitPerSymbolEntry=hh3cHPEOCBitPerSymbolEntry, hh3cHPEOCCltSysManEntry=hh3cHPEOCCltSysManEntry, hh3cHPEOCCltDescr=hh3cHPEOCCltDescr, hh3cHPEOCCltSysManTable=hh3cHPEOCCltSysManTable)
