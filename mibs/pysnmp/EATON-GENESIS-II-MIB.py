#
# PySNMP MIB module EATON-GENESIS-II-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EATON-GENESIS-II-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, MibIdentifier, iso, Bits, NotificationType, Counter64, ModuleIdentity, Unsigned32, ObjectIdentity, IpAddress, Gauge32, Integer32, enterprises, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "MibIdentifier", "iso", "Bits", "NotificationType", "Counter64", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "IpAddress", "Gauge32", "Integer32", "enterprises", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eaton = MibIdentifier((1, 3, 6, 1, 4, 1, 17373))
genesis2 = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 3))
productInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 3, 1))
sensorData = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 3, 2))
productTitle = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTitle.setStatus('mandatory')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('mandatory')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('mandatory')
productMAC = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMAC.setStatus('mandatory')
productIP = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIP.setStatus('mandatory')
intDeciAmpsCT1 = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('0.1 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intDeciAmpsCT1.setStatus('mandatory')
intDeciAmpsCT2 = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('0.1 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intDeciAmpsCT2.setStatus('mandatory')
intDeciAmpsCT3 = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('0.1 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intDeciAmpsCT3.setStatus('mandatory')
intDeciAmpsCT4 = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('0.1 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intDeciAmpsCT4.setStatus('mandatory')
intDeciAmpsCT5 = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('0.1 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intDeciAmpsCT5.setStatus('mandatory')
intDeciAmpsCT6 = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('0.1 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intDeciAmpsCT6.setStatus('mandatory')
intDeciAmpsCT7 = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('0.1 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intDeciAmpsCT7.setStatus('mandatory')
intDeciAmpsCT8 = MibScalar((1, 3, 6, 1, 4, 1, 17373, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('0.1 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: intDeciAmpsCT8.setStatus('mandatory')
intDeciAmpsCT1TRAP = NotificationType((1, 3, 6, 1, 4, 1, 17373) + (0,1)).setObjects(("EATON-GENESIS-II-MIB", "intDeciAmpsCT1"))
intDeciAmpsCT2TRAP = NotificationType((1, 3, 6, 1, 4, 1, 17373) + (0,2)).setObjects(("EATON-GENESIS-II-MIB", "intDeciAmpsCT2"))
intDeciAmpsCT3TRAP = NotificationType((1, 3, 6, 1, 4, 1, 17373) + (0,3)).setObjects(("EATON-GENESIS-II-MIB", "intDeciAmpsCT3"))
intDeciAmpsCT4TRAP = NotificationType((1, 3, 6, 1, 4, 1, 17373) + (0,4)).setObjects(("EATON-GENESIS-II-MIB", "intDeciAmpsCT4"))
intDeciAmpsCT5TRAP = NotificationType((1, 3, 6, 1, 4, 1, 17373) + (0,5)).setObjects(("EATON-GENESIS-II-MIB", "intDeciAmpsCT5"))
intDeciAmpsCT6TRAP = NotificationType((1, 3, 6, 1, 4, 1, 17373) + (0,6)).setObjects(("EATON-GENESIS-II-MIB", "intDeciAmpsCT6"))
intDeciAmpsCT7TRAP = NotificationType((1, 3, 6, 1, 4, 1, 17373) + (0,7)).setObjects(("EATON-GENESIS-II-MIB", "intDeciAmpsCT7"))
intDeciAmpsCT8TRAP = NotificationType((1, 3, 6, 1, 4, 1, 17373) + (0,8)).setObjects(("EATON-GENESIS-II-MIB", "intDeciAmpsCT8"))
mibBuilder.exportSymbols("EATON-GENESIS-II-MIB", productVersion=productVersion, intDeciAmpsCT8=intDeciAmpsCT8, productIP=productIP, intDeciAmpsCT7=intDeciAmpsCT7, intDeciAmpsCT6=intDeciAmpsCT6, intDeciAmpsCT1=intDeciAmpsCT1, intDeciAmpsCT3=intDeciAmpsCT3, intDeciAmpsCT1TRAP=intDeciAmpsCT1TRAP, intDeciAmpsCT3TRAP=intDeciAmpsCT3TRAP, productTitle=productTitle, genesis2=genesis2, productMAC=productMAC, eaton=eaton, productName=productName, intDeciAmpsCT4TRAP=intDeciAmpsCT4TRAP, intDeciAmpsCT5=intDeciAmpsCT5, sensorData=sensorData, intDeciAmpsCT8TRAP=intDeciAmpsCT8TRAP, intDeciAmpsCT5TRAP=intDeciAmpsCT5TRAP, intDeciAmpsCT4=intDeciAmpsCT4, productInfo=productInfo, intDeciAmpsCT2TRAP=intDeciAmpsCT2TRAP, intDeciAmpsCT2=intDeciAmpsCT2, intDeciAmpsCT7TRAP=intDeciAmpsCT7TRAP, intDeciAmpsCT6TRAP=intDeciAmpsCT6TRAP)
