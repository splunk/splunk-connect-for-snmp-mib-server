#
# PySNMP MIB module A3COM-HUAWEI-DOT3-EFM-EPON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-DOT3-EFM-EPON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:49:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cEpon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cEpon")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, Gauge32, mib_2, NotificationType, MibIdentifier, ModuleIdentity, Unsigned32, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Gauge32", "mib-2", "NotificationType", "MibIdentifier", "ModuleIdentity", "Unsigned32", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "IpAddress", "ObjectIdentity")
MacAddress, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "DisplayString")
h3cDot3EfmeponMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2))
h3cDot3EfmeponMIB.setRevisions(('2004-09-21 00:00',))
if mibBuilder.loadTexts: h3cDot3EfmeponMIB.setLastUpdated('200409210000Z')
if mibBuilder.loadTexts: h3cDot3EfmeponMIB.setOrganization('IETF Ethernet Interfaces and Hub MIB Working Group')
h3cDot3MpcpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1))
h3cDot3MpcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1))
h3cDot3MpcpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 2))
h3cDot3MpcpTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1), )
if mibBuilder.loadTexts: h3cDot3MpcpTable.setStatus('current')
h3cDot3MpcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDot3MpcpEntry.setStatus('current')
h3cDot3MpcpID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpID.setStatus('current')
h3cDot3MpcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpOperStatus.setStatus('current')
h3cDot3MpcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("olt", 1), ("onu", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot3MpcpMode.setStatus('current')
h3cDot3MpcpLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpLinkID.setStatus('current')
h3cDot3MpcpRemoteMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRemoteMACAddress.setStatus('current')
h3cDot3MpcpRegistrationState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unregistered", 1), ("registering", 2), ("registered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRegistrationState.setStatus('current')
h3cDot3MpcpTransmitElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 7), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpTransmitElapsed.setStatus('current')
h3cDot3MpcpReceiveElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 8), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpReceiveElapsed.setStatus('current')
h3cDot3MpcpRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 9), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRoundTripTime.setStatus('current')
h3cDot3MpcpMaximumPendingGrants = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpMaximumPendingGrants.setStatus('current')
h3cDot3MpcpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot3MpcpAdminState.setStatus('current')
h3cDot3MpcpOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 12), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpOnTime.setStatus('current')
h3cDot3MpcpOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 13), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpOffTime.setStatus('current')
h3cDot3MpcpSyncTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 1, 1, 14), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpSyncTime.setStatus('current')
h3cDot3MpcpStatTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2), )
if mibBuilder.loadTexts: h3cDot3MpcpStatTable.setStatus('current')
h3cDot3MpcpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDot3MpcpStatEntry.setStatus('current')
h3cDot3MpcpMACCtrlFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpMACCtrlFramesTransmitted.setStatus('current')
h3cDot3MpcpMACCtrlFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpMACCtrlFramesReceived.setStatus('current')
h3cDot3MpcpDiscoveryWindowsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpDiscoveryWindowsSent.setStatus('current')
h3cDot3MpcpDiscoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpDiscoveryTimeout.setStatus('current')
h3cDot3MpcpTxRegRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpTxRegRequest.setStatus('current')
h3cDot3MpcpRxRegRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRxRegRequest.setStatus('current')
h3cDot3MpcpTxRegAck = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpTxRegAck.setStatus('current')
h3cDot3MpcpRxRegAck = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRxRegAck.setStatus('current')
h3cDot3MpcpTxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpTxReport.setStatus('current')
h3cDot3MpcpRxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRxReport.setStatus('current')
h3cDot3MpcpTxGate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpTxGate.setStatus('current')
h3cDot3MpcpRxGate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRxGate.setStatus('current')
h3cDot3MpcpTxRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpTxRegister.setStatus('current')
h3cDot3MpcpRxRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 14), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRxRegister.setStatus('current')
h3cDot3MpcpRxNotSupportedMPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 1, 2, 1, 15), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3MpcpRxNotSupportedMPCP.setStatus('current')
h3cDot3MpcpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 2, 1))
h3cDot3MpcpGroupBase = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 2, 1, 1)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpOperStatus"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpMode"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpLinkID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRemoteMACAddress"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRegistrationState"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpMaximumPendingGrants"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3MpcpGroupBase = h3cDot3MpcpGroupBase.setStatus('current')
h3cDot3MpcpGroupParam = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 2, 1, 2)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpTransmitElapsed"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpReceiveElapsed"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRoundTripTime"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpOnTime"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpOffTime"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpSyncTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3MpcpGroupParam = h3cDot3MpcpGroupParam.setStatus('current')
h3cDot3MpcpGroupStat = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 2, 1, 3)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpMACCtrlFramesTransmitted"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpMACCtrlFramesReceived"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpDiscoveryWindowsSent"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpDiscoveryTimeout"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpTxRegRequest"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRxRegRequest"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpTxRegAck"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRxRegAck"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpTxReport"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRxReport"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpTxGate"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRxGate"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpTxRegister"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRxRegister"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpRxNotSupportedMPCP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3MpcpGroupStat = h3cDot3MpcpGroupStat.setStatus('current')
h3cDot3MpcpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 2, 2))
h3cDot3MpcpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 1, 2, 2, 1)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpGroupBase"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpGroupParam"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3MpcpGroupStat"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3MpcpCompliance = h3cDot3MpcpCompliance.setStatus('current')
h3cDot3OmpEmulationMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2))
h3cDot3OmpEmulationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1))
h3cDot3OmpeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 2))
h3cDot3OmpEmulationTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 1), )
if mibBuilder.loadTexts: h3cDot3OmpEmulationTable.setStatus('current')
h3cDot3OmpEmulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDot3OmpEmulationEntry.setStatus('current')
h3cDot3OmpEmulationID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationID.setStatus('current')
h3cDot3OmpEmulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("olt", 2), ("onu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationType.setStatus('current')
h3cDot3OmpEmulationStatTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2), )
if mibBuilder.loadTexts: h3cDot3OmpEmulationStatTable.setStatus('current')
h3cDot3OmpEmulationStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDot3OmpEmulationStatEntry.setStatus('current')
h3cDot3OmpEmulationSLDErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationSLDErrors.setStatus('current')
h3cDot3OmpEmulationCRC8Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationCRC8Errors.setStatus('current')
h3cDot3OmpEmulationBadLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationBadLLID.setStatus('current')
h3cDot3OmpEmulationGoodLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationGoodLLID.setStatus('current')
h3cDot3OmpEmulationOnuPonCastLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationOnuPonCastLLID.setStatus('current')
h3cDot3OmpEmulationOltPonCastLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationOltPonCastLLID.setStatus('current')
h3cDot3OmpEmulationBroadcastLLIDNotOnuID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationBroadcastLLIDNotOnuID.setStatus('current')
h3cDot3OmpEmulationOnuLLIDNotBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationOnuLLIDNotBroadcast.setStatus('current')
h3cDot3OmpEmulationBroadcastLLIDPlusOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationBroadcastLLIDPlusOnuId.setStatus('current')
h3cDot3OmpEmulationNotBroadcastLLIDNotOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 1, 2, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3OmpEmulationNotBroadcastLLIDNotOnuId.setStatus('current')
h3cDot3OmpeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 2, 1))
h3cDot3OmpeGroupID = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 2, 1, 1)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3OmpeGroupID = h3cDot3OmpeGroupID.setStatus('current')
h3cDot3OmpeGroupStat = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 2, 1, 2)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationSLDErrors"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationCRC8Errors"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationBadLLID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationGoodLLID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationOnuPonCastLLID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationOltPonCastLLID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationBroadcastLLIDNotOnuID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationOnuLLIDNotBroadcast"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationBroadcastLLIDPlusOnuId"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpEmulationNotBroadcastLLIDNotOnuId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3OmpeGroupStat = h3cDot3OmpeGroupStat.setStatus('current')
h3cDot3OmpeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 2, 2))
h3cDot3OmpeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 2, 2, 2, 1)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpeGroupID"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3OmpeGroupStat"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3OmpeCompliance = h3cDot3OmpeCompliance.setStatus('current')
h3cDot3EponMauMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3))
h3cDot3EponMauObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1))
h3cDot3EponMauConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 2))
h3cDot3EponMauTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1, 1), )
if mibBuilder.loadTexts: h3cDot3EponMauTable.setStatus('current')
h3cDot3EponMauEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDot3EponMauEntry.setStatus('current')
h3cDot3EponMauPCSCodingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1, 1, 1, 1), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3EponMauPCSCodingViolation.setStatus('current')
h3cDot3EponMauFecAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("nonsupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3EponMauFecAbility.setStatus('current')
h3cDot3EponMauFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot3EponMauFecMode.setStatus('current')
h3cDot3EponMauFECCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3EponMauFECCorrectedBlocks.setStatus('current')
h3cDot3EponMauFECUncorrectableBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3EponMauFECUncorrectableBlocks.setStatus('current')
h3cDot3EponMauBufferHeadCodingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 1, 1, 1, 6), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot3EponMauBufferHeadCodingViolation.setStatus('current')
h3cDot3EponMauType = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3))
h3cEponMauType1000BasePXOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 1))
if mibBuilder.loadTexts: h3cEponMauType1000BasePXOLT.setStatus('current')
h3cEponMauType1000BasePXONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 2))
if mibBuilder.loadTexts: h3cEponMauType1000BasePXONU.setStatus('current')
h3cEponMauType1000BasePX10DOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 3))
if mibBuilder.loadTexts: h3cEponMauType1000BasePX10DOLT.setStatus('current')
h3cEponMauType1000BasePX10DONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 4))
if mibBuilder.loadTexts: h3cEponMauType1000BasePX10DONU.setStatus('current')
h3cEponMauType1000BasePX10UOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 5))
if mibBuilder.loadTexts: h3cEponMauType1000BasePX10UOLT.setStatus('current')
h3cEponMauType1000BasePX10UONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 6))
if mibBuilder.loadTexts: h3cEponMauType1000BasePX10UONU.setStatus('current')
h3cEponMauType1000BasePX20DOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 7))
if mibBuilder.loadTexts: h3cEponMauType1000BasePX20DOLT.setStatus('current')
h3cEponMauType1000BasePX20DONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 8))
if mibBuilder.loadTexts: h3cEponMauType1000BasePX20DONU.setStatus('current')
h3cEponMauType1000BasePX20UOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 9))
if mibBuilder.loadTexts: h3cEponMauType1000BasePX20UOLT.setStatus('current')
h3cEponMauType1000BasePX20UONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 3, 10))
if mibBuilder.loadTexts: h3cEponMauType1000BasePX20UONU.setStatus('current')
h3cDot3EponMauGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 2, 1))
h3cDot3EponMauGroupAll = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 2, 1, 1)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3EponMauPCSCodingViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3EponMauGroupAll = h3cDot3EponMauGroupAll.setStatus('current')
h3cDot3EponMauGroupFEC = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 2, 1, 2)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3EponMauFecAbility"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3EponMauFecMode"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3EponMauFECCorrectedBlocks"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3EponMauFECUncorrectableBlocks"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3EponMauBufferHeadCodingViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3EponMauGroupFEC = h3cDot3EponMauGroupFEC.setStatus('current')
h3cDot3EponMauCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 2, 2))
h3cDot3EponMauCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 2, 3, 2, 2, 1)).setObjects(("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3EponMauGroupAll"), ("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", "h3cDot3EponMauGroupFEC"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDot3EponMauCompliance = h3cDot3EponMauCompliance.setStatus('current')
mibBuilder.exportSymbols("A3COM-HUAWEI-DOT3-EFM-EPON-MIB", h3cEponMauType1000BasePX20DOLT=h3cEponMauType1000BasePX20DOLT, h3cDot3MpcpConformance=h3cDot3MpcpConformance, h3cEponMauType1000BasePX10UONU=h3cEponMauType1000BasePX10UONU, h3cDot3MpcpMACCtrlFramesReceived=h3cDot3MpcpMACCtrlFramesReceived, h3cDot3MpcpGroups=h3cDot3MpcpGroups, h3cDot3OmpEmulationSLDErrors=h3cDot3OmpEmulationSLDErrors, h3cDot3EponMauObjects=h3cDot3EponMauObjects, h3cDot3OmpEmulationMIB=h3cDot3OmpEmulationMIB, h3cEponMauType1000BasePXOLT=h3cEponMauType1000BasePXOLT, h3cDot3EponMauBufferHeadCodingViolation=h3cDot3EponMauBufferHeadCodingViolation, h3cDot3MpcpGroupStat=h3cDot3MpcpGroupStat, h3cDot3EponMauFECCorrectedBlocks=h3cDot3EponMauFECCorrectedBlocks, h3cDot3MpcpMaximumPendingGrants=h3cDot3MpcpMaximumPendingGrants, h3cEponMauType1000BasePX20DONU=h3cEponMauType1000BasePX20DONU, h3cDot3MpcpID=h3cDot3MpcpID, h3cDot3MpcpTxReport=h3cDot3MpcpTxReport, h3cDot3MpcpDiscoveryTimeout=h3cDot3MpcpDiscoveryTimeout, h3cEponMauType1000BasePX10UOLT=h3cEponMauType1000BasePX10UOLT, h3cDot3OmpeGroups=h3cDot3OmpeGroups, h3cDot3MpcpCompliances=h3cDot3MpcpCompliances, h3cDot3OmpEmulationOnuPonCastLLID=h3cDot3OmpEmulationOnuPonCastLLID, h3cDot3OmpeGroupStat=h3cDot3OmpeGroupStat, h3cDot3MpcpSyncTime=h3cDot3MpcpSyncTime, h3cDot3OmpEmulationNotBroadcastLLIDNotOnuId=h3cDot3OmpEmulationNotBroadcastLLIDNotOnuId, h3cDot3MpcpGroupBase=h3cDot3MpcpGroupBase, h3cDot3OmpEmulationStatEntry=h3cDot3OmpEmulationStatEntry, h3cDot3EponMauTable=h3cDot3EponMauTable, h3cDot3MpcpAdminState=h3cDot3MpcpAdminState, h3cDot3MpcpRoundTripTime=h3cDot3MpcpRoundTripTime, h3cDot3OmpEmulationID=h3cDot3OmpEmulationID, h3cDot3MpcpRxReport=h3cDot3MpcpRxReport, h3cDot3OmpEmulationBadLLID=h3cDot3OmpEmulationBadLLID, h3cDot3OmpEmulationEntry=h3cDot3OmpEmulationEntry, h3cDot3OmpEmulationType=h3cDot3OmpEmulationType, h3cDot3MpcpTxRegAck=h3cDot3MpcpTxRegAck, h3cDot3OmpeConformance=h3cDot3OmpeConformance, h3cEponMauType1000BasePXONU=h3cEponMauType1000BasePXONU, h3cDot3MpcpCompliance=h3cDot3MpcpCompliance, h3cDot3MpcpMIB=h3cDot3MpcpMIB, h3cDot3OmpEmulationOltPonCastLLID=h3cDot3OmpEmulationOltPonCastLLID, h3cDot3MpcpRegistrationState=h3cDot3MpcpRegistrationState, h3cDot3MpcpRemoteMACAddress=h3cDot3MpcpRemoteMACAddress, h3cEponMauType1000BasePX20UOLT=h3cEponMauType1000BasePX20UOLT, h3cDot3MpcpRxNotSupportedMPCP=h3cDot3MpcpRxNotSupportedMPCP, h3cDot3OmpEmulationBroadcastLLIDPlusOnuId=h3cDot3OmpEmulationBroadcastLLIDPlusOnuId, h3cDot3EponMauMIB=h3cDot3EponMauMIB, h3cDot3EponMauGroupFEC=h3cDot3EponMauGroupFEC, h3cDot3MpcpDiscoveryWindowsSent=h3cDot3MpcpDiscoveryWindowsSent, h3cDot3EponMauGroupAll=h3cDot3EponMauGroupAll, h3cDot3MpcpStatEntry=h3cDot3MpcpStatEntry, h3cDot3MpcpOffTime=h3cDot3MpcpOffTime, h3cDot3MpcpGroupParam=h3cDot3MpcpGroupParam, h3cDot3OmpEmulationCRC8Errors=h3cDot3OmpEmulationCRC8Errors, h3cDot3MpcpTxRegRequest=h3cDot3MpcpTxRegRequest, h3cDot3OmpEmulationStatTable=h3cDot3OmpEmulationStatTable, h3cDot3EfmeponMIB=h3cDot3EfmeponMIB, h3cDot3OmpEmulationGoodLLID=h3cDot3OmpEmulationGoodLLID, h3cDot3MpcpMACCtrlFramesTransmitted=h3cDot3MpcpMACCtrlFramesTransmitted, h3cDot3MpcpRxGate=h3cDot3MpcpRxGate, h3cDot3EponMauConformance=h3cDot3EponMauConformance, h3cDot3MpcpReceiveElapsed=h3cDot3MpcpReceiveElapsed, h3cDot3EponMauType=h3cDot3EponMauType, h3cDot3MpcpTxGate=h3cDot3MpcpTxGate, h3cDot3MpcpEntry=h3cDot3MpcpEntry, h3cEponMauType1000BasePX10DONU=h3cEponMauType1000BasePX10DONU, h3cDot3OmpEmulationObjects=h3cDot3OmpEmulationObjects, h3cDot3MpcpRxRegAck=h3cDot3MpcpRxRegAck, h3cEponMauType1000BasePX10DOLT=h3cEponMauType1000BasePX10DOLT, h3cDot3MpcpStatTable=h3cDot3MpcpStatTable, h3cDot3MpcpTxRegister=h3cDot3MpcpTxRegister, h3cDot3EponMauFecAbility=h3cDot3EponMauFecAbility, h3cDot3OmpeCompliances=h3cDot3OmpeCompliances, h3cDot3MpcpOperStatus=h3cDot3MpcpOperStatus, h3cDot3MpcpLinkID=h3cDot3MpcpLinkID, h3cDot3EponMauPCSCodingViolation=h3cDot3EponMauPCSCodingViolation, h3cDot3OmpEmulationOnuLLIDNotBroadcast=h3cDot3OmpEmulationOnuLLIDNotBroadcast, h3cDot3MpcpRxRegRequest=h3cDot3MpcpRxRegRequest, h3cDot3EponMauCompliance=h3cDot3EponMauCompliance, h3cDot3OmpeGroupID=h3cDot3OmpeGroupID, h3cEponMauType1000BasePX20UONU=h3cEponMauType1000BasePX20UONU, h3cDot3EponMauCompliances=h3cDot3EponMauCompliances, h3cDot3EponMauFecMode=h3cDot3EponMauFecMode, PYSNMP_MODULE_ID=h3cDot3EfmeponMIB, h3cDot3EponMauGroups=h3cDot3EponMauGroups, h3cDot3MpcpMode=h3cDot3MpcpMode, h3cDot3OmpeCompliance=h3cDot3OmpeCompliance, h3cDot3MpcpObjects=h3cDot3MpcpObjects, h3cDot3MpcpRxRegister=h3cDot3MpcpRxRegister, h3cDot3EponMauEntry=h3cDot3EponMauEntry, h3cDot3MpcpTransmitElapsed=h3cDot3MpcpTransmitElapsed, h3cDot3MpcpTable=h3cDot3MpcpTable, h3cDot3MpcpOnTime=h3cDot3MpcpOnTime, h3cDot3OmpEmulationTable=h3cDot3OmpEmulationTable, h3cDot3OmpEmulationBroadcastLLIDNotOnuID=h3cDot3OmpEmulationBroadcastLLIDNotOnuID, h3cDot3EponMauFECUncorrectableBlocks=h3cDot3EponMauFECUncorrectableBlocks)
