#
# PySNMP MIB module PDN-MPE-DOMAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-MPE-DOMAIN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:30:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
mpe_domain, = mibBuilder.importSymbols("PDN-HEADER-MIB", "mpe-domain")
VnidTaggingState, VnidRange, SwitchState, ClientState = mibBuilder.importSymbols("PDN-TC", "VnidTaggingState", "VnidRange", "SwitchState", "ClientState")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, ModuleIdentity, NotificationType, iso, Unsigned32, NotificationType, Counter32, Gauge32, ObjectIdentity, TimeTicks, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "ModuleIdentity", "NotificationType", "iso", "Unsigned32", "NotificationType", "Counter32", "Gauge32", "ObjectIdentity", "TimeTicks", "IpAddress", "Integer32")
TextualConvention, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "RowStatus")
mpePdnDomainMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1))
mpePdnDomainMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 2))
mpePdnCardGeneralParams = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 1))
mpePdnCardConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2))
mpePdnCardGeneralParamsTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 1, 1), )
if mibBuilder.loadTexts: mpePdnCardGeneralParamsTable.setStatus('mandatory')
mpePdnCardGeneralParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: mpePdnCardGeneralParamsEntry.setStatus('mandatory')
mpePdnCardGeneralParamsVNIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 1, 1, 1, 1), VnidTaggingState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpePdnCardGeneralParamsVNIDMode.setStatus('mandatory')
mpePdnCardGeneralParamsAdditionalClientsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpePdnCardGeneralParamsAdditionalClientsAvailable.setStatus('mandatory')
mpePdnCardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1), )
if mibBuilder.loadTexts: mpePdnCardConfigTable.setStatus('mandatory')
mpePdnCardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "PDN-MPE-DOMAIN-MIB", "mpePdnCardConfigVnidId"))
if mibBuilder.loadTexts: mpePdnCardConfigEntry.setStatus('mandatory')
mpePdnCardConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1, 1, 1), VnidRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpePdnCardConfigVnidId.setStatus('mandatory')
mpePdnCardConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpePdnCardConfigDomainName.setStatus('mandatory')
mpePdnCardConfigMuxFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1, 1, 3), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpePdnCardConfigMuxFwd.setStatus('mandatory')
mpePdnCardConfigIPFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1, 1, 4), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpePdnCardConfigIPFiltering.setStatus('mandatory')
mpePdnCardConfigIPScoping = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1, 1, 5), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpePdnCardConfigIPScoping.setStatus('mandatory')
mpePdnCardConfigVnidAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1, 1, 6), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpePdnCardConfigVnidAuth.setStatus('mandatory')
mpePdnCardConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 22, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpePdnCardConfigRowStatus.setStatus('mandatory')
mibBuilder.exportSymbols("PDN-MPE-DOMAIN-MIB", mpePdnDomainMIBTraps=mpePdnDomainMIBTraps, mpePdnCardConfigEntry=mpePdnCardConfigEntry, mpePdnCardConfigDomainName=mpePdnCardConfigDomainName, mpePdnDomainMIBObjects=mpePdnDomainMIBObjects, mpePdnCardConfigVnidAuth=mpePdnCardConfigVnidAuth, mpePdnCardGeneralParams=mpePdnCardGeneralParams, mpePdnCardConfig=mpePdnCardConfig, mpePdnCardConfigRowStatus=mpePdnCardConfigRowStatus, mpePdnCardGeneralParamsAdditionalClientsAvailable=mpePdnCardGeneralParamsAdditionalClientsAvailable, mpePdnCardConfigTable=mpePdnCardConfigTable, mpePdnCardGeneralParamsTable=mpePdnCardGeneralParamsTable, mpePdnCardConfigMuxFwd=mpePdnCardConfigMuxFwd, mpePdnCardConfigVnidId=mpePdnCardConfigVnidId, mpePdnCardGeneralParamsEntry=mpePdnCardGeneralParamsEntry, mpePdnCardConfigIPFiltering=mpePdnCardConfigIPFiltering, mpePdnCardConfigIPScoping=mpePdnCardConfigIPScoping, mpePdnCardGeneralParamsVNIDMode=mpePdnCardGeneralParamsVNIDMode)
