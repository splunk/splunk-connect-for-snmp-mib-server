#
# PySNMP MIB module Nortel-Magellan-Passport-X25TraceRcvrMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-X25TraceRcvrMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
DisplayString, Integer32, StorageType, Unsigned32, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "Integer32", "StorageType", "Unsigned32", "RowStatus")
Hex, EnterpriseDateAndTime, HexString, DigitString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Hex", "EnterpriseDateAndTime", "HexString", "DigitString", "NonReplicated")
traceIndex, traceRcvrIndex, traceSession, traceSessionIndex, traceRcvr = mibBuilder.importSymbols("Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex", "traceRcvrIndex", "traceSession", "traceSessionIndex", "traceRcvr")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, ModuleIdentity, Bits, MibIdentifier, Unsigned32, NotificationType, TimeTicks, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "ModuleIdentity", "Bits", "MibIdentifier", "Unsigned32", "NotificationType", "TimeTicks", "ObjectIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
x25TraceRcvrMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62))
traceRcvrX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2))
traceRcvrX25RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 1), )
if mibBuilder.loadTexts: traceRcvrX25RowStatusTable.setStatus('mandatory')
traceRcvrX25RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"))
if mibBuilder.loadTexts: traceRcvrX25RowStatusEntry.setStatus('mandatory')
traceRcvrX25RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25RowStatus.setStatus('mandatory')
traceRcvrX25ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25ComponentName.setStatus('mandatory')
traceRcvrX25StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25StorageType.setStatus('mandatory')
traceRcvrX25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: traceRcvrX25Index.setStatus('mandatory')
traceRcvrX25Dna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2))
traceRcvrX25DnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 1), )
if mibBuilder.loadTexts: traceRcvrX25DnaRowStatusTable.setStatus('mandatory')
traceRcvrX25DnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: traceRcvrX25DnaRowStatusEntry.setStatus('mandatory')
traceRcvrX25DnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaRowStatus.setStatus('mandatory')
traceRcvrX25DnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaComponentName.setStatus('mandatory')
traceRcvrX25DnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaStorageType.setStatus('mandatory')
traceRcvrX25DnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: traceRcvrX25DnaIndex.setStatus('mandatory')
traceRcvrX25DnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 10), )
if mibBuilder.loadTexts: traceRcvrX25DnaAddressTable.setStatus('mandatory')
traceRcvrX25DnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: traceRcvrX25DnaAddressEntry.setStatus('mandatory')
traceRcvrX25DnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaNumberingPlanIndicator.setStatus('mandatory')
traceRcvrX25DnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaDataNetworkAddress.setStatus('mandatory')
traceRcvrX25DnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11), )
if mibBuilder.loadTexts: traceRcvrX25DnaOutgoingOptionsTable.setStatus('mandatory')
traceRcvrX25DnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: traceRcvrX25DnaOutgoingOptionsEntry.setStatus('mandatory')
traceRcvrX25DnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaOutCalls.setStatus('mandatory')
traceRcvrX25DnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaOutDefaultPriority.setStatus('mandatory')
traceRcvrX25DnaOutIntl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaOutIntl.setStatus('mandatory')
traceRcvrX25DnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaOutDefaultPathSensitivity.setStatus('obsolete')
traceRcvrX25DnaOutDefaultPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1))).clone('high')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaOutDefaultPathReliability.setStatus('mandatory')
traceRcvrX25DnaOutPathReliabilityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaOutPathReliabilityOverRide.setStatus('mandatory')
traceRcvrX25DnaOutPathReliabilitySignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaOutPathReliabilitySignal.setStatus('mandatory')
traceRcvrX25DnaOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaOutAccess.setStatus('mandatory')
traceRcvrX25DnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 12), )
if mibBuilder.loadTexts: traceRcvrX25DnaIncomingOptionsTable.setStatus('mandatory')
traceRcvrX25DnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: traceRcvrX25DnaIncomingOptionsEntry.setStatus('mandatory')
traceRcvrX25DnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaIncCalls.setStatus('mandatory')
traceRcvrX25DnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13), )
if mibBuilder.loadTexts: traceRcvrX25DnaCallOptionsTable.setStatus('mandatory')
traceRcvrX25DnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: traceRcvrX25DnaCallOptionsEntry.setStatus('mandatory')
traceRcvrX25DnaPacketSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0100")).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaPacketSizes.setStatus('mandatory')
traceRcvrX25DnaDefaultRecvFrmNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaDefaultRecvFrmNetworkPacketSize.setStatus('mandatory')
traceRcvrX25DnaDefaultSendToNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaDefaultSendToNetworkPacketSize.setStatus('mandatory')
traceRcvrX25DnaDefaultRecvFrmNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaDefaultRecvFrmNetworkThruputClass.setStatus('mandatory')
traceRcvrX25DnaDefaultSendToNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaDefaultSendToNetworkThruputClass.setStatus('mandatory')
traceRcvrX25DnaDefaultRecvFrmNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaDefaultRecvFrmNetworkWindowSize.setStatus('mandatory')
traceRcvrX25DnaDefaultSendToNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaDefaultSendToNetworkWindowSize.setStatus('mandatory')
traceRcvrX25DnaPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("endToEnd", 0), ("local", 1))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaPacketSizeNegotiation.setStatus('mandatory')
traceRcvrX25DnaCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("extended", 1))).clone('basic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaCugFormat.setStatus('mandatory')
traceRcvrX25DnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2))
traceRcvrX25DnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: traceRcvrX25DnaCugRowStatusTable.setStatus('mandatory')
traceRcvrX25DnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaCugIndex"))
if mibBuilder.loadTexts: traceRcvrX25DnaCugRowStatusEntry.setStatus('mandatory')
traceRcvrX25DnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaCugRowStatus.setStatus('mandatory')
traceRcvrX25DnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaCugComponentName.setStatus('mandatory')
traceRcvrX25DnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaCugStorageType.setStatus('mandatory')
traceRcvrX25DnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: traceRcvrX25DnaCugIndex.setStatus('mandatory')
traceRcvrX25DnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10), )
if mibBuilder.loadTexts: traceRcvrX25DnaCugCugOptionsTable.setStatus('mandatory')
traceRcvrX25DnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DnaCugIndex"))
if mibBuilder.loadTexts: traceRcvrX25DnaCugCugOptionsEntry.setStatus('mandatory')
traceRcvrX25DnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaCugType.setStatus('mandatory')
traceRcvrX25DnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaCugDnic.setStatus('mandatory')
traceRcvrX25DnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaCugInterlockCode.setStatus('mandatory')
traceRcvrX25DnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaCugPreferential.setStatus('mandatory')
traceRcvrX25DnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaCugOutCalls.setStatus('mandatory')
traceRcvrX25DnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DnaCugIncCalls.setStatus('mandatory')
traceRcvrX25DnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DnaCugPrivileged.setStatus('mandatory')
traceRcvrX25Dc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3))
traceRcvrX25DcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 1), )
if mibBuilder.loadTexts: traceRcvrX25DcRowStatusTable.setStatus('mandatory')
traceRcvrX25DcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DcIndex"))
if mibBuilder.loadTexts: traceRcvrX25DcRowStatusEntry.setStatus('mandatory')
traceRcvrX25DcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DcRowStatus.setStatus('mandatory')
traceRcvrX25DcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DcComponentName.setStatus('mandatory')
traceRcvrX25DcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DcStorageType.setStatus('mandatory')
traceRcvrX25DcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: traceRcvrX25DcIndex.setStatus('mandatory')
traceRcvrX25DcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 10), )
if mibBuilder.loadTexts: traceRcvrX25DcOptionsTable.setStatus('mandatory')
traceRcvrX25DcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceRcvrX25DcIndex"))
if mibBuilder.loadTexts: traceRcvrX25DcOptionsEntry.setStatus('mandatory')
traceRcvrX25DcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DcRemoteNpi.setStatus('mandatory')
traceRcvrX25DcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DcRemoteDna.setStatus('mandatory')
traceRcvrX25DcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("switched", 0), ("permanentMaster", 1), ("permanentSlave", 2), ("permanentBackupSlave", 3))).clone('switched')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrX25DcType.setStatus('mandatory')
traceRcvrX25DcUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 2, 3, 10, 1, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrX25DcUserData.setStatus('mandatory')
traceSessionX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2))
traceSessionX25RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 1), )
if mibBuilder.loadTexts: traceSessionX25RowStatusTable.setStatus('mandatory')
traceSessionX25RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceSessionIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25Index"))
if mibBuilder.loadTexts: traceSessionX25RowStatusEntry.setStatus('mandatory')
traceSessionX25RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25RowStatus.setStatus('mandatory')
traceSessionX25ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25ComponentName.setStatus('mandatory')
traceSessionX25StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25StorageType.setStatus('mandatory')
traceSessionX25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: traceSessionX25Index.setStatus('mandatory')
traceSessionX25Vc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2))
traceSessionX25VcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 1), )
if mibBuilder.loadTexts: traceSessionX25VcRowStatusTable.setStatus('mandatory')
traceSessionX25VcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceSessionIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25VcIndex"))
if mibBuilder.loadTexts: traceSessionX25VcRowStatusEntry.setStatus('mandatory')
traceSessionX25VcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcRowStatus.setStatus('mandatory')
traceSessionX25VcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcComponentName.setStatus('mandatory')
traceSessionX25VcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcStorageType.setStatus('mandatory')
traceSessionX25VcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: traceSessionX25VcIndex.setStatus('mandatory')
traceSessionX25VcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10), )
if mibBuilder.loadTexts: traceSessionX25VcCadTable.setStatus('mandatory')
traceSessionX25VcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceSessionIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25VcIndex"))
if mibBuilder.loadTexts: traceSessionX25VcCadEntry.setStatus('mandatory')
traceSessionX25VcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcType.setStatus('mandatory')
traceSessionX25VcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcState.setStatus('mandatory')
traceSessionX25VcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcPreviousState.setStatus('mandatory')
traceSessionX25VcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcDiagnosticCode.setStatus('mandatory')
traceSessionX25VcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcPreviousDiagnosticCode.setStatus('mandatory')
traceSessionX25VcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcCalledNpi.setStatus('mandatory')
traceSessionX25VcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcCalledDna.setStatus('mandatory')
traceSessionX25VcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcCalledLcn.setStatus('mandatory')
traceSessionX25VcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcCallingNpi.setStatus('mandatory')
traceSessionX25VcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcCallingDna.setStatus('mandatory')
traceSessionX25VcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcCallingLcn.setStatus('mandatory')
traceSessionX25VcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcAccountingEnabled.setStatus('mandatory')
traceSessionX25VcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcFastSelectCall.setStatus('mandatory')
traceSessionX25VcLocalRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcLocalRxPktSize.setStatus('mandatory')
traceSessionX25VcLocalTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcLocalTxPktSize.setStatus('mandatory')
traceSessionX25VcLocalTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcLocalTxWindowSize.setStatus('mandatory')
traceSessionX25VcLocalRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcLocalRxWindowSize.setStatus('mandatory')
traceSessionX25VcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcPathReliability.setStatus('mandatory')
traceSessionX25VcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcAccountingEnd.setStatus('mandatory')
traceSessionX25VcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcPriority.setStatus('mandatory')
traceSessionX25VcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcSegmentSize.setStatus('mandatory')
traceSessionX25VcSubnetTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcSubnetTxPktSize.setStatus('mandatory')
traceSessionX25VcSubnetTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcSubnetTxWindowSize.setStatus('mandatory')
traceSessionX25VcSubnetRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcSubnetRxPktSize.setStatus('mandatory')
traceSessionX25VcSubnetRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcSubnetRxWindowSize.setStatus('mandatory')
traceSessionX25VcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcMaxSubnetPktSize.setStatus('mandatory')
traceSessionX25VcTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcTransferPriorityToNetwork.setStatus('mandatory')
traceSessionX25VcTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcTransferPriorityFromNetwork.setStatus('mandatory')
traceSessionX25VcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 11), )
if mibBuilder.loadTexts: traceSessionX25VcIntdTable.setStatus('mandatory')
traceSessionX25VcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceSessionIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25VcIndex"))
if mibBuilder.loadTexts: traceSessionX25VcIntdEntry.setStatus('mandatory')
traceSessionX25VcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcCallReferenceNumber.setStatus('mandatory')
traceSessionX25VcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcElapsedTimeTillNow.setStatus('mandatory')
traceSessionX25VcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcSegmentsRx.setStatus('mandatory')
traceSessionX25VcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcSegmentsSent.setStatus('mandatory')
traceSessionX25VcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcStartTime.setStatus('mandatory')
traceSessionX25VcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12), )
if mibBuilder.loadTexts: traceSessionX25VcStatsTable.setStatus('mandatory')
traceSessionX25VcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceSessionIndex"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25Index"), (0, "Nortel-Magellan-Passport-X25TraceRcvrMIB", "traceSessionX25VcIndex"))
if mibBuilder.loadTexts: traceSessionX25VcStatsEntry.setStatus('mandatory')
traceSessionX25VcAckStackingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcAckStackingTimeouts.setStatus('mandatory')
traceSessionX25VcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcOutOfRangeFrmFromSubnet.setStatus('mandatory')
traceSessionX25VcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcDuplicatesFromSubnet.setStatus('mandatory')
traceSessionX25VcFrmRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcFrmRetryTimeouts.setStatus('mandatory')
traceSessionX25VcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcPeakRetryQueueSize.setStatus('mandatory')
traceSessionX25VcPeakOoSeqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcPeakOoSeqQueueSize.setStatus('mandatory')
traceSessionX25VcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcPeakOoSeqFrmForwarded.setStatus('mandatory')
traceSessionX25VcPeakStackedAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcPeakStackedAcksRx.setStatus('mandatory')
traceSessionX25VcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcSubnetRecoveries.setStatus('mandatory')
traceSessionX25VcWindowClosuresToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcWindowClosuresToSubnet.setStatus('mandatory')
traceSessionX25VcWindowClosuresFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcWindowClosuresFromSubnet.setStatus('mandatory')
traceSessionX25VcWrTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 2, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionX25VcWrTriggers.setStatus('mandatory')
x25TraceRcvrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62, 1))
x25TraceRcvrGroupBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62, 1, 4))
x25TraceRcvrGroupBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62, 1, 4, 1))
x25TraceRcvrGroupBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62, 1, 4, 1, 2))
x25TraceRcvrCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62, 3))
x25TraceRcvrCapabilitiesBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62, 3, 4))
x25TraceRcvrCapabilitiesBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62, 3, 4, 1))
x25TraceRcvrCapabilitiesBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 62, 3, 4, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-X25TraceRcvrMIB", traceRcvrX25DnaDefaultRecvFrmNetworkThruputClass=traceRcvrX25DnaDefaultRecvFrmNetworkThruputClass, traceSessionX25VcPathReliability=traceSessionX25VcPathReliability, traceRcvrX25DnaDefaultSendToNetworkWindowSize=traceRcvrX25DnaDefaultSendToNetworkWindowSize, traceRcvrX25DnaCugRowStatusEntry=traceRcvrX25DnaCugRowStatusEntry, traceRcvrX25DnaOutgoingOptionsEntry=traceRcvrX25DnaOutgoingOptionsEntry, traceRcvrX25DnaDefaultSendToNetworkThruputClass=traceRcvrX25DnaDefaultSendToNetworkThruputClass, traceRcvrX25DnaCugPrivileged=traceRcvrX25DnaCugPrivileged, traceRcvrX25DnaPacketSizes=traceRcvrX25DnaPacketSizes, traceRcvrX25DcRemoteNpi=traceRcvrX25DcRemoteNpi, traceSessionX25VcIndex=traceSessionX25VcIndex, traceRcvrX25RowStatus=traceRcvrX25RowStatus, traceRcvrX25StorageType=traceRcvrX25StorageType, traceSessionX25VcFastSelectCall=traceSessionX25VcFastSelectCall, traceSessionX25VcStartTime=traceSessionX25VcStartTime, traceSessionX25VcPreviousState=traceSessionX25VcPreviousState, traceSessionX25VcWindowClosuresToSubnet=traceSessionX25VcWindowClosuresToSubnet, traceSessionX25VcComponentName=traceSessionX25VcComponentName, traceSessionX25VcCallingLcn=traceSessionX25VcCallingLcn, traceRcvrX25DnaCallOptionsEntry=traceRcvrX25DnaCallOptionsEntry, traceRcvrX25DnaCugOutCalls=traceRcvrX25DnaCugOutCalls, traceRcvrX25DnaOutDefaultPathSensitivity=traceRcvrX25DnaOutDefaultPathSensitivity, traceSessionX25VcDiagnosticCode=traceSessionX25VcDiagnosticCode, traceSessionX25VcSegmentSize=traceSessionX25VcSegmentSize, traceSessionX25VcMaxSubnetPktSize=traceSessionX25VcMaxSubnetPktSize, traceRcvrX25DcComponentName=traceRcvrX25DcComponentName, traceRcvrX25DnaOutCalls=traceRcvrX25DnaOutCalls, traceSessionX25VcIntdEntry=traceSessionX25VcIntdEntry, traceSessionX25VcElapsedTimeTillNow=traceSessionX25VcElapsedTimeTillNow, x25TraceRcvrGroupBD=x25TraceRcvrGroupBD, traceSessionX25VcCallingDna=traceSessionX25VcCallingDna, traceRcvrX25=traceRcvrX25, traceSessionX25RowStatusTable=traceSessionX25RowStatusTable, traceSessionX25VcLocalTxWindowSize=traceSessionX25VcLocalTxWindowSize, traceRcvrX25DnaComponentName=traceRcvrX25DnaComponentName, traceRcvrX25DnaCugCugOptionsTable=traceRcvrX25DnaCugCugOptionsTable, traceSessionX25VcDuplicatesFromSubnet=traceSessionX25VcDuplicatesFromSubnet, traceRcvrX25DcRowStatusEntry=traceRcvrX25DcRowStatusEntry, traceRcvrX25DnaRowStatusTable=traceRcvrX25DnaRowStatusTable, traceRcvrX25DnaOutDefaultPathReliability=traceRcvrX25DnaOutDefaultPathReliability, traceSessionX25VcSegmentsRx=traceSessionX25VcSegmentsRx, traceSessionX25VcSubnetRxPktSize=traceSessionX25VcSubnetRxPktSize, traceSessionX25VcAccountingEnd=traceSessionX25VcAccountingEnd, traceSessionX25VcOutOfRangeFrmFromSubnet=traceSessionX25VcOutOfRangeFrmFromSubnet, traceRcvrX25Dna=traceRcvrX25Dna, traceRcvrX25DnaCugRowStatusTable=traceRcvrX25DnaCugRowStatusTable, traceSessionX25VcPeakOoSeqFrmForwarded=traceSessionX25VcPeakOoSeqFrmForwarded, traceRcvrX25DcRemoteDna=traceRcvrX25DcRemoteDna, traceSessionX25VcLocalRxWindowSize=traceSessionX25VcLocalRxWindowSize, traceRcvrX25Index=traceRcvrX25Index, x25TraceRcvrCapabilitiesBD00A=x25TraceRcvrCapabilitiesBD00A, traceSessionX25VcSubnetTxPktSize=traceSessionX25VcSubnetTxPktSize, traceSessionX25VcWindowClosuresFromSubnet=traceSessionX25VcWindowClosuresFromSubnet, traceRcvrX25ComponentName=traceRcvrX25ComponentName, traceRcvrX25DnaDefaultSendToNetworkPacketSize=traceRcvrX25DnaDefaultSendToNetworkPacketSize, x25TraceRcvrGroup=x25TraceRcvrGroup, traceRcvrX25DnaCugStorageType=traceRcvrX25DnaCugStorageType, traceRcvrX25DnaCugDnic=traceRcvrX25DnaCugDnic, traceRcvrX25DnaCugCugOptionsEntry=traceRcvrX25DnaCugCugOptionsEntry, traceSessionX25VcSubnetRxWindowSize=traceSessionX25VcSubnetRxWindowSize, traceRcvrX25DnaCugIndex=traceRcvrX25DnaCugIndex, traceRcvrX25DcStorageType=traceRcvrX25DcStorageType, traceSessionX25VcSubnetRecoveries=traceSessionX25VcSubnetRecoveries, traceRcvrX25DcIndex=traceRcvrX25DcIndex, traceSessionX25VcRowStatusEntry=traceSessionX25VcRowStatusEntry, traceRcvrX25DnaOutIntl=traceRcvrX25DnaOutIntl, traceRcvrX25DnaOutPathReliabilityOverRide=traceRcvrX25DnaOutPathReliabilityOverRide, x25TraceRcvrCapabilitiesBD00=x25TraceRcvrCapabilitiesBD00, traceSessionX25VcCalledLcn=traceSessionX25VcCalledLcn, traceRcvrX25DnaRowStatusEntry=traceRcvrX25DnaRowStatusEntry, traceRcvrX25RowStatusEntry=traceRcvrX25RowStatusEntry, x25TraceRcvrGroupBD00A=x25TraceRcvrGroupBD00A, traceRcvrX25DcRowStatusTable=traceRcvrX25DcRowStatusTable, traceRcvrX25DnaOutDefaultPriority=traceRcvrX25DnaOutDefaultPriority, traceSessionX25VcLocalTxPktSize=traceSessionX25VcLocalTxPktSize, traceSessionX25RowStatus=traceSessionX25RowStatus, traceRcvrX25DcUserData=traceRcvrX25DcUserData, traceSessionX25VcStatsEntry=traceSessionX25VcStatsEntry, traceSessionX25VcAckStackingTimeouts=traceSessionX25VcAckStackingTimeouts, traceRcvrX25DcType=traceRcvrX25DcType, traceRcvrX25RowStatusTable=traceRcvrX25RowStatusTable, traceRcvrX25DnaCugFormat=traceRcvrX25DnaCugFormat, traceSessionX25ComponentName=traceSessionX25ComponentName, traceRcvrX25DcOptionsTable=traceRcvrX25DcOptionsTable, traceRcvrX25DnaCugComponentName=traceRcvrX25DnaCugComponentName, traceSessionX25VcRowStatusTable=traceSessionX25VcRowStatusTable, traceSessionX25VcIntdTable=traceSessionX25VcIntdTable, traceSessionX25=traceSessionX25, traceSessionX25VcRowStatus=traceSessionX25VcRowStatus, traceSessionX25VcTransferPriorityToNetwork=traceSessionX25VcTransferPriorityToNetwork, traceSessionX25StorageType=traceSessionX25StorageType, traceSessionX25VcPeakOoSeqQueueSize=traceSessionX25VcPeakOoSeqQueueSize, traceSessionX25VcStatsTable=traceSessionX25VcStatsTable, traceRcvrX25DnaIncCalls=traceRcvrX25DnaIncCalls, x25TraceRcvrCapabilities=x25TraceRcvrCapabilities, traceRcvrX25DnaCugPreferential=traceRcvrX25DnaCugPreferential, traceSessionX25VcType=traceSessionX25VcType, traceRcvrX25DnaIncomingOptionsEntry=traceRcvrX25DnaIncomingOptionsEntry, traceSessionX25VcTransferPriorityFromNetwork=traceSessionX25VcTransferPriorityFromNetwork, traceRcvrX25DnaDefaultRecvFrmNetworkWindowSize=traceRcvrX25DnaDefaultRecvFrmNetworkWindowSize, traceRcvrX25DnaAddressTable=traceRcvrX25DnaAddressTable, traceRcvrX25DnaIndex=traceRcvrX25DnaIndex, traceSessionX25VcCalledNpi=traceSessionX25VcCalledNpi, traceRcvrX25DnaIncomingOptionsTable=traceRcvrX25DnaIncomingOptionsTable, traceSessionX25VcLocalRxPktSize=traceSessionX25VcLocalRxPktSize, traceRcvrX25DnaStorageType=traceRcvrX25DnaStorageType, traceRcvrX25DnaOutAccess=traceRcvrX25DnaOutAccess, traceSessionX25VcCadTable=traceSessionX25VcCadTable, x25TraceRcvrGroupBD00=x25TraceRcvrGroupBD00, traceSessionX25VcSegmentsSent=traceSessionX25VcSegmentsSent, traceRcvrX25DnaOutgoingOptionsTable=traceRcvrX25DnaOutgoingOptionsTable, traceSessionX25VcSubnetTxWindowSize=traceSessionX25VcSubnetTxWindowSize, traceRcvrX25DnaCugType=traceRcvrX25DnaCugType, traceRcvrX25DcRowStatus=traceRcvrX25DcRowStatus, traceRcvrX25DnaCallOptionsTable=traceRcvrX25DnaCallOptionsTable, traceRcvrX25DnaPacketSizeNegotiation=traceRcvrX25DnaPacketSizeNegotiation, traceRcvrX25DnaCugInterlockCode=traceRcvrX25DnaCugInterlockCode, traceSessionX25VcAccountingEnabled=traceSessionX25VcAccountingEnabled, traceSessionX25RowStatusEntry=traceSessionX25RowStatusEntry, traceSessionX25Index=traceSessionX25Index, traceSessionX25VcCadEntry=traceSessionX25VcCadEntry, traceRcvrX25DnaOutPathReliabilitySignal=traceRcvrX25DnaOutPathReliabilitySignal, traceSessionX25Vc=traceSessionX25Vc, traceSessionX25VcPreviousDiagnosticCode=traceSessionX25VcPreviousDiagnosticCode, traceRcvrX25DnaRowStatus=traceRcvrX25DnaRowStatus, traceRcvrX25DnaDataNetworkAddress=traceRcvrX25DnaDataNetworkAddress, traceRcvrX25DnaAddressEntry=traceRcvrX25DnaAddressEntry, x25TraceRcvrMIB=x25TraceRcvrMIB, traceRcvrX25DnaCug=traceRcvrX25DnaCug, traceSessionX25VcPriority=traceSessionX25VcPriority, traceSessionX25VcCalledDna=traceSessionX25VcCalledDna, traceRcvrX25DnaDefaultRecvFrmNetworkPacketSize=traceRcvrX25DnaDefaultRecvFrmNetworkPacketSize, traceRcvrX25Dc=traceRcvrX25Dc, traceSessionX25VcPeakRetryQueueSize=traceSessionX25VcPeakRetryQueueSize, traceSessionX25VcPeakStackedAcksRx=traceSessionX25VcPeakStackedAcksRx, traceSessionX25VcState=traceSessionX25VcState, traceRcvrX25DcOptionsEntry=traceRcvrX25DcOptionsEntry, traceSessionX25VcCallingNpi=traceSessionX25VcCallingNpi, traceRcvrX25DnaCugRowStatus=traceRcvrX25DnaCugRowStatus, traceRcvrX25DnaNumberingPlanIndicator=traceRcvrX25DnaNumberingPlanIndicator, traceRcvrX25DnaCugIncCalls=traceRcvrX25DnaCugIncCalls, x25TraceRcvrCapabilitiesBD=x25TraceRcvrCapabilitiesBD, traceSessionX25VcStorageType=traceSessionX25VcStorageType, traceSessionX25VcFrmRetryTimeouts=traceSessionX25VcFrmRetryTimeouts, traceSessionX25VcWrTriggers=traceSessionX25VcWrTriggers, traceSessionX25VcCallReferenceNumber=traceSessionX25VcCallReferenceNumber)
