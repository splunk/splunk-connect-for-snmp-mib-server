#
# PySNMP MIB module HH3C-LswRSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LswRSTP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
dot1dStpPortEntry, dot1dStpPort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry", "dot1dStpPort")
hh3clswCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3clswCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, TimeTicks, Unsigned32, IpAddress, ModuleIdentity, Counter64, Bits, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "TimeTicks", "Unsigned32", "IpAddress", "ModuleIdentity", "Counter64", "Bits", "ObjectIdentity", "MibIdentifier")
MacAddress, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention")
hh3cLswRstpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6))
hh3cLswRstpMib.setRevisions(('2001-06-29 00:00',))
if mibBuilder.loadTexts: hh3cLswRstpMib.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hh3cLswRstpMib.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class EnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hh3cLswRstpMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1))
hh3cdot1dStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpStatus.setStatus('current')
hh3cdot1dStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpForceVersion.setStatus('current')
hh3cdot1dStpDiameter = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpDiameter.setStatus('current')
hh3cdot1dStpRootBridgeAddress = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpRootBridgeAddress.setStatus('current')
hh3cDot1dStpBpduGuard = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot1dStpBpduGuard.setStatus('current')
hh3cDot1dStpRootType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot1dStpRootType.setStatus('current')
hh3cDot1dTimeOutFactor = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot1dTimeOutFactor.setStatus('current')
hh3cDot1dStpPathCostStandard = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d-1998", 1), ("dot1t", 2), ("legacy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot1dStpPathCostStandard.setStatus('current')
hh3cdot1dStpPortXTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5), )
if mibBuilder.loadTexts: hh3cdot1dStpPortXTable.setStatus('current')
hh3cdot1dStpPortXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1), )
dot1dStpPortEntry.registerAugmentions(("HH3C-LswRSTP-MIB", "hh3cdot1dStpPortXEntry"))
hh3cdot1dStpPortXEntry.setIndexNames(*dot1dStpPortEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cdot1dStpPortXEntry.setStatus('current')
hh3cdot1dStpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpPortStatus.setStatus('current')
hh3cdot1dStpPortEdgeport = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpPortEdgeport.setStatus('current')
hh3cdot1dStpPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpPortPointToPoint.setStatus('current')
hh3cdot1dStpMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpMcheck.setStatus('current')
hh3cdot1dStpTransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpTransLimit.setStatus('current')
hh3cdot1dStpRXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpRXStpBPDU.setStatus('current')
hh3cdot1dStpTXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpTXStpBPDU.setStatus('current')
hh3cdot1dStpRXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpRXTCNBPDU.setStatus('current')
hh3cdot1dStpTXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpTXTCNBPDU.setStatus('current')
hh3cdot1dStpRXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpRXRSTPBPDU.setStatus('current')
hh3cdot1dStpTXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpTXRSTPBPDU.setStatus('current')
hh3cdot1dStpClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpClearStatistics.setStatus('current')
hh3cdot1dSetStpDefaultPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dSetStpDefaultPortCost.setStatus('current')
hh3cdot1dStpRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 14), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpRootGuard.setStatus('current')
hh3cdot1dStpLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpLoopGuard.setStatus('current')
hh3cdot1dStpPortBlockedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notBlock", 1), ("blockForProtocol", 2), ("blockForRootGuard", 3), ("blockForBPDUGuard", 4), ("blockForLoopGuard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpPortBlockedReason.setStatus('current')
hh3cdot1dStpRXTCBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpRXTCBPDU.setStatus('current')
hh3cdot1dStpPortSendingBPDUType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpPortSendingBPDUType.setStatus('current')
hh3cdot1dStpOperPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dStpOperPortPointToPoint.setStatus('current')
hh3cRstpEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 0))
if mibBuilder.loadTexts: hh3cRstpEventsV2.setStatus('current')
hh3cRstpBpduGuarded = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 0, 1)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: hh3cRstpBpduGuarded.setStatus('current')
hh3cRstpRootGuarded = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 0, 2)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: hh3cRstpRootGuarded.setStatus('current')
hh3cRstpBridgeLostRootPrimary = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 0, 3))
if mibBuilder.loadTexts: hh3cRstpBridgeLostRootPrimary.setStatus('current')
hh3cRstpLoopGuarded = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 0, 4)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: hh3cRstpLoopGuarded.setStatus('current')
hh3cdot1dStpIgnoredVlanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 10), )
if mibBuilder.loadTexts: hh3cdot1dStpIgnoredVlanTable.setStatus('current')
hh3cdot1dStpIgnoredVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 10, 1), ).setIndexNames((0, "HH3C-LswRSTP-MIB", "hh3cdot1dVlan"))
if mibBuilder.loadTexts: hh3cdot1dStpIgnoredVlanEntry.setStatus('current')
hh3cdot1dVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1dVlan.setStatus('current')
hh3cdot1dStpIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 6, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1dStpIgnore.setStatus('current')
mibBuilder.exportSymbols("HH3C-LswRSTP-MIB", hh3cdot1dStpTXStpBPDU=hh3cdot1dStpTXStpBPDU, hh3cdot1dStpIgnore=hh3cdot1dStpIgnore, hh3cRstpEventsV2=hh3cRstpEventsV2, hh3cdot1dStpPortXEntry=hh3cdot1dStpPortXEntry, hh3cdot1dStpPortPointToPoint=hh3cdot1dStpPortPointToPoint, hh3cLswRstpMibObject=hh3cLswRstpMibObject, hh3cdot1dStpRootGuard=hh3cdot1dStpRootGuard, hh3cdot1dStpIgnoredVlanEntry=hh3cdot1dStpIgnoredVlanEntry, hh3cLswRstpMib=hh3cLswRstpMib, hh3cdot1dStpTXTCNBPDU=hh3cdot1dStpTXTCNBPDU, PYSNMP_MODULE_ID=hh3cLswRstpMib, hh3cdot1dStpPortSendingBPDUType=hh3cdot1dStpPortSendingBPDUType, hh3cRstpRootGuarded=hh3cRstpRootGuarded, hh3cdot1dStpRXStpBPDU=hh3cdot1dStpRXStpBPDU, hh3cdot1dStpMcheck=hh3cdot1dStpMcheck, hh3cdot1dStpTransLimit=hh3cdot1dStpTransLimit, hh3cdot1dStpDiameter=hh3cdot1dStpDiameter, hh3cdot1dStpPortXTable=hh3cdot1dStpPortXTable, hh3cdot1dStpRXTCBPDU=hh3cdot1dStpRXTCBPDU, hh3cdot1dStpPortBlockedReason=hh3cdot1dStpPortBlockedReason, hh3cdot1dStpPortEdgeport=hh3cdot1dStpPortEdgeport, hh3cdot1dStpStatus=hh3cdot1dStpStatus, hh3cdot1dSetStpDefaultPortCost=hh3cdot1dSetStpDefaultPortCost, hh3cDot1dStpRootType=hh3cDot1dStpRootType, hh3cDot1dStpBpduGuard=hh3cDot1dStpBpduGuard, hh3cdot1dStpIgnoredVlanTable=hh3cdot1dStpIgnoredVlanTable, hh3cRstpLoopGuarded=hh3cRstpLoopGuarded, hh3cdot1dStpClearStatistics=hh3cdot1dStpClearStatistics, hh3cdot1dStpRXTCNBPDU=hh3cdot1dStpRXTCNBPDU, hh3cRstpBpduGuarded=hh3cRstpBpduGuarded, hh3cdot1dStpPortStatus=hh3cdot1dStpPortStatus, hh3cDot1dStpPathCostStandard=hh3cDot1dStpPathCostStandard, hh3cdot1dStpRXRSTPBPDU=hh3cdot1dStpRXRSTPBPDU, hh3cRstpBridgeLostRootPrimary=hh3cRstpBridgeLostRootPrimary, hh3cdot1dStpOperPortPointToPoint=hh3cdot1dStpOperPortPointToPoint, EnabledStatus=EnabledStatus, hh3cdot1dStpTXRSTPBPDU=hh3cdot1dStpTXRSTPBPDU, hh3cDot1dTimeOutFactor=hh3cDot1dTimeOutFactor, hh3cdot1dStpLoopGuard=hh3cdot1dStpLoopGuard, hh3cdot1dStpRootBridgeAddress=hh3cdot1dStpRootBridgeAddress, hh3cdot1dVlan=hh3cdot1dVlan, hh3cdot1dStpForceVersion=hh3cdot1dStpForceVersion)
