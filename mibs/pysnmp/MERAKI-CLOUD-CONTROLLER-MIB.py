#
# PySNMP MIB module MERAKI-CLOUD-CONTROLLER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MERAKI-CLOUD-CONTROLLER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:00:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, ModuleIdentity, TimeTicks, enterprises, MibIdentifier, Counter32, Bits, Unsigned32, iso, Counter64, Gauge32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "enterprises", "MibIdentifier", "Counter32", "Bits", "Unsigned32", "iso", "Counter64", "Gauge32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "PhysAddress", "TextualConvention")
cloudController = ModuleIdentity((1, 3, 6, 1, 4, 1, 29671, 1))
if mibBuilder.loadTexts: cloudController.setLastUpdated('201205240001Z')
if mibBuilder.loadTexts: cloudController.setOrganization('Meraki, Inc.')
meraki = MibIdentifier((1, 3, 6, 1, 4, 1, 29671))
organization = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 1, 1))
merakiProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7))
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 1)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"))
if mibBuilder.loadTexts: testTrap.setStatus('current')
deviceGoesDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 2)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: deviceGoesDownTrap.setStatus('current')
deviceComesOnline = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 3)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: deviceComesOnline.setStatus('current')
foreignAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 4)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: foreignAPDetected.setStatus('current')
cellularNetworkUp = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 5)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceModel"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceCarrier"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceName"))
if mibBuilder.loadTexts: cellularNetworkUp.setStatus('current')
cellularNetworkDown = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 6)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceModel"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceCarrier"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceName"))
if mibBuilder.loadTexts: cellularNetworkDown.setStatus('current')
newDhcpServerAlert = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 7)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devSubnet"), ("MERAKI-CLOUD-CONTROLLER-MIB", "vlanNumber"))
if mibBuilder.loadTexts: newDhcpServerAlert.setStatus('current')
noDhcpLeases = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 8)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "vlanNumber"))
if mibBuilder.loadTexts: noDhcpLeases.setStatus('current')
uplinkStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 9)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceName"))
if mibBuilder.loadTexts: uplinkStatusChanged.setStatus('current')
unreachableDevicesDetected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 10)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: unreachableDevicesDetected.setStatus('current')
upcomingFirewallInformationChanges = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 11)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: upcomingFirewallInformationChanges.setStatus('current')
gatewayToRepeater = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 12)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"))
if mibBuilder.loadTexts: gatewayToRepeater.setStatus('current')
ipConflict = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 13)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"))
if mibBuilder.loadTexts: ipConflict.setStatus('current')
newSplashSignup = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 14)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "ssidName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "userName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "userEmail"))
if mibBuilder.loadTexts: newSplashSignup.setStatus('current')
portCableError = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 15)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDescription"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfacePortDescription"))
if mibBuilder.loadTexts: portCableError.setStatus('current')
portConnected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 16)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDescription"))
if mibBuilder.loadTexts: portConnected.setStatus('current')
portDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 17)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDescription"))
if mibBuilder.loadTexts: portDisconnected.setStatus('current')
portSpeedChange = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 18)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDescription"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfacePortDescription"))
if mibBuilder.loadTexts: portSpeedChange.setStatus('current')
rogueDhcpServer = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 19)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devSubnet"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "vlanNumber"))
if mibBuilder.loadTexts: rogueDhcpServer.setStatus('current')
settingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 20)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "networkAdmin"))
if mibBuilder.loadTexts: settingsChanged.setStatus('current')
unreachableRadiusServer = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 21)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "radiusServerIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "ssidName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"))
if mibBuilder.loadTexts: unreachableRadiusServer.setStatus('current')
vpnConnectivityChange = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 22)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "vpnPeer"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devStatus"))
if mibBuilder.loadTexts: vpnConnectivityChange.setStatus('current')
vpnFailoverDetected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 23)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: vpnFailoverDetected.setStatus('current')
organizationName = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: organizationName.setStatus('current')
networkTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2), )
if mibBuilder.loadTexts: networkTable.setStatus('current')
networkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "networkId"))
if mibBuilder.loadTexts: networkEntry.setStatus('current')
networkId = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkId.setStatus('current')
networkName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkName.setStatus('current')
networkAdmin = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAdmin.setStatus('current')
vpnPeer = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnPeer.setStatus('current')
ssidTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3), )
if mibBuilder.loadTexts: ssidTable.setStatus('current')
ssidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "networkId"), (0, "MERAKI-CLOUD-CONTROLLER-MIB", "ssidNumber"))
if mibBuilder.loadTexts: ssidEntry.setStatus('current')
ssidNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidNetworkName.setStatus('current')
ssidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidNumber.setStatus('current')
ssidName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidName.setStatus('current')
userName = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
userEmail = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userEmail.setStatus('current')
radiusServerIp = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerIp.setStatus('current')
radiusServerPort = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerPort.setStatus('current')
devTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4), )
if mibBuilder.loadTexts: devTable.setStatus('current')
devEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "devMac"))
if mibBuilder.loadTexts: devEntry.setStatus('current')
devMac = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: devMac.setStatus('current')
devName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devName.setStatus('current')
devStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offline", 0), ("online", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devStatus.setStatus('current')
devContactedAt = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devContactedAt.setStatus('current')
devClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devClientCount.setStatus('current')
devMeshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("gateway", 0), ("repeater", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devMeshStatus.setStatus('current')
devPublicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devPublicIp.setStatus('current')
devSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSerial.setStatus('current')
devProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devProductCode.setStatus('current')
devProductDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devProductDescription.setStatus('current')
devNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devNetworkName.setStatus('current')
devLanIp = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devLanIp.setStatus('current')
devSubnet = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSubnet.setStatus('current')
devInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5), )
if mibBuilder.loadTexts: devInterfaceTable.setStatus('current')
devInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDevMac"), (0, "MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceIndex"))
if mibBuilder.loadTexts: devInterfaceEntry.setStatus('current')
devInterfaceDevMac = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceDevMac.setStatus('current')
devInterfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceIndex.setStatus('current')
devInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceName.setStatus('current')
devInterfaceSentPkts = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceSentPkts.setStatus('current')
devInterfaceRecvPkts = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceRecvPkts.setStatus('current')
devInterfaceSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceSentBytes.setStatus('current')
devInterfaceRecvBytes = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceRecvBytes.setStatus('current')
devInterfaceModel = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceModel.setStatus('current')
devInterfaceCarrier = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceCarrier.setStatus('current')
devInterfaceDescription = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceDescription.setStatus('current')
devInterfacePortDescription = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfacePortDescription.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "networkId"), (0, "MERAKI-CLOUD-CONTROLLER-MIB", "vlanNumber"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNetworkName.setStatus('current')
vlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNumber.setStatus('current')
vlanName = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanName.setStatus('current')
mini = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 1))
id2 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 2))
wpg = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 3))
od1 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 4))
od2 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 5))
od3 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 6))
mo1 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 7))
sol = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 8))
lr1 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 9))
mr11 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 10))
mr12 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 11))
mr14 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 12))
mr16 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 13))
mr24 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 14))
mr62 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 15))
mr66 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 16))
mr34 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 17))
mr18 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 18))
mr26 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 19))
mr32 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 20))
mr72 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 21))
z1 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 100))
mx70 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 101))
mx80 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 102))
mx90 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 103))
mx400 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 104))
mx600 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 105))
mx100 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 106))
mx60 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 107))
mx60w = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 108))
merakiVM10 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 200))
ms22 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 300))
ms22p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 301))
ms42 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 302))
ms42p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 303))
ms220_8 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 304)).setLabel("ms220-8")
ms220_8p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 305)).setLabel("ms220-8p")
ms220_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 306)).setLabel("ms220-24")
ms220_24p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 307)).setLabel("ms220-24p")
ms220_48 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 308)).setLabel("ms220-48")
ms220_48lp = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 309)).setLabel("ms220-48lp")
ms220_48fp = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 310)).setLabel("ms220-48fp")
ms320_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 311)).setLabel("ms320-24")
ms320_24p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 312)).setLabel("ms320-24p")
ms320_48 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 313)).setLabel("ms320-48")
ms320_48lp = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 314)).setLabel("ms320-48lp")
ms320_48fp = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 315)).setLabel("ms320-48fp")
ms420_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 316)).setLabel("ms420-24")
ms420_48 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 317)).setLabel("ms420-48")
mibBuilder.exportSymbols("MERAKI-CLOUD-CONTROLLER-MIB", devInterfaceModel=devInterfaceModel, devInterfaceSentBytes=devInterfaceSentBytes, vlanNetworkName=vlanNetworkName, ms220_24p=ms220_24p, vlanNumber=vlanNumber, mr62=mr62, organizationName=organizationName, networkName=networkName, mini=mini, mr26=mr26, devInterfaceEntry=devInterfaceEntry, devInterfaceIndex=devInterfaceIndex, merakiProducts=merakiProducts, testTrap=testTrap, portCableError=portCableError, deviceComesOnline=deviceComesOnline, mx100=mx100, ms42p=ms42p, ms320_48lp=ms320_48lp, mr34=mr34, ms320_24=ms320_24, mr66=mr66, mx90=mx90, devTable=devTable, unreachableDevicesDetected=unreachableDevicesDetected, ms220_48fp=ms220_48fp, ipConflict=ipConflict, mx70=mx70, devProductCode=devProductCode, ssidNumber=ssidNumber, od3=od3, vlanEntry=vlanEntry, mr14=mr14, newSplashSignup=newSplashSignup, devInterfaceName=devInterfaceName, devInterfaceCarrier=devInterfaceCarrier, upcomingFirewallInformationChanges=upcomingFirewallInformationChanges, merakiVM10=merakiVM10, cellularNetworkUp=cellularNetworkUp, devPublicIp=devPublicIp, devSerial=devSerial, mx60=mx60, ms22=ms22, ms220_48lp=ms220_48lp, mo1=mo1, vpnPeer=vpnPeer, devContactedAt=devContactedAt, ms220_48=ms220_48, networkEntry=networkEntry, mr72=mr72, devStatus=devStatus, sol=sol, devInterfaceTable=devInterfaceTable, radiusServerIp=radiusServerIp, radiusServerPort=radiusServerPort, mr18=mr18, ms320_48=ms320_48, cloudController=cloudController, devInterfaceDevMac=devInterfaceDevMac, devInterfaceRecvPkts=devInterfaceRecvPkts, mx400=mx400, foreignAPDetected=foreignAPDetected, networkId=networkId, id2=id2, mx600=mx600, traps=traps, portSpeedChange=portSpeedChange, userName=userName, devInterfaceSentPkts=devInterfaceSentPkts, od1=od1, ssidNetworkName=ssidNetworkName, uplinkStatusChanged=uplinkStatusChanged, devName=devName, devMeshStatus=devMeshStatus, devInterfaceDescription=devInterfaceDescription, vlanName=vlanName, vlanTable=vlanTable, ssidEntry=ssidEntry, devProductDescription=devProductDescription, mr32=mr32, ms220_8=ms220_8, ssidName=ssidName, ms220_24=ms220_24, ms320_48fp=ms320_48fp, devSubnet=devSubnet, gatewayToRepeater=gatewayToRepeater, mr12=mr12, mr16=mr16, networkAdmin=networkAdmin, devInterfacePortDescription=devInterfacePortDescription, devMac=devMac, newDhcpServerAlert=newDhcpServerAlert, settingsChanged=settingsChanged, ms42=ms42, ssidTable=ssidTable, devNetworkName=devNetworkName, rogueDhcpServer=rogueDhcpServer, vpnFailoverDetected=vpnFailoverDetected, mx60w=mx60w, portDisconnected=portDisconnected, devLanIp=devLanIp, ms420_24=ms420_24, od2=od2, meraki=meraki, devInterfaceRecvBytes=devInterfaceRecvBytes, z1=z1, mx80=mx80, wpg=wpg, userEmail=userEmail, organization=organization, deviceGoesDownTrap=deviceGoesDownTrap, vpnConnectivityChange=vpnConnectivityChange, mr11=mr11, networkTable=networkTable, portConnected=portConnected, PYSNMP_MODULE_ID=cloudController, ms220_8p=ms220_8p, lr1=lr1, ms320_24p=ms320_24p, ms420_48=ms420_48, noDhcpLeases=noDhcpLeases, devEntry=devEntry, ms22p=ms22p, cellularNetworkDown=cellularNetworkDown, devClientCount=devClientCount, mr24=mr24, unreachableRadiusServer=unreachableRadiusServer)
