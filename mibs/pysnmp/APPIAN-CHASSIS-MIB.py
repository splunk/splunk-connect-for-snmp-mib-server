#
# PySNMP MIB module APPIAN-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AcAdminStatus, AcNodeArchitecture, AcRingId, acOsap, AcOpStatus, AcNodeId, AcMibVersion = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcAdminStatus", "AcNodeArchitecture", "AcRingId", "acOsap", "AcOpStatus", "AcNodeId", "AcMibVersion")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, Unsigned32, Bits, TimeTicks, iso, NotificationType, IpAddress, Integer32, MibIdentifier, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Bits", "TimeTicks", "iso", "NotificationType", "IpAddress", "Integer32", "MibIdentifier", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "DateAndTime")
acChassis = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 1))
acChassis.setRevisions(('1900-04-20 00:00',))
if mibBuilder.loadTexts: acChassis.setLastUpdated('0004200000Z')
if mibBuilder.loadTexts: acChassis.setOrganization('Appian Communications, Inc.')
class AcFanStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("fast", 1), ("medium", 2), ("slow", 3), ("failed", 4))

acGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 1, 1))
acNodeId = MibScalar((1, 3, 6, 1, 4, 1, 2785, 2, 1, 1, 1), AcNodeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acNodeId.setStatus('current')
acChassisTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2), )
if mibBuilder.loadTexts: acChassisTable.setStatus('current')
acChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1), ).setIndexNames((0, "APPIAN-CHASSIS-MIB", "acChassisNodeId"))
if mibBuilder.loadTexts: acChassisEntry.setStatus('current')
acChassisNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acChassisNodeId.setStatus('current')
acChassisAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 2), AcAdminStatus().clone('activate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisAdminStatus.setStatus('current')
acChassisOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 3), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisOpStatus.setStatus('current')
acChassisCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("osap-1600", 1), ("osap-4800", 2), ("osap-10G", 3))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisCfgType.setStatus('current')
acChassisModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("osap-1600", 1), ("osap-4800", 2), ("osap-10G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisModelNumber.setStatus('current')
acChassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisSerialNumber.setStatus('current')
acChassisProductionDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisProductionDate.setStatus('current')
acChassisRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisRevision.setStatus('current')
acChassisTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("tooCold", 2), ("tooHot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisTemperature.setStatus('current')
acChassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 10), AcFanStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisFanSpeed.setStatus('current')
acChassisFan1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 11), AcFanStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisFan1Status.setStatus('current')
acChassisFan2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 12), AcFanStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisFan2Status.setStatus('current')
acChassisFan3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 13), AcFanStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisFan3Status.setStatus('current')
acChassisFan4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 14), AcFanStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisFan4Status.setStatus('current')
acChassisFan5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 15), AcFanStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisFan5Status.setStatus('current')
acChassisFan6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 16), AcFanStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisFan6Status.setStatus('current')
acChassisPowerAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 17), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisPowerAStatus.setStatus('current')
acChassisPowerBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 18), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisPowerBStatus.setStatus('current')
acChassisContact = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisContact.setStatus('current')
acChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisName.setStatus('current')
acChassisLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisLocation.setStatus('current')
acChassisDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisDescription.setStatus('current')
acChassisMaxSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisMaxSlots.setStatus('current')
acChassisSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisSysUpTime.setStatus('current')
acChassisCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 25), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisCurrentTime.setStatus('current')
acChassisMaxSerialPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisMaxSerialPorts.setStatus('current')
acChassisRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 27), AcRingId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisRingId.setStatus('current')
acChassisRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisRingName.setStatus('current')
acChassisMibVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 29), AcMibVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisMibVersion.setStatus('current')
acChassisNodeArchitecture = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 30), AcNodeArchitecture()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisNodeArchitecture.setStatus('current')
acChassisNodePoll = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisNodePoll.setStatus('current')
acChassisModulePoll = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisModulePoll.setStatus('current')
acChassisPortPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acChassisPortPoll.setStatus('current')
acChassisReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisReset.setStatus('current')
acChassisTdmAccessRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n-to-one", 0), ("one-to-one", 1))).clone('n-to-one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acChassisTdmAccessRedundancyMode.setStatus('current')
acChassisTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 1, 0))
acChassisCfgMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 1, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-CHASSIS-MIB", "acChassisNodeId"), ("APPIAN-CHASSIS-MIB", "acChassisModelNumber"), ("APPIAN-CHASSIS-MIB", "acChassisCfgType"))
if mibBuilder.loadTexts: acChassisCfgMismatchTrap.setStatus('current')
acChassisTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 1, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-CHASSIS-MIB", "acChassisNodeId"), ("APPIAN-CHASSIS-MIB", "acChassisTemperature"))
if mibBuilder.loadTexts: acChassisTemperatureTrap.setStatus('current')
acChassisFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 1, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-CHASSIS-MIB", "acChassisNodeId"), ("APPIAN-CHASSIS-MIB", "acChassisFan1Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan2Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan3Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan4Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan5Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan6Status"))
if mibBuilder.loadTexts: acChassisFanFailureTrap.setStatus('current')
acChassisTemperatureClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 1, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-CHASSIS-MIB", "acChassisNodeId"), ("APPIAN-CHASSIS-MIB", "acChassisTemperature"))
if mibBuilder.loadTexts: acChassisTemperatureClearTrap.setStatus('current')
acChassisFanFailureClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 1, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-CHASSIS-MIB", "acChassisNodeId"), ("APPIAN-CHASSIS-MIB", "acChassisFan1Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan2Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan3Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan4Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan5Status"), ("APPIAN-CHASSIS-MIB", "acChassisFan6Status"))
if mibBuilder.loadTexts: acChassisFanFailureClearTrap.setStatus('current')
acMgmtAccessTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3), )
if mibBuilder.loadTexts: acMgmtAccessTable.setStatus('current')
acMgmtAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1), ).setIndexNames((0, "APPIAN-CHASSIS-MIB", "acMgmtAccessNodeId"), (0, "APPIAN-CHASSIS-MIB", "acMgmtAccessIndex"))
if mibBuilder.loadTexts: acMgmtAccessEntry.setStatus('current')
acMgmtAccessNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acMgmtAccessNodeId.setStatus('current')
acMgmtAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acMgmtAccessIndex.setStatus('current')
acMgmtAccessInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("appian-dcc", 2), ("oob-ppp", 3), ("frame-relay", 4), ("ppp", 5), ("sonet-1-dbg", 6), ("sonet-2-dbg", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acMgmtAccessInterfaceType.setStatus('current')
acMgmtAccessAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 4), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acMgmtAccessAdminStatus.setStatus('current')
acMgmtAccessOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMgmtAccessOpStatus.setStatus('current')
acMgmtAccessIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acMgmtAccessIpAddress.setStatus('current')
acMgmtAccessIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acMgmtAccessIpSubnet.setStatus('current')
acMgmtAccessTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acMgmtAccessTrunk.setStatus('current')
acMgmtAccessFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1022))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acMgmtAccessFrDlci.setStatus('current')
mibBuilder.exportSymbols("APPIAN-CHASSIS-MIB", AcFanStatus=AcFanStatus, acChassisTemperatureTrap=acChassisTemperatureTrap, acChassisSysUpTime=acChassisSysUpTime, acChassisFan5Status=acChassisFan5Status, acChassisFanFailureClearTrap=acChassisFanFailureClearTrap, acChassisContact=acChassisContact, acChassisNodeId=acChassisNodeId, acChassis=acChassis, acChassisTdmAccessRedundancyMode=acChassisTdmAccessRedundancyMode, acChassisCfgType=acChassisCfgType, acMgmtAccessOpStatus=acMgmtAccessOpStatus, acGlobals=acGlobals, acChassisFan3Status=acChassisFan3Status, acChassisFan4Status=acChassisFan4Status, acChassisTemperatureClearTrap=acChassisTemperatureClearTrap, acChassisNodeArchitecture=acChassisNodeArchitecture, acChassisMaxSlots=acChassisMaxSlots, acChassisProductionDate=acChassisProductionDate, acChassisMibVersion=acChassisMibVersion, acMgmtAccessTable=acMgmtAccessTable, acChassisRevision=acChassisRevision, acMgmtAccessFrDlci=acMgmtAccessFrDlci, acChassisTable=acChassisTable, acChassisPowerAStatus=acChassisPowerAStatus, acChassisFan2Status=acChassisFan2Status, acChassisFan6Status=acChassisFan6Status, acChassisLocation=acChassisLocation, acChassisFanSpeed=acChassisFanSpeed, acChassisRingName=acChassisRingName, acChassisTraps=acChassisTraps, acChassisNodePoll=acChassisNodePoll, acMgmtAccessIpAddress=acMgmtAccessIpAddress, acChassisCfgMismatchTrap=acChassisCfgMismatchTrap, acChassisReset=acChassisReset, acChassisOpStatus=acChassisOpStatus, acChassisAdminStatus=acChassisAdminStatus, acChassisTemperature=acChassisTemperature, acChassisFanFailureTrap=acChassisFanFailureTrap, acMgmtAccessInterfaceType=acMgmtAccessInterfaceType, acMgmtAccessAdminStatus=acMgmtAccessAdminStatus, acMgmtAccessIpSubnet=acMgmtAccessIpSubnet, acMgmtAccessTrunk=acMgmtAccessTrunk, acChassisSerialNumber=acChassisSerialNumber, acChassisCurrentTime=acChassisCurrentTime, acChassisDescription=acChassisDescription, acChassisFan1Status=acChassisFan1Status, acMgmtAccessEntry=acMgmtAccessEntry, acChassisEntry=acChassisEntry, acMgmtAccessIndex=acMgmtAccessIndex, acChassisModelNumber=acChassisModelNumber, acChassisPortPoll=acChassisPortPoll, acChassisPowerBStatus=acChassisPowerBStatus, acChassisMaxSerialPorts=acChassisMaxSerialPorts, acMgmtAccessNodeId=acMgmtAccessNodeId, acChassisName=acChassisName, acChassisModulePoll=acChassisModulePoll, acChassisRingId=acChassisRingId, PYSNMP_MODULE_ID=acChassis, acNodeId=acNodeId)
