#
# PySNMP MIB module Fibronics-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FIBRONICS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, TimeTicks, enterprises, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, ModuleIdentity, Unsigned32, MibIdentifier, iso, internet, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "TimeTicks", "enterprises", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "iso", "internet", "Counter32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MACAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class FddiTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class PhivAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

mgmt = MibIdentifier((1, 3, 6, 1, 2))
mib = MibIdentifier((1, 3, 6, 1, 2, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
fxrBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 61))
fxrMng = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 61, 1))
fxrSysId = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 12))).clone(namedValues=NamedValues(("fr9500", 8), ("fer2500", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxrSysId.setStatus('mandatory')
fxrAction = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("reset", 1), ("sendNetworkTab", 2), ("deleteNetworkTab", 3), ("sendRoutingTab", 4), ("deleteRoutinTab", 5), ("sendLanTab", 6), ("deleteLanTab", 7), ("deleteArpTab", 8), ("sendArpTab", 9), ("deleteRouteTab", 10), ("sendRouteTab", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrAction.setStatus('mandatory')
fxrFileName = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrFileName.setStatus('mandatory')
fxrDeviceParams = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 61, 2))
fxrBridgeType = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 31))).clone(namedValues=NamedValues(("fr9500", 8), ("fer2500", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxrBridgeType.setStatus('mandatory')
fxrInactiveArpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrInactiveArpTimeOut.setStatus('mandatory')
fxrBridgeAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 61, 2, 3))
fxrErrorDesc = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxrErrorDesc.setStatus('mandatory')
fxrErrorSeverity = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxrErrorSeverity.setStatus('mandatory')
fxrBrgVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxrBrgVersion.setStatus('mandatory')
fxrBrgFeatures = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxrBrgFeatures.setStatus('mandatory')
fxrMaskTab = MibTable((1, 3, 6, 1, 4, 1, 22, 61, 8), )
if mibBuilder.loadTexts: fxrMaskTab.setStatus('mandatory')
fxrMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 61, 8, 1), )
if mibBuilder.loadTexts: fxrMaskEntry.setStatus('mandatory')
fxrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("compress", 3), ("priority", 4), ("loadSharing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxrMaskType.setStatus('mandatory')
fxrIfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrIfPortNum.setStatus('mandatory')
fxrMaskNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskNum.setStatus('mandatory')
fxrMaskDest = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unassigned-cond", 1), ("broadcast-msge", 2), ("multicast-msge", 3), ("all-msge", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskDest.setStatus('mandatory')
fxrMaskPat1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskPat1.setStatus('mandatory')
fxrMaskActiveBit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskActiveBit1.setStatus('mandatory')
fxrMaskFrom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("llc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskFrom1.setStatus('mandatory')
fxrMaskOffset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskOffset1.setStatus('mandatory')
fxrMaskCond1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskCond1.setStatus('mandatory')
fxrMaskPat2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskPat2.setStatus('mandatory')
fxrMaskActiveBit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskActiveBit2.setStatus('mandatory')
fxrMaskFrom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("llc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskFrom2.setStatus('mandatory')
fxrMaskOffset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskOffset2.setStatus('mandatory')
fxrMaskCond2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskCond2.setStatus('mandatory')
fxrMaskPat3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskPat3.setStatus('mandatory')
fxrMaskActiveBit3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskActiveBit3.setStatus('mandatory')
fxrMaskFrom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("llc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskFrom3.setStatus('mandatory')
fxrMaskOffset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskOffset3.setStatus('mandatory')
fxrMaskCond3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskCond3.setStatus('mandatory')
fxrMaskCompFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("llc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskCompFrom.setStatus('mandatory')
fxrMaskCompOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskCompOffset.setStatus('mandatory')
fxrMaskOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("block", 1), ("forward", 2), ("route", 3), ("forward-route", 4), ("high-priority", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrMaskOper.setStatus('mandatory')
fxrTR = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 61, 13))
fxrTRIfTab = MibTable((1, 3, 6, 1, 4, 1, 22, 61, 13, 1), )
if mibBuilder.loadTexts: fxrTRIfTab.setStatus('mandatory')
fxrTRIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 61, 13, 1, 1), ).setIndexNames((0, "Fibronics-MIB", "fxrTRIfIndex"))
if mibBuilder.loadTexts: fxrTRIfEntry.setStatus('mandatory')
fxrTRIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxrTRIfIndex.setStatus('mandatory')
fxrTREarlyTokenRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrTREarlyTokenRelease.setStatus('mandatory')
fxrTRLocalAdminAddress = MibScalar((1, 3, 6, 1, 4, 1, 22, 61, 13, 1, 1, 3), MACAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrTRLocalAdminAddress.setStatus('mandatory')
fxrTRLocalAdminAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 61, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxrTRLocalAdminAddressStatus.setStatus('mandatory')
mibBuilder.exportSymbols("Fibronics-MIB", fxrMaskType=fxrMaskType, fxrMaskPat2=fxrMaskPat2, fxrTRIfTab=fxrTRIfTab, fxrTRIfEntry=fxrTRIfEntry, fxrFileName=fxrFileName, private=private, fxrMaskOffset2=fxrMaskOffset2, fxrMaskPat1=fxrMaskPat1, fxrMaskFrom1=fxrMaskFrom1, enterprises=enterprises, fxrBridgeAlarm=fxrBridgeAlarm, fxrMng=fxrMng, fxrMaskCompFrom=fxrMaskCompFrom, fxrBrgVersion=fxrBrgVersion, mib=mib, fxrMaskCond2=fxrMaskCond2, fxrMaskPat3=fxrMaskPat3, fxrBridgeType=fxrBridgeType, fxrTREarlyTokenRelease=fxrTREarlyTokenRelease, fxrIfPortNum=fxrIfPortNum, fxrSysId=fxrSysId, fxrMaskOffset3=fxrMaskOffset3, fxrTR=fxrTR, MACAddress=MACAddress, fxrMaskEntry=fxrMaskEntry, fibronics=fibronics, fxrMaskOffset1=fxrMaskOffset1, PhivAddr=PhivAddr, experimental=experimental, fxrInactiveArpTimeOut=fxrInactiveArpTimeOut, fxrErrorDesc=fxrErrorDesc, fxrMaskActiveBit1=fxrMaskActiveBit1, fxrMaskActiveBit3=fxrMaskActiveBit3, fxrMaskFrom3=fxrMaskFrom3, fxrMaskOper=fxrMaskOper, fxrMaskDest=fxrMaskDest, fxrMaskFrom2=fxrMaskFrom2, fxrMaskNum=fxrMaskNum, directory=directory, fxrDeviceParams=fxrDeviceParams, fxrMaskCond3=fxrMaskCond3, fxrErrorSeverity=fxrErrorSeverity, fxrBrgFeatures=fxrBrgFeatures, fxrMaskTab=fxrMaskTab, mgmt=mgmt, fxrTRLocalAdminAddressStatus=fxrTRLocalAdminAddressStatus, fxrMaskCompOffset=fxrMaskCompOffset, fxrTRIfIndex=fxrTRIfIndex, fxrMaskCond1=fxrMaskCond1, FddiTime=FddiTime, fxrBridge=fxrBridge, fxrMaskActiveBit2=fxrMaskActiveBit2, fxrTRLocalAdminAddress=fxrTRLocalAdminAddress, fxrAction=fxrAction)
