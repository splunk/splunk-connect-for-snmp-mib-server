#
# PySNMP MIB module ROUTER-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ROUTER-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:50:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, Bits, Counter32, ObjectIdentity, Counter64, MibIdentifier, enterprises, NotificationType, Unsigned32, Integer32, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Bits", "Counter32", "ObjectIdentity", "Counter64", "MibIdentifier", "enterprises", "NotificationType", "Unsigned32", "Integer32", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

cdx6500PCTRarpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 1), )
if mibBuilder.loadTexts: cdx6500PCTRarpCacheTable.setStatus('mandatory')
cdx6500PCTRarpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 1, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRarpCacheIndex"))
if mibBuilder.loadTexts: cdx6500PCTRarpCacheEntry.setStatus('mandatory')
cdx6500PCTRarpCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRarpCacheIndex.setStatus('mandatory')
cdx6500PCTRarpCacheIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpCacheIfNum.setStatus('mandatory')
cdx6500PCTRarpCacheProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 7, 22, 50))).clone(namedValues=NamedValues(("ip", 0), ("ipx", 7), ("appleTalk", 22), ("newvalIp", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpCacheProtocol.setStatus('mandatory')
cdx6500PCTRarpCacheProtocolAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpCacheProtocolAd.setStatus('mandatory')
cdx6500PCTRarpCacheMacAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpCacheMacAd.setStatus('mandatory')
cdx6500PCTRarpParamAutoRef = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpParamAutoRef.setStatus('mandatory')
cdx6500PCTRarpParamRefTime = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpParamRefTime.setStatus('mandatory')
cdx6500PCTRarpParamUseTime = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpParamUseTime.setStatus('mandatory')
cdx6500PCTRarpParamProxy = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpParamProxy.setStatus('mandatory')
cdx6500PCTRarpParamProxySub = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpParamProxySub.setStatus('mandatory')
cdx6500PCTRaccControlTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7), )
if mibBuilder.loadTexts: cdx6500PCTRaccControlTable.setStatus('mandatory')
cdx6500PCTRaccControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRaccControlIndex"))
if mibBuilder.loadTexts: cdx6500PCTRaccControlEntry.setStatus('mandatory')
cdx6500PCTRaccControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRaccControlIndex.setStatus('mandatory')
cdx6500PCTRaccControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("excluded", 0), ("included", 1), ("newvalExcluded", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlType.setStatus('mandatory')
cdx6500PCTRaccControlSrcAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlSrcAd.setStatus('mandatory')
cdx6500PCTRaccControlSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlSrcMask.setStatus('mandatory')
cdx6500PCTRaccControlDstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlDstAd.setStatus('mandatory')
cdx6500PCTRaccControlDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlDstMask.setStatus('mandatory')
cdx6500PCTRaccControlFstProt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlFstProt.setStatus('mandatory')
cdx6500PCTRaccControlLstProt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlLstProt.setStatus('mandatory')
cdx6500PCTRaccControlFstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlFstPort.setStatus('deprecated')
cdx6500PCTRaccControlLstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRaccControlLstPort.setStatus('deprecated')
cdx6500PCTRaccControlSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRaccControlSrcPort.setStatus('mandatory')
cdx6500PCTRaccControlDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRaccControlDstPort.setStatus('mandatory')
cdx6500PCTRaccControlInIniface = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRaccControlInIniface.setStatus('mandatory')
cdx6500PCTRaccControlOutIniface = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRaccControlOutIniface.setStatus('mandatory')
cdx6500PCTRaccControlInLcon = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRaccControlInLcon.setStatus('mandatory')
cdx6500PCTRaccControlOutLcon = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRaccControlOutLcon.setStatus('mandatory')
cdx6500PCTRAcceptRIPRouteTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 8), )
if mibBuilder.loadTexts: cdx6500PCTRAcceptRIPRouteTable.setStatus('obsolete')
cdx6500PCTRAcceptRIPRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 8, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRAcceptRIPRouteIndex"))
if mibBuilder.loadTexts: cdx6500PCTRAcceptRIPRouteEntry.setStatus('obsolete')
cdx6500PCTRAcceptRIPRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: cdx6500PCTRAcceptRIPRouteIndex.setStatus('obsolete')
cdx6500PCTRAcceptRIPRouteIpNet = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: cdx6500PCTRAcceptRIPRouteIpNet.setStatus('obsolete')
cdx6500PCTRifConfTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9), )
if mibBuilder.loadTexts: cdx6500PCTRifConfTable.setStatus('mandatory')
cdx6500PCTRifConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRifConfIndex"))
if mibBuilder.loadTexts: cdx6500PCTRifConfEntry.setStatus('mandatory')
cdx6500PCTRifConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifConfIndex.setStatus('mandatory')
cdx6500PCTRifConfIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfIfNum.setStatus('mandatory')
cdx6500PCTRifConfIpAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfIpAd.setStatus('mandatory')
cdx6500PCTRifConfAdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfAdMask.setStatus('mandatory')
cdx6500PCTRifConfOvrDefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfOvrDefRoute.setStatus('mandatory')
cdx6500PCTRifConfOvrStatRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfOvrStatRoute.setStatus('mandatory')
cdx6500PCTRifConfSndgDefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfSndgDefRoute.setStatus('mandatory')
cdx6500PCTRifConfSndgNetRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfSndgNetRoute.setStatus('mandatory')
cdx6500PCTRifConfSndgSubRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfSndgSubRoute.setStatus('mandatory')
cdx6500PCTRifConfSndgStatRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfSndgStatRoute.setStatus('mandatory')
cdx6500PCTRifConfRcvgRipPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfRcvgRipPkts.setStatus('mandatory')
cdx6500PCTRifConfRcvgDynNets = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfRcvgDynNets.setStatus('mandatory')
cdx6500PCTRifConfRcvgDynSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfRcvgDynSubs.setStatus('mandatory')
cdx6500PCTRifConfTagAsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfTagAsNum.setStatus('mandatory')
cdx6500PCTRifConfBcastStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("network", 0), ("local", 1), ("newvalNetwork", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfBcastStyle.setStatus('mandatory')
cdx6500PCTRifConfBcastFill = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfBcastFill.setStatus('mandatory')
cdx6500PCTRifMaxIpMTUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifMaxIpMTUSize.setStatus('mandatory')
cdx6500PCTRifConfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfSplitHorizon.setStatus('mandatory')
cdx6500PCTRifConfSr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifConfSr.setStatus('mandatory')
cdx6500PCTRifRipMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifRipMetric.setStatus('mandatory')
cdx6500PCTRifSendRipVer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifSendRipVer.setStatus('mandatory')
cdx6500PCTRifSendAggRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifSendAggRoutes.setStatus('mandatory')
cdx6500PCTRifAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifAuthType.setStatus('mandatory')
cdx6500PCTRifAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifAuthKey.setStatus('mandatory')
cdx6500PCTRifOnDemandRip = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifOnDemandRip.setStatus('mandatory')
cdx6500PCTRifTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("change", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifTrigUpdate.setStatus('mandatory')
cdx6500PCTRifSecPrdBcastIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 65529))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifSecPrdBcastIntv.setStatus('mandatory')
cdx6500PCTRifRoutInvldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65530))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifRoutInvldTime.setStatus('mandatory')
cdx6500PCTRifRoutFlushTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65530))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifRoutFlushTime.setStatus('mandatory')
cdx6500PCTRifRdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifRdpEnable.setStatus('mandatory')
cdx6500PCTRifRdpLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 9, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRifRdpLevel.setStatus('mandatory')
cdx6500PCTRbootpServTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 10), )
if mibBuilder.loadTexts: cdx6500PCTRbootpServTable.setStatus('mandatory')
cdx6500PCTRbootpServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 10, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRbootpServIndex"))
if mibBuilder.loadTexts: cdx6500PCTRbootpServEntry.setStatus('mandatory')
cdx6500PCTRbootpServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRbootpServIndex.setStatus('mandatory')
cdx6500PCTRbootpServAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRbootpServAd.setStatus('mandatory')
cdx6500PCTRegpAsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 11), )
if mibBuilder.loadTexts: cdx6500PCTRegpAsTable.setStatus('optional')
cdx6500PCTRegpAsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 11, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRegpAsIndex"))
if mibBuilder.loadTexts: cdx6500PCTRegpAsEntry.setStatus('mandatory')
cdx6500PCTRegpAsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRegpAsIndex.setStatus('mandatory')
cdx6500PCTRegpAsNeighAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRegpAsNeighAs.setStatus('mandatory')
cdx6500PCTRegpAsInterchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRegpAsInterchFlag.setStatus('mandatory')
cdx6500PCTRegpAsUseEgMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRegpAsUseEgMetric.setStatus('mandatory')
cdx6500PCTRegpAsDefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRegpAsDefMetric.setStatus('mandatory')
cdx6500PCTRegpNeighTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 12), )
if mibBuilder.loadTexts: cdx6500PCTRegpNeighTable.setStatus('optional')
cdx6500PCTRegpNeighEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 12, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRegpNeighIndex"))
if mibBuilder.loadTexts: cdx6500PCTRegpNeighEntry.setStatus('mandatory')
cdx6500PCTRegpNeighIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRegpNeighIndex.setStatus('mandatory')
cdx6500PCTRegpNeighIdAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRegpNeighIdAd.setStatus('mandatory')
cdx6500PCTRegpNeighAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRegpNeighAs.setStatus('mandatory')
cdx6500PCTRipParamBootpFwdg = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamBootpFwdg.setStatus('mandatory')
cdx6500PCTRipParamBootpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamBootpMaxHops.setStatus('mandatory')
cdx6500PCTRipParamBootpSbf = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamBootpSbf.setStatus('mandatory')
cdx6500PCTRipParamEgpSysNum = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamEgpSysNum.setStatus('mandatory')
cdx6500PCTRipParamEgpReadvert = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamEgpReadvert.setStatus('mandatory')
cdx6500PCTRipParamRip = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamRip.setStatus('mandatory')
cdx6500PCTRipParamRipOrigDef = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamRipOrigDef.setStatus('mandatory')
cdx6500PCTRipParamAdvDefMetCost = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamAdvDefMetCost.setStatus('mandatory')
cdx6500PCTRipParamNextHopDefGway = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamNextHopDefGway.setStatus('mandatory')
cdx6500PCTRipParamDistDefGway = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamDistDefGway.setStatus('mandatory')
cdx6500PCTRipParamRoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamRoutTableSize.setStatus('mandatory')
cdx6500PCTRipParamDirBcast = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamDirBcast.setStatus('mandatory')
cdx6500PCTRipParamInternalNetMask = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamInternalNetMask.setStatus('mandatory')
cdx6500PCTRipParamInternalIpAd = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamInternalIpAd.setStatus('mandatory')
cdx6500PCTRipParamCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamCacheSize.setStatus('mandatory')
cdx6500PCTRipParamReasmBuffSize = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2048, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamReasmBuffSize.setStatus('mandatory')
cdx6500PCTRipParamAccessCntrl = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipParamAccessCntrl.setStatus('mandatory')
cdx6500PCTRdefSubGwayTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 30), )
if mibBuilder.loadTexts: cdx6500PCTRdefSubGwayTable.setStatus('mandatory')
cdx6500PCTRdefSubGwayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 30, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRdefSubGwayIndex"))
if mibBuilder.loadTexts: cdx6500PCTRdefSubGwayEntry.setStatus('mandatory')
cdx6500PCTRdefSubGwayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRdefSubGwayIndex.setStatus('mandatory')
cdx6500PCTRdefSubGwaySubnetAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 30, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRdefSubGwaySubnetAd.setStatus('mandatory')
cdx6500PCTRdefSubGwayNextHopAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 30, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRdefSubGwayNextHopAd.setStatus('mandatory')
cdx6500PCTRdefSubGwayDistToGway = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 30, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRdefSubGwayDistToGway.setStatus('mandatory')
cdx6500PCTRStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 31), )
if mibBuilder.loadTexts: cdx6500PCTRStaticRouteTable.setStatus('mandatory')
cdx6500PCTRStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 31, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRipRouteIndex"))
if mibBuilder.loadTexts: cdx6500PCTRStaticRouteEntry.setStatus('mandatory')
cdx6500PCTRipRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRipRouteIndex.setStatus('mandatory')
cdx6500PCTRipRouteIpNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 31, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipRouteIpNetwork.setStatus('mandatory')
cdx6500PCTRipRouteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 31, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipRouteIpMask.setStatus('mandatory')
cdx6500PCTRipRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 31, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipRouteNextHop.setStatus('mandatory')
cdx6500PCTRipRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 31, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRipRouteCost.setStatus('mandatory')
cdx6500PCTRoutInterchTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 32), )
if mibBuilder.loadTexts: cdx6500PCTRoutInterchTable.setStatus('optional')
cdx6500PCTRoutInterchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 32, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRoutInterchIndex"))
if mibBuilder.loadTexts: cdx6500PCTRoutInterchEntry.setStatus('mandatory')
cdx6500PCTRoutInterchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRoutInterchIndex.setStatus('mandatory')
cdx6500PCTRoutInterchInterchNeighAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRoutInterchInterchNeighAs.setStatus('mandatory')
cdx6500PCTRoutInterchSourceAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 32, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRoutInterchSourceAs.setStatus('mandatory')
cdx6500PCTRoutInterchIpNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 32, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRoutInterchIpNetwork.setStatus('mandatory')
cdx6500PCTRoutInterchUseIgpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRoutInterchUseIgpMetric.setStatus('mandatory')
cdx6500PCTRoutInterchMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 32, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRoutInterchMetric.setStatus('mandatory')
cdx6500PCTRinInterchTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 33), )
if mibBuilder.loadTexts: cdx6500PCTRinInterchTable.setStatus('optional')
cdx6500PCTRinInterchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 33, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRinInterchIndex"))
if mibBuilder.loadTexts: cdx6500PCTRinInterchEntry.setStatus('mandatory')
cdx6500PCTRinInterchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRinInterchIndex.setStatus('mandatory')
cdx6500PCTRinInterchNeighAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRinInterchNeighAs.setStatus('mandatory')
cdx6500PCTRinInterchIpNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 33, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRinInterchIpNetwork.setStatus('mandatory')
cdx6500PCTRinInterchUseEgpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRinInterchUseEgpMetric.setStatus('mandatory')
cdx6500PCTRinInterchMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRinInterchMetric.setStatus('mandatory')
cdx6500PCTRfilterTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 34), )
if mibBuilder.loadTexts: cdx6500PCTRfilterTable.setStatus('mandatory')
cdx6500PCTRfilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 34, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRfilterIndex"))
if mibBuilder.loadTexts: cdx6500PCTRfilterEntry.setStatus('mandatory')
cdx6500PCTRfilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRfilterIndex.setStatus('mandatory')
cdx6500PCTRfilterDstIpAd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 34, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRfilterDstIpAd.setStatus('mandatory')
cdx6500PCTRfilterAdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 34, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRfilterAdMask.setStatus('mandatory')
cdx6500PCTRifState1 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState1.setStatus('optional')
cdx6500PCTRifState2 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState2.setStatus('mandatory')
cdx6500PCTRifState3 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState3.setStatus('mandatory')
cdx6500PCTRifState4 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState4.setStatus('mandatory')
cdx6500PCTRifState5 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState5.setStatus('mandatory')
cdx6500PCTRifState6 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState6.setStatus('mandatory')
cdx6500PCTRifState7 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState7.setStatus('mandatory')
cdx6500PCTRifState8 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState8.setStatus('mandatory')
cdx6500PCTRifState9 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState9.setStatus('mandatory')
cdx6500PCTRifState10 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState10.setStatus('mandatory')
cdx6500PCTRifState11 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState11.setStatus('mandatory')
cdx6500PCTRifState12 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState12.setStatus('mandatory')
cdx6500PCTRifState13 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState13.setStatus('mandatory')
cdx6500PCTRifState14 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState14.setStatus('mandatory')
cdx6500PCTRifState15 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState15.setStatus('mandatory')
cdx6500PCTRifState16 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState16.setStatus('mandatory')
cdx6500PCTRifState17 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState17.setStatus('mandatory')
cdx6500PCTRifState18 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState18.setStatus('mandatory')
cdx6500PCTRifState19 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState19.setStatus('mandatory')
cdx6500PCTRifState20 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState20.setStatus('mandatory')
cdx6500PCTRifState21 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState21.setStatus('mandatory')
cdx6500PCTRifState22 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState22.setStatus('mandatory')
cdx6500PCTRifState23 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState23.setStatus('mandatory')
cdx6500PCTRifState24 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState24.setStatus('mandatory')
cdx6500PCTRifState25 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState25.setStatus('mandatory')
cdx6500PCTRifState26 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState26.setStatus('mandatory')
cdx6500PCTRifState27 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState27.setStatus('mandatory')
cdx6500PCTRifState28 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState28.setStatus('mandatory')
cdx6500PCTRifState29 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState29.setStatus('mandatory')
cdx6500PCTRifState30 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState30.setStatus('mandatory')
cdx6500PCTRifState31 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState31.setStatus('mandatory')
cdx6500PCTRifState32 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState32.setStatus('mandatory')
cdx6500PCTRifState33 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState33.setStatus('mandatory')
cdx6500PCTRifState34 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState34.setStatus('mandatory')
cdx6500PCTRifState35 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState35.setStatus('mandatory')
cdx6500PCTRifState36 = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifState36.setStatus('mandatory')
cdx6500PCTReventsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 71), )
if mibBuilder.loadTexts: cdx6500PCTReventsTable.setStatus('mandatory')
cdx6500PCTReventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 71, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTReventsIndex"))
if mibBuilder.loadTexts: cdx6500PCTReventsEntry.setStatus('mandatory')
cdx6500PCTReventsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 71, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTReventsIndex.setStatus('mandatory')
cdx6500PCTReventsSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 71, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 50))).clone(namedValues=NamedValues(("arp", 0), ("ip", 1), ("icmp", 2), ("udp", 3), ("rip", 4), ("egp", 5), ("ospf", 6), ("ipx", 7), ("tkr", 8), ("eth", 9), ("newvalArp", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTReventsSubsystem.setStatus('mandatory')
cdx6500PCTReventsPerPktTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 71, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTReventsPerPktTrace.setStatus('mandatory')
cdx6500PCTReventsUnusualOper = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 71, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTReventsUnusualOper.setStatus('mandatory')
cdx6500PCTReventsCommonOper = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 71, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTReventsCommonOper.setStatus('mandatory')
cdx6500PCTRpriorityIpTraffic = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("newvalLow", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRpriorityIpTraffic.setStatus('mandatory')
cdx6500PCTRpriorityIpxTraffic = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("newvalLow", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRpriorityIpxTraffic.setStatus('mandatory')
cdx6500PCTRMaxIpInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRMaxIpInterfaces.setStatus('mandatory')
cdx6500PCTRAllSubnetBrcast = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRAllSubnetBrcast.setStatus('mandatory')
cdx6500PCTRIpFwdEnable = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRIpFwdEnable.setStatus('mandatory')
cdx6500PCTRUdpFwdEnable = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRUdpFwdEnable.setStatus('mandatory')
cdx6500PCTRpriorityAp2Traffic = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRpriorityAp2Traffic.setStatus('mandatory')
cdx6500PCTRarpParamMaxQueue = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpParamMaxQueue.setStatus('mandatory')
cdx6500PCTRarpParamTimeRetx = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500PCTRarpParamTimeRetx.setStatus('mandatory')
cdx6500PCTRRIPRouteControlTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 81), )
if mibBuilder.loadTexts: cdx6500PCTRRIPRouteControlTable.setStatus('mandatory')
cdx6500PCTRifStateConfTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 83), )
if mibBuilder.loadTexts: cdx6500PCTRifStateConfTable.setStatus('mandatory')
cdx6500PCTRifStateConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 83, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRifStateConfIndex"))
if mibBuilder.loadTexts: cdx6500PCTRifStateConfEntry.setStatus('mandatory')
cdx6500PCTRifStateConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 83, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifStateConfIndex.setStatus('mandatory')
cdx6500PCTRifStateConfState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 83, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unconfigured", 2), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRifStateConfState.setStatus('mandatory')
cdx6500PCTRRIPRouteControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 81, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRRIPRouteControlIndex"))
if mibBuilder.loadTexts: cdx6500PCTRRIPRouteControlEntry.setStatus('mandatory')
cdx6500PCTRRIPRouteControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 81, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRRIPRouteControlIndex.setStatus('mandatory')
cdx6500PCTRRIPRouteControlIpNet = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 81, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRRIPRouteControlIpNet.setStatus('mandatory')
cdx6500PCTRRIPRouteControlIpMsk = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 81, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRRIPRouteControlIpMsk.setStatus('mandatory')
cdx6500PCTRRRCInIniface = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 81, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRRRCInIniface.setStatus('mandatory')
cdx6500PCTRRRCOutIniface = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 81, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRRRCOutIniface.setStatus('mandatory')
proProtoIpDefGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwAddress.setStatus('optional')
proProtoIpDefGwCost = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwCost.setStatus('optional')
proProtoIpDefGwAge = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwAge.setStatus('optional')
cdx6500PCTRtunnelTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82), )
if mibBuilder.loadTexts: cdx6500PCTRtunnelTable.setStatus('mandatory')
cdx6500PCTRtunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PCTRtunnelIndex"))
if mibBuilder.loadTexts: cdx6500PCTRtunnelEntry.setStatus('mandatory')
cdx6500PCTRtunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelIndex.setStatus('mandatory')
cdx6500PCTRtunnelDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelDstAddr.setStatus('mandatory')
cdx6500PCTRtunnelSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelSrcAddr.setStatus('mandatory')
cdx6500PCTRtunnelLconNo = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelLconNo.setStatus('mandatory')
cdx6500PCTRtunnelIfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelIfNo.setStatus('mandatory')
cdx6500PCTRtunnelEncrProf = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelEncrProf.setStatus('mandatory')
cdx6500PCTRtunnelProt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gre", 1), ("l2tp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelProt.setStatus('mandatory')
cdx6500PCTRtunnelGreCksSqn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelGreCksSqn.setStatus('mandatory')
cdx6500PCTRtunnelPayProt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelPayProt.setStatus('mandatory')
cdx6500PCTRtunnelDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelDebug.setStatus('mandatory')
cdx6500PCTRtunnelLANnxthopAddr = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelLANnxthopAddr.setStatus('mandatory')
cdx6500PCTRtunnelRtpHdrComProf = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelRtpHdrComProf.setStatus('mandatory')
cdx6500PCTRtunnelGreResyncCntr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelGreResyncCntr.setStatus('mandatory')
cdx6500PCTRtunnelBrdgLnkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 5, 82, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PCTRtunnelBrdgLnkNo.setStatus('mandatory')
cdx6500PSTRtunnelTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4), )
if mibBuilder.loadTexts: cdx6500PSTRtunnelTable.setStatus('mandatory')
cdx6500PSTRtunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1), ).setIndexNames((0, "ROUTER-OPT-MIB", "cdx6500PSTRtunnelIndex"))
if mibBuilder.loadTexts: cdx6500PSTRtunnelEntry.setStatus('mandatory')
cdx6500PSTRtunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelIndex.setStatus('mandatory')
cdx6500PSTRtunnelIpPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelIpPktIn.setStatus('mandatory')
cdx6500PSTRtunnelIpPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelIpPktOut.setStatus('mandatory')
cdx6500PSTRtunnelIpPktDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelIpPktDisc.setStatus('mandatory')
cdx6500PSTRtunnelIpxPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelIpxPktIn.setStatus('mandatory')
cdx6500PSTRtunnelIpxPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelIpxPktOut.setStatus('mandatory')
cdx6500PSTRtunnelIpxPktDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelIpxPktDisc.setStatus('mandatory')
cdx6500PSTRtunnelSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelSrcAddr.setStatus('mandatory')
cdx6500PSTRtunnelDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelDstAddr.setStatus('mandatory')
cdx6500PSTRtunnelPayProt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 3, 5, 6, 7))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("brg", 4), ("ip-ipx", 3), ("ip-brg", 5), ("ipx-brg", 6), ("ip-ipx-brg", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelPayProt.setStatus('mandatory')
cdx6500PSTRtunnelEncrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelEncrStatus.setStatus('mandatory')
cdx6500PSTRtunnelRuihcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ena", 1), ("dis", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelRuihcStatus.setStatus('mandatory')
cdx6500PSTRtunnelBrdgPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelBrdgPktIn.setStatus('mandatory')
cdx6500PSTRtunnelBrdgPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelBrdgPktOut.setStatus('mandatory')
cdx6500PSTRtunnelBrdgPktDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 4, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500PSTRtunnelBrdgPktDisc.setStatus('mandatory')
mibBuilder.exportSymbols("ROUTER-OPT-MIB", cdx6500PCTRegpNeighTable=cdx6500PCTRegpNeighTable, cdx6500PCTRifState30=cdx6500PCTRifState30, cdx6500PCTRifRoutFlushTime=cdx6500PCTRifRoutFlushTime, cdx6500PCTRaccControlIndex=cdx6500PCTRaccControlIndex, cdx6500PCTRipParamRoutTableSize=cdx6500PCTRipParamRoutTableSize, cdx6500PCTRifStateConfTable=cdx6500PCTRifStateConfTable, cdx6500PCTRRRCInIniface=cdx6500PCTRRRCInIniface, cdx6500PCTReventsSubsystem=cdx6500PCTReventsSubsystem, cdx6500PCTRaccControlInIniface=cdx6500PCTRaccControlInIniface, cdx6500PCTRtunnelGreCksSqn=cdx6500PCTRtunnelGreCksSqn, cdx6500PCTRaccControlEntry=cdx6500PCTRaccControlEntry, cdx6500PCTRifState8=cdx6500PCTRifState8, cdx6500PCTRinInterchIpNetwork=cdx6500PCTRinInterchIpNetwork, cdx6500PCTRifState35=cdx6500PCTRifState35, cdx6500PCTRifState18=cdx6500PCTRifState18, cdx6500=cdx6500, cdx6500PCTRipParamRip=cdx6500PCTRipParamRip, cdx6500PCTRifState3=cdx6500PCTRifState3, cdx6500PCTRipParamInternalIpAd=cdx6500PCTRipParamInternalIpAd, cdx6500PCTRifState26=cdx6500PCTRifState26, cdx6500PCTRifState23=cdx6500PCTRifState23, cdx6500PCTRifState14=cdx6500PCTRifState14, cdx6500PCTRifTrigUpdate=cdx6500PCTRifTrigUpdate, cdx6500PCTRifConfOvrDefRoute=cdx6500PCTRifConfOvrDefRoute, cdx6500PCTRAcceptRIPRouteIpNet=cdx6500PCTRAcceptRIPRouteIpNet, cdx6500PCTRipParamDirBcast=cdx6500PCTRipParamDirBcast, cdxProductSpecific=cdxProductSpecific, cdx6500PCTRbootpServEntry=cdx6500PCTRbootpServEntry, cdx6500PCTReventsIndex=cdx6500PCTReventsIndex, cdx6500PCTRarpParamAutoRef=cdx6500PCTRarpParamAutoRef, cdx6500PSTRtunnelIpPktOut=cdx6500PSTRtunnelIpPktOut, cdx6500PCTRifState21=cdx6500PCTRifState21, cdx6500PCTRegpAsEntry=cdx6500PCTRegpAsEntry, cdx6500PCTRoutInterchIpNetwork=cdx6500PCTRoutInterchIpNetwork, cdx6500PCTRRIPRouteControlIpMsk=cdx6500PCTRRIPRouteControlIpMsk, DisplayString=DisplayString, cdx6500PCTRtunnelProt=cdx6500PCTRtunnelProt, cdx6500PCTRdefSubGwayNextHopAd=cdx6500PCTRdefSubGwayNextHopAd, cdx6500PCTRifConfSr=cdx6500PCTRifConfSr, cdx6500PCTRifAuthType=cdx6500PCTRifAuthType, cdx6500PCTRegpAsIndex=cdx6500PCTRegpAsIndex, cdx6500PCTRipParamNextHopDefGway=cdx6500PCTRipParamNextHopDefGway, cdx6500PCTRifState10=cdx6500PCTRifState10, cdx6500PCTRarpCacheMacAd=cdx6500PCTRarpCacheMacAd, cdx6500PCTRifState34=cdx6500PCTRifState34, cdx6500PCTRinInterchNeighAs=cdx6500PCTRinInterchNeighAs, cdx6500PCTRRRCOutIniface=cdx6500PCTRRRCOutIniface, cdx6500PCTRaccControlType=cdx6500PCTRaccControlType, cdx6500PCTRaccControlLstProt=cdx6500PCTRaccControlLstProt, cdx6500PCTRipParamBootpFwdg=cdx6500PCTRipParamBootpFwdg, cdx6500PCTRRIPRouteControlTable=cdx6500PCTRRIPRouteControlTable, cdx6500PCTRtunnelIfNo=cdx6500PCTRtunnelIfNo, cdx6500PCTRarpCacheProtocolAd=cdx6500PCTRarpCacheProtocolAd, cdx6500PCTRipParamEgpSysNum=cdx6500PCTRipParamEgpSysNum, cdx6500PCTRipParamReasmBuffSize=cdx6500PCTRipParamReasmBuffSize, cdx6500PCTRoutInterchEntry=cdx6500PCTRoutInterchEntry, cdx6500PCTRAcceptRIPRouteEntry=cdx6500PCTRAcceptRIPRouteEntry, cdx6500PCTRtunnelLANnxthopAddr=cdx6500PCTRtunnelLANnxthopAddr, cdx6500PCTRaccControlSrcAd=cdx6500PCTRaccControlSrcAd, cdx6500PCTRaccControlLstPort=cdx6500PCTRaccControlLstPort, cdx6500PSTRtunnelIpxPktOut=cdx6500PSTRtunnelIpxPktOut, cdx6500PCTRoutInterchUseIgpMetric=cdx6500PCTRoutInterchUseIgpMetric, cdx6500PCTRifConfIpAd=cdx6500PCTRifConfIpAd, cdx6500PSTRouterGroup=cdx6500PSTRouterGroup, cdx6500PCTRaccControlFstProt=cdx6500PCTRaccControlFstProt, cdx6500PCTRifState16=cdx6500PCTRifState16, cdx6500PCTRifConfSplitHorizon=cdx6500PCTRifConfSplitHorizon, cdx6500PCTRifRipMetric=cdx6500PCTRifRipMetric, cdx6500PCTRoutInterchTable=cdx6500PCTRoutInterchTable, cdx6500PCTRifState33=cdx6500PCTRifState33, cdx6500PCTReventsUnusualOper=cdx6500PCTReventsUnusualOper, cdx6500PCTRAllSubnetBrcast=cdx6500PCTRAllSubnetBrcast, cdx6500PCTRifConfSndgSubRoute=cdx6500PCTRifConfSndgSubRoute, cdx6500PCTRifState6=cdx6500PCTRifState6, cdx6500PCTRifConfIndex=cdx6500PCTRifConfIndex, cdx6500PCTRifState27=cdx6500PCTRifState27, cdx6500PCTRStaticRouteTable=cdx6500PCTRStaticRouteTable, cdx6500PCTRifConfEntry=cdx6500PCTRifConfEntry, cdx6500PCTRifConfRcvgDynNets=cdx6500PCTRifConfRcvgDynNets, proProtoIpDefGwAge=proProtoIpDefGwAge, cdx6500PSTRtunnelBrdgPktOut=cdx6500PSTRtunnelBrdgPktOut, cdx6500PCTRifState12=cdx6500PCTRifState12, cdx6500PCTRdefSubGwayIndex=cdx6500PCTRdefSubGwayIndex, cdx6500PCTRifState13=cdx6500PCTRifState13, cdx6500PCTRbootpServTable=cdx6500PCTRbootpServTable, cdx6500PCTRaccControlDstPort=cdx6500PCTRaccControlDstPort, cdx6500PCTRarpParamUseTime=cdx6500PCTRarpParamUseTime, proProtoIpDefGwAddress=proProtoIpDefGwAddress, cdx6500PCTRarpParamMaxQueue=cdx6500PCTRarpParamMaxQueue, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500PCTRegpAsInterchFlag=cdx6500PCTRegpAsInterchFlag, cdx6500PCTRbootpServIndex=cdx6500PCTRbootpServIndex, cdx6500PCTRtunnelEncrProf=cdx6500PCTRtunnelEncrProf, cdx6500PCTRifConfBcastFill=cdx6500PCTRifConfBcastFill, cdx6500PCTRipParamAccessCntrl=cdx6500PCTRipParamAccessCntrl, cdx6500PCTRifState2=cdx6500PCTRifState2, cdx6500PCTRStaticRouteEntry=cdx6500PCTRStaticRouteEntry, cdx6500PCTRipParamBootpMaxHops=cdx6500PCTRipParamBootpMaxHops, cdx6500PCTRegpAsTable=cdx6500PCTRegpAsTable, cdx6500PCTRifState29=cdx6500PCTRifState29, cdx6500PCTRifState7=cdx6500PCTRifState7, cdx6500PCTRarpParamProxySub=cdx6500PCTRarpParamProxySub, cdx6500PCTRifState32=cdx6500PCTRifState32, cdx6500PCTRifState19=cdx6500PCTRifState19, cdx6500PCTReventsTable=cdx6500PCTReventsTable, cdx6500PCTRtunnelIndex=cdx6500PCTRtunnelIndex, cdx6500PCTRifState31=cdx6500PCTRifState31, cdx6500PSTRtunnelPayProt=cdx6500PSTRtunnelPayProt, cdx6500PCTRifState1=cdx6500PCTRifState1, cdx6500PCTRifStateConfIndex=cdx6500PCTRifStateConfIndex, cdx6500PCTRfilterDstIpAd=cdx6500PCTRfilterDstIpAd, cdx6500PCTRRIPRouteControlIndex=cdx6500PCTRRIPRouteControlIndex, cdx6500PSTRtunnelSrcAddr=cdx6500PSTRtunnelSrcAddr, cdx6500PCTRipRouteCost=cdx6500PCTRipRouteCost, cdx6500PCTReventsPerPktTrace=cdx6500PCTReventsPerPktTrace, cdx6500PCTRarpParamRefTime=cdx6500PCTRarpParamRefTime, cdx6500PCTRifStateConfEntry=cdx6500PCTRifStateConfEntry, cdx6500PCTRarpCacheTable=cdx6500PCTRarpCacheTable, cdx6500PCTRifConfSndgNetRoute=cdx6500PCTRifConfSndgNetRoute, cdx6500PCTRifRoutInvldTime=cdx6500PCTRifRoutInvldTime, cdx6500PCTRaccControlDstMask=cdx6500PCTRaccControlDstMask, cdx6500PCTRifRdpLevel=cdx6500PCTRifRdpLevel, cdx6500PCTRifMaxIpMTUSize=cdx6500PCTRifMaxIpMTUSize, cdx6500PCTRoutInterchInterchNeighAs=cdx6500PCTRoutInterchInterchNeighAs, cdx6500PCTRifConfAdMask=cdx6500PCTRifConfAdMask, cdx6500PCTRifState20=cdx6500PCTRifState20, cdx6500PCTRifState11=cdx6500PCTRifState11, cdx6500PCTRtunnelPayProt=cdx6500PCTRtunnelPayProt, cdx6500PCTRdefSubGwayEntry=cdx6500PCTRdefSubGwayEntry, cdx6500PCTRinInterchEntry=cdx6500PCTRinInterchEntry, cdx6500PSTRtunnelTable=cdx6500PSTRtunnelTable, cdx6500PCTRifConfTable=cdx6500PCTRifConfTable, cdx6500PCTRouterGroup=cdx6500PCTRouterGroup, cdx6500PCTRipParamRipOrigDef=cdx6500PCTRipParamRipOrigDef, cdx6500PCTRifState15=cdx6500PCTRifState15, cdx6500PCTRipRouteIpMask=cdx6500PCTRipRouteIpMask, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500PCTRifConfSndgStatRoute=cdx6500PCTRifConfSndgStatRoute, cdx6500PCTRipParamAdvDefMetCost=cdx6500PCTRipParamAdvDefMetCost, cdx6500PCTRarpCacheEntry=cdx6500PCTRarpCacheEntry, cdx6500PCTRegpAsNeighAs=cdx6500PCTRegpAsNeighAs, cdx6500PCTRUdpFwdEnable=cdx6500PCTRUdpFwdEnable, cdx6500PCTRtunnelBrdgLnkNo=cdx6500PCTRtunnelBrdgLnkNo, cdx6500PCTRfilterEntry=cdx6500PCTRfilterEntry, cdx6500PCTRaccControlDstAd=cdx6500PCTRaccControlDstAd, cdx6500PCTRdefSubGwayDistToGway=cdx6500PCTRdefSubGwayDistToGway, MacAddress=MacAddress, cdx6500PCTRAcceptRIPRouteIndex=cdx6500PCTRAcceptRIPRouteIndex, cdx6500PCTRRIPRouteControlEntry=cdx6500PCTRRIPRouteControlEntry, cdx6500PCTRifSecPrdBcastIntv=cdx6500PCTRifSecPrdBcastIntv, cdx6500PCTRegpNeighIdAd=cdx6500PCTRegpNeighIdAd, cdx6500PCTRifState5=cdx6500PCTRifState5, cdx6500PCTRtunnelLconNo=cdx6500PCTRtunnelLconNo, cdx6500PCTRtunnelSrcAddr=cdx6500PCTRtunnelSrcAddr, cdx6500PCTRifSendAggRoutes=cdx6500PCTRifSendAggRoutes, cdx6500PCTRipRouteIndex=cdx6500PCTRipRouteIndex, cdx6500PCTRifConfSndgDefRoute=cdx6500PCTRifConfSndgDefRoute, cdx6500PCTRifState25=cdx6500PCTRifState25, cdx6500PCTRarpParamTimeRetx=cdx6500PCTRarpParamTimeRetx, cdx6500PSTRtunnelIpxPktIn=cdx6500PSTRtunnelIpxPktIn, cdx6500PCTRipParamBootpSbf=cdx6500PCTRipParamBootpSbf, cdx6500PCTRaccControlSrcPort=cdx6500PCTRaccControlSrcPort, cdx6500PCTRarpCacheIndex=cdx6500PCTRarpCacheIndex, cdx6500PCTRpriorityIpxTraffic=cdx6500PCTRpriorityIpxTraffic, cdx6500PCTRdefSubGwayTable=cdx6500PCTRdefSubGwayTable, cdx6500PSTRtunnelBrdgPktDisc=cdx6500PSTRtunnelBrdgPktDisc, cdx6500PCTRifState22=cdx6500PCTRifState22, cdx6500PSTRtunnelIndex=cdx6500PSTRtunnelIndex, cdx6500PCTRaccControlOutIniface=cdx6500PCTRaccControlOutIniface, cdx6500PCTRaccControlInLcon=cdx6500PCTRaccControlInLcon, cdx6500PCTRAcceptRIPRouteTable=cdx6500PCTRAcceptRIPRouteTable, cdx6500PCTRifState9=cdx6500PCTRifState9, cdx6500PCTRifStateConfState=cdx6500PCTRifStateConfState, cdx6500PSTRtunnelEncrStatus=cdx6500PSTRtunnelEncrStatus, cdx6500PCTRegpNeighIndex=cdx6500PCTRegpNeighIndex, cdx6500PCTRarpCacheIfNum=cdx6500PCTRarpCacheIfNum, cdx6500Configuration=cdx6500Configuration, cdx6500PCTRarpCacheProtocol=cdx6500PCTRarpCacheProtocol, cdx6500PCTRifSendRipVer=cdx6500PCTRifSendRipVer, cdx6500PCTRbootpServAd=cdx6500PCTRbootpServAd, cdx6500PCTRifConfTagAsNum=cdx6500PCTRifConfTagAsNum, cdx6500PCTRipParamEgpReadvert=cdx6500PCTRipParamEgpReadvert, cdx6500PCTRipParamCacheSize=cdx6500PCTRipParamCacheSize, cdx6500PSTRtunnelDstAddr=cdx6500PSTRtunnelDstAddr, cdx6500PCTRifRdpEnable=cdx6500PCTRifRdpEnable, cdx6500PCTRifState28=cdx6500PCTRifState28, cdx6500PCTRifState36=cdx6500PCTRifState36, cdx6500PSTRtunnelBrdgPktIn=cdx6500PSTRtunnelBrdgPktIn, cdx6500PCTRipRouteNextHop=cdx6500PCTRipRouteNextHop, cdx6500PCTRifConfRcvgRipPkts=cdx6500PCTRifConfRcvgRipPkts, cdx6500PCTRtunnelTable=cdx6500PCTRtunnelTable, cdx6500PCTRpriorityIpTraffic=cdx6500PCTRpriorityIpTraffic, cdx6500PCTReventsEntry=cdx6500PCTReventsEntry, cdx6500PSTRtunnelIpxPktDisc=cdx6500PSTRtunnelIpxPktDisc, proProtoIpDefGwCost=proProtoIpDefGwCost, cdx6500PCTRtunnelDebug=cdx6500PCTRtunnelDebug, cdx6500PCTRinInterchIndex=cdx6500PCTRinInterchIndex, cdx6500PSTRtunnelIpPktIn=cdx6500PSTRtunnelIpPktIn, cdx6500PCTRtunnelGreResyncCntr=cdx6500PCTRtunnelGreResyncCntr, cdx6500PCTRifState4=cdx6500PCTRifState4, cdx6500PCTRegpAsUseEgMetric=cdx6500PCTRegpAsUseEgMetric, cdx6500PCTRaccControlOutLcon=cdx6500PCTRaccControlOutLcon, cdx6500PCTRtunnelEntry=cdx6500PCTRtunnelEntry, cdx6500PCTRifState24=cdx6500PCTRifState24, cdx6500PSTRtunnelEntry=cdx6500PSTRtunnelEntry, cdx6500PCTRifConfIfNum=cdx6500PCTRifConfIfNum, cdx6500PCTRIpFwdEnable=cdx6500PCTRIpFwdEnable, cdx6500PCTRifConfBcastStyle=cdx6500PCTRifConfBcastStyle, codex=codex, cdx6500PCTRifState17=cdx6500PCTRifState17, cdx6500PCTRfilterAdMask=cdx6500PCTRfilterAdMask, cdx6500Controls=cdx6500Controls, cdx6500PCTRpriorityAp2Traffic=cdx6500PCTRpriorityAp2Traffic, cdx6500PCTReventsCommonOper=cdx6500PCTReventsCommonOper, cdx6500PSTRtunnelIpPktDisc=cdx6500PSTRtunnelIpPktDisc, cdx6500PCTRfilterTable=cdx6500PCTRfilterTable, cdx6500PCTRegpNeighAs=cdx6500PCTRegpNeighAs, cdx6500PCTRinInterchTable=cdx6500PCTRinInterchTable, cdx6500PCTRegpAsDefMetric=cdx6500PCTRegpAsDefMetric, cdx6500PSTRtunnelRuihcStatus=cdx6500PSTRtunnelRuihcStatus, cdx6500Statistics=cdx6500Statistics, cdx6500PCTRinInterchUseEgpMetric=cdx6500PCTRinInterchUseEgpMetric, cdx6500PCTRMaxIpInterfaces=cdx6500PCTRMaxIpInterfaces, cdx6500PCTRtunnelRtpHdrComProf=cdx6500PCTRtunnelRtpHdrComProf, cdx6500PCTRipRouteIpNetwork=cdx6500PCTRipRouteIpNetwork, cdx6500PCTRoutInterchSourceAs=cdx6500PCTRoutInterchSourceAs, cdx6500PCTRaccControlSrcMask=cdx6500PCTRaccControlSrcMask, cdx6500PCTRinInterchMetric=cdx6500PCTRinInterchMetric, cdx6500PCTRaccControlTable=cdx6500PCTRaccControlTable, cdx6500PCTRipParamInternalNetMask=cdx6500PCTRipParamInternalNetMask, cdx6500PCTRoutInterchIndex=cdx6500PCTRoutInterchIndex, cdx6500PCTRarpParamProxy=cdx6500PCTRarpParamProxy, cdx6500PCTRifAuthKey=cdx6500PCTRifAuthKey, cdx6500PCTRfilterIndex=cdx6500PCTRfilterIndex, cdx6500PCTRifConfOvrStatRoute=cdx6500PCTRifConfOvrStatRoute, cdx6500PCTRifConfRcvgDynSubs=cdx6500PCTRifConfRcvgDynSubs, cdx6500PCTRRIPRouteControlIpNet=cdx6500PCTRRIPRouteControlIpNet, cdx6500PCTRtunnelDstAddr=cdx6500PCTRtunnelDstAddr, cdx6500PCTRaccControlFstPort=cdx6500PCTRaccControlFstPort, cdx6500PCTRipParamDistDefGway=cdx6500PCTRipParamDistDefGway, cdx6500PCTRoutInterchMetric=cdx6500PCTRoutInterchMetric, cdx6500PCTRdefSubGwaySubnetAd=cdx6500PCTRdefSubGwaySubnetAd, cdx6500PCTRifOnDemandRip=cdx6500PCTRifOnDemandRip, cdx6500PCTRegpNeighEntry=cdx6500PCTRegpNeighEntry)
