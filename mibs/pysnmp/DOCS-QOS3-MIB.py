#
# PySNMP MIB module DOCS-QOS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-QOS3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:27:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
DocsL2vpnIfList, clabProjDocsis = mibBuilder.importSymbols("CLAB-DEF-MIB", "DocsL2vpnIfList", "clabProjDocsis")
DscpOrAny, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "DscpOrAny")
IfDirection, AttributeMask, AttrAggrRuleMask, Dsid, ChannelList, ChSetId, ChId = mibBuilder.importSymbols("DOCS-IF3-MIB", "IfDirection", "AttributeMask", "AttrAggrRuleMask", "Dsid", "ChannelList", "ChSetId", "ChId")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, iso, Bits, TimeTicks, Gauge32, MibIdentifier, NotificationType, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Bits", "TimeTicks", "Gauge32", "MibIdentifier", "NotificationType", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Counter64", "ObjectIdentity")
DisplayString, RowStatus, MacAddress, TruthValue, TextualConvention, StorageType, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TruthValue", "TextualConvention", "StorageType", "TimeStamp")
docsQosMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21))
docsQosMib.setRevisions(('2016-08-18 00:00', '2016-05-05 00:00', '2015-04-08 00:00', '2014-07-29 00:00', '2012-08-09 00:00', '2012-03-29 00:00', '2011-02-10 00:00', '2009-10-02 00:00', '2009-05-29 00:00', '2009-01-21 00:00', '2008-05-22 00:00', '2007-12-06 00:00', '2007-08-03 00:00', '2007-05-18 00:00', '2006-12-07 17:00',))
if mibBuilder.loadTexts: docsQosMib.setLastUpdated('201608180000Z')
if mibBuilder.loadTexts: docsQosMib.setOrganization('Cable Television Laboratories, Inc.')
class BitRate(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class SchedulingType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 1), ("bestEffort", 2), ("nonRealTimePollingService", 3), ("realTimePollingService", 4), ("unsolictedGrantServiceWithAD", 5), ("unsolictedGrantService", 6))

docsQosMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1))
docsQosPktClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1), )
if mibBuilder.loadTexts: docsQosPktClassTable.setStatus('current')
docsQosPktClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQosPktClassId"))
if mibBuilder.loadTexts: docsQosPktClassEntry.setStatus('current')
docsQosPktClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsQosPktClassId.setStatus('current')
docsQosPktClassDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 2), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDirection.setStatus('current')
docsQosPktClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassPriority.setStatus('current')
docsQosPktClassIpTosLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosLow.setStatus('current')
docsQosPktClassIpTosHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosHigh.setStatus('current')
docsQosPktClassIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosMask.setStatus('current')
docsQosPktClassIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 258))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpProtocol.setStatus('current')
docsQosPktClassIpSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpSourceAddr.setStatus('current')
docsQosPktClassIpSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpSourceMask.setStatus('current')
docsQosPktClassIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpDestAddr.setStatus('current')
docsQosPktClassIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpDestMask.setStatus('current')
docsQosPktClassSourcePortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourcePortStart.setStatus('current')
docsQosPktClassSourcePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourcePortEnd.setStatus('current')
docsQosPktClassDestPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestPortStart.setStatus('current')
docsQosPktClassDestPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 15), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestPortEnd.setStatus('current')
docsQosPktClassDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestMacAddr.setStatus('current')
docsQosPktClassDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestMacMask.setStatus('current')
docsQosPktClassSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourceMacAddr.setStatus('current')
docsQosPktClassEnetProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ethertype", 1), ("dsap", 2), ("mac", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassEnetProtocolType.setStatus('current')
docsQosPktClassEnetProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassEnetProtocol.setStatus('current')
docsQosPktClassUserPriLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassUserPriLow.setStatus('current')
docsQosPktClassUserPriHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassUserPriHigh.setStatus('current')
docsQosPktClassVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassVlanId.setStatus('current')
docsQosPktClassState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassState.setStatus('current')
docsQosPktClassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassPkts.setStatus('current')
docsQosPktClassBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("rulePriority", 0), ("activationState", 1), ("ipTos", 2), ("ipProtocol", 3), ("ipSourceAddr", 4), ("ipSourceMask", 5), ("ipDestAddr", 6), ("ipDestMask", 7), ("sourcePortStart", 8), ("sourcePortEnd", 9), ("destPortStart", 10), ("destPortEnd", 11), ("destMac", 12), ("sourceMac", 13), ("ethertype", 14), ("userPri", 15), ("vlanId", 16), ("flowLabel", 17), ("cmInterfaceMask", 18), ("icmpTypeLow", 19), ("icmpTypeHigh", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassBitMap.setStatus('current')
docsQosPktClassIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpAddrType.setStatus('current')
docsQosPktClassFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassFlowLabel.setStatus('current')
docsQosPktClassCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 30), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassCmInterfaceMask.setStatus('current')
docsQosPktClassIcmpTypeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIcmpTypeLow.setStatus('current')
docsQosPktClassIcmpTypeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIcmpTypeHigh.setStatus('current')
docsQosParamSetTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2), )
if mibBuilder.loadTexts: docsQosParamSetTable.setStatus('current')
docsQosParamSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosParamSetType"), (0, "DOCS-QOS3-MIB", "docsQosParamSetServiceFlowId"))
if mibBuilder.loadTexts: docsQosParamSetEntry.setStatus('current')
docsQosParamSetServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetServiceClassName.setStatus('current')
docsQosParamSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetPriority.setStatus('current')
docsQosParamSetMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 6), BitRate()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficRate.setStatus('current')
docsQosParamSetMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 7), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficBurst.setStatus('current')
docsQosParamSetMinReservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 8), BitRate()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMinReservedRate.setStatus('current')
docsQosParamSetMinReservedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMinReservedPkt.setStatus('current')
docsQosParamSetActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetActiveTimeout.setStatus('current')
docsQosParamSetAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetAdmittedTimeout.setStatus('current')
docsQosParamSetMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxConcatBurst.setStatus('current')
docsQosParamSetSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 13), SchedulingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetSchedulingType.setStatus('current')
docsQosParamSetNomPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetNomPollInterval.setStatus('current')
docsQosParamSetTolPollJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTolPollJitter.setStatus('current')
docsQosParamSetUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetUnsolicitGrantSize.setStatus('current')
docsQosParamSetNomGrantInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetNomGrantInterval.setStatus('current')
docsQosParamSetTolGrantJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTolGrantJitter.setStatus('current')
docsQosParamSetGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setUnits('dataGrants').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetGrantsPerInterval.setStatus('current')
docsQosParamSetTosAndMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTosAndMask.setStatus('current')
docsQosParamSetTosOrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTosOrMask.setStatus('current')
docsQosParamSetMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 22), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxLatency.setStatus('current')
docsQosParamSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("admitted", 2), ("provisioned", 3))))
if mibBuilder.loadTexts: docsQosParamSetType.setStatus('current')
docsQosParamSetRequestPolicyOct = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetRequestPolicyOct.setStatus('current')
docsQosParamSetBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 25), Bits().clone(namedValues=NamedValues(("trafficPriority", 0), ("maxTrafficRate", 1), ("maxTrafficBurst", 2), ("minReservedRate", 3), ("minReservedPkt", 4), ("activeTimeout", 5), ("admittedTimeout", 6), ("maxConcatBurst", 7), ("schedulingType", 8), ("requestPolicy", 9), ("nomPollInterval", 10), ("tolPollJitter", 11), ("unsolicitGrantSize", 12), ("nomGrantInterval", 13), ("tolGrantJitter", 14), ("grantsPerInterval", 15), ("tosOverwrite", 16), ("maxLatency", 17), ("requiredAttrMask", 18), ("forbiddenAttrMask", 19), ("attrAggrMask", 20), ("applicationId", 21), ("multipCntnReqWindow", 22), ("multipBytesReq", 23), ("maxReqPerSidCluster", 24), ("maxOutstandingBytesPerSidCluster", 25), ("maxTotalBytesReqPerSidCluster", 26), ("maximumTimeInSidCluster", 27), ("peakTrafficRate", 28), ("dsResequencing", 29), ("minimumBuffer", 30), ("targetBuffer", 31), ("maximumBuffer", 32), ("aqmEnabled", 33), ("aqmLatencyTarget", 34), ("dataRateUnit", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetBitMap.setStatus('current')
docsQosParamSetServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQosParamSetServiceFlowId.setStatus('current')
docsQosParamSetRequiredAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 27), AttributeMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetRequiredAttrMask.setStatus('current')
docsQosParamSetForbiddenAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 28), AttributeMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetForbiddenAttrMask.setStatus('current')
docsQosParamSetAttrAggrRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 29), AttrAggrRuleMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetAttrAggrRuleMask.setStatus('current')
docsQosParamSetAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetAppId.setStatus('current')
docsQosParamSetMultiplierContentionReqWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 12))).setUnits('eighths').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMultiplierContentionReqWindow.setStatus('current')
docsQosParamSetMultiplierBytesReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ))).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMultiplierBytesReq.setStatus('current')
docsQosParamSetMaxReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxReqPerSidCluster.setStatus('deprecated')
docsQosParamSetMaxOutstandingBytesPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 34), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxOutstandingBytesPerSidCluster.setStatus('deprecated')
docsQosParamSetMaxTotBytesReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 35), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxTotBytesReqPerSidCluster.setStatus('deprecated')
docsQosParamSetMaxTimeInSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxTimeInSidCluster.setStatus('deprecated')
docsQosParamSetPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 37), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetPeakTrafficRate.setStatus('current')
docsQosParamSetDsResequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("resequencingDsidIfBonded", 0), ("noResequencingDsid", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetDsResequencing.setStatus('current')
docsQosParamSetMinimumBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMinimumBuffer.setStatus('current')
docsQosParamSetTargetBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTargetBuffer.setStatus('current')
docsQosParamSetMaximumBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaximumBuffer.setStatus('current')
docsQosParamSetAqmDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetAqmDisabled.setStatus('current')
docsQosParamSetAqmLatencyTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetAqmLatencyTarget.setStatus('current')
docsQosParamSetHCMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 44), CounterBasedGauge64()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetHCMaxTrafficRate.setStatus('current')
docsQosParamSetHCMinReservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 45), CounterBasedGauge64()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetHCMinReservedRate.setStatus('current')
docsQosParamSetHCPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 46), CounterBasedGauge64()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetHCPeakTrafficRate.setStatus('current')
docsQosParamSetAqmAlgInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("docsisPIE", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetAqmAlgInUse.setStatus('current')
docsQosServiceFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3), )
if mibBuilder.loadTexts: docsQosServiceFlowTable.setStatus('current')
docsQosServiceFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosServiceFlowEntry.setStatus('current')
docsQosServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsQosServiceFlowId.setStatus('current')
docsQosServiceFlowSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowSID.setStatus('current')
docsQosServiceFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 7), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowDirection.setStatus('current')
docsQosServiceFlowPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPrimary.setStatus('current')
docsQosServiceFlowParamSetTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 9), Bits().clone(namedValues=NamedValues(("active", 0), ("admitted", 1), ("provisioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowParamSetTypeStatus.setStatus('current')
docsQosServiceFlowChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 10), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowChSetId.setStatus('current')
docsQosServiceFlowAttrAssignSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowAttrAssignSuccess.setStatus('current')
docsQosServiceFlowDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 12), Dsid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowDsid.setStatus('current')
docsQosServiceFlowMaxReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowMaxReqPerSidCluster.setStatus('current')
docsQosServiceFlowMaxOutstandingBytesPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 14), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowMaxOutstandingBytesPerSidCluster.setStatus('current')
docsQosServiceFlowMaxTotBytesReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 15), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowMaxTotBytesReqPerSidCluster.setStatus('current')
docsQosServiceFlowMaxTimeInSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowMaxTimeInSidCluster.setStatus('current')
docsQosServiceFlowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowBufferSize.setStatus('current')
docsQosServiceFlowIatcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowIatcProfileName.setStatus('current')
docsQosServiceFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4), )
if mibBuilder.loadTexts: docsQosServiceFlowStatsTable.setStatus('current')
docsQosServiceFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosServiceFlowStatsEntry.setStatus('current')
docsQosServiceFlowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPkts.setStatus('current')
docsQosServiceFlowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowOctets.setStatus('current')
docsQosServiceFlowTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowTimeCreated.setStatus('current')
docsQosServiceFlowTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowTimeActive.setStatus('current')
docsQosServiceFlowPHSUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPHSUnknowns.setStatus('current')
docsQosServiceFlowPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPolicedDropPkts.setStatus('current')
docsQosServiceFlowPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPolicedDelayPkts.setStatus('current')
docsQosServiceFlowAqmDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowAqmDroppedPkts.setStatus('current')
docsQosUpstreamStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5), )
if mibBuilder.loadTexts: docsQosUpstreamStatsTable.setStatus('current')
docsQosUpstreamStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosSID"))
if mibBuilder.loadTexts: docsQosUpstreamStatsEntry.setStatus('current')
docsQosSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsQosSID.setStatus('current')
docsQosUpstreamFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 2), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamFragments.setStatus('current')
docsQosUpstreamFragDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 3), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamFragDiscards.setStatus('current')
docsQosUpstreamConcatBursts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 4), Counter32()).setUnits('headers').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamConcatBursts.setStatus('current')
docsQosDynamicServiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6), )
if mibBuilder.loadTexts: docsQosDynamicServiceStatsTable.setStatus('current')
docsQosDynamicServiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosIfDirection"))
if mibBuilder.loadTexts: docsQosDynamicServiceStatsEntry.setStatus('current')
docsQosIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsQosIfDirection.setStatus('current')
docsQosDSAReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSAReqs.setStatus('current')
docsQosDSARsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSARsps.setStatus('current')
docsQosDSAAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSAAcks.setStatus('current')
docsQosDSCReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCReqs.setStatus('current')
docsQosDSCRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCRsps.setStatus('current')
docsQosDSCAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCAcks.setStatus('current')
docsQosDSDReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSDReqs.setStatus('current')
docsQosDSDRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSDRsps.setStatus('current')
docsQosDynamicAdds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicAdds.setStatus('current')
docsQosDynamicAddFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicAddFails.setStatus('current')
docsQosDynamicChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicChanges.setStatus('current')
docsQosDynamicChangeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicChangeFails.setStatus('current')
docsQosDynamicDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicDeletes.setStatus('current')
docsQosDynamicDeleteFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicDeleteFails.setStatus('current')
docsQosDCCReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCReqs.setStatus('current')
docsQosDCCRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCRsps.setStatus('current')
docsQosDCCAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCAcks.setStatus('current')
docsQosDCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCs.setStatus('current')
docsQosDCCFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCFails.setStatus('current')
docsQosDCCRspDeparts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCRspDeparts.setStatus('current')
docsQosDCCRspArrives = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCRspArrives.setStatus('current')
docsQosDbcReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDbcReqs.setStatus('current')
docsQosDbcRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDbcRsps.setStatus('current')
docsQosDbcAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDbcAcks.setStatus('current')
docsQosDbcSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDbcSuccesses.setStatus('current')
docsQosDbcFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDbcFails.setStatus('current')
docsQosDbcPartial = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDbcPartial.setStatus('current')
docsQosServiceFlowLogTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7), )
if mibBuilder.loadTexts: docsQosServiceFlowLogTable.setStatus('current')
docsQosServiceFlowLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQosServiceFlowLogIndex"))
if mibBuilder.loadTexts: docsQosServiceFlowLogEntry.setStatus('current')
docsQosServiceFlowLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQosServiceFlowLogIndex.setStatus('current')
docsQosServiceFlowLogIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogIfIndex.setStatus('current')
docsQosServiceFlowLogSFID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogSFID.setStatus('current')
docsQosServiceFlowLogCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogCmMac.setStatus('current')
docsQosServiceFlowLogPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPkts.setStatus('current')
docsQosServiceFlowLogOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 6), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogOctets.setStatus('current')
docsQosServiceFlowLogTimeDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeDeleted.setStatus('current')
docsQosServiceFlowLogTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeCreated.setStatus('current')
docsQosServiceFlowLogTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeActive.setStatus('current')
docsQosServiceFlowLogDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 11), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogDirection.setStatus('current')
docsQosServiceFlowLogPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPrimary.setStatus('current')
docsQosServiceFlowLogServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogServiceClassName.setStatus('current')
docsQosServiceFlowLogPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPolicedDropPkts.setStatus('current')
docsQosServiceFlowLogPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPolicedDelayPkts.setStatus('current')
docsQosServiceFlowLogControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsQosServiceFlowLogControl.setStatus('current')
docsQosServiceClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8), )
if mibBuilder.loadTexts: docsQosServiceClassTable.setStatus('current')
docsQosServiceClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQosServiceClassName"))
if mibBuilder.loadTexts: docsQosServiceClassEntry.setStatus('current')
docsQosServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: docsQosServiceClassName.setStatus('current')
docsQosServiceClassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassStatus.setStatus('current')
docsQosServiceClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPriority.setStatus('current')
docsQosServiceClassMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 5), BitRate()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxTrafficRate.setStatus('current')
docsQosServiceClassMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 6), Unsigned32().clone(3044)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxTrafficBurst.setStatus('current')
docsQosServiceClassMinReservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 7), BitRate()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMinReservedRate.setStatus('current')
docsQosServiceClassMinReservedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMinReservedPkt.setStatus('current')
docsQosServiceClassMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1522)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxConcatBurst.setStatus('current')
docsQosServiceClassNomPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassNomPollInterval.setStatus('current')
docsQosServiceClassTolPollJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTolPollJitter.setStatus('current')
docsQosServiceClassUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassUnsolicitGrantSize.setStatus('current')
docsQosServiceClassNomGrantInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassNomGrantInterval.setStatus('current')
docsQosServiceClassTolGrantJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTolGrantJitter.setStatus('current')
docsQosServiceClassGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setUnits('dataGrants').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassGrantsPerInterval.setStatus('current')
docsQosServiceClassMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxLatency.setStatus('current')
docsQosServiceClassActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassActiveTimeout.setStatus('current')
docsQosServiceClassAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassAdmittedTimeout.setStatus('current')
docsQosServiceClassSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 19), SchedulingType().clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassSchedulingType.setStatus('current')
docsQosServiceClassRequestPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassRequestPolicy.setStatus('current')
docsQosServiceClassTosAndMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTosAndMask.setStatus('current')
docsQosServiceClassTosOrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTosOrMask.setStatus('current')
docsQosServiceClassDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 23), IfDirection().clone('upstream')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassDirection.setStatus('current')
docsQosServiceClassStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 24), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassStorageType.setStatus('current')
docsQosServiceClassDSCPOverwrite = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 25), DscpOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassDSCPOverwrite.setStatus('current')
docsQosServiceClassRequiredAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 26), AttributeMask().clone(hexValue="000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassRequiredAttrMask.setStatus('current')
docsQosServiceClassForbiddenAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 27), AttributeMask().clone(hexValue="000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassForbiddenAttrMask.setStatus('current')
docsQosServiceClassAttrAggrRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 28), AttrAggrRuleMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassAttrAggrRuleMask.setStatus('current')
docsQosServiceClassAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 29), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassAppId.setStatus('current')
docsQosServiceClassMultiplierContentionReqWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 12)).clone(8)).setUnits('eighths').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMultiplierContentionReqWindow.setStatus('current')
docsQosServiceClassMultiplierBytesReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), )).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMultiplierBytesReq.setStatus('current')
docsQosServiceClassMaxReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('requests').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxReqPerSidCluster.setStatus('deprecated')
docsQosServiceClassMaxOutstandingBytesPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 33), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxOutstandingBytesPerSidCluster.setStatus('deprecated')
docsQosServiceClassMaxTotBytesReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 34), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxTotBytesReqPerSidCluster.setStatus('deprecated')
docsQosServiceClassMaxTimeInSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxTimeInSidCluster.setStatus('deprecated')
docsQosServiceClassPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 36), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPeakTrafficRate.setStatus('current')
docsQosServiceClassDsResequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resequencingDsid", 0), ("noResequencingDsid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassDsResequencing.setStatus('current')
docsQosServiceClassMinimumBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMinimumBuffer.setStatus('current')
docsQosServiceClassTargetBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTargetBuffer.setStatus('current')
docsQosServiceClassMaximumBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(4294967295)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaximumBuffer.setStatus('current')
docsQosServiceClassAqmDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceClassAqmDisabled.setStatus('current')
docsQosServiceClassAqmLatencyTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceClassAqmLatencyTarget.setStatus('current')
docsQosServiceClassHCMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 44), CounterBasedGauge64()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceClassHCMaxTrafficRate.setStatus('current')
docsQosServiceClassHCMinReservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 45), CounterBasedGauge64()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceClassHCMinReservedRate.setStatus('current')
docsQosServiceClassHCPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 46), CounterBasedGauge64()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceClassHCPeakTrafficRate.setStatus('current')
docsQosPHSTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10), )
if mibBuilder.loadTexts: docsQosPHSTable.setStatus('obsolete')
docsQosPHSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQosPktClassId"))
if mibBuilder.loadTexts: docsQosPHSEntry.setStatus('obsolete')
docsQosPHSField = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSField.setStatus('obsolete')
docsQosPHSMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSMask.setStatus('obsolete')
docsQosPHSSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSSize.setStatus('obsolete')
docsQosPHSVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSVerify.setStatus('obsolete')
docsQosPHSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSIndex.setStatus('obsolete')
docsQosCmtsMacToSrvFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11), )
if mibBuilder.loadTexts: docsQosCmtsMacToSrvFlowTable.setStatus('current')
docsQosCmtsMacToSrvFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQosCmtsCmMac"), (0, "DOCS-QOS3-MIB", "docsQosCmtsServiceFlowId"))
if mibBuilder.loadTexts: docsQosCmtsMacToSrvFlowEntry.setStatus('current')
docsQosCmtsCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsQosCmtsCmMac.setStatus('current')
docsQosCmtsServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQosCmtsServiceFlowId.setStatus('current')
docsQosCmtsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIfIndex.setStatus('current')
docsQosServiceFlowSidClusterTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12), )
if mibBuilder.loadTexts: docsQosServiceFlowSidClusterTable.setStatus('current')
docsQosServiceFlowSidClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowSidClusterId"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowSidClusterUcid"))
if mibBuilder.loadTexts: docsQosServiceFlowSidClusterEntry.setStatus('current')
docsQosServiceFlowSidClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: docsQosServiceFlowSidClusterId.setStatus('current')
docsQosServiceFlowSidClusterUcid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 2), ChId().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsQosServiceFlowSidClusterUcid.setStatus('current')
docsQosServiceFlowSidClusterSid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowSidClusterSid.setStatus('current')
docsQosGrpServiceFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13), )
if mibBuilder.loadTexts: docsQosGrpServiceFlowTable.setStatus('current')
docsQosGrpServiceFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosGrpServiceFlowEntry.setStatus('current')
docsQosGrpServiceFlowIsDef = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosGrpServiceFlowIsDef.setStatus('current')
docsQosGrpServiceFlowQosConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosGrpServiceFlowQosConfigId.setStatus('current')
docsQosGrpServiceFlowNumSess = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosGrpServiceFlowNumSess.setStatus('current')
docsQosGrpServiceFlowSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosGrpServiceFlowSrcAddr.setStatus('current')
docsQosGrpServiceFlowGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosGrpServiceFlowGrpAddr.setStatus('current')
docsQosGrpServiceFlowAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosGrpServiceFlowAddrType.setStatus('current')
docsQosGrpPktClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14), )
if mibBuilder.loadTexts: docsQosGrpPktClassTable.setStatus('current')
docsQosGrpPktClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQosPktClassId"))
if mibBuilder.loadTexts: docsQosGrpPktClassEntry.setStatus('current')
docsQosGrpPktClassGrpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosGrpPktClassGrpConfigId.setStatus('current')
docsQosUpChCounterExtTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15), )
if mibBuilder.loadTexts: docsQosUpChCounterExtTable.setStatus('current')
docsQosUpChCounterExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsQosUpChCounterExtEntry.setStatus('current')
docsQosUpChCounterExtSgmtValids = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1, 1), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpChCounterExtSgmtValids.setStatus('current')
docsQosUpChCounterExtSgmtDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1, 2), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpChCounterExtSgmtDiscards.setStatus('current')
docsQosServiceFlowCcfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16), )
if mibBuilder.loadTexts: docsQosServiceFlowCcfStatsTable.setStatus('current')
docsQosServiceFlowCcfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosServiceFlowCcfStatsEntry.setStatus('current')
docsQosServiceFlowCcfStatsSgmtValids = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1, 1), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowCcfStatsSgmtValids.setStatus('current')
docsQosServiceFlowCcfStatsSgmtLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1, 2), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowCcfStatsSgmtLost.setStatus('current')
docsQosCmServiceUsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17), )
if mibBuilder.loadTexts: docsQosCmServiceUsStatsTable.setStatus('current')
docsQosCmServiceUsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosCmServiceUsStatsEntry.setStatus('current')
docsQosCmServiceUsStatsTxSlotsImmed = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 1), Counter32()).setUnits('mini-slots').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmServiceUsStatsTxSlotsImmed.setStatus('current')
docsQosCmServiceUsStatsTxSlotsDed = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 2), Counter32()).setUnits('mini-slots').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmServiceUsStatsTxSlotsDed.setStatus('current')
docsQosCmServiceUsStatsTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 3), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmServiceUsStatsTxRetries.setStatus('current')
docsQosCmServiceUsStatsTxExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 4), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmServiceUsStatsTxExceededs.setStatus('current')
docsQosCmServiceUsStatsRqRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 5), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmServiceUsStatsRqRetries.setStatus('current')
docsQosCmServiceUsStatsRqExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 6), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmServiceUsStatsRqExceededs.setStatus('current')
docsQosCmServiceUsStatsSgmts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 7), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmServiceUsStatsSgmts.setStatus('current')
docsQosCmtsDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18), )
if mibBuilder.loadTexts: docsQosCmtsDsidTable.setStatus('current')
docsQosCmtsDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosCmtsDsidDsid"))
if mibBuilder.loadTexts: docsQosCmtsDsidEntry.setStatus('current')
docsQosCmtsDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQosCmtsDsidDsid.setStatus('current')
docsQosCmtsDsidUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 2), Bits().clone(namedValues=NamedValues(("resequencing", 0), ("multicastCapable", 1), ("multicastReplication", 2), ("bonding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsDsidUsage.setStatus('current')
docsQosCmtsDsidDsChSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 3), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsDsidDsChSet.setStatus('current')
docsQosCmtsDsidReseqWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 180), ))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsDsidReseqWaitTime.setStatus('current')
docsQosCmtsDsidReseqWarnThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 179))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsDsidReseqWarnThrshld.setStatus('current')
docsQosCmtsDsidStatusHldoffTimerSeqOutOfRng = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('20milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsDsidStatusHldoffTimerSeqOutOfRng.setStatus('current')
docsQosCmtsDsidCurrentSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsDsidCurrentSeqNum.setStatus('current')
docsQosCmtsDebugDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19), )
if mibBuilder.loadTexts: docsQosCmtsDebugDsidTable.setStatus('current')
docsQosCmtsDebugDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosCmtsDebugDsidDsid"))
if mibBuilder.loadTexts: docsQosCmtsDebugDsidEntry.setStatus('current')
docsQosCmtsDebugDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQosCmtsDebugDsidDsid.setStatus('current')
docsQosCmtsDebugDsidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosCmtsDebugDsidRowStatus.setStatus('current')
docsQosCmtsDebugDsidStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20), )
if mibBuilder.loadTexts: docsQosCmtsDebugDsidStatsTable.setStatus('current')
docsQosCmtsDebugDsidStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosCmtsDebugDsidDsid"), (0, "DOCS-QOS3-MIB", "docsQosCmtsDebugDsidStatsDsIfIndex"))
if mibBuilder.loadTexts: docsQosCmtsDebugDsidStatsEntry.setStatus('current')
docsQosCmtsDebugDsidStatsDsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: docsQosCmtsDebugDsidStatsDsIfIndex.setStatus('current')
docsQosCmtsDebugDsidStatsDsidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsDebugDsidStatsDsidPackets.setStatus('current')
docsQosCmtsDebugDsidStatsDsidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsDebugDsidStatsDsidOctets.setStatus('current')
docsQosCmDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21), )
if mibBuilder.loadTexts: docsQosCmDsidTable.setStatus('current')
docsQosCmDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosCmDsidDsid"))
if mibBuilder.loadTexts: docsQosCmDsidEntry.setStatus('current')
docsQosCmDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQosCmDsidDsid.setStatus('current')
docsQosCmDsidUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 2), Bits().clone(namedValues=NamedValues(("resequencing", 0), ("multicastCapable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidUsage.setStatus('current')
docsQosCmDsidNumReseqChs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidNumReseqChs.setStatus('current')
docsQosCmDsidReseqChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 4), ChannelList().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidReseqChList.setStatus('current')
docsQosCmDsidReseqWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 180), ))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidReseqWaitTime.setStatus('current')
docsQosCmDsidReseqWarnThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 179))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidReseqWarnThrshld.setStatus('current')
docsQosCmDsidStatusHldoffTimerSeqOutOfRng = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('20milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidStatusHldoffTimerSeqOutOfRng.setStatus('current')
docsQosCmDsidOutOfRangeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidOutOfRangeDiscards.setStatus('current')
docsQosCmDsidNextExpectedSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidNextExpectedSeqNum.setStatus('current')
docsQosCmDsidCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 10), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidCmInterfaceMask.setStatus('current')
docsQosCmDsidFwdCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 11), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidFwdCmInterfaceMask.setStatus('current')
docsQosCmDsidStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22), )
if mibBuilder.loadTexts: docsQosCmDsidStatsTable.setStatus('current')
docsQosCmDsidStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQosCmDsidStatsDsid"))
if mibBuilder.loadTexts: docsQosCmDsidStatsEntry.setStatus('current')
docsQosCmDsidStatsDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQosCmDsidStatsDsid.setStatus('current')
docsQosCmDsidStatsSeqNumMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidStatsSeqNumMissing.setStatus('current')
docsQosCmDsidStatsSkewThreshExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidStatsSkewThreshExceeds.setStatus('current')
docsQosCmDsidStatsOutOfRangePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidStatsOutOfRangePackets.setStatus('current')
docsQosCmDsidStatsNumPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidStatsNumPackets.setStatus('current')
docsQosCmDsidClientTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23), )
if mibBuilder.loadTexts: docsQosCmDsidClientTable.setStatus('current')
docsQosCmDsidClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQosCmDsidClientDsid"), (0, "DOCS-QOS3-MIB", "docsQosCmDsidClientClientMacId"))
if mibBuilder.loadTexts: docsQosCmDsidClientEntry.setStatus('current')
docsQosCmDsidClientDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQosCmDsidClientDsid.setStatus('current')
docsQosCmDsidClientClientMacId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsQosCmDsidClientClientMacId.setStatus('current')
docsQosCmDsidClientClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmDsidClientClientMacAddr.setStatus('current')
docsQosCmSystemCfgState = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 24))
docsQosCmSystemCfgStateAqmUsEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 24, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmSystemCfgStateAqmUsEnable.setStatus('current')
docsQosCmSystemCfgStateDefaultUsTargetBuffer = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 24, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmSystemCfgStateDefaultUsTargetBuffer.setStatus('current')
docsQosCmtsIatcProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25), )
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsTable.setStatus('current')
docsQosCmtsIatcProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQosCmtsIatcProfileStatsName"))
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsEntry.setStatus('current')
docsQosCmtsIatcProfileStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsName.setStatus('current')
docsQosCmtsIatcProfileStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsIfIndex.setStatus('current')
docsQosCmtsIatcProfileStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25, 1, 3), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsDirection.setStatus('current')
docsQosCmtsIatcProfileStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsPkts.setStatus('current')
docsQosCmtsIatcProfileStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25, 1, 5), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsOctets.setStatus('current')
docsQosCmtsIatcProfileStatsPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsPolicedDropPkts.setStatus('current')
docsQosCmtsIatcProfileStatsPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 25, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIatcProfileStatsPolicedDelayPkts.setStatus('current')
docsQosMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2))
docsQosMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 1))
docsQosMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2))
docsQosCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 1, 1)).setObjects(("DOCS-QOS3-MIB", "docsQosBaseGroup"), ("DOCS-QOS3-MIB", "docsQosCmtsGroup"), ("DOCS-QOS3-MIB", "docsQosCmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosCompliance = docsQosCompliance.setStatus('current')
docsQosDeprecatedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 1, 2)).setObjects(("DOCS-QOS3-MIB", "docsQosDeprecatedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosDeprecatedCompliance = docsQosDeprecatedCompliance.setStatus('deprecated')
docsQosBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 1)).setObjects(("DOCS-QOS3-MIB", "docsQosPktClassDirection"), ("DOCS-QOS3-MIB", "docsQosPktClassPriority"), ("DOCS-QOS3-MIB", "docsQosPktClassIpTosLow"), ("DOCS-QOS3-MIB", "docsQosPktClassIpTosHigh"), ("DOCS-QOS3-MIB", "docsQosPktClassIpTosMask"), ("DOCS-QOS3-MIB", "docsQosPktClassIpProtocol"), ("DOCS-QOS3-MIB", "docsQosPktClassIpSourceAddr"), ("DOCS-QOS3-MIB", "docsQosPktClassIpSourceMask"), ("DOCS-QOS3-MIB", "docsQosPktClassIpDestAddr"), ("DOCS-QOS3-MIB", "docsQosPktClassIpDestMask"), ("DOCS-QOS3-MIB", "docsQosPktClassSourcePortStart"), ("DOCS-QOS3-MIB", "docsQosPktClassSourcePortEnd"), ("DOCS-QOS3-MIB", "docsQosPktClassDestPortStart"), ("DOCS-QOS3-MIB", "docsQosPktClassDestPortEnd"), ("DOCS-QOS3-MIB", "docsQosPktClassDestMacAddr"), ("DOCS-QOS3-MIB", "docsQosPktClassDestMacMask"), ("DOCS-QOS3-MIB", "docsQosPktClassSourceMacAddr"), ("DOCS-QOS3-MIB", "docsQosPktClassEnetProtocolType"), ("DOCS-QOS3-MIB", "docsQosPktClassEnetProtocol"), ("DOCS-QOS3-MIB", "docsQosPktClassUserPriLow"), ("DOCS-QOS3-MIB", "docsQosPktClassUserPriHigh"), ("DOCS-QOS3-MIB", "docsQosPktClassVlanId"), ("DOCS-QOS3-MIB", "docsQosPktClassState"), ("DOCS-QOS3-MIB", "docsQosPktClassPkts"), ("DOCS-QOS3-MIB", "docsQosPktClassBitMap"), ("DOCS-QOS3-MIB", "docsQosPktClassIpAddrType"), ("DOCS-QOS3-MIB", "docsQosPktClassFlowLabel"), ("DOCS-QOS3-MIB", "docsQosPktClassCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQosPktClassIcmpTypeLow"), ("DOCS-QOS3-MIB", "docsQosPktClassIcmpTypeHigh"), ("DOCS-QOS3-MIB", "docsQosParamSetServiceClassName"), ("DOCS-QOS3-MIB", "docsQosParamSetPriority"), ("DOCS-QOS3-MIB", "docsQosParamSetMaxTrafficRate"), ("DOCS-QOS3-MIB", "docsQosParamSetMaxTrafficBurst"), ("DOCS-QOS3-MIB", "docsQosParamSetMinReservedRate"), ("DOCS-QOS3-MIB", "docsQosParamSetMinReservedPkt"), ("DOCS-QOS3-MIB", "docsQosParamSetActiveTimeout"), ("DOCS-QOS3-MIB", "docsQosParamSetAdmittedTimeout"), ("DOCS-QOS3-MIB", "docsQosParamSetMaxConcatBurst"), ("DOCS-QOS3-MIB", "docsQosParamSetSchedulingType"), ("DOCS-QOS3-MIB", "docsQosParamSetNomPollInterval"), ("DOCS-QOS3-MIB", "docsQosParamSetTolPollJitter"), ("DOCS-QOS3-MIB", "docsQosParamSetUnsolicitGrantSize"), ("DOCS-QOS3-MIB", "docsQosParamSetNomGrantInterval"), ("DOCS-QOS3-MIB", "docsQosParamSetTolGrantJitter"), ("DOCS-QOS3-MIB", "docsQosParamSetGrantsPerInterval"), ("DOCS-QOS3-MIB", "docsQosParamSetTosAndMask"), ("DOCS-QOS3-MIB", "docsQosParamSetTosOrMask"), ("DOCS-QOS3-MIB", "docsQosParamSetMaxLatency"), ("DOCS-QOS3-MIB", "docsQosParamSetRequestPolicyOct"), ("DOCS-QOS3-MIB", "docsQosParamSetRequiredAttrMask"), ("DOCS-QOS3-MIB", "docsQosParamSetForbiddenAttrMask"), ("DOCS-QOS3-MIB", "docsQosParamSetAttrAggrRuleMask"), ("DOCS-QOS3-MIB", "docsQosParamSetAppId"), ("DOCS-QOS3-MIB", "docsQosParamSetMultiplierContentionReqWindow"), ("DOCS-QOS3-MIB", "docsQosParamSetMultiplierBytesReq"), ("DOCS-QOS3-MIB", "docsQosParamSetPeakTrafficRate"), ("DOCS-QOS3-MIB", "docsQosParamSetDsResequencing"), ("DOCS-QOS3-MIB", "docsQosParamSetBitMap"), ("DOCS-QOS3-MIB", "docsQosParamSetMinimumBuffer"), ("DOCS-QOS3-MIB", "docsQosParamSetTargetBuffer"), ("DOCS-QOS3-MIB", "docsQosParamSetMaximumBuffer"), ("DOCS-QOS3-MIB", "docsQosParamSetAqmDisabled"), ("DOCS-QOS3-MIB", "docsQosParamSetAqmLatencyTarget"), ("DOCS-QOS3-MIB", "docsQosParamSetHCMaxTrafficRate"), ("DOCS-QOS3-MIB", "docsQosParamSetHCMinReservedRate"), ("DOCS-QOS3-MIB", "docsQosParamSetHCPeakTrafficRate"), ("DOCS-QOS3-MIB", "docsQosParamSetAqmAlgInUse"), ("DOCS-QOS3-MIB", "docsQosServiceFlowSID"), ("DOCS-QOS3-MIB", "docsQosServiceFlowDirection"), ("DOCS-QOS3-MIB", "docsQosServiceFlowPrimary"), ("DOCS-QOS3-MIB", "docsQosServiceFlowParamSetTypeStatus"), ("DOCS-QOS3-MIB", "docsQosServiceFlowChSetId"), ("DOCS-QOS3-MIB", "docsQosServiceFlowAttrAssignSuccess"), ("DOCS-QOS3-MIB", "docsQosServiceFlowDsid"), ("DOCS-QOS3-MIB", "docsQosServiceFlowMaxReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosServiceFlowMaxOutstandingBytesPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosServiceFlowMaxTotBytesReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosServiceFlowMaxTimeInSidCluster"), ("DOCS-QOS3-MIB", "docsQosServiceFlowBufferSize"), ("DOCS-QOS3-MIB", "docsQosServiceFlowPkts"), ("DOCS-QOS3-MIB", "docsQosServiceFlowOctets"), ("DOCS-QOS3-MIB", "docsQosServiceFlowTimeCreated"), ("DOCS-QOS3-MIB", "docsQosServiceFlowTimeActive"), ("DOCS-QOS3-MIB", "docsQosServiceFlowPHSUnknowns"), ("DOCS-QOS3-MIB", "docsQosServiceFlowPolicedDropPkts"), ("DOCS-QOS3-MIB", "docsQosServiceFlowPolicedDelayPkts"), ("DOCS-QOS3-MIB", "docsQosServiceFlowAqmDroppedPkts"), ("DOCS-QOS3-MIB", "docsQosDSAReqs"), ("DOCS-QOS3-MIB", "docsQosDSARsps"), ("DOCS-QOS3-MIB", "docsQosDSAAcks"), ("DOCS-QOS3-MIB", "docsQosDSCReqs"), ("DOCS-QOS3-MIB", "docsQosDSCRsps"), ("DOCS-QOS3-MIB", "docsQosDSCAcks"), ("DOCS-QOS3-MIB", "docsQosDSDReqs"), ("DOCS-QOS3-MIB", "docsQosDSDRsps"), ("DOCS-QOS3-MIB", "docsQosDynamicAdds"), ("DOCS-QOS3-MIB", "docsQosDynamicAddFails"), ("DOCS-QOS3-MIB", "docsQosDynamicChanges"), ("DOCS-QOS3-MIB", "docsQosDynamicChangeFails"), ("DOCS-QOS3-MIB", "docsQosDynamicDeletes"), ("DOCS-QOS3-MIB", "docsQosDynamicDeleteFails"), ("DOCS-QOS3-MIB", "docsQosDCCReqs"), ("DOCS-QOS3-MIB", "docsQosDCCRsps"), ("DOCS-QOS3-MIB", "docsQosDCCAcks"), ("DOCS-QOS3-MIB", "docsQosDCCs"), ("DOCS-QOS3-MIB", "docsQosDCCFails"), ("DOCS-QOS3-MIB", "docsQosDCCRspDeparts"), ("DOCS-QOS3-MIB", "docsQosDCCRspArrives"), ("DOCS-QOS3-MIB", "docsQosDCCRspDeparts"), ("DOCS-QOS3-MIB", "docsQosDCCRspArrives"), ("DOCS-QOS3-MIB", "docsQosDbcReqs"), ("DOCS-QOS3-MIB", "docsQosDbcRsps"), ("DOCS-QOS3-MIB", "docsQosDbcAcks"), ("DOCS-QOS3-MIB", "docsQosDbcSuccesses"), ("DOCS-QOS3-MIB", "docsQosDbcFails"), ("DOCS-QOS3-MIB", "docsQosDbcPartial"), ("DOCS-QOS3-MIB", "docsQosServiceFlowSidClusterSid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosBaseGroup = docsQosBaseGroup.setStatus('current')
docsQosCmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 2)).setObjects(("DOCS-QOS3-MIB", "docsQosUpstreamFragments"), ("DOCS-QOS3-MIB", "docsQosUpstreamFragDiscards"), ("DOCS-QOS3-MIB", "docsQosUpstreamConcatBursts"), ("DOCS-QOS3-MIB", "docsQosServiceFlowIatcProfileName"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogIfIndex"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogSFID"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogCmMac"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogPkts"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogOctets"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogTimeDeleted"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogTimeCreated"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogTimeActive"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogDirection"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogPrimary"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogServiceClassName"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogPolicedDropPkts"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogPolicedDelayPkts"), ("DOCS-QOS3-MIB", "docsQosServiceFlowLogControl"), ("DOCS-QOS3-MIB", "docsQosServiceClassStatus"), ("DOCS-QOS3-MIB", "docsQosServiceClassPriority"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaxTrafficRate"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaxTrafficBurst"), ("DOCS-QOS3-MIB", "docsQosServiceClassMinReservedRate"), ("DOCS-QOS3-MIB", "docsQosServiceClassMinReservedPkt"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaxConcatBurst"), ("DOCS-QOS3-MIB", "docsQosServiceClassNomPollInterval"), ("DOCS-QOS3-MIB", "docsQosServiceClassTolPollJitter"), ("DOCS-QOS3-MIB", "docsQosServiceClassUnsolicitGrantSize"), ("DOCS-QOS3-MIB", "docsQosServiceClassNomGrantInterval"), ("DOCS-QOS3-MIB", "docsQosServiceClassTolGrantJitter"), ("DOCS-QOS3-MIB", "docsQosServiceClassGrantsPerInterval"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaxLatency"), ("DOCS-QOS3-MIB", "docsQosServiceClassActiveTimeout"), ("DOCS-QOS3-MIB", "docsQosServiceClassAdmittedTimeout"), ("DOCS-QOS3-MIB", "docsQosServiceClassSchedulingType"), ("DOCS-QOS3-MIB", "docsQosServiceClassRequestPolicy"), ("DOCS-QOS3-MIB", "docsQosServiceClassTosAndMask"), ("DOCS-QOS3-MIB", "docsQosServiceClassTosOrMask"), ("DOCS-QOS3-MIB", "docsQosServiceClassDirection"), ("DOCS-QOS3-MIB", "docsQosServiceClassStorageType"), ("DOCS-QOS3-MIB", "docsQosServiceClassDSCPOverwrite"), ("DOCS-QOS3-MIB", "docsQosServiceClassRequiredAttrMask"), ("DOCS-QOS3-MIB", "docsQosServiceClassForbiddenAttrMask"), ("DOCS-QOS3-MIB", "docsQosServiceClassAttrAggrRuleMask"), ("DOCS-QOS3-MIB", "docsQosServiceClassAppId"), ("DOCS-QOS3-MIB", "docsQosServiceClassMultiplierContentionReqWindow"), ("DOCS-QOS3-MIB", "docsQosServiceClassMultiplierBytesReq"), ("DOCS-QOS3-MIB", "docsQosServiceClassPeakTrafficRate"), ("DOCS-QOS3-MIB", "docsQosServiceClassDsResequencing"), ("DOCS-QOS3-MIB", "docsQosServiceClassMinimumBuffer"), ("DOCS-QOS3-MIB", "docsQosServiceClassTargetBuffer"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaximumBuffer"), ("DOCS-QOS3-MIB", "docsQosServiceClassAqmDisabled"), ("DOCS-QOS3-MIB", "docsQosServiceClassAqmLatencyTarget"), ("DOCS-QOS3-MIB", "docsQosServiceClassHCMaxTrafficRate"), ("DOCS-QOS3-MIB", "docsQosServiceClassHCMinReservedRate"), ("DOCS-QOS3-MIB", "docsQosServiceClassHCPeakTrafficRate"), ("DOCS-QOS3-MIB", "docsQosCmtsIfIndex"), ("DOCS-QOS3-MIB", "docsQosGrpServiceFlowIsDef"), ("DOCS-QOS3-MIB", "docsQosGrpServiceFlowQosConfigId"), ("DOCS-QOS3-MIB", "docsQosGrpServiceFlowNumSess"), ("DOCS-QOS3-MIB", "docsQosGrpServiceFlowSrcAddr"), ("DOCS-QOS3-MIB", "docsQosGrpServiceFlowGrpAddr"), ("DOCS-QOS3-MIB", "docsQosGrpServiceFlowAddrType"), ("DOCS-QOS3-MIB", "docsQosGrpPktClassGrpConfigId"), ("DOCS-QOS3-MIB", "docsQosUpChCounterExtSgmtValids"), ("DOCS-QOS3-MIB", "docsQosUpChCounterExtSgmtDiscards"), ("DOCS-QOS3-MIB", "docsQosServiceFlowCcfStatsSgmtValids"), ("DOCS-QOS3-MIB", "docsQosServiceFlowCcfStatsSgmtLost"), ("DOCS-QOS3-MIB", "docsQosCmtsDsidUsage"), ("DOCS-QOS3-MIB", "docsQosCmtsDsidDsChSet"), ("DOCS-QOS3-MIB", "docsQosCmtsDsidReseqWaitTime"), ("DOCS-QOS3-MIB", "docsQosCmtsDsidReseqWarnThrshld"), ("DOCS-QOS3-MIB", "docsQosCmtsDsidStatusHldoffTimerSeqOutOfRng"), ("DOCS-QOS3-MIB", "docsQosCmtsDsidCurrentSeqNum"), ("DOCS-QOS3-MIB", "docsQosCmtsDebugDsidRowStatus"), ("DOCS-QOS3-MIB", "docsQosCmtsDebugDsidStatsDsidPackets"), ("DOCS-QOS3-MIB", "docsQosCmtsDebugDsidStatsDsidOctets"), ("DOCS-QOS3-MIB", "docsQosCmtsIatcProfileStatsIfIndex"), ("DOCS-QOS3-MIB", "docsQosCmtsIatcProfileStatsDirection"), ("DOCS-QOS3-MIB", "docsQosCmtsIatcProfileStatsPkts"), ("DOCS-QOS3-MIB", "docsQosCmtsIatcProfileStatsOctets"), ("DOCS-QOS3-MIB", "docsQosCmtsIatcProfileStatsPolicedDropPkts"), ("DOCS-QOS3-MIB", "docsQosCmtsIatcProfileStatsPolicedDelayPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosCmtsGroup = docsQosCmtsGroup.setStatus('current')
docsQosCmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 3)).setObjects(("DOCS-QOS3-MIB", "docsQosCmServiceUsStatsTxSlotsImmed"), ("DOCS-QOS3-MIB", "docsQosCmServiceUsStatsTxSlotsDed"), ("DOCS-QOS3-MIB", "docsQosCmServiceUsStatsTxRetries"), ("DOCS-QOS3-MIB", "docsQosCmServiceUsStatsTxExceededs"), ("DOCS-QOS3-MIB", "docsQosCmServiceUsStatsRqRetries"), ("DOCS-QOS3-MIB", "docsQosCmServiceUsStatsRqExceededs"), ("DOCS-QOS3-MIB", "docsQosCmServiceUsStatsSgmts"), ("DOCS-QOS3-MIB", "docsQosCmDsidUsage"), ("DOCS-QOS3-MIB", "docsQosCmDsidNumReseqChs"), ("DOCS-QOS3-MIB", "docsQosCmDsidReseqChList"), ("DOCS-QOS3-MIB", "docsQosCmDsidReseqWaitTime"), ("DOCS-QOS3-MIB", "docsQosCmDsidReseqWarnThrshld"), ("DOCS-QOS3-MIB", "docsQosCmDsidStatusHldoffTimerSeqOutOfRng"), ("DOCS-QOS3-MIB", "docsQosCmDsidOutOfRangeDiscards"), ("DOCS-QOS3-MIB", "docsQosCmDsidNextExpectedSeqNum"), ("DOCS-QOS3-MIB", "docsQosCmDsidCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQosCmDsidFwdCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQosCmDsidStatsSeqNumMissing"), ("DOCS-QOS3-MIB", "docsQosCmDsidStatsSkewThreshExceeds"), ("DOCS-QOS3-MIB", "docsQosCmDsidStatsOutOfRangePackets"), ("DOCS-QOS3-MIB", "docsQosCmDsidStatsNumPackets"), ("DOCS-QOS3-MIB", "docsQosCmDsidClientClientMacAddr"), ("DOCS-QOS3-MIB", "docsQosCmSystemCfgStateAqmUsEnable"), ("DOCS-QOS3-MIB", "docsQosCmSystemCfgStateDefaultUsTargetBuffer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosCmGroup = docsQosCmGroup.setStatus('current')
docsQosDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 4)).setObjects(("DOCS-QOS3-MIB", "docsQosParamSetMaxReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosParamSetMaxOutstandingBytesPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosParamSetMaxTotBytesReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosParamSetMaxTimeInSidCluster"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaxReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaxOutstandingBytesPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaxTotBytesReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQosServiceClassMaxTimeInSidCluster"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosDeprecatedGroup = docsQosDeprecatedGroup.setStatus('deprecated')
docsQosObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 5)).setObjects(("DOCS-QOS3-MIB", "docsQosPHSField"), ("DOCS-QOS3-MIB", "docsQosPHSMask"), ("DOCS-QOS3-MIB", "docsQosPHSSize"), ("DOCS-QOS3-MIB", "docsQosPHSVerify"), ("DOCS-QOS3-MIB", "docsQosPHSIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosObsoleteGroup = docsQosObsoleteGroup.setStatus('obsolete')
mibBuilder.exportSymbols("DOCS-QOS3-MIB", docsQosDSDReqs=docsQosDSDReqs, docsQosServiceClassHCPeakTrafficRate=docsQosServiceClassHCPeakTrafficRate, docsQosCmDsidClientClientMacId=docsQosCmDsidClientClientMacId, docsQosCmDsidClientClientMacAddr=docsQosCmDsidClientClientMacAddr, docsQosServiceClassTosOrMask=docsQosServiceClassTosOrMask, docsQosCmServiceUsStatsTxExceededs=docsQosCmServiceUsStatsTxExceededs, docsQosParamSetHCPeakTrafficRate=docsQosParamSetHCPeakTrafficRate, docsQosServiceClassMaxTimeInSidCluster=docsQosServiceClassMaxTimeInSidCluster, docsQosParamSetAppId=docsQosParamSetAppId, docsQosPktClassUserPriHigh=docsQosPktClassUserPriHigh, docsQosPktClassSourcePortEnd=docsQosPktClassSourcePortEnd, docsQosServiceFlowCcfStatsEntry=docsQosServiceFlowCcfStatsEntry, docsQosDynamicAddFails=docsQosDynamicAddFails, docsQosCmtsIatcProfileStatsPolicedDropPkts=docsQosCmtsIatcProfileStatsPolicedDropPkts, docsQosParamSetAqmLatencyTarget=docsQosParamSetAqmLatencyTarget, docsQosServiceClassForbiddenAttrMask=docsQosServiceClassForbiddenAttrMask, docsQosServiceFlowParamSetTypeStatus=docsQosServiceFlowParamSetTypeStatus, docsQosServiceFlowTable=docsQosServiceFlowTable, docsQosServiceFlowLogSFID=docsQosServiceFlowLogSFID, docsQosServiceClassStatus=docsQosServiceClassStatus, docsQosPktClassTable=docsQosPktClassTable, docsQosServiceClassMaxOutstandingBytesPerSidCluster=docsQosServiceClassMaxOutstandingBytesPerSidCluster, docsQosDSARsps=docsQosDSARsps, docsQosParamSetEntry=docsQosParamSetEntry, docsQosServiceClassMinReservedRate=docsQosServiceClassMinReservedRate, docsQosDCCFails=docsQosDCCFails, docsQosCmServiceUsStatsTable=docsQosCmServiceUsStatsTable, docsQosCmSystemCfgStateDefaultUsTargetBuffer=docsQosCmSystemCfgStateDefaultUsTargetBuffer, docsQosParamSetMaxConcatBurst=docsQosParamSetMaxConcatBurst, docsQosServiceClassHCMaxTrafficRate=docsQosServiceClassHCMaxTrafficRate, docsQosCmDsidNumReseqChs=docsQosCmDsidNumReseqChs, docsQosCmDsidDsid=docsQosCmDsidDsid, docsQosDbcPartial=docsQosDbcPartial, docsQosDSAReqs=docsQosDSAReqs, docsQosParamSetTable=docsQosParamSetTable, docsQosPHSEntry=docsQosPHSEntry, docsQosServiceClassMaxConcatBurst=docsQosServiceClassMaxConcatBurst, docsQosGrpServiceFlowGrpAddr=docsQosGrpServiceFlowGrpAddr, docsQosPktClassIcmpTypeLow=docsQosPktClassIcmpTypeLow, docsQosServiceFlowMaxReqPerSidCluster=docsQosServiceFlowMaxReqPerSidCluster, docsQosCmServiceUsStatsTxSlotsImmed=docsQosCmServiceUsStatsTxSlotsImmed, docsQosServiceFlowId=docsQosServiceFlowId, docsQosParamSetRequestPolicyOct=docsQosParamSetRequestPolicyOct, docsQosServiceClassStorageType=docsQosServiceClassStorageType, docsQosParamSetAqmDisabled=docsQosParamSetAqmDisabled, docsQosServiceFlowStatsEntry=docsQosServiceFlowStatsEntry, docsQosPktClassDirection=docsQosPktClassDirection, docsQosServiceClassAppId=docsQosServiceClassAppId, docsQosCmtsMacToSrvFlowTable=docsQosCmtsMacToSrvFlowTable, docsQosServiceClassMaximumBuffer=docsQosServiceClassMaximumBuffer, docsQosUpChCounterExtSgmtValids=docsQosUpChCounterExtSgmtValids, docsQosPktClassBitMap=docsQosPktClassBitMap, docsQosServiceClassGrantsPerInterval=docsQosServiceClassGrantsPerInterval, docsQosGrpServiceFlowEntry=docsQosGrpServiceFlowEntry, docsQosCmtsIatcProfileStatsDirection=docsQosCmtsIatcProfileStatsDirection, docsQosPktClassIpAddrType=docsQosPktClassIpAddrType, docsQosPktClassId=docsQosPktClassId, docsQosUpChCounterExtEntry=docsQosUpChCounterExtEntry, docsQosCmServiceUsStatsRqExceededs=docsQosCmServiceUsStatsRqExceededs, docsQosPHSIndex=docsQosPHSIndex, docsQosCmtsDsidStatusHldoffTimerSeqOutOfRng=docsQosCmtsDsidStatusHldoffTimerSeqOutOfRng, docsQosCmServiceUsStatsSgmts=docsQosCmServiceUsStatsSgmts, docsQosServiceFlowSidClusterTable=docsQosServiceFlowSidClusterTable, docsQosParamSetType=docsQosParamSetType, docsQosObsoleteGroup=docsQosObsoleteGroup, docsQosServiceFlowCcfStatsSgmtLost=docsQosServiceFlowCcfStatsSgmtLost, docsQosParamSetMultiplierContentionReqWindow=docsQosParamSetMultiplierContentionReqWindow, docsQosServiceFlowAqmDroppedPkts=docsQosServiceFlowAqmDroppedPkts, docsQosServiceClassDirection=docsQosServiceClassDirection, docsQosParamSetNomGrantInterval=docsQosParamSetNomGrantInterval, docsQosServiceFlowDirection=docsQosServiceFlowDirection, docsQosServiceFlowLogTimeActive=docsQosServiceFlowLogTimeActive, docsQosCmDsidClientDsid=docsQosCmDsidClientDsid, docsQosServiceClassMaxLatency=docsQosServiceClassMaxLatency, docsQosGrpServiceFlowIsDef=docsQosGrpServiceFlowIsDef, docsQosCmDsidReseqChList=docsQosCmDsidReseqChList, docsQosParamSetMaxReqPerSidCluster=docsQosParamSetMaxReqPerSidCluster, docsQosCmtsDsidReseqWaitTime=docsQosCmtsDsidReseqWaitTime, docsQosParamSetMinimumBuffer=docsQosParamSetMinimumBuffer, docsQosServiceFlowLogOctets=docsQosServiceFlowLogOctets, docsQosServiceFlowPkts=docsQosServiceFlowPkts, docsQosServiceClassMinimumBuffer=docsQosServiceClassMinimumBuffer, docsQosCmtsDebugDsidDsid=docsQosCmtsDebugDsidDsid, docsQosCmtsIatcProfileStatsEntry=docsQosCmtsIatcProfileStatsEntry, docsQosParamSetAttrAggrRuleMask=docsQosParamSetAttrAggrRuleMask, docsQosPktClassSourcePortStart=docsQosPktClassSourcePortStart, docsQosDCCReqs=docsQosDCCReqs, docsQosParamSetPeakTrafficRate=docsQosParamSetPeakTrafficRate, docsQosUpChCounterExtTable=docsQosUpChCounterExtTable, docsQosParamSetMaxTotBytesReqPerSidCluster=docsQosParamSetMaxTotBytesReqPerSidCluster, docsQosServiceClassTargetBuffer=docsQosServiceClassTargetBuffer, docsQosServiceFlowEntry=docsQosServiceFlowEntry, docsQosDbcReqs=docsQosDbcReqs, docsQosServiceFlowLogIndex=docsQosServiceFlowLogIndex, docsQosDCCRspArrives=docsQosDCCRspArrives, docsQosCmtsDebugDsidTable=docsQosCmtsDebugDsidTable, docsQosCmDsidReseqWaitTime=docsQosCmDsidReseqWaitTime, docsQosCmServiceUsStatsEntry=docsQosCmServiceUsStatsEntry, docsQosDynamicChangeFails=docsQosDynamicChangeFails, docsQosCmtsDsidUsage=docsQosCmtsDsidUsage, docsQosCmtsDebugDsidStatsDsIfIndex=docsQosCmtsDebugDsidStatsDsIfIndex, docsQosCmtsDebugDsidStatsDsidPackets=docsQosCmtsDebugDsidStatsDsidPackets, docsQosPktClassIcmpTypeHigh=docsQosPktClassIcmpTypeHigh, docsQosCmGroup=docsQosCmGroup, docsQosDbcFails=docsQosDbcFails, docsQosCmtsDebugDsidRowStatus=docsQosCmtsDebugDsidRowStatus, docsQosServiceClassAttrAggrRuleMask=docsQosServiceClassAttrAggrRuleMask, docsQosPktClassPriority=docsQosPktClassPriority, docsQosGrpServiceFlowTable=docsQosGrpServiceFlowTable, docsQosCmServiceUsStatsRqRetries=docsQosCmServiceUsStatsRqRetries, docsQosGrpPktClassTable=docsQosGrpPktClassTable, docsQosCmDsidClientTable=docsQosCmDsidClientTable, docsQosServiceFlowSidClusterSid=docsQosServiceFlowSidClusterSid, docsQosCmDsidStatsTable=docsQosCmDsidStatsTable, docsQosServiceFlowMaxOutstandingBytesPerSidCluster=docsQosServiceFlowMaxOutstandingBytesPerSidCluster, docsQosSID=docsQosSID, docsQosServiceFlowLogTimeCreated=docsQosServiceFlowLogTimeCreated, docsQosServiceClassAqmDisabled=docsQosServiceClassAqmDisabled, docsQosDCCs=docsQosDCCs, docsQosGrpServiceFlowNumSess=docsQosGrpServiceFlowNumSess, docsQosServiceFlowPolicedDropPkts=docsQosServiceFlowPolicedDropPkts, docsQosCmtsGroup=docsQosCmtsGroup, docsQosCmtsDebugDsidStatsEntry=docsQosCmtsDebugDsidStatsEntry, docsQosParamSetTolGrantJitter=docsQosParamSetTolGrantJitter, docsQosPktClassEnetProtocolType=docsQosPktClassEnetProtocolType, docsQosParamSetTosOrMask=docsQosParamSetTosOrMask, docsQosCmDsidNextExpectedSeqNum=docsQosCmDsidNextExpectedSeqNum, docsQosServiceClassTolPollJitter=docsQosServiceClassTolPollJitter, docsQosDCCRsps=docsQosDCCRsps, docsQosCmtsDsidDsid=docsQosCmtsDsidDsid, docsQosCmtsDebugDsidEntry=docsQosCmtsDebugDsidEntry, docsQosPktClassDestPortStart=docsQosPktClassDestPortStart, docsQosServiceFlowAttrAssignSuccess=docsQosServiceFlowAttrAssignSuccess, docsQosUpstreamFragDiscards=docsQosUpstreamFragDiscards, docsQosServiceFlowLogPolicedDelayPkts=docsQosServiceFlowLogPolicedDelayPkts, docsQosServiceFlowCcfStatsTable=docsQosServiceFlowCcfStatsTable, docsQosParamSetMaxOutstandingBytesPerSidCluster=docsQosParamSetMaxOutstandingBytesPerSidCluster, docsQosPktClassIpSourceAddr=docsQosPktClassIpSourceAddr, docsQosServiceFlowIatcProfileName=docsQosServiceFlowIatcProfileName, docsQosServiceClassMaxReqPerSidCluster=docsQosServiceClassMaxReqPerSidCluster, docsQosCmDsidStatsSeqNumMissing=docsQosCmDsidStatsSeqNumMissing, docsQosCmDsidStatsOutOfRangePackets=docsQosCmDsidStatsOutOfRangePackets, docsQosCmSystemCfgState=docsQosCmSystemCfgState, docsQosServiceFlowLogTimeDeleted=docsQosServiceFlowLogTimeDeleted, docsQosServiceClassTolGrantJitter=docsQosServiceClassTolGrantJitter, docsQosServiceFlowStatsTable=docsQosServiceFlowStatsTable, docsQosCmtsDsidCurrentSeqNum=docsQosCmtsDsidCurrentSeqNum, docsQosPktClassIpSourceMask=docsQosPktClassIpSourceMask, docsQosDynamicServiceStatsEntry=docsQosDynamicServiceStatsEntry, docsQosServiceFlowTimeCreated=docsQosServiceFlowTimeCreated, docsQosParamSetHCMaxTrafficRate=docsQosParamSetHCMaxTrafficRate, docsQosServiceClassPriority=docsQosServiceClassPriority, PYSNMP_MODULE_ID=docsQosMib, docsQosParamSetSchedulingType=docsQosParamSetSchedulingType, docsQosParamSetMaxLatency=docsQosParamSetMaxLatency, docsQosCmDsidOutOfRangeDiscards=docsQosCmDsidOutOfRangeDiscards, docsQosCmSystemCfgStateAqmUsEnable=docsQosCmSystemCfgStateAqmUsEnable, docsQosCmtsDsidTable=docsQosCmtsDsidTable, docsQosServiceClassNomPollInterval=docsQosServiceClassNomPollInterval, docsQosServiceFlowLogPolicedDropPkts=docsQosServiceFlowLogPolicedDropPkts, docsQosPktClassFlowLabel=docsQosPktClassFlowLabel, SchedulingType=SchedulingType, docsQosParamSetMaxTrafficBurst=docsQosParamSetMaxTrafficBurst, docsQosMibObjects=docsQosMibObjects, docsQosMibCompliances=docsQosMibCompliances, docsQosDeprecatedCompliance=docsQosDeprecatedCompliance, docsQosCmServiceUsStatsTxRetries=docsQosCmServiceUsStatsTxRetries, docsQosParamSetActiveTimeout=docsQosParamSetActiveTimeout, docsQosCmDsidClientEntry=docsQosCmDsidClientEntry, docsQosPktClassCmInterfaceMask=docsQosPktClassCmInterfaceMask, docsQosParamSetGrantsPerInterval=docsQosParamSetGrantsPerInterval, docsQosUpChCounterExtSgmtDiscards=docsQosUpChCounterExtSgmtDiscards, docsQosServiceFlowLogPkts=docsQosServiceFlowLogPkts, docsQosCmDsidEntry=docsQosCmDsidEntry, docsQosServiceClassAdmittedTimeout=docsQosServiceClassAdmittedTimeout, docsQosPHSMask=docsQosPHSMask, docsQosPktClassIpDestAddr=docsQosPktClassIpDestAddr, docsQosParamSetAdmittedTimeout=docsQosParamSetAdmittedTimeout, docsQosServiceClassAqmLatencyTarget=docsQosServiceClassAqmLatencyTarget, docsQosCompliance=docsQosCompliance, docsQosPHSTable=docsQosPHSTable, docsQosMibGroups=docsQosMibGroups, docsQosPktClassVlanId=docsQosPktClassVlanId, docsQosGrpServiceFlowSrcAddr=docsQosGrpServiceFlowSrcAddr, docsQosServiceClassMinReservedPkt=docsQosServiceClassMinReservedPkt, docsQosCmDsidReseqWarnThrshld=docsQosCmDsidReseqWarnThrshld, docsQosParamSetTolPollJitter=docsQosParamSetTolPollJitter, docsQosCmDsidStatsEntry=docsQosCmDsidStatsEntry, docsQosUpstreamStatsTable=docsQosUpstreamStatsTable, docsQosServiceFlowPHSUnknowns=docsQosServiceFlowPHSUnknowns, docsQosGrpServiceFlowQosConfigId=docsQosGrpServiceFlowQosConfigId, docsQosCmtsIatcProfileStatsPolicedDelayPkts=docsQosCmtsIatcProfileStatsPolicedDelayPkts, docsQosServiceClassActiveTimeout=docsQosServiceClassActiveTimeout, docsQosServiceFlowLogEntry=docsQosServiceFlowLogEntry, docsQosCmtsDsidReseqWarnThrshld=docsQosCmtsDsidReseqWarnThrshld, docsQosServiceClassDsResequencing=docsQosServiceClassDsResequencing, docsQosUpstreamStatsEntry=docsQosUpstreamStatsEntry, docsQosDynamicDeleteFails=docsQosDynamicDeleteFails, docsQosParamSetMinReservedRate=docsQosParamSetMinReservedRate, docsQosServiceClassUnsolicitGrantSize=docsQosServiceClassUnsolicitGrantSize, docsQosServiceClassRequestPolicy=docsQosServiceClassRequestPolicy, docsQosCmtsDsidDsChSet=docsQosCmtsDsidDsChSet, docsQosCmtsIatcProfileStatsIfIndex=docsQosCmtsIatcProfileStatsIfIndex, docsQosUpstreamFragments=docsQosUpstreamFragments, docsQosDynamicChanges=docsQosDynamicChanges, docsQosIfDirection=docsQosIfDirection, docsQosPktClassIpTosLow=docsQosPktClassIpTosLow, docsQosDSCAcks=docsQosDSCAcks, docsQosCmtsIatcProfileStatsOctets=docsQosCmtsIatcProfileStatsOctets, docsQosParamSetForbiddenAttrMask=docsQosParamSetForbiddenAttrMask, docsQosServiceClassEntry=docsQosServiceClassEntry, docsQosPktClassDestMacAddr=docsQosPktClassDestMacAddr, docsQosParamSetMaxTrafficRate=docsQosParamSetMaxTrafficRate, docsQosDSAAcks=docsQosDSAAcks, docsQosCmtsIatcProfileStatsTable=docsQosCmtsIatcProfileStatsTable, docsQosServiceFlowSidClusterEntry=docsQosServiceFlowSidClusterEntry, docsQosServiceClassNomGrantInterval=docsQosServiceClassNomGrantInterval, docsQosParamSetAqmAlgInUse=docsQosParamSetAqmAlgInUse, docsQosParamSetDsResequencing=docsQosParamSetDsResequencing, docsQosCmtsMacToSrvFlowEntry=docsQosCmtsMacToSrvFlowEntry, docsQosPktClassDestPortEnd=docsQosPktClassDestPortEnd, docsQosServiceFlowSidClusterUcid=docsQosServiceFlowSidClusterUcid, docsQosParamSetMinReservedPkt=docsQosParamSetMinReservedPkt, docsQosDCCRspDeparts=docsQosDCCRspDeparts, docsQosMibConformance=docsQosMibConformance, docsQosPktClassState=docsQosPktClassState, docsQosDSDRsps=docsQosDSDRsps, docsQosServiceFlowLogControl=docsQosServiceFlowLogControl, docsQosPktClassEntry=docsQosPktClassEntry, docsQosPktClassPkts=docsQosPktClassPkts, docsQosPktClassUserPriLow=docsQosPktClassUserPriLow, docsQosServiceFlowSID=docsQosServiceFlowSID, docsQosServiceClassTosAndMask=docsQosServiceClassTosAndMask, docsQosServiceFlowOctets=docsQosServiceFlowOctets, docsQosParamSetServiceClassName=docsQosParamSetServiceClassName, docsQosServiceClassMaxTrafficRate=docsQosServiceClassMaxTrafficRate, docsQosCmDsidUsage=docsQosCmDsidUsage, docsQosCmtsDebugDsidStatsDsidOctets=docsQosCmtsDebugDsidStatsDsidOctets, docsQosPktClassDestMacMask=docsQosPktClassDestMacMask, docsQosDbcRsps=docsQosDbcRsps, docsQosPktClassEnetProtocol=docsQosPktClassEnetProtocol, docsQosCmtsDebugDsidStatsTable=docsQosCmtsDebugDsidStatsTable, docsQosServiceFlowMaxTimeInSidCluster=docsQosServiceFlowMaxTimeInSidCluster, docsQosDSCReqs=docsQosDSCReqs, docsQosParamSetMultiplierBytesReq=docsQosParamSetMultiplierBytesReq, docsQosServiceFlowTimeActive=docsQosServiceFlowTimeActive, BitRate=BitRate, docsQosDSCRsps=docsQosDSCRsps, docsQosCmDsidFwdCmInterfaceMask=docsQosCmDsidFwdCmInterfaceMask, docsQosServiceFlowSidClusterId=docsQosServiceFlowSidClusterId, docsQosParamSetMaximumBuffer=docsQosParamSetMaximumBuffer, docsQosServiceClassMultiplierBytesReq=docsQosServiceClassMultiplierBytesReq, docsQosCmtsIatcProfileStatsName=docsQosCmtsIatcProfileStatsName, docsQosDbcSuccesses=docsQosDbcSuccesses)
mibBuilder.exportSymbols("DOCS-QOS3-MIB", docsQosCmtsCmMac=docsQosCmtsCmMac, docsQosCmtsDsidEntry=docsQosCmtsDsidEntry, docsQosServiceFlowPolicedDelayPkts=docsQosServiceFlowPolicedDelayPkts, docsQosPktClassSourceMacAddr=docsQosPktClassSourceMacAddr, docsQosParamSetServiceFlowId=docsQosParamSetServiceFlowId, docsQosServiceFlowCcfStatsSgmtValids=docsQosServiceFlowCcfStatsSgmtValids, docsQosDeprecatedGroup=docsQosDeprecatedGroup, docsQosServiceFlowBufferSize=docsQosServiceFlowBufferSize, docsQosCmDsidTable=docsQosCmDsidTable, docsQosServiceFlowChSetId=docsQosServiceFlowChSetId, docsQosDynamicDeletes=docsQosDynamicDeletes, docsQosServiceFlowLogIfIndex=docsQosServiceFlowLogIfIndex, docsQosServiceFlowLogPrimary=docsQosServiceFlowLogPrimary, docsQosPHSSize=docsQosPHSSize, docsQosDynamicAdds=docsQosDynamicAdds, docsQosPktClassIpTosHigh=docsQosPktClassIpTosHigh, docsQosParamSetTargetBuffer=docsQosParamSetTargetBuffer, docsQosCmDsidStatusHldoffTimerSeqOutOfRng=docsQosCmDsidStatusHldoffTimerSeqOutOfRng, docsQosPktClassIpTosMask=docsQosPktClassIpTosMask, docsQosPktClassIpProtocol=docsQosPktClassIpProtocol, docsQosServiceClassMaxTotBytesReqPerSidCluster=docsQosServiceClassMaxTotBytesReqPerSidCluster, docsQosParamSetRequiredAttrMask=docsQosParamSetRequiredAttrMask, docsQosDbcAcks=docsQosDbcAcks, docsQosServiceFlowPrimary=docsQosServiceFlowPrimary, docsQosServiceClassRequiredAttrMask=docsQosServiceClassRequiredAttrMask, docsQosServiceClassSchedulingType=docsQosServiceClassSchedulingType, docsQosServiceClassHCMinReservedRate=docsQosServiceClassHCMinReservedRate, docsQosCmtsIfIndex=docsQosCmtsIfIndex, docsQosDCCAcks=docsQosDCCAcks, docsQosCmtsServiceFlowId=docsQosCmtsServiceFlowId, docsQosCmServiceUsStatsTxSlotsDed=docsQosCmServiceUsStatsTxSlotsDed, docsQosServiceFlowDsid=docsQosServiceFlowDsid, docsQosUpstreamConcatBursts=docsQosUpstreamConcatBursts, docsQosParamSetBitMap=docsQosParamSetBitMap, docsQosDynamicServiceStatsTable=docsQosDynamicServiceStatsTable, docsQosMib=docsQosMib, docsQosCmDsidCmInterfaceMask=docsQosCmDsidCmInterfaceMask, docsQosServiceClassMultiplierContentionReqWindow=docsQosServiceClassMultiplierContentionReqWindow, docsQosServiceClassTable=docsQosServiceClassTable, docsQosServiceClassPeakTrafficRate=docsQosServiceClassPeakTrafficRate, docsQosParamSetPriority=docsQosParamSetPriority, docsQosParamSetUnsolicitGrantSize=docsQosParamSetUnsolicitGrantSize, docsQosGrpServiceFlowAddrType=docsQosGrpServiceFlowAddrType, docsQosCmtsIatcProfileStatsPkts=docsQosCmtsIatcProfileStatsPkts, docsQosServiceFlowLogTable=docsQosServiceFlowLogTable, docsQosParamSetHCMinReservedRate=docsQosParamSetHCMinReservedRate, docsQosCmDsidStatsDsid=docsQosCmDsidStatsDsid, docsQosPktClassIpDestMask=docsQosPktClassIpDestMask, docsQosGrpPktClassGrpConfigId=docsQosGrpPktClassGrpConfigId, docsQosServiceClassDSCPOverwrite=docsQosServiceClassDSCPOverwrite, docsQosServiceFlowMaxTotBytesReqPerSidCluster=docsQosServiceFlowMaxTotBytesReqPerSidCluster, docsQosServiceFlowLogDirection=docsQosServiceFlowLogDirection, docsQosParamSetNomPollInterval=docsQosParamSetNomPollInterval, docsQosServiceClassName=docsQosServiceClassName, docsQosServiceClassMaxTrafficBurst=docsQosServiceClassMaxTrafficBurst, docsQosServiceFlowLogCmMac=docsQosServiceFlowLogCmMac, docsQosServiceFlowLogServiceClassName=docsQosServiceFlowLogServiceClassName, docsQosPHSVerify=docsQosPHSVerify, docsQosParamSetTosAndMask=docsQosParamSetTosAndMask, docsQosBaseGroup=docsQosBaseGroup, docsQosCmDsidStatsSkewThreshExceeds=docsQosCmDsidStatsSkewThreshExceeds, docsQosParamSetMaxTimeInSidCluster=docsQosParamSetMaxTimeInSidCluster, docsQosPHSField=docsQosPHSField, docsQosCmDsidStatsNumPackets=docsQosCmDsidStatsNumPackets, docsQosGrpPktClassEntry=docsQosGrpPktClassEntry)
