#
# PySNMP MIB module EATON-EPDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EATON-EPDU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
pduAgent, = mibBuilder.importSymbols("EATON-OIDS", "pduAgent")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Bits, Counter64, ObjectIdentity, IpAddress, Unsigned32, Counter32, MibIdentifier, Gauge32, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Bits", "Counter64", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter32", "MibIdentifier", "Gauge32", "Integer32", "ModuleIdentity")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
eatonEpdu = ModuleIdentity((1, 3, 6, 1, 4, 1, 534, 6, 6, 7))
eatonEpdu.setRevisions(('2014-09-29 12:00', '2013-12-18 12:00', '2013-09-02 12:00', '2013-05-29 12:00', '2013-02-21 12:00', '2011-11-21 12:00', '2011-10-24 12:00', '2011-02-07 15:29',))
if mibBuilder.loadTexts: eatonEpdu.setLastUpdated('201312181200Z')
if mibBuilder.loadTexts: eatonEpdu.setOrganization('Eaton Corporation')
class UnixTimeStamp(TextualConvention, Counter32):
    status = 'current'

notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0))
units = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1))
inputs = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 25))
objectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 25, 5))
notifyUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 1)).setObjects(("EATON-EPDU-MIB", "userName"), ("EATON-EPDU-MIB", "commInterface"))
if mibBuilder.loadTexts: notifyUserLogin.setStatus('current')
notifyUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 2)).setObjects(("EATON-EPDU-MIB", "userName"), ("EATON-EPDU-MIB", "commInterface"))
if mibBuilder.loadTexts: notifyUserLogout.setStatus('current')
notifyFailedLogin = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 3)).setObjects(("EATON-EPDU-MIB", "userName"), ("EATON-EPDU-MIB", "commInterface"))
if mibBuilder.loadTexts: notifyFailedLogin.setStatus('current')
notifyBootUp = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 4)).setObjects(("EATON-EPDU-MIB", "strappingIndex"))
if mibBuilder.loadTexts: notifyBootUp.setStatus('current')
notifyInputVoltageThStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 11)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "inputIndex"), ("EATON-EPDU-MIB", "inputVoltageIndex"), ("EATON-EPDU-MIB", "inputVoltage"), ("EATON-EPDU-MIB", "inputVoltageThStatus"))
if mibBuilder.loadTexts: notifyInputVoltageThStatus.setStatus('current')
notifyInputCurrentThStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 12)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "inputIndex"), ("EATON-EPDU-MIB", "inputCurrentIndex"), ("EATON-EPDU-MIB", "inputCurrent"), ("EATON-EPDU-MIB", "inputCurrentThStatus"))
if mibBuilder.loadTexts: notifyInputCurrentThStatus.setStatus('current')
notifyInputFrequencyStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 13)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "inputIndex"), ("EATON-EPDU-MIB", "inputFrequency"), ("EATON-EPDU-MIB", "inputFrequencyStatus"))
if mibBuilder.loadTexts: notifyInputFrequencyStatus.setStatus('current')
notifyGroupVoltageThStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 21)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "groupIndex"), ("EATON-EPDU-MIB", "groupVoltage"), ("EATON-EPDU-MIB", "groupVoltageThStatus"))
if mibBuilder.loadTexts: notifyGroupVoltageThStatus.setStatus('current')
notifyGroupCurrentThStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 22)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "groupIndex"), ("EATON-EPDU-MIB", "groupCurrent"), ("EATON-EPDU-MIB", "groupCurrentThStatus"))
if mibBuilder.loadTexts: notifyGroupCurrentThStatus.setStatus('current')
notifyGroupBreakerStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 23)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "groupIndex"), ("EATON-EPDU-MIB", "groupBreakerStatus"))
if mibBuilder.loadTexts: notifyGroupBreakerStatus.setStatus('current')
notifyOutletVoltageThStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 31)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "outletIndex"), ("EATON-EPDU-MIB", "outletVoltage"), ("EATON-EPDU-MIB", "outletVoltageThStatus"))
if mibBuilder.loadTexts: notifyOutletVoltageThStatus.setStatus('current')
notifyOutletCurrentThStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 32)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "outletIndex"), ("EATON-EPDU-MIB", "outletCurrent"), ("EATON-EPDU-MIB", "outletCurrentThStatus"))
if mibBuilder.loadTexts: notifyOutletCurrentThStatus.setStatus('current')
notifyOutletControlStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 33)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "outletIndex"), ("EATON-EPDU-MIB", "outletControlStatus"))
if mibBuilder.loadTexts: notifyOutletControlStatus.setStatus('current')
notifyTemperatureThStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 41)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "temperatureIndex"), ("EATON-EPDU-MIB", "temperatureValue"), ("EATON-EPDU-MIB", "temperatureThStatus"))
if mibBuilder.loadTexts: notifyTemperatureThStatus.setStatus('current')
notifyHumidityThStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 42)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "humidityIndex"), ("EATON-EPDU-MIB", "humidityValue"), ("EATON-EPDU-MIB", "humidityThStatus"))
if mibBuilder.loadTexts: notifyHumidityThStatus.setStatus('current')
notifyContactState = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 43)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "contactIndex"), ("EATON-EPDU-MIB", "contactState"))
if mibBuilder.loadTexts: notifyContactState.setStatus('current')
notifyProbeStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 44)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "temperatureIndex"), ("EATON-EPDU-MIB", "temperatureProbeStatus"))
if mibBuilder.loadTexts: notifyProbeStatus.setStatus('current')
notifyCommunicationStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 51)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "communicationStatus"))
if mibBuilder.loadTexts: notifyCommunicationStatus.setStatus('current')
notifyInternalStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 52)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "internalStatus"))
if mibBuilder.loadTexts: notifyInternalStatus.setStatus('current')
notifyTest = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 53))
if mibBuilder.loadTexts: notifyTest.setStatus('current')
notifyStrappingStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 0, 54)).setObjects(("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "strappingStatus"))
if mibBuilder.loadTexts: notifyStrappingStatus.setStatus('current')
unitsPresent = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitsPresent.setStatus('current')
unitTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2), )
if mibBuilder.loadTexts: unitTable.setStatus('current')
unitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"))
if mibBuilder.loadTexts: unitEntry.setStatus('current')
strappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: strappingIndex.setStatus('current')
productName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
partNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partNumber.setStatus('current')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
firmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
unitName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitName.setStatus('current')
lcdControl = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("lcdScreenOff", 1), ("lcdKeyLock", 2), ("lcdScreenOffAndKeyLock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcdControl.setStatus('current')
clockValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 8), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockValue.setStatus('current')
temperatureScale = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("celsius", 0), ("fahrenheit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureScale.setStatus('current')
unitType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("switched", 1), ("advancedMonitored", 2), ("managed", 3), ("monitored", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitType.setStatus('current')
inputCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCount.setStatus('current')
groupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCount.setStatus('current')
outletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setStatus('current')
temperatureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCount.setStatus('current')
humidityCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityCount.setStatus('current')
contactCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactCount.setStatus('current')
communicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("good", 0), ("communicationLost", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: communicationStatus.setStatus('current')
internalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("good", 0), ("internalFailure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalStatus.setStatus('current')
strappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("good", 0), ("communicationLost", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strappingStatus.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userName.setStatus('current')
commInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serial", 0), ("usb", 1), ("telnet", 2), ("web", 3), ("ftp", 4), ("xml", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: commInterface.setStatus('current')
unitControlTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 3), )
if mibBuilder.loadTexts: unitControlTable.setStatus('current')
unitControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 3, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"))
if mibBuilder.loadTexts: unitControlEntry.setStatus('current')
unitControlOffCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitControlOffCmd.setStatus('current')
unitControlOnCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitControlOnCmd.setStatus('current')
inputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1), )
if mibBuilder.loadTexts: inputTable.setStatus('current')
inputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "inputIndex"))
if mibBuilder.loadTexts: inputEntry.setStatus('current')
inputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inputIndex.setStatus('current')
inputType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("singlePhase", 1), ("splitPhase", 2), ("threePhaseDelta", 3), ("threePhaseWye", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputType.setStatus('current')
inputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputFrequency.setStatus('current')
inputFrequencyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("good", 0), ("outOfRange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputFrequencyStatus.setStatus('current')
inputVoltageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltageCount.setStatus('current')
inputCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentCount.setStatus('current')
inputPowerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputPowerCount.setStatus('current')
inputPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 200, 300, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 150, 151, 152, 201, 202, 301, 302, 303, 304, 306, 320, 321, 322, 323, 324, 325, 326, 350, 351))).clone(namedValues=NamedValues(("other1Phase", 100), ("other2Phase", 200), ("other3Phase", 300), ("iecC14Inlet", 101), ("iecC20Inlet", 102), ("iec316P6", 103), ("iec332P6", 104), ("iec360P6", 105), ("iecC14Plug", 106), ("iecC20Plug", 107), ("nema515", 120), ("nemaL515", 121), ("nema520", 122), ("nemaL520", 123), ("nema615", 124), ("nemaL615", 125), ("nemaL530", 126), ("nema620", 127), ("nemaL620", 128), ("nemaL630", 129), ("cs8265", 130), ("french", 150), ("schuko", 151), ("uk", 152), ("nemaL1420", 201), ("nemaL1430", 202), ("iec516P6", 301), ("iec460P9", 302), ("iec560P9", 303), ("iec532P6", 304), ("iec563P6", 306), ("nemaL1520", 320), ("nemaL2120", 321), ("nemaL1530", 322), ("nemaL2130", 323), ("cs8365", 324), ("nemaL2220", 325), ("nemaL2230", 326), ("bladeUps208V", 350), ("bladeUps400V", 351)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputPlugType.setStatus('current')
inputVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2), )
if mibBuilder.loadTexts: inputVoltageTable.setStatus('current')
inputVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "inputIndex"), (0, "EATON-EPDU-MIB", "inputVoltageIndex"))
if mibBuilder.loadTexts: inputVoltageEntry.setStatus('current')
inputVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inputVoltageIndex.setStatus('current')
inputVoltageMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("singlePhase", 1), ("phase1toN", 2), ("phase2toN", 3), ("phase3toN", 4), ("phase1to2", 5), ("phase2to3", 6), ("phase3to1", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltageMeasType.setStatus('current')
inputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltage.setStatus('current')
inputVoltageThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltageThStatus.setStatus('current')
inputVoltageThLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputVoltageThLowerWarning.setStatus('current')
inputVoltageThLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputVoltageThLowerCritical.setStatus('current')
inputVoltageThUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputVoltageThUpperWarning.setStatus('current')
inputVoltageThUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputVoltageThUpperCritical.setStatus('current')
inputCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3), )
if mibBuilder.loadTexts: inputCurrentTable.setStatus('current')
inputCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "inputIndex"), (0, "EATON-EPDU-MIB", "inputCurrentIndex"))
if mibBuilder.loadTexts: inputCurrentEntry.setStatus('current')
inputCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inputCurrentIndex.setStatus('current')
inputCurrentMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singlePhase", 1), ("neutral", 2), ("phase1", 3), ("phase2", 4), ("phase3", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentMeasType.setStatus('current')
inputCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentCapacity.setStatus('current')
inputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrent.setStatus('current')
inputCurrentThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentThStatus.setStatus('current')
inputCurrentThLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputCurrentThLowerWarning.setStatus('current')
inputCurrentThLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputCurrentThLowerCritical.setStatus('current')
inputCurrentThUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputCurrentThUpperWarning.setStatus('current')
inputCurrentThUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputCurrentThUpperCritical.setStatus('current')
inputCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentCrestFactor.setStatus('current')
inputCurrentPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentPercentLoad.setStatus('current')
inputPowerTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4), )
if mibBuilder.loadTexts: inputPowerTable.setStatus('current')
inputPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "inputIndex"), (0, "EATON-EPDU-MIB", "inputPowerIndex"))
if mibBuilder.loadTexts: inputPowerEntry.setStatus('current')
inputPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: inputPowerIndex.setStatus('current')
inputPowerMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("total", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputPowerMeasType.setStatus('current')
inputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVA.setStatus('current')
inputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputWatts.setStatus('current')
inputWh = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputWh.setStatus('current')
inputWhTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1, 6), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputWhTimer.setStatus('current')
inputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputPowerFactor.setStatus('current')
inputVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVAR.setStatus('current')
inputTotalPowerTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 5), )
if mibBuilder.loadTexts: inputTotalPowerTable.setStatus('current')
inputTotalPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 5, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "inputIndex"))
if mibBuilder.loadTexts: inputTotalPowerEntry.setStatus('current')
inputTotalVA = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTotalVA.setStatus('current')
inputTotalWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTotalWatts.setStatus('current')
inputTotalWh = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputTotalWh.setStatus('current')
inputTotalWhTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 5, 1, 6), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTotalWhTimer.setStatus('current')
inputTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTotalPowerFactor.setStatus('current')
inputTotalVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 3, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTotalVAR.setStatus('current')
groupTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 1), )
if mibBuilder.loadTexts: groupTable.setStatus('current')
groupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 1, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupEntry.setStatus('current')
groupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: groupIndex.setStatus('current')
groupID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupID.setStatus('current')
groupName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupName.setStatus('current')
groupType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("breaker1pole", 1), ("breaker2pole", 2), ("breaker3pole", 3), ("outletSection", 4), ("userDefined", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupType.setStatus('current')
groupBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("breakerOn", 1), ("breakerOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupBreakerStatus.setStatus('current')
groupChildCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupChildCount.setStatus('current')
groupChildTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 2), )
if mibBuilder.loadTexts: groupChildTable.setStatus('current')
groupChildEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 2, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "groupIndex"), (0, "EATON-EPDU-MIB", "groupChildIndex"))
if mibBuilder.loadTexts: groupChildEntry.setStatus('current')
groupChildIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: groupChildIndex.setStatus('current')
groupChildType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("section", 2), ("custom", 3), ("outlet", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupChildType.setStatus('current')
groupChildOID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupChildOID.setStatus('current')
groupVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3), )
if mibBuilder.loadTexts: groupVoltageTable.setStatus('current')
groupVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupVoltageEntry.setStatus('current')
groupVoltageMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("singlePhase", 1), ("phase1toN", 2), ("phase2toN", 3), ("phase3toN", 4), ("phase1to2", 5), ("phase2to3", 6), ("phase3to1", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupVoltageMeasType.setStatus('current')
groupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupVoltage.setStatus('current')
groupVoltageThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupVoltageThStatus.setStatus('current')
groupVoltageThLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupVoltageThLowerWarning.setStatus('current')
groupVoltageThLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupVoltageThLowerCritical.setStatus('current')
groupVoltageThUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupVoltageThUpperWarning.setStatus('current')
groupVoltageThUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupVoltageThUpperCritical.setStatus('current')
groupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4), )
if mibBuilder.loadTexts: groupCurrentTable.setStatus('current')
groupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupCurrentEntry.setStatus('current')
groupCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCurrentCapacity.setStatus('current')
groupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCurrent.setStatus('current')
groupCurrentThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCurrentThStatus.setStatus('current')
groupCurrentThLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupCurrentThLowerWarning.setStatus('current')
groupCurrentThLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupCurrentThLowerCritical.setStatus('current')
groupCurrentThUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupCurrentThUpperWarning.setStatus('current')
groupCurrentThUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupCurrentThUpperCritical.setStatus('current')
groupCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCurrentCrestFactor.setStatus('current')
groupCurrentPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCurrentPercentLoad.setStatus('current')
groupPowerTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 5), )
if mibBuilder.loadTexts: groupPowerTable.setStatus('current')
groupPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 5, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupPowerEntry.setStatus('current')
groupVA = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupVA.setStatus('current')
groupWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupWatts.setStatus('current')
groupWh = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupWh.setStatus('current')
groupWhTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 5, 1, 5), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupWhTimer.setStatus('current')
groupPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupPowerFactor.setStatus('current')
groupVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupVAR.setStatus('current')
groupControlTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 6), )
if mibBuilder.loadTexts: groupControlTable.setStatus('current')
groupControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 6, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupControlEntry.setStatus('current')
groupControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("rebooting", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupControlStatus.setStatus('current')
groupControlOffCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupControlOffCmd.setStatus('current')
groupControl0nCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupControl0nCmd.setStatus('current')
groupControlRebootCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupControlRebootCmd.setStatus('current')
outletTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 1), )
if mibBuilder.loadTexts: outletTable.setStatus('current')
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 1, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletEntry.setStatus('current')
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: outletIndex.setStatus('current')
outletID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletID.setStatus('current')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setStatus('current')
outletParentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletParentCount.setStatus('current')
outletType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 10, 11, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("unknown", 0), ("iecC13", 1), ("iecC19", 2), ("uk", 10), ("french", 11), ("schuko", 12), ("nema515", 20), ("nema51520", 21), ("nema520", 22), ("nemaL520", 23), ("nemaL530", 24), ("nema615", 25), ("nema620", 26), ("nemaL620", 27), ("nemaL630", 28), ("nemaL715", 29), ("rf203p277", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletType.setStatus('current')
outletParentTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 2), )
if mibBuilder.loadTexts: outletParentTable.setStatus('current')
outletParentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 2, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "outletIndex"), (0, "EATON-EPDU-MIB", "outletParentIndex"))
if mibBuilder.loadTexts: outletParentEntry.setStatus('current')
outletParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: outletParentIndex.setStatus('current')
outletParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("breaker", 1), ("section", 2), ("custom", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletParentType.setStatus('current')
outletParentOID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletParentOID.setStatus('current')
outletVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 3), )
if mibBuilder.loadTexts: outletVoltageTable.setStatus('current')
outletVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 3, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletVoltageEntry.setStatus('current')
outletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVoltage.setStatus('current')
outletVoltageThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVoltageThStatus.setStatus('current')
outletVoltageThLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletVoltageThLowerWarning.setStatus('current')
outletVoltageThLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletVoltageThLowerCritical.setStatus('current')
outletVoltageThUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletVoltageThUpperWarning.setStatus('current')
outletVoltageThUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletVoltageThUpperCritical.setStatus('current')
outletCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4), )
if mibBuilder.loadTexts: outletCurrentTable.setStatus('current')
outletCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletCurrentEntry.setStatus('current')
outletCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrentCapacity.setStatus('current')
outletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrent.setStatus('current')
outletCurrentThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrentThStatus.setStatus('current')
outletCurrentThLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentThLowerWarning.setStatus('current')
outletCurrentThLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentThLowerCritical.setStatus('current')
outletCurrentThUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentThUpperWarning.setStatus('current')
outletCurrentThUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentThUpperCritical.setStatus('current')
outletCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrentCrestFactor.setStatus('current')
outletCurrentPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrentPercentLoad.setStatus('current')
outletPowerTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 5), )
if mibBuilder.loadTexts: outletPowerTable.setStatus('current')
outletPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 5, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletPowerEntry.setStatus('current')
outletVA = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVA.setStatus('current')
outletWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletWatts.setStatus('current')
outletWh = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletWh.setStatus('current')
outletWhTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 5, 1, 5), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletWhTimer.setStatus('current')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
outletVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVAR.setStatus('current')
outletControlTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6), )
if mibBuilder.loadTexts: outletControlTable.setStatus('current')
outletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletControlEntry.setStatus('current')
outletControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("pendingOff", 2), ("pendingOn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControlStatus.setStatus('current')
outletControlOffCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlOffCmd.setStatus('current')
outletControlOnCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlOnCmd.setStatus('current')
outletControlRebootCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlRebootCmd.setStatus('current')
outletControlPowerOnState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("lastState", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlPowerOnState.setStatus('current')
outletControlSequenceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlSequenceDelay.setStatus('current')
outletControlRebootOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlRebootOffTime.setStatus('current')
outletControlSwitchable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchable", 1), ("notSwitchable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlSwitchable.setStatus('current')
outletControlShutoffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 6, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlShutoffDelay.setStatus('current')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1), )
if mibBuilder.loadTexts: temperatureTable.setStatus('current')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('current')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: temperatureIndex.setStatus('current')
temperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureName.setStatus('current')
temperatureProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("bad", -1), ("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStatus.setStatus('current')
temperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureValue.setStatus('current')
temperatureThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThStatus.setStatus('current')
temperatureThLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 150000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThLowerWarning.setStatus('current')
temperatureThLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 150000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThLowerCritical.setStatus('current')
temperatureThUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 150000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThUpperWarning.setStatus('current')
temperatureThUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 150000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThUpperCritical.setStatus('current')
humidityTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2), )
if mibBuilder.loadTexts: humidityTable.setStatus('current')
humidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityEntry.setStatus('current')
humidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: humidityIndex.setStatus('current')
humidityName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityName.setStatus('current')
humidityProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("bad", -1), ("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityProbeStatus.setStatus('current')
humidityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityValue.setStatus('current')
humidityThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityThStatus.setStatus('current')
humidityThLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThLowerWarning.setStatus('current')
humidityThLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThLowerCritical.setStatus('current')
humidityThUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThUpperWarning.setStatus('current')
humidityThUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThUpperCritical.setStatus('current')
contactTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 3), )
if mibBuilder.loadTexts: contactTable.setStatus('current')
contactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 3, 1), ).setIndexNames((0, "EATON-EPDU-MIB", "strappingIndex"), (0, "EATON-EPDU-MIB", "contactIndex"))
if mibBuilder.loadTexts: contactEntry.setStatus('current')
contactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: contactIndex.setStatus('current')
contactName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactName.setStatus('current')
contactProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("bad", -1), ("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactProbeStatus.setStatus('current')
contactState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("contactBad", -1), ("contactOpen", 0), ("contactClosed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactState.setStatus('current')
eatonEpduCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 25, 1)).setObjects(("EATON-EPDU-MIB", "epduRequiredGroup"), ("EATON-EPDU-MIB", "epduOptionalGroup"), ("EATON-EPDU-MIB", "epduNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eatonEpduCompliances = eatonEpduCompliances.setStatus('current')
epduRequiredGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 25, 5, 1)).setObjects(("EATON-EPDU-MIB", "unitName"), ("EATON-EPDU-MIB", "firmwareVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    epduRequiredGroup = epduRequiredGroup.setStatus('current')
epduOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 25, 5, 2)).setObjects(("EATON-EPDU-MIB", "clockValue"), ("EATON-EPDU-MIB", "commInterface"), ("EATON-EPDU-MIB", "communicationStatus"), ("EATON-EPDU-MIB", "contactCount"), ("EATON-EPDU-MIB", "contactIndex"), ("EATON-EPDU-MIB", "contactName"), ("EATON-EPDU-MIB", "contactProbeStatus"), ("EATON-EPDU-MIB", "contactState"), ("EATON-EPDU-MIB", "groupChildCount"), ("EATON-EPDU-MIB", "groupChildOID"), ("EATON-EPDU-MIB", "groupChildType"), ("EATON-EPDU-MIB", "groupControl0nCmd"), ("EATON-EPDU-MIB", "groupControlOffCmd"), ("EATON-EPDU-MIB", "groupControlRebootCmd"), ("EATON-EPDU-MIB", "groupControlStatus"), ("EATON-EPDU-MIB", "groupCount"), ("EATON-EPDU-MIB", "groupCurrent"), ("EATON-EPDU-MIB", "groupCurrentCapacity"), ("EATON-EPDU-MIB", "groupCurrentCrestFactor"), ("EATON-EPDU-MIB", "groupCurrentPercentLoad"), ("EATON-EPDU-MIB", "groupCurrentThLowerCritical"), ("EATON-EPDU-MIB", "groupCurrentThLowerWarning"), ("EATON-EPDU-MIB", "groupCurrentThStatus"), ("EATON-EPDU-MIB", "groupCurrentThUpperCritical"), ("EATON-EPDU-MIB", "groupCurrentThUpperWarning"), ("EATON-EPDU-MIB", "groupID"), ("EATON-EPDU-MIB", "groupIndex"), ("EATON-EPDU-MIB", "groupName"), ("EATON-EPDU-MIB", "groupBreakerStatus"), ("EATON-EPDU-MIB", "groupPowerFactor"), ("EATON-EPDU-MIB", "groupType"), ("EATON-EPDU-MIB", "groupVA"), ("EATON-EPDU-MIB", "groupVAR"), ("EATON-EPDU-MIB", "groupVoltage"), ("EATON-EPDU-MIB", "groupVoltageMeasType"), ("EATON-EPDU-MIB", "groupVoltageThLowerCritical"), ("EATON-EPDU-MIB", "groupVoltageThLowerWarning"), ("EATON-EPDU-MIB", "groupVoltageThStatus"), ("EATON-EPDU-MIB", "groupVoltageThUpperCritical"), ("EATON-EPDU-MIB", "groupVoltageThUpperWarning"), ("EATON-EPDU-MIB", "groupWatts"), ("EATON-EPDU-MIB", "groupWh"), ("EATON-EPDU-MIB", "groupWhTimer"), ("EATON-EPDU-MIB", "humidityCount"), ("EATON-EPDU-MIB", "humidityIndex"), ("EATON-EPDU-MIB", "humidityName"), ("EATON-EPDU-MIB", "humidityProbeStatus"), ("EATON-EPDU-MIB", "humidityThLowerCritical"), ("EATON-EPDU-MIB", "humidityThLowerWarning"), ("EATON-EPDU-MIB", "humidityThStatus"), ("EATON-EPDU-MIB", "humidityThUpperCritical"), ("EATON-EPDU-MIB", "humidityThUpperWarning"), ("EATON-EPDU-MIB", "humidityValue"), ("EATON-EPDU-MIB", "inputCount"), ("EATON-EPDU-MIB", "inputCurrent"), ("EATON-EPDU-MIB", "inputCurrentCapacity"), ("EATON-EPDU-MIB", "inputCurrentCount"), ("EATON-EPDU-MIB", "inputCurrentCrestFactor"), ("EATON-EPDU-MIB", "inputCurrentIndex"), ("EATON-EPDU-MIB", "inputCurrentMeasType"), ("EATON-EPDU-MIB", "inputCurrentPercentLoad"), ("EATON-EPDU-MIB", "inputCurrentThLowerCritical"), ("EATON-EPDU-MIB", "inputCurrentThLowerWarning"), ("EATON-EPDU-MIB", "inputCurrentThStatus"), ("EATON-EPDU-MIB", "inputCurrentThUpperCritical"), ("EATON-EPDU-MIB", "inputCurrentThUpperWarning"), ("EATON-EPDU-MIB", "inputFrequency"), ("EATON-EPDU-MIB", "inputFrequencyStatus"), ("EATON-EPDU-MIB", "inputIndex"), ("EATON-EPDU-MIB", "inputPlugType"), ("EATON-EPDU-MIB", "inputPowerCount"), ("EATON-EPDU-MIB", "inputPowerFactor"), ("EATON-EPDU-MIB", "inputPowerMeasType"), ("EATON-EPDU-MIB", "inputType"), ("EATON-EPDU-MIB", "inputVA"), ("EATON-EPDU-MIB", "inputVAR"), ("EATON-EPDU-MIB", "inputVoltage"), ("EATON-EPDU-MIB", "inputVoltageCount"), ("EATON-EPDU-MIB", "inputVoltageIndex"), ("EATON-EPDU-MIB", "inputVoltageMeasType"), ("EATON-EPDU-MIB", "inputVoltageThLowerCritical"), ("EATON-EPDU-MIB", "inputVoltageThLowerWarning"), ("EATON-EPDU-MIB", "inputVoltageThStatus"), ("EATON-EPDU-MIB", "inputVoltageThUpperCritical"), ("EATON-EPDU-MIB", "inputVoltageThUpperWarning"), ("EATON-EPDU-MIB", "inputWatts"), ("EATON-EPDU-MIB", "inputWh"), ("EATON-EPDU-MIB", "inputWhTimer"), ("EATON-EPDU-MIB", "inputTotalVA"), ("EATON-EPDU-MIB", "inputTotalWatts"), ("EATON-EPDU-MIB", "inputTotalWh"), ("EATON-EPDU-MIB", "inputTotalWhTimer"), ("EATON-EPDU-MIB", "inputTotalPowerFactor"), ("EATON-EPDU-MIB", "inputTotalVAR"), ("EATON-EPDU-MIB", "internalStatus"), ("EATON-EPDU-MIB", "lcdControl"), ("EATON-EPDU-MIB", "outletControlSwitchable"), ("EATON-EPDU-MIB", "outletControlShutoffDelay"), ("EATON-EPDU-MIB", "outletControlOffCmd"), ("EATON-EPDU-MIB", "outletControlOnCmd"), ("EATON-EPDU-MIB", "outletControlPowerOnState"), ("EATON-EPDU-MIB", "outletControlRebootCmd"), ("EATON-EPDU-MIB", "outletControlRebootOffTime"), ("EATON-EPDU-MIB", "outletControlSequenceDelay"), ("EATON-EPDU-MIB", "outletControlStatus"), ("EATON-EPDU-MIB", "outletCount"), ("EATON-EPDU-MIB", "outletCurrent"), ("EATON-EPDU-MIB", "outletCurrentCapacity"), ("EATON-EPDU-MIB", "outletCurrentCrestFactor"), ("EATON-EPDU-MIB", "outletCurrentPercentLoad"), ("EATON-EPDU-MIB", "outletCurrentThLowerCritical"), ("EATON-EPDU-MIB", "outletCurrentThLowerWarning"), ("EATON-EPDU-MIB", "outletCurrentThStatus"), ("EATON-EPDU-MIB", "outletCurrentThUpperCritical"), ("EATON-EPDU-MIB", "outletCurrentThUpperWarning"), ("EATON-EPDU-MIB", "outletID"), ("EATON-EPDU-MIB", "outletIndex"), ("EATON-EPDU-MIB", "outletName"), ("EATON-EPDU-MIB", "outletParentCount"), ("EATON-EPDU-MIB", "outletParentOID"), ("EATON-EPDU-MIB", "outletParentType"), ("EATON-EPDU-MIB", "outletPowerFactor"), ("EATON-EPDU-MIB", "outletType"), ("EATON-EPDU-MIB", "outletVA"), ("EATON-EPDU-MIB", "outletVAR"), ("EATON-EPDU-MIB", "outletVoltage"), ("EATON-EPDU-MIB", "outletVoltageThLowerCritical"), ("EATON-EPDU-MIB", "outletVoltageThLowerWarning"), ("EATON-EPDU-MIB", "outletVoltageThStatus"), ("EATON-EPDU-MIB", "outletVoltageThUpperCritical"), ("EATON-EPDU-MIB", "outletVoltageThUpperWarning"), ("EATON-EPDU-MIB", "outletWatts"), ("EATON-EPDU-MIB", "outletWh"), ("EATON-EPDU-MIB", "outletWhTimer"), ("EATON-EPDU-MIB", "partNumber"), ("EATON-EPDU-MIB", "productName"), ("EATON-EPDU-MIB", "serialNumber"), ("EATON-EPDU-MIB", "strappingIndex"), ("EATON-EPDU-MIB", "strappingStatus"), ("EATON-EPDU-MIB", "temperatureCount"), ("EATON-EPDU-MIB", "temperatureIndex"), ("EATON-EPDU-MIB", "temperatureName"), ("EATON-EPDU-MIB", "temperatureProbeStatus"), ("EATON-EPDU-MIB", "temperatureScale"), ("EATON-EPDU-MIB", "unitType"), ("EATON-EPDU-MIB", "temperatureThLowerCritical"), ("EATON-EPDU-MIB", "temperatureThLowerWarning"), ("EATON-EPDU-MIB", "temperatureThStatus"), ("EATON-EPDU-MIB", "temperatureThUpperCritical"), ("EATON-EPDU-MIB", "temperatureThUpperWarning"), ("EATON-EPDU-MIB", "temperatureValue"), ("EATON-EPDU-MIB", "unitControlOffCmd"), ("EATON-EPDU-MIB", "unitControlOnCmd"), ("EATON-EPDU-MIB", "unitName"), ("EATON-EPDU-MIB", "unitsPresent"), ("EATON-EPDU-MIB", "userName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    epduOptionalGroup = epduOptionalGroup.setStatus('current')
epduNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 7, 25, 5, 3)).setObjects(("EATON-EPDU-MIB", "notifyBootUp"), ("EATON-EPDU-MIB", "notifyCommunicationStatus"), ("EATON-EPDU-MIB", "notifyContactState"), ("EATON-EPDU-MIB", "notifyFailedLogin"), ("EATON-EPDU-MIB", "notifyGroupCurrentThStatus"), ("EATON-EPDU-MIB", "notifyGroupVoltageThStatus"), ("EATON-EPDU-MIB", "notifyGroupBreakerStatus"), ("EATON-EPDU-MIB", "notifyHumidityThStatus"), ("EATON-EPDU-MIB", "notifyInputCurrentThStatus"), ("EATON-EPDU-MIB", "notifyInputFrequencyStatus"), ("EATON-EPDU-MIB", "notifyInputVoltageThStatus"), ("EATON-EPDU-MIB", "notifyInternalStatus"), ("EATON-EPDU-MIB", "notifyOutletControlStatus"), ("EATON-EPDU-MIB", "notifyOutletCurrentThStatus"), ("EATON-EPDU-MIB", "notifyOutletVoltageThStatus"), ("EATON-EPDU-MIB", "notifyProbeStatus"), ("EATON-EPDU-MIB", "notifyStrappingStatus"), ("EATON-EPDU-MIB", "notifyTemperatureThStatus"), ("EATON-EPDU-MIB", "notifyTest"), ("EATON-EPDU-MIB", "notifyUserLogin"), ("EATON-EPDU-MIB", "notifyUserLogout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    epduNotifyGroup = epduNotifyGroup.setStatus('current')
mibBuilder.exportSymbols("EATON-EPDU-MIB", outletCurrent=outletCurrent, notifyGroupVoltageThStatus=notifyGroupVoltageThStatus, inputTotalWhTimer=inputTotalWhTimer, partNumber=partNumber, outletID=outletID, inputVoltageEntry=inputVoltageEntry, outletControlOffCmd=outletControlOffCmd, humidityEntry=humidityEntry, notifyOutletCurrentThStatus=notifyOutletCurrentThStatus, humidityIndex=humidityIndex, humidityValue=humidityValue, inputCount=inputCount, conformance=conformance, outletCurrentTable=outletCurrentTable, commInterface=commInterface, temperatureValue=temperatureValue, inputVoltageThUpperWarning=inputVoltageThUpperWarning, strappingStatus=strappingStatus, groupVoltageThStatus=groupVoltageThStatus, inputVoltageThLowerCritical=inputVoltageThLowerCritical, notifyBootUp=notifyBootUp, groupChildCount=groupChildCount, inputCurrentThStatus=inputCurrentThStatus, groupChildTable=groupChildTable, notifyStrappingStatus=notifyStrappingStatus, inputCurrentMeasType=inputCurrentMeasType, contactEntry=contactEntry, groupCount=groupCount, inputCurrentCapacity=inputCurrentCapacity, inputType=inputType, notifyProbeStatus=notifyProbeStatus, humidityCount=humidityCount, outletControlOnCmd=outletControlOnCmd, contactState=contactState, notifyInternalStatus=notifyInternalStatus, inputTotalPowerTable=inputTotalPowerTable, groupEntry=groupEntry, lcdControl=lcdControl, inputVoltage=inputVoltage, outletCurrentThLowerWarning=outletCurrentThLowerWarning, inputCurrentThUpperWarning=inputCurrentThUpperWarning, unitsPresent=unitsPresent, temperatureTable=temperatureTable, epduNotifyGroup=epduNotifyGroup, inputTotalPowerEntry=inputTotalPowerEntry, notifyUserLogout=notifyUserLogout, outletVoltage=outletVoltage, inputCurrentEntry=inputCurrentEntry, inputTotalVAR=inputTotalVAR, unitType=unitType, notifyOutletVoltageThStatus=notifyOutletVoltageThStatus, groupCurrentThLowerCritical=groupCurrentThLowerCritical, outletVoltageThLowerCritical=outletVoltageThLowerCritical, outletCurrentEntry=outletCurrentEntry, groupVoltageThLowerCritical=groupVoltageThLowerCritical, humidityThLowerWarning=humidityThLowerWarning, groupControl0nCmd=groupControl0nCmd, inputCurrentThLowerWarning=inputCurrentThLowerWarning, inputTable=inputTable, strappingIndex=strappingIndex, userName=userName, outletCurrentThLowerCritical=outletCurrentThLowerCritical, temperatureThLowerWarning=temperatureThLowerWarning, objectGroups=objectGroups, inputPlugType=inputPlugType, inputVoltageMeasType=inputVoltageMeasType, inputCurrentIndex=inputCurrentIndex, groupPowerTable=groupPowerTable, outletVA=outletVA, groupCurrentThUpperWarning=groupCurrentThUpperWarning, groups=groups, inputCurrentThLowerCritical=inputCurrentThLowerCritical, outletVoltageTable=outletVoltageTable, inputVoltageCount=inputVoltageCount, outletEntry=outletEntry, outletControlSequenceDelay=outletControlSequenceDelay, humidityThUpperCritical=humidityThUpperCritical, inputCurrentCrestFactor=inputCurrentCrestFactor, temperatureName=temperatureName, outletIndex=outletIndex, unitControlEntry=unitControlEntry, notifyUserLogin=notifyUserLogin, outletParentEntry=outletParentEntry, outletTable=outletTable, inputFrequency=inputFrequency, unitControlOffCmd=unitControlOffCmd, outletVoltageThLowerWarning=outletVoltageThLowerWarning, notifyInputFrequencyStatus=notifyInputFrequencyStatus, outletControlRebootCmd=outletControlRebootCmd, inputTotalWatts=inputTotalWatts, unitTable=unitTable, clockValue=clockValue, groupControlEntry=groupControlEntry, groupCurrentCapacity=groupCurrentCapacity, outletControlRebootOffTime=outletControlRebootOffTime, temperatureThUpperCritical=temperatureThUpperCritical, groupCurrentEntry=groupCurrentEntry, groupCurrent=groupCurrent, notifyGroupCurrentThStatus=notifyGroupCurrentThStatus, outletPowerTable=outletPowerTable, outletParentIndex=outletParentIndex, contactCount=contactCount, outletControlShutoffDelay=outletControlShutoffDelay, inputTotalVA=inputTotalVA, groupType=groupType, outletControlPowerOnState=outletControlPowerOnState, outletParentTable=outletParentTable, humidityProbeStatus=humidityProbeStatus, groupCurrentTable=groupCurrentTable, groupName=groupName, temperatureProbeStatus=temperatureProbeStatus, eatonEpduCompliances=eatonEpduCompliances, outletControlTable=outletControlTable, outletParentType=outletParentType, inputVoltageThLowerWarning=inputVoltageThLowerWarning, PYSNMP_MODULE_ID=eatonEpdu, groupPowerEntry=groupPowerEntry, outletType=outletType, unitName=unitName, contactName=contactName, temperatureScale=temperatureScale, groupCurrentPercentLoad=groupCurrentPercentLoad, firmwareVersion=firmwareVersion, notifications=notifications, UnixTimeStamp=UnixTimeStamp, outletCount=outletCount, inputCurrentThUpperCritical=inputCurrentThUpperCritical, groupID=groupID, groupChildEntry=groupChildEntry, humidityThUpperWarning=humidityThUpperWarning, unitEntry=unitEntry, outletParentCount=outletParentCount, inputVAR=inputVAR, temperatureThLowerCritical=temperatureThLowerCritical, outlets=outlets, inputCurrentCount=inputCurrentCount, inputVA=inputVA, outletCurrentThUpperWarning=outletCurrentThUpperWarning, outletPowerFactor=outletPowerFactor, inputWh=inputWh, outletName=outletName, inputPowerIndex=inputPowerIndex, temperatureEntry=temperatureEntry, groupVoltageThUpperWarning=groupVoltageThUpperWarning, outletWhTimer=outletWhTimer, groupChildOID=groupChildOID, temperatureThUpperWarning=temperatureThUpperWarning, notifyGroupBreakerStatus=notifyGroupBreakerStatus, outletParentOID=outletParentOID, humidityName=humidityName, groupChildType=groupChildType, groupIndex=groupIndex, inputPowerTable=inputPowerTable, inputVoltageIndex=inputVoltageIndex, inputWatts=inputWatts, inputs=inputs, notifyContactState=notifyContactState, groupPowerFactor=groupPowerFactor, outletCurrentCrestFactor=outletCurrentCrestFactor, outletControlEntry=outletControlEntry, temperatureIndex=temperatureIndex, outletWh=outletWh, notifyOutletControlStatus=notifyOutletControlStatus, contactIndex=contactIndex, inputPowerCount=inputPowerCount, outletControlSwitchable=outletControlSwitchable, groupVoltageThLowerWarning=groupVoltageThLowerWarning, inputCurrentTable=inputCurrentTable, outletVAR=outletVAR, groupVA=groupVA, inputEntry=inputEntry, inputVoltageTable=inputVoltageTable, inputWhTimer=inputWhTimer, outletPowerEntry=outletPowerEntry, outletControlStatus=outletControlStatus, groupWatts=groupWatts, outletCurrentCapacity=outletCurrentCapacity, inputPowerFactor=inputPowerFactor, groupVoltageEntry=groupVoltageEntry, temperatureCount=temperatureCount, humidityThLowerCritical=humidityThLowerCritical, inputTotalPowerFactor=inputTotalPowerFactor, epduOptionalGroup=epduOptionalGroup, notifyHumidityThStatus=notifyHumidityThStatus, outletVoltageThUpperCritical=outletVoltageThUpperCritical, groupVAR=groupVAR, environmental=environmental, groupCurrentThUpperCritical=groupCurrentThUpperCritical, groupControlStatus=groupControlStatus, notifyTest=notifyTest, humidityTable=humidityTable, inputIndex=inputIndex, inputTotalWh=inputTotalWh, unitControlOnCmd=unitControlOnCmd, unitControlTable=unitControlTable, outletVoltageThStatus=outletVoltageThStatus, outletWatts=outletWatts, groupBreakerStatus=groupBreakerStatus, eatonEpdu=eatonEpdu, notifyFailedLogin=notifyFailedLogin, temperatureThStatus=temperatureThStatus, inputPowerEntry=inputPowerEntry, groupVoltageTable=groupVoltageTable, productName=productName, outletCurrentThUpperCritical=outletCurrentThUpperCritical, outletVoltageEntry=outletVoltageEntry, inputPowerMeasType=inputPowerMeasType, groupTable=groupTable, groupWhTimer=groupWhTimer, groupVoltage=groupVoltage, groupCurrentThLowerWarning=groupCurrentThLowerWarning, epduRequiredGroup=epduRequiredGroup, inputFrequencyStatus=inputFrequencyStatus, groupCurrentThStatus=groupCurrentThStatus, contactProbeStatus=contactProbeStatus, groupControlRebootCmd=groupControlRebootCmd, inputCurrentPercentLoad=inputCurrentPercentLoad, outletCurrentPercentLoad=outletCurrentPercentLoad, humidityThStatus=humidityThStatus, serialNumber=serialNumber, notifyInputVoltageThStatus=notifyInputVoltageThStatus, groupControlTable=groupControlTable, outletVoltageThUpperWarning=outletVoltageThUpperWarning, groupControlOffCmd=groupControlOffCmd, groupVoltageMeasType=groupVoltageMeasType, contactTable=contactTable, inputVoltageThStatus=inputVoltageThStatus, inputVoltageThUpperCritical=inputVoltageThUpperCritical, groupWh=groupWh, notifyTemperatureThStatus=notifyTemperatureThStatus, internalStatus=internalStatus, outletCurrentThStatus=outletCurrentThStatus, notifyCommunicationStatus=notifyCommunicationStatus, notifyInputCurrentThStatus=notifyInputCurrentThStatus, communicationStatus=communicationStatus, groupChildIndex=groupChildIndex, groupVoltageThUpperCritical=groupVoltageThUpperCritical, groupCurrentCrestFactor=groupCurrentCrestFactor, units=units, inputCurrent=inputCurrent)
