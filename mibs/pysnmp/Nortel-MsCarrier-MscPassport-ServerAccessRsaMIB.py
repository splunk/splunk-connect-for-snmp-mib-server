#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:21:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
StorageType, Counter32, Integer32, Unsigned32, RowStatus, RowPointer, DisplayString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "Counter32", "Integer32", "Unsigned32", "RowStatus", "RowPointer", "DisplayString")
AsciiStringIndex, Hex, Link, AsciiString, NonReplicated, DigitString, EnterpriseDateAndTime = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "AsciiStringIndex", "Hex", "Link", "AsciiString", "NonReplicated", "DigitString", "EnterpriseDateAndTime")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibIdentifier, NotificationType, Counter32, iso, Integer32, Unsigned32, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "NotificationType", "Counter32", "iso", "Integer32", "Unsigned32", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "ModuleIdentity", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
serverAccessRsaMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116))
mscRsa = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108))
mscRsaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 1), )
if mibBuilder.loadTexts: mscRsaRowStatusTable.setStatus('mandatory')
mscRsaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"))
if mibBuilder.loadTexts: mscRsaRowStatusEntry.setStatus('mandatory')
mscRsaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaRowStatus.setStatus('mandatory')
mscRsaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaComponentName.setStatus('mandatory')
mscRsaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaStorageType.setStatus('mandatory')
mscRsaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: mscRsaIndex.setStatus('mandatory')
mscRsaOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 10), )
if mibBuilder.loadTexts: mscRsaOptionsTable.setStatus('mandatory')
mscRsaOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"))
if mibBuilder.loadTexts: mscRsaOptionsEntry.setStatus('mandatory')
mscRsaLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 10, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaLogicalProcessor.setStatus('mandatory')
mscRsaStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 11), )
if mibBuilder.loadTexts: mscRsaStateTable.setStatus('mandatory')
mscRsaStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"))
if mibBuilder.loadTexts: mscRsaStateEntry.setStatus('mandatory')
mscRsaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaAdminState.setStatus('mandatory')
mscRsaOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaOperationalState.setStatus('mandatory')
mscRsaUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaUsageState.setStatus('mandatory')
mscRsaOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 12), )
if mibBuilder.loadTexts: mscRsaOperationalTable.setStatus('mandatory')
mscRsaOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"))
if mibBuilder.loadTexts: mscRsaOperationalEntry.setStatus('mandatory')
mscRsaMaxRsiConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaMaxRsiConnections.setStatus('mandatory')
mscRsaRsiConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaRsiConnections.setStatus('mandatory')
mscRsaDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2))
mscRsaDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 1), )
if mibBuilder.loadTexts: mscRsaDnaRowStatusTable.setStatus('mandatory')
mscRsaDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaDnaIndex"))
if mibBuilder.loadTexts: mscRsaDnaRowStatusEntry.setStatus('mandatory')
mscRsaDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaRowStatus.setStatus('mandatory')
mscRsaDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaComponentName.setStatus('mandatory')
mscRsaDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaStorageType.setStatus('mandatory')
mscRsaDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscRsaDnaIndex.setStatus('mandatory')
mscRsaDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 10), )
if mibBuilder.loadTexts: mscRsaDnaAddressTable.setStatus('mandatory')
mscRsaDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaDnaIndex"))
if mibBuilder.loadTexts: mscRsaDnaAddressEntry.setStatus('mandatory')
mscRsaDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaDnaNumberingPlanIndicator.setStatus('mandatory')
mscRsaDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaDnaDataNetworkAddress.setStatus('mandatory')
mscRsaDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 11), )
if mibBuilder.loadTexts: mscRsaDnaOutgoingOptionsTable.setStatus('mandatory')
mscRsaDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaDnaIndex"))
if mibBuilder.loadTexts: mscRsaDnaOutgoingOptionsEntry.setStatus('mandatory')
mscRsaDnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaOutCalls.setStatus('mandatory')
mscRsaDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 12), )
if mibBuilder.loadTexts: mscRsaDnaIncomingOptionsTable.setStatus('mandatory')
mscRsaDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaDnaIndex"))
if mibBuilder.loadTexts: mscRsaDnaIncomingOptionsEntry.setStatus('mandatory')
mscRsaDnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaIncCalls.setStatus('mandatory')
mscRsaDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaDnaIncAccess.setStatus('mandatory')
mscRsaDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2))
mscRsaDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 1), )
if mibBuilder.loadTexts: mscRsaDnaCugRowStatusTable.setStatus('mandatory')
mscRsaDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaDnaCugIndex"))
if mibBuilder.loadTexts: mscRsaDnaCugRowStatusEntry.setStatus('mandatory')
mscRsaDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaDnaCugRowStatus.setStatus('mandatory')
mscRsaDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaCugComponentName.setStatus('mandatory')
mscRsaDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaCugStorageType.setStatus('mandatory')
mscRsaDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: mscRsaDnaCugIndex.setStatus('mandatory')
mscRsaDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10), )
if mibBuilder.loadTexts: mscRsaDnaCugCugOptionsTable.setStatus('mandatory')
mscRsaDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaDnaCugIndex"))
if mibBuilder.loadTexts: mscRsaDnaCugCugOptionsEntry.setStatus('mandatory')
mscRsaDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaDnaCugType.setStatus('mandatory')
mscRsaDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaDnaCugDnic.setStatus('mandatory')
mscRsaDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaDnaCugInterlockCode.setStatus('mandatory')
mscRsaDnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaCugPreferential.setStatus('mandatory')
mscRsaDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaCugOutCalls.setStatus('mandatory')
mscRsaDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaCugIncCalls.setStatus('mandatory')
mscRsaDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaDnaCugPrivileged.setStatus('mandatory')
mscRsaVncsAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3))
mscRsaVncsAccessRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 1), )
if mibBuilder.loadTexts: mscRsaVncsAccessRowStatusTable.setStatus('mandatory')
mscRsaVncsAccessRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaVncsAccessIndex"))
if mibBuilder.loadTexts: mscRsaVncsAccessRowStatusEntry.setStatus('mandatory')
mscRsaVncsAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaVncsAccessRowStatus.setStatus('mandatory')
mscRsaVncsAccessComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessComponentName.setStatus('mandatory')
mscRsaVncsAccessStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessStorageType.setStatus('mandatory')
mscRsaVncsAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscRsaVncsAccessIndex.setStatus('mandatory')
mscRsaVncsAccessProvisionedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 10), )
if mibBuilder.loadTexts: mscRsaVncsAccessProvisionedTable.setStatus('mandatory')
mscRsaVncsAccessProvisionedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaVncsAccessIndex"))
if mibBuilder.loadTexts: mscRsaVncsAccessProvisionedEntry.setStatus('mandatory')
mscRsaVncsAccessTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRsaVncsAccessTimeToLive.setStatus('mandatory')
mscRsaVncsAccessStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 11), )
if mibBuilder.loadTexts: mscRsaVncsAccessStateTable.setStatus('mandatory')
mscRsaVncsAccessStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaVncsAccessIndex"))
if mibBuilder.loadTexts: mscRsaVncsAccessStateEntry.setStatus('mandatory')
mscRsaVncsAccessAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessAdminState.setStatus('mandatory')
mscRsaVncsAccessOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessOperationalState.setStatus('mandatory')
mscRsaVncsAccessUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessUsageState.setStatus('mandatory')
mscRsaVncsAccessOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 12), )
if mibBuilder.loadTexts: mscRsaVncsAccessOperationalTable.setStatus('mandatory')
mscRsaVncsAccessOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaVncsAccessIndex"))
if mibBuilder.loadTexts: mscRsaVncsAccessOperationalEntry.setStatus('mandatory')
mscRsaVncsAccessRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessRequestsSent.setStatus('mandatory')
mscRsaVncsAccessRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessRepliesReceived.setStatus('mandatory')
mscRsaVncsAccessRequestsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessRequestsQueued.setStatus('mandatory')
mscRsaVncsAccessRequestsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaVncsAccessRequestsDiscarded.setStatus('mandatory')
mscRsaConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4))
mscRsaConnectionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 1), )
if mibBuilder.loadTexts: mscRsaConnectionRowStatusTable.setStatus('mandatory')
mscRsaConnectionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"))
if mibBuilder.loadTexts: mscRsaConnectionRowStatusEntry.setStatus('mandatory')
mscRsaConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionRowStatus.setStatus('mandatory')
mscRsaConnectionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionComponentName.setStatus('mandatory')
mscRsaConnectionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionStorageType.setStatus('mandatory')
mscRsaConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: mscRsaConnectionIndex.setStatus('mandatory')
mscRsaConnectionOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 10), )
if mibBuilder.loadTexts: mscRsaConnectionOperationalTable.setStatus('mandatory')
mscRsaConnectionOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"))
if mibBuilder.loadTexts: mscRsaConnectionOperationalEntry.setStatus('mandatory')
mscRsaConnectionRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionRemoteName.setStatus('mandatory')
mscRsaConnectionCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initializing", 0), ("creatingVc", 1), ("calling", 2), ("acceptingCall", 3), ("registeringFmo", 4), ("establishingLapf", 5), ("dataTransfer", 6), ("clearingCall", 7), ("terminating", 8), ("terminatingVc", 9), ("terminated", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionCallState.setStatus('mandatory')
mscRsaConnectionServerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 11), )
if mibBuilder.loadTexts: mscRsaConnectionServerStatsTable.setStatus('mandatory')
mscRsaConnectionServerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"))
if mibBuilder.loadTexts: mscRsaConnectionServerStatsEntry.setStatus('mandatory')
mscRsaConnectionVncsRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVncsRequests.setStatus('mandatory')
mscRsaConnectionVncsReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVncsReplies.setStatus('mandatory')
mscRsaConnectionLapfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 12), )
if mibBuilder.loadTexts: mscRsaConnectionLapfStatusTable.setStatus('mandatory')
mscRsaConnectionLapfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"))
if mibBuilder.loadTexts: mscRsaConnectionLapfStatusEntry.setStatus('mandatory')
mscRsaConnectionLapfState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfState.setStatus('mandatory')
mscRsaConnectionLapfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfQueueSize.setStatus('mandatory')
mscRsaConnectionLapfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13), )
if mibBuilder.loadTexts: mscRsaConnectionLapfStatsTable.setStatus('mandatory')
mscRsaConnectionLapfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"))
if mibBuilder.loadTexts: mscRsaConnectionLapfStatsEntry.setStatus('mandatory')
mscRsaConnectionLapfStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfStateChanges.setStatus('mandatory')
mscRsaConnectionLapfRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfRemoteBusy.setStatus('mandatory')
mscRsaConnectionLapfAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfAckTimeouts.setStatus('mandatory')
mscRsaConnectionLapfRejectFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfRejectFramesRx.setStatus('mandatory')
mscRsaConnectionLapfIFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfIFramesTx.setStatus('mandatory')
mscRsaConnectionLapfIFramesTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfIFramesTxDiscarded.setStatus('mandatory')
mscRsaConnectionLapfIFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfIFramesRx.setStatus('mandatory')
mscRsaConnectionLapfIFramesRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionLapfIFramesRxDiscarded.setStatus('mandatory')
mscRsaConnectionVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2))
mscRsaConnectionVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 1), )
if mibBuilder.loadTexts: mscRsaConnectionVcRowStatusTable.setStatus('mandatory')
mscRsaConnectionVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionVcIndex"))
if mibBuilder.loadTexts: mscRsaConnectionVcRowStatusEntry.setStatus('mandatory')
mscRsaConnectionVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcRowStatus.setStatus('mandatory')
mscRsaConnectionVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcComponentName.setStatus('mandatory')
mscRsaConnectionVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcStorageType.setStatus('mandatory')
mscRsaConnectionVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscRsaConnectionVcIndex.setStatus('mandatory')
mscRsaConnectionVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10), )
if mibBuilder.loadTexts: mscRsaConnectionVcCadTable.setStatus('mandatory')
mscRsaConnectionVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionVcIndex"))
if mibBuilder.loadTexts: mscRsaConnectionVcCadEntry.setStatus('mandatory')
mscRsaConnectionVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2), ("frf10spvc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcType.setStatus('mandatory')
mscRsaConnectionVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcState.setStatus('mandatory')
mscRsaConnectionVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPreviousState.setStatus('mandatory')
mscRsaConnectionVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcDiagnosticCode.setStatus('mandatory')
mscRsaConnectionVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPreviousDiagnosticCode.setStatus('mandatory')
mscRsaConnectionVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCalledNpi.setStatus('mandatory')
mscRsaConnectionVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCalledDna.setStatus('mandatory')
mscRsaConnectionVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCalledLcn.setStatus('mandatory')
mscRsaConnectionVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCallingNpi.setStatus('mandatory')
mscRsaConnectionVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCallingDna.setStatus('mandatory')
mscRsaConnectionVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCallingLcn.setStatus('mandatory')
mscRsaConnectionVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcAccountingEnabled.setStatus('mandatory')
mscRsaConnectionVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcFastSelectCall.setStatus('mandatory')
mscRsaConnectionVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPathReliability.setStatus('mandatory')
mscRsaConnectionVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcAccountingEnd.setStatus('mandatory')
mscRsaConnectionVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPriority.setStatus('mandatory')
mscRsaConnectionVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcSegmentSize.setStatus('mandatory')
mscRsaConnectionVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcMaxSubnetPktSize.setStatus('mandatory')
mscRsaConnectionVcRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcRcosToNetwork.setStatus('mandatory')
mscRsaConnectionVcRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcRcosFromNetwork.setStatus('mandatory')
mscRsaConnectionVcEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcEmissionPriorityToNetwork.setStatus('mandatory')
mscRsaConnectionVcEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcEmissionPriorityFromNetwork.setStatus('mandatory')
mscRsaConnectionVcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcDataPath.setStatus('mandatory')
mscRsaConnectionVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 11), )
if mibBuilder.loadTexts: mscRsaConnectionVcIntdTable.setStatus('mandatory')
mscRsaConnectionVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionVcIndex"))
if mibBuilder.loadTexts: mscRsaConnectionVcIntdEntry.setStatus('mandatory')
mscRsaConnectionVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCallReferenceNumber.setStatus('obsolete')
mscRsaConnectionVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcElapsedTimeTillNow.setStatus('mandatory')
mscRsaConnectionVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcSegmentsRx.setStatus('mandatory')
mscRsaConnectionVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcSegmentsSent.setStatus('mandatory')
mscRsaConnectionVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcStartTime.setStatus('mandatory')
mscRsaConnectionVcCallReferenceNumberDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCallReferenceNumberDecimal.setStatus('mandatory')
mscRsaConnectionVcFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12), )
if mibBuilder.loadTexts: mscRsaConnectionVcFrdTable.setStatus('mandatory')
mscRsaConnectionVcFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionVcIndex"))
if mibBuilder.loadTexts: mscRsaConnectionVcFrdEntry.setStatus('mandatory')
mscRsaConnectionVcFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcFrmCongestedToSubnet.setStatus('mandatory')
mscRsaConnectionVcCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCannotForwardToSubnet.setStatus('mandatory')
mscRsaConnectionVcNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcNotDataXferToSubnet.setStatus('mandatory')
mscRsaConnectionVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscRsaConnectionVcCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcCombErrorsFromSubnet.setStatus('mandatory')
mscRsaConnectionVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcDuplicatesFromSubnet.setStatus('mandatory')
mscRsaConnectionVcNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcNotDataXferFromSubnet.setStatus('mandatory')
mscRsaConnectionVcFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcFrmLossTimeouts.setStatus('mandatory')
mscRsaConnectionVcOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcOoSeqByteCntExceeded.setStatus('mandatory')
mscRsaConnectionVcPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPeakOoSeqPktCount.setStatus('mandatory')
mscRsaConnectionVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPeakOoSeqFrmForwarded.setStatus('mandatory')
mscRsaConnectionVcSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcSendSequenceNumber.setStatus('mandatory')
mscRsaConnectionVcPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPktRetryTimeouts.setStatus('mandatory')
mscRsaConnectionVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPeakRetryQueueSize.setStatus('mandatory')
mscRsaConnectionVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcSubnetRecoveries.setStatus('mandatory')
mscRsaConnectionVcOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcOoSeqPktCntExceeded.setStatus('mandatory')
mscRsaConnectionVcPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcPeakOoSeqByteCount.setStatus('mandatory')
mscRsaConnectionVcDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 417), )
if mibBuilder.loadTexts: mscRsaConnectionVcDmepTable.setStatus('mandatory')
mscRsaConnectionVcDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 417, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionVcIndex"), (0, "Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", "mscRsaConnectionVcDmepValue"))
if mibBuilder.loadTexts: mscRsaConnectionVcDmepEntry.setStatus('mandatory')
mscRsaConnectionVcDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 108, 4, 2, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRsaConnectionVcDmepValue.setStatus('mandatory')
serverAccessRsaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116, 1))
serverAccessRsaGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116, 1, 1))
serverAccessRsaGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116, 1, 1, 3))
serverAccessRsaGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116, 1, 1, 3, 2))
serverAccessRsaCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116, 3))
serverAccessRsaCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116, 3, 1))
serverAccessRsaCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116, 3, 1, 3))
serverAccessRsaCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 116, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-ServerAccessRsaMIB", mscRsaConnectionRowStatus=mscRsaConnectionRowStatus, mscRsaDnaRowStatus=mscRsaDnaRowStatus, mscRsaConnectionVcMaxSubnetPktSize=mscRsaConnectionVcMaxSubnetPktSize, mscRsaConnectionVcCombErrorsFromSubnet=mscRsaConnectionVcCombErrorsFromSubnet, mscRsaConnectionVcCannotForwardToSubnet=mscRsaConnectionVcCannotForwardToSubnet, mscRsaDnaComponentName=mscRsaDnaComponentName, mscRsaRowStatusTable=mscRsaRowStatusTable, mscRsaStateEntry=mscRsaStateEntry, mscRsaVncsAccessRowStatus=mscRsaVncsAccessRowStatus, mscRsaDnaCugInterlockCode=mscRsaDnaCugInterlockCode, mscRsaConnectionVcComponentName=mscRsaConnectionVcComponentName, mscRsaConnectionVcCalledNpi=mscRsaConnectionVcCalledNpi, mscRsaMaxRsiConnections=mscRsaMaxRsiConnections, serverAccessRsaCapabilitiesCA02=serverAccessRsaCapabilitiesCA02, mscRsaDnaCugPrivileged=mscRsaDnaCugPrivileged, mscRsaConnectionVcPeakOoSeqFrmForwarded=mscRsaConnectionVcPeakOoSeqFrmForwarded, mscRsaConnectionServerStatsEntry=mscRsaConnectionServerStatsEntry, mscRsaConnectionLapfStatsTable=mscRsaConnectionLapfStatsTable, mscRsaConnectionLapfRejectFramesRx=mscRsaConnectionLapfRejectFramesRx, mscRsaVncsAccessComponentName=mscRsaVncsAccessComponentName, mscRsaDnaIncCalls=mscRsaDnaIncCalls, mscRsaDnaCugRowStatusEntry=mscRsaDnaCugRowStatusEntry, mscRsaConnectionVc=mscRsaConnectionVc, mscRsaConnectionVcDuplicatesFromSubnet=mscRsaConnectionVcDuplicatesFromSubnet, mscRsaDnaRowStatusEntry=mscRsaDnaRowStatusEntry, mscRsaConnectionVcCadEntry=mscRsaConnectionVcCadEntry, mscRsaVncsAccessRepliesReceived=mscRsaVncsAccessRepliesReceived, mscRsaDnaAddressEntry=mscRsaDnaAddressEntry, mscRsaConnectionVcIntdEntry=mscRsaConnectionVcIntdEntry, mscRsaConnectionRemoteName=mscRsaConnectionRemoteName, mscRsaOperationalState=mscRsaOperationalState, mscRsaRowStatus=mscRsaRowStatus, mscRsaConnectionOperationalTable=mscRsaConnectionOperationalTable, mscRsaDnaRowStatusTable=mscRsaDnaRowStatusTable, mscRsaVncsAccessStateEntry=mscRsaVncsAccessStateEntry, mscRsaConnectionVcPeakOoSeqPktCount=mscRsaConnectionVcPeakOoSeqPktCount, mscRsaConnectionVcCalledLcn=mscRsaConnectionVcCalledLcn, mscRsaVncsAccessRowStatusTable=mscRsaVncsAccessRowStatusTable, mscRsaUsageState=mscRsaUsageState, mscRsaConnectionLapfRemoteBusy=mscRsaConnectionLapfRemoteBusy, mscRsaConnectionVcSegmentsSent=mscRsaConnectionVcSegmentsSent, mscRsa=mscRsa, mscRsaStateTable=mscRsaStateTable, mscRsaConnectionVcDmepValue=mscRsaConnectionVcDmepValue, mscRsaDnaOutgoingOptionsEntry=mscRsaDnaOutgoingOptionsEntry, mscRsaVncsAccessOperationalEntry=mscRsaVncsAccessOperationalEntry, mscRsaConnectionVcCallReferenceNumberDecimal=mscRsaConnectionVcCallReferenceNumberDecimal, mscRsaConnectionLapfStatsEntry=mscRsaConnectionLapfStatsEntry, mscRsaConnectionVcSegmentSize=mscRsaConnectionVcSegmentSize, mscRsaConnectionVcNotDataXferFromSubnet=mscRsaConnectionVcNotDataXferFromSubnet, mscRsaAdminState=mscRsaAdminState, mscRsaVncsAccessTimeToLive=mscRsaVncsAccessTimeToLive, mscRsaVncsAccessRequestsSent=mscRsaVncsAccessRequestsSent, mscRsaConnectionLapfIFramesTx=mscRsaConnectionLapfIFramesTx, serverAccessRsaGroupCA02A=serverAccessRsaGroupCA02A, mscRsaVncsAccessRowStatusEntry=mscRsaVncsAccessRowStatusEntry, mscRsaConnectionVcFastSelectCall=mscRsaConnectionVcFastSelectCall, mscRsaVncsAccessRequestsDiscarded=mscRsaVncsAccessRequestsDiscarded, mscRsaDnaCugStorageType=mscRsaDnaCugStorageType, mscRsaConnectionLapfStateChanges=mscRsaConnectionLapfStateChanges, mscRsaConnectionVcPeakOoSeqByteCount=mscRsaConnectionVcPeakOoSeqByteCount, mscRsaConnectionLapfStatusEntry=mscRsaConnectionLapfStatusEntry, mscRsaConnectionLapfState=mscRsaConnectionLapfState, mscRsaConnectionVcAccountingEnabled=mscRsaConnectionVcAccountingEnabled, serverAccessRsaGroupCA02=serverAccessRsaGroupCA02, mscRsaDnaCugCugOptionsTable=mscRsaDnaCugCugOptionsTable, mscRsaConnectionVcSendSequenceNumber=mscRsaConnectionVcSendSequenceNumber, mscRsaDna=mscRsaDna, mscRsaConnectionVncsRequests=mscRsaConnectionVncsRequests, mscRsaConnectionVcRowStatusTable=mscRsaConnectionVcRowStatusTable, mscRsaConnectionVcRcosToNetwork=mscRsaConnectionVcRcosToNetwork, mscRsaConnectionVcElapsedTimeTillNow=mscRsaConnectionVcElapsedTimeTillNow, mscRsaVncsAccessProvisionedEntry=mscRsaVncsAccessProvisionedEntry, mscRsaDnaCugIndex=mscRsaDnaCugIndex, mscRsaConnectionIndex=mscRsaConnectionIndex, mscRsaDnaIncomingOptionsEntry=mscRsaDnaIncomingOptionsEntry, mscRsaDnaIncAccess=mscRsaDnaIncAccess, mscRsaConnectionOperationalEntry=mscRsaConnectionOperationalEntry, mscRsaConnectionVcCallingDna=mscRsaConnectionVcCallingDna, mscRsaVncsAccessAdminState=mscRsaVncsAccessAdminState, mscRsaConnectionRowStatusTable=mscRsaConnectionRowStatusTable, serverAccessRsaCapabilitiesCA02A=serverAccessRsaCapabilitiesCA02A, mscRsaDnaCugRowStatusTable=mscRsaDnaCugRowStatusTable, mscRsaConnectionVcFrmLossTimeouts=mscRsaConnectionVcFrmLossTimeouts, mscRsaConnectionVcPreviousDiagnosticCode=mscRsaConnectionVcPreviousDiagnosticCode, mscRsaConnectionVcOutOfRangeFrmFromSubnet=mscRsaConnectionVcOutOfRangeFrmFromSubnet, mscRsaConnectionVcIndex=mscRsaConnectionVcIndex, mscRsaOptionsTable=mscRsaOptionsTable, mscRsaConnectionComponentName=mscRsaConnectionComponentName, mscRsaConnectionVcSubnetRecoveries=mscRsaConnectionVcSubnetRecoveries, mscRsaDnaOutCalls=mscRsaDnaOutCalls, mscRsaVncsAccessProvisionedTable=mscRsaVncsAccessProvisionedTable, mscRsaDnaDataNetworkAddress=mscRsaDnaDataNetworkAddress, mscRsaDnaOutgoingOptionsTable=mscRsaDnaOutgoingOptionsTable, serverAccessRsaCapabilitiesCA=serverAccessRsaCapabilitiesCA, mscRsaConnectionVcCallingLcn=mscRsaConnectionVcCallingLcn, mscRsaDnaCugRowStatus=mscRsaDnaCugRowStatus, serverAccessRsaMIB=serverAccessRsaMIB, mscRsaVncsAccessOperationalState=mscRsaVncsAccessOperationalState, mscRsaConnectionVcIntdTable=mscRsaConnectionVcIntdTable, mscRsaConnectionVcStorageType=mscRsaConnectionVcStorageType, mscRsaVncsAccessUsageState=mscRsaVncsAccessUsageState, mscRsaConnectionVcCallReferenceNumber=mscRsaConnectionVcCallReferenceNumber, mscRsaConnectionVcFrdTable=mscRsaConnectionVcFrdTable, mscRsaConnectionLapfQueueSize=mscRsaConnectionLapfQueueSize, mscRsaConnectionVcSegmentsRx=mscRsaConnectionVcSegmentsRx, mscRsaConnection=mscRsaConnection, mscRsaConnectionVcDiagnosticCode=mscRsaConnectionVcDiagnosticCode, mscRsaVncsAccessIndex=mscRsaVncsAccessIndex, mscRsaConnectionVcRcosFromNetwork=mscRsaConnectionVcRcosFromNetwork, mscRsaDnaCugComponentName=mscRsaDnaCugComponentName, mscRsaConnectionVcCalledDna=mscRsaConnectionVcCalledDna, mscRsaStorageType=mscRsaStorageType, mscRsaConnectionLapfIFramesRxDiscarded=mscRsaConnectionLapfIFramesRxDiscarded, mscRsaDnaCugPreferential=mscRsaDnaCugPreferential, mscRsaConnectionLapfIFramesTxDiscarded=mscRsaConnectionLapfIFramesTxDiscarded, mscRsaDnaCugOutCalls=mscRsaDnaCugOutCalls, mscRsaOperationalTable=mscRsaOperationalTable, mscRsaDnaStorageType=mscRsaDnaStorageType, mscRsaConnectionVcState=mscRsaConnectionVcState, mscRsaRowStatusEntry=mscRsaRowStatusEntry, mscRsaConnectionLapfStatusTable=mscRsaConnectionLapfStatusTable, mscRsaOptionsEntry=mscRsaOptionsEntry, mscRsaConnectionVcPathReliability=mscRsaConnectionVcPathReliability, mscRsaConnectionVcPreviousState=mscRsaConnectionVcPreviousState, mscRsaVncsAccessStorageType=mscRsaVncsAccessStorageType, mscRsaConnectionVncsReplies=mscRsaConnectionVncsReplies, mscRsaDnaIncomingOptionsTable=mscRsaDnaIncomingOptionsTable, mscRsaOperationalEntry=mscRsaOperationalEntry, mscRsaConnectionVcFrmCongestedToSubnet=mscRsaConnectionVcFrmCongestedToSubnet, mscRsaConnectionVcEmissionPriorityToNetwork=mscRsaConnectionVcEmissionPriorityToNetwork, mscRsaRsiConnections=mscRsaRsiConnections, mscRsaConnectionVcType=mscRsaConnectionVcType, mscRsaConnectionVcOoSeqByteCntExceeded=mscRsaConnectionVcOoSeqByteCntExceeded, mscRsaConnectionRowStatusEntry=mscRsaConnectionRowStatusEntry, mscRsaVncsAccess=mscRsaVncsAccess, mscRsaDnaCugDnic=mscRsaDnaCugDnic, mscRsaConnectionVcCallingNpi=mscRsaConnectionVcCallingNpi, mscRsaConnectionVcStartTime=mscRsaConnectionVcStartTime, serverAccessRsaGroupCA=serverAccessRsaGroupCA, mscRsaConnectionVcPeakRetryQueueSize=mscRsaConnectionVcPeakRetryQueueSize, mscRsaDnaCugCugOptionsEntry=mscRsaDnaCugCugOptionsEntry, mscRsaConnectionVcRowStatus=mscRsaConnectionVcRowStatus, mscRsaDnaCugIncCalls=mscRsaDnaCugIncCalls, mscRsaConnectionLapfAckTimeouts=mscRsaConnectionLapfAckTimeouts, serverAccessRsaCapabilities=serverAccessRsaCapabilities, mscRsaConnectionVcDmepEntry=mscRsaConnectionVcDmepEntry, mscRsaDnaCug=mscRsaDnaCug, mscRsaComponentName=mscRsaComponentName, mscRsaConnectionStorageType=mscRsaConnectionStorageType, mscRsaConnectionVcPriority=mscRsaConnectionVcPriority, mscRsaConnectionVcDmepTable=mscRsaConnectionVcDmepTable, serverAccessRsaGroup=serverAccessRsaGroup, mscRsaConnectionVcCadTable=mscRsaConnectionVcCadTable, mscRsaConnectionVcAccountingEnd=mscRsaConnectionVcAccountingEnd, mscRsaDnaAddressTable=mscRsaDnaAddressTable, mscRsaConnectionVcOoSeqPktCntExceeded=mscRsaConnectionVcOoSeqPktCntExceeded, mscRsaConnectionVcRowStatusEntry=mscRsaConnectionVcRowStatusEntry, mscRsaConnectionVcDataPath=mscRsaConnectionVcDataPath, mscRsaDnaIndex=mscRsaDnaIndex, mscRsaVncsAccessStateTable=mscRsaVncsAccessStateTable, mscRsaConnectionVcNotDataXferToSubnet=mscRsaConnectionVcNotDataXferToSubnet, mscRsaConnectionCallState=mscRsaConnectionCallState, mscRsaConnectionVcEmissionPriorityFromNetwork=mscRsaConnectionVcEmissionPriorityFromNetwork, mscRsaVncsAccessRequestsQueued=mscRsaVncsAccessRequestsQueued, mscRsaConnectionVcPktRetryTimeouts=mscRsaConnectionVcPktRetryTimeouts, mscRsaDnaCugType=mscRsaDnaCugType, mscRsaDnaNumberingPlanIndicator=mscRsaDnaNumberingPlanIndicator, mscRsaLogicalProcessor=mscRsaLogicalProcessor, mscRsaVncsAccessOperationalTable=mscRsaVncsAccessOperationalTable, mscRsaConnectionLapfIFramesRx=mscRsaConnectionLapfIFramesRx, mscRsaConnectionVcFrdEntry=mscRsaConnectionVcFrdEntry, mscRsaIndex=mscRsaIndex, mscRsaConnectionServerStatsTable=mscRsaConnectionServerStatsTable)
