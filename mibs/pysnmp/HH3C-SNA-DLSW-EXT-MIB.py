#
# PySNMP MIB module HH3C-SNA-DLSW-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-SNA-DLSW-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
MacAddressNC, dlswTConnOperEntry, dlswTConnConfigEntry, TAddress, dlswTConnTcpConfigEntry, LFSize = mibBuilder.importSymbols("DLSW-MIB", "MacAddressNC", "dlswTConnOperEntry", "dlswTConnConfigEntry", "TAddress", "dlswTConnTcpConfigEntry", "LFSize")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ObjectIdentity, MibIdentifier, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, IpAddress, iso, TimeTicks, NotificationType, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "MibIdentifier", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "IpAddress", "iso", "TimeTicks", "NotificationType", "Counter64", "Unsigned32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hh3cDlswExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 62))
hh3cDlswExt.setRevisions(('2005-07-20 19:00',))
if mibBuilder.loadTexts: hh3cDlswExt.setLastUpdated('200507201900Z')
if mibBuilder.loadTexts: hh3cDlswExt.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cDlswExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1))
hh3cdeNode = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1))
hh3cdeTConn = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2))
hh3cdeBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3))
hh3cdeQllc = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4))
hh3cdeSdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5))
hh3cdeLlc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6))
hh3cdeReachableCache = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7))
hh3cdeEthernetBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8))
hh3cdeNodeVendorID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeVendorID.setStatus('current')
hh3cdeNodeIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeIpAddrType.setStatus('current')
hh3cdeNodeLocalAddr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 3), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeLocalAddr.setStatus('current')
hh3cdeNodePriority = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 5), ValueRangeConstraint(65535, 65535), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodePriority.setStatus('current')
hh3cdeNodeInitPacingWindow = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(65535, 65535), )).clone(40)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeInitPacingWindow.setStatus('current')
hh3cdeNodeMaxPacingWindow = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(65535, 65535), )).clone(50)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeMaxPacingWindow.setStatus('current')
hh3cdeNodeKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2000), ValueRangeConstraint(65535, 65535), )).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeKeepAliveInterval.setStatus('current')
hh3cdeNodePermitDynamic = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 65535))).clone(namedValues=NamedValues(("permitDynamic", 1), ("forbidDynamic", 2), ("unknown", 65535))).clone('forbidDynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodePermitDynamic.setStatus('current')
hh3cdeNodeConnTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeConnTimeout.setStatus('current')
hh3cdeNodeLocalPendTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeLocalPendTimeout.setStatus('current')
hh3cdeNodeRemotePendTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeRemotePendTimeout.setStatus('current')
hh3cdeNodeSnaCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeSnaCacheTimeout.setStatus('current')
hh3cdeNodeExplorerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeExplorerTimeout.setStatus('current')
hh3cdeNodeExplorerWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeExplorerWaitTimeout.setStatus('current')
hh3cdeNodeConfigSapList = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="FF000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeConfigSapList.setStatus('current')
hh3cdeNodeMaxTransmission = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeMaxTransmission.setStatus('current')
hh3cdeNodeMulticastStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeMulticastStatus.setStatus('current')
hh3cdeNodeMulticastAddress = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 18), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeMulticastAddress.setStatus('current')
hh3cdeNodeResetTcpAll = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeResetTcpAll.setStatus('current')
hh3cdeNodeStCapTcpNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeStCapTcpNum.setStatus('current')
hh3cdeNodeTcpQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 21), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeTcpQueueMax.setStatus('current')
hh3cdeTConnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cdeTConnConfigTable.setStatus('current')
hh3cdeTConnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1), )
dlswTConnConfigEntry.registerAugmentions(("HH3C-SNA-DLSW-EXT-MIB", "hh3cdeTConnConfigEntry"))
hh3cdeTConnConfigEntry.setIndexNames(*dlswTConnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cdeTConnConfigEntry.setStatus('current')
hh3cdeTConnConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigVersion.setStatus('current')
hh3cdeTConnConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigPriority.setStatus('current')
hh3cdeTConnConfigLfSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 3), LFSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigLfSize.setStatus('current')
hh3cdeTConnConfigKeepaliveIntval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigKeepaliveIntval.setStatus('current')
hh3cdeTConnConfigBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigBackup.setStatus('current')
hh3cdeTConnConfigBackupTAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 6), TAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigBackupTAddr.setStatus('current')
hh3cdeTConnConfigBackupLinger = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigBackupLinger.setStatus('current')
hh3cdeTConnOperTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cdeTConnOperTable.setStatus('current')
hh3cdeTConnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1), )
dlswTConnOperEntry.registerAugmentions(("HH3C-SNA-DLSW-EXT-MIB", "hh3cdeTConnOperEntry"))
hh3cdeTConnOperEntry.setIndexNames(*dlswTConnOperEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cdeTConnOperEntry.setStatus('current')
hh3cdeTConnOperPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("configured", 1), ("learningDynamic", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperPeerType.setStatus('current')
hh3cdeTConnOperVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperVendorID.setStatus('current')
hh3cdeTConnOperVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperVersionString.setStatus('current')
hh3cdeTConnOperUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperUpTime.setStatus('current')
hh3cdeTConnOperMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 5), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperMulticastAddress.setStatus('current')
hh3cdeTConnOperStCapTcpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperStCapTcpNumber.setStatus('current')
hh3cdeTConnOperRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperRecvPkts.setStatus('current')
hh3cdeTConnOperSendPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperSendPkts.setStatus('current')
hh3cdeTConnOperDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperDropPkts.setStatus('current')
hh3cdeTConnTcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigTable.setStatus('current')
hh3cdeTConnTcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 3, 1), )
dlswTConnTcpConfigEntry.registerAugmentions(("HH3C-SNA-DLSW-EXT-MIB", "hh3cdeTConnTcpConfigEntry"))
hh3cdeTConnTcpConfigEntry.setIndexNames(*dlswTConnTcpConfigEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigEntry.setStatus('current')
hh3cdeTConnTcpConfigQueueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 2000)).clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigQueueMax.setStatus('current')
hh3cdeBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cdeBridgeTable.setStatus('current')
hh3cdeBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 1, 1), ).setIndexNames((0, "HH3C-SNA-DLSW-EXT-MIB", "hh3cdeBridgeNumIndex"))
if mibBuilder.loadTexts: hh3cdeBridgeEntry.setStatus('current')
hh3cdeBridgeNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hh3cdeBridgeNumIndex.setStatus('current')
hh3cdeBridgeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeBridgeRowStatus.setStatus('current')
hh3cdeBridgeIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 2), )
if mibBuilder.loadTexts: hh3cdeBridgeIfTable.setStatus('current')
hh3cdeBridgeIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeBridgeIfEntry.setStatus('current')
hh3cdeBridgeIfBrgGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeBridgeIfBrgGrp.setStatus('current')
hh3cdeBridgeIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeBridgeIfRowStatus.setStatus('current')
hh3cdeQllcTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1), )
if mibBuilder.loadTexts: hh3cdeQllcTable.setStatus('current')
hh3cdeQllcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeQllcEntry.setStatus('current')
hh3cQllcX121Address = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcX121Address.setStatus('current')
hh3cQllcLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 2), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcLocalMac.setStatus('current')
hh3cQllcLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcLocalSap.setStatus('current')
hh3cQllcRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 4), MacAddressNC().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcRemoteMac.setStatus('current')
hh3cQllcRemoteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcRemoteSap.setStatus('current')
hh3cQllcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcRowStatus.setStatus('current')
hh3cdeSdlcPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1), )
if mibBuilder.loadTexts: hh3cdeSdlcPortTable.setStatus('current')
hh3cdeSdlcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeSdlcPortEntry.setStatus('current')
hh3cdeSdlcPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("seconday", 2), ("norole", 3))).clone('norole')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortRole.setStatus('current')
hh3cdeSdlcPortSendWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortSendWindow.setStatus('current')
hh3cdeSdlcPortModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("m8", 8), ("m128", 128))).clone('m8')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortModulo.setStatus('current')
hh3cdeSdlcPortMaxPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17600)).clone(265)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxPdu.setStatus('current')
hh3cdeSdlcPortMaxSendQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 255)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxSendQueue.setStatus('current')
hh3cdeSdlcPortMaxTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxTransmission.setStatus('current')
hh3cdeSdlcPortSimultaneousEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortSimultaneousEnable.setStatus('current')
hh3cdeSdlcPortTimerACK = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerACK.setStatus('current')
hh3cdeSdlcPortTimerLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerLifeTime.setStatus('current')
hh3cdeSdlcPortTimerPollPause = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerPollPause.setStatus('current')
hh3cdeSdlcPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortRowStatus.setStatus('current')
hh3cdeLlc2PortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1), )
if mibBuilder.loadTexts: hh3cdeLlc2PortTable.setStatus('current')
hh3cdeLlc2PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeLlc2PortEntry.setStatus('current')
hh3cdeLlc2PortMaxAck = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxAck.setStatus('current')
hh3cdeLlc2PortMaxPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1700)).clone(1493)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxPdu.setStatus('current')
hh3cdeLlc2PortMaxSendQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 200)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxSendQueue.setStatus('current')
hh3cdeLlc2PortMaxTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxTransmission.setStatus('current')
hh3cdeLlc2PortModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("m8", 8), ("m128", 128))).clone('m128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortModulo.setStatus('current')
hh3cdeLlc2PortReceiveWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortReceiveWindow.setStatus('current')
hh3cdeLlc2PortTimerAck = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(200)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerAck.setStatus('current')
hh3cdeLlc2PortTimerAckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(100)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerAckDelay.setStatus('current')
hh3cdeLlc2PortTimerDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(100)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerDetect.setStatus('current')
hh3cdeLlc2PortTimerBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(300)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerBusy.setStatus('current')
hh3cdeLlc2PortTimerPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerPoll.setStatus('current')
hh3cdeLlc2PortTimerReject = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerReject.setStatus('current')
hh3cdeLlc2PortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortRowStatus.setStatus('current')
hh3cdeRchCacheStat = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 1))
hh3cdeRchCacheMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeRchCacheMaxIndex.setStatus('current')
hh3cdeRchCacheNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeRchCacheNextIndex.setStatus('current')
hh3cdeRchCacheTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3), )
if mibBuilder.loadTexts: hh3cdeRchCacheTable.setStatus('current')
hh3cdeRchCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1), ).setIndexNames((0, "HH3C-SNA-DLSW-EXT-MIB", "hh3cdeRchCacheIndex"))
if mibBuilder.loadTexts: hh3cdeRchCacheEntry.setStatus('current')
hh3cdeRchCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cdeRchCacheIndex.setStatus('current')
hh3cdeRchCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("found", 1), ("verify", 2), ("noCacheInfo", 3), ("exploring", 4), ("waiting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeRchCacheStatus.setStatus('current')
hh3cdeRchCacheRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeRchCacheRemainTime.setStatus('current')
hh3cdeRchCacheMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 4), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeRchCacheMac.setStatus('current')
hh3cdeRchCacheRemoteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeRchCacheRemoteIpAddrType.setStatus('current')
hh3cdeRchCacheRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeRchCacheRemoteIp.setStatus('current')
hh3cdeRchCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeRchCacheRowStatus.setStatus('current')
hh3cdeEBMacMapStat = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 1))
hh3cdeEBMacMapMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeEBMacMapMaxIndex.setStatus('current')
hh3cdeEBMacMapNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeEBMacMapNextIndex.setStatus('current')
hh3cdeEBIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3), )
if mibBuilder.loadTexts: hh3cdeEBIfTable.setStatus('current')
hh3cdeEBIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeEBIfEntry.setStatus('current')
hh3cdeEBMulticastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1, 1), MacAddressNC().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMulticastMac.setStatus('current')
hh3cdeEBPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBPriority.setStatus('current')
hh3cdeEBtimer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBtimer.setStatus('current')
hh3cdeEBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBRowStatus.setStatus('current')
hh3cdeEBMacMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4), )
if mibBuilder.loadTexts: hh3cdeEBMacMapTable.setStatus('current')
hh3cdeEBMacMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-SNA-DLSW-EXT-MIB", "hh3cdeEBMacMapIndex"))
if mibBuilder.loadTexts: hh3cdeEBMacMapEntry.setStatus('current')
hh3cdeEBMacMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cdeEBMacMapIndex.setStatus('current')
hh3cdeEBMacMapLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 2), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMacMapLocalMac.setStatus('current')
hh3cdeEBMacMapRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 3), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMacMapRemoteMac.setStatus('current')
hh3cdeEBMacMapNeighbour = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 4), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMacMapNeighbour.setStatus('current')
hh3cdeEBMacMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMacMapRowStatus.setStatus('current')
mibBuilder.exportSymbols("HH3C-SNA-DLSW-EXT-MIB", hh3cdeNode=hh3cdeNode, hh3cdeSdlcPortMaxSendQueue=hh3cdeSdlcPortMaxSendQueue, hh3cdeRchCacheRemainTime=hh3cdeRchCacheRemainTime, hh3cdeSdlcPortTable=hh3cdeSdlcPortTable, hh3cdeNodeKeepAliveInterval=hh3cdeNodeKeepAliveInterval, hh3cQllcRowStatus=hh3cQllcRowStatus, hh3cdeNodePriority=hh3cdeNodePriority, hh3cdeRchCacheMac=hh3cdeRchCacheMac, hh3cdeLlc2PortTable=hh3cdeLlc2PortTable, PYSNMP_MODULE_ID=hh3cDlswExt, hh3cdeNodePermitDynamic=hh3cdeNodePermitDynamic, hh3cdeLlc2PortTimerDetect=hh3cdeLlc2PortTimerDetect, hh3cdeEBIfTable=hh3cdeEBIfTable, hh3cdeEBMacMapEntry=hh3cdeEBMacMapEntry, hh3cQllcRemoteMac=hh3cQllcRemoteMac, hh3cdeLlc2PortTimerAckDelay=hh3cdeLlc2PortTimerAckDelay, hh3cdeLlc2PortTimerPoll=hh3cdeLlc2PortTimerPoll, hh3cQllcLocalSap=hh3cQllcLocalSap, hh3cdeNodeMulticastStatus=hh3cdeNodeMulticastStatus, hh3cdeTConnConfigEntry=hh3cdeTConnConfigEntry, hh3cdeBridgeNumIndex=hh3cdeBridgeNumIndex, hh3cdeNodeRemotePendTimeout=hh3cdeNodeRemotePendTimeout, hh3cdeNodeLocalPendTimeout=hh3cdeNodeLocalPendTimeout, hh3cdeNodeStCapTcpNum=hh3cdeNodeStCapTcpNum, hh3cdeRchCacheEntry=hh3cdeRchCacheEntry, hh3cdeNodeIpAddrType=hh3cdeNodeIpAddrType, hh3cdeRchCacheIndex=hh3cdeRchCacheIndex, hh3cdeLlc2PortReceiveWindow=hh3cdeLlc2PortReceiveWindow, hh3cdeNodeVendorID=hh3cdeNodeVendorID, hh3cdeTConnOperStCapTcpNumber=hh3cdeTConnOperStCapTcpNumber, hh3cdeBridgeIfTable=hh3cdeBridgeIfTable, hh3cdeBridge=hh3cdeBridge, hh3cdeLlc2PortTimerAck=hh3cdeLlc2PortTimerAck, hh3cdeTConnTcpConfigEntry=hh3cdeTConnTcpConfigEntry, hh3cdeTConnTcpConfigTable=hh3cdeTConnTcpConfigTable, hh3cdeQllcEntry=hh3cdeQllcEntry, hh3cdeEBMacMapNeighbour=hh3cdeEBMacMapNeighbour, hh3cdeRchCacheRemoteIp=hh3cdeRchCacheRemoteIp, hh3cdeBridgeEntry=hh3cdeBridgeEntry, hh3cdeNodeTcpQueueMax=hh3cdeNodeTcpQueueMax, hh3cdeReachableCache=hh3cdeReachableCache, hh3cdeEthernetBackup=hh3cdeEthernetBackup, hh3cdeNodeMulticastAddress=hh3cdeNodeMulticastAddress, hh3cdeTConnConfigBackup=hh3cdeTConnConfigBackup, hh3cdeEBMacMapMaxIndex=hh3cdeEBMacMapMaxIndex, hh3cdeTConnConfigVersion=hh3cdeTConnConfigVersion, hh3cdeNodeMaxPacingWindow=hh3cdeNodeMaxPacingWindow, hh3cdeNodeExplorerWaitTimeout=hh3cdeNodeExplorerWaitTimeout, hh3cQllcLocalMac=hh3cQllcLocalMac, hh3cdeTConn=hh3cdeTConn, hh3cdeRchCacheNextIndex=hh3cdeRchCacheNextIndex, hh3cdeSdlcPortTimerACK=hh3cdeSdlcPortTimerACK, hh3cdeNodeConfigSapList=hh3cdeNodeConfigSapList, hh3cdeTConnConfigBackupTAddr=hh3cdeTConnConfigBackupTAddr, hh3cdeEBMacMapRowStatus=hh3cdeEBMacMapRowStatus, hh3cdeQllcTable=hh3cdeQllcTable, hh3cdeTConnOperMulticastAddress=hh3cdeTConnOperMulticastAddress, hh3cdeLlc2=hh3cdeLlc2, hh3cdeSdlcPortModulo=hh3cdeSdlcPortModulo, hh3cdeNodeSnaCacheTimeout=hh3cdeNodeSnaCacheTimeout, hh3cdeNodeLocalAddr=hh3cdeNodeLocalAddr, hh3cdeTConnConfigPriority=hh3cdeTConnConfigPriority, hh3cdeBridgeIfRowStatus=hh3cdeBridgeIfRowStatus, hh3cdeBridgeRowStatus=hh3cdeBridgeRowStatus, hh3cdeRchCacheRemoteIpAddrType=hh3cdeRchCacheRemoteIpAddrType, hh3cdeLlc2PortTimerReject=hh3cdeLlc2PortTimerReject, hh3cdeEBMacMapIndex=hh3cdeEBMacMapIndex, hh3cdeSdlcPortSimultaneousEnable=hh3cdeSdlcPortSimultaneousEnable, hh3cdeRchCacheTable=hh3cdeRchCacheTable, hh3cQllcRemoteSap=hh3cQllcRemoteSap, hh3cdeLlc2PortTimerBusy=hh3cdeLlc2PortTimerBusy, hh3cdeTConnConfigBackupLinger=hh3cdeTConnConfigBackupLinger, hh3cdeQllc=hh3cdeQllc, hh3cDlswExtMIBObjects=hh3cDlswExtMIBObjects, hh3cDlswExt=hh3cDlswExt, hh3cdeTConnOperSendPkts=hh3cdeTConnOperSendPkts, hh3cdeEBMacMapRemoteMac=hh3cdeEBMacMapRemoteMac, hh3cdeLlc2PortMaxAck=hh3cdeLlc2PortMaxAck, hh3cdeRchCacheMaxIndex=hh3cdeRchCacheMaxIndex, hh3cdeSdlc=hh3cdeSdlc, hh3cdeLlc2PortMaxPdu=hh3cdeLlc2PortMaxPdu, hh3cdeSdlcPortRole=hh3cdeSdlcPortRole, hh3cdeTConnOperDropPkts=hh3cdeTConnOperDropPkts, hh3cdeTConnOperUpTime=hh3cdeTConnOperUpTime, hh3cdeBridgeIfEntry=hh3cdeBridgeIfEntry, hh3cdeLlc2PortModulo=hh3cdeLlc2PortModulo, hh3cdeTConnOperEntry=hh3cdeTConnOperEntry, hh3cdeTConnOperVendorID=hh3cdeTConnOperVendorID, hh3cQllcX121Address=hh3cQllcX121Address, hh3cdeTConnConfigLfSize=hh3cdeTConnConfigLfSize, hh3cdeEBIfEntry=hh3cdeEBIfEntry, hh3cdeSdlcPortEntry=hh3cdeSdlcPortEntry, hh3cdeEBMacMapTable=hh3cdeEBMacMapTable, hh3cdeNodeMaxTransmission=hh3cdeNodeMaxTransmission, hh3cdeRchCacheStat=hh3cdeRchCacheStat, hh3cdeTConnConfigTable=hh3cdeTConnConfigTable, hh3cdeLlc2PortMaxSendQueue=hh3cdeLlc2PortMaxSendQueue, hh3cdeTConnOperVersionString=hh3cdeTConnOperVersionString, hh3cdeTConnTcpConfigQueueMax=hh3cdeTConnTcpConfigQueueMax, hh3cdeSdlcPortTimerPollPause=hh3cdeSdlcPortTimerPollPause, hh3cdeEBRowStatus=hh3cdeEBRowStatus, hh3cdeSdlcPortMaxTransmission=hh3cdeSdlcPortMaxTransmission, hh3cdeSdlcPortSendWindow=hh3cdeSdlcPortSendWindow, hh3cdeEBMacMapNextIndex=hh3cdeEBMacMapNextIndex, hh3cdeNodeConnTimeout=hh3cdeNodeConnTimeout, hh3cdeTConnOperTable=hh3cdeTConnOperTable, hh3cdeTConnConfigKeepaliveIntval=hh3cdeTConnConfigKeepaliveIntval, hh3cdeLlc2PortRowStatus=hh3cdeLlc2PortRowStatus, hh3cdeSdlcPortRowStatus=hh3cdeSdlcPortRowStatus, hh3cdeTConnOperPeerType=hh3cdeTConnOperPeerType, hh3cdeLlc2PortEntry=hh3cdeLlc2PortEntry, hh3cdeTConnOperRecvPkts=hh3cdeTConnOperRecvPkts, hh3cdeNodeInitPacingWindow=hh3cdeNodeInitPacingWindow, hh3cdeEBMacMapLocalMac=hh3cdeEBMacMapLocalMac, hh3cdeNodeResetTcpAll=hh3cdeNodeResetTcpAll, hh3cdeRchCacheStatus=hh3cdeRchCacheStatus, hh3cdeRchCacheRowStatus=hh3cdeRchCacheRowStatus, hh3cdeEBPriority=hh3cdeEBPriority, hh3cdeBridgeTable=hh3cdeBridgeTable, hh3cdeEBMulticastMac=hh3cdeEBMulticastMac, hh3cdeSdlcPortTimerLifeTime=hh3cdeSdlcPortTimerLifeTime, hh3cdeSdlcPortMaxPdu=hh3cdeSdlcPortMaxPdu, hh3cdeNodeExplorerTimeout=hh3cdeNodeExplorerTimeout, hh3cdeEBMacMapStat=hh3cdeEBMacMapStat, hh3cdeEBtimer=hh3cdeEBtimer, hh3cdeLlc2PortMaxTransmission=hh3cdeLlc2PortMaxTransmission, hh3cdeBridgeIfBrgGrp=hh3cdeBridgeIfBrgGrp)
