#
# PySNMP MIB module MICROCOM-MBR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICROCOM-MBR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:02:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, IpAddress, NotificationType, ModuleIdentity, enterprises, Unsigned32, Counter32, Counter64, TimeTicks, Bits, NotificationType, MibIdentifier, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "IpAddress", "NotificationType", "ModuleIdentity", "enterprises", "Unsigned32", "Counter32", "Counter64", "TimeTicks", "Bits", "NotificationType", "MibIdentifier", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class CompRatio(Integer32):
    pass

class PortNum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 5)

class VcNum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 15)

class StatsInterval(Integer32):
    pass

class LongTermStatsPeriod(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 6)

class StatsRawCount(Integer32):
    pass

mnpi = MibIdentifier((1, 3, 6, 1, 4, 1, 102))
mbr = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1))
mbrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1))
mbrSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 1))
mbrSysSwVers = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 1))
mbrSWRev = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrSWRev.setStatus('mandatory')
mbrSWRel = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrSWRel.setStatus('mandatory')
mbrSWTstVers = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrSWTstVers.setStatus('mandatory')
mbrSWSpecial = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrSWSpecial.setStatus('mandatory')
mbrBootDate = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrBootDate.setStatus('mandatory')
mbrBootTime = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrBootTime.setStatus('mandatory')
mbrConfigString = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 4))
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 4, 1) + (1000, ), Integer32())
mbrArchCfgStr = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 4, 1), OctetString()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: mbrArchCfgStr.setStatus('mandatory')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 4, 2) + (1001, ), Integer32())
mbrCurCfgStr = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 4, 2), OctetString()).setMaxAccess("readwrite").setIndexNames((0, "MICROCOM-MBR-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: mbrCurCfgStr.setStatus('mandatory')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 4, 3) + (1002, ), Integer32())
mbrRunCfgStr = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 4, 3), OctetString()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: mbrRunCfgStr.setStatus('mandatory')
mbrSysAddress = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrSysAddress.setStatus('mandatory')
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 6) + (1003, ), Integer32())
mbrConfigRec = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "pysmiFakeCol1003"))
if mibBuilder.loadTexts: mbrConfigRec.setStatus('mandatory')
mbrSysCfgTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 2))
mbrSysType = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("mbr6000", 2), ("mbr6500", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrSysType.setStatus('mandatory')
mbrSysName = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrSysName.setStatus('mandatory')
mbrSysPasswd = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrSysPasswd.setStatus('mandatory')
mbrSysStats = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 3))
mbrDesigRootAddr = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 3, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrDesigRootAddr.setStatus('mandatory')
mbrDesigRootPriority = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrDesigRootPriority.setStatus('mandatory')
mbrRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrRootPathCost.setStatus('mandatory')
mbrRootPort = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrRootPort.setStatus('mandatory')
mbrSysControl = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 4))
mbrCtrlRequester = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrCtrlRequester.setStatus('mandatory')
mbrCtrlPasswd = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrCtrlPasswd.setStatus('mandatory')
mbrCtrlCmd = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 4, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrCtrlCmd.setStatus('mandatory')
mbrCtrlPort = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 4, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrCtrlPort.setStatus('mandatory')
mbrCtrlAddress = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrCtrlAddress.setStatus('mandatory')
mbrCtrlPath = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 4, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrCtrlPath.setStatus('mandatory')
mbrCtrlParm = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 4, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrCtrlParm.setStatus('mandatory')
mbrCtrlVC = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 4, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrCtrlVC.setStatus('mandatory')
mbrSession = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 5))
mbrSessionFlag = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrSessionFlag.setStatus('mandatory')
mbrSessionPartner = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrSessionPartner.setStatus('mandatory')
mbrSessionPath = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrSessionPath.setStatus('mandatory')
mbrDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 6))
mbrDlFileName = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrDlFileName.setStatus('mandatory')
mbrDlDevice = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrDlDevice.setStatus('mandatory')
mbrDlStatus = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrDlStatus.setStatus('mandatory')
pysmiFakeCol1004 = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 6, 4) + (1004, ), Integer32())
mbrDlReadRec = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 6, 4), OctetString()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "pysmiFakeCol1004"))
if mibBuilder.loadTexts: mbrDlReadRec.setStatus('mandatory')
pysmiFakeCol1005 = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 6, 5) + (1005, ), Integer32())
mbrDlWriteRec = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 6, 5), OctetString()).setMaxAccess("readwrite").setIndexNames((0, "MICROCOM-MBR-MIB", "pysmiFakeCol1005"))
if mibBuilder.loadTexts: mbrDlWriteRec.setStatus('mandatory')
mbrDlFileSize = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrDlFileSize.setStatus('mandatory')
mbrAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 7))
mbrAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 102, 1, 1, 7, 1), )
if mibBuilder.loadTexts: mbrAlarmTable.setStatus('mandatory')
pysmiFakeCol1006 = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 7, 1, 1) + (1006, ), Integer32())
mbrAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 102, 1, 1, 7, 1, 1), ).setIndexNames((0, "MICROCOM-MBR-MIB", "pysmiFakeCol1006"))
if mibBuilder.loadTexts: mbrAlarmEntry.setStatus('mandatory')
mbrAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 7, 1, 1, 7), Integer32())
if mibBuilder.loadTexts: mbrAlarmText.setStatus('mandatory')
mbrNetReports = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 8))
mbrNetRptDestIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbrNetRptDestIpAddress.setStatus('mandatory')
mbrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 10))
mbrTrapCode = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 10, 1), Counter32())
if mibBuilder.loadTexts: mbrTrapCode.setStatus('mandatory')
mbrTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 10, 2), Integer32())
if mibBuilder.loadTexts: mbrTrapPort.setStatus('mandatory')
pysmiFakeCol1007 = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 1, 10, 3) + (1007, ), Integer32())
mbrTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 10, 3), Integer32()).setIndexNames((0, "MICROCOM-MBR-MIB", "pysmiFakeCol1007"))
if mibBuilder.loadTexts: mbrTrapInfo.setStatus('mandatory')
mbrRingMgtAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 1, 11))
mbrRmAlarmStatAddr = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 11, 1), MacAddress())
if mibBuilder.loadTexts: mbrRmAlarmStatAddr.setStatus('mandatory')
mbrRmAlarmNaunAddr = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 11, 2), MacAddress())
if mibBuilder.loadTexts: mbrRmAlarmNaunAddr.setStatus('mandatory')
mbrRmAlarmBeaconType = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 1, 11, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("recoveryModeSet", 1), ("signalLossError", 2), ("streamSignalNotClaimToken", 3), ("streamSignalClaimToken", 4))))
if mibBuilder.loadTexts: mbrRmAlarmBeaconType.setStatus('mandatory')
mbrWanInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2))
mbrWifTable = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2, 2))
mbrWifEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1))
mbrWifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2))
mbrWifLinkState = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 0), ("blocked", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("blockingInit", 5), ("up", 6), ("down", 7)))).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifLinkState.setStatus('mandatory')
mbrWifLinkDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 2))
mbrWifLinkDelaySeconds = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifLinkDelaySeconds.setStatus('mandatory')
mbrWifLinkDelayMillis = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifLinkDelayMillis.setStatus('mandatory')
mbrWifSppActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifSppActiveCount.setStatus('mandatory')
mbrWifLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifLinkSpeed.setStatus('mandatory')
mbrWifLinkChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 5), Integer32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifLinkChangeTime.setStatus('mandatory')
mbrWifLinkChangeDate = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 6), Integer32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifLinkChangeDate.setStatus('mandatory')
mbrWifLongTermStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 7), LongTermStatsPeriod()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifLongTermStatsInterval.setStatus('mandatory')
mbrWifCompNeg = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("compressionOff", 0), ("compressionOn", 1)))).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifCompNeg.setStatus('mandatory')
mbrWifLoadShareSetId = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 9), Counter32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifLoadShareSetId.setStatus('mandatory')
mbrWifSpecificInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10))
mbrWifX25Info = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1))
mbrWifVcCount = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifVcCount.setStatus('mandatory')
mbrWifVcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2))
mbrWifVcCallState = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noSwitch", 0), ("idle", 1), ("calling", 2), ("listening", 3), ("established", 4), ("disconnecting", 5), ("available", 6)))).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcCallState.setStatus('mandatory')
mbrWifVcDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2, 2))
mbrWifVcDelaySeconds = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifVcDelaySeconds.setStatus('mandatory')
mbrWifVcDelayMillis = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcDelayMillis.setStatus('mandatory')
mbrWifVcLongTermStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2, 3), LongTermStatsPeriod()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcLongTermStatsInterval.setStatus('mandatory')
mbrWifVcCompNeg = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("compressionOff", 0), ("compressionOn", 1)))).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcCompNeg.setStatus('mandatory')
mbrWifVcLcn = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2, 5), Integer32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcLcn.setStatus('mandatory')
mbrWifVcRemoteDte = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 2, 10, 1, 2, 6), DisplayString()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcRemoteDte.setStatus('mandatory')
mbrWifStatTable = MibTable((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: mbrWifStatTable.setStatus('mandatory')
mbrWifStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "MICROCOM-MBR-MIB", "StatsInterval"), (0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifStatEntry.setStatus('mandatory')
mbrWifRcvChars = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 1), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifRcvChars.setStatus('mandatory')
mbrWifXmtChars = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 2), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifXmtChars.setStatus('mandatory')
mbrWifRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 3), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifRcvFrames.setStatus('mandatory')
mbrWifXmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 4), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifXmtFrames.setStatus('mandatory')
mbrWifRcvBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 5), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifRcvBadFrames.setStatus('mandatory')
mbrWifXmtRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 6), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifXmtRejects.setStatus('mandatory')
mbrWifRcvRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 7), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifRcvRejects.setStatus('mandatory')
mbrWifRexmtTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 8), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifRexmtTimeouts.setStatus('mandatory')
mbrWifLanPktsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 9), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifLanPktsDiscarded.setStatus('mandatory')
mbrWifMgmtPktsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 10), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifMgmtPktsForwarded.setStatus('mandatory')
mbrWifRcvCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 11), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifRcvCompRatio.setStatus('mandatory')
mbrWifXmtCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 12), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifXmtCompRatio.setStatus('mandatory')
mbrWifRminCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 13), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifRminCompRatio.setStatus('mandatory')
mbrWifXminCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 14), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifXminCompRatio.setStatus('mandatory')
mbrWifRmaxCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 15), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifRmaxCompRatio.setStatus('mandatory')
mbrWifXmaxCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 1, 16), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrWifXmaxCompRatio.setStatus('mandatory')
mbrWifVcStatTable = MibTable((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: mbrWifVcStatTable.setStatus('mandatory')
mbrWifVcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "MICROCOM-MBR-MIB", "StatInterval"), (0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcStatEntry.setStatus('mandatory')
mbrWifVcRcvChars = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 1), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifVcRcvChars.setStatus('mandatory')
mbrWifVcXmtChars = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 2), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifVcXmtChars.setStatus('mandatory')
mbrWifVcRcvX25Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 3), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifVcRcvX25Pkts.setStatus('mandatory')
mbrWifVcXmtX25Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 4), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrWifVcXmtX25Pkts.setStatus('mandatory')
mbrWifVcRcvCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 5), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcRcvCompRatio.setStatus('mandatory')
mbrWifVcXmtCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 6), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcXmtCompRatio.setStatus('mandatory')
mbrWifVcRminCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 7), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcRminCompRatio.setStatus('mandatory')
mbrWifVcXminCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 8), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcXminCompRatio.setStatus('mandatory')
mbrWifVcRmaxCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 9), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcRmaxCompRatio.setStatus('mandatory')
mbrWifVcXmaxCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 2, 2, 1, 3, 2, 1, 10), CompRatio()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"), (0, "MICROCOM-MBR-MIB", "VcNum"))
if mibBuilder.loadTexts: mbrWifVcXmaxCompRatio.setStatus('mandatory')
mbrLanInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 3))
mbrLifTable = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 3, 2))
mbrLifEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1))
mbrLifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 2))
mbrLifState = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 2, 1), Counter32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrLifState.setStatus('mandatory')
mbrLifMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 2, 2), MacAddress()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrLifMacAddress.setStatus('mandatory')
mbrLifHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 2, 3), Counter32()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrLifHardwareRev.setStatus('mandatory')
mbrLifLongTermStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 2, 4), LongTermStatsPeriod()).setMaxAccess("readonly").setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrLifLongTermStatsInterval.setStatus('mandatory')
mbrLifRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 2, 5), Integer32()).setIndexNames((0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrLifRingNumber.setStatus('mandatory')
mbrLifStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3))
mbrLifStatTable = MibTable((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1), )
if mibBuilder.loadTexts: mbrLifStatTable.setStatus('mandatory')
mbrLifStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1, 1), ).setIndexNames((0, "MICROCOM-MBR-MIB", "StatsInterval"), (0, "MICROCOM-MBR-MIB", "PortNum"))
if mibBuilder.loadTexts: mbrLifStatEntry.setStatus('mandatory')
mbrLifRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1, 1, 1), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrLifRcvPkts.setStatus('mandatory')
mbrLifFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1, 1, 2), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrLifFwdPkts.setStatus('mandatory')
mbrLifRcvMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1, 1, 3), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrLifRcvMcastPkts.setStatus('mandatory')
mbrLifFwdMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1, 1, 4), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrLifFwdMcastPkts.setStatus('mandatory')
mbrLifRcvErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1, 1, 5), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrLifRcvErrPkts.setStatus('mandatory')
mbrLifNobufDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1, 1, 6), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrLifNobufDiscPkts.setStatus('mandatory')
mbrLifXmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 102, 1, 3, 2, 1, 3, 1, 1, 7), StatsRawCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbrLifXmtPkts.setStatus('mandatory')
mibBuilder.exportSymbols("MICROCOM-MBR-MIB", mbrWifVcXmtChars=mbrWifVcXmtChars, mbrSysInfo=mbrSysInfo, mbrCtrlPath=mbrCtrlPath, mbrWifMgmtPktsForwarded=mbrWifMgmtPktsForwarded, mnpi=mnpi, mbrLifInfo=mbrLifInfo, mbrBootDate=mbrBootDate, pysmiFakeCol1001=pysmiFakeCol1001, MacAddress=MacAddress, mbrTrapPort=mbrTrapPort, mbrWifSpecificInfo=mbrWifSpecificInfo, mbrSessionPartner=mbrSessionPartner, mbrRunCfgStr=mbrRunCfgStr, mbrSWRel=mbrSWRel, mbrLifStatTable=mbrLifStatTable, mbrSysCfgTbl=mbrSysCfgTbl, mbrWifCompNeg=mbrWifCompNeg, StatsRawCount=StatsRawCount, mbrSysName=mbrSysName, mbrDesigRootPriority=mbrDesigRootPriority, mbrWanInterfaces=mbrWanInterfaces, mbrConfigRec=mbrConfigRec, mbrSystem=mbrSystem, CompRatio=CompRatio, mbrWifLinkChangeTime=mbrWifLinkChangeTime, mbrDlReadRec=mbrDlReadRec, mbrLifRcvMcastPkts=mbrLifRcvMcastPkts, pysmiFakeCol1000=pysmiFakeCol1000, mbrAlarms=mbrAlarms, mbrWifRcvChars=mbrWifRcvChars, mbrWifXmtRejects=mbrWifXmtRejects, mbrWifVcLongTermStatsInterval=mbrWifVcLongTermStatsInterval, mbrConfigString=mbrConfigString, mbrDlWriteRec=mbrDlWriteRec, mbrWifLinkSpeed=mbrWifLinkSpeed, pysmiFakeCol1006=pysmiFakeCol1006, mbrLifMacAddress=mbrLifMacAddress, mbrCurCfgStr=mbrCurCfgStr, mbrDlDevice=mbrDlDevice, mbrWifVcXminCompRatio=mbrWifVcXminCompRatio, mbrSWRev=mbrSWRev, mbrAlarmText=mbrAlarmText, mbrLifTable=mbrLifTable, mbrCtrlParm=mbrCtrlParm, mbrLifEntry=mbrLifEntry, mbrWifX25Info=mbrWifX25Info, mbrLifFwdPkts=mbrLifFwdPkts, mbrSessionFlag=mbrSessionFlag, mbrWifTable=mbrWifTable, mbrLifRcvErrPkts=mbrLifRcvErrPkts, VcNum=VcNum, mbrWifLinkDelay=mbrWifLinkDelay, mbrWifStatTable=mbrWifStatTable, mbrTraps=mbrTraps, mbrLifXmtPkts=mbrLifXmtPkts, pysmiFakeCol1002=pysmiFakeCol1002, mbrWifLongTermStatsInterval=mbrWifLongTermStatsInterval, mbrCtrlPort=mbrCtrlPort, mbrLifStatEntry=mbrLifStatEntry, mbrWifRcvFrames=mbrWifRcvFrames, mbrCtrlVC=mbrCtrlVC, mbrRmAlarmStatAddr=mbrRmAlarmStatAddr, mbr=mbr, mbrNetRptDestIpAddress=mbrNetRptDestIpAddress, mbrWifLinkChangeDate=mbrWifLinkChangeDate, mbrSWTstVers=mbrSWTstVers, mbrAlarmTable=mbrAlarmTable, mbrRootPort=mbrRootPort, mbrWifRcvBadFrames=mbrWifRcvBadFrames, mbrWifRexmtTimeouts=mbrWifRexmtTimeouts, mbrWifVcRemoteDte=mbrWifVcRemoteDte, mbrWifLoadShareSetId=mbrWifLoadShareSetId, mbrWifEntry=mbrWifEntry, mbrWifVcDelaySeconds=mbrWifVcDelaySeconds, mbrRmAlarmNaunAddr=mbrRmAlarmNaunAddr, mbrWifVcDelay=mbrWifVcDelay, mbrLifNobufDiscPkts=mbrLifNobufDiscPkts, mbrWifLinkState=mbrWifLinkState, mbrWifVcCallState=mbrWifVcCallState, mbrLifState=mbrLifState, mbrCtrlAddress=mbrCtrlAddress, mbrDlFileSize=mbrDlFileSize, mbrWifLinkDelaySeconds=mbrWifLinkDelaySeconds, mbrWifLanPktsDiscarded=mbrWifLanPktsDiscarded, pysmiFakeCol1003=pysmiFakeCol1003, mbrWifVcXmaxCompRatio=mbrWifVcXmaxCompRatio, mbrLifLongTermStatsInterval=mbrLifLongTermStatsInterval, mbrWifRcvCompRatio=mbrWifRcvCompRatio, mbrRootPathCost=mbrRootPathCost, mbrWifRmaxCompRatio=mbrWifRmaxCompRatio, mbrWifVcXmtX25Pkts=mbrWifVcXmtX25Pkts, mbrLifRcvPkts=mbrLifRcvPkts, mbrRmAlarmBeaconType=mbrRmAlarmBeaconType, mbrWifVcRmaxCompRatio=mbrWifVcRmaxCompRatio, mbrCtrlCmd=mbrCtrlCmd, mbrWifVcRcvCompRatio=mbrWifVcRcvCompRatio, mbrLanInterfaces=mbrLanInterfaces, mbrSysSwVers=mbrSysSwVers, mbrSessionPath=mbrSessionPath, mbrWifVcCompNeg=mbrWifVcCompNeg, mbrSysControl=mbrSysControl, mbrDlFileName=mbrDlFileName, mbrNetReports=mbrNetReports, mbrLifHardwareRev=mbrLifHardwareRev, mbrWifXmaxCompRatio=mbrWifXmaxCompRatio, pysmiFakeCol1004=pysmiFakeCol1004, mbrArchCfgStr=mbrArchCfgStr, LongTermStatsPeriod=LongTermStatsPeriod, mbrDlStatus=mbrDlStatus, mbrSWSpecial=mbrSWSpecial, pysmiFakeCol1005=pysmiFakeCol1005, PortNum=PortNum, mbrWifVcRcvChars=mbrWifVcRcvChars, pysmiFakeCol1007=pysmiFakeCol1007, mbrRingMgtAlarms=mbrRingMgtAlarms, mbrWifVcStatTable=mbrWifVcStatTable, mbrWifXmtFrames=mbrWifXmtFrames, mbrLifStatistics=mbrLifStatistics, mbrWifRminCompRatio=mbrWifRminCompRatio, mbrTrapInfo=mbrTrapInfo, mbrWifInfo=mbrWifInfo, mbrSysType=mbrSysType, mbrDownload=mbrDownload, mbrDesigRootAddr=mbrDesigRootAddr, mbrLifFwdMcastPkts=mbrLifFwdMcastPkts, mbrWifXmtChars=mbrWifXmtChars, mbrAlarmEntry=mbrAlarmEntry, mbrTrapCode=mbrTrapCode, mbrWifStatEntry=mbrWifStatEntry, mbrSysAddress=mbrSysAddress, StatsInterval=StatsInterval, mbrWifVcInfo=mbrWifVcInfo, mbrSysStats=mbrSysStats, mbrWifVcXmtCompRatio=mbrWifVcXmtCompRatio, mbrWifVcCount=mbrWifVcCount, mbrWifVcStatEntry=mbrWifVcStatEntry, mbrWifRcvRejects=mbrWifRcvRejects, mbrWifXmtCompRatio=mbrWifXmtCompRatio, mbrWifXminCompRatio=mbrWifXminCompRatio, mbrWifVcLcn=mbrWifVcLcn, mbrSysPasswd=mbrSysPasswd, mbrWifVcRcvX25Pkts=mbrWifVcRcvX25Pkts, mbrWifVcDelayMillis=mbrWifVcDelayMillis, mbrWifSppActiveCount=mbrWifSppActiveCount, mbrWifLinkDelayMillis=mbrWifLinkDelayMillis, mbrWifVcRminCompRatio=mbrWifVcRminCompRatio, mbrCtrlPasswd=mbrCtrlPasswd, mbrSession=mbrSession, mbrBootTime=mbrBootTime, mbrLifRingNumber=mbrLifRingNumber, mbrCtrlRequester=mbrCtrlRequester)
