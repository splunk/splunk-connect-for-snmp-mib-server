#
# PySNMP MIB module MYLEXRAID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MYLEXRAID-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:06:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, Integer32, Gauge32, Counter64, Counter32, NotificationType, ObjectIdentity, iso, Unsigned32, NotificationType, enterprises, Bits, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Integer32", "Gauge32", "Counter64", "Counter32", "NotificationType", "ObjectIdentity", "iso", "Unsigned32", "NotificationType", "enterprises", "Bits", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDate(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

mylex = MibIdentifier((1, 3, 6, 1, 4, 1, 1608))
dmtfStd = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1))
dmtfComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1, 1))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1))
tControllerInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2), )
if mibBuilder.loadTexts: tControllerInformation.setStatus('mandatory')
eControllerInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a2ControllerNumber"))
if mibBuilder.loadTexts: eControllerInformation.setStatus('mandatory')
a2ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ControllerNumber.setStatus('mandatory')
a2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 128))).clone(namedValues=NamedValues(("vFunctional", 1), ("vNon-functional", 2), ("vNotPresent", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2OperationalState.setStatus('mandatory')
a2FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2FirmwareRevision.setStatus('mandatory')
a2ConfiguredChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ConfiguredChannels.setStatus('mandatory')
a2ActualChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ActualChannels.setStatus('mandatory')
a2MaximumLogicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumLogicalDrives.setStatus('mandatory')
a2MaximumTargetsPerChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumTargetsPerChannel.setStatus('mandatory')
a2MaximumTaggedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumTaggedRequests.setStatus('mandatory')
a2MaximumDataTransferSizePerIoRequestInK = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumDataTransferSizePerIoRequestInK.setStatus('mandatory')
a2MaximumConcurrentCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumConcurrentCommands.setStatus('mandatory')
a2RebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2RebuildRate.setStatus('mandatory')
a2LogicalSectorSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalSectorSizeInBytes.setStatus('mandatory')
a2PhysicalSectorSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PhysicalSectorSizeInBytes.setStatus('mandatory')
a2CacheLineSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2CacheLineSizeInBytes.setStatus('mandatory')
a2CacheSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2CacheSizeInMb.setStatus('mandatory')
a2CacheMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 65, 66, 67, 68, 129, 130, 131, 132, 255))).clone(namedValues=NamedValues(("vDram", 1), ("vEdram", 2), ("vEdo", 3), ("vSdram", 4), ("vDram-parity", 65), ("vEdram-parity", 66), ("vEdo-parity", 67), ("vSdram-parity", 68), ("vDram-ecc", 129), ("vEdram-ecc", 130), ("vEdo-ecc", 131), ("vSdram-ecc", 132), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2CacheMemoryType.setStatus('mandatory')
a2EpromSizeInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2EpromSizeInKb.setStatus('mandatory')
a2BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("vEisa", 1), ("vMca", 2), ("vPci", 3), ("vVesa", 4), ("vIsa", 5), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2BusType.setStatus('mandatory')
a2ControllerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 128, 255))).clone(namedValues=NamedValues(("vRaid", 1), ("vHba", 128), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ControllerClass.setStatus('mandatory')
a2ControllerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 255))).clone(namedValues=NamedValues(("vDac960e", 1), ("vDac960m", 8), ("vDac960pd", 16), ("vDac960pl", 17), ("vDac960pdu", 18), ("vDac960pe", 19), ("vDac960pg", 20), ("vDac960pj", 21), ("vDac960ptl0", 22), ("vDac960pr", 23), ("vDac960prl", 24), ("vDac960pt", 25), ("vDac1164p", 26), ("vDac960ptl1", 27), ("vExtremeraid2000", 28), ("vExtremeraid3000", 29), ("vAcceleraid352", 30), ("vAcceleraid170", 31), ("vAcceleraid160", 32), ("vExtremeraid4000", 35), ("vExtremeraid5000", 36), ("vAcceleraid500", 37), ("vAcceleraid400", 38), ("vDac960s", 96), ("vDac960su", 97), ("vDac960sx", 98), ("vDac960sf", 99), ("vDac960ss", 100), ("vDac960fl", 101), ("vDac960ll", 102), ("vDac960ff", 103), ("vFcarray", 104), ("vDac960mfl", 105), ("vDac960mff", 106), ("vDacffx", 107), ("vDacffx2", 109), ("vBt-440", 129), ("vBt-440c", 130), ("vBt-445", 131), ("vBt-445c", 132), ("vBt-44xc", 133), ("vBt-445s", 134), ("vBt-640", 136), ("vBt-640a", 137), ("vBt-646", 138), ("vBt-646d", 139), ("vBt-646s", 140), ("vBt-742", 144), ("vBt-742a", 145), ("vBt-747", 146), ("vBt-747d", 147), ("vBt-747s", 148), ("vBt-74xc", 149), ("vBt-757", 150), ("vBt-757d", 151), ("vBt-757s", 152), ("vBt-757cd", 153), ("vBt-75xc", 154), ("vBt-747c", 155), ("vBt-757c", 156), ("vBt-540", 160), ("vBt-540c", 161), ("vBt-542", 162), ("vBt-542b", 163), ("vBt-542c", 164), ("vBt-542d", 165), ("vBt-545", 166), ("vBt-545c", 167), ("vBt-545s", 168), ("vBt-54xc", 169), ("vBt-946", 176), ("vBt-946c", 177), ("vBt-948", 178), ("vBt-948c", 179), ("vBt-956", 180), ("vBt-956c", 181), ("vBt-958", 182), ("vBt-958c", 183), ("vBt-958d", 184), ("vBt-956cd", 185), ("vBt-958cd", 186), ("vBt930", 192), ("vBt932", 193), ("vBt950", 194), ("vBt952", 195), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ControllerModel.setStatus('mandatory')
a2SystemBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemBusNumber.setStatus('mandatory')
a2SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 22), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SlotNumber.setStatus('mandatory')
a2InterruptVectorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 23), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterruptVectorNumber.setStatus('mandatory')
a2InterruptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("vEdge", 0), ("vLevel", 1), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterruptMode.setStatus('mandatory')
a2NumberOfPhysicalDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 25), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfPhysicalDevices.setStatus('mandatory')
a2NumberOfPhysicalDevicesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 26), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfPhysicalDevicesOffline.setStatus('mandatory')
a2NumberOfLogicalDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 27), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfLogicalDevices.setStatus('mandatory')
a2NumberOfLogicalDevicesCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 28), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfLogicalDevicesCritical.setStatus('mandatory')
a2NumberOfLogicalDevicesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 29), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfLogicalDevicesOffline.setStatus('mandatory')
a2FaultManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("vNotPresent", 0), ("vAemi", 1), ("vOem1", 2), ("vOem2", 4), ("vOem3", 8), ("vConner", 16), ("vSafte", 32), ("vSes", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2FaultManagementType.setStatus('mandatory')
a2ArrayInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 31), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ArrayInformation.setStatus('mandatory')
a2LogicalDriveReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 32), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalDriveReadRequests.setStatus('mandatory')
a2DataReadFromLogicalDrivesInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 33), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DataReadFromLogicalDrivesInMb.setStatus('mandatory')
a2LogicalDriveWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 34), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalDriveWriteRequests.setStatus('mandatory')
a2DataWrittenToLogicalDrivesInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 35), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DataWrittenToLogicalDrivesInMb.setStatus('mandatory')
a2LogicalDrivesReadCacheHitPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 36), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalDrivesReadCacheHitPercentage.setStatus('mandatory')
a2PhysicalDriveReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 37), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PhysicalDriveReadRequests.setStatus('mandatory')
a2DataReadFromPhysicalDrivesInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 38), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DataReadFromPhysicalDrivesInMb.setStatus('mandatory')
a2PhysicalDriveWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 39), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PhysicalDriveWriteRequests.setStatus('mandatory')
a2DataWrittenToPhysicalDrivesInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 40), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DataWrittenToPhysicalDrivesInMb.setStatus('mandatory')
a2StorageworksCabinetStatusOnChannel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOk", 1), ("vNotOk", 2), ("vNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel0.setStatus('mandatory')
a2StorageworksCabinetStatusOnChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOk", 1), ("vNotOk", 2), ("vNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel1.setStatus('mandatory')
a2StorageworksCabinetStatusOnChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOk", 1), ("vNotOk", 2), ("vNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel2.setStatus('mandatory')
a2BatteryBackupUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vNotPresent", 0), ("vPresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2BatteryBackupUnitStatus.setStatus('mandatory')
a2PartnerControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 45), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PartnerControllerNumber.setStatus('mandatory')
a2WwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 46), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2WwName.setStatus('mandatory')
a2HostControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 47), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2HostControllerNumber.setStatus('mandatory')
a2HostChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 48), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2HostChannelNumber.setStatus('mandatory')
a2HostTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 49), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2HostTargetId.setStatus('mandatory')
tLogicalDriveInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3), )
if mibBuilder.loadTexts: tLogicalDriveInformation.setStatus('mandatory')
eLogicalDriveInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a3ControllerNumber"), (0, "MYLEXRAID-MIB", "a3LogicalDriveNumber"))
if mibBuilder.loadTexts: eLogicalDriveInformation.setStatus('mandatory')
a3ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ControllerNumber.setStatus('mandatory')
a3LogicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3LogicalDriveNumber.setStatus('mandatory')
a3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 128, 255))).clone(namedValues=NamedValues(("vOnline", 3), ("vCritical", 4), ("vNotPresent", 128), ("vOffline", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperationalState.setStatus('mandatory')
a3RaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3RaidLevel.setStatus('mandatory')
a3WritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("vWriteThru", 0), ("vWriteBack", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WritePolicy.setStatus('mandatory')
a3SizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3SizeInMb.setStatus('mandatory')
a3PhysicalSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3PhysicalSizeInMb.setStatus('mandatory')
a3StripeSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3StripeSizeInBytes.setStatus('mandatory')
a3PhysicalDriveMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3PhysicalDriveMap.setStatus('mandatory')
a3ArrayList = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ArrayList.setStatus('mandatory')
a3RaidLevelString = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3RaidLevelString.setStatus('mandatory')
tPhysicalDeviceInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4), )
if mibBuilder.loadTexts: tPhysicalDeviceInformation.setStatus('mandatory')
ePhysicalDeviceInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a4ControllerNumber"), (0, "MYLEXRAID-MIB", "a4ChannelNumber"), (0, "MYLEXRAID-MIB", "a4TargetId"))
if mibBuilder.loadTexts: ePhysicalDeviceInformation.setStatus('mandatory')
a4ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ControllerNumber.setStatus('mandatory')
a4ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ChannelNumber.setStatus('mandatory')
a4TargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TargetId.setStatus('mandatory')
a4Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Lun.setStatus('mandatory')
a4OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 16, 130))).clone(namedValues=NamedValues(("vDead", 0), ("vRebuilding", 2), ("vOnline", 3), ("vInstallationAbort", 4), ("vPresent", 5), ("vNotPresent", 6), ("vHotspare", 16), ("vRebuildCancelled", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4OperationalState.setStatus('mandatory')
a4VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4VendorId.setStatus('mandatory')
a4ProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ProductId.setStatus('mandatory')
a4ProductRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ProductRevisionLevel.setStatus('mandatory')
a4SizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SizeInMb.setStatus('mandatory')
a4DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 199, 204))).clone(namedValues=NamedValues(("vFixedDrive", 0), ("vTape", 1), ("vPrinter", 2), ("vProcessor", 3), ("vWorm", 4), ("vCdrom", 5), ("vScanner", 6), ("vMo", 7), ("vChanger", 8), ("vCommunications", 9), ("vGraphics-0", 10), ("vGraphics-1", 11), ("vReserved-0", 12), ("vReserved-1", 13), ("vReserved-2", 14), ("vReserved-3", 15), ("vReserved-4", 16), ("vReserved-5", 17), ("vReserved-6", 18), ("vReserved-7", 19), ("vReserved-8", 20), ("vReserved-9", 21), ("vReserved-10", 22), ("vReserved-11", 23), ("vReserved-12", 24), ("vReserved-13", 25), ("vReserved-14", 26), ("vReserved-15", 27), ("vReserved-16", 28), ("vReserved-17", 29), ("vReserved-18", 30), ("vUnknown", 31), ("vScsiHostBusAdapter", 199), ("vCtrlChannel", 204)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DeviceType.setStatus('mandatory')
a4SoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 11), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SoftErrors.setStatus('mandatory')
a4HardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 12), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4HardErrors.setStatus('mandatory')
a4ParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 13), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ParityErrors.setStatus('mandatory')
a4MiscErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 14), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4MiscErrors.setStatus('mandatory')
a4ArrayList = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 15), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ArrayList.setStatus('mandatory')
a4LogicalDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 16), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LogicalDriveList.setStatus('mandatory')
a4BusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 17), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BusSpeed.setStatus('mandatory')
a4BusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 18), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BusWidth.setStatus('mandatory')
a4CommandQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4CommandQueuing.setStatus('mandatory')
a4PfaErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 20), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PfaErrors.setStatus('mandatory')
tMylexDacManagementSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5))
eMylexDacManagementSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1))
a5ManagementSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5ManagementSoftwareRevision.setStatus('mandatory')
a5ManagementSoftwareBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5ManagementSoftwareBuildDate.setStatus('mandatory')
a5MylexDacDeviceDriverRevision = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MylexDacDeviceDriverRevision.setStatus('mandatory')
a5MylexDacDeviceDriverBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MylexDacDeviceDriverBuildDate.setStatus('mandatory')
a5GamDriverRevision = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5GamDriverRevision.setStatus('mandatory')
a5GamDriverBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5GamDriverBuildDate.setStatus('mandatory')
tLogicalDriveStatistics = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6), )
if mibBuilder.loadTexts: tLogicalDriveStatistics.setStatus('mandatory')
eLogicalDriveStatistics = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a6ControllerNumber"), (0, "MYLEXRAID-MIB", "a6LogicalDriveNumber"))
if mibBuilder.loadTexts: eLogicalDriveStatistics.setStatus('mandatory')
a6ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ControllerNumber.setStatus('mandatory')
a6LogicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6LogicalDriveNumber.setStatus('mandatory')
a6ReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ReadRequests.setStatus('mandatory')
a6DataReadInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DataReadInMb.setStatus('mandatory')
a6WriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 5), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6WriteRequests.setStatus('mandatory')
a6DataWrittenInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DataWrittenInMb.setStatus('mandatory')
a6ReadCacheHitPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ReadCacheHitPercentage.setStatus('mandatory')
tPhysicalDriveStatistics = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7), )
if mibBuilder.loadTexts: tPhysicalDriveStatistics.setStatus('mandatory')
ePhysicalDriveStatistics = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a7ControllerNumber"), (0, "MYLEXRAID-MIB", "a7ChannelNumber"), (0, "MYLEXRAID-MIB", "a7TargetId"))
if mibBuilder.loadTexts: ePhysicalDriveStatistics.setStatus('mandatory')
a7ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ControllerNumber.setStatus('mandatory')
a7ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ChannelNumber.setStatus('mandatory')
a7TargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7TargetId.setStatus('mandatory')
a7Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Lun.setStatus('mandatory')
a7ReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 5), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ReadRequests.setStatus('mandatory')
a7DataReadInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7DataReadInMb.setStatus('mandatory')
a7WriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7WriteRequests.setStatus('mandatory')
a7DataWrittenInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7DataWrittenInMb.setStatus('mandatory')
tFaultManagementCabinetInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8), )
if mibBuilder.loadTexts: tFaultManagementCabinetInformation.setStatus('mandatory')
eFaultManagementCabinetInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a8ControllerNumber"), (0, "MYLEXRAID-MIB", "a8ChannelNumber"), (0, "MYLEXRAID-MIB", "a8CabinetNumber"))
if mibBuilder.loadTexts: eFaultManagementCabinetInformation.setStatus('mandatory')
a8ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8ControllerNumber.setStatus('mandatory')
a8ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8ChannelNumber.setStatus('mandatory')
a8CabinetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8CabinetNumber.setStatus('mandatory')
a8TargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8TargetId.setStatus('mandatory')
a8Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Lun.setStatus('mandatory')
a8CabinetType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 32, 64, 255))).clone(namedValues=NamedValues(("vConnerCr-6", 1), ("vConnerSmartCabinet", 2), ("vSafte1", 3), ("vSafte", 32), ("vSes", 64), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8CabinetType.setStatus('mandatory')
a8NumberOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfFans.setStatus('mandatory')
a8NumberOfPowerSupplyUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnits.setStatus('mandatory')
a8NumberOfHeatSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfHeatSensors.setStatus('mandatory')
a8NumberOfDriveSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfDriveSlots.setStatus('mandatory')
a8NumberOfDoorLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfDoorLocks.setStatus('mandatory')
a8NumberOfSpeakers = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfSpeakers.setStatus('mandatory')
a8NumberOfFansCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfFansCritical.setStatus('mandatory')
a8NumberOfPowerSupplyUnitsCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnitsCritical.setStatus('mandatory')
a8NumberOfHeatSensorsCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfHeatSensorsCritical.setStatus('mandatory')
a8NumberOfFansFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfFansFailed.setStatus('mandatory')
a8NumberOfPowerSupplyUnitsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnitsFailed.setStatus('mandatory')
a8NumberOfHeatSensorsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 18), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfHeatSensorsFailed.setStatus('mandatory')
tMylexRaidEventInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9), )
if mibBuilder.loadTexts: tMylexRaidEventInformation.setStatus('mandatory')
eMylexRaidEventInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a9EventTableIndex"))
if mibBuilder.loadTexts: eMylexRaidEventInformation.setStatus('mandatory')
a9EventTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9EventTableIndex.setStatus('mandatory')
a9EventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 96, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 176, 177, 178, 179, 180, 181, 182, 256, 257, 258, 259, 272, 273, 274, 275, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 640, 641, 642, 643, 644, 645, 700, 701, 702, 703, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 896, 897, 912, 928, 944, 268435455))).clone(namedValues=NamedValues(("vPhysdev-online", 1), ("vPhysdev-hotspare", 2), ("vPhysdev-hard-error", 3), ("vPhysdev-pfa", 4), ("vPhysdev-auto-rebuild-start", 5), ("vPhysdev-manual-rebuild-start", 6), ("vPhysdev-rebuild-done", 7), ("vPhysdev-rebuild-canceled", 8), ("vPhysdev-rebuild-error", 9), ("vPhysdev-rebuild-newdev-failed", 10), ("vPhysdev-rebuild-sysdev-failed", 11), ("vPhysdev-dead", 12), ("vPhysdev-found", 13), ("vPhysdev-gone", 14), ("vPhysdev-unconfigured", 15), ("vPhysdev-expandcapacity-start", 16), ("vPhysdev-expandcapacity-done", 17), ("vPhysdev-expandcapacity-error", 18), ("vPhysdev-command-timeout", 19), ("vPhysdev-command-abort", 20), ("vPhysdev-command-retried", 21), ("vPhysdev-parity-error", 22), ("vPhysdev-soft-error", 23), ("vPhysdev-misc-error", 24), ("vPhysdev-reset", 25), ("vPhysdev-activespare", 26), ("vPhysdev-warmspare", 27), ("vPhysdev-reqsense", 28), ("vPhysdev-init-started", 29), ("vPhysdev-init-done", 30), ("vPhysdev-init-failed", 31), ("vPhysdev-init-canceled", 32), ("vPhysdev-writerec-dead", 33), ("vPhysdev-reset-dead", 34), ("vPhysdev-dblcc-dead", 35), ("vPhysdev-removed-dead", 36), ("vPhysdev-grosserr-dead", 37), ("vPhysdev-badtag-dead", 38), ("vPhysdev-scsitmo-dead", 39), ("vPhysdev-sysreset-dead", 40), ("vPhysdev-bsypar-dead", 41), ("vPhysdev-bycmd-dead", 42), ("vPhysdev-seltmo-dead", 43), ("vPhysdev-seqerr-dead", 44), ("vPhysdev-unknownsts-dead", 45), ("vPhysdev-notrdy-dead", 46), ("vPhysdev-missing-dead", 47), ("vPhysdev-codwrfail-dead", 48), ("vPhysdev-bdtwrfail-dead", 49), ("vPhysdev-offline", 50), ("vPhysdev-standby", 51), ("vPhysdev-rebuild", 52), ("vPhysdev-id-mismatch", 53), ("vPhysdev-failed-start", 54), ("vPhysdev-offset-set", 55), ("vPhysdev-set-bus-width", 56), ("vPhysdev-missing-onstartup", 57), ("vPhysdev-rebuild-start-failed", 58), ("vPhysdev-moving-to-other-chn", 59), ("vPhysdev-offline-device-made-online", 60), ("vPhysdev-standby-rebuild-start", 61), ("vPhysdev-hot-spare-smaller", 62), ("vPpilot-logical-disk-online", 63), ("vPpilot-logical-disk-offline", 64), ("vPpilot-logical-disk-path-failover", 65), ("vPpilot-logical-disk-path-failback", 66), ("vPhysdev-non-redundant-access", 67), ("vPhysdev-type-invalid", 68), ("vPhysdev-soft-id", 69), ("vPhysdev-port-failed", 70), ("vCtldev-mirror-race-entry-failed", 71), ("vCtldev-ctrl-params-checksum-failed", 72), ("vFirmware-upgrade-started", 73), ("vFirmware-upgrade-complete", 74), ("vFirmware-upgrade-failed", 75), ("vFibredev-loopid-softaddr-occurred", 96), ("vSysdev-check-start", 128), ("vSysdev-check-done", 129), ("vSysdev-check-canceled", 130), ("vSysdev-check-error", 131), ("vSysdev-check-sysdev-failed", 132), ("vSysdev-check-physdev-failed", 133), ("vSysdev-offline", 134), ("vSysdev-critical", 135), ("vSysdev-online", 136), ("vSysdev-auto-rebuild-start", 137), ("vSysdev-manual-rebuild-start", 138), ("vSysdev-rebuild-done", 139), ("vSysdev-rebuild-canceled", 140), ("vSysdev-rebuild-error", 141), ("vSysdev-rebuild-newdev-failed", 142), ("vSysdev-rebuild-sysdev-failed", 143), ("vSysdev-init-started", 144), ("vSysdev-init-done", 145), ("vSysdev-init-canceled", 146), ("vSysdev-init-failed", 147), ("vSysdev-found", 148), ("vSysdev-gone", 149), ("vSysdev-expandcapacity-start", 150), ("vSysdev-expandcapacity-done", 151), ("vSysdev-expandcapacity-error", 152), ("vSysdev-badblock", 153), ("vSysdev-sizechanged", 154), ("vSysdev-typechanged", 155), ("vSysdev-baddatablock", 156), ("vSysdev-wr-lun-map", 157), ("vSysdev-dataread-from-block-in-bdt", 158), ("vSysdev-data-for-block-lost", 159), ("vSysdev-offline-device-made-available-wi", 160), ("vSysdev-offline-device-made-available", 161), ("vSysdev-standby-rebuild-start", 162), ("vSysdev-bg-init-started", 176), ("vSysdev-bg-init-stopped", 177), ("vSysdev-bg-init-paused", 178), ("vSysdev-bg-init-restarted", 179), ("vSysdev-bg-init-failed", 180), ("vSysdev-bg-init-completed", 181), ("vSysdev-data-loss-low-bbu-charge", 182), ("vFmtfan-failed", 256), ("vFmtfan-ok", 257), ("vAemi-fan-failed", 258), ("vFmtfan-notpresent", 259), ("vFmtpower-failed", 272), ("vFmtpower-ok", 273), ("vAemi-pwr-supply-failed", 274), ("vFmtpower-notpresent", 275), ("vFmtheat-bad", 288), ("vFmtheat-critical", 289), ("vFmtheat-ok", 290), ("vAemi-over-temperature", 291), ("vFmtheat-notpresent", 292), ("vFmtstwk-failed", 304), ("vFmtstwk-critical", 305), ("vFmtstwk-ok", 306), ("vFmt-ups-disabled", 307), ("vFmt-ups-ac-fail", 308), ("vFmt-ups-bat-low", 309), ("vFmt-ups-failed", 310), ("vFmt-ups-ok", 311), ("vEnclfan-failed", 320), ("vEnclfan-ok", 321), ("vEnclfan-notpresent", 322), ("vEnclpower-failed", 323), ("vEnclpower-ok", 324), ("vEnclpower-notpresent", 325), ("vEnclheat-bad", 326), ("vEnclheat-critical", 327), ("vEnclheat-ok", 328), ("vEnclheat-notpresent", 329), ("vEnclaccess-critical", 330), ("vEnclaccess-ok", 331), ("vEnclaccess-offline", 332), ("vEnclses-softaddr-occurred", 333), ("vEnclaccess-ready", 334), ("vEnclheat-unknown", 335), ("vEnclpower-unknown", 336), ("vEnclfan-unknown", 337), ("vEnclosure-shutdown", 338), ("vEnclcold-warn", 339), ("vEnclcold-fail", 340), ("vSystem-started", 384), ("vCtldev-writeback-error", 385), ("vCtldev-state-table-full", 386), ("vCtldev-dead", 388), ("vCtldev-reset", 389), ("vCtldev-found", 390), ("vCtldev-gone", 391), ("vCtldev-bbu-found", 392), ("vCtldev-bbu-power-low", 393), ("vCtldev-bbu-power-ok", 394), ("vCtldev-power-off", 395), ("vCtldev-power-on", 396), ("vCtldev-online", 397), ("vCtldev-offline", 398), ("vCtldev-critical", 399), ("vCtldev-bbu-recond-start", 400), ("vCtldev-bbu-recond-done", 401), ("vCtldev-bbu-recond-abort", 402), ("vCtldev-installation-aborted", 403), ("vCtldev-firmware-mismatch", 404), ("vCtldev-bbu-noresponse", 405), ("vCtldev-warm-boot-error", 406), ("vCtldev-bbu-calibrate-start", 407), ("vCtldev-bbu-calibrate-done", 408), ("vCtldev-bbu-calibrate-abort", 409), ("vCtldev-bbu-no-battery", 410), ("vCtldev-conserv-cache-mode", 411), ("vCtldev-normal-cache-mode", 412), ("vCtldev-dev-start-cmplt", 413), ("vCtldev-soft-ecc-corrected", 414), ("vCtldev-hard-ecc-corrected", 415), ("vCtldev-bbu-recond-needed", 416), ("vCtldev-removed-ptnr", 417), ("vCtldev-bbu-out-of-service", 418), ("vCtldev-update-ptnr-status", 419), ("vCtldev-relinquish-ptnr", 420), ("vCtldev-inserted-ptnr", 421), ("vCtldev-dual-enabled", 422), ("vCtldev-kill-ptnr", 423), ("vCtldev-nexus", 424), ("vCtldev-bad-bootrom-image", 425), ("vCtldev-bad-mac-address", 426), ("vCtldev-mirror-race-recovery-failed", 427), ("vCtldev-mirror-critical-drive", 428), ("vCtldev-in-cluster", 429), ("vCtldev-not-in-cluster", 430), ("vSysdev-data-loss-improper-shutdown", 431), ("vCtldev-automatic-flash-started", 432), ("vCtldev-negotiation-failed-jumpers", 433), ("vCtldev-negotiation-same-id", 434), ("vCtldev-negotiation-board-type", 435), ("vCtldev-negotiation-disk-channels", 436), ("vCtldev-negotiation-host-channels", 437), ("vCtldev-negotiation-memory-size", 438), ("vCtldev-negotiation-cache-size", 439), ("vCtldev-mirror-race-table-error", 440), ("vCtldev-stop-rejected", 441), ("vSystem-started-new", 512), ("vSystem-size-table-full", 513), ("vSystem-user-logged-in", 514), ("vSystem-user-logged-out", 515), ("vSystem-alive", 516), ("vSystem-dead", 517), ("vAutoboot-changed", 518), ("vCtldev-bbu-batt-test-start", 519), ("vCtldev-bbu-batt-test-complete", 520), ("vCtldev-bbu-batt-test-canceled", 521), ("vCtldev-bbu-batt-test-failed", 522), ("vChannel-failed", 640), ("vChannel-ok", 641), ("vChannel-scsi-bus-dead", 642), ("vChannel-scsi-bus-alive", 643), ("vChannel-fiber-dead", 644), ("vChannel-fiber-alive", 645), ("vLog-empty", 700), ("vLog-out-sync", 701), ("vLog-request-sense", 702), ("vLog-set-rtc", 703), ("vCfg-new", 800), ("vCfg-clear", 801), ("vCfg-invalid", 802), ("vCfg-cod-access-error", 803), ("vCfg-cod-converted", 804), ("vCfg-cod-import-failed", 805), ("vDebug-dump-generated", 806), ("vDebug-dump-generated-partner", 807), ("vCfg-cod-not-found", 808), ("vCfg-cod-lun-map-not-found", 809), ("vFatal-hang", 896), ("vFatal-brkp", 897), ("vI960-hw-err", 912), ("vSarm-hw-err", 928), ("vScsi-hw-err", 944), ("vUnknown", 268435455)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9EventCode.setStatus('mandatory')
a9EventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9EventTimeStamp.setStatus('mandatory')
a9ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ControllerNumber.setStatus('mandatory')
a9ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ChannelNumber.setStatus('mandatory')
a9TargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9TargetId.setStatus('mandatory')
a9Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Lun.setStatus('mandatory')
a9LogicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9LogicalDriveNumber.setStatus('mandatory')
a9FmtCabinetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FmtCabinetNumber.setStatus('mandatory')
a9FanUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FanUnitNumber.setStatus('mandatory')
a9PowerSupplyUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9PowerSupplyUnitNumber.setStatus('mandatory')
a9HeatSensorUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9HeatSensorUnitNumber.setStatus('mandatory')
a9EnclosureUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9EnclosureUnitNumber.setStatus('mandatory')
tBatteryBackupUnitInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10), )
if mibBuilder.loadTexts: tBatteryBackupUnitInformation.setStatus('mandatory')
eBatteryBackupUnitInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a10ControllerNumber"))
if mibBuilder.loadTexts: eBatteryBackupUnitInformation.setStatus('mandatory')
a10ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10ControllerNumber.setStatus('mandatory')
a10OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10OperationalState.setStatus('mandatory')
a10BatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 254))).clone(namedValues=NamedValues(("vUnknown", 0), ("vNickelCadmium", 1), ("vNimh", 2), ("vLithiumion", 3), ("vNoBatterBackupPresent", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BatteryType.setStatus('mandatory')
a10CurrentPowerInHours = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10CurrentPowerInHours.setStatus('mandatory')
a10MaximumPowerInHours = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10MaximumPowerInHours.setStatus('mandatory')
a10ThresholdValueInHours = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10ThresholdValueInHours.setStatus('mandatory')
a10ChargeLevelInPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10ChargeLevelInPercentage.setStatus('mandatory')
a10Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10Version.setStatus('mandatory')
a10OperationalStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10OperationalStateString.setStatus('mandatory')
physdevOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,1)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevHotspare = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,2)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevHardError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,3)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevPfa = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,4)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevAutoRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,5)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevManualRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,6)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevRebuildDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,7)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevRebuildCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,8)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevRebuildError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,9)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevRebuildNewdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,10)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevRebuildSysdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,11)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,12)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,13)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevGone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,14)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevUnconfigured = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,15)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevExpandcapacityStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,16)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevExpandcapacityDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,17)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevExpandcapacityError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,18)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevCommandTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,19)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevCommandAbort = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,20)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevCommandRetried = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,21)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevParityError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,22)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevSoftError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,23)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevMiscError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,24)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevReset = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,25)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevActivespare = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,26)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevWarmspare = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,27)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevReqsense = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,28)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevInitStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,29)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevInitDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,30)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,31)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevInitCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,32)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevWriterecDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,33)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevResetDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,34)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevDblccDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,35)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevRemovedDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,36)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevGrosserrDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,37)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevBadtagDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,38)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevScsitmoDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,39)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevSysresetDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,40)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevBsyparDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,41)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevBycmdDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,42)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevSeltmoDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,43)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevSeqerrDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,44)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevUnknownstsDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,45)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevNotrdyDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,46)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevMissingDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,47)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevCodwrfailDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,48)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevBdtwrfailDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,49)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,50)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevStandby = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,51)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevRebuild = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,52)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevIdMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,53)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevFailedStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,54)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevOffsetSet = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,55)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevSetBusWidth = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,56)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevMissingOnstartup = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,57)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevRebuildStartFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,58)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevMovingToOtherChn = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,59)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevOfflineDeviceMadeOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,60)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevStandbyRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,61)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevHotSpareSmaller = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,62)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ppilotLogicalDiskOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,63)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ppilotLogicalDiskOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,64)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ppilotLogicalDiskPathFailover = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,65)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ppilotLogicalDiskPathFailback = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,66)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevNonRedundantAccess = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,67)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevTypeInvalid = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,68)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevSoftId = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,69)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
physdevPortFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,70)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevMirrorRaceEntryFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,71)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevCtrlParamsChecksumFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,72)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
firmwareUpgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,73)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
firmwareUpgradeComplete = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,74)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
firmwareUpgradeFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,75)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fibredevLoopidSoftaddrOccurred = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,96)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevCheckStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,128)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevCheckDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,129)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevCheckCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,130)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevCheckError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,131)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevCheckSysdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,132)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevCheckPhysdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,133)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,134)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,135)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,136)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevAutoRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,137)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevManualRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,138)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevRebuildDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,139)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevRebuildCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,140)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevRebuildError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,141)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevRebuildNewdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,142)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevRebuildSysdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,143)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevInitStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,144)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevInitDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,145)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevInitCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,146)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,147)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,148)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevGone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,149)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevExpandcapacityStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,150)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevExpandcapacityDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,151)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevExpandcapacityError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,152)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevBadblock = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,153)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevSizechanged = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,154)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevTypechanged = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,155)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevBaddatablock = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,156)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevWrLunMap = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,157)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevDatareadFromBlockInBdt = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,158)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevDataForBlockLost = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,159)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevOfflineDeviceMadeAvailableWithDataloss = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,160)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevOfflineDeviceMadeAvailable = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,161)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevStandbyRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,162)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevBgInitStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,176)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevBgInitStopped = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,177)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevBgInitPaused = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,178)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevBgInitRestarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,179)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevBgInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,180)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevBgInitCompleted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,181)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevDataLossLowBbuCharge = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,182)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtfanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,256)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtfanOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,257)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
aemiFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,258)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9FanUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtfanNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,259)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtpowerFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,272)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtpowerOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,273)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
aemiPwrSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,274)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9PowerSupplyUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtpowerNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,275)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtheatBad = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,288)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9HeatSensorUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtheatCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,289)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtheatOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,290)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
aemiOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,291)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9HeatSensorUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtheatNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,292)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtstwkFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,304)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtstwkCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,305)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtstwkOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,306)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtUpsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,307)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtUpsAcFail = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,308)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtUpsBatLow = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,309)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtUpsFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,310)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fmtUpsOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,311)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclfanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,320)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclfanOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,321)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclfanNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,322)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclpowerFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,323)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclpowerOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,324)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclpowerNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,325)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclheatBad = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,326)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclheatCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,327)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclheatOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,328)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclheatNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,329)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclaccessCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,330)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclaccessOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,331)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclaccessOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,332)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclsesSoftaddrOccurred = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,333)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclaccessReady = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,334)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclheatUnknown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,335)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclpowerUnknown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,336)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclfanUnknown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,337)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclosureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,338)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclcoldWarn = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,339)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
enclcoldFail = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,340)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,384)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevWritebackError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,385)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevStateTableFull = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,386)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,388)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevReset = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,389)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,390)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevGone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,391)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,392)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuPowerLow = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,393)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuPowerOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,394)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,395)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,396)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,397)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,398)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,399)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuRecondStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,400)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuRecondDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,401)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuRecondAbort = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,402)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevInstallationAborted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,403)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevFirmwareMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,404)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuNoresponse = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,405)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevWarmBootError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,406)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuCalibrateStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,407)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuCalibrateDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,408)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuCalibrateAbort = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,409)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuNoBattery = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,410)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevConservCacheMode = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,411)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNormalCacheMode = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,412)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevDevStartCmplt = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,413)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevSoftEccCorrected = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,414)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevHardEccCorrected = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,415)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuRecondNeeded = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,416)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevRemovedPtnr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,417)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuOutOfService = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,418)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevUpdatePtnrStatus = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,419)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevRelinquishPtnr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,420)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevInsertedPtnr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,421)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevDualEnabled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,422)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevKillPtnr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,423)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNexus = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,424)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBadBootromImage = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,425)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBadMacAddress = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,426)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevMirrorRaceRecoveryFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,427)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevMirrorCriticalDrive = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,428)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevInCluster = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,429)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNotInCluster = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,430)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sysdevDataLossImproperShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,431)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevAutomaticFlashStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,432)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNegotiationFailedJumpers = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,433)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNegotiationSameId = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,434)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNegotiationBoardType = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,435)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNegotiationDiskChannels = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,436)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNegotiationHostChannels = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,437)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNegotiationMemorySize = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,438)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevNegotiationCacheSize = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,439)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevMirrorRaceTableError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,440)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevStopRejected = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,441)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
systemStartedNew = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,512)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
systemSizeTableFull = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,513)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
systemUserLoggedIn = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,514)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
systemUserLoggedOut = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,515)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
systemAlive = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,516)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
systemDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,517)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
autobootChanged = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,518)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuBattTestStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,519)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuBattTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,520)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuBattTestCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,521)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
ctldevBbuBattTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,522)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
channelFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,640)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
channelOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,641)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
channelScsiBusDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,642)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
channelScsiBusAlive = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,643)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
channelFiberDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,644)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
channelFiberAlive = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,645)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
logEmpty = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,700)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
logOutSync = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,701)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
logRequestSense = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,702)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
logSetRtc = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,703)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
cfgNew = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,800)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
cfgClear = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,801)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
cfgInvalid = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,802)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
cfgCodAccessError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,803)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
cfgCodConverted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,804)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
cfgCodImportFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,805)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
debugDumpGenerated = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,806)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
debugDumpGeneratedPartner = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,807)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
cfgCodNotFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,808)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
cfgCodLunMapNotFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,809)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fatalHang = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,896)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
fatalBrkp = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,897)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
i960HwErr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,912)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
sarmHwErr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,928)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
scsiHwErr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,944)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
mibBuilder.exportSymbols("MYLEXRAID-MIB", ctldevNegotiationSameId=ctldevNegotiationSameId, a2NumberOfLogicalDevicesCritical=a2NumberOfLogicalDevicesCritical, a4SizeInMb=a4SizeInMb, physdevManualRebuildStart=physdevManualRebuildStart, sysdevBaddatablock=sysdevBaddatablock, fmtfanFailed=fmtfanFailed, ctldevBbuRecondStart=ctldevBbuRecondStart, a4CommandQueuing=a4CommandQueuing, ctldevHardEccCorrected=ctldevHardEccCorrected, systemSizeTableFull=systemSizeTableFull, ctldevSoftEccCorrected=ctldevSoftEccCorrected, a6ReadRequests=a6ReadRequests, physdevBsyparDead=physdevBsyparDead, physdevSoftId=physdevSoftId, a2MaximumDataTransferSizePerIoRequestInK=a2MaximumDataTransferSizePerIoRequestInK, a8NumberOfHeatSensorsFailed=a8NumberOfHeatSensorsFailed, aemiPwrSupplyFailed=aemiPwrSupplyFailed, physdevHotspare=physdevHotspare, a2StorageworksCabinetStatusOnChannel0=a2StorageworksCabinetStatusOnChannel0, a4ChannelNumber=a4ChannelNumber, ctldevStopRejected=ctldevStopRejected, channelFiberAlive=channelFiberAlive, a2PartnerControllerNumber=a2PartnerControllerNumber, fmtpowerOk=fmtpowerOk, sysdevInitFailed=sysdevInitFailed, a3WritePolicy=a3WritePolicy, a2MaximumTaggedRequests=a2MaximumTaggedRequests, ctldevDualEnabled=ctldevDualEnabled, ctldevWarmBootError=ctldevWarmBootError, a6LogicalDriveNumber=a6LogicalDriveNumber, eLogicalDriveInformation=eLogicalDriveInformation, a3OperationalState=a3OperationalState, a2CacheSizeInMb=a2CacheSizeInMb, ctldevBbuRecondAbort=ctldevBbuRecondAbort, physdevHardError=physdevHardError, physdevWriterecDead=physdevWriterecDead, a7DataReadInMb=a7DataReadInMb, a2DataWrittenToLogicalDrivesInMb=a2DataWrittenToLogicalDrivesInMb, fmtstwkFailed=fmtstwkFailed, scsiHwErr=scsiHwErr, a3ArrayList=a3ArrayList, DmiComponentIndex=DmiComponentIndex, a2NumberOfLogicalDevices=a2NumberOfLogicalDevices, physdevSeltmoDead=physdevSeltmoDead, a3SizeInMb=a3SizeInMb, enclpowerOk=enclpowerOk, dmtfStd=dmtfStd, a4ProductRevisionLevel=a4ProductRevisionLevel, fmtpowerFailed=fmtpowerFailed, ctldevBbuRecondNeeded=ctldevBbuRecondNeeded, a2DataReadFromPhysicalDrivesInMb=a2DataReadFromPhysicalDrivesInMb, physdevActivespare=physdevActivespare, a8TargetId=a8TargetId, a2PhysicalDriveWriteRequests=a2PhysicalDriveWriteRequests, a9PowerSupplyUnitNumber=a9PowerSupplyUnitNumber, ctldevStateTableFull=ctldevStateTableFull, channelFailed=channelFailed, sysdevRebuildError=sysdevRebuildError, physdevResetDead=physdevResetDead, a2ControllerNumber=a2ControllerNumber, a2EpromSizeInKb=a2EpromSizeInKb, ctldevConservCacheMode=ctldevConservCacheMode, physdevUnknownstsDead=physdevUnknownstsDead, physdevCommandAbort=physdevCommandAbort, a8NumberOfPowerSupplyUnits=a8NumberOfPowerSupplyUnits, a2WwName=a2WwName, a7WriteRequests=a7WriteRequests, physdevSetBusWidth=physdevSetBusWidth, sysdevExpandcapacityDone=sysdevExpandcapacityDone, enclpowerFailed=enclpowerFailed, a2BusType=a2BusType, physdevDead=physdevDead, physdevFailedStart=physdevFailedStart, cfgClear=cfgClear, ctldevBbuCalibrateAbort=ctldevBbuCalibrateAbort, physdevRebuildSysdevFailed=physdevRebuildSysdevFailed, fmtfanOk=fmtfanOk, enclheatCritical=enclheatCritical, sysdevRebuildNewdevFailed=sysdevRebuildNewdevFailed, ePhysicalDriveStatistics=ePhysicalDriveStatistics, physdevCommandRetried=physdevCommandRetried, a10OperationalStateString=a10OperationalStateString, a4ArrayList=a4ArrayList, i960HwErr=i960HwErr, sysdevOffline=sysdevOffline, a2LogicalDriveReadRequests=a2LogicalDriveReadRequests, a2RebuildRate=a2RebuildRate, ctldevAutomaticFlashStarted=ctldevAutomaticFlashStarted, sysdevRebuildCanceled=sysdevRebuildCanceled, a2PhysicalSectorSizeInBytes=a2PhysicalSectorSizeInBytes, a2StorageworksCabinetStatusOnChannel1=a2StorageworksCabinetStatusOnChannel1, sysdevGone=sysdevGone, logOutSync=logOutSync, enclfanUnknown=enclfanUnknown, a7ControllerNumber=a7ControllerNumber, sysdevBgInitRestarted=sysdevBgInitRestarted, a8CabinetType=a8CabinetType, a4HardErrors=a4HardErrors, enclpowerUnknown=enclpowerUnknown, a8CabinetNumber=a8CabinetNumber, tBatteryBackupUnitInformation=tBatteryBackupUnitInformation, a2CacheMemoryType=a2CacheMemoryType, physdevCodwrfailDead=physdevCodwrfailDead, sysdevFound=sysdevFound, a2SystemBusNumber=a2SystemBusNumber, ctldevRemovedPtnr=ctldevRemovedPtnr, a10ThresholdValueInHours=a10ThresholdValueInHours, a2ArrayInformation=a2ArrayInformation, ppilotLogicalDiskPathFailover=ppilotLogicalDiskPathFailover, a8NumberOfPowerSupplyUnitsCritical=a8NumberOfPowerSupplyUnitsCritical, a9Lun=a9Lun, sarmHwErr=sarmHwErr, a8NumberOfDoorLocks=a8NumberOfDoorLocks, a2ConfiguredChannels=a2ConfiguredChannels, sysdevTypechanged=sysdevTypechanged, eLogicalDriveStatistics=eLogicalDriveStatistics, fatalBrkp=fatalBrkp, tPhysicalDriveStatistics=tPhysicalDriveStatistics, sysdevWrLunMap=sysdevWrLunMap, a3StripeSizeInBytes=a3StripeSizeInBytes, a4PfaErrors=a4PfaErrors, sysdevStandbyRebuildStart=sysdevStandbyRebuildStart, a2HostTargetId=a2HostTargetId, ctldevNegotiationFailedJumpers=ctldevNegotiationFailedJumpers, a3LogicalDriveNumber=a3LogicalDriveNumber, a4DeviceType=a4DeviceType, ctldevOffline=ctldevOffline, eBatteryBackupUnitInformation=eBatteryBackupUnitInformation, physdevAutoRebuildStart=physdevAutoRebuildStart, debugDumpGenerated=debugDumpGenerated, fatalHang=fatalHang, fmtheatBad=fmtheatBad, systemUserLoggedIn=systemUserLoggedIn, fmtheatNotpresent=fmtheatNotpresent, sysdevManualRebuildStart=sysdevManualRebuildStart, physdevOffsetSet=physdevOffsetSet, sysdevBgInitStopped=sysdevBgInitStopped, physdevRebuildError=physdevRebuildError, a2LogicalSectorSizeInBytes=a2LogicalSectorSizeInBytes, sysdevCheckDone=sysdevCheckDone, ctldevBbuBattTestFailed=ctldevBbuBattTestFailed, a8NumberOfHeatSensorsCritical=a8NumberOfHeatSensorsCritical, physdevBycmdDead=physdevBycmdDead, eMylexRaidEventInformation=eMylexRaidEventInformation, channelFiberDead=channelFiberDead, aemiFanFailed=aemiFanFailed, ctldevOnline=ctldevOnline, sysdevDataForBlockLost=sysdevDataForBlockLost, ctldevMirrorRaceEntryFailed=ctldevMirrorRaceEntryFailed, sysdevRebuildSysdevFailed=sysdevRebuildSysdevFailed, a6ReadCacheHitPercentage=a6ReadCacheHitPercentage, sysdevInitDone=sysdevInitDone, physdevPfa=physdevPfa, enclheatOk=enclheatOk, a8Lun=a8Lun, ctldevGone=ctldevGone, a3ControllerNumber=a3ControllerNumber, sysdevRebuildDone=sysdevRebuildDone, fmtUpsDisabled=fmtUpsDisabled, physdevSeqerrDead=physdevSeqerrDead, systemStarted=systemStarted, a4BusWidth=a4BusWidth, a10ChargeLevelInPercentage=a10ChargeLevelInPercentage, a7DataWrittenInMb=a7DataWrittenInMb, physdevOfflineDeviceMadeOnline=physdevOfflineDeviceMadeOnline, a10ControllerNumber=a10ControllerNumber, ctldevDead=ctldevDead, dmtfComponents=dmtfComponents, ctldevMirrorRaceTableError=ctldevMirrorRaceTableError, ctldevBbuFound=ctldevBbuFound, ctldevBbuBattTestComplete=ctldevBbuBattTestComplete, firmwareUpgradeStarted=firmwareUpgradeStarted, enclaccessOffline=enclaccessOffline, a6ControllerNumber=a6ControllerNumber, a10BatteryType=a10BatteryType, sysdevDatareadFromBlockInBdt=sysdevDatareadFromBlockInBdt, a8NumberOfFansCritical=a8NumberOfFansCritical, a9EnclosureUnitNumber=a9EnclosureUnitNumber, ctldevBadBootromImage=ctldevBadBootromImage, physdevInitFailed=physdevInitFailed, physdevSysresetDead=physdevSysresetDead, cfgCodLunMapNotFound=cfgCodLunMapNotFound, ppilotLogicalDiskOffline=ppilotLogicalDiskOffline, physdevRebuildStartFailed=physdevRebuildStartFailed, sysdevBadblock=sysdevBadblock, sysdevOfflineDeviceMadeAvailableWithDataloss=sysdevOfflineDeviceMadeAvailableWithDataloss, physdevExpandcapacityStart=physdevExpandcapacityStart, sysdevCheckSysdevFailed=sysdevCheckSysdevFailed, a2BatteryBackupUnitStatus=a2BatteryBackupUnitStatus, logRequestSense=logRequestSense, enclosureShutdown=enclosureShutdown, eFaultManagementCabinetInformation=eFaultManagementCabinetInformation, a9HeatSensorUnitNumber=a9HeatSensorUnitNumber, physdevStandbyRebuildStart=physdevStandbyRebuildStart, physdevInitDone=physdevInitDone, a4ProductId=a4ProductId, firmwareUpgradeFailed=firmwareUpgradeFailed, a2CacheLineSizeInBytes=a2CacheLineSizeInBytes, ctldevNormalCacheMode=ctldevNormalCacheMode, tLogicalDriveStatistics=tLogicalDriveStatistics, sysdevInitStarted=sysdevInitStarted, physdevOnline=physdevOnline, fmtheatCritical=fmtheatCritical, enclsesSoftaddrOccurred=enclsesSoftaddrOccurred, tControllerInformation=tControllerInformation, physdevInitCanceled=physdevInitCanceled, a2ActualChannels=a2ActualChannels, a2InterruptVectorNumber=a2InterruptVectorNumber, eMylexDacManagementSoftware=eMylexDacManagementSoftware, sysdevCheckPhysdevFailed=sysdevCheckPhysdevFailed, sysdevBgInitStarted=sysdevBgInitStarted, a2SlotNumber=a2SlotNumber, ctldevPowerOn=ctldevPowerOn, physdevNotrdyDead=physdevNotrdyDead, sysdevExpandcapacityStart=sysdevExpandcapacityStart, a9EventCode=a9EventCode, physdevHotSpareSmaller=physdevHotSpareSmaller, physdevReqsense=physdevReqsense, a2FaultManagementType=a2FaultManagementType, a5ManagementSoftwareRevision=a5ManagementSoftwareRevision, physdevInitStarted=physdevInitStarted, systemStartedNew=systemStartedNew, a6DataWrittenInMb=a6DataWrittenInMb, a8NumberOfFansFailed=a8NumberOfFansFailed, a3PhysicalSizeInMb=a3PhysicalSizeInMb, physdevGrosserrDead=physdevGrosserrDead, a3RaidLevel=a3RaidLevel, a2NumberOfPhysicalDevicesOffline=a2NumberOfPhysicalDevicesOffline, sysdevCritical=sysdevCritical, tLogicalDriveInformation=tLogicalDriveInformation, ctldevRelinquishPtnr=ctldevRelinquishPtnr, ctldevBadMacAddress=ctldevBadMacAddress, cfgCodAccessError=cfgCodAccessError, DmiDisplaystring=DmiDisplaystring, a2ControllerClass=a2ControllerClass, a7TargetId=a7TargetId, a2StorageworksCabinetStatusOnChannel2=a2StorageworksCabinetStatusOnChannel2, a2PhysicalDriveReadRequests=a2PhysicalDriveReadRequests, tMylexDacManagementSoftware=tMylexDacManagementSoftware, physdevExpandcapacityDone=physdevExpandcapacityDone, physdevScsitmoDead=physdevScsitmoDead, a9EventTimeStamp=a9EventTimeStamp, enclaccessOk=enclaccessOk, sysdevSizechanged=sysdevSizechanged, physdevStandby=physdevStandby, sysdevCheckError=sysdevCheckError, sysdevAutoRebuildStart=sysdevAutoRebuildStart, ctldevNotInCluster=ctldevNotInCluster, a2NumberOfLogicalDevicesOffline=a2NumberOfLogicalDevicesOffline, a9FanUnitNumber=a9FanUnitNumber, physdevSoftError=physdevSoftError, a4LogicalDriveList=a4LogicalDriveList, enclfanFailed=enclfanFailed, ctldevKillPtnr=ctldevKillPtnr)
mibBuilder.exportSymbols("MYLEXRAID-MIB", physdevMissingOnstartup=physdevMissingOnstartup, enclheatUnknown=enclheatUnknown, a8NumberOfHeatSensors=a8NumberOfHeatSensors, a7ReadRequests=a7ReadRequests, a2FirmwareRevision=a2FirmwareRevision, physdevRemovedDead=physdevRemovedDead, debugDumpGeneratedPartner=debugDumpGeneratedPartner, physdevGone=physdevGone, enclfanOk=enclfanOk, physdevCommandTimeout=physdevCommandTimeout, ctldevBbuNoresponse=ctldevBbuNoresponse, enclheatBad=enclheatBad, physdevFound=physdevFound, enclcoldFail=enclcoldFail, a8NumberOfDriveSlots=a8NumberOfDriveSlots, sysdevBgInitCompleted=sysdevBgInitCompleted, a2DataReadFromLogicalDrivesInMb=a2DataReadFromLogicalDrivesInMb, physdevNonRedundantAccess=physdevNonRedundantAccess, ctldevNexus=ctldevNexus, a5GamDriverBuildDate=a5GamDriverBuildDate, ctldevCtrlParamsChecksumFailed=ctldevCtrlParamsChecksumFailed, ctldevMirrorCriticalDrive=ctldevMirrorCriticalDrive, ctldevNegotiationBoardType=ctldevNegotiationBoardType, tFaultManagementCabinetInformation=tFaultManagementCabinetInformation, ppilotLogicalDiskPathFailback=ppilotLogicalDiskPathFailback, ctldevPowerOff=ctldevPowerOff, ctldevBbuOutOfService=ctldevBbuOutOfService, ctldevBbuBattTestCanceled=ctldevBbuBattTestCanceled, eControllerInformation=eControllerInformation, ctldevInCluster=ctldevInCluster, cfgCodImportFailed=cfgCodImportFailed, physdevOffline=physdevOffline, a5GamDriverRevision=a5GamDriverRevision, sysdevBgInitPaused=sysdevBgInitPaused, enclpowerNotpresent=enclpowerNotpresent, sysdevBgInitFailed=sysdevBgInitFailed, a2MaximumTargetsPerChannel=a2MaximumTargetsPerChannel, ctldevMirrorRaceRecoveryFailed=ctldevMirrorRaceRecoveryFailed, tPhysicalDeviceInformation=tPhysicalDeviceInformation, a2LogicalDriveWriteRequests=a2LogicalDriveWriteRequests, ctldevNegotiationDiskChannels=ctldevNegotiationDiskChannels, sysdevOnline=sysdevOnline, a4MiscErrors=a4MiscErrors, enclcoldWarn=enclcoldWarn, physdevWarmspare=physdevWarmspare, a2MaximumLogicalDrives=a2MaximumLogicalDrives, enclheatNotpresent=enclheatNotpresent, a9LogicalDriveNumber=a9LogicalDriveNumber, ctldevInstallationAborted=ctldevInstallationAborted, fmtfanNotpresent=fmtfanNotpresent, a4ParityErrors=a4ParityErrors, physdevPortFailed=physdevPortFailed, ctldevBbuRecondDone=ctldevBbuRecondDone, ctldevNegotiationHostChannels=ctldevNegotiationHostChannels, a9ChannelNumber=a9ChannelNumber, sysdevCheckStart=sysdevCheckStart, ctldevFound=ctldevFound, a9EventTableIndex=a9EventTableIndex, a6DataReadInMb=a6DataReadInMb, aemiOverTemperature=aemiOverTemperature, a2MaximumConcurrentCommands=a2MaximumConcurrentCommands, physdevRebuild=physdevRebuild, sysdevDataLossLowBbuCharge=sysdevDataLossLowBbuCharge, physdevBadtagDead=physdevBadtagDead, channelScsiBusDead=channelScsiBusDead, a9TargetId=a9TargetId, a7ChannelNumber=a7ChannelNumber, fmtUpsAcFail=fmtUpsAcFail, a4OperationalState=a4OperationalState, fibredevLoopidSoftaddrOccurred=fibredevLoopidSoftaddrOccurred, a4VendorId=a4VendorId, a10CurrentPowerInHours=a10CurrentPowerInHours, ctldevBbuPowerOk=ctldevBbuPowerOk, a4TargetId=a4TargetId, autobootChanged=autobootChanged, enclaccessCritical=enclaccessCritical, physdevMiscError=physdevMiscError, fmtstwkCritical=fmtstwkCritical, a8NumberOfSpeakers=a8NumberOfSpeakers, logSetRtc=logSetRtc, a10Version=a10Version, a8ControllerNumber=a8ControllerNumber, cfgCodConverted=cfgCodConverted, sysdevInitCanceled=sysdevInitCanceled, sysdevOfflineDeviceMadeAvailable=sysdevOfflineDeviceMadeAvailable, a4SoftErrors=a4SoftErrors, ctldevBbuCalibrateDone=ctldevBbuCalibrateDone, a9FmtCabinetNumber=a9FmtCabinetNumber, physdevReset=physdevReset, a7Lun=a7Lun, physdevParityError=physdevParityError, physdevDblccDead=physdevDblccDead, ctldevDevStartCmplt=ctldevDevStartCmplt, ctldevUpdatePtnrStatus=ctldevUpdatePtnrStatus, a4BusSpeed=a4BusSpeed, systemAlive=systemAlive, ctldevBbuCalibrateStart=ctldevBbuCalibrateStart, a10OperationalState=a10OperationalState, fmtstwkOk=fmtstwkOk, firmwareUpgradeComplete=firmwareUpgradeComplete, ctldevCritical=ctldevCritical, physdevBdtwrfailDead=physdevBdtwrfailDead, a2LogicalDrivesReadCacheHitPercentage=a2LogicalDrivesReadCacheHitPercentage, a5ManagementSoftwareBuildDate=a5ManagementSoftwareBuildDate, a2NumberOfPhysicalDevices=a2NumberOfPhysicalDevices, a6WriteRequests=a6WriteRequests, channelOk=channelOk, systemUserLoggedOut=systemUserLoggedOut, cfgInvalid=cfgInvalid, ctldevReset=ctldevReset, ctldevNegotiationCacheSize=ctldevNegotiationCacheSize, fmtUpsFailed=fmtUpsFailed, DmiInteger=DmiInteger, ppilotLogicalDiskOnline=ppilotLogicalDiskOnline, cfgNew=cfgNew, a2InterruptMode=a2InterruptMode, physdevRebuildCanceled=physdevRebuildCanceled, fmtpowerNotpresent=fmtpowerNotpresent, physdevMovingToOtherChn=physdevMovingToOtherChn, enclaccessReady=enclaccessReady, a8ChannelNumber=a8ChannelNumber, DmiCounter=DmiCounter, a2OperationalState=a2OperationalState, sysdevDataLossImproperShutdown=sysdevDataLossImproperShutdown, physdevUnconfigured=physdevUnconfigured, a5MylexDacDeviceDriverBuildDate=a5MylexDacDeviceDriverBuildDate, a10MaximumPowerInHours=a10MaximumPowerInHours, a3RaidLevelString=a3RaidLevelString, a2ControllerModel=a2ControllerModel, physdevMissingDead=physdevMissingDead, dmtfGroups=dmtfGroups, a4ControllerNumber=a4ControllerNumber, ctldevBbuNoBattery=ctldevBbuNoBattery, systemDead=systemDead, ctldevInsertedPtnr=ctldevInsertedPtnr, a3PhysicalDriveMap=a3PhysicalDriveMap, ctldevNegotiationMemorySize=ctldevNegotiationMemorySize, physdevTypeInvalid=physdevTypeInvalid, physdevIdMismatch=physdevIdMismatch, a2DataWrittenToPhysicalDrivesInMb=a2DataWrittenToPhysicalDrivesInMb, ctldevFirmwareMismatch=ctldevFirmwareMismatch, enclfanNotpresent=enclfanNotpresent, a2HostControllerNumber=a2HostControllerNumber, a4Lun=a4Lun, a5MylexDacDeviceDriverRevision=a5MylexDacDeviceDriverRevision, physdevRebuildNewdevFailed=physdevRebuildNewdevFailed, ctldevBbuBattTestStart=ctldevBbuBattTestStart, fmtUpsBatLow=fmtUpsBatLow, a2HostChannelNumber=a2HostChannelNumber, DmiDate=DmiDate, physdevExpandcapacityError=physdevExpandcapacityError, fmtUpsOk=fmtUpsOk, a9ControllerNumber=a9ControllerNumber, ePhysicalDeviceInformation=ePhysicalDeviceInformation, logEmpty=logEmpty, cfgCodNotFound=cfgCodNotFound, physdevRebuildDone=physdevRebuildDone, ctldevWritebackError=ctldevWritebackError, sysdevExpandcapacityError=sysdevExpandcapacityError, mylex=mylex, sysdevCheckCanceled=sysdevCheckCanceled, ctldevBbuPowerLow=ctldevBbuPowerLow, tMylexRaidEventInformation=tMylexRaidEventInformation, a8NumberOfFans=a8NumberOfFans, a8NumberOfPowerSupplyUnitsFailed=a8NumberOfPowerSupplyUnitsFailed, channelScsiBusAlive=channelScsiBusAlive, fmtheatOk=fmtheatOk)
