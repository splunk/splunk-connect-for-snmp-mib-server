#
# PySNMP MIB module OMNI-gx2PSDC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2PSDC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
gx2Psdc, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Psdc")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapNETrapLastTrapTimeStamp, trapNetworkElemModelNumber, trapNetworkElemSerialNum, trapNetworkElemAlarmStatus, trapNetworkElemAvailStatus, trapText, trapNetworkElemOperState, trapPerceivedSeverity, trapChangedValueDisplayString, trapChangedObjectId, trapNetworkElemAdminState, trapIdentifier, trapChangedValueInteger = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp", "trapNetworkElemModelNumber", "trapNetworkElemSerialNum", "trapNetworkElemAlarmStatus", "trapNetworkElemAvailStatus", "trapText", "trapNetworkElemOperState", "trapPerceivedSeverity", "trapChangedValueDisplayString", "trapChangedObjectId", "trapNetworkElemAdminState", "trapIdentifier", "trapChangedValueInteger")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Counter64, iso, Gauge32, Bits, NotificationType, MibIdentifier, NotificationType, Integer32, ModuleIdentity, ObjectIdentity, Unsigned32, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Gauge32", "Bits", "NotificationType", "MibIdentifier", "NotificationType", "Integer32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2PsdcDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 1))
gx2PsdcAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2), )
if mibBuilder.loadTexts: gx2PsdcAnalogTable.setStatus('mandatory')
gx2PsdcAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "gx2PsdcAnalogTableIndex"))
if mibBuilder.loadTexts: gx2PsdcAnalogEntry.setStatus('mandatory')
gx2PsdcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3), )
if mibBuilder.loadTexts: gx2PsdcStatusTable.setStatus('mandatory')
gx2PsdcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "gx2PsdcStatusTableIndex"))
if mibBuilder.loadTexts: gx2PsdcStatusEntry.setStatus('mandatory')
gx2PsdcFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4), )
if mibBuilder.loadTexts: gx2PsdcFactoryTable.setStatus('mandatory')
gx2PsdcFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "gx2PsdcFactoryTableIndex"))
if mibBuilder.loadTexts: gx2PsdcFactoryEntry.setStatus('mandatory')
gx2PsdcHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5), )
if mibBuilder.loadTexts: gx2PsdcHoldTimeTable.setStatus('mandatory')
gx2PsdcHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5, 4), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "rxgx2PsdcHoldTimeTableIndex"), (0, "OMNI-gx2PSDC-MIB", "rxgx2PsdcHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2PsdcHoldTimeEntry.setStatus('mandatory')
gx2PsdcDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6), )
if mibBuilder.loadTexts: gx2PsdcDigitalTable.setStatus('mandatory')
gx2PsdcDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "gx2PsdcDigitalTableIndex"))
if mibBuilder.loadTexts: gx2PsdcDigitalEntry.setStatus('mandatory')
gx2PsdcAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2PsdcAnalogTableIndex.setStatus('mandatory')
pslabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelFanCurrent.setStatus('optional')
psuomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuomFanCurrent.setStatus('optional')
psmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHighFanCurrent.setStatus('mandatory')
psmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLowFanCurrent.setStatus('mandatory')
psminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHighFanCurrent.setStatus('mandatory')
psminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLowFanCurrent.setStatus('mandatory')
pscurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValueFanCurrent.setStatus('mandatory')
psstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlagFanCurrent.setStatus('mandatory')
psminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValueFanCurrent.setStatus('mandatory')
psmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValueFanCurrent.setStatus('mandatory')
psalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmStateFanCurrent.setStatus('mandatory')
pslabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel12Volt.setStatus('optional')
psuom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom12Volt.setStatus('optional')
psmajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh12Volt.setStatus('mandatory')
psmajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow12Volt.setStatus('mandatory')
psminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh12Volt.setStatus('mandatory')
psminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow12Volt.setStatus('mandatory')
pscurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue12Volt.setStatus('mandatory')
psstateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag12Volt.setStatus('mandatory')
psminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue12Volt.setStatus('mandatory')
psmaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue12Volt.setStatus('mandatory')
psalarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState12Volt.setStatus('mandatory')
pslabel5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel5Volt.setStatus('optional')
psuom5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom5Volt.setStatus('optional')
psmajorHigh5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh5Volt.setStatus('mandatory')
psmajorLow5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow5Volt.setStatus('mandatory')
psminorHigh5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh5Volt.setStatus('mandatory')
psminorLow5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow5Volt.setStatus('mandatory')
pscurrentValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue5Volt.setStatus('mandatory')
psstateFlag5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag5Volt.setStatus('mandatory')
psminValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue5Volt.setStatus('mandatory')
psmaxValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue5Volt.setStatus('mandatory')
psalarmState5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState5Volt.setStatus('mandatory')
pslabel3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel3Volt.setStatus('optional')
psuom3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom3Volt.setStatus('optional')
psmajorHigh3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh3Volt.setStatus('mandatory')
psmajorLow3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow3Volt.setStatus('mandatory')
psminorHigh3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh3Volt.setStatus('mandatory')
psminorLow3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow3Volt.setStatus('mandatory')
pscurrentValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue3Volt.setStatus('mandatory')
psstateFlag3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag3Volt.setStatus('mandatory')
psminValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue3Volt.setStatus('mandatory')
psmaxValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue3Volt.setStatus('mandatory')
psalarmState3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState3Volt.setStatus('mandatory')
pslabelAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelAmbientTemp.setStatus('optional')
psuomAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuomAmbientTemp.setStatus('optional')
psmajorHighAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHighAmbientTemp.setStatus('mandatory')
psmajorLowAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLowAmbientTemp.setStatus('mandatory')
psminorHighAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHighAmbientTemp.setStatus('mandatory')
psminorLowAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLowAmbientTemp.setStatus('mandatory')
pscurrentValueAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValueAmbientTemp.setStatus('mandatory')
psstateFlagAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlagAmbientTemp.setStatus('mandatory')
psminValueAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValueAmbientTemp.setStatus('mandatory')
psmaxValueAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValueAmbientTemp.setStatus('mandatory')
psalarmStateAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmStateAmbientTemp.setStatus('mandatory')
pslabelMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelMainTemp.setStatus('optional')
psuomMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuomMainTemp.setStatus('optional')
psmajorHighMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHighMainTemp.setStatus('mandatory')
psmajorLowMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLowMainTemp.setStatus('mandatory')
psminorHighMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHighMainTemp.setStatus('mandatory')
psminorLowMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLowMainTemp.setStatus('mandatory')
pscurrentValueMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValueMainTemp.setStatus('mandatory')
psstateFlagMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlagMainTemp.setStatus('mandatory')
psminValueMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValueMainTemp.setStatus('mandatory')
psmaxValueMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValueMainTemp.setStatus('mandatory')
psalarmStateMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmStateMainTemp.setStatus('mandatory')
pslabel12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel12AnodeVolt.setStatus('optional')
psuom12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom12AnodeVolt.setStatus('optional')
psmajorHigh12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh12AnodeVolt.setStatus('mandatory')
psmajorLow12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow12AnodeVolt.setStatus('mandatory')
psminorHigh12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh12AnodeVolt.setStatus('mandatory')
psminorLow12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow12AnodeVolt.setStatus('mandatory')
pscurrentValue12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue12AnodeVolt.setStatus('mandatory')
psstateFlag12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag12AnodeVolt.setStatus('mandatory')
psminValue12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue12AnodeVolt.setStatus('mandatory')
psmaxValue12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue12AnodeVolt.setStatus('mandatory')
psalarmState12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState12AnodeVolt.setStatus('mandatory')
pslabel5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel5AnodeVolt.setStatus('optional')
psuom5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom5AnodeVolt.setStatus('optional')
psmajorHigh5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh5AnodeVolt.setStatus('mandatory')
psmajorLow5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow5AnodeVolt.setStatus('mandatory')
psminorHigh5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh5AnodeVolt.setStatus('mandatory')
psminorLow5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow5AnodeVolt.setStatus('mandatory')
pscurrentValue5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue5AnodeVolt.setStatus('mandatory')
psstateFlag5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag5AnodeVolt.setStatus('mandatory')
psminValue5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue5AnodeVolt.setStatus('mandatory')
psmaxValue5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue5AnodeVolt.setStatus('mandatory')
psalarmState5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState5AnodeVolt.setStatus('mandatory')
pslabel3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel3AnodeVolt.setStatus('optional')
psuom3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom3AnodeVolt.setStatus('optional')
psmajorHigh3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh3AnodeVolt.setStatus('mandatory')
psmajorLow3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow3AnodeVolt.setStatus('mandatory')
psminorHigh3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh3AnodeVolt.setStatus('mandatory')
psminorLow3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow3AnodeVolt.setStatus('mandatory')
pscurrentValue3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue3AnodeVolt.setStatus('mandatory')
psstateFlag3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag3AnodeVolt.setStatus('mandatory')
psminValue3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue3AnodeVolt.setStatus('mandatory')
psmaxValue3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue3AnodeVolt.setStatus('mandatory')
psalarmState3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState3AnodeVolt.setStatus('mandatory')
gx2PsdcDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2PsdcDigitalTableIndex.setStatus('mandatory')
psdclabelNVfanAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdclabelNVfanAlrm.setStatus('optional')
psdcenumNVfanAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdcenumNVfanAlrm.setStatus('optional')
psdcvalueNVfanAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("unacknowledged", 2), ("acknowledged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psdcvalueNVfanAlrm.setStatus('mandatory')
psdcstateflagNVfanAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdcstateflagNVfanAlrm.setStatus('mandatory')
gx2PsdcStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2PsdcStatusTableIndex.setStatus('mandatory')
pslabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelBoot.setStatus('optional')
psvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvalueBoot.setStatus('mandatory')
psstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagBoot.setStatus('mandatory')
pslabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelFlash.setStatus('optional')
psvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvalueFlash.setStatus('mandatory')
psstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagFlash.setStatus('mandatory')
pslabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelFactoryDataCRC.setStatus('optional')
psvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvalueFactoryDataCRC.setStatus('mandatory')
psstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagFactoryDataCRC.setStatus('mandatory')
pslabelPsdcDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelPsdcDataCRC.setStatus('optional')
psvaluePsdcDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvaluePsdcDataCRC.setStatus('mandatory')
psstateflagPsdcDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagPsdcDataCRC.setStatus('mandatory')
pslabelPsdcHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelPsdcHwStatus.setStatus('optional')
psvaluePsdcHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvaluePsdcHwStatus.setStatus('mandatory')
psstateflagPsdcHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagPsdcHwStatus.setStatus('mandatory')
gx2PsdcFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2PsdcFactoryTableIndex.setStatus('mandatory')
psbootControlByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbootControlByteValue.setStatus('mandatory')
psbootStatusByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbootStatusByteValue.setStatus('mandatory')
psbank1CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbank1CRCValue.setStatus('mandatory')
psbank2CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbank2CRCValue.setStatus('mandatory')
psprgEEPROMByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psprgEEPROMByteValue.setStatus('mandatory')
psfactoryCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psfactoryCRCValue.setStatus('mandatory')
pscalculateCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("na", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscalculateCRCValue.setStatus('mandatory')
pshourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshourMeterValue.setStatus('mandatory')
psflashPrgCntAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psflashPrgCntAValue.setStatus('mandatory')
psflashPrgCntBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psflashPrgCntBValue.setStatus('mandatory')
psflashBankARevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psflashBankARevValue.setStatus('mandatory')
psflashBankBRevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psflashBankBRevValue.setStatus('mandatory')
rxgx2PsdcHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeTableIndex.setStatus('mandatory')
rxgx2PsdcHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeSpecIndex.setStatus('mandatory')
rxgx2PsdcHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeData.setStatus('mandatory')
trapPSDCConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCFanCurrent = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDC12Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDC5Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDC3Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCAmbientTemp = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCMainTemp = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDC12AnodeVolt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDC5AnodeVolt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDC3AnodeVolt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCEEChksmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCAlarmReportingStatus = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSbrickType = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSsupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapPSDCALARMChksmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2PSDC-MIB", trapPSDC12AnodeVolt=trapPSDC12AnodeVolt, rxgx2PsdcHoldTimeData=rxgx2PsdcHoldTimeData, pscurrentValue3AnodeVolt=pscurrentValue3AnodeVolt, gx2PsdcDigitalTableIndex=gx2PsdcDigitalTableIndex, trapPSsupplyFailure=trapPSsupplyFailure, gx2PsdcHoldTimeEntry=gx2PsdcHoldTimeEntry, psalarmState12AnodeVolt=psalarmState12AnodeVolt, pscurrentValueFanCurrent=pscurrentValueFanCurrent, psminValue5Volt=psminValue5Volt, psmaxValue3Volt=psmaxValue3Volt, psuom12AnodeVolt=psuom12AnodeVolt, psalarmStateMainTemp=psalarmStateMainTemp, psvaluePsdcHwStatus=psvaluePsdcHwStatus, pscalculateCRCValue=pscalculateCRCValue, psvalueFactoryDataCRC=psvalueFactoryDataCRC, psstateflagFlash=psstateflagFlash, psbank1CRCValue=psbank1CRCValue, psstateflagBoot=psstateflagBoot, psalarmState3Volt=psalarmState3Volt, pscurrentValue5Volt=pscurrentValue5Volt, psmajorHighMainTemp=psmajorHighMainTemp, pslabel3Volt=pslabel3Volt, psstateflagPsdcHwStatus=psstateflagPsdcHwStatus, pscurrentValue5AnodeVolt=pscurrentValue5AnodeVolt, psstateFlag12Volt=psstateFlag12Volt, psmajorHigh12AnodeVolt=psmajorHigh12AnodeVolt, pslabel5AnodeVolt=pslabel5AnodeVolt, gx2PsdcDigitalEntry=gx2PsdcDigitalEntry, pscurrentValue12Volt=pscurrentValue12Volt, psbootStatusByteValue=psbootStatusByteValue, psminorLow5Volt=psminorLow5Volt, pscurrentValue3Volt=pscurrentValue3Volt, psminorLow3Volt=psminorLow3Volt, psminorHigh5AnodeVolt=psminorHigh5AnodeVolt, psminorHigh12Volt=psminorHigh12Volt, pslabelAmbientTemp=pslabelAmbientTemp, psflashPrgCntAValue=psflashPrgCntAValue, psminorHighFanCurrent=psminorHighFanCurrent, psuom3Volt=psuom3Volt, gx2PsdcStatusEntry=gx2PsdcStatusEntry, psstateflagPsdcDataCRC=psstateflagPsdcDataCRC, psbank2CRCValue=psbank2CRCValue, psminorLowFanCurrent=psminorLowFanCurrent, trapPSDCEEChksmAlarm=trapPSDCEEChksmAlarm, psstateflagFactoryDataCRC=psstateflagFactoryDataCRC, psalarmStateAmbientTemp=psalarmStateAmbientTemp, psminorHigh12AnodeVolt=psminorHigh12AnodeVolt, psminorHigh5Volt=psminorHigh5Volt, trapPSDC12Volt=trapPSDC12Volt, psmajorLow3AnodeVolt=psmajorLow3AnodeVolt, psminValue12Volt=psminValue12Volt, gx2PsdcFactoryTableIndex=gx2PsdcFactoryTableIndex, psmajorLowAmbientTemp=psmajorLowAmbientTemp, psmaxValueMainTemp=psmaxValueMainTemp, pslabelFanCurrent=pslabelFanCurrent, psmaxValueAmbientTemp=psmaxValueAmbientTemp, psvalueBoot=psvalueBoot, gx2PsdcAnalogTable=gx2PsdcAnalogTable, psuom5AnodeVolt=psuom5AnodeVolt, psminValue5AnodeVolt=psminValue5AnodeVolt, pslabelFlash=pslabelFlash, trapPSDCAlarmReportingStatus=trapPSDCAlarmReportingStatus, psfactoryCRCValue=psfactoryCRCValue, psalarmState12Volt=psalarmState12Volt, rxgx2PsdcHoldTimeTableIndex=rxgx2PsdcHoldTimeTableIndex, psstateFlag3Volt=psstateFlag3Volt, Float=Float, psmajorHighAmbientTemp=psmajorHighAmbientTemp, psmaxValue3AnodeVolt=psmaxValue3AnodeVolt, psminValueMainTemp=psminValueMainTemp, psminorLow3AnodeVolt=psminorLow3AnodeVolt, trapPSDCMainTemp=trapPSDCMainTemp, psuom12Volt=psuom12Volt, psstateFlagFanCurrent=psstateFlagFanCurrent, psmajorHigh12Volt=psmajorHigh12Volt, psbootControlByteValue=psbootControlByteValue, psstateFlagMainTemp=psstateFlagMainTemp, psminValue3Volt=psminValue3Volt, psminorLow12AnodeVolt=psminorLow12AnodeVolt, psminorLowMainTemp=psminorLowMainTemp, psdcvalueNVfanAlrm=psdcvalueNVfanAlrm, psmajorHigh3Volt=psmajorHigh3Volt, gx2PsdcStatusTable=gx2PsdcStatusTable, pslabelPsdcHwStatus=pslabelPsdcHwStatus, psalarmStateFanCurrent=psalarmStateFanCurrent, pslabelPsdcDataCRC=pslabelPsdcDataCRC, psdcenumNVfanAlrm=psdcenumNVfanAlrm, gx2PsdcHoldTimeTable=gx2PsdcHoldTimeTable, trapPSDC5AnodeVolt=trapPSDC5AnodeVolt, trapPSDCConfigChangeDisplayString=trapPSDCConfigChangeDisplayString, trapPSDCAmbientTemp=trapPSDCAmbientTemp, psalarmState5Volt=psalarmState5Volt, psuomFanCurrent=psuomFanCurrent, psminValue12AnodeVolt=psminValue12AnodeVolt, psmajorLowFanCurrent=psmajorLowFanCurrent, psmajorHigh3AnodeVolt=psmajorHigh3AnodeVolt, psstateFlagAmbientTemp=psstateFlagAmbientTemp, pslabel12AnodeVolt=pslabel12AnodeVolt, trapPSDCBootAlarm=trapPSDCBootAlarm, psdclabelNVfanAlrm=psdclabelNVfanAlrm, psmajorLow12Volt=psmajorLow12Volt, pscurrentValueMainTemp=pscurrentValueMainTemp, psvalueFlash=psvalueFlash, psmajorLow5AnodeVolt=psmajorLow5AnodeVolt, psmajorLowMainTemp=psmajorLowMainTemp, psminorLow5AnodeVolt=psminorLow5AnodeVolt, pslabelMainTemp=pslabelMainTemp, psmajorLow12AnodeVolt=psmajorLow12AnodeVolt, rxgx2PsdcHoldTimeSpecIndex=rxgx2PsdcHoldTimeSpecIndex, psalarmState3AnodeVolt=psalarmState3AnodeVolt, psstateFlag3AnodeVolt=psstateFlag3AnodeVolt, psmajorHighFanCurrent=psmajorHighFanCurrent, psstateFlag12AnodeVolt=psstateFlag12AnodeVolt, psminValue3AnodeVolt=psminValue3AnodeVolt, pslabel5Volt=pslabel5Volt, psmajorHigh5AnodeVolt=psmajorHigh5AnodeVolt, gx2PsdcAnalogTableIndex=gx2PsdcAnalogTableIndex, psprgEEPROMByteValue=psprgEEPROMByteValue, psflashBankARevValue=psflashBankARevValue, psmaxValueFanCurrent=psmaxValueFanCurrent, gx2PsdcStatusTableIndex=gx2PsdcStatusTableIndex, psalarmState5AnodeVolt=psalarmState5AnodeVolt, psuom3AnodeVolt=psuom3AnodeVolt, psminorHighMainTemp=psminorHighMainTemp, psmaxValue5AnodeVolt=psmaxValue5AnodeVolt, psmaxValue12Volt=psmaxValue12Volt, psminorLow12Volt=psminorLow12Volt, gx2PsdcFactoryEntry=gx2PsdcFactoryEntry, psmajorHigh5Volt=psmajorHigh5Volt, pscurrentValueAmbientTemp=pscurrentValueAmbientTemp, psminorHigh3AnodeVolt=psminorHigh3AnodeVolt, pslabelFactoryDataCRC=pslabelFactoryDataCRC, trapPSDC3Volt=trapPSDC3Volt, pslabel12Volt=pslabel12Volt, psstateFlag5Volt=psstateFlag5Volt, psmaxValue5Volt=psmaxValue5Volt, psdcstateflagNVfanAlrm=psdcstateflagNVfanAlrm, trapPSDCALARMChksmAlarm=trapPSDCALARMChksmAlarm, gx2PsdcAnalogEntry=gx2PsdcAnalogEntry, psstateFlag5AnodeVolt=psstateFlag5AnodeVolt, trapPSDCFlashAlarm=trapPSDCFlashAlarm, pscurrentValue12AnodeVolt=pscurrentValue12AnodeVolt, trapPSbrickType=trapPSbrickType, psuomMainTemp=psuomMainTemp, psminorLowAmbientTemp=psminorLowAmbientTemp, pshourMeterValue=pshourMeterValue, psflashBankBRevValue=psflashBankBRevValue, trapPSDC5Volt=trapPSDC5Volt, psminorHigh3Volt=psminorHigh3Volt, pslabelBoot=pslabelBoot, psuom5Volt=psuom5Volt, trapPSDC3AnodeVolt=trapPSDC3AnodeVolt, psmajorLow3Volt=psmajorLow3Volt, gx2PsdcDescriptor=gx2PsdcDescriptor, trapPSDCConfigChangeInteger=trapPSDCConfigChangeInteger, pslabel3AnodeVolt=pslabel3AnodeVolt, psflashPrgCntBValue=psflashPrgCntBValue, psvaluePsdcDataCRC=psvaluePsdcDataCRC, gx2PsdcFactoryTable=gx2PsdcFactoryTable, psuomAmbientTemp=psuomAmbientTemp, gx2PsdcDigitalTable=gx2PsdcDigitalTable, psmajorLow5Volt=psmajorLow5Volt, psminValueFanCurrent=psminValueFanCurrent, psminValueAmbientTemp=psminValueAmbientTemp, psmaxValue12AnodeVolt=psmaxValue12AnodeVolt, trapPSDCFanCurrent=trapPSDCFanCurrent, psminorHighAmbientTemp=psminorHighAmbientTemp)
