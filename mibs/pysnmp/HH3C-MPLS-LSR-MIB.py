#
# PySNMP MIB module HH3C-MPLS-LSR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-MPLS-LSR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hh3cMpls, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cMpls")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressIPv4, InetAddressType, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressType", "InetAddressIPv6")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, ObjectIdentity, ModuleIdentity, NotificationType, IpAddress, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Counter32, Bits, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "NotificationType", "IpAddress", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Counter32", "Bits", "Gauge32", "Integer32")
DisplayString, RowPointer, TextualConvention, TruthValue, RowStatus, StorageType, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowPointer", "TextualConvention", "TruthValue", "RowStatus", "StorageType", "TimeStamp")
hh3cMplsLsr = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1))
hh3cMplsLsr.setRevisions(('2000-07-12 12:00', '2000-07-07 12:00', '2000-04-26 12:00', '2000-04-21 12:00', '2000-03-06 12:00', '2000-02-16 12:00', '1999-06-16 12:00',))
if mibBuilder.loadTexts: hh3cMplsLsr.setLastUpdated('200007121200Z')
if mibBuilder.loadTexts: hh3cMplsLsr.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cMplsLSPID(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class Hh3cMplsLabel(TextualConvention, Unsigned32):
    reference = '1. MPLS Label Stack Encoding, Rosen et al, draft- ietf-mpls-label-encaps-07.txt, March 2000. 2. Use of Label Switching on Frame Relay Networks, Conta et al, draft-ietf-mpls-fr-03.txt, Nov. 1998. 3. MPLS using LDP and ATM VC switching, Davie et al, draft-ietf-mpls-atm-02.txt, April 1999.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class Hh3cMplsBitRate(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class Hh3cMplsBurstSize(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class Hh3cMplsObjectOwner(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("snmp", 2), ("ldp", 3), ("rsvp", 4), ("crldp", 5), ("policyAgent", 6), ("unknown", 7))

hh3cmplsLsrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1))
hh3cmplsLsrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 2))
hh3cmplsLsrNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 2, 0))
hh3cmplsLsrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3))
hh3cmplsInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cmplsInterfaceConfTable.setStatus('current')
hh3cmplsInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1), ).setIndexNames((0, "HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceConfIndex"))
if mibBuilder.loadTexts: hh3cmplsInterfaceConfEntry.setStatus('current')
hh3cmplsInterfaceConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hh3cmplsInterfaceConfIndex.setStatus('current')
hh3cmplsInterfaceLabelMinIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 2), Hh3cMplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceLabelMinIn.setStatus('current')
hh3cmplsInterfaceLabelMaxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 3), Hh3cMplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceLabelMaxIn.setStatus('current')
hh3cmplsInterfaceLabelMinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 4), Hh3cMplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceLabelMinOut.setStatus('current')
hh3cmplsInterfaceLabelMaxOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 5), Hh3cMplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceLabelMaxOut.setStatus('current')
hh3cmplsInterfaceTotalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 6), Hh3cMplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceTotalBandwidth.setStatus('current')
hh3cmplsInterfaceAvailableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 7), Hh3cMplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceAvailableBandwidth.setStatus('current')
hh3cmplsInterfaceLabelParticipationType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 8), Bits().clone(namedValues=NamedValues(("perPlatform", 0), ("perInterface", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceLabelParticipationType.setStatus('current')
hh3cmplsInterfaceConfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 1, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsInterfaceConfStorageType.setStatus('current')
hh3cmplsInterfacePerfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 2), )
if mibBuilder.loadTexts: hh3cmplsInterfacePerfTable.setStatus('current')
hh3cmplsInterfacePerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 2, 1), )
hh3cmplsInterfaceConfEntry.registerAugmentions(("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfacePerfEntry"))
hh3cmplsInterfacePerfEntry.setIndexNames(*hh3cmplsInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cmplsInterfacePerfEntry.setStatus('current')
hh3cmplsInterfaceInLabelsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceInLabelsUsed.setStatus('current')
hh3cmplsInterfaceFailedLabelLookup = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceFailedLabelLookup.setStatus('current')
hh3cmplsInterfaceOutLabelsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceOutLabelsUsed.setStatus('current')
hh3cmplsInterfaceOutFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInterfaceOutFragments.setStatus('current')
hh3cmplsInSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3), )
if mibBuilder.loadTexts: hh3cmplsInSegmentTable.setStatus('current')
hh3cmplsInSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1), ).setIndexNames((0, "HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentIfIndex"), (0, "HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentLabel"))
if mibBuilder.loadTexts: hh3cmplsInSegmentEntry.setStatus('current')
hh3cmplsInSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 1), InterfaceIndexOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cmplsInSegmentIfIndex.setStatus('current')
hh3cmplsInSegmentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 2), Hh3cMplsLabel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cmplsInSegmentLabel.setStatus('current')
hh3cmplsInSegmentNPop = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsInSegmentNPop.setStatus('current')
hh3cmplsInSegmentAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 4), AddressFamilyNumbers().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsInSegmentAddrFamily.setStatus('current')
hh3cmplsInSegmentXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInSegmentXCIndex.setStatus('current')
hh3cmplsInSegmentOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 6), Hh3cMplsObjectOwner().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsInSegmentOwner.setStatus('current')
hh3cmplsInSegmentTrafficParamPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 7), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsInSegmentTrafficParamPtr.setStatus('current')
hh3cmplsInSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsInSegmentRowStatus.setStatus('current')
hh3cmplsInSegmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 3, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsInSegmentStorageType.setStatus('current')
hh3cmplsInSegmentPerfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 4), )
if mibBuilder.loadTexts: hh3cmplsInSegmentPerfTable.setStatus('current')
hh3cmplsInSegmentPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 4, 1), )
hh3cmplsInSegmentEntry.registerAugmentions(("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentPerfEntry"))
hh3cmplsInSegmentPerfEntry.setIndexNames(*hh3cmplsInSegmentEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cmplsInSegmentPerfEntry.setStatus('current')
hh3cmplsInSegmentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInSegmentOctets.setStatus('current')
hh3cmplsInSegmentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInSegmentPackets.setStatus('current')
hh3cmplsInSegmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInSegmentErrors.setStatus('current')
hh3cmplsInSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInSegmentDiscards.setStatus('current')
hh3cmplsInSegmentHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInSegmentHCOctets.setStatus('current')
hh3cmplsInSegmentPerfDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 4, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsInSegmentPerfDiscontinuityTime.setStatus('current')
hh3cmplsOutSegmentIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsOutSegmentIndexNext.setStatus('current')
hh3cmplsOutSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6), )
if mibBuilder.loadTexts: hh3cmplsOutSegmentTable.setStatus('current')
hh3cmplsOutSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1), ).setIndexNames((0, "HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentIndex"))
if mibBuilder.loadTexts: hh3cmplsOutSegmentEntry.setStatus('current')
hh3cmplsOutSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cmplsOutSegmentIndex.setStatus('current')
hh3cmplsOutSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentIfIndex.setStatus('current')
hh3cmplsOutSegmentPushTopLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentPushTopLabel.setStatus('current')
hh3cmplsOutSegmentTopLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 4), Hh3cMplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentTopLabel.setStatus('current')
hh3cmplsOutSegmentNextHopIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentNextHopIpAddrType.setStatus('current')
hh3cmplsOutSegmentNextHopIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 6), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentNextHopIpv4Addr.setStatus('current')
hh3cmplsOutSegmentNextHopIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 7), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentNextHopIpv6Addr.setStatus('current')
hh3cmplsOutSegmentXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsOutSegmentXCIndex.setStatus('current')
hh3cmplsOutSegmentOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 9), Hh3cMplsObjectOwner().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentOwner.setStatus('current')
hh3cmplsOutSegmentTrafficParamPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 10), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentTrafficParamPtr.setStatus('current')
hh3cmplsOutSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentRowStatus.setStatus('current')
hh3cmplsOutSegmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 6, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsOutSegmentStorageType.setStatus('current')
hh3cmplsOutSegmentPerfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 7), )
if mibBuilder.loadTexts: hh3cmplsOutSegmentPerfTable.setStatus('current')
hh3cmplsOutSegmentPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 7, 1), )
hh3cmplsOutSegmentEntry.registerAugmentions(("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentPerfEntry"))
hh3cmplsOutSegmentPerfEntry.setIndexNames(*hh3cmplsOutSegmentEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cmplsOutSegmentPerfEntry.setStatus('current')
hh3cmplsOutSegmentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsOutSegmentOctets.setStatus('current')
hh3cmplsOutSegmentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsOutSegmentPackets.setStatus('current')
hh3cmplsOutSegmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsOutSegmentErrors.setStatus('current')
hh3cmplsOutSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsOutSegmentDiscards.setStatus('current')
hh3cmplsOutSegmentHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsOutSegmentHCOctets.setStatus('current')
hh3cmplsOutSegmentPerfDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 7, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsOutSegmentPerfDiscontinuityTime.setStatus('current')
hh3cmplsXCIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsXCIndexNext.setStatus('current')
hh3cmplsXCTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9), )
if mibBuilder.loadTexts: hh3cmplsXCTable.setStatus('current')
hh3cmplsXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1), ).setIndexNames((0, "HH3C-MPLS-LSR-MIB", "hh3cmplsXCIndex"), (0, "HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentIfIndex"), (0, "HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentLabel"), (0, "HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentIndex"))
if mibBuilder.loadTexts: hh3cmplsXCEntry.setStatus('current')
hh3cmplsXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cmplsXCIndex.setStatus('current')
hh3cmplsXCLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 2), Hh3cMplsLSPID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsXCLspId.setStatus('current')
hh3cmplsXCLabelStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsXCLabelStackIndex.setStatus('current')
hh3cmplsXCIsPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsXCIsPersistent.setStatus('current')
hh3cmplsXCOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 5), Hh3cMplsObjectOwner()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsXCOwner.setStatus('current')
hh3cmplsXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsXCRowStatus.setStatus('current')
hh3cmplsXCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsXCStorageType.setStatus('current')
hh3cmplsXCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsXCAdminStatus.setStatus('current')
hh3cmplsXCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsXCOperStatus.setStatus('current')
hh3cmplsMaxLabelStackDepth = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsMaxLabelStackDepth.setStatus('current')
hh3cmplsLabelStackIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsLabelStackIndexNext.setStatus('current')
hh3cmplsLabelStackTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 12), )
if mibBuilder.loadTexts: hh3cmplsLabelStackTable.setStatus('current')
hh3cmplsLabelStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 12, 1), ).setIndexNames((0, "HH3C-MPLS-LSR-MIB", "hh3cmplsLabelStackIndex"), (0, "HH3C-MPLS-LSR-MIB", "hh3cmplsLabelStackLabelIndex"))
if mibBuilder.loadTexts: hh3cmplsLabelStackEntry.setStatus('current')
hh3cmplsLabelStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cmplsLabelStackIndex.setStatus('current')
hh3cmplsLabelStackLabelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cmplsLabelStackLabelIndex.setStatus('current')
hh3cmplsLabelStackLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 12, 1, 3), Hh3cMplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsLabelStackLabel.setStatus('current')
hh3cmplsLabelStackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsLabelStackRowStatus.setStatus('current')
hh3cmplsLabelStackStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 12, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsLabelStackStorageType.setStatus('current')
hh3cmplsTrafficParamIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cmplsTrafficParamIndexNext.setStatus('current')
hh3cmplsTrafficParamTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 14), )
if mibBuilder.loadTexts: hh3cmplsTrafficParamTable.setStatus('current')
hh3cmplsTrafficParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 14, 1), ).setIndexNames((0, "HH3C-MPLS-LSR-MIB", "hh3cmplsTrafficParamIndex"))
if mibBuilder.loadTexts: hh3cmplsTrafficParamEntry.setStatus('current')
hh3cmplsTrafficParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cmplsTrafficParamIndex.setStatus('current')
hh3cmplsTrafficParamMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 14, 1, 2), Hh3cMplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsTrafficParamMaxRate.setStatus('current')
hh3cmplsTrafficParamMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 14, 1, 3), Hh3cMplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsTrafficParamMeanRate.setStatus('current')
hh3cmplsTrafficParamMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 14, 1, 4), Hh3cMplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsTrafficParamMaxBurstSize.setStatus('current')
hh3cmplsTrafficParamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsTrafficParamRowStatus.setStatus('current')
hh3cmplsTrafficParamStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 14, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cmplsTrafficParamStorageType.setStatus('current')
hh3cmplsXCTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cmplsXCTrapEnable.setStatus('current')
hh3cmplsXCUp = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 2, 0, 1)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsXCIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentIfIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentLabel"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCAdminStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCOperStatus"))
if mibBuilder.loadTexts: hh3cmplsXCUp.setStatus('current')
hh3cmplsXCDown = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 2, 0, 2)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsXCIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentIfIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentLabel"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCAdminStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCOperStatus"))
if mibBuilder.loadTexts: hh3cmplsXCDown.setStatus('current')
hh3cmplsLsrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1))
hh3cmplsLsrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 2))
hh3cmplsLsrModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 2, 1)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsPerfGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsSegmentDiscontinuityGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsHCInSegmentPerfGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsHCOutSegmentPerfGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsTrafficParamGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCIsPersistentGroup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCIsNotPersistentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsLsrModuleCompliance = hh3cmplsLsrModuleCompliance.setStatus('current')
hh3cmplsInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 1)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceLabelMinIn"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceLabelMaxIn"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceLabelMinOut"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceLabelMaxOut"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceTotalBandwidth"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceAvailableBandwidth"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceLabelParticipationType"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceConfStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsInterfaceGroup = hh3cmplsInterfaceGroup.setStatus('current')
hh3cmplsInSegmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 2)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentNPop"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentAddrFamily"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentXCIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentOctets"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentDiscards"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentOwner"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentRowStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentStorageType"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentTrafficParamPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsInSegmentGroup = hh3cmplsInSegmentGroup.setStatus('current')
hh3cmplsOutSegmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 3)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentIndexNext"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentIfIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentPushTopLabel"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentTopLabel"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentNextHopIpAddrType"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentNextHopIpv4Addr"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentNextHopIpv6Addr"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentXCIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentOwner"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentOctets"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentDiscards"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentErrors"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentRowStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentStorageType"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentTrafficParamPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsOutSegmentGroup = hh3cmplsOutSegmentGroup.setStatus('current')
hh3cmplsXCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 4)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsXCIndexNext"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCLabelStackIndex"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCOwner"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCAdminStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCOperStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCRowStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCTrapEnable"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsXCGroup = hh3cmplsXCGroup.setStatus('current')
hh3cmplsXCOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 5)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsXCLspId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsXCOptionalGroup = hh3cmplsXCOptionalGroup.setStatus('current')
hh3cmplsPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 6)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentOctets"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentPackets"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentErrors"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentDiscards"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentOctets"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentPackets"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentDiscards"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceInLabelsUsed"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceFailedLabelLookup"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceOutFragments"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsInterfaceOutLabelsUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsPerfGroup = hh3cmplsPerfGroup.setStatus('current')
hh3cmplsHCInSegmentPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 7)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentHCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsHCInSegmentPerfGroup = hh3cmplsHCInSegmentPerfGroup.setStatus('current')
hh3cmplsHCOutSegmentPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 8)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentHCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsHCOutSegmentPerfGroup = hh3cmplsHCOutSegmentPerfGroup.setStatus('current')
hh3cmplsTrafficParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 9)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsTrafficParamIndexNext"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsTrafficParamMaxRate"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsTrafficParamMeanRate"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsTrafficParamMaxBurstSize"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsTrafficParamRowStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsTrafficParamStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsTrafficParamGroup = hh3cmplsTrafficParamGroup.setStatus('current')
hh3cmplsXCIsPersistentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 10)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsXCIsPersistent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsXCIsPersistentGroup = hh3cmplsXCIsPersistentGroup.setStatus('current')
hh3cmplsXCIsNotPersistentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 11)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsXCIsPersistent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsXCIsNotPersistentGroup = hh3cmplsXCIsNotPersistentGroup.setStatus('current')
hh3cmplsLabelStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 12)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsLabelStackLabel"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsLabelStackRowStatus"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsLabelStackStorageType"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsMaxLabelStackDepth"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsLabelStackIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsLabelStackGroup = hh3cmplsLabelStackGroup.setStatus('current')
hh3cmplsSegmentDiscontinuityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 13)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsInSegmentPerfDiscontinuityTime"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsOutSegmentPerfDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsSegmentDiscontinuityGroup = hh3cmplsSegmentDiscontinuityGroup.setStatus('current')
hh3cmplsLsrNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 8, 12, 1, 3, 1, 14)).setObjects(("HH3C-MPLS-LSR-MIB", "hh3cmplsXCUp"), ("HH3C-MPLS-LSR-MIB", "hh3cmplsXCDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cmplsLsrNotificationGroup = hh3cmplsLsrNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("HH3C-MPLS-LSR-MIB", hh3cmplsXCEntry=hh3cmplsXCEntry, hh3cmplsXCTrapEnable=hh3cmplsXCTrapEnable, hh3cmplsLsrGroups=hh3cmplsLsrGroups, PYSNMP_MODULE_ID=hh3cMplsLsr, hh3cmplsLabelStackIndex=hh3cmplsLabelStackIndex, hh3cmplsSegmentDiscontinuityGroup=hh3cmplsSegmentDiscontinuityGroup, hh3cmplsInSegmentPerfDiscontinuityTime=hh3cmplsInSegmentPerfDiscontinuityTime, Hh3cMplsObjectOwner=Hh3cMplsObjectOwner, hh3cmplsLabelStackLabel=hh3cmplsLabelStackLabel, Hh3cMplsBurstSize=Hh3cMplsBurstSize, hh3cmplsInSegmentTable=hh3cmplsInSegmentTable, hh3cmplsInSegmentStorageType=hh3cmplsInSegmentStorageType, hh3cmplsInterfaceLabelParticipationType=hh3cmplsInterfaceLabelParticipationType, hh3cmplsInSegmentEntry=hh3cmplsInSegmentEntry, hh3cmplsLsrNotifyPrefix=hh3cmplsLsrNotifyPrefix, hh3cmplsInSegmentHCOctets=hh3cmplsInSegmentHCOctets, hh3cmplsOutSegmentNextHopIpv4Addr=hh3cmplsOutSegmentNextHopIpv4Addr, hh3cmplsTrafficParamMeanRate=hh3cmplsTrafficParamMeanRate, hh3cmplsXCDown=hh3cmplsXCDown, hh3cmplsLsrObjects=hh3cmplsLsrObjects, hh3cmplsXCGroup=hh3cmplsXCGroup, Hh3cMplsLSPID=Hh3cMplsLSPID, hh3cmplsInSegmentPackets=hh3cmplsInSegmentPackets, hh3cmplsTrafficParamGroup=hh3cmplsTrafficParamGroup, hh3cmplsInterfacePerfTable=hh3cmplsInterfacePerfTable, hh3cmplsOutSegmentTopLabel=hh3cmplsOutSegmentTopLabel, hh3cmplsOutSegmentErrors=hh3cmplsOutSegmentErrors, hh3cmplsTrafficParamEntry=hh3cmplsTrafficParamEntry, hh3cmplsInterfaceGroup=hh3cmplsInterfaceGroup, hh3cmplsInterfaceOutFragments=hh3cmplsInterfaceOutFragments, hh3cmplsLabelStackStorageType=hh3cmplsLabelStackStorageType, hh3cmplsInSegmentPerfEntry=hh3cmplsInSegmentPerfEntry, hh3cmplsXCIndexNext=hh3cmplsXCIndexNext, Hh3cMplsLabel=Hh3cMplsLabel, hh3cmplsXCIsPersistent=hh3cmplsXCIsPersistent, hh3cmplsOutSegmentDiscards=hh3cmplsOutSegmentDiscards, hh3cmplsPerfGroup=hh3cmplsPerfGroup, hh3cmplsTrafficParamIndexNext=hh3cmplsTrafficParamIndexNext, hh3cmplsOutSegmentPerfDiscontinuityTime=hh3cmplsOutSegmentPerfDiscontinuityTime, hh3cmplsXCOperStatus=hh3cmplsXCOperStatus, hh3cmplsInSegmentRowStatus=hh3cmplsInSegmentRowStatus, hh3cmplsOutSegmentEntry=hh3cmplsOutSegmentEntry, hh3cmplsTrafficParamMaxBurstSize=hh3cmplsTrafficParamMaxBurstSize, hh3cMplsLsr=hh3cMplsLsr, hh3cmplsXCIndex=hh3cmplsXCIndex, hh3cmplsOutSegmentPerfTable=hh3cmplsOutSegmentPerfTable, hh3cmplsLabelStackEntry=hh3cmplsLabelStackEntry, hh3cmplsOutSegmentPackets=hh3cmplsOutSegmentPackets, hh3cmplsLsrNotificationGroup=hh3cmplsLsrNotificationGroup, hh3cmplsInterfaceTotalBandwidth=hh3cmplsInterfaceTotalBandwidth, hh3cmplsLsrConformance=hh3cmplsLsrConformance, hh3cmplsOutSegmentNextHopIpAddrType=hh3cmplsOutSegmentNextHopIpAddrType, hh3cmplsTrafficParamStorageType=hh3cmplsTrafficParamStorageType, hh3cmplsInterfacePerfEntry=hh3cmplsInterfacePerfEntry, hh3cmplsTrafficParamTable=hh3cmplsTrafficParamTable, hh3cmplsOutSegmentIndex=hh3cmplsOutSegmentIndex, hh3cmplsInSegmentAddrFamily=hh3cmplsInSegmentAddrFamily, hh3cmplsInterfaceConfIndex=hh3cmplsInterfaceConfIndex, hh3cmplsXCStorageType=hh3cmplsXCStorageType, hh3cmplsLsrNotifications=hh3cmplsLsrNotifications, hh3cmplsLabelStackRowStatus=hh3cmplsLabelStackRowStatus, hh3cmplsLabelStackGroup=hh3cmplsLabelStackGroup, hh3cmplsLsrCompliances=hh3cmplsLsrCompliances, hh3cmplsTrafficParamIndex=hh3cmplsTrafficParamIndex, hh3cmplsInSegmentIfIndex=hh3cmplsInSegmentIfIndex, hh3cmplsInterfaceAvailableBandwidth=hh3cmplsInterfaceAvailableBandwidth, hh3cmplsInSegmentOctets=hh3cmplsInSegmentOctets, hh3cmplsInterfaceLabelMaxIn=hh3cmplsInterfaceLabelMaxIn, hh3cmplsOutSegmentRowStatus=hh3cmplsOutSegmentRowStatus, hh3cmplsOutSegmentOwner=hh3cmplsOutSegmentOwner, hh3cmplsXCRowStatus=hh3cmplsXCRowStatus, hh3cmplsInSegmentNPop=hh3cmplsInSegmentNPop, hh3cmplsXCTable=hh3cmplsXCTable, hh3cmplsTrafficParamMaxRate=hh3cmplsTrafficParamMaxRate, hh3cmplsOutSegmentStorageType=hh3cmplsOutSegmentStorageType, Hh3cMplsBitRate=Hh3cMplsBitRate, hh3cmplsOutSegmentOctets=hh3cmplsOutSegmentOctets, hh3cmplsInterfaceLabelMinOut=hh3cmplsInterfaceLabelMinOut, hh3cmplsOutSegmentPushTopLabel=hh3cmplsOutSegmentPushTopLabel, hh3cmplsLabelStackLabelIndex=hh3cmplsLabelStackLabelIndex, hh3cmplsInSegmentTrafficParamPtr=hh3cmplsInSegmentTrafficParamPtr, hh3cmplsXCLspId=hh3cmplsXCLspId, hh3cmplsXCLabelStackIndex=hh3cmplsXCLabelStackIndex, hh3cmplsOutSegmentIndexNext=hh3cmplsOutSegmentIndexNext, hh3cmplsOutSegmentGroup=hh3cmplsOutSegmentGroup, hh3cmplsInterfaceOutLabelsUsed=hh3cmplsInterfaceOutLabelsUsed, hh3cmplsInSegmentGroup=hh3cmplsInSegmentGroup, hh3cmplsXCUp=hh3cmplsXCUp, hh3cmplsInterfaceLabelMinIn=hh3cmplsInterfaceLabelMinIn, hh3cmplsXCIsPersistentGroup=hh3cmplsXCIsPersistentGroup, hh3cmplsInterfaceFailedLabelLookup=hh3cmplsInterfaceFailedLabelLookup, hh3cmplsInterfaceConfTable=hh3cmplsInterfaceConfTable, hh3cmplsInSegmentLabel=hh3cmplsInSegmentLabel, hh3cmplsInSegmentXCIndex=hh3cmplsInSegmentXCIndex, hh3cmplsLabelStackIndexNext=hh3cmplsLabelStackIndexNext, hh3cmplsXCIsNotPersistentGroup=hh3cmplsXCIsNotPersistentGroup, hh3cmplsHCInSegmentPerfGroup=hh3cmplsHCInSegmentPerfGroup, hh3cmplsInterfaceConfEntry=hh3cmplsInterfaceConfEntry, hh3cmplsInterfaceInLabelsUsed=hh3cmplsInterfaceInLabelsUsed, hh3cmplsOutSegmentHCOctets=hh3cmplsOutSegmentHCOctets, hh3cmplsXCAdminStatus=hh3cmplsXCAdminStatus, hh3cmplsInterfaceLabelMaxOut=hh3cmplsInterfaceLabelMaxOut, hh3cmplsHCOutSegmentPerfGroup=hh3cmplsHCOutSegmentPerfGroup, hh3cmplsXCOwner=hh3cmplsXCOwner, hh3cmplsOutSegmentTrafficParamPtr=hh3cmplsOutSegmentTrafficParamPtr, hh3cmplsInSegmentErrors=hh3cmplsInSegmentErrors, hh3cmplsLabelStackTable=hh3cmplsLabelStackTable, hh3cmplsOutSegmentIfIndex=hh3cmplsOutSegmentIfIndex, hh3cmplsOutSegmentNextHopIpv6Addr=hh3cmplsOutSegmentNextHopIpv6Addr, hh3cmplsXCOptionalGroup=hh3cmplsXCOptionalGroup, hh3cmplsLsrModuleCompliance=hh3cmplsLsrModuleCompliance, hh3cmplsMaxLabelStackDepth=hh3cmplsMaxLabelStackDepth, hh3cmplsOutSegmentTable=hh3cmplsOutSegmentTable, hh3cmplsInterfaceConfStorageType=hh3cmplsInterfaceConfStorageType, hh3cmplsInSegmentPerfTable=hh3cmplsInSegmentPerfTable, hh3cmplsInSegmentDiscards=hh3cmplsInSegmentDiscards, hh3cmplsOutSegmentPerfEntry=hh3cmplsOutSegmentPerfEntry, hh3cmplsOutSegmentXCIndex=hh3cmplsOutSegmentXCIndex, hh3cmplsTrafficParamRowStatus=hh3cmplsTrafficParamRowStatus, hh3cmplsInSegmentOwner=hh3cmplsInSegmentOwner)
