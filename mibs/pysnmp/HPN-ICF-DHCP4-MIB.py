#
# PySNMP MIB module HPN-ICF-DHCP4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DHCP4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddressIPv4, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, IpAddress, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, iso, Gauge32, Integer32, TimeTicks, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "IpAddress", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "iso", "Gauge32", "Integer32", "TimeTicks", "ModuleIdentity", "ObjectIdentity")
MacAddress, TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
hpnicfDhcp4 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122))
hpnicfDhcp4.setRevisions(('2013-04-24 00:00',))
if mibBuilder.loadTexts: hpnicfDhcp4.setLastUpdated('201304240000Z')
if mibBuilder.loadTexts: hpnicfDhcp4.setOrganization('')
hpnicfDhcpServer2ScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1))
hpnicfDhcpServer2ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 1))
hpnicfDhcpServer2Enabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpServer2Enabled.setStatus('current')
hpnicfDhcpServer2AlwaysBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpServer2AlwaysBroadcast.setStatus('current')
hpnicfDhcpServer2IgnoreBootp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpServer2IgnoreBootp.setStatus('current')
hpnicfDhcpServer2BootpReplyRfc1048 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpServer2BootpReplyRfc1048.setStatus('current')
hpnicfDhcpServer2Opt82Enabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpServer2Opt82Enabled.setStatus('current')
hpnicfDhcpServer2PingNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpServer2PingNumber.setStatus('current')
hpnicfDhcpServer2PingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpServer2PingTimeout.setStatus('current')
hpnicfDhcpServer2StatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2))
hpnicfDhcpServer2BadNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2BadNum.setStatus('current')
hpnicfDhcpServer2BootpRequestNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2BootpRequestNum.setStatus('current')
hpnicfDhcpServer2DiscoverNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2DiscoverNum.setStatus('current')
hpnicfDhcpServer2RequestNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2RequestNum.setStatus('current')
hpnicfDhcpServer2DeclineNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2DeclineNum.setStatus('current')
hpnicfDhcpServer2ReleaseNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2ReleaseNum.setStatus('current')
hpnicfDhcpServer2InformNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2InformNum.setStatus('current')
hpnicfDhcpServer2BootpReplyNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2BootpReplyNum.setStatus('current')
hpnicfDhcpServer2OfferNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2OfferNum.setStatus('current')
hpnicfDhcpServer2AckNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2AckNum.setStatus('current')
hpnicfDhcpServer2NakNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2NakNum.setStatus('current')
hpnicfDhcpServer2TotalPoolUsage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2TotalPoolUsage.setStatus('current')
hpnicfDhcpServer2PoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolNumber.setStatus('current')
hpnicfDhcpServer2ConflictNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2ConflictNum.setStatus('current')
hpnicfDhcpServer2AutoBindNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2AutoBindNum.setStatus('current')
hpnicfDhcpServer2ManualBindNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2ManualBindNum.setStatus('current')
hpnicfDhcpServer2ExpiredBindNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 1, 2, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2ExpiredBindNum.setStatus('current')
hpnicfDhcpServer2Tables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2))
hpnicfDhcpServer2PoolTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1), )
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolTable.setStatus('current')
hpnicfDhcpServer2PoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolEntry.setStatus('current')
hpnicfDhcpServer2PoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolIndex.setStatus('current')
hpnicfDhcpServer2PoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolName.setStatus('current')
hpnicfDhcpServer2PoolVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolVpnName.setStatus('current')
hpnicfDhcpServer2PoolNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 4), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolNetwork.setStatus('current')
hpnicfDhcpServer2PoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 5), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolNetworkMask.setStatus('current')
hpnicfDhcpServer2PoolStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 6), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStartAddr.setStatus('current')
hpnicfDhcpServer2PoolEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 7), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolEndAddr.setStatus('current')
hpnicfDhcpServer2PoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolLeaseDay.setStatus('current')
hpnicfDhcpServer2PoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolLeaseHour.setStatus('current')
hpnicfDhcpServer2PoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolLeaseMinute.setStatus('current')
hpnicfDhcpServer2PoolLeaseSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolLeaseSecond.setStatus('current')
hpnicfDhcpServer2PoolLeaseUnlimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolLeaseUnlimit.setStatus('current')
hpnicfDhcpServer2PoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 13), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolLeaseTime.setStatus('current')
hpnicfDhcpServer2PoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolDomainName.setStatus('current')
hpnicfDhcpServer2PoolGatewayIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolGatewayIP.setStatus('current')
hpnicfDhcpServer2PoolDNSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolDNSIP.setStatus('current')
hpnicfDhcpServer2PoolPrimaryDNSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 17), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolPrimaryDNSIP.setStatus('current')
hpnicfDhcpServer2PoolSecondDNSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 18), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolSecondDNSIP.setStatus('current')
hpnicfDhcpServer2PoolNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8))).clone('null')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolNetbiosType.setStatus('current')
hpnicfDhcpServer2PoolNbnsIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolNbnsIP.setStatus('current')
hpnicfDhcpServer2PoolBootFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolBootFileName.setStatus('current')
hpnicfDhcpServer2PoolBimsIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 22), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolBimsIP.setStatus('current')
hpnicfDhcpServer2PoolBimsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolBimsPort.setStatus('current')
hpnicfDhcpServer2PoolBimsKeyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolBimsKeyStr.setStatus('current')
hpnicfDhcpServer2PoolNextServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 25), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolNextServer.setStatus('current')
hpnicfDhcpServer2PoolTftpDomName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolTftpDomName.setStatus('current')
hpnicfDhcpServer2PoolTftpIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 27), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolTftpIP.setStatus('current')
hpnicfDhcpServer2PoolVoiceAsIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 28), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolVoiceAsIP.setStatus('current')
hpnicfDhcpServer2PoolVoiceFailIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 29), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolVoiceFailIP.setStatus('current')
hpnicfDhcpServer2PoolVoiceFailStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolVoiceFailStr.setStatus('current')
hpnicfDhcpServer2PoolVoiceNCPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 31), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolVoiceNCPIP.setStatus('current')
hpnicfDhcpServer2PoolVoiceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolVoiceVlanId.setStatus('current')
hpnicfDhcpServer2PoolVoiceVlanEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolVoiceVlanEnbl.setStatus('current')
hpnicfDhcpServer2PoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolRowStatus.setStatus('current')
hpnicfDhcpServer2PoolVerifyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 1, 1, 35), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolVerifyClass.setStatus('current')
hpnicfDhcpServer2IfApplyPoolTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 2), )
if mibBuilder.loadTexts: hpnicfDhcpServer2IfApplyPoolTable.setStatus('current')
hpnicfDhcpServer2IfApplyPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDhcpServer2IfApplyPoolEntry.setStatus('current')
hpnicfDhcpServer2IfApplyPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpServer2IfApplyPoolName.setStatus('current')
hpnicfDhcpServer2PoolSecNwTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 3), )
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolSecNwTable.setStatus('current')
hpnicfDhcpServer2PoolSecNwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolSecNw"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolSecNwMask"))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolSecNwEntry.setStatus('current')
hpnicfDhcpServer2PoolSecNw = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 3, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolSecNw.setStatus('current')
hpnicfDhcpServer2PoolSecNwMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 3, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolSecNwMask.setStatus('current')
hpnicfDhcpServer2PoolSecNwGwIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolSecNwGwIP.setStatus('current')
hpnicfDhcpServer2PoolSecNwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolSecNwStatus.setStatus('current')
hpnicfDhcpServer2PoolClassTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 4), )
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolClassTable.setStatus('current')
hpnicfDhcpServer2PoolClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolClassName"))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolClassEntry.setStatus('current')
hpnicfDhcpServer2PoolClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolClassName.setStatus('current')
hpnicfDhcpServer2PoolClassStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 4, 1, 2), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolClassStart.setStatus('current')
hpnicfDhcpServer2PoolClassEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 4, 1, 3), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolClassEnd.setStatus('current')
hpnicfDhcpServer2PoolClassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolClassStatus.setStatus('current')
hpnicfDhcpServer2PoolStaticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 5), )
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStaticTable.setStatus('current')
hpnicfDhcpServer2PoolStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolStaticIP"))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStaticEntry.setStatus('current')
hpnicfDhcpServer2PoolStaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 5, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStaticIP.setStatus('current')
hpnicfDhcpServer2PoolStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 5, 1, 2), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStaticMask.setStatus('current')
hpnicfDhcpServer2PoolStaticCID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 254), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStaticCID.setStatus('current')
hpnicfDhcpServer2PoolStaticHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 5, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 39), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStaticHAddr.setStatus('current')
hpnicfDhcpServer2PoolStaticHType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("ethernet", 2), ("tokenRing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStaticHType.setStatus('current')
hpnicfDhcpServer2PoolStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolStaticStatus.setStatus('current')
hpnicfDhcpServer2PoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 6), )
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolOptionTable.setStatus('current')
hpnicfDhcpServer2PoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolOptCode"))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolOptionEntry.setStatus('current')
hpnicfDhcpServer2PoolOptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolOptCode.setStatus('current')
hpnicfDhcpServer2PoolOptType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolOptType.setStatus('current')
hpnicfDhcpServer2PoolOptAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolOptAscii.setStatus('current')
hpnicfDhcpServer2PoolOptHexStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolOptHexStr.setStatus('current')
hpnicfDhcpServer2PoolOptIPStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolOptIPStr.setStatus('current')
hpnicfDhcpServer2PoolOptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolOptRowStatus.setStatus('current')
hpnicfDhcpServer2PoolForbidTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 7), )
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolForbidTable.setStatus('current')
hpnicfDhcpServer2PoolForbidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolForbidIP"))
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolForbidEntry.setStatus('current')
hpnicfDhcpServer2PoolForbidIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 7, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolForbidIP.setStatus('current')
hpnicfDhcpServer2PoolForbidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2PoolForbidStatus.setStatus('current')
hpnicfDhcpServer2ClassTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 8), )
if mibBuilder.loadTexts: hpnicfDhcpServer2ClassTable.setStatus('current')
hpnicfDhcpServer2ClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ClassName"))
if mibBuilder.loadTexts: hpnicfDhcpServer2ClassEntry.setStatus('current')
hpnicfDhcpServer2ClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: hpnicfDhcpServer2ClassName.setStatus('current')
hpnicfDhcpServer2ClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2ClassRowStatus.setStatus('current')
hpnicfDhcpServer2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9), )
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleTable.setStatus('current')
hpnicfDhcpServer2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ClassName"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2RuleNumber"))
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleEntry.setStatus('current')
hpnicfDhcpServer2RuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleNumber.setStatus('current')
hpnicfDhcpServer2RuleOptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleOptCode.setStatus('current')
hpnicfDhcpServer2RuleOptHexStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleOptHexStr.setStatus('current')
hpnicfDhcpServer2RuleOptMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleOptMask.setStatus('current')
hpnicfDhcpServer2RuleOptOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleOptOffset.setStatus('current')
hpnicfDhcpServer2RuleOptLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleOptLength.setStatus('current')
hpnicfDhcpServer2RuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 9, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleRowStatus.setStatus('current')
hpnicfDhcpServer2ForbidTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 10), )
if mibBuilder.loadTexts: hpnicfDhcpServer2ForbidTable.setStatus('current')
hpnicfDhcpServer2ForbidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 10, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ForbidVpnName"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ForbidStart"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ForbidEnd"))
if mibBuilder.loadTexts: hpnicfDhcpServer2ForbidEntry.setStatus('current')
hpnicfDhcpServer2ForbidVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hpnicfDhcpServer2ForbidVpnName.setStatus('current')
hpnicfDhcpServer2ForbidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 10, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2ForbidStart.setStatus('current')
hpnicfDhcpServer2ForbidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 10, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2ForbidEnd.setStatus('current')
hpnicfDhcpServer2ForbidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2ForbidRowStatus.setStatus('current')
hpnicfDhcpServer2FreeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 11), )
if mibBuilder.loadTexts: hpnicfDhcpServer2FreeTable.setStatus('current')
hpnicfDhcpServer2FreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 11, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2FreeStart"))
if mibBuilder.loadTexts: hpnicfDhcpServer2FreeEntry.setStatus('current')
hpnicfDhcpServer2FreeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 11, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2FreeStart.setStatus('current')
hpnicfDhcpServer2FreeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 11, 1, 2), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2FreeEnd.setStatus('current')
hpnicfDhcpServer2ConflictTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 12), )
if mibBuilder.loadTexts: hpnicfDhcpServer2ConflictTable.setStatus('current')
hpnicfDhcpServer2ConflictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 12, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ConflictIP"))
if mibBuilder.loadTexts: hpnicfDhcpServer2ConflictEntry.setStatus('current')
hpnicfDhcpServer2ConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 12, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2ConflictIP.setStatus('current')
hpnicfDhcpServer2ConflictType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detectByServer", 1), ("detectByClient", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2ConflictType.setStatus('current')
hpnicfDhcpServer2ConflictTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2ConflictTime.setStatus('current')
hpnicfDhcpServer2ConflictRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2ConflictRowStatus.setStatus('current')
hpnicfDhcpServer2ExpiredTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 13), )
if mibBuilder.loadTexts: hpnicfDhcpServer2ExpiredTable.setStatus('current')
hpnicfDhcpServer2ExpiredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 13, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ExpiredIP"))
if mibBuilder.loadTexts: hpnicfDhcpServer2ExpiredEntry.setStatus('current')
hpnicfDhcpServer2ExpiredIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 13, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2ExpiredIP.setStatus('current')
hpnicfDhcpServer2ExpiredClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2ExpiredClientId.setStatus('current')
hpnicfDhcpServer2ExpiredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2ExpiredTime.setStatus('current')
hpnicfDhcpServer2ExpiredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2ExpiredRowStatus.setStatus('current')
hpnicfDhcpServer2IPInUseTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14), )
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseTable.setStatus('current')
hpnicfDhcpServer2IPInUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2IPInUseIP"))
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseEntry.setStatus('current')
hpnicfDhcpServer2IPInUseIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseIP.setStatus('current')
hpnicfDhcpServer2IPInUseClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 254), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseClientId.setStatus('current')
hpnicfDhcpServer2IPInUseHardAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 39), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseHardAddr.setStatus('current')
hpnicfDhcpServer2IPInUseHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("ethernet", 2), ("tokenRing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseHardType.setStatus('current')
hpnicfDhcpServer2IPInUseVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseVlanId.setStatus('current')
hpnicfDhcpServer2IPInUseEndLease = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseEndLease.setStatus('current')
hpnicfDhcpServer2IPInUseType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("staticUnallocated", 1), ("staticOffered", 2), ("staticCommitted", 3), ("autoOffered", 4), ("autoCommitted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseType.setStatus('current')
hpnicfDhcpServer2IPInUseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseIfIndex.setStatus('current')
hpnicfDhcpServer2IPInUseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 14, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2IPInUseRowStatus.setStatus('current')
hpnicfDhcpServer2DefOptGrpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 15), )
if mibBuilder.loadTexts: hpnicfDhcpServer2DefOptGrpTable.setStatus('current')
hpnicfDhcpServer2DefOptGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 15, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2DefOptGrpClass"))
if mibBuilder.loadTexts: hpnicfDhcpServer2DefOptGrpEntry.setStatus('current')
hpnicfDhcpServer2DefOptGrpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: hpnicfDhcpServer2DefOptGrpClass.setStatus('current')
hpnicfDhcpServer2DefOptGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2DefOptGrpId.setStatus('current')
hpnicfDhcpServer2DefOptGrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2DefOptGrpStatus.setStatus('current')
hpnicfDhcpServer2ValidClassTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 16), )
if mibBuilder.loadTexts: hpnicfDhcpServer2ValidClassTable.setStatus('current')
hpnicfDhcpServer2ValidClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 16, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2PoolIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ValidClassName"))
if mibBuilder.loadTexts: hpnicfDhcpServer2ValidClassEntry.setStatus('current')
hpnicfDhcpServer2ValidClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: hpnicfDhcpServer2ValidClassName.setStatus('current')
hpnicfDhcpServer2ValidClassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2ValidClassStatus.setStatus('current')
hpnicfDhcpServer2RuleHwAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 17), )
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleHwAddrTable.setStatus('current')
hpnicfDhcpServer2RuleHwAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 17, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2ClassName"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2RuleHwAddrNumber"))
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleHwAddrEntry.setStatus('current')
hpnicfDhcpServer2RuleHwAddrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleHwAddrNumber.setStatus('current')
hpnicfDhcpServer2RuleHwAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleHwAddress.setStatus('current')
hpnicfDhcpServer2RuleHwAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleHwAddrMask.setStatus('current')
hpnicfDhcpServer2RuleHwAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleHwAddrType.setStatus('current')
hpnicfDhcpServer2RuleHwAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 17, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2RuleHwAddrStatus.setStatus('current')
hpnicfDhcpServer2OptionGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 18), )
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionGroupTable.setStatus('current')
hpnicfDhcpServer2OptionGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 18, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2OptionGroupId"))
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionGroupEntry.setStatus('current')
hpnicfDhcpServer2OptionGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)))
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionGroupId.setStatus('current')
hpnicfDhcpServer2OptionGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionGroupStatus.setStatus('current')
hpnicfDhcpServer2OptionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 19), )
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionTable.setStatus('current')
hpnicfDhcpServer2OptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 19, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2OptionGroupId"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpServer2OptionCode"))
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionEntry.setStatus('current')
hpnicfDhcpServer2OptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)))
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionCode.setStatus('current')
hpnicfDhcpServer2OptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionType.setStatus('current')
hpnicfDhcpServer2OptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 19, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionAscii.setStatus('current')
hpnicfDhcpServer2OptionHexStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 19, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionHexStr.setStatus('current')
hpnicfDhcpServer2OptionIPStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 19, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionIPStr.setStatus('current')
hpnicfDhcpServer2OptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 2, 19, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpServer2OptionRowStatus.setStatus('current')
hpnicfDhcpRelay2ScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3))
hpnicfDhcpRelay2ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 1))
hpnicfDhcpRelay2UserInfoRecord = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoRecord.setStatus('current')
hpnicfDhcpRelay2UserInfoRefresh = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoRefresh.setStatus('current')
hpnicfDhcpRelay2UserInfoFlushTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoFlushTime.setStatus('current')
hpnicfDhcpRelay2ReleaseAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2ReleaseAddr.setStatus('current')
hpnicfDhcpRelay2StatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2))
hpnicfDhcpRelay2RxClientNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2RxClientNum.setStatus('current')
hpnicfDhcpRelay2TxClientNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2TxClientNum.setStatus('current')
hpnicfDhcpRelay2RxServerNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2RxServerNum.setStatus('current')
hpnicfDhcpRelay2TxServerNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2TxServerNum.setStatus('current')
hpnicfDhcpRelay2BadNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2BadNum.setStatus('current')
hpnicfDhcpRelay2BootpRequestNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2BootpRequestNum.setStatus('current')
hpnicfDhcpRelay2DiscoverNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2DiscoverNum.setStatus('current')
hpnicfDhcpRelay2RequestNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2RequestNum.setStatus('current')
hpnicfDhcpRelay2DeclineNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2DeclineNum.setStatus('current')
hpnicfDhcpRelay2ReleaseNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2ReleaseNum.setStatus('current')
hpnicfDhcpRelay2InformNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2InformNum.setStatus('current')
hpnicfDhcpRelay2BootpReplyNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2BootpReplyNum.setStatus('current')
hpnicfDhcpRelay2OfferNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2OfferNum.setStatus('current')
hpnicfDhcpRelay2AckNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2AckNum.setStatus('current')
hpnicfDhcpRelay2NakNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 3, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2NakNum.setStatus('current')
hpnicfDhcpRelay2Tables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4))
hpnicfDhcpRelay2IfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1), )
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfConfigTable.setStatus('current')
hpnicfDhcpRelay2IfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfConfigEntry.setStatus('current')
hpnicfDhcpRelay2IfSelectRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfSelectRelay.setStatus('current')
hpnicfDhcpRelay2IfCheckMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfCheckMac.setStatus('current')
hpnicfDhcpRelay2IfOpt82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82Enable.setStatus('current')
hpnicfDhcpRelay2IfOpt82Strategy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82Strategy.setStatus('current')
hpnicfDhcpRelay2IfOpt82CIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("verbose", 2), ("userDefine", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82CIDMode.setStatus('current')
hpnicfDhcpRelay2IfOpt82CIDNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("mac", 2), ("sysname", 3), ("userDefine", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82CIDNodeType.setStatus('current')
hpnicfDhcpRelay2IfOpt82CIDNodeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82CIDNodeStr.setStatus('current')
hpnicfDhcpRelay2IfOpt82CIDStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82CIDStr.setStatus('current')
hpnicfDhcpRelay2IfOpt82CIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2), ("undefine", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82CIDFormat.setStatus('current')
hpnicfDhcpRelay2IfOpt82RIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("sysname", 2), ("userDefine", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82RIDMode.setStatus('current')
hpnicfDhcpRelay2IfOpt82RIDStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82RIDStr.setStatus('current')
hpnicfDhcpRelay2IfOpt82RIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpRelay2IfOpt82RIDFormat.setStatus('current')
hpnicfDhcpRelay2SrvAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 2), )
if mibBuilder.loadTexts: hpnicfDhcpRelay2SrvAddrTable.setStatus('current')
hpnicfDhcpRelay2SrvAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpRelay2SrvAddrIP"))
if mibBuilder.loadTexts: hpnicfDhcpRelay2SrvAddrEntry.setStatus('current')
hpnicfDhcpRelay2SrvAddrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 2, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpRelay2SrvAddrIP.setStatus('current')
hpnicfDhcpRelay2SrvAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpRelay2SrvAddrRowStatus.setStatus('current')
hpnicfDhcpRelay2UserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 3), )
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoTable.setStatus('current')
hpnicfDhcpRelay2UserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 3, 1), ).setIndexNames((0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpRelay2UserInfoVpnIndex"), (0, "HPN-ICF-DHCP4-MIB", "hpnicfDhcpRelay2UserInfoIpAddr"))
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoEntry.setStatus('current')
hpnicfDhcpRelay2UserInfoVpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoVpnIndex.setStatus('current')
hpnicfDhcpRelay2UserInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 3, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoIpAddr.setStatus('current')
hpnicfDhcpRelay2UserInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoMacAddr.setStatus('current')
hpnicfDhcpRelay2UserInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoIfIndex.setStatus('current')
hpnicfDhcpRelay2UserInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 122, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpRelay2UserInfoRowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-DHCP4-MIB", hpnicfDhcpServer2DeclineNum=hpnicfDhcpServer2DeclineNum, hpnicfDhcpRelay2ReleaseNum=hpnicfDhcpRelay2ReleaseNum, hpnicfDhcpRelay2DiscoverNum=hpnicfDhcpRelay2DiscoverNum, hpnicfDhcpServer2PoolForbidTable=hpnicfDhcpServer2PoolForbidTable, hpnicfDhcpServer2PoolSecNwTable=hpnicfDhcpServer2PoolSecNwTable, hpnicfDhcpServer2IPInUseEndLease=hpnicfDhcpServer2IPInUseEndLease, hpnicfDhcpRelay2RxServerNum=hpnicfDhcpRelay2RxServerNum, hpnicfDhcpRelay2IfOpt82CIDStr=hpnicfDhcpRelay2IfOpt82CIDStr, hpnicfDhcpRelay2Tables=hpnicfDhcpRelay2Tables, hpnicfDhcpRelay2OfferNum=hpnicfDhcpRelay2OfferNum, hpnicfDhcpServer2OptionCode=hpnicfDhcpServer2OptionCode, hpnicfDhcpServer2PoolOptionEntry=hpnicfDhcpServer2PoolOptionEntry, hpnicfDhcpServer2IPInUseType=hpnicfDhcpServer2IPInUseType, hpnicfDhcpRelay2SrvAddrEntry=hpnicfDhcpRelay2SrvAddrEntry, hpnicfDhcpServer2ForbidEntry=hpnicfDhcpServer2ForbidEntry, hpnicfDhcpServer2ScalarObjects=hpnicfDhcpServer2ScalarObjects, hpnicfDhcpServer2PoolDomainName=hpnicfDhcpServer2PoolDomainName, hpnicfDhcpServer2ConflictTime=hpnicfDhcpServer2ConflictTime, hpnicfDhcpServer2PoolStaticCID=hpnicfDhcpServer2PoolStaticCID, hpnicfDhcpServer2OptionGroupStatus=hpnicfDhcpServer2OptionGroupStatus, hpnicfDhcpServer2PoolSecNwMask=hpnicfDhcpServer2PoolSecNwMask, hpnicfDhcpServer2OptionType=hpnicfDhcpServer2OptionType, hpnicfDhcpServer2RuleOptOffset=hpnicfDhcpServer2RuleOptOffset, hpnicfDhcpRelay2DeclineNum=hpnicfDhcpRelay2DeclineNum, hpnicfDhcpServer2OfferNum=hpnicfDhcpServer2OfferNum, hpnicfDhcpRelay2SrvAddrIP=hpnicfDhcpRelay2SrvAddrIP, hpnicfDhcpServer2PoolIndex=hpnicfDhcpServer2PoolIndex, hpnicfDhcpRelay2RequestNum=hpnicfDhcpRelay2RequestNum, hpnicfDhcpServer2PoolLeaseTime=hpnicfDhcpServer2PoolLeaseTime, hpnicfDhcpServer2DefOptGrpId=hpnicfDhcpServer2DefOptGrpId, hpnicfDhcpRelay2IfOpt82CIDNodeStr=hpnicfDhcpRelay2IfOpt82CIDNodeStr, hpnicfDhcpServer2ConflictRowStatus=hpnicfDhcpServer2ConflictRowStatus, hpnicfDhcpRelay2AckNum=hpnicfDhcpRelay2AckNum, hpnicfDhcpServer2ValidClassStatus=hpnicfDhcpServer2ValidClassStatus, hpnicfDhcpRelay2NakNum=hpnicfDhcpRelay2NakNum, hpnicfDhcpServer2OptionAscii=hpnicfDhcpServer2OptionAscii, hpnicfDhcpServer2ConflictEntry=hpnicfDhcpServer2ConflictEntry, hpnicfDhcpServer2ConflictType=hpnicfDhcpServer2ConflictType, hpnicfDhcpRelay2IfOpt82RIDMode=hpnicfDhcpRelay2IfOpt82RIDMode, hpnicfDhcpServer2IfApplyPoolTable=hpnicfDhcpServer2IfApplyPoolTable, hpnicfDhcpServer2ExpiredClientId=hpnicfDhcpServer2ExpiredClientId, hpnicfDhcpServer2ExpiredBindNum=hpnicfDhcpServer2ExpiredBindNum, hpnicfDhcpServer2PoolSecondDNSIP=hpnicfDhcpServer2PoolSecondDNSIP, hpnicfDhcpServer2RequestNum=hpnicfDhcpServer2RequestNum, hpnicfDhcpServer2IPInUseEntry=hpnicfDhcpServer2IPInUseEntry, hpnicfDhcpServer2RuleHwAddrMask=hpnicfDhcpServer2RuleHwAddrMask, hpnicfDhcpServer2DefOptGrpStatus=hpnicfDhcpServer2DefOptGrpStatus, hpnicfDhcpServer2ForbidEnd=hpnicfDhcpServer2ForbidEnd, hpnicfDhcpServer2RuleHwAddrTable=hpnicfDhcpServer2RuleHwAddrTable, hpnicfDhcpServer2PoolVoiceNCPIP=hpnicfDhcpServer2PoolVoiceNCPIP, hpnicfDhcpServer2PoolNextServer=hpnicfDhcpServer2PoolNextServer, hpnicfDhcpRelay2UserInfoIfIndex=hpnicfDhcpRelay2UserInfoIfIndex, hpnicfDhcpServer2IPInUseHardAddr=hpnicfDhcpServer2IPInUseHardAddr, hpnicfDhcpServer2ConflictIP=hpnicfDhcpServer2ConflictIP, hpnicfDhcpServer2ValidClassTable=hpnicfDhcpServer2ValidClassTable, hpnicfDhcpServer2OptionGroupId=hpnicfDhcpServer2OptionGroupId, hpnicfDhcpServer2PoolVoiceAsIP=hpnicfDhcpServer2PoolVoiceAsIP, hpnicfDhcpServer2PoolNetbiosType=hpnicfDhcpServer2PoolNetbiosType, hpnicfDhcpServer2OptionEntry=hpnicfDhcpServer2OptionEntry, hpnicfDhcpServer2RuleRowStatus=hpnicfDhcpServer2RuleRowStatus, hpnicfDhcpServer2PoolStaticIP=hpnicfDhcpServer2PoolStaticIP, hpnicfDhcpServer2RuleHwAddrNumber=hpnicfDhcpServer2RuleHwAddrNumber, hpnicfDhcpServer2PoolOptHexStr=hpnicfDhcpServer2PoolOptHexStr, hpnicfDhcpServer2ReleaseNum=hpnicfDhcpServer2ReleaseNum, hpnicfDhcpServer2PoolName=hpnicfDhcpServer2PoolName, hpnicfDhcpServer2PoolBootFileName=hpnicfDhcpServer2PoolBootFileName, hpnicfDhcpServer2ClassRowStatus=hpnicfDhcpServer2ClassRowStatus, hpnicfDhcpRelay2UserInfoIpAddr=hpnicfDhcpRelay2UserInfoIpAddr, hpnicfDhcpServer2BootpReplyNum=hpnicfDhcpServer2BootpReplyNum, hpnicfDhcpRelay2UserInfoEntry=hpnicfDhcpRelay2UserInfoEntry, hpnicfDhcpServer2ForbidVpnName=hpnicfDhcpServer2ForbidVpnName, hpnicfDhcpServer2PoolTftpDomName=hpnicfDhcpServer2PoolTftpDomName, hpnicfDhcp4=hpnicfDhcp4, hpnicfDhcpRelay2IfCheckMac=hpnicfDhcpRelay2IfCheckMac, hpnicfDhcpServer2RuleHwAddrStatus=hpnicfDhcpServer2RuleHwAddrStatus, hpnicfDhcpServer2PoolStaticMask=hpnicfDhcpServer2PoolStaticMask, hpnicfDhcpServer2FreeTable=hpnicfDhcpServer2FreeTable, hpnicfDhcpServer2ExpiredIP=hpnicfDhcpServer2ExpiredIP, hpnicfDhcpRelay2BootpReplyNum=hpnicfDhcpRelay2BootpReplyNum, hpnicfDhcpRelay2IfOpt82CIDNodeType=hpnicfDhcpRelay2IfOpt82CIDNodeType, hpnicfDhcpRelay2UserInfoVpnIndex=hpnicfDhcpRelay2UserInfoVpnIndex, hpnicfDhcpServer2DefOptGrpClass=hpnicfDhcpServer2DefOptGrpClass, hpnicfDhcpServer2IPInUseVlanId=hpnicfDhcpServer2IPInUseVlanId, hpnicfDhcpServer2PoolBimsIP=hpnicfDhcpServer2PoolBimsIP, hpnicfDhcpServer2RuleNumber=hpnicfDhcpServer2RuleNumber, hpnicfDhcpServer2Opt82Enabled=hpnicfDhcpServer2Opt82Enabled, hpnicfDhcpServer2PingNumber=hpnicfDhcpServer2PingNumber, hpnicfDhcpServer2PoolForbidEntry=hpnicfDhcpServer2PoolForbidEntry, hpnicfDhcpServer2PoolBimsPort=hpnicfDhcpServer2PoolBimsPort, hpnicfDhcpServer2PoolOptIPStr=hpnicfDhcpServer2PoolOptIPStr, hpnicfDhcpRelay2UserInfoMacAddr=hpnicfDhcpRelay2UserInfoMacAddr, hpnicfDhcpServer2RuleOptMask=hpnicfDhcpServer2RuleOptMask, hpnicfDhcpServer2RuleOptHexStr=hpnicfDhcpServer2RuleOptHexStr, hpnicfDhcpRelay2TxClientNum=hpnicfDhcpRelay2TxClientNum, hpnicfDhcpServer2PoolVoiceFailIP=hpnicfDhcpServer2PoolVoiceFailIP, hpnicfDhcpServer2IPInUseClientId=hpnicfDhcpServer2IPInUseClientId, hpnicfDhcpServer2PoolVoiceFailStr=hpnicfDhcpServer2PoolVoiceFailStr, hpnicfDhcpServer2PoolBimsKeyStr=hpnicfDhcpServer2PoolBimsKeyStr, hpnicfDhcpServer2OptionTable=hpnicfDhcpServer2OptionTable, hpnicfDhcpServer2ValidClassName=hpnicfDhcpServer2ValidClassName, hpnicfDhcpServer2ConfigGroup=hpnicfDhcpServer2ConfigGroup, hpnicfDhcpServer2PoolSecNw=hpnicfDhcpServer2PoolSecNw, hpnicfDhcpServer2PoolVoiceVlanEnbl=hpnicfDhcpServer2PoolVoiceVlanEnbl, hpnicfDhcpServer2PoolLeaseMinute=hpnicfDhcpServer2PoolLeaseMinute, hpnicfDhcpServer2PoolRowStatus=hpnicfDhcpServer2PoolRowStatus, hpnicfDhcpServer2StatGroup=hpnicfDhcpServer2StatGroup, hpnicfDhcpServer2OptionGroupEntry=hpnicfDhcpServer2OptionGroupEntry, hpnicfDhcpServer2RuleHwAddrType=hpnicfDhcpServer2RuleHwAddrType, hpnicfDhcpServer2PoolStartAddr=hpnicfDhcpServer2PoolStartAddr, hpnicfDhcpServer2PoolGatewayIP=hpnicfDhcpServer2PoolGatewayIP, hpnicfDhcpServer2PoolClassTable=hpnicfDhcpServer2PoolClassTable, hpnicfDhcpServer2PoolForbidStatus=hpnicfDhcpServer2PoolForbidStatus, hpnicfDhcpRelay2IfConfigEntry=hpnicfDhcpRelay2IfConfigEntry, hpnicfDhcpServer2PoolForbidIP=hpnicfDhcpServer2PoolForbidIP, hpnicfDhcpServer2PoolNetwork=hpnicfDhcpServer2PoolNetwork, hpnicfDhcpServer2ForbidTable=hpnicfDhcpServer2ForbidTable, hpnicfDhcpRelay2UserInfoRecord=hpnicfDhcpRelay2UserInfoRecord, hpnicfDhcpRelay2SrvAddrRowStatus=hpnicfDhcpRelay2SrvAddrRowStatus, hpnicfDhcpServer2Enabled=hpnicfDhcpServer2Enabled, hpnicfDhcpServer2PoolOptCode=hpnicfDhcpServer2PoolOptCode, hpnicfDhcpServer2BootpReplyRfc1048=hpnicfDhcpServer2BootpReplyRfc1048, hpnicfDhcpServer2DefOptGrpEntry=hpnicfDhcpServer2DefOptGrpEntry, hpnicfDhcpRelay2TxServerNum=hpnicfDhcpRelay2TxServerNum, hpnicfDhcpServer2RuleTable=hpnicfDhcpServer2RuleTable, hpnicfDhcpServer2PoolNbnsIP=hpnicfDhcpServer2PoolNbnsIP, hpnicfDhcpRelay2IfOpt82RIDStr=hpnicfDhcpRelay2IfOpt82RIDStr, hpnicfDhcpServer2PoolVpnName=hpnicfDhcpServer2PoolVpnName, hpnicfDhcpServer2IgnoreBootp=hpnicfDhcpServer2IgnoreBootp, hpnicfDhcpServer2ManualBindNum=hpnicfDhcpServer2ManualBindNum, hpnicfDhcpServer2PoolOptRowStatus=hpnicfDhcpServer2PoolOptRowStatus, hpnicfDhcpServer2PoolVerifyClass=hpnicfDhcpServer2PoolVerifyClass, hpnicfDhcpServer2ForbidRowStatus=hpnicfDhcpServer2ForbidRowStatus, hpnicfDhcpRelay2UserInfoRefresh=hpnicfDhcpRelay2UserInfoRefresh, hpnicfDhcpServer2PoolStaticTable=hpnicfDhcpServer2PoolStaticTable, hpnicfDhcpServer2ClassEntry=hpnicfDhcpServer2ClassEntry, hpnicfDhcpRelay2ReleaseAddr=hpnicfDhcpRelay2ReleaseAddr, hpnicfDhcpServer2RuleHwAddrEntry=hpnicfDhcpServer2RuleHwAddrEntry, hpnicfDhcpServer2OptionHexStr=hpnicfDhcpServer2OptionHexStr, hpnicfDhcpRelay2ConfigGroup=hpnicfDhcpRelay2ConfigGroup, PYSNMP_MODULE_ID=hpnicfDhcp4, hpnicfDhcpServer2PoolClassStatus=hpnicfDhcpServer2PoolClassStatus, hpnicfDhcpRelay2IfOpt82Strategy=hpnicfDhcpRelay2IfOpt82Strategy, hpnicfDhcpRelay2IfOpt82CIDFormat=hpnicfDhcpRelay2IfOpt82CIDFormat, hpnicfDhcpServer2IPInUseRowStatus=hpnicfDhcpServer2IPInUseRowStatus, hpnicfDhcpRelay2ScalarObjects=hpnicfDhcpRelay2ScalarObjects, hpnicfDhcpServer2PoolStaticEntry=hpnicfDhcpServer2PoolStaticEntry, hpnicfDhcpServer2RuleHwAddress=hpnicfDhcpServer2RuleHwAddress, hpnicfDhcpServer2AlwaysBroadcast=hpnicfDhcpServer2AlwaysBroadcast, hpnicfDhcpServer2FreeEntry=hpnicfDhcpServer2FreeEntry, hpnicfDhcpServer2PoolSecNwStatus=hpnicfDhcpServer2PoolSecNwStatus, hpnicfDhcpRelay2UserInfoTable=hpnicfDhcpRelay2UserInfoTable, hpnicfDhcpServer2InformNum=hpnicfDhcpServer2InformNum, hpnicfDhcpServer2PoolOptType=hpnicfDhcpServer2PoolOptType, hpnicfDhcpRelay2InformNum=hpnicfDhcpRelay2InformNum, hpnicfDhcpServer2BootpRequestNum=hpnicfDhcpServer2BootpRequestNum, hpnicfDhcpServer2PoolStaticHAddr=hpnicfDhcpServer2PoolStaticHAddr, hpnicfDhcpServer2IPInUseIP=hpnicfDhcpServer2IPInUseIP, hpnicfDhcpServer2IPInUseHardType=hpnicfDhcpServer2IPInUseHardType, hpnicfDhcpServer2PoolEndAddr=hpnicfDhcpServer2PoolEndAddr, hpnicfDhcpServer2PoolOptAscii=hpnicfDhcpServer2PoolOptAscii, hpnicfDhcpServer2ConflictNum=hpnicfDhcpServer2ConflictNum, hpnicfDhcpServer2PoolLeaseHour=hpnicfDhcpServer2PoolLeaseHour, hpnicfDhcpServer2ExpiredTime=hpnicfDhcpServer2ExpiredTime, hpnicfDhcpServer2DefOptGrpTable=hpnicfDhcpServer2DefOptGrpTable, hpnicfDhcpServer2ConflictTable=hpnicfDhcpServer2ConflictTable, hpnicfDhcpServer2PoolClassName=hpnicfDhcpServer2PoolClassName, hpnicfDhcpRelay2IfConfigTable=hpnicfDhcpRelay2IfConfigTable, hpnicfDhcpRelay2IfSelectRelay=hpnicfDhcpRelay2IfSelectRelay, hpnicfDhcpRelay2SrvAddrTable=hpnicfDhcpRelay2SrvAddrTable, hpnicfDhcpServer2PoolStaticHType=hpnicfDhcpServer2PoolStaticHType, hpnicfDhcpServer2IfApplyPoolEntry=hpnicfDhcpServer2IfApplyPoolEntry, hpnicfDhcpServer2OptionRowStatus=hpnicfDhcpServer2OptionRowStatus, hpnicfDhcpRelay2StatisticsGroup=hpnicfDhcpRelay2StatisticsGroup, hpnicfDhcpServer2PoolEntry=hpnicfDhcpServer2PoolEntry, hpnicfDhcpServer2PoolTftpIP=hpnicfDhcpServer2PoolTftpIP, hpnicfDhcpServer2ExpiredEntry=hpnicfDhcpServer2ExpiredEntry, hpnicfDhcpServer2PoolOptionTable=hpnicfDhcpServer2PoolOptionTable, hpnicfDhcpServer2PoolClassEntry=hpnicfDhcpServer2PoolClassEntry, hpnicfDhcpServer2OptionGroupTable=hpnicfDhcpServer2OptionGroupTable, hpnicfDhcpServer2TotalPoolUsage=hpnicfDhcpServer2TotalPoolUsage, hpnicfDhcpServer2PoolNumber=hpnicfDhcpServer2PoolNumber, hpnicfDhcpRelay2IfOpt82CIDMode=hpnicfDhcpRelay2IfOpt82CIDMode, hpnicfDhcpServer2IfApplyPoolName=hpnicfDhcpServer2IfApplyPoolName, hpnicfDhcpServer2NakNum=hpnicfDhcpServer2NakNum, hpnicfDhcpServer2PoolStaticStatus=hpnicfDhcpServer2PoolStaticStatus, hpnicfDhcpServer2Tables=hpnicfDhcpServer2Tables, hpnicfDhcpServer2PoolLeaseDay=hpnicfDhcpServer2PoolLeaseDay, hpnicfDhcpServer2ValidClassEntry=hpnicfDhcpServer2ValidClassEntry, hpnicfDhcpServer2PoolTable=hpnicfDhcpServer2PoolTable, hpnicfDhcpRelay2RxClientNum=hpnicfDhcpRelay2RxClientNum, hpnicfDhcpServer2PoolSecNwEntry=hpnicfDhcpServer2PoolSecNwEntry, hpnicfDhcpServer2FreeEnd=hpnicfDhcpServer2FreeEnd, hpnicfDhcpServer2PingTimeout=hpnicfDhcpServer2PingTimeout, hpnicfDhcpServer2ExpiredRowStatus=hpnicfDhcpServer2ExpiredRowStatus, hpnicfDhcpServer2ExpiredTable=hpnicfDhcpServer2ExpiredTable, hpnicfDhcpServer2PoolLeaseUnlimit=hpnicfDhcpServer2PoolLeaseUnlimit, hpnicfDhcpServer2PoolClassStart=hpnicfDhcpServer2PoolClassStart, hpnicfDhcpServer2AckNum=hpnicfDhcpServer2AckNum, hpnicfDhcpServer2PoolClassEnd=hpnicfDhcpServer2PoolClassEnd, hpnicfDhcpRelay2UserInfoFlushTime=hpnicfDhcpRelay2UserInfoFlushTime, hpnicfDhcpRelay2IfOpt82Enable=hpnicfDhcpRelay2IfOpt82Enable, hpnicfDhcpServer2IPInUseTable=hpnicfDhcpServer2IPInUseTable, hpnicfDhcpServer2PoolSecNwGwIP=hpnicfDhcpServer2PoolSecNwGwIP, hpnicfDhcpServer2PoolLeaseSecond=hpnicfDhcpServer2PoolLeaseSecond, hpnicfDhcpServer2PoolVoiceVlanId=hpnicfDhcpServer2PoolVoiceVlanId, hpnicfDhcpServer2FreeStart=hpnicfDhcpServer2FreeStart, hpnicfDhcpServer2OptionIPStr=hpnicfDhcpServer2OptionIPStr, hpnicfDhcpServer2RuleEntry=hpnicfDhcpServer2RuleEntry, hpnicfDhcpServer2PoolNetworkMask=hpnicfDhcpServer2PoolNetworkMask, hpnicfDhcpServer2DiscoverNum=hpnicfDhcpServer2DiscoverNum, hpnicfDhcpServer2RuleOptCode=hpnicfDhcpServer2RuleOptCode, hpnicfDhcpServer2PoolDNSIP=hpnicfDhcpServer2PoolDNSIP, hpnicfDhcpServer2AutoBindNum=hpnicfDhcpServer2AutoBindNum, hpnicfDhcpRelay2UserInfoRowStatus=hpnicfDhcpRelay2UserInfoRowStatus, hpnicfDhcpServer2ForbidStart=hpnicfDhcpServer2ForbidStart, hpnicfDhcpServer2IPInUseIfIndex=hpnicfDhcpServer2IPInUseIfIndex, hpnicfDhcpServer2ClassTable=hpnicfDhcpServer2ClassTable, hpnicfDhcpServer2ClassName=hpnicfDhcpServer2ClassName, hpnicfDhcpServer2RuleOptLength=hpnicfDhcpServer2RuleOptLength, hpnicfDhcpRelay2BootpRequestNum=hpnicfDhcpRelay2BootpRequestNum, hpnicfDhcpRelay2IfOpt82RIDFormat=hpnicfDhcpRelay2IfOpt82RIDFormat, hpnicfDhcpServer2PoolPrimaryDNSIP=hpnicfDhcpServer2PoolPrimaryDNSIP, hpnicfDhcpRelay2BadNum=hpnicfDhcpRelay2BadNum, hpnicfDhcpServer2BadNum=hpnicfDhcpServer2BadNum)
