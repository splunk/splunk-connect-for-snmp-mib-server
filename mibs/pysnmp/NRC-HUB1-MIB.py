#
# PySNMP MIB module NRC-HUB1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NRC-HUB1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, Gauge32, ObjectIdentity, Counter32, ModuleIdentity, Bits, Unsigned32, iso, NotificationType, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter32", "ModuleIdentity", "Bits", "Unsigned32", "iso", "NotificationType", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
nrc = MibIdentifier((1, 3, 6, 1, 4, 1, 315))
hub1 = MibIdentifier((1, 3, 6, 1, 4, 1, 315, 1))
hub1AutoPartition = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1AutoPartition.setStatus('mandatory')
hub1ReconnectOnTransmission = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ReconnectOnTransmission.setStatus('mandatory')
hub1IncludeOutOfWinColl = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1IncludeOutOfWinColl.setStatus('mandatory')
hub1LoopbackPartition = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1LoopbackPartition.setStatus('mandatory')
hub1CollisionLimit = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31, 63))).clone(namedValues=NamedValues(("low", 31), ("high", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1CollisionLimit.setStatus('mandatory')
hub1CarrierRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5))).clone(namedValues=NamedValues(("short", 3), ("long", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1CarrierRecoverTime.setStatus('mandatory')
hub1EventCounterFlags = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1EventCounterFlags.setStatus('mandatory')
hub1EventRecordFlags = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1EventRecordFlags.setStatus('mandatory')
hub1BridgingMode = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridging", 1), ("bypass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1BridgingMode.setStatus('mandatory')
hub1ProtocolFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("filter", 2), ("pass", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ProtocolFilterMode.setStatus('mandatory')
hub1FilterProtocols = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1FilterProtocols.setStatus('mandatory')
hub1ConsoleBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ConsoleBaudRate.setStatus('mandatory')
hub1Reset = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1Reset.setStatus('mandatory')
hub1SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1SoftwareVersion.setStatus('mandatory')
hub1PortTable = MibTable((1, 3, 6, 1, 4, 1, 315, 1, 15), )
if mibBuilder.loadTexts: hub1PortTable.setStatus('mandatory')
hub1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 315, 1, 15, 1), ).setIndexNames((0, "NRC-HUB1-MIB", "hub1PortIndex"))
if mibBuilder.loadTexts: hub1PortEntry.setStatus('mandatory')
hub1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortIndex.setStatus('mandatory')
hub1PortForceReconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("force-reconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortForceReconnect.setStatus('mandatory')
hub1PortPartitionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-partitioned", 1), ("other", 2), ("consecutive-collision-limit", 3), ("excessive-len-of-collision-limit", 4), ("data-loopback-failure", 5), ("process-forced-reconnection", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortPartitionReason.setStatus('mandatory')
hub1PortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortLinkState.setStatus('mandatory')
hub1PortLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortLinkEnable.setStatus('mandatory')
hub1PortPolarityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("reversed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortPolarityStatus.setStatus('mandatory')
hub1PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortName.setStatus('mandatory')
hub1PortEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortEventCount.setStatus('mandatory')
hub1PortRecordValue = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortRecordValue.setStatus('mandatory')
hub1PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("twistedPair-10BaseT", 2), ("thinNet-10Base2", 3), ("fiber-FOIRL", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortType.setStatus('mandatory')
hub1IFTable = MibTable((1, 3, 6, 1, 4, 1, 315, 1, 16), )
if mibBuilder.loadTexts: hub1IFTable.setStatus('mandatory')
hub1IFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 315, 1, 16, 1), ).setIndexNames((0, "NRC-HUB1-MIB", "hub1IFIndex"))
if mibBuilder.loadTexts: hub1IFEntry.setStatus('mandatory')
hub1IFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFIndex.setStatus('mandatory')
hub1IFInAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInAlignmentErrors.setStatus('mandatory')
hub1IFInCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInCrcErrors.setStatus('mandatory')
hub1IFInCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInCollisions.setStatus('mandatory')
hub1IFInMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInMtuExceededDiscards.setStatus('mandatory')
hub1IFInShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInShortErrors.setStatus('mandatory')
hub1IFInOverrunDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInOverrunDiscards.setStatus('mandatory')
hub1IFOutUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutUnderruns.setStatus('mandatory')
hub1IFOutLostCts = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutLostCts.setStatus('mandatory')
hub1IFOutLostCrs = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutLostCrs.setStatus('mandatory')
hub1IFOutMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutMtuExceededDiscards.setStatus('mandatory')
hub1IFOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutCollisions.setStatus('mandatory')
hub1IFChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(90, 90)).setFixedLength(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFChannelUtilization.setStatus('mandatory')
hub1LastFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1LastFailureReason.setStatus('mandatory')
mibBuilder.exportSymbols("NRC-HUB1-MIB", hub1IFInShortErrors=hub1IFInShortErrors, hub1PortPartitionReason=hub1PortPartitionReason, hub1EventRecordFlags=hub1EventRecordFlags, hub1ProtocolFilterMode=hub1ProtocolFilterMode, hub1IncludeOutOfWinColl=hub1IncludeOutOfWinColl, hub1IFInAlignmentErrors=hub1IFInAlignmentErrors, hub1PortLinkEnable=hub1PortLinkEnable, hub1IFOutCollisions=hub1IFOutCollisions, hub1ConsoleBaudRate=hub1ConsoleBaudRate, hub1PortTable=hub1PortTable, hub1PortEntry=hub1PortEntry, hub1IFInCrcErrors=hub1IFInCrcErrors, hub1IFTable=hub1IFTable, hub1AutoPartition=hub1AutoPartition, hub1LastFailureReason=hub1LastFailureReason, hub1PortForceReconnect=hub1PortForceReconnect, hub1IFInMtuExceededDiscards=hub1IFInMtuExceededDiscards, hub1BridgingMode=hub1BridgingMode, hub1PortName=hub1PortName, hub1ReconnectOnTransmission=hub1ReconnectOnTransmission, hub1=hub1, enterprises=enterprises, hub1FilterProtocols=hub1FilterProtocols, hub1PortEventCount=hub1PortEventCount, hub1IFInOverrunDiscards=hub1IFInOverrunDiscards, hub1CollisionLimit=hub1CollisionLimit, hub1LoopbackPartition=hub1LoopbackPartition, hub1SoftwareVersion=hub1SoftwareVersion, hub1IFInCollisions=hub1IFInCollisions, hub1IFChannelUtilization=hub1IFChannelUtilization, nrc=nrc, hub1IFEntry=hub1IFEntry, hub1CarrierRecoverTime=hub1CarrierRecoverTime, hub1Reset=hub1Reset, hub1IFOutLostCts=hub1IFOutLostCts, hub1PortType=hub1PortType, hub1IFOutUnderruns=hub1IFOutUnderruns, hub1PortPolarityStatus=hub1PortPolarityStatus, hub1PortRecordValue=hub1PortRecordValue, hub1EventCounterFlags=hub1EventCounterFlags, hub1IFIndex=hub1IFIndex, hub1IFOutLostCrs=hub1IFOutLostCrs, hub1PortLinkState=hub1PortLinkState, hub1IFOutMtuExceededDiscards=hub1IFOutMtuExceededDiscards, hub1PortIndex=hub1PortIndex)
