#
# PySNMP MIB module DGS-6600-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-6600-EQUIPMENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:30:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
dgs6600_system, = mibBuilder.importSymbols("DGS-6600-ID-MIB", "dgs6600-system")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, Unsigned32, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Counter32, Counter64, NotificationType, IpAddress, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Counter32", "Counter64", "NotificationType", "IpAddress", "MibIdentifier", "iso")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
dgs6600EquipmentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2))
if mibBuilder.loadTexts: dgs6600EquipmentMIB.setLastUpdated('1302070000Z')
if mibBuilder.loadTexts: dgs6600EquipmentMIB.setOrganization('D-Link Corp.')
chassisControlModuleLEDInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1))
chassisPowerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2))
chassisFanTrayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3))
chassisSlotInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4))
chassisTemperatureInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5))
chassisPortLEDInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6))
chassisControlModuleLEDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1), )
if mibBuilder.loadTexts: chassisControlModuleLEDInfoTable.setStatus('current')
chassisControlModuleLEDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisControlModuleLEDInfoIndex"))
if mibBuilder.loadTexts: chassisControlModuleLEDInfoEntry.setStatus('current')
chassisControlModuleLEDInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoIndex.setStatus('current')
chassisControlModuleLEDInfoConsole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rs232", 1), ("usb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoConsole.setStatus('current')
chassisControlModuleLEDInfoMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMaster.setStatus('current')
chassisControlModuleLEDInfoCPUUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zero-LED", 0), ("one-LED", 1), ("two-LEDs", 2), ("three-LEDs", 3), ("four-LEDs", 4), ("five-LEDs", 5), ("six-LEDs", 6), ("seven-LEDs", 7), ("eight-LEDs", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoCPUUtilization.setStatus('current')
chassisControlModuleLEDInfoMgmtPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("steady-green", 2), ("blinking-green", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMgmtPortStatus.setStatus('current')
chassisControlModuleLEDInfoMgmtPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link-0", 1), ("link-100", 2), ("link-1000", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMgmtPortSpeed.setStatus('current')
chassisPowerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1), )
if mibBuilder.loadTexts: chassisPowerInfoTable.setStatus('current')
chassisPowerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisPowerIndex"))
if mibBuilder.loadTexts: chassisPowerInfoEntry.setStatus('current')
chassisPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerIndex.setStatus('current')
chassisPowerExist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("empty", 1), ("exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerExist.setStatus('current')
chassisPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("AC", 1), ("DC", 2), ("Unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerType.setStatus('current')
chassisPowerAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("in-operation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerAlive.setStatus('current')
chassisPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerVoltage.setStatus('current')
chassisPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerCurrent.setStatus('current')
chassisPowerPowerWatt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerPowerWatt.setStatus('current')
chassisPowerFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerFanSpeed.setStatus('current')
chassisFanTrayInfoState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-exist", 1), ("failed", 2), ("in-operation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanTrayInfoState.setStatus('current')
chassisFanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2), )
if mibBuilder.loadTexts: chassisFanInfoTable.setStatus('current')
chassisFanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisFanIndex"))
if mibBuilder.loadTexts: chassisFanInfoEntry.setStatus('current')
chassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanIndex.setStatus('current')
chassisFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanStatus.setStatus('current')
chassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanSpeed.setStatus('current')
chassisSlotInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1), )
if mibBuilder.loadTexts: chassisSlotInfoTable.setStatus('current')
chassisSlotInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisSlotIndex"))
if mibBuilder.loadTexts: chassisSlotInfoEntry.setStatus('current')
chassisSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotIndex.setStatus('current')
chassisSlotState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("empty", 1), ("no-power", 2), ("failed", 3), ("booting", 4), ("in-operation", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotState.setStatus('current')
chassisSlotLEDPoEModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotLEDPoEModeEnabled.setStatus('current')
chassisSlotModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotModel.setStatus('current')
chassisSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotSerialNumber.setStatus('current')
chassisSlotHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotHwVersion.setStatus('current')
chassisSlotPCBAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotPCBAVersion.setStatus('current')
chassisSlotBootloaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotBootloaderVersion.setStatus('current')
chassisSlotRuntimeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotRuntimeVersion.setStatus('current')
chassisSlotCPLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotCPLDVersion.setStatus('current')
chassisSlotFirsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotFirsMacAddress.setStatus('current')
chassisSlotNumberOfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotNumberOfMacAddress.setStatus('current')
chassisTemperatureInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1), )
if mibBuilder.loadTexts: chassisTemperatureInfoTable.setStatus('current')
chassisTemperatureInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisTemperatureSlotIndex"))
if mibBuilder.loadTexts: chassisTemperatureInfoEntry.setStatus('current')
chassisTemperatureSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureSlotIndex.setStatus('current')
chassisTemperatureInletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureInletCurrent.setStatus('current')
chassisTemperatureInletOverheat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureInletOverheat.setStatus('current')
chassisTemperatureInletHeatdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureInletHeatdown.setStatus('current')
chassisTemperatureCenterCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureCenterCurrent.setStatus('current')
chassisTemperatureCenterOverheat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureCenterOverheat.setStatus('current')
chassisTemperatureCenterHeatdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureCenterHeatdown.setStatus('current')
chassisTemperatureOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureOutletCurrent.setStatus('current')
chassisTemperatureOutletOverheat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureOutletOverheat.setStatus('current')
chassisTemperatureOutletHeatdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureOutletHeatdown.setStatus('current')
chassisPortLEDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1), )
if mibBuilder.loadTexts: chassisPortLEDInfoTable.setStatus('current')
chassisPortLEDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisPortLEDIFIndex"))
if mibBuilder.loadTexts: chassisPortLEDInfoEntry.setStatus('current')
chassisPortLEDIFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDIFIndex.setStatus('current')
chassisPortLEDIFName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDIFName.setStatus('current')
chassisPortLEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("steady-amber", 2), ("steady-green", 3), ("blinking-amber", 4), ("blinking-green", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDStatus.setStatus('current')
chassisPortLEDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("poe", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDMode.setStatus('current')
chassisPortLEDMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDMediumType.setStatus('current')
mibBuilder.exportSymbols("DGS-6600-EQUIPMENT-MIB", chassisControlModuleLEDInfoMaster=chassisControlModuleLEDInfoMaster, chassisTemperatureCenterHeatdown=chassisTemperatureCenterHeatdown, chassisPortLEDStatus=chassisPortLEDStatus, chassisPowerPowerWatt=chassisPowerPowerWatt, chassisSlotBootloaderVersion=chassisSlotBootloaderVersion, chassisPowerCurrent=chassisPowerCurrent, chassisTemperatureSlotIndex=chassisTemperatureSlotIndex, chassisPowerVoltage=chassisPowerVoltage, chassisControlModuleLEDInfoTable=chassisControlModuleLEDInfoTable, chassisPowerFanSpeed=chassisPowerFanSpeed, chassisTemperatureOutletCurrent=chassisTemperatureOutletCurrent, chassisTemperatureOutletHeatdown=chassisTemperatureOutletHeatdown, chassisPortLEDInfo=chassisPortLEDInfo, chassisControlModuleLEDInfoEntry=chassisControlModuleLEDInfoEntry, dgs6600EquipmentMIB=dgs6600EquipmentMIB, chassisPortLEDInfoTable=chassisPortLEDInfoTable, chassisFanInfoTable=chassisFanInfoTable, chassisPortLEDIFIndex=chassisPortLEDIFIndex, chassisTemperatureInletHeatdown=chassisTemperatureInletHeatdown, chassisControlModuleLEDInfoMgmtPortSpeed=chassisControlModuleLEDInfoMgmtPortSpeed, chassisPowerAlive=chassisPowerAlive, chassisFanStatus=chassisFanStatus, chassisSlotPCBAVersion=chassisSlotPCBAVersion, chassisTemperatureCenterOverheat=chassisTemperatureCenterOverheat, chassisControlModuleLEDInfoMgmtPortStatus=chassisControlModuleLEDInfoMgmtPortStatus, chassisSlotFirsMacAddress=chassisSlotFirsMacAddress, chassisTemperatureInletCurrent=chassisTemperatureInletCurrent, chassisSlotIndex=chassisSlotIndex, chassisPowerInfo=chassisPowerInfo, chassisPowerIndex=chassisPowerIndex, chassisSlotRuntimeVersion=chassisSlotRuntimeVersion, chassisPortLEDMode=chassisPortLEDMode, chassisSlotInfo=chassisSlotInfo, chassisControlModuleLEDInfoIndex=chassisControlModuleLEDInfoIndex, chassisTemperatureOutletOverheat=chassisTemperatureOutletOverheat, chassisSlotModel=chassisSlotModel, chassisTemperatureInfoTable=chassisTemperatureInfoTable, PYSNMP_MODULE_ID=dgs6600EquipmentMIB, chassisSlotInfoEntry=chassisSlotInfoEntry, chassisPortLEDIFName=chassisPortLEDIFName, chassisPowerInfoEntry=chassisPowerInfoEntry, chassisFanTrayInfo=chassisFanTrayInfo, chassisControlModuleLEDInfoCPUUtilization=chassisControlModuleLEDInfoCPUUtilization, chassisFanSpeed=chassisFanSpeed, chassisSlotCPLDVersion=chassisSlotCPLDVersion, chassisTemperatureInletOverheat=chassisTemperatureInletOverheat, chassisFanIndex=chassisFanIndex, chassisPortLEDMediumType=chassisPortLEDMediumType, chassisControlModuleLEDInfoConsole=chassisControlModuleLEDInfoConsole, chassisFanInfoEntry=chassisFanInfoEntry, chassisControlModuleLEDInfo=chassisControlModuleLEDInfo, chassisPowerInfoTable=chassisPowerInfoTable, chassisTemperatureInfo=chassisTemperatureInfo, chassisSlotSerialNumber=chassisSlotSerialNumber, chassisPortLEDInfoEntry=chassisPortLEDInfoEntry, chassisFanTrayInfoState=chassisFanTrayInfoState, chassisSlotState=chassisSlotState, chassisTemperatureInfoEntry=chassisTemperatureInfoEntry, chassisTemperatureCenterCurrent=chassisTemperatureCenterCurrent, chassisSlotNumberOfMacAddress=chassisSlotNumberOfMacAddress, chassisPowerExist=chassisPowerExist, chassisSlotInfoTable=chassisSlotInfoTable, chassisSlotLEDPoEModeEnabled=chassisSlotLEDPoEModeEnabled, chassisSlotHwVersion=chassisSlotHwVersion, chassisPowerType=chassisPowerType)
