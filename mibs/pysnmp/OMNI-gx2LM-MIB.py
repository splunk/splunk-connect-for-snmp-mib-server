#
# PySNMP MIB module OMNI-gx2LM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2LM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
gx2Lm, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Lm")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemAlarmStatus, trapChangedValueDisplayString, trapNetworkElemAvailStatus, trapNetworkElemOperState, trapNetworkElemAdminState, trapChangedValueInteger, trapNetworkElemSerialNum, trapNETrapLastTrapTimeStamp, trapChangedObjectId, trapPerceivedSeverity, trapText, trapIdentifier, trapNetworkElemModelNumber = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus", "trapChangedValueDisplayString", "trapNetworkElemAvailStatus", "trapNetworkElemOperState", "trapNetworkElemAdminState", "trapChangedValueInteger", "trapNetworkElemSerialNum", "trapNETrapLastTrapTimeStamp", "trapChangedObjectId", "trapPerceivedSeverity", "trapText", "trapIdentifier", "trapNetworkElemModelNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
TimeTicks, Counter32, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Unsigned32, Integer32, Gauge32, Bits, ObjectIdentity, iso, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Unsigned32", "Integer32", "Gauge32", "Bits", "ObjectIdentity", "iso", "MibIdentifier", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2lmDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 1))
gx2lmAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2), )
if mibBuilder.loadTexts: gx2lmAnalogTable.setStatus('mandatory')
gx2lmAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1), ).setIndexNames((0, "OMNI-gx2LM-MIB", "gx2lmAnalogTableIndex"))
if mibBuilder.loadTexts: gx2lmAnalogEntry.setStatus('mandatory')
gx2lmDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3), )
if mibBuilder.loadTexts: gx2lmDigitalTable.setStatus('mandatory')
gx2lmDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2), ).setIndexNames((0, "OMNI-gx2LM-MIB", "gx2lmDigitalTableIndex"))
if mibBuilder.loadTexts: gx2lmDigitalEntry.setStatus('mandatory')
gx2lmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4), )
if mibBuilder.loadTexts: gx2lmStatusTable.setStatus('mandatory')
gx2lmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3), ).setIndexNames((0, "OMNI-gx2LM-MIB", "gx2lmStatusTableIndex"))
if mibBuilder.loadTexts: gx2lmStatusEntry.setStatus('mandatory')
gx2lmFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5), )
if mibBuilder.loadTexts: gx2lmFactoryTable.setStatus('mandatory')
gx2lmFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4), ).setIndexNames((0, "OMNI-gx2LM-MIB", "gx2lmFactoryTableIndex"))
if mibBuilder.loadTexts: gx2lmFactoryEntry.setStatus('mandatory')
gx2Lm1000HoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 6), )
if mibBuilder.loadTexts: gx2Lm1000HoldTimeTable.setStatus('mandatory')
gx2Lm1000HoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 6, 5), ).setIndexNames((0, "OMNI-gx2LM-MIB", "gx2Lm1000HoldTimeTableIndex"), (0, "OMNI-gx2LM-MIB", "gx2Lm1000HoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Lm1000HoldTimeEntry.setStatus('mandatory')
gx2lmAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2lmAnalogTableIndex.setStatus('mandatory')
labelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelOffsetNomMonitor.setStatus('optional')
uomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomOffsetNomMonitor.setStatus('optional')
majorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighOffsetNomMonitor.setStatus('mandatory')
majorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowOffsetNomMonitor.setStatus('mandatory')
minorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighOffsetNomMonitor.setStatus('mandatory')
minorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowOffsetNomMonitor.setStatus('mandatory')
currentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueOffsetNomMonitor.setStatus('mandatory')
stateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagOffsetNomMonitor.setStatus('mandatory')
minValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueOffsetNomMonitor.setStatus('mandatory')
maxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueOffsetNomMonitor.setStatus('mandatory')
alarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateOffsetNomMonitor.setStatus('mandatory')
labelOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelOffsetNomCnt.setStatus('optional')
uomOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomOffsetNomCnt.setStatus('optional')
majorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighOffsetNomCnt.setStatus('mandatory')
majorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowOffsetNomCnt.setStatus('mandatory')
minorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighOffsetNomCnt.setStatus('mandatory')
minorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowOffsetNomCnt.setStatus('mandatory')
currentValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentValueOffsetNomCnt.setStatus('mandatory')
stateFlagOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagOffsetNomCnt.setStatus('mandatory')
minValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueOffsetNomCnt.setStatus('mandatory')
maxValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueOffsetNomCnt.setStatus('mandatory')
alarmStateOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateOffsetNomCnt.setStatus('mandatory')
labelRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelRelAttenSetting.setStatus('optional')
uomRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomRelAttenSetting.setStatus('optional')
majorHighRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighRelAttenSetting.setStatus('mandatory')
majorLowRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowRelAttenSetting.setStatus('mandatory')
minorHighRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighRelAttenSetting.setStatus('mandatory')
minorLowRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowRelAttenSetting.setStatus('mandatory')
currentValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentValueRelAttenSetting.setStatus('mandatory')
stateFlagRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagRelAttenSetting.setStatus('mandatory')
minValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueRelAttenSetting.setStatus('mandatory')
maxValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueRelAttenSetting.setStatus('mandatory')
alarmStateRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateRelAttenSetting.setStatus('mandatory')
labelOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelOptPower.setStatus('optional')
uomOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomOptPower.setStatus('optional')
majorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighOptPower.setStatus('mandatory')
majorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowOptPower.setStatus('mandatory')
minorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighOptPower.setStatus('mandatory')
minorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowOptPower.setStatus('mandatory')
currentValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueOptPower.setStatus('mandatory')
stateFlagOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagOptPower.setStatus('mandatory')
minValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueOptPower.setStatus('mandatory')
maxValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueOptPower.setStatus('mandatory')
alarmStateOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateOptPower.setStatus('mandatory')
labelLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLaserBias.setStatus('optional')
uomLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomLaserBias.setStatus('optional')
majorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighLaserBias.setStatus('mandatory')
majorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowLaserBias.setStatus('mandatory')
minorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighLaserBias.setStatus('mandatory')
minorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowLaserBias.setStatus('mandatory')
currentValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueLaserBias.setStatus('mandatory')
stateFlagLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagLaserBias.setStatus('mandatory')
minValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueLaserBias.setStatus('mandatory')
maxValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueLaserBias.setStatus('mandatory')
alarmStateLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateLaserBias.setStatus('mandatory')
labelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTecCurrent.setStatus('optional')
uomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomTecCurrent.setStatus('optional')
majorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighTecCurrent.setStatus('mandatory')
majorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowTecCurrent.setStatus('mandatory')
minorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighTecCurrent.setStatus('mandatory')
minorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowTecCurrent.setStatus('mandatory')
currentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueTecCurrent.setStatus('mandatory')
stateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagTecCurrent.setStatus('mandatory')
minValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueTecCurrent.setStatus('mandatory')
maxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueTecCurrent.setStatus('mandatory')
alarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateTecCurrent.setStatus('mandatory')
labelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLaserTemp.setStatus('optional')
uomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomLaserTemp.setStatus('optional')
majorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighLaserTemp.setStatus('mandatory')
majorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowLaserTemp.setStatus('mandatory')
minorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighLaserTemp.setStatus('mandatory')
minorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowLaserTemp.setStatus('mandatory')
currentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueLaserTemp.setStatus('mandatory')
stateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagLaserTemp.setStatus('mandatory')
minValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueLaserTemp.setStatus('mandatory')
maxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueLaserTemp.setStatus('mandatory')
alarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateLaserTemp.setStatus('mandatory')
labelModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelModuleTemp.setStatus('optional')
uomModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomModuleTemp.setStatus('optional')
majorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighModuleTemp.setStatus('mandatory')
majorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowModuleTemp.setStatus('mandatory')
minorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighModuleTemp.setStatus('mandatory')
minorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowModuleTemp.setStatus('mandatory')
currentValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueModuleTemp.setStatus('mandatory')
stateFlagModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagModuleTemp.setStatus('mandatory')
minValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueModuleTemp.setStatus('mandatory')
maxValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueModuleTemp.setStatus('mandatory')
alarmStateModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateModuleTemp.setStatus('mandatory')
labelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelFanCurrent.setStatus('optional')
uomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomFanCurrent.setStatus('optional')
majorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighFanCurrent.setStatus('mandatory')
majorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowFanCurrent.setStatus('mandatory')
minorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighFanCurrent.setStatus('mandatory')
minorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowFanCurrent.setStatus('mandatory')
currentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueFanCurrent.setStatus('mandatory')
stateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagFanCurrent.setStatus('mandatory')
minValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueFanCurrent.setStatus('mandatory')
maxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueFanCurrent.setStatus('mandatory')
alarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateFanCurrent.setStatus('mandatory')
label12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: label12Volt.setStatus('optional')
uom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uom12Volt.setStatus('optional')
majorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHigh12Volt.setStatus('mandatory')
majorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLow12Volt.setStatus('mandatory')
minorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHigh12Volt.setStatus('mandatory')
minorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLow12Volt.setStatus('mandatory')
currentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValue12Volt.setStatus('mandatory')
stateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlag12Volt.setStatus('mandatory')
minValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValue12Volt.setStatus('mandatory')
maxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValue12Volt.setStatus('mandatory')
alarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState12Volt.setStatus('mandatory')
gx2lmDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2lmDigitalTableIndex.setStatus('mandatory')
labelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelRfInput.setStatus('optional')
enumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumRfInput.setStatus('optional')
valueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueRfInput.setStatus('mandatory')
stateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagRfInput.setStatus('mandatory')
labelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelOptOutput.setStatus('optional')
enumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumOptOutput.setStatus('optional')
valueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueOptOutput.setStatus('mandatory')
stateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagOptOutput.setStatus('mandatory')
labelLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLaserMode.setStatus('optional')
enumLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumLaserMode.setStatus('optional')
valueLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preset", 1), ("set", 2), ("setEquate", 3), ("manual", 4), ("manualEquate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueLaserMode.setStatus('mandatory')
stateflagLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagLaserMode.setStatus('mandatory')
labelLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLaserSecMode.setStatus('optional')
enumLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumLaserSecMode.setStatus('optional')
valueLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cw", 1), ("video", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueLaserSecMode.setStatus('mandatory')
stateflagLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagLaserSecMode.setStatus('mandatory')
labelVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelVideoOffset.setStatus('optional')
enumVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumVideoOffset.setStatus('optional')
valueVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("minus2dB", 1), ("minus3dB", 2), ("minus4dB", 3), ("minus5dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueVideoOffset.setStatus('mandatory')
stateflagVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagVideoOffset.setStatus('mandatory')
labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelFactoryDefault.setStatus('optional')
enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumFactoryDefault.setStatus('optional')
valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueFactoryDefault.setStatus('mandatory')
stateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagFactoryDefault.setStatus('mandatory')
gx2lmStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2lmStatusTableIndex.setStatus('mandatory')
labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelBoot.setStatus('optional')
valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueBoot.setStatus('mandatory')
stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagBoot.setStatus('mandatory')
labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelFlash.setStatus('optional')
valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueFlash.setStatus('mandatory')
stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagFlash.setStatus('mandatory')
labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelFactoryDataCRC.setStatus('optional')
valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueFactoryDataCRC.setStatus('mandatory')
stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagFactoryDataCRC.setStatus('mandatory')
labelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLaserDataCRC.setStatus('optional')
valueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueLaserDataCRC.setStatus('mandatory')
stateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagLaserDataCRC.setStatus('mandatory')
labelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelAlarmDataCrc.setStatus('optional')
valueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueAlarmDataCrc.setStatus('mandatory')
stateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagAlarmDataCrc.setStatus('mandatory')
labelHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelHWStatus.setStatus('optional')
valueHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueHWStatus.setStatus('mandatory')
stateflagHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagHWStatus.setStatus('mandatory')
labelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelRFInputStatus.setStatus('optional')
valueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueRFInputStatus.setStatus('mandatory')
stateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateflagRFInputStatus.setStatus('mandatory')
gx2lmFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2lmFactoryTableIndex.setStatus('mandatory')
bootControlByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootControlByteValue.setStatus('mandatory')
bootStatusByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootStatusByteValue.setStatus('mandatory')
bank1CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bank1CRCValue.setStatus('mandatory')
bank2CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bank2CRCValue.setStatus('mandatory')
prgEEPROMByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prgEEPROMByteValue.setStatus('mandatory')
factoryCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryCRCValue.setStatus('mandatory')
calculateCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("laserData", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: calculateCRCValue.setStatus('mandatory')
hourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourMeterValue.setStatus('mandatory')
flashPrgCntAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPrgCntAValue.setStatus('mandatory')
flashPrgCntBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPrgCntBValue.setStatus('mandatory')
flashBankARevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashBankARevValue.setStatus('mandatory')
flashBankBRevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashBankBRevValue.setStatus('mandatory')
gx2Lm1000HoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm1000HoldTimeTableIndex.setStatus('mandatory')
gx2Lm1000HoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm1000HoldTimeSpecIndex.setStatus('mandatory')
gx2Lm1000HoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2Lm1000HoldTimeData.setStatus('mandatory')
trapLMConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMRFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMRFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMRFOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMOpticalPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMLaserBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMLaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMTECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM12vAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMLaserBiasCntLoopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMLaserBiasCntLoopInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMRFParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMTECParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMAttnTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMPowerMeterTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMLaserDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMUserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMUserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 4) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2LM-MIB", alarmState12Volt=alarmState12Volt, flashBankARevValue=flashBankARevValue, enumLaserMode=enumLaserMode, gx2lmDigitalEntry=gx2lmDigitalEntry, labelLaserSecMode=labelLaserSecMode, labelOptPower=labelOptPower, currentValueLaserTemp=currentValueLaserTemp, gx2lmDescriptor=gx2lmDescriptor, prgEEPROMByteValue=prgEEPROMByteValue, currentValueLaserBias=currentValueLaserBias, stateFlag12Volt=stateFlag12Volt, enumRfInput=enumRfInput, gx2Lm1000HoldTimeData=gx2Lm1000HoldTimeData, gx2lmStatusTable=gx2lmStatusTable, uomOptPower=uomOptPower, gx2lmAnalogTableIndex=gx2lmAnalogTableIndex, majorHighTecCurrent=majorHighTecCurrent, majorHighLaserBias=majorHighLaserBias, trapLM12vAlarm=trapLM12vAlarm, uomOffsetNomMonitor=uomOffsetNomMonitor, stateFlagModuleTemp=stateFlagModuleTemp, trapLMLaserTempAlarm=trapLMLaserTempAlarm, alarmStateTecCurrent=alarmStateTecCurrent, bootControlByteValue=bootControlByteValue, majorLowOptPower=majorLowOptPower, bootStatusByteValue=bootStatusByteValue, labelBoot=labelBoot, currentValueOffsetNomMonitor=currentValueOffsetNomMonitor, majorHighOffsetNomCnt=majorHighOffsetNomCnt, labelOffsetNomMonitor=labelOffsetNomMonitor, valueRfInput=valueRfInput, stateflagHWStatus=stateflagHWStatus, trapLMConfigChangeInteger=trapLMConfigChangeInteger, trapLMRFParamInitAlarm=trapLMRFParamInitAlarm, trapLMAlarmDataCRCAlarm=trapLMAlarmDataCRCAlarm, valueLaserMode=valueLaserMode, stateflagBoot=stateflagBoot, stateflagRfInput=stateflagRfInput, alarmStateLaserBias=alarmStateLaserBias, maxValue12Volt=maxValue12Volt, stateFlagOptPower=stateFlagOptPower, calculateCRCValue=calculateCRCValue, maxValueTecCurrent=maxValueTecCurrent, stateFlagOffsetNomMonitor=stateFlagOffsetNomMonitor, maxValueOffsetNomCnt=maxValueOffsetNomCnt, uomModuleTemp=uomModuleTemp, gx2lmStatusEntry=gx2lmStatusEntry, minorLow12Volt=minorLow12Volt, labelFactoryDefault=labelFactoryDefault, valueFactoryDefault=valueFactoryDefault, labelLaserMode=labelLaserMode, labelTecCurrent=labelTecCurrent, majorLowLaserBias=majorLowLaserBias, maxValueModuleTemp=maxValueModuleTemp, gx2lmStatusTableIndex=gx2lmStatusTableIndex, trapLMLaserBiasAlarm=trapLMLaserBiasAlarm, uomLaserTemp=uomLaserTemp, majorLowLaserTemp=majorLowLaserTemp, trapLMAttnTableInitAlarm=trapLMAttnTableInitAlarm, labelRFInputStatus=labelRFInputStatus, minorHighRelAttenSetting=minorHighRelAttenSetting, minValueOffsetNomCnt=minValueOffsetNomCnt, alarmStateOptPower=alarmStateOptPower, alarmStateOffsetNomMonitor=alarmStateOffsetNomMonitor, valueOptOutput=valueOptOutput, gx2Lm1000HoldTimeSpecIndex=gx2Lm1000HoldTimeSpecIndex, minorLowTecCurrent=minorLowTecCurrent, label12Volt=label12Volt, minorLowOffsetNomMonitor=minorLowOffsetNomMonitor, trapLMResetFactoryDefaultAlarm=trapLMResetFactoryDefaultAlarm, stateflagVideoOffset=stateflagVideoOffset, trapLMTECCurrentAlarm=trapLMTECCurrentAlarm, labelLaserDataCRC=labelLaserDataCRC, valueLaserDataCRC=valueLaserDataCRC, currentValueModuleTemp=currentValueModuleTemp, minorLowModuleTemp=minorLowModuleTemp, labelVideoOffset=labelVideoOffset, trapLMLaserDataCRCAlarm=trapLMLaserDataCRCAlarm, alarmStateRelAttenSetting=alarmStateRelAttenSetting, hourMeterValue=hourMeterValue, maxValueOptPower=maxValueOptPower, currentValueFanCurrent=currentValueFanCurrent, minValue12Volt=minValue12Volt, minorLowFanCurrent=minorLowFanCurrent, stateflagOptOutput=stateflagOptOutput, uom12Volt=uom12Volt, uomRelAttenSetting=uomRelAttenSetting, trapLMConfigChangeDisplayString=trapLMConfigChangeDisplayString, minValueOptPower=minValueOptPower, labelFactoryDataCRC=labelFactoryDataCRC, currentValueRelAttenSetting=currentValueRelAttenSetting, labelAlarmDataCrc=labelAlarmDataCrc, valueRFInputStatus=valueRFInputStatus, maxValueRelAttenSetting=maxValueRelAttenSetting, flashPrgCntAValue=flashPrgCntAValue, valueLaserSecMode=valueLaserSecMode, gx2Lm1000HoldTimeTable=gx2Lm1000HoldTimeTable, stateFlagRelAttenSetting=stateFlagRelAttenSetting, trapLMUserRFOffAlarm=trapLMUserRFOffAlarm, alarmStateModuleTemp=alarmStateModuleTemp, uomFanCurrent=uomFanCurrent, gx2lmAnalogEntry=gx2lmAnalogEntry, minValueModuleTemp=minValueModuleTemp, minorLowOptPower=minorLowOptPower, majorHighLaserTemp=majorHighLaserTemp, majorHighModuleTemp=majorHighModuleTemp, minorHighFanCurrent=minorHighFanCurrent, labelOptOutput=labelOptOutput, majorHighRelAttenSetting=majorHighRelAttenSetting, gx2lmDigitalTable=gx2lmDigitalTable, stateflagLaserSecMode=stateflagLaserSecMode, majorLowOffsetNomMonitor=majorLowOffsetNomMonitor, minorHighLaserBias=minorHighLaserBias, trapLMRFInputAlarm=trapLMRFInputAlarm, gx2lmFactoryTable=gx2lmFactoryTable, minorLowLaserTemp=minorLowLaserTemp, valueFactoryDataCRC=valueFactoryDataCRC, stateFlagFanCurrent=stateFlagFanCurrent, trapLMModuleTempAlarm=trapLMModuleTempAlarm, trapLMFactoryDataCRCAlarm=trapLMFactoryDataCRCAlarm, uomOffsetNomCnt=uomOffsetNomCnt, alarmStateLaserTemp=alarmStateLaserTemp, labelModuleTemp=labelModuleTemp, bank1CRCValue=bank1CRCValue, currentValue12Volt=currentValue12Volt, stateFlagLaserTemp=stateFlagLaserTemp, maxValueFanCurrent=maxValueFanCurrent, minorHighModuleTemp=minorHighModuleTemp, trapLMFanCurrentAlarm=trapLMFanCurrentAlarm, enumFactoryDefault=enumFactoryDefault, labelLaserTemp=labelLaserTemp, stateFlagTecCurrent=stateFlagTecCurrent, labelHWStatus=labelHWStatus, minorHighOffsetNomCnt=minorHighOffsetNomCnt, labelRelAttenSetting=labelRelAttenSetting, majorLowTecCurrent=majorLowTecCurrent, gx2lmFactoryTableIndex=gx2lmFactoryTableIndex, trapLMUserOpticalOffAlarm=trapLMUserOpticalOffAlarm, valueAlarmDataCrc=valueAlarmDataCrc, uomTecCurrent=uomTecCurrent, maxValueLaserTemp=maxValueLaserTemp, minValueTecCurrent=minValueTecCurrent, currentValueOffsetNomCnt=currentValueOffsetNomCnt, trapLMLaserBiasCntLoopInitAlarm=trapLMLaserBiasCntLoopInitAlarm, majorHigh12Volt=majorHigh12Volt, alarmStateOffsetNomCnt=alarmStateOffsetNomCnt, flashPrgCntBValue=flashPrgCntBValue, minValueRelAttenSetting=minValueRelAttenSetting, minValueLaserBias=minValueLaserBias, valueFlash=valueFlash, trapLMOpticalPowerAlarm=trapLMOpticalPowerAlarm, trapLMLaserBiasCntLoopAlarm=trapLMLaserBiasCntLoopAlarm, alarmStateFanCurrent=alarmStateFanCurrent, stateflagFlash=stateflagFlash, bank2CRCValue=bank2CRCValue, enumVideoOffset=enumVideoOffset, stateflagAlarmDataCrc=stateflagAlarmDataCrc, minorHigh12Volt=minorHigh12Volt, labelFlash=labelFlash, stateflagRFInputStatus=stateflagRFInputStatus, valueHWStatus=valueHWStatus, stateflagLaserMode=stateflagLaserMode, maxValueLaserBias=maxValueLaserBias, labelLaserBias=labelLaserBias, currentValueTecCurrent=currentValueTecCurrent, valueVideoOffset=valueVideoOffset, minorLowRelAttenSetting=minorLowRelAttenSetting, majorHighOptPower=majorHighOptPower, trapLMBankBootAlarm=trapLMBankBootAlarm, currentValueOptPower=currentValueOptPower, minValueFanCurrent=minValueFanCurrent, enumLaserSecMode=enumLaserSecMode, majorLowModuleTemp=majorLowModuleTemp, gx2lmDigitalTableIndex=gx2lmDigitalTableIndex, labelOffsetNomCnt=labelOffsetNomCnt, stateflagFactoryDataCRC=stateflagFactoryDataCRC, gx2lmFactoryEntry=gx2lmFactoryEntry, trapLMTECParamInitAlarm=trapLMTECParamInitAlarm, flashBankBRevValue=flashBankBRevValue, stateFlagOffsetNomCnt=stateFlagOffsetNomCnt, trapLMRFOverloadAlarm=trapLMRFOverloadAlarm, trapLMRFOffsetAlarm=trapLMRFOffsetAlarm, factoryCRCValue=factoryCRCValue, minorHighOffsetNomMonitor=minorHighOffsetNomMonitor, minorHighTecCurrent=minorHighTecCurrent, majorLowFanCurrent=majorLowFanCurrent, gx2Lm1000HoldTimeEntry=gx2Lm1000HoldTimeEntry, maxValueOffsetNomMonitor=maxValueOffsetNomMonitor, labelFanCurrent=labelFanCurrent, majorLowRelAttenSetting=majorLowRelAttenSetting, minorHighOptPower=minorHighOptPower, valueBoot=valueBoot, minorHighLaserTemp=minorHighLaserTemp, minValueOffsetNomMonitor=minValueOffsetNomMonitor, gx2Lm1000HoldTimeTableIndex=gx2Lm1000HoldTimeTableIndex, stateFlagLaserBias=stateFlagLaserBias, trapLMPowerMeterTableInitAlarm=trapLMPowerMeterTableInitAlarm, uomLaserBias=uomLaserBias, majorLowOffsetNomCnt=majorLowOffsetNomCnt, majorLow12Volt=majorLow12Volt, minorLowOffsetNomCnt=minorLowOffsetNomCnt, enumOptOutput=enumOptOutput, gx2lmAnalogTable=gx2lmAnalogTable, stateflagFactoryDefault=stateflagFactoryDefault, majorHighOffsetNomMonitor=majorHighOffsetNomMonitor, majorHighFanCurrent=majorHighFanCurrent, trapLMFlashAlarm=trapLMFlashAlarm, minValueLaserTemp=minValueLaserTemp, stateflagLaserDataCRC=stateflagLaserDataCRC, Float=Float, minorLowLaserBias=minorLowLaserBias, labelRfInput=labelRfInput)
