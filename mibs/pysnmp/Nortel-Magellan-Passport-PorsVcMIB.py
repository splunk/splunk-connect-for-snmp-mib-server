#
# PySNMP MIB module Nortel-Magellan-Passport-PorsVcMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-PorsVcMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:18:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
rtgIndex, rtg = mibBuilder.importSymbols("Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex", "rtg")
RowStatus, DisplayString, Integer32, RowPointer, Unsigned32, StorageType = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowStatus", "DisplayString", "Integer32", "RowPointer", "Unsigned32", "StorageType")
Link, EnterpriseDateAndTime, AsciiString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link", "EnterpriseDateAndTime", "AsciiString", "NonReplicated")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Integer32, IpAddress, MibIdentifier, Bits, Gauge32, Unsigned32, ModuleIdentity, NotificationType, ObjectIdentity, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Integer32", "IpAddress", "MibIdentifier", "Bits", "Gauge32", "Unsigned32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
porsVcMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37))
rtgRs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2))
rtgRsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 1), )
if mibBuilder.loadTexts: rtgRsRowStatusTable.setStatus('mandatory')
rtgRsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsIndex"))
if mibBuilder.loadTexts: rtgRsRowStatusEntry.setStatus('mandatory')
rtgRsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsRowStatus.setStatus('mandatory')
rtgRsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsComponentName.setStatus('mandatory')
rtgRsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsStorageType.setStatus('mandatory')
rtgRsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: rtgRsIndex.setStatus('mandatory')
rtgRsSelectedRouteTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10), )
if mibBuilder.loadTexts: rtgRsSelectedRouteTable.setStatus('mandatory')
rtgRsSelectedRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsIndex"))
if mibBuilder.loadTexts: rtgRsSelectedRouteEntry.setStatus('mandatory')
rtgRsRouteCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999)).clone(999999)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsRouteCostMetric.setStatus('mandatory')
rtgRsRouteDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999)).clone(999999)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsRouteDelayMetric.setStatus('mandatory')
rtgRsBumpingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsBumpingPriority.setStatus('mandatory')
rtgRsReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routeDelayTooLong", 10), ("attributesNotMet", 11), ("internalReason", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsReasonForNoRoute.setStatus('mandatory')
rtgRsAttributeNotMet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknownAttributeNotMet", 0), ("allAttributesMet", 1), ("requiredRxBandwidth", 2), ("requiredTxBandwidth", 3), ("requiredTrunkModes", 4), ("maximumAcceptableCost", 5), ("maximumAcceptableDelay", 6), ("requiredTrafficType", 7), ("permittedTrunkTypes", 8), ("requiredSecurity", 9), ("requiredCustomerParm", 10), ("maximumTransmissionUnit", 11), ("maximumAcceptableGatewayCost", 12), ("maximumGatewayHops", 13))).clone('allAttributesMet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsAttributeNotMet.setStatus('mandatory')
rtgRsRouteGatewayCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsRouteGatewayCostMetric.setStatus('mandatory')
rtgRsRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noRoute", 3), ("sameNode", 4), ("destinationNode", 5), ("destinationNodeLegacy", 6), ("gatewayNode", 7), ("gatewayLink", 8), ("routingGateway", 9), ("manual", 10))).clone('noRoute')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsRouteType.setStatus('mandatory')
rtgRsControlsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 11), )
if mibBuilder.loadTexts: rtgRsControlsTable.setStatus('mandatory')
rtgRsControlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsIndex"))
if mibBuilder.loadTexts: rtgRsControlsEntry.setStatus('mandatory')
rtgRsRouteSelectionAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fromOperator", 0), ("fromLastRouteRequest", 1))).clone('fromLastRouteRequest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsRouteSelectionAttributes.setStatus('obsolete')
rtgRsOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("automatic", 0), ("manual", 1))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsOperationMode.setStatus('mandatory')
rtgRsLastRouteSelectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 11, 1, 3), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsLastRouteSelectionTime.setStatus('mandatory')
rtgRsPathAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12), )
if mibBuilder.loadTexts: rtgRsPathAttributesTable.setStatus('mandatory')
rtgRsPathAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsIndex"))
if mibBuilder.loadTexts: rtgRsPathAttributesEntry.setStatus('mandatory')
rtgRsSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsSourceId.setStatus('mandatory')
rtgRsRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsRemoteName.setStatus('obsolete')
rtgRsSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsSetupPriority.setStatus('mandatory')
rtgRsRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsRequiredTxBandwidth.setStatus('mandatory')
rtgRsRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsRequiredRxBandwidth.setStatus('mandatory')
rtgRsMaximumTransmissionUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsMaximumTransmissionUnit.setStatus('mandatory')
rtgRsSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsSecurity.setStatus('mandatory')
rtgRsTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('voice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsTrafficType.setStatus('mandatory')
rtgRsPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsPermittedTrunkTypes.setStatus('mandatory')
rtgRsCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsCustomerParameter.setStatus('mandatory')
rtgRsPathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsPathAttributeToMinimize.setStatus('mandatory')
rtgRsMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsMaximumAcceptableCost.setStatus('mandatory')
rtgRsMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsMaximumAcceptableDelay.setStatus('mandatory')
rtgRsBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsBumpPreference.setStatus('mandatory')
rtgRsRequiredTrunkModes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("any", 0), ("mapping", 1))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsRequiredTrunkModes.setStatus('mandatory')
rtgRsMaximumAcceptableGatewayCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsMaximumAcceptableGatewayCost.setStatus('mandatory')
rtgRsRouteRequestor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("applicationService", 0), ("inboundRGty", 1), ("outboundRGty", 2))).clone('applicationService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsRouteRequestor.setStatus('mandatory')
rtgRsGatewaySelectionAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("costBased", 1), ("random", 2), ("legacy", 4))).clone('costBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsGatewaySelectionAlg.setStatus('mandatory')
rtgRsDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 12, 1, 20), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgRsDestination.setStatus('mandatory')
rtgRsSrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 224), )
if mibBuilder.loadTexts: rtgRsSrdTable.setStatus('mandatory')
rtgRsSrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 224, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsSrdIndex"))
if mibBuilder.loadTexts: rtgRsSrdEntry.setStatus('mandatory')
rtgRsSrdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 224, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: rtgRsSrdIndex.setStatus('mandatory')
rtgRsSrdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 224, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsSrdValue.setStatus('mandatory')
rtgRsRouteStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 225), )
if mibBuilder.loadTexts: rtgRsRouteStatisticsTable.setStatus('mandatory')
rtgRsRouteStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 225, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsRouteStatisticsSetupPriorityIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsRouteStatisticsStatisticsTableIndex"))
if mibBuilder.loadTexts: rtgRsRouteStatisticsEntry.setStatus('mandatory')
rtgRsRouteStatisticsSetupPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 225, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routesRequested", 0), ("routesSelectedAtBp0", 1), ("routesSelectedAtBp1", 2), ("routesSelectedAtBp2", 3), ("routesSelectedAtBp3", 4), ("routesSelectedAtBp4", 5))))
if mibBuilder.loadTexts: rtgRsRouteStatisticsSetupPriorityIndex.setStatus('mandatory')
rtgRsRouteStatisticsStatisticsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 225, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: rtgRsRouteStatisticsStatisticsTableIndex.setStatus('mandatory')
rtgRsRouteStatisticsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 225, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsRouteStatisticsValue.setStatus('mandatory')
rtgRsDgnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 650), )
if mibBuilder.loadTexts: rtgRsDgnTable.setStatus('mandatory')
rtgRsDgnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 650, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgRsDgnValue"))
if mibBuilder.loadTexts: rtgRsDgnEntry.setStatus('mandatory')
rtgRsDgnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 2, 650, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgRsDgnValue.setStatus('mandatory')
rtgPors = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6))
rtgPorsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 1), )
if mibBuilder.loadTexts: rtgPorsRowStatusTable.setStatus('mandatory')
rtgPorsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"))
if mibBuilder.loadTexts: rtgPorsRowStatusEntry.setStatus('mandatory')
rtgPorsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsRowStatus.setStatus('mandatory')
rtgPorsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsComponentName.setStatus('mandatory')
rtgPorsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsStorageType.setStatus('mandatory')
rtgPorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: rtgPorsIndex.setStatus('mandatory')
rtgPorsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 10), )
if mibBuilder.loadTexts: rtgPorsProvTable.setStatus('mandatory')
rtgPorsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"))
if mibBuilder.loadTexts: rtgPorsProvEntry.setStatus('mandatory')
rtgPorsOptimizationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1440), )).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsOptimizationInterval.setStatus('mandatory')
rtgPorsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11), )
if mibBuilder.loadTexts: rtgPorsInfoTable.setStatus('mandatory')
rtgPorsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"))
if mibBuilder.loadTexts: rtgPorsInfoEntry.setStatus('mandatory')
rtgPorsActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsActiveConnections.setStatus('mandatory')
rtgPorsOptimizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("scheduled", 1), ("optimizing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsOptimizationState.setStatus('mandatory')
rtgPorsLastOptimizationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1, 3), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsLastOptimizationTime.setStatus('mandatory')
rtgPorsNextOptimizationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1, 4), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsNextOptimizationTime.setStatus('mandatory')
rtgPorsOptimizationPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsOptimizationPasses.setStatus('mandatory')
rtgPorsOptimizationProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsOptimizationProgress.setStatus('mandatory')
rtgPorsPathsOptimized = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsPathsOptimized.setStatus('mandatory')
rtgPorsTotalPathsOptimized = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsTotalPathsOptimized.setStatus('mandatory')
rtgPorsProf = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7))
rtgPorsProfRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 1), )
if mibBuilder.loadTexts: rtgPorsProfRowStatusTable.setStatus('mandatory')
rtgPorsProfRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsProfIndex"))
if mibBuilder.loadTexts: rtgPorsProfRowStatusEntry.setStatus('mandatory')
rtgPorsProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfRowStatus.setStatus('mandatory')
rtgPorsProfComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsProfComponentName.setStatus('mandatory')
rtgPorsProfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsProfStorageType.setStatus('mandatory')
rtgPorsProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: rtgPorsProfIndex.setStatus('mandatory')
rtgPorsProfProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11), )
if mibBuilder.loadTexts: rtgPorsProfProvTable.setStatus('mandatory')
rtgPorsProfProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsProfIndex"))
if mibBuilder.loadTexts: rtgPorsProfProvEntry.setStatus('mandatory')
rtgPorsProfSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfSetupPriority.setStatus('mandatory')
rtgPorsProfHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfHoldingPriority.setStatus('mandatory')
rtgPorsProfRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 155520000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfRequiredTxBandwidth.setStatus('mandatory')
rtgPorsProfRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 155520000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfRequiredRxBandwidth.setStatus('mandatory')
rtgPorsProfRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('data')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfRequiredTrafficType.setStatus('mandatory')
rtgPorsProfPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfPermittedTrunkTypes.setStatus('mandatory')
rtgPorsProfRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfRequiredSecurity.setStatus('mandatory')
rtgPorsProfRequiredCustomerParm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfRequiredCustomerParm.setStatus('mandatory')
rtgPorsProfPathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfPathAttributeToMinimize.setStatus('mandatory')
rtgPorsProfMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfMaximumAcceptableCost.setStatus('mandatory')
rtgPorsProfMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfMaximumAcceptableDelay.setStatus('mandatory')
rtgPorsProfEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ep0", 0), ("ep1", 1), ("ep2", 2), ("sameAsApplication", 3))).clone('sameAsApplication')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfEmissionPriority.setStatus('mandatory')
rtgPorsProfDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sameAsApplication", 0), ("dp1", 1), ("dp2", 2), ("dp3", 3))).clone('sameAsApplication')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfDiscardPriority.setStatus('mandatory')
rtgPorsProfPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1))).clone('reRoutePath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfPathFailureAction.setStatus('mandatory')
rtgPorsProfBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfBumpPreference.setStatus('mandatory')
rtgPorsProfOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsProfOptimization.setStatus('mandatory')
rtgPorsProfUsrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 400), )
if mibBuilder.loadTexts: rtgPorsProfUsrTable.setStatus('mandatory')
rtgPorsProfUsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 400, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsProfIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsProfUsrValue"))
if mibBuilder.loadTexts: rtgPorsProfUsrEntry.setStatus('mandatory')
rtgPorsProfUsrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 7, 400, 1, 1), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsProfUsrValue.setStatus('mandatory')
rtgPorsMpath = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8))
rtgPorsMpathRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 1), )
if mibBuilder.loadTexts: rtgPorsMpathRowStatusTable.setStatus('mandatory')
rtgPorsMpathRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsMpathIndex"))
if mibBuilder.loadTexts: rtgPorsMpathRowStatusEntry.setStatus('mandatory')
rtgPorsMpathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsMpathRowStatus.setStatus('mandatory')
rtgPorsMpathComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsMpathComponentName.setStatus('mandatory')
rtgPorsMpathStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsMpathStorageType.setStatus('mandatory')
rtgPorsMpathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: rtgPorsMpathIndex.setStatus('mandatory')
rtgPorsMpathOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 12), )
if mibBuilder.loadTexts: rtgPorsMpathOperTable.setStatus('mandatory')
rtgPorsMpathOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsMpathIndex"))
if mibBuilder.loadTexts: rtgPorsMpathOperEntry.setStatus('mandatory')
rtgPorsMpathLastSetupFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 19, 20, 23))).clone(namedValues=NamedValues(("none", 0), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("farEndBusy", 12), ("unknownReason", 14), ("farEndNotReady", 15), ("serviceTypeMismatch", 17), ("bumped", 19), ("accessCardFailure", 20), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsMpathLastSetupFailureReason.setStatus('mandatory')
rtgPorsMpathLastSetupFailurePoint = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsMpathLastSetupFailurePoint.setStatus('mandatory')
rtgPorsMpathLastSetupFailedUser = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 12, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsMpathLastSetupFailedUser.setStatus('mandatory')
rtgPorsMpathRouteTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 408), )
if mibBuilder.loadTexts: rtgPorsMpathRouteTable.setStatus('mandatory')
rtgPorsMpathRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 408, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsMpathIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsMpathRouteIndex"))
if mibBuilder.loadTexts: rtgPorsMpathRouteEntry.setStatus('mandatory')
rtgPorsMpathRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 408, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: rtgPorsMpathRouteIndex.setStatus('mandatory')
rtgPorsMpathRouteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 408, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtgPorsMpathRouteValue.setStatus('mandatory')
rtgPorsMpathUsrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 409), )
if mibBuilder.loadTexts: rtgPorsMpathUsrTable.setStatus('mandatory')
rtgPorsMpathUsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 409, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BaseRoutingMIB", "rtgIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsMpathIndex"), (0, "Nortel-Magellan-Passport-PorsVcMIB", "rtgPorsMpathUsrValue"))
if mibBuilder.loadTexts: rtgPorsMpathUsrEntry.setStatus('mandatory')
rtgPorsMpathUsrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 40, 6, 8, 409, 1, 1), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtgPorsMpathUsrValue.setStatus('mandatory')
porsVcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37, 1))
porsVcGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37, 1, 5))
porsVcGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37, 1, 5, 1))
porsVcGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37, 1, 5, 1, 2))
porsVcCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37, 3))
porsVcCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37, 3, 5))
porsVcCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37, 3, 5, 1))
porsVcCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 37, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-PorsVcMIB", rtgRsSelectedRouteEntry=rtgRsSelectedRouteEntry, rtgRsPathAttributeToMinimize=rtgRsPathAttributeToMinimize, rtgPorsProfRequiredSecurity=rtgPorsProfRequiredSecurity, porsVcCapabilitiesBE00A=porsVcCapabilitiesBE00A, rtgRsSrdIndex=rtgRsSrdIndex, rtgRsRowStatus=rtgRsRowStatus, rtgRsTrafficType=rtgRsTrafficType, rtgRsRowStatusEntry=rtgRsRowStatusEntry, rtgRsRequiredTrunkModes=rtgRsRequiredTrunkModes, rtgPorsProfUsrValue=rtgPorsProfUsrValue, rtgPorsProfBumpPreference=rtgPorsProfBumpPreference, rtgPorsProfMaximumAcceptableCost=rtgPorsProfMaximumAcceptableCost, rtgRsCustomerParameter=rtgRsCustomerParameter, rtgRsSrdTable=rtgRsSrdTable, rtgPorsProfEmissionPriority=rtgPorsProfEmissionPriority, rtgRsIndex=rtgRsIndex, rtgRsPermittedTrunkTypes=rtgRsPermittedTrunkTypes, rtgRsRouteSelectionAttributes=rtgRsRouteSelectionAttributes, rtgPorsMpathLastSetupFailurePoint=rtgPorsMpathLastSetupFailurePoint, rtgPorsMpathRouteTable=rtgPorsMpathRouteTable, porsVcGroupBE00A=porsVcGroupBE00A, rtgPorsProfProvEntry=rtgPorsProfProvEntry, rtgRsRouteStatisticsSetupPriorityIndex=rtgRsRouteStatisticsSetupPriorityIndex, rtgRsControlsEntry=rtgRsControlsEntry, rtgRsRouteGatewayCostMetric=rtgRsRouteGatewayCostMetric, rtgRsPathAttributesEntry=rtgRsPathAttributesEntry, rtgPorsProfRequiredTxBandwidth=rtgPorsProfRequiredTxBandwidth, rtgPorsTotalPathsOptimized=rtgPorsTotalPathsOptimized, rtgPorsProfRequiredTrafficType=rtgPorsProfRequiredTrafficType, rtgPorsRowStatus=rtgPorsRowStatus, rtgRsRouteStatisticsTable=rtgRsRouteStatisticsTable, rtgPorsMpathComponentName=rtgPorsMpathComponentName, rtgRsStorageType=rtgRsStorageType, rtgRsControlsTable=rtgRsControlsTable, rtgPorsProf=rtgPorsProf, rtgRsSetupPriority=rtgRsSetupPriority, rtgRsDestination=rtgRsDestination, rtgRsDgnValue=rtgRsDgnValue, porsVcCapabilitiesBE00=porsVcCapabilitiesBE00, rtgRsRouteType=rtgRsRouteType, porsVcMIB=porsVcMIB, rtgPorsComponentName=rtgPorsComponentName, rtgPorsProfDiscardPriority=rtgPorsProfDiscardPriority, rtgRsRouteCostMetric=rtgRsRouteCostMetric, rtgRsBumpingPriority=rtgRsBumpingPriority, rtgPorsProfRowStatus=rtgPorsProfRowStatus, rtgRsPathAttributesTable=rtgRsPathAttributesTable, rtgPorsProfOptimization=rtgPorsProfOptimization, rtgPorsProfSetupPriority=rtgPorsProfSetupPriority, rtgPorsProfPermittedTrunkTypes=rtgPorsProfPermittedTrunkTypes, rtgPorsProfComponentName=rtgPorsProfComponentName, rtgRsReasonForNoRoute=rtgRsReasonForNoRoute, rtgPorsMpathOperTable=rtgPorsMpathOperTable, porsVcGroup=porsVcGroup, rtgPorsMpathRowStatusEntry=rtgPorsMpathRowStatusEntry, rtgPorsProfRequiredRxBandwidth=rtgPorsProfRequiredRxBandwidth, rtgPorsProfProvTable=rtgPorsProfProvTable, rtgPorsProfMaximumAcceptableDelay=rtgPorsProfMaximumAcceptableDelay, rtgRsOperationMode=rtgRsOperationMode, rtgPorsMpathRouteValue=rtgPorsMpathRouteValue, rtgPorsMpathUsrTable=rtgPorsMpathUsrTable, rtgRsRemoteName=rtgRsRemoteName, rtgPorsProfUsrTable=rtgPorsProfUsrTable, rtgRsRowStatusTable=rtgRsRowStatusTable, rtgPorsProfStorageType=rtgPorsProfStorageType, rtgPorsOptimizationInterval=rtgPorsOptimizationInterval, rtgPorsProvTable=rtgPorsProvTable, rtgRsDgnTable=rtgRsDgnTable, rtgPorsProfPathAttributeToMinimize=rtgPorsProfPathAttributeToMinimize, rtgPorsProfIndex=rtgPorsProfIndex, rtgPorsPathsOptimized=rtgPorsPathsOptimized, rtgPorsMpathRouteIndex=rtgPorsMpathRouteIndex, rtgRsSrdEntry=rtgRsSrdEntry, rtgRsRouteDelayMetric=rtgRsRouteDelayMetric, rtgRsSelectedRouteTable=rtgRsSelectedRouteTable, rtgRsRouteStatisticsStatisticsTableIndex=rtgRsRouteStatisticsStatisticsTableIndex, rtgRsSourceId=rtgRsSourceId, rtgRsLastRouteSelectionTime=rtgRsLastRouteSelectionTime, rtgPorsRowStatusTable=rtgPorsRowStatusTable, rtgPors=rtgPors, porsVcGroupBE=porsVcGroupBE, rtgPorsMpath=rtgPorsMpath, rtgPorsProfRequiredCustomerParm=rtgPorsProfRequiredCustomerParm, rtgRsMaximumAcceptableGatewayCost=rtgRsMaximumAcceptableGatewayCost, rtgRsRouteRequestor=rtgRsRouteRequestor, rtgRsDgnEntry=rtgRsDgnEntry, rtgPorsMpathRouteEntry=rtgPorsMpathRouteEntry, rtgRsMaximumTransmissionUnit=rtgRsMaximumTransmissionUnit, rtgRsAttributeNotMet=rtgRsAttributeNotMet, rtgPorsMpathUsrValue=rtgPorsMpathUsrValue, rtgPorsMpathUsrEntry=rtgPorsMpathUsrEntry, rtgPorsProvEntry=rtgPorsProvEntry, rtgPorsMpathLastSetupFailureReason=rtgPorsMpathLastSetupFailureReason, rtgPorsOptimizationProgress=rtgPorsOptimizationProgress, rtgPorsMpathStorageType=rtgPorsMpathStorageType, rtgRsRequiredRxBandwidth=rtgRsRequiredRxBandwidth, rtgPorsOptimizationPasses=rtgPorsOptimizationPasses, rtgPorsProfPathFailureAction=rtgPorsProfPathFailureAction, rtgPorsProfRowStatusTable=rtgPorsProfRowStatusTable, rtgPorsInfoTable=rtgPorsInfoTable, rtgPorsInfoEntry=rtgPorsInfoEntry, rtgPorsProfUsrEntry=rtgPorsProfUsrEntry, rtgRsComponentName=rtgRsComponentName, rtgPorsMpathLastSetupFailedUser=rtgPorsMpathLastSetupFailedUser, rtgPorsNextOptimizationTime=rtgPorsNextOptimizationTime, rtgRsRouteStatisticsEntry=rtgRsRouteStatisticsEntry, rtgPorsStorageType=rtgPorsStorageType, rtgPorsOptimizationState=rtgPorsOptimizationState, rtgRsSrdValue=rtgRsSrdValue, rtgRsBumpPreference=rtgRsBumpPreference, rtgPorsLastOptimizationTime=rtgPorsLastOptimizationTime, rtgPorsActiveConnections=rtgPorsActiveConnections, rtgRsMaximumAcceptableDelay=rtgRsMaximumAcceptableDelay, rtgPorsProfHoldingPriority=rtgPorsProfHoldingPriority, rtgPorsMpathRowStatusTable=rtgPorsMpathRowStatusTable, rtgPorsRowStatusEntry=rtgPorsRowStatusEntry, rtgPorsMpathOperEntry=rtgPorsMpathOperEntry, rtgRsGatewaySelectionAlg=rtgRsGatewaySelectionAlg, rtgRs=rtgRs, rtgPorsMpathRowStatus=rtgPorsMpathRowStatus, porsVcCapabilitiesBE=porsVcCapabilitiesBE, rtgPorsMpathIndex=rtgPorsMpathIndex, porsVcCapabilities=porsVcCapabilities, rtgRsSecurity=rtgRsSecurity, rtgRsRequiredTxBandwidth=rtgRsRequiredTxBandwidth, rtgRsMaximumAcceptableCost=rtgRsMaximumAcceptableCost, rtgRsRouteStatisticsValue=rtgRsRouteStatisticsValue, rtgPorsProfRowStatusEntry=rtgPorsProfRowStatusEntry, rtgPorsIndex=rtgPorsIndex, porsVcGroupBE00=porsVcGroupBE00)
