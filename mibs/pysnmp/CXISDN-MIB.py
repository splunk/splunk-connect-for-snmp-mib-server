#
# PySNMP MIB module CXISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXISDN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
Alias, SapIndex, cxISDN = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "SapIndex", "cxISDN")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, ModuleIdentity, Bits, ObjectIdentity, MibIdentifier, TimeTicks, Counter32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "ModuleIdentity", "Bits", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter32", "NotificationType", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
isdnSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnSoftwareVersion.setStatus('mandatory')
isdnTraps = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTraps.setStatus('mandatory')
isdnL3SapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20), )
if mibBuilder.loadTexts: isdnL3SapTable.setStatus('mandatory')
isdnL3SapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1), ).setIndexNames((0, "CXISDN-MIB", "isdnL3SapNumber"))
if mibBuilder.loadTexts: isdnL3SapEntry.setStatus('mandatory')
isdnL3SapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnL3SapNumber.setStatus('mandatory')
isdnL3SapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapRowStatus.setStatus('mandatory')
isdnL3SapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapAlias.setStatus('mandatory')
isdnL3SapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapCompanionAlias.setStatus('mandatory')
isdnL3SapUserNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapUserNetType.setStatus('mandatory')
isdnL3SapT303Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapT303Timer.setStatus('mandatory')
isdnL3SapT304Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapT304Timer.setStatus('mandatory')
isdnL3SapT305Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapT305Timer.setStatus('mandatory')
isdnL3SapT308Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapT308Timer.setStatus('mandatory')
isdnL3SapT310Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapT310Timer.setStatus('mandatory')
isdnL3SapT313Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapT313Timer.setStatus('mandatory')
isdnL3SapT318Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapT318Timer.setStatus('mandatory')
isdnL3SapT319Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapT319Timer.setStatus('mandatory')
isdnL3SapDefTimerCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDefCfg", 1), ("defCfg", 2))).clone('defCfg')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnL3SapDefTimerCfg.setStatus('mandatory')
isdnL3SapStatusEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noEvent", 1), ("badCfgVersion", 2), ("badDslID", 3), ("dslInUse", 4), ("dslNotInUse", 5), ("noNLCB", 6), ("nlcbInitErr", 7), ("badSwitchType", 8), ("nlcbPoolErr", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnL3SapStatusEvent.setStatus('mandatory')
isdnL3SapDslType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bri", 2), ("pri", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnL3SapDslType.setStatus('mandatory')
isdnL3SapBRIType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 20, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("u", 2), ("s-t", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnL3SapBRIType.setStatus('mandatory')
isdnCCSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21), )
if mibBuilder.loadTexts: isdnCCSapTable.setStatus('mandatory')
isdnCCSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1), ).setIndexNames((0, "CXISDN-MIB", "isdnCCSapNumber"))
if mibBuilder.loadTexts: isdnCCSapEntry.setStatus('mandatory')
isdnCCSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnCCSapNumber.setStatus('mandatory')
isdnCCSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapRowStatus.setStatus('mandatory')
isdnCCSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapAlias.setStatus('mandatory')
isdnCCSapSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unspecified", 1), ("bri-1TR6", 2), ("bri-5ESS", 3), ("bri-CCITT", 4), ("bri-DMS100", 5), ("bri-KDD", 6), ("bri-NET3", 7), ("bri-NI1", 8), ("bri-NI2", 9), ("bri-NTT", 10), ("bri-TS013", 11), ("bri-VN", 12))).clone('bri-NI1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapSwitchType.setStatus('mandatory')
isdnCCSapInitTerminal = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nit", 1), ("fit", 2))).clone('nit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapInitTerminal.setStatus('mandatory')
isdnCCSapDNRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapDNRouting.setStatus('mandatory')
isdnCCSapBearerRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapBearerRouting.setStatus('mandatory')
isdnCCSapBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("voice-call", 1), ("circuit-sw-data-call", 2), ("packet-sw-data-call", 3))).clone('circuit-sw-data-call')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapBearerType.setStatus('mandatory')
isdnCCSapDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapDirectoryNumber.setStatus('mandatory')
isdnCCSapSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapSPID.setStatus('mandatory')
isdnCCSapSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapSubAddress.setStatus('mandatory')
isdnCCSapT415Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCCSapT415Timer.setStatus('mandatory')
isdnCCSapStatusEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noEvent", 1), ("badCfgVersion", 2), ("badDslID", 3), ("badCes", 4), ("badSwitchType", 5), ("cbPollErr", 6), ("dslInUseErr", 7), ("dslNotCfgErr", 8), ("dslNotInUse", 9), ("noHostCB", 10), ("noT415", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnCCSapStatusEvent.setStatus('mandatory')
isdnCCSapInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnCCSapInUse.setStatus('mandatory')
isdnCCSapActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 21, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnCCSapActiveCalls.setStatus('mandatory')
isdnDebugTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 22), )
if mibBuilder.loadTexts: isdnDebugTable.setStatus('mandatory')
isdnDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 22, 1), ).setIndexNames((0, "CXISDN-MIB", "isdnDebugNumber"))
if mibBuilder.loadTexts: isdnDebugEntry.setStatus('mandatory')
isdnDebugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 22, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnDebugNumber.setStatus('mandatory')
isdnDebugCCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 22, 1, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: isdnDebugCCB.setStatus('mandatory')
isdnDebugHCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 22, 1, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: isdnDebugHCB.setStatus('mandatory')
isdnDebugCCDsl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 22, 1, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: isdnDebugCCDsl.setStatus('mandatory')
isdnDebugNLCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32, 22, 1, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: isdnDebugNLCB.setStatus('mandatory')
isdnL3SapStatusIndication = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32) + (0,1)).setObjects(("CXISDN-MIB", "isdnL3SapNumber"), ("CXISDN-MIB", "isdnL3SapStatusEvent"))
isdnCCSapStatusIndication = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 32) + (0,2)).setObjects(("CXISDN-MIB", "isdnCCSapNumber"), ("CXISDN-MIB", "isdnCCSapStatusEvent"))
mibBuilder.exportSymbols("CXISDN-MIB", isdnL3SapT304Timer=isdnL3SapT304Timer, isdnCCSapStatusEvent=isdnCCSapStatusEvent, isdnL3SapCompanionAlias=isdnL3SapCompanionAlias, isdnL3SapTable=isdnL3SapTable, isdnSoftwareVersion=isdnSoftwareVersion, isdnDebugCCB=isdnDebugCCB, isdnL3SapUserNetType=isdnL3SapUserNetType, isdnDebugTable=isdnDebugTable, isdnL3SapRowStatus=isdnL3SapRowStatus, isdnL3SapT319Timer=isdnL3SapT319Timer, isdnDebugNumber=isdnDebugNumber, isdnL3SapT308Timer=isdnL3SapT308Timer, isdnL3SapAlias=isdnL3SapAlias, isdnCCSapStatusIndication=isdnCCSapStatusIndication, isdnCCSapInUse=isdnCCSapInUse, isdnCCSapT415Timer=isdnCCSapT415Timer, isdnCCSapActiveCalls=isdnCCSapActiveCalls, isdnCCSapSubAddress=isdnCCSapSubAddress, isdnL3SapStatusIndication=isdnL3SapStatusIndication, isdnCCSapSwitchType=isdnCCSapSwitchType, isdnL3SapT313Timer=isdnL3SapT313Timer, isdnCCSapBearerRouting=isdnCCSapBearerRouting, isdnL3SapDslType=isdnL3SapDslType, isdnL3SapT303Timer=isdnL3SapT303Timer, isdnCCSapEntry=isdnCCSapEntry, isdnL3SapBRIType=isdnL3SapBRIType, isdnL3SapT318Timer=isdnL3SapT318Timer, isdnL3SapEntry=isdnL3SapEntry, isdnTraps=isdnTraps, isdnL3SapDefTimerCfg=isdnL3SapDefTimerCfg, isdnCCSapDNRouting=isdnCCSapDNRouting, isdnCCSapInitTerminal=isdnCCSapInitTerminal, isdnCCSapSPID=isdnCCSapSPID, isdnL3SapStatusEvent=isdnL3SapStatusEvent, isdnDebugEntry=isdnDebugEntry, isdnCCSapRowStatus=isdnCCSapRowStatus, isdnCCSapAlias=isdnCCSapAlias, isdnDebugNLCB=isdnDebugNLCB, isdnCCSapNumber=isdnCCSapNumber, isdnL3SapNumber=isdnL3SapNumber, isdnL3SapT310Timer=isdnL3SapT310Timer, isdnCCSapDirectoryNumber=isdnCCSapDirectoryNumber, isdnDebugHCB=isdnDebugHCB, isdnL3SapT305Timer=isdnL3SapT305Timer, isdnCCSapTable=isdnCCSapTable, isdnDebugCCDsl=isdnDebugCCDsl, isdnCCSapBearerType=isdnCCSapBearerType)
