#
# PySNMP MIB module APPIAN-PPORT-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-DS3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:08:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisRingId, acChassisCurrentTime = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisRingId", "acChassisCurrentTime")
AcPortNumber, AcSlotNumber, AcAdminStatus, AcOpStatus, AcNodeId, acPport = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcPortNumber", "AcSlotNumber", "AcAdminStatus", "AcOpStatus", "AcNodeId", "acPport")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter32, Bits, Integer32, TimeTicks, Counter64, ObjectIdentity, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "Bits", "Integer32", "TimeTicks", "Counter64", "ObjectIdentity", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "IpAddress", "Unsigned32")
TextualConvention, TimeStamp, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue")
acDs3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5))
if mibBuilder.loadTexts: acDs3.setLastUpdated('0003190000Z')
if mibBuilder.loadTexts: acDs3.setOrganization('Appian Communications, Inc.')
acDs3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1), )
if mibBuilder.loadTexts: acDs3ConfigTable.setStatus('current')
acDs3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3ConfigEntry.setStatus('current')
acDs3ConfigNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ConfigNodeId.setStatus('current')
acDs3ConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ConfigSlot.setStatus('current')
acDs3ConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ConfigPort.setStatus('current')
acDs3ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigAdminStatus.setStatus('current')
acDs3ConfigOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 5), AcOpStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigOpStatus.setStatus('current')
acDs3ConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3Access", 1), ("ds3Network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigType.setStatus('current')
acDs3ConfigTimeElapsedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedInterval.setStatus('current')
acDs3ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigValidIntervals.setStatus('current')
acDs3ConfigTimeElapsedDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedDay.setStatus('current')
acDs3ConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigValidDays.setStatus('current')
acDs3ConfigTimeElapsedFarEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedFarEndInterval.setStatus('current')
acDs3ConfigValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigValidFarEndIntervals.setStatus('current')
acDs3ConfigTimeElapsedFarEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedFarEndDay.setStatus('current')
acDs3ConfigValidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigValidFarEndDays.setStatus('current')
acDs3ConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3other", 1), ("ds3M23", 2), ("ds3SYNTRAN", 3), ("ds3CbitParity", 4), ("ds3ClearChannel", 5))).clone('ds3CbitParity')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLineType.setStatus('current')
acDs3ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds3Other", 1), ("ds3B3ZS", 2), ("e3HDB3", 3))).clone('ds3B3ZS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLineCoding.setStatus('current')
acDs3ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3SendNoCode", 1), ("ds3SendLineCode", 2), ("ds3SendPayloadCode", 3), ("ds3SendResetCode", 4), ("ds3SendTestPattern", 5))).clone('ds3SendNoCode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigSendCode.setStatus('current')
acDs3ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigCircuitIdentifier.setStatus('current')
acDs3ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3NoLoop", 1), ("ds3PayloadLoop", 2), ("ds3LineLoop", 3), ("ds3OtherLoop", 4), ("ds3InwardLoop", 5))).clone('ds3NoLoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLoopbackConfig.setStatus('current')
acDs3ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigLineStatus.setStatus('current')
acDs3ConfigTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3))).clone('localTiming')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigTransmitClockSource.setStatus('current')
acDs3ConfigInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigInvalidIntervals.setStatus('current')
acDs3ConfigInvalidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigInvalidDays.setStatus('current')
acDs3ConfigInvalidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigInvalidFarEndIntervals.setStatus('current')
acDs3ConfigInvalidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigInvalidFarEndDays.setStatus('current')
acDs3ConfigLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setUnits('meters').setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLineLength.setStatus('current')
acDs3ConfigLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigLineStatusLastChange.setStatus('current')
acDs3ConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLineStatusChangeTrapEnable.setStatus('current')
acDs3ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigLoopbackStatus.setStatus('current')
acDs3ConfigChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledDs1", 2), ("enabledDs2", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigChannelization.setStatus('current')
acDs3ConfigDs1ForRemoteLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigDs1ForRemoteLoop.setStatus('current')
acDs3ConfigFarEndEquipCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndEquipCode.setStatus('current')
acDs3ConfigFarEndLocationIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndLocationIDCode.setStatus('current')
acDs3ConfigFarEndFrameIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndFrameIDCode.setStatus('current')
acDs3ConfigFarEndUnitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndUnitCode.setStatus('current')
acDs3ConfigFarEndFacilityIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndFacilityIDCode.setStatus('current')
acDs3ConfigInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('DS-3/TDM Interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigInterfaceName.setStatus('current')
acDs3IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2), )
if mibBuilder.loadTexts: acDs3IntervalTable.setStatus('current')
acDs3IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3IntervalNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3IntervalSlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3IntervalPort"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3IntervalNumber"))
if mibBuilder.loadTexts: acDs3IntervalEntry.setStatus('current')
acDs3IntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3IntervalNodeId.setStatus('current')
acDs3IntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3IntervalSlot.setStatus('current')
acDs3IntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3IntervalPort.setStatus('current')
acDs3IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3IntervalNumber.setStatus('current')
acDs3IntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalValidStats.setStatus('current')
acDs3IntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3IntervalResetStats.setStatus('current')
acDs3IntervalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalPESs.setStatus('current')
acDs3IntervalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalPSESs.setStatus('current')
acDs3IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalSEFSs.setStatus('current')
acDs3IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalUASs.setStatus('current')
acDs3IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalLCVs.setStatus('current')
acDs3IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalPCVs.setStatus('current')
acDs3IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalLESs.setStatus('current')
acDs3IntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalCCVs.setStatus('current')
acDs3IntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalCESs.setStatus('current')
acDs3IntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalCSESs.setStatus('current')
acDs3DayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3), )
if mibBuilder.loadTexts: acDs3DayTable.setStatus('current')
acDs3DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3DayNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3DaySlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3DayPort"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3DayNumber"))
if mibBuilder.loadTexts: acDs3DayEntry.setStatus('current')
acDs3DayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3DayNodeId.setStatus('current')
acDs3DaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3DaySlot.setStatus('current')
acDs3DayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3DayPort.setStatus('current')
acDs3DayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3DayNumber.setStatus('current')
acDs3DayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayValidStats.setStatus('current')
acDs3DayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3DayResetStats.setStatus('current')
acDs3DayPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayPESs.setStatus('current')
acDs3DayPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayPSESs.setStatus('current')
acDs3DaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DaySEFSs.setStatus('current')
acDs3DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayUASs.setStatus('current')
acDs3DayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayLCVs.setStatus('current')
acDs3DayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayPCVs.setStatus('current')
acDs3DayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayLESs.setStatus('current')
acDs3DayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayCCVs.setStatus('current')
acDs3DayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayCESs.setStatus('current')
acDs3DayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayCSESs.setStatus('current')
acDs3FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4), )
if mibBuilder.loadTexts: acDs3FarEndIntervalTable.setStatus('current')
acDs3FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndIntervalNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndIntervalSlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndIntervalPort"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndIntervalNumber"))
if mibBuilder.loadTexts: acDs3FarEndIntervalEntry.setStatus('current')
acDs3FarEndIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndIntervalNodeId.setStatus('current')
acDs3FarEndIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndIntervalSlot.setStatus('current')
acDs3FarEndIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndIntervalPort.setStatus('current')
acDs3FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndIntervalNumber.setStatus('current')
acDs3FarEndIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalValidStats.setStatus('current')
acDs3FarEndIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3FarEndIntervalResetStats.setStatus('current')
acDs3FarEndIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalCESs.setStatus('current')
acDs3FarEndIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalCSESs.setStatus('current')
acDs3FarEndIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalCCVs.setStatus('current')
acDs3FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalUASs.setStatus('current')
acDs3FarEndDayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5), )
if mibBuilder.loadTexts: acDs3FarEndDayTable.setStatus('current')
acDs3FarEndDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndDayNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndDaySlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndDayPort"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndDayNumber"))
if mibBuilder.loadTexts: acDs3FarEndDayEntry.setStatus('current')
acDs3FarEndDayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndDayNodeId.setStatus('current')
acDs3FarEndDaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndDaySlot.setStatus('current')
acDs3FarEndDayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndDayPort.setStatus('current')
acDs3FarEndDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndDayNumber.setStatus('current')
acDs3FarEndDayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayValidStats.setStatus('current')
acDs3FarEndDayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3FarEndDayResetStats.setStatus('current')
acDs3FarEndDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayCESs.setStatus('current')
acDs3FarEndDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayCSESs.setStatus('current')
acDs3FarEndDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayCCVs.setStatus('current')
acDs3FarEndDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayUASs.setStatus('current')
acDs3ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6), )
if mibBuilder.loadTexts: acDs3ThresholdTable.setStatus('current')
acDs3ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ThresholdEntry.setStatus('current')
acDs3ThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ThresholdNodeId.setStatus('current')
acDs3ThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ThresholdSlot.setStatus('current')
acDs3ThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ThresholdPort.setStatus('current')
acDs3ThresholdNEIntervalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPESs.setStatus('current')
acDs3ThresholdNEIntervalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPSESs.setStatus('current')
acDs3ThresholdNEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalSEFSs.setStatus('current')
acDs3ThresholdNEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalUASs.setStatus('current')
acDs3ThresholdNEIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalLCVs.setStatus('current')
acDs3ThresholdNEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPCVs.setStatus('current')
acDs3ThresholdNEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalLESs.setStatus('current')
acDs3ThresholdNEIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCCVs.setStatus('current')
acDs3ThresholdNEIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCESs.setStatus('current')
acDs3ThresholdNEIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCSESs.setStatus('current')
acDs3ThresholdNEDayPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayPESs.setStatus('current')
acDs3ThresholdNEDayPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayPSESs.setStatus('current')
acDs3ThresholdNEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDaySEFSs.setStatus('current')
acDs3ThresholdNEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayUASs.setStatus('current')
acDs3ThresholdNEDayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayLCVs.setStatus('current')
acDs3ThresholdNEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayPCVs.setStatus('current')
acDs3ThresholdNEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayLESs.setStatus('current')
acDs3ThresholdNEDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayCCVs.setStatus('current')
acDs3ThresholdNEDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayCESs.setStatus('current')
acDs3ThresholdNEDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayCSESs.setStatus('current')
acDs3ThresholdFEIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCESs.setStatus('current')
acDs3ThresholdFEIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCSESs.setStatus('current')
acDs3ThresholdFEIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCCVs.setStatus('current')
acDs3ThresholdFEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalUASs.setStatus('current')
acDs3ThresholdFEDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEDayCESs.setStatus('current')
acDs3ThresholdFEDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEDayCSESs.setStatus('current')
acDs3ThresholdFEDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEDayCCVs.setStatus('current')
acDs3ThresholdFEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEDayUASs.setStatus('current')
acDs3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0))
acDs3LineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigLineStatus"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigLineStatusLastChange"))
if mibBuilder.loadTexts: acDs3LineStatusChange.setStatus('current')
acDs3StatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3StatsResetTrap.setStatus('current')
acDs3CfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3CfgErrorTrap.setStatus('current')
acDs3LinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3LinkDownTrap.setStatus('current')
acDs3LinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3LinkUpTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalPESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 6)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPESsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalPSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 7)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPSESsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 8)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalSEFSsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 9)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalUASsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 10)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalLCVsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 11)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPCVsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 12)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalLESsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 13)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCCVsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 14)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCESsTrap.setStatus('current')
acDs3ExceededThresholdNEIntervalCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 15)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCSESsTrap.setStatus('current')
acDs3ExceededThresholdNEDayPESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 16)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPESsTrap.setStatus('current')
acDs3ExceededThresholdNEDayPSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 17)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPSESsTrap.setStatus('current')
acDs3ExceededThresholdNEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 18)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDaySEFSsTrap.setStatus('current')
acDs3ExceededThresholdNEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 19)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayUASsTrap.setStatus('current')
acDs3ExceededThresholdNEDayLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 20)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayLCVsTrap.setStatus('current')
acDs3ExceededThresholdNEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 21)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPCVsTrap.setStatus('current')
acDs3ExceededThresholdNEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 22)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayLESsTrap.setStatus('current')
acDs3ExceededThresholdNEDayCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 23)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCCVsTrap.setStatus('current')
acDs3ExceededThresholdNEDayCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 24)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCESsTrap.setStatus('current')
acDs3ExceededThresholdNEDayCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 25)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCSESsTrap.setStatus('current')
acDs3ExceededThresholdFEIntervalCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 26)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCESsTrap.setStatus('current')
acDs3ExceededThresholdFEIntervalCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 27)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCSESsTrap.setStatus('current')
acDs3ExceededThresholdFEIntervalCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 28)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCCVsTrap.setStatus('current')
acDs3ExceededThresholdFEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 29)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalUASsTrap.setStatus('current')
acDs3ExceededThresholdFEDayCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 30)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCESsTrap.setStatus('current')
acDs3ExceededThresholdFEDayCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 31)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCSESsTrap.setStatus('current')
acDs3ExceededThresholdFEDayCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 32)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCCVsTrap.setStatus('current')
acDs3ExceededThresholdFEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 33)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayUASsTrap.setStatus('current')
mibBuilder.exportSymbols("APPIAN-PPORT-DS3-MIB", acDs3ThresholdNEIntervalPCVs=acDs3ThresholdNEIntervalPCVs, acDs3ExceededThresholdFEDayCESsTrap=acDs3ExceededThresholdFEDayCESsTrap, acDs3FarEndIntervalNumber=acDs3FarEndIntervalNumber, acDs3ExceededThresholdNEIntervalLCVsTrap=acDs3ExceededThresholdNEIntervalLCVsTrap, acDs3ExceededThresholdNEIntervalPCVsTrap=acDs3ExceededThresholdNEIntervalPCVsTrap, PYSNMP_MODULE_ID=acDs3, acDs3DayTable=acDs3DayTable, acDs3ThresholdTable=acDs3ThresholdTable, acDs3IntervalPCVs=acDs3IntervalPCVs, acDs3ThresholdNEIntervalSEFSs=acDs3ThresholdNEIntervalSEFSs, acDs3Traps=acDs3Traps, acDs3FarEndDayEntry=acDs3FarEndDayEntry, acDs3ExceededThresholdNEDayLESsTrap=acDs3ExceededThresholdNEDayLESsTrap, acDs3DayEntry=acDs3DayEntry, acDs3ThresholdEntry=acDs3ThresholdEntry, acDs3ExceededThresholdFEDayUASsTrap=acDs3ExceededThresholdFEDayUASsTrap, acDs3FarEndDayValidStats=acDs3FarEndDayValidStats, acDs3ConfigLoopbackConfig=acDs3ConfigLoopbackConfig, acDs3DayValidStats=acDs3DayValidStats, acDs3ExceededThresholdFEIntervalCSESsTrap=acDs3ExceededThresholdFEIntervalCSESsTrap, acDs3ConfigTimeElapsedFarEndDay=acDs3ConfigTimeElapsedFarEndDay, acDs3ConfigInvalidFarEndDays=acDs3ConfigInvalidFarEndDays, acDs3DayCSESs=acDs3DayCSESs, acDs3ThresholdNEIntervalCESs=acDs3ThresholdNEIntervalCESs, acDs3ThresholdNEDaySEFSs=acDs3ThresholdNEDaySEFSs, acDs3ConfigDs1ForRemoteLoop=acDs3ConfigDs1ForRemoteLoop, acDs3ExceededThresholdFEIntervalUASsTrap=acDs3ExceededThresholdFEIntervalUASsTrap, acDs3ThresholdNEDayLESs=acDs3ThresholdNEDayLESs, acDs3ThresholdFEDayCCVs=acDs3ThresholdFEDayCCVs, acDs3CfgErrorTrap=acDs3CfgErrorTrap, acDs3ThresholdNEIntervalLCVs=acDs3ThresholdNEIntervalLCVs, acDs3IntervalPSESs=acDs3IntervalPSESs, acDs3ThresholdNEIntervalLESs=acDs3ThresholdNEIntervalLESs, acDs3ExceededThresholdNEIntervalUASsTrap=acDs3ExceededThresholdNEIntervalUASsTrap, acDs3ThresholdFEIntervalCCVs=acDs3ThresholdFEIntervalCCVs, acDs3DayLESs=acDs3DayLESs, acDs3IntervalPort=acDs3IntervalPort, acDs3ExceededThresholdFEDayCCVsTrap=acDs3ExceededThresholdFEDayCCVsTrap, acDs3ConfigTimeElapsedInterval=acDs3ConfigTimeElapsedInterval, acDs3ExceededThresholdNEDayUASsTrap=acDs3ExceededThresholdNEDayUASsTrap, acDs3FarEndIntervalValidStats=acDs3FarEndIntervalValidStats, acDs3ThresholdNodeId=acDs3ThresholdNodeId, acDs3DayUASs=acDs3DayUASs, acDs3ConfigType=acDs3ConfigType, acDs3FarEndIntervalTable=acDs3FarEndIntervalTable, acDs3LineStatusChange=acDs3LineStatusChange, acDs3ConfigEntry=acDs3ConfigEntry, acDs3DayPSESs=acDs3DayPSESs, acDs3DayLCVs=acDs3DayLCVs, acDs3ConfigChannelization=acDs3ConfigChannelization, acDs3ThresholdNEIntervalPESs=acDs3ThresholdNEIntervalPESs, acDs3ConfigFarEndFrameIDCode=acDs3ConfigFarEndFrameIDCode, acDs3ConfigTimeElapsedDay=acDs3ConfigTimeElapsedDay, acDs3IntervalCESs=acDs3IntervalCESs, acDs3FarEndDayUASs=acDs3FarEndDayUASs, acDs3FarEndIntervalNodeId=acDs3FarEndIntervalNodeId, acDs3ExceededThresholdNEDayCESsTrap=acDs3ExceededThresholdNEDayCESsTrap, acDs3ThresholdNEDayUASs=acDs3ThresholdNEDayUASs, acDs3ConfigFarEndFacilityIDCode=acDs3ConfigFarEndFacilityIDCode, acDs3ThresholdNEDayCESs=acDs3ThresholdNEDayCESs, acDs3ConfigOpStatus=acDs3ConfigOpStatus, acDs3FarEndIntervalCESs=acDs3FarEndIntervalCESs, acDs3FarEndDayCSESs=acDs3FarEndDayCSESs, acDs3ConfigLoopbackStatus=acDs3ConfigLoopbackStatus, acDs3ThresholdNEDayPESs=acDs3ThresholdNEDayPESs, acDs3ConfigValidIntervals=acDs3ConfigValidIntervals, acDs3IntervalTable=acDs3IntervalTable, acDs3FarEndIntervalEntry=acDs3FarEndIntervalEntry, acDs3ThresholdNEDayCSESs=acDs3ThresholdNEDayCSESs, acDs3ExceededThresholdNEDayPCVsTrap=acDs3ExceededThresholdNEDayPCVsTrap, acDs3=acDs3, acDs3ThresholdNEIntervalPSESs=acDs3ThresholdNEIntervalPSESs, acDs3ConfigLineLength=acDs3ConfigLineLength, acDs3IntervalNumber=acDs3IntervalNumber, acDs3ConfigLineStatusChangeTrapEnable=acDs3ConfigLineStatusChangeTrapEnable, acDs3ConfigFarEndUnitCode=acDs3ConfigFarEndUnitCode, acDs3DayPort=acDs3DayPort, acDs3ThresholdSlot=acDs3ThresholdSlot, acDs3ThresholdNEIntervalCCVs=acDs3ThresholdNEIntervalCCVs, acDs3ThresholdNEDayPSESs=acDs3ThresholdNEDayPSESs, acDs3ConfigInvalidFarEndIntervals=acDs3ConfigInvalidFarEndIntervals, acDs3FarEndDayPort=acDs3FarEndDayPort, acDs3ThresholdPort=acDs3ThresholdPort, acDs3ExceededThresholdNEDayLCVsTrap=acDs3ExceededThresholdNEDayLCVsTrap, acDs3ConfigInvalidIntervals=acDs3ConfigInvalidIntervals, acDs3ExceededThresholdNEDaySEFSsTrap=acDs3ExceededThresholdNEDaySEFSsTrap, acDs3ThresholdNEDayPCVs=acDs3ThresholdNEDayPCVs, acDs3IntervalUASs=acDs3IntervalUASs, acDs3ConfigTransmitClockSource=acDs3ConfigTransmitClockSource, acDs3ExceededThresholdFEIntervalCCVsTrap=acDs3ExceededThresholdFEIntervalCCVsTrap, acDs3ConfigSendCode=acDs3ConfigSendCode, acDs3FarEndDayCCVs=acDs3FarEndDayCCVs, acDs3ExceededThresholdFEDayCSESsTrap=acDs3ExceededThresholdFEDayCSESsTrap, acDs3ThresholdNEDayLCVs=acDs3ThresholdNEDayLCVs, acDs3FarEndIntervalResetStats=acDs3FarEndIntervalResetStats, acDs3ConfigLineStatusLastChange=acDs3ConfigLineStatusLastChange, acDs3ExceededThresholdNEDayPSESsTrap=acDs3ExceededThresholdNEDayPSESsTrap, acDs3IntervalSlot=acDs3IntervalSlot, acDs3IntervalResetStats=acDs3IntervalResetStats, acDs3ExceededThresholdNEIntervalPSESsTrap=acDs3ExceededThresholdNEIntervalPSESsTrap, acDs3ExceededThresholdNEDayCCVsTrap=acDs3ExceededThresholdNEDayCCVsTrap, acDs3IntervalCCVs=acDs3IntervalCCVs, acDs3FarEndDaySlot=acDs3FarEndDaySlot, acDs3ThresholdFEDayCSESs=acDs3ThresholdFEDayCSESs, acDs3ConfigPort=acDs3ConfigPort, acDs3ConfigLineType=acDs3ConfigLineType, acDs3DayResetStats=acDs3DayResetStats, acDs3ConfigValidDays=acDs3ConfigValidDays, acDs3ConfigTimeElapsedFarEndInterval=acDs3ConfigTimeElapsedFarEndInterval, acDs3DayCCVs=acDs3DayCCVs, acDs3DayNumber=acDs3DayNumber, acDs3ConfigSlot=acDs3ConfigSlot, acDs3ConfigFarEndLocationIDCode=acDs3ConfigFarEndLocationIDCode, acDs3FarEndDayCESs=acDs3FarEndDayCESs, acDs3ThresholdNEDayCCVs=acDs3ThresholdNEDayCCVs, acDs3FarEndIntervalCCVs=acDs3FarEndIntervalCCVs, acDs3DayNodeId=acDs3DayNodeId, acDs3ConfigValidFarEndDays=acDs3ConfigValidFarEndDays, acDs3IntervalSEFSs=acDs3IntervalSEFSs, acDs3IntervalLCVs=acDs3IntervalLCVs, acDs3ExceededThresholdNEIntervalPESsTrap=acDs3ExceededThresholdNEIntervalPESsTrap, acDs3DaySlot=acDs3DaySlot, acDs3ExceededThresholdNEIntervalSEFSsTrap=acDs3ExceededThresholdNEIntervalSEFSsTrap, acDs3FarEndDayTable=acDs3FarEndDayTable, acDs3ConfigFarEndEquipCode=acDs3ConfigFarEndEquipCode, acDs3ThresholdFEIntervalUASs=acDs3ThresholdFEIntervalUASs, acDs3ConfigLineCoding=acDs3ConfigLineCoding, acDs3DayCESs=acDs3DayCESs, acDs3FarEndDayNodeId=acDs3FarEndDayNodeId, acDs3DayPESs=acDs3DayPESs, acDs3IntervalPESs=acDs3IntervalPESs, acDs3DayPCVs=acDs3DayPCVs, acDs3IntervalNodeId=acDs3IntervalNodeId, acDs3ConfigTable=acDs3ConfigTable, acDs3ExceededThresholdFEIntervalCESsTrap=acDs3ExceededThresholdFEIntervalCESsTrap, acDs3ThresholdNEIntervalCSESs=acDs3ThresholdNEIntervalCSESs, acDs3FarEndIntervalCSESs=acDs3FarEndIntervalCSESs, acDs3ExceededThresholdNEDayCSESsTrap=acDs3ExceededThresholdNEDayCSESsTrap, acDs3IntervalEntry=acDs3IntervalEntry, acDs3ConfigInvalidDays=acDs3ConfigInvalidDays, acDs3ExceededThresholdNEIntervalCESsTrap=acDs3ExceededThresholdNEIntervalCESsTrap, acDs3ConfigCircuitIdentifier=acDs3ConfigCircuitIdentifier, acDs3ConfigNodeId=acDs3ConfigNodeId, acDs3LinkDownTrap=acDs3LinkDownTrap, acDs3ThresholdFEIntervalCSESs=acDs3ThresholdFEIntervalCSESs, acDs3ExceededThresholdNEIntervalLESsTrap=acDs3ExceededThresholdNEIntervalLESsTrap, acDs3ExceededThresholdNEIntervalCSESsTrap=acDs3ExceededThresholdNEIntervalCSESsTrap, acDs3ConfigValidFarEndIntervals=acDs3ConfigValidFarEndIntervals, acDs3ThresholdFEDayUASs=acDs3ThresholdFEDayUASs, acDs3IntervalLESs=acDs3IntervalLESs, acDs3FarEndIntervalPort=acDs3FarEndIntervalPort, acDs3FarEndIntervalUASs=acDs3FarEndIntervalUASs, acDs3ThresholdFEDayCESs=acDs3ThresholdFEDayCESs, acDs3StatsResetTrap=acDs3StatsResetTrap, acDs3ExceededThresholdNEIntervalCCVsTrap=acDs3ExceededThresholdNEIntervalCCVsTrap, acDs3ConfigLineStatus=acDs3ConfigLineStatus, acDs3ThresholdNEIntervalUASs=acDs3ThresholdNEIntervalUASs, acDs3IntervalCSESs=acDs3IntervalCSESs, acDs3ConfigInterfaceName=acDs3ConfigInterfaceName, acDs3DaySEFSs=acDs3DaySEFSs, acDs3ThresholdFEIntervalCESs=acDs3ThresholdFEIntervalCESs, acDs3LinkUpTrap=acDs3LinkUpTrap, acDs3FarEndDayNumber=acDs3FarEndDayNumber, acDs3FarEndDayResetStats=acDs3FarEndDayResetStats, acDs3IntervalValidStats=acDs3IntervalValidStats, acDs3FarEndIntervalSlot=acDs3FarEndIntervalSlot, acDs3ExceededThresholdNEDayPESsTrap=acDs3ExceededThresholdNEDayPESsTrap, acDs3ConfigAdminStatus=acDs3ConfigAdminStatus)
