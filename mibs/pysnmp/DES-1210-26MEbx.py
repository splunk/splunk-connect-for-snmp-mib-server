#
# PySNMP MIB module DES-1210-26MEbx (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES-1210-26MEbx
# Produced by pysmi-0.3.4 at Mon Apr 29 18:23:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dBridge, dot1dBasePort, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBridge", "dot1dBasePort", "dot1dBasePortEntry")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpSecurityLevel, SnmpAdminString, SnmpEngineID = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpSecurityLevel", "SnmpAdminString", "SnmpEngineID")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, MibIdentifier, Integer32, ObjectIdentity, Counter32, Unsigned32, Counter64, NotificationType, enterprises, ModuleIdentity, TimeTicks, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "MibIdentifier", "Integer32", "ObjectIdentity", "Counter32", "Unsigned32", "Counter64", "NotificationType", "enterprises", "ModuleIdentity", "TimeTicks", "Gauge32", "Bits")
DisplayString, MacAddress, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "RowStatus", "TextualConvention")
des_1210_26mebx = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1)).setLabel("des-1210-26mebx")
des_1210_26mebx.setRevisions(('2017-03-10 00:00', '2017-02-23 00:00', '2017-02-16 00:00', '2017-01-13 00:00', '2017-01-19 00:00', '2016-12-21 00:00', '2016-12-02 00:00', '2016-11-25 00:00', '2016-11-15 00:00', '2016-10-24 00:00', '2016-10-20 00:00', '2016-10-14 00:00', '2016-10-07 00:00', '2016-09-21 00:00', '2016-08-18 00:00', '2016-08-03 00:00', '2016-06-21 00:00', '2016-05-30 00:00', '2016-05-20 00:00', '2016-05-11 00:00', '2016-03-24 00:00', '2016-03-10 00:00', '2016-01-15 00:00', '2015-12-31 00:00', '2015-11-06 00:00', '2015-10-29 00:00', '2015-10-23 00:00', '2015-10-07 00:00', '2015-10-01 00:00', '2015-07-23 00:00', '2015-07-08 00:00', '2015-06-03 00:00', '2015-04-16 00:00', '2014-03-06 00:00',))
if mibBuilder.loadTexts: des_1210_26mebx.setLastUpdated('201703100000Z')
if mibBuilder.loadTexts: des_1210_26mebx.setOrganization('DES-1210-26-BX-06-10-012.mib')
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DES1210SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75)).setLabel("dlink-DES1210SeriesProd")
des_1210_26me = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16)).setLabel("des-1210-26me")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class OwnerString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1))
firmwareInfoImage1 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 31, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 4))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5))
companySTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10))
companyGVRPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 18))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22))
companyAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23))
companyGuestVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 24))
companyMacNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25))
companyISMVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 29))
companyTrapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30))
sysFirmwareInfomation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 31))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32))
companyCPUInterfaceFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33))
companyStaticARP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 34))
companyCableDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35))
companyVLANTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 36))
companyQinQ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38))
companySMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40))
companyStaticRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42))
companyLimitIp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45))
companyGratuitousARP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48))
companyMulticastFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 49))
companyNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50))
companyEoam = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51))
companyDuld = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52))
companyMacBasedVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70))
companyBPDUAttack = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77))
companyDHCPv6Relay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86))
companyMldsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88))
companyPPPoE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98))
companyDoSCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99))
companyAgentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100))
companyProtocolVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101))
companyL2PT = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102))
companySfpVendorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104))
companyDDM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105))
companyFTPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120))
companyswLedPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 121))
companyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 125))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 1225), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGroupInterval.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("config-1", 3), ("config-2", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysPortCtrlIndex"), (0, "DES-1210-26MEbx", "sysPortCtrlMediumType"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlMediumType.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rate1000M-Full", 1), ("rate100M-Full", 2), ("rate100M-Half", 3), ("rate10M-Full", 4), ("rate10M-Half", 5), ("auto", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("rate1000M-Full", 2), ("rate100M-Full", 3), ("rate100M-Half", 4), ("rate10M-Full", 5), ("rate10M-Half", 6), ("rate10G-Full", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100Base-and-1000BaseSFPModule", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysPortCtrlCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 9), Bits().clone(namedValues=NamedValues(("rate10-half", 0), ("rate10-full", 1), ("rate100-half", 2), ("rate100-full", 3), ("reserve", 4), ("rate1000-full", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlCapability.setStatus('current')
sysPortCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlState.setStatus('current')
sysPortDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 14), )
if mibBuilder.loadTexts: sysPortDescriptionTable.setStatus('current')
sysPortDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 14, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysPortDescIndex"), (0, "DES-1210-26MEbx", "sysPortDescMediumType"))
if mibBuilder.loadTexts: sysPortDescriptionEntry.setStatus('current')
sysPortDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescIndex.setStatus('current')
sysPortDescMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescMediumType.setStatus('current')
sysPortDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortDescString.setStatus('current')
sysPortUpLinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortUpLinkTime.setStatus('current')
sysPortLinkChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortLinkChangeTime.setStatus('current')
sysPortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 15), )
if mibBuilder.loadTexts: sysPortErrTable.setStatus('current')
sysPortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 15, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysPortErrPortIndex"))
if mibBuilder.loadTexts: sysPortErrEntry.setStatus('current')
sysPortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortIndex.setStatus('current')
sysPortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortState.setStatus('current')
sysPortErrPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortStatus.setStatus('current')
sysPortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lbd", 1), ("traffic-control", 2), ("duld", 3), ("bpdu-protection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortReason.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebState.setStatus('current')
sysWebPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebPortNumber.setStatus('current')
sysARPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysARPAgingTime.setStatus('current')
sysMACAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMACAgingTime.setStatus('current')
baudRateConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9600, 19200, 38400, 115200))).clone(namedValues=NamedValues(("baudrate9600", 9600), ("baudrate19200", 19200), ("baudrate38400", 38400), ("baudrate115200", 115200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baudRateConfiguration.setStatus('current')
autologoutConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(120, 300, 600, 900, 0))).clone(namedValues=NamedValues(("logouttime2mins", 120), ("logouttime5mins", 300), ("logouttime10mins", 600), ("logouttime15mins", 900), ("logouttimenever", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autologoutConfiguration.setStatus('current')
telnetsettingManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetsettingManagementOnOff.setStatus('current')
telnetUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetUDPPort.setStatus('current')
autoRefreshConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("refreshimenever", 0), ("refreshtime10secs", 1), ("refreshtime30secs", 2), ("refreshtime1min", 3), ("refreshtime5mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRefreshConfiguration.setStatus('current')
floodfdbOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: floodfdbOnOff.setStatus('current')
sysContactName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContactName.setStatus('current')
sysDhcpAutoConfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfigTimeout.setStatus('current')
sysCommandLogging = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCommandLogging.setStatus('current')
sysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNumber.setStatus('current')
firmwareInfoImage1Version = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 31, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoImage1Version.setStatus('current')
firmwareInfoImage1Size = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoImage1Size.setStatus('current')
firmwareInfoImage1UpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoImage1UpdateTime.setStatus('current')
firmwareInfoImage1FromIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 31, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoImage1FromIP.setStatus('current')
firmwareInfoImage1User = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 31, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoImage1User.setStatus('current')
firmwareInfoImage1Type = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, -1))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ssh", 3), ("web", 4), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoImage1Type.setStatus('current')
sysBootupConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootupConfigID.setStatus('current')
sysDhcpAutoImage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoImage.setStatus('current')
sysPortMediaTypeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36), )
if mibBuilder.loadTexts: sysPortMediaTypeTable.setStatus('current')
sysPortMediaTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysPortMediaTypeIndex"), (0, "DES-1210-26MEbx", "sysPortMediaType"))
if mibBuilder.loadTexts: sysPortMediaTypeEntry.setStatus('current')
sysPortMediaTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeIndex.setStatus('current')
sysPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaType.setStatus('current')
sysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rate100M", 1), ("rate1000M", 2), ("rate10G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortType.setStatus('current')
sysPortMediaTypeVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeVendorName.setStatus('current')
sysPortMediaTypeOui = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeOui.setStatus('current')
sysPortMediaTypePn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypePn.setStatus('current')
sysPortMediaTypeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeRev.setStatus('current')
sysPortMediaTypeSn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeSn.setStatus('current')
sysPortMediaTypeDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 36, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeDateCode.setStatus('current')
sysScheduleRebootTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 41), )
if mibBuilder.loadTexts: sysScheduleRebootTable.setStatus('current')
sysScheduleRebootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 41, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysScheduleRebootIndex"))
if mibBuilder.loadTexts: sysScheduleRebootEntry.setStatus('current')
sysScheduleRebootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 41, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysScheduleRebootIndex.setStatus('current')
sysScheduleRebootTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("at", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysScheduleRebootTimeType.setStatus('current')
sysScheduleRebootTimeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 41, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysScheduleRebootTimeSetting.setStatus('current')
sysScheduleRebootSaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysScheduleRebootSaveConfig.setStatus('current')
sysScheduleRebootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 41, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysScheduleRebootStatus.setStatus('current')
sysSaveOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("save-progressing", 1), ("last-save-success", 2), ("last-save-fail", 3), ("last-save-none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSaveOperationStatus.setStatus('current')
ipv4sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpAddrCfgMode.setStatus('current')
ipv4sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpAddr.setStatus('current')
ipv4sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpSubnetMask.setStatus('current')
ipv4sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysGateway.setStatus('current')
ipv4dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4dhcpOption12Status.setStatus('current')
ipv4dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4dhcpOption12HostName.setStatus('current')
ipifSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7))
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12Status.setStatus('current')
dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12HostName.setStatus('current')
ipifName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifName.setStatus('current')
ipifVLANname = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifVLANname.setStatus('current')
ipifv6GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6GlobalStatus.setStatus('current')
ipifv6DHCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6DHCPStatus.setStatus('current')
ipifv6AutolinkloStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6AutolinkloStatus.setStatus('current')
ipifv6NSRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6NSRetransmitTime.setStatus('current')
ipifv6DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6DefaultGateway.setStatus('current')
ipifV6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 14), )
if mibBuilder.loadTexts: ipifV6AddressTable.setStatus('current')
ipifV6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 14, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ipifV6AddressMainIndex"), (0, "DES-1210-26MEbx", "ipifV6AddressIpAddr"), (0, "DES-1210-26MEbx", "ipifV6AddressIpPrefix"))
if mibBuilder.loadTexts: ipifV6AddressEntry.setStatus('current')
ipifV6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 14, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressMainIndex.setStatus('current')
ipifV6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 14, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpAddr.setStatus('current')
ipifV6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpPrefix.setStatus('current')
ipifV6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpType.setStatus('current')
ipifV6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifV6AddressRowStatus.setStatus('current')
ipv4IPIFTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 15), )
if mibBuilder.loadTexts: ipv4IPIFTable.setStatus('current')
ipv4IPIFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 15, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ipv4IfIndex"))
if mibBuilder.loadTexts: ipv4IPIFEntry.setStatus('current')
ipv4IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 15, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4IfIndex.setStatus('current')
ipv4IfVLANname = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 7, 15, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4IfVLANname.setStatus('current')
ipv4sysIprouteGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIprouteGateway.setStatus('current')
ipv4sysIprouteHops = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIprouteHops.setStatus('current')
tftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwServerIpAddress.setStatus('obsolete')
tftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwImageFileName.setStatus('obsolete')
tftpFwTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTftpOperation.setStatus('obsolete')
tftpFwTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTftpOperationStatus.setStatus('obsolete')
tftpCfgServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgServerIpAddress.setStatus('obsolete')
tftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFileName.setStatus('obsolete')
tftpConfigTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigTftpOperation.setStatus('obsolete')
tftpConfigTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpConfigTftpOperationStatus.setStatus('obsolete')
tftpFwTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 9))
tftpFwTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 9, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setStatus('current')
tftpFwTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setStatus('current')
tftpFwTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setStatus('current')
tftpFwTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setStatus('current')
tftpFwTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setStatus('current')
tftpFwTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setStatus('current')
tftpCfgTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10))
tftpCfgTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setStatus('current')
tftpCfgTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setStatus('current')
tftpCfgTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setStatus('current')
tftpCfgTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setStatus('current')
tftpCfgTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3), ("download-and-reboot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setStatus('current')
tftpCfgTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setStatus('current')
tftpCfgTargetTftpConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("configId-1", 1), ("configId-2", 2), ("current-config", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpConfigID.setStatus('current')
tftpCfgTargetIncrement = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 3, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("increment", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetIncrement.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
securityIpMacPortBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10))
impbSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1), )
if mibBuilder.loadTexts: impbSettingTable.setStatus('current')
impbSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "impbPortIndex"))
if mibBuilder.loadTexts: impbSettingEntry.setStatus('current')
impbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortIndex.setStatus('current')
impbPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortState.setStatus('current')
impbPortDHCPSnoopingState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPSnoopingState.setStatus('current')
impbPortArpInspectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("strict", 1), ("loose", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortArpInspectionState.setStatus('current')
impbPortIpInspectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortIpInspectionState.setStatus('current')
impbPortAllowZeroIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortAllowZeroIPState.setStatus('current')
impbPortForwardDHCPPktState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortForwardDHCPPktState.setStatus('current')
impbPortDHCPMaxEntryIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPMaxEntryIPv4.setStatus('current')
impbPortDHCPMaxEntryIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPMaxEntryIPv6.setStatus('current')
impbPortNDInspectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortNDInspectionState.setStatus('current')
impbPortProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortProtocolState.setStatus('current')
impbPortDHCPv4SetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPv4SetVlanList.setStatus('current')
impbPortDHCPv4VlanList1k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv4VlanList1k.setStatus('current')
impbPortDHCPv4VlanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv4VlanList2k.setStatus('current')
impbPortDHCPv4VlanList3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv4VlanList3k.setStatus('current')
impbPortDHCPv4VlanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv4VlanList4k.setStatus('current')
impbPortDHCPv6SetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPv6SetVlanList.setStatus('current')
impbPortDHCPv6VlanList1k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv6VlanList1k.setStatus('current')
impbPortDHCPv6VlanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv6VlanList2k.setStatus('current')
impbPortDHCPv6VlanList3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv6VlanList3k.setStatus('current')
impbPortDHCPv6VlanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv6VlanList4k.setStatus('current')
impbAutoScanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 2), )
if mibBuilder.loadTexts: impbAutoScanTable.setStatus('current')
impbAutoScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "impbAutoScanMacAddress"), (0, "DES-1210-26MEbx", "impbAutoScanPort"), (0, "DES-1210-26MEbx", "impbAutoScanIpAddress"))
if mibBuilder.loadTexts: impbAutoScanEntry.setStatus('current')
impbAutoScanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanMacAddress.setStatus('current')
impbAutoScanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanPort.setStatus('current')
impbAutoScanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 2, 1, 3), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanIpAddress.setStatus('current')
impbAutoScanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanVlanId.setStatus('current')
impbAutoScanBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanBinding.setStatus('current')
impbBindingListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 3), )
if mibBuilder.loadTexts: impbBindingListTable.setStatus('current')
impbBindingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "impbBindingListIpAddress"), (0, "DES-1210-26MEbx", "impbBindingListMacAddress"))
if mibBuilder.loadTexts: impbBindingListEntry.setStatus('current')
impbBindingListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 3, 1, 1), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBindingListIpAddress.setStatus('current')
impbBindingListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBindingListMacAddress.setStatus('current')
impbBindingListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBindingListPort.setStatus('current')
impbBindingListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: impbBindingListRowStatus.setStatus('current')
impbBlockListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 4), )
if mibBuilder.loadTexts: impbBlockListTable.setStatus('current')
impbBlockListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "impbBlockListMacAddress"), (0, "DES-1210-26MEbx", "impbBlockListVlanId"), (0, "DES-1210-26MEbx", "impbBlockListPort"))
if mibBuilder.loadTexts: impbBlockListEntry.setStatus('current')
impbBlockListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlockListMacAddress.setStatus('current')
impbBlockListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlockListVlanId.setStatus('current')
impbBlockListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlockListPort.setStatus('current')
impbBlockListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 4, 1, 4), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlockListIpAddress.setStatus('current')
impbBlockListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("deleted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBlockListStatus.setStatus('current')
impbAutoScanIpAddressFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 5), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressFrom.setStatus('current')
impbAutoScanIpAddressTo = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 6), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressTo.setStatus('current')
impbAutoScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("scan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanStatus.setStatus('current')
impbDhcpSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 8), )
if mibBuilder.loadTexts: impbDhcpSnoopingTable.setStatus('current')
impbDhcpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 8, 1), ).setIndexNames((0, "DES-1210-26MEbx", "impbDhcpSnoopingMacAddress"), (0, "DES-1210-26MEbx", "impbDhcpSnoopingIpAddress"))
if mibBuilder.loadTexts: impbDhcpSnoopingEntry.setStatus('current')
impbDhcpSnoopingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 8, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingMacAddress.setStatus('current')
impbDhcpSnoopingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 8, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingIpAddress.setStatus('current')
impbDhcpSnoopingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingLeaseTime.setStatus('current')
impbDhcpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingPort.setStatus('current')
impbDhcpSnoopingremainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingremainingTime.setStatus('current')
impbRoamingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbRoamingState.setStatus('current')
impbVlanModeState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbVlanModeState.setStatus('current')
impbVlanModeVlanList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 11), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbVlanModeVlanList.setStatus('current')
impbLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("ipv4", 1), ("ipv6", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbLogState.setStatus('current')
impbDHCPv6PrefixDelegationSnoopState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDHCPv6PrefixDelegationSnoopState.setStatus('current')
impbBindingtraplog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBindingtraplog.setStatus('current')
impbBindingtrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 15))
impbBindingtrapsign = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 15, 1))
if mibBuilder.loadTexts: impbBindingtrapsign.setStatus('current')
impbAutoScanCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("scanning", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanCurrentStatus.setStatus('current')
impbDhcpSnoopingTableClearPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 17), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDhcpSnoopingTableClearPortList.setStatus('current')
impbDhcpSnoopingTableClearIPType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1), ("both", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDhcpSnoopingTableClearIPType.setStatus('current')
impbDhcpSnoopingTableClear = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 10, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDhcpSnoopingTableClear.setStatus('current')
stpBridgeGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1))
stpModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpModuleStatus.setStatus('current')
stpProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpProtocolVersion.setStatus('current')
stpBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgePriority.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 7), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpFowardBPDU = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpFowardBPDU.setStatus('current')
stpRootBridge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootBridge.setStatus('current')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
stpTopologyChangeTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTopologyChangeTrapStatus.setStatus('current')
stpNewRootTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpNewRootTrapStatus.setStatus('current')
stpNewRootTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 16))
stpBridgeMaxHop = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxHop.setStatus('current')
brgAddress = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 16, 1))
if mibBuilder.loadTexts: brgAddress.setStatus('current')
oldDesignatedRoot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 16, 2))
if mibBuilder.loadTexts: oldDesignatedRoot.setStatus('current')
mstiBridgeRegionalRoot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 16, 3))
if mibBuilder.loadTexts: mstiBridgeRegionalRoot.setStatus('current')
stpNniBpduAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1ad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpNniBpduAddr.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortStatus.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
stpPortAdminP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminP2P.setStatus('current')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
stpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 11), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortHelloTime.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortFowardBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortFowardBPDU.setStatus('current')
mstConfigurationIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3))
mstiConfigurationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiConfigurationName.setStatus('current')
mstiRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiRevisionLevel.setStatus('current')
mstCistVlanMapped = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped.setStatus('current')
mstCistVlanMapped2k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped2k.setStatus('current')
mstCistVlanMapped3k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped3k.setStatus('current')
mstCistVlanMapped4k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped4k.setStatus('current')
mstVlanMstiMappingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7), )
if mibBuilder.loadTexts: mstVlanMstiMappingTable.setStatus('current')
mstVlanMstiMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mstInstanceIndex"))
if mibBuilder.loadTexts: mstVlanMstiMappingEntry.setStatus('current')
mstInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceIndex.setStatus('current')
mstSetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstSetVlanList.setStatus('current')
mstResetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstResetVlanList.setStatus('current')
mstInstanceVlanMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped.setStatus('current')
mstInstanceVlanMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped2k.setStatus('current')
mstInstanceVlanMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped3k.setStatus('current')
mstInstanceVlanMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped4k.setStatus('current')
mstDeleteInstanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 3, 7, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstDeleteInstanceStatus.setStatus('current')
stpInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4))
mstCistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistBridgePriority.setStatus('current')
mstCistStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistStatus.setStatus('current')
mstCiststpTopologyChangesCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCiststpTopologyChangesCount.setStatus('current')
mstCiststpLastTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCiststpLastTopologyChange.setStatus('current')
mstMstiBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 20), )
if mibBuilder.loadTexts: mstMstiBridgeTable.setStatus('current')
mstMstiBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 20, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mstMstiInstanceIndex"))
if mibBuilder.loadTexts: mstMstiBridgeEntry.setStatus('current')
mstMstiInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiInstanceIndex.setStatus('current')
mstMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiBridgePriority.setStatus('current')
mstMstiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiStatus.setStatus('current')
mstMstistpTopologyChangesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstistpTopologyChangesCount.setStatus('current')
mstMstistpLastTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 4, 20, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstistpLastTopologyChange.setStatus('current')
stpInstancePortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5))
mstCistPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1), )
if mibBuilder.loadTexts: mstCistPortTable.setStatus('current')
mstCistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mstCistPort"))
if mibBuilder.loadTexts: mstCistPortEntry.setStatus('current')
mstCistPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPort.setStatus('current')
mstCistPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPortDesignatedBridge.setStatus('current')
mstCistPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortAdminPathCost.setStatus('current')
mstCistPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPortPathCost.setStatus('current')
mstCistPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortPriority.setStatus('current')
mstCistForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistForcePortState.setStatus('current')
mstCistCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5), ("root-inconsistent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurrentPortRole.setStatus('current')
mstMstiPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2), )
if mibBuilder.loadTexts: mstMstiPortTable.setStatus('current')
mstMstiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mstMstiPort"), (0, "DES-1210-26MEbx", "mstInstanceIndex"))
if mibBuilder.loadTexts: mstMstiPortEntry.setStatus('current')
mstMstiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPort.setStatus('current')
mstMstiPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortDesignatedBridge.setStatus('current')
mstMstiPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortAdminPathCost.setStatus('current')
mstMstiPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortPathCost.setStatus('current')
mstMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortPriority.setStatus('current')
mstMstiForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiForcePortState.setStatus('current')
mstMstiCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 6, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5), ("root-inconsistent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiCurrentPortRole.setStatus('current')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 19, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 19, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "staticMcastVlanID"), (0, "DES-1210-26MEbx", "staticMcastMac"), (0, "DES-1210-26MEbx", "staticMcastEgressPorts"), (0, "DES-1210-26MEbx", "staticMcastIpAddr"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 19, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 19, 1, 1, 3), PortList().subtype(subtypeSpec=ValueSizeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 19, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastIpAddr.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 19, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6, 1), ).setIndexNames((0, "DES-1210-26MEbx", "dot1qVlanId"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanId.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanForbiddenPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanAdvertisementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanAdvertisementStatus.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanPVIDAutoAssignOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPVIDAutoAssignOnOff.setStatus('current')
gvrpGVRPGlobalSettingsOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpGVRPGlobalSettingsOnOff.setStatus('current')
gvrpSettingsJoinTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsJoinTime.setStatus('current')
gvrpSettingsLeaveTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsLeaveTime.setStatus('current')
gvrpSettingsLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsLeaveAllTime.setStatus('current')
gvrpSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 5), )
if mibBuilder.loadTexts: gvrpSettingsTable.setStatus('current')
gvrpSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 5, 1), ).setIndexNames((0, "DES-1210-26MEbx", "gvrpSettingsPortControlIndex"))
if mibBuilder.loadTexts: gvrpSettingsEntry.setStatus('current')
gvrpSettingsPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gvrpSettingsPortControlIndex.setStatus('current')
gvrpSettingsPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsPVID.setStatus('current')
gvrpSettingsGVRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsGVRPState.setStatus('current')
gvrpSettingsIngressChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsIngressChecking.setStatus('current')
gvrpSettingsAcceptableFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allFrames", 1), ("taggedOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsAcceptableFrameType.setStatus('current')
dhcpBOOTPRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1))
dhcpBOOTPRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2))
dhcpBOOTPRelayManagementOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 2))
dhcpBOOTPRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayState.setStatus('current')
dhcpBOOTPRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayHopCount.setStatus('current')
dhcpBOOTPRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayTimeThreshold.setStatus('current')
dhcpBOOTPRelayEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayEnablePortlist.setStatus('current')
dhcpRelayVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1, 5), )
if mibBuilder.loadTexts: dhcpRelayVlanTable.setStatus('current')
dhcpRelayVlanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1, 5, 1), ).setIndexNames((0, "DES-1210-26MEbx", "dhcpRelayVlanSettingsVLANID"))
if mibBuilder.loadTexts: dhcpRelayVlanTableEntry.setStatus('current')
dhcpRelayVlanSettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayVlanSettingsVLANID.setStatus('current')
dhcpRelayVlanSettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayVlanSettingsState.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 1), )
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsTable.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "dhcpBOOTPRelayInterface"), (0, "DES-1210-26MEbx", "dhcpBOOTPRelayServerIP"))
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsEntry.setStatus('current')
dhcpBOOTPRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterface.setStatus('current')
dhcpBOOTPRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayServerIP.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsRowStatus.setStatus('current')
dhcpBOOTPRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82State.setStatus('current')
dhcpBOOTPRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CheckState.setStatus('current')
dhcpBOOTPRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82Policy.setStatus('current')
dhcpBOOTPRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2), ("userdefinedhex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteIDType.setStatus('current')
dhcpBOOTPRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteID.setStatus('current')
dhcpBOOTPRelayOption82CircuitIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2), ("userdefinedhex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CircuitIDType.setStatus('current')
dhcpBOOTPRelayOption82CircuitID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 28, 2, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CircuitID.setStatus('current')
dhcpLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setStatus('current')
dhcpLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 29, 2), )
if mibBuilder.loadTexts: dhcpLocalRelayTable.setStatus('current')
dhcpLocalRelayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 29, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "dhcpLocalRelaySettingsVLANID"))
if mibBuilder.loadTexts: dhcpLocalRelayTableEntry.setStatus('current')
dhcpLocalRelaySettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setStatus('current')
dhcpLocalRelaySettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 29, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setStatus('current')
dhcpLocalRelayEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 29, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayEnablePortlist.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laPortChannelMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 3, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMasterPort.setStatus('current')
laPortChannelActiveMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 3, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelActiveMemberPorts.setStatus('current')
laAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sourceMAC", 1), ("destMAC", 2), ("sourceAndDestMAC", 3), ("sourceIP", 4), ("destIP", 5), ("sourceAndDestIP", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laAlgorithm.setStatus('current')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
laPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorPortPriority.setStatus('current')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
staticVlanBaseTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 5))
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "staticVlanID"), (0, "DES-1210-26MEbx", "staticMac"), (0, "DES-1210-26MEbx", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
autoFdbTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 4), )
if mibBuilder.loadTexts: autoFdbTable.setStatus('current')
autoFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "autoFdbIPAddress"))
if mibBuilder.loadTexts: autoFdbEntry.setStatus('current')
autoFdbIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbIPAddress.setStatus('current')
autoFdbVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbVlanID.setStatus('current')
autoFdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbMacAddress.setStatus('current')
autoFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbPort.setStatus('current')
autoFdbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbTimeStamp.setStatus('current')
autoFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFdbStatus.setStatus('current')
staticVlanBaseAutoLearnList1k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseAutoLearnList1k.setStatus('current')
staticVlanBaseAutoLearnList2k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseAutoLearnList2k.setStatus('current')
staticVlanBaseAutoLearnList3k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseAutoLearnList3k.setStatus('current')
staticVlanBaseAutoLearnList4k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseAutoLearnList4k.setStatus('current')
staticVlanBaseEnableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseEnableAutoLearn.setStatus('current')
staticVlanBaseDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 9, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseDisableAutoLearn.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3))
igsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 6))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsDataDrivenLearningMaxLearnedEntryVlaue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsDataDrivenLearningMaxLearnedEntryVlaue.setStatus('current')
igsReportToAllPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsReportToAllPort.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanFbdRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFbdRtrPortList.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanDataDrivenLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanDataDrivenLearningStatus.setStatus('current')
igsVlanQuerierVersionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2))).clone(namedValues=NamedValues(("igmp-v3", 3), ("igmp-v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQuerierVersionStatus.setStatus('current')
igsVlanDataDrivenLearningAgeOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanDataDrivenLearningAgeOutStatus.setStatus('current')
igsVlanReportSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanReportSuppression.setStatus('current')
igsVlanRobustnessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRobustnessValue.setStatus('current')
igsVlanGrpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanGrpQueryInterval.setStatus('current')
igsVlanQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQueryMaxResponseTime.setStatus('current')
igsVlanProxyReportingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanProxyReportingStatus.setStatus('current')
igsVlanProxyReportingSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 4, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanProxyReportingSourceIP.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 5, 1), ).setIndexNames((0, "DES-1210-26MEbx", "igsVlanMulticastGroupVlanId"), (0, "DES-1210-26MEbx", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
igsHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 6, 1), )
if mibBuilder.loadTexts: igsHostTable.setStatus('current')
igsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 6, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "igsHostTableVLANID"), (0, "DES-1210-26MEbx", "igsHostTableGroupAddress"), (0, "DES-1210-26MEbx", "igsHostTablePort"), (0, "DES-1210-26MEbx", "igsHostTableHostIPAddress"))
if mibBuilder.loadTexts: igsHostEntry.setStatus('current')
igsHostTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableVLANID.setStatus('current')
igsHostTableGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 6, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableGroupAddress.setStatus('current')
igsHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTablePort.setStatus('current')
igsHostTableHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 10, 6, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableHostIPAddress.setStatus('current')
mldsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 1))
mldsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3))
mldsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 4))
mldsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsStatus.setStatus('current')
mldsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsRouterPortPurgeInterval.setStatus('current')
mldsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsHostPortPurgeInterval.setStatus('current')
mldsDataDrivenLearningMaxLearnedEntryVlaue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsDataDrivenLearningMaxLearnedEntryVlaue.setStatus('current')
mldsReportToAllPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsReportToAllPort.setStatus('current')
mldsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 3), )
if mibBuilder.loadTexts: mldsVlanRouterTable.setStatus('current')
mldsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mldsVlanRouterVlanId"))
if mibBuilder.loadTexts: mldsVlanRouterEntry.setStatus('current')
mldsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterVlanId.setStatus('current')
mldsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterPortList.setStatus('current')
mldsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4), )
if mibBuilder.loadTexts: mldsVlanFilterTable.setStatus('current')
mldsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mldsVlanFilterVlanId"))
if mibBuilder.loadTexts: mldsVlanFilterEntry.setStatus('current')
mldsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanFilterVlanId.setStatus('current')
mldsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanSnoopStatus.setStatus('current')
mldsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQuerier.setStatus('current')
mldsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanCfgQuerier.setStatus('current')
mldsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanQueryInterval.setStatus('current')
mldsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRtrPortList.setStatus('current')
mldsVlanFbdRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanFbdRtrPortList.setStatus('current')
mldsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanFastLeave.setStatus('current')
mldsVlanDataDrivenLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanDataDrivenLearningStatus.setStatus('current')
mldsVlanReportSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanReportSuppression.setStatus('current')
mldsVlanRobustnessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRobustnessValue.setStatus('current')
mldsVlanGrpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanGrpQueryInterval.setStatus('current')
mldsVlanQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanQueryMaxResponseTime.setStatus('current')
mldsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 5), )
if mibBuilder.loadTexts: mldsVlanMulticastGroupTable.setStatus('current')
mldsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 5, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mldsVlanMulticastGroupVlanId"), (0, "DES-1210-26MEbx", "mldsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: mldsVlanMulticastGroupEntry.setStatus('current')
mldsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupVlanId.setStatus('current')
mldsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupIpAddress.setStatus('current')
mldsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupMacAddress.setStatus('current')
mldsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupPortList.setStatus('current')
mldsHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 4, 1), )
if mibBuilder.loadTexts: mldsHostTable.setStatus('current')
mldsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 4, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mldsHostTableVLANID"), (0, "DES-1210-26MEbx", "mldsHostTableGroupAddress"), (0, "DES-1210-26MEbx", "mldsHostTablePort"), (0, "DES-1210-26MEbx", "mldsHostTableHostIPAddress"))
if mibBuilder.loadTexts: mldsHostEntry.setStatus('current')
mldsHostTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableVLANID.setStatus('current')
mldsHostTableGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 4, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableGroupAddress.setStatus('current')
mldsHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTablePort.setStatus('current')
mldsHostTableHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 88, 4, 1, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableHostIPAddress.setStatus('current')
swAuthenCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 1))
swAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthStatus.setStatus('current')
swAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portBase", 1), ("macBase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthMode.setStatus('current')
authProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authProtocolRadiusEap", 1), ("authProtocolLocal", 2))).clone('authProtocolRadiusEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocol.setStatus('current')
swAuthCtrlPktFwdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authForwardEap", 1), ("authDropEap", 2))).clone('authForwardEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setStatus('current')
swAuthPortAccessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2))
swAuthPortAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1), )
if mibBuilder.loadTexts: swAuthPortAccessControlTable.setStatus('current')
swAuthPortAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "swAuthAuthConfigPortNumber"))
if mibBuilder.loadTexts: swAuthPortAccessControlEntry.setStatus('current')
swAuthAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthConfigPortNumber.setStatus('current')
swAuthAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthQuietPeriod.setStatus('current')
swAuthAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthSuppTimeout.setStatus('current')
swAuthAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthServerTimeout.setStatus('current')
swAuthAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthMaxReq.setStatus('current')
swAuthAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthTxPeriod.setStatus('current')
swAuthAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthPeriod.setStatus('current')
swAuthAuthReAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthentication.setStatus('current')
swAuthAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthConfigPortControl.setStatus('current')
swAuthAuthCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticator", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthCapability.setStatus('current')
swAuthAuthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthDirection.setStatus('current')
swAuthUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 3))
swAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 3, 1), )
if mibBuilder.loadTexts: swAuthUserTable.setStatus('current')
swAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "swAuthUserName"))
if mibBuilder.loadTexts: swAuthUserEntry.setStatus('current')
swAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthUserName.setStatus('current')
swAuthUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthUserPassword.setStatus('current')
swAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthUserStatus.setStatus('current')
swAuthRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4))
iPv4swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1), )
if mibBuilder.loadTexts: iPv4swAuthRadiusServerTable.setStatus('obsolete')
iPv4swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "iPv4swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: iPv4swAuthRadiusServerEntry.setStatus('obsolete')
iPv4swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerIndex.setStatus('obsolete')
iPv4swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerAddress.setStatus('obsolete')
iPv4swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerAuthenticationPort.setStatus('obsolete')
iPv4swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerAccountingPort.setStatus('obsolete')
iPv4swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerTimeout.setStatus('obsolete')
iPv4swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerRetransmit.setStatus('obsolete')
iPv4swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerKey.setStatus('obsolete')
iPv4swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerStatus.setStatus('obsolete')
swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2), )
if mibBuilder.loadTexts: swAuthRadiusServerTable.setStatus('current')
swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: swAuthRadiusServerEntry.setStatus('current')
swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthRadiusServerIndex.setStatus('current')
swAuthRadiusIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusIPType.setStatus('current')
swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAddress.setStatus('current')
swAuthRadiusServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerInterfaceName.setStatus('current')
swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAuthenticationPort.setStatus('current')
swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAccountingPort.setStatus('current')
swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerTimeout.setStatus('current')
swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerRetransmit.setStatus('current')
swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerKey.setStatus('current')
swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 23, 4, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerStatus.setStatus('current')
qosInBandMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 10))
qosInBandMgmtSetDefPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("action", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosInBandMgmtSetDefPriority.setStatus('current')
qosInBandMgmtPktPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosInBandMgmtPktPriority.setStatus('current')
cosScheduleMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2), ("strict3wrr", 3), ("strict2wrr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosScheduleMechanism.setStatus('current')
cosOutputSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 2))
cosClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 2, 1), )
if mibBuilder.loadTexts: cosClassTable.setStatus('current')
cosClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "cosClassIndex"))
if mibBuilder.loadTexts: cosClassEntry.setStatus('current')
cosClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosClassIndex.setStatus('current')
cosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosWeight.setStatus('current')
cosBandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 9))
cosBandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 9, 1), )
if mibBuilder.loadTexts: cosBandwidthCtrlTable.setStatus('current')
cosBandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 9, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "cosBandwidthCtrlPortIndex"), (0, "DES-1210-26MEbx", "cosBandwidthCtrlClassIndex"))
if mibBuilder.loadTexts: cosBandwidthCtrlEntry.setStatus('current')
cosBandwidthCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosBandwidthCtrlPortIndex.setStatus('current')
cosBandwidthCtrlClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosBandwidthCtrlClassIndex.setStatus('current')
cosBandwidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosBandwidthValue.setStatus('current')
cosBandwidthEffectiveRX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosBandwidthEffectiveRX.setStatus('current')
cosBandwidthEffectiveTX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosBandwidthEffectiveTX.setStatus('current')
qosDefaultUserPri = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 4))
qosDefaultUserPriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 4, 1), )
if mibBuilder.loadTexts: qosDefaultUserPriTable.setStatus('current')
qosDefaultUserPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 4, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "qosDefaultUserPriPortIndex"))
if mibBuilder.loadTexts: qosDefaultUserPriEntry.setStatus('current')
qosDefaultUserPriPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDefaultUserPriPortIndex.setStatus('current')
qosDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDefaultPriority.setStatus('current')
qosEffectiveDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosEffectiveDefaultPriority.setStatus('current')
qosUserPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 5))
qosUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 5, 1), )
if mibBuilder.loadTexts: qosUserPriorityTable.setStatus('current')
qosUserPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 5, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "qosUserPriIndex"))
if mibBuilder.loadTexts: qosUserPriEntry.setStatus('current')
qosUserPriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUserPriIndex.setStatus('current')
qosUserPriClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUserPriClass.setStatus('current')
qosPriSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 7))
qosPriSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 7, 1), )
if mibBuilder.loadTexts: qosPriSettingsTable.setStatus('current')
qosPriSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 7, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "qosPriSetPortIndex"))
if mibBuilder.loadTexts: qosPriSettingsEntry.setStatus('current')
qosPriSetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriSetPortIndex.setStatus('current')
qosPriSetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 6))).clone(namedValues=NamedValues(("none", 0), ("ieee8021P", 2), ("dscp-tos", 4), ("ieee8021P-dscp-tos", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriSetPortType.setStatus('current')
qosDiffServTOS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6))
qosDSCPTOSMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tos", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDSCPTOSMode.setStatus('current')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
qosTOSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3))
qosTOSType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType00.setStatus('current')
qosTOSType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType01.setStatus('current')
qosTOSType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType02.setStatus('current')
qosTOSType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType03.setStatus('current')
qosTOSType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType04.setStatus('current')
qosTOSType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType05.setStatus('current')
qosTOSType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType06.setStatus('current')
qosTOSType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 6, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType07.setStatus('current')
qosAclPrioritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8))
ipv4aclQosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1), )
if mibBuilder.loadTexts: ipv4aclQosTable.setStatus('current')
ipv4aclQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ipv4aclQosIndex"))
if mibBuilder.loadTexts: ipv4aclQosEntry.setStatus('current')
ipv4aclQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclQosIndex.setStatus('current')
ipv4aclQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("tcp", 2), ("udp", 3), ("vlanid", 4), ("protocol", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosType.setStatus('current')
ipv4aclQosMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosMACAddr.setStatus('current')
ipv4aclQosIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosIPAddr.setStatus('current')
ipv4aclQosTCPUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosTCPUDPPort.setStatus('current')
ipv4aclQosVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosVlanID.setStatus('current')
ipv4aclQosProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosProtocol.setStatus('current')
ipv4aclQosAssignClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosAssignClass.setStatus('current')
ipv4aclQosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosStatus.setStatus('current')
aclQosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2), )
if mibBuilder.loadTexts: aclQosTable.setStatus('current')
aclQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aclQosIndex"))
if mibBuilder.loadTexts: aclQosEntry.setStatus('current')
aclQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclQosIndex.setStatus('current')
aclQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("tcp", 2), ("udp", 3), ("vlanid", 4), ("protocol", 5), ("ipv6", 6), ("ipv6traffic-class", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosType.setStatus('current')
aclQosMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosMACAddr.setStatus('current')
aclQosIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosIPAddr.setStatus('current')
aclQosIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosIPv6Addr.setStatus('current')
aclQosTCPUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosTCPUDPPort.setStatus('current')
aclQosVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosVlanID.setStatus('current')
aclQosProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosProtocol.setStatus('current')
aclQosIP6TC = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosIP6TC.setStatus('current')
aclQosAssignClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosAssignClass.setStatus('current')
aclQosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 12, 8, 2, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosStatus.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 1, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
bandwidthEffecTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthEffecTxThreshold.setStatus('current')
bandwidthEffecRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthEffecRxThreshold.setStatus('current')
trafficCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4))
trafficCtrlTrap = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stormOccurred", 1), ("stormCleared", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTrap.setStatus('current')
trafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 2), )
if mibBuilder.loadTexts: trafficCtrlTable.setStatus('current')
trafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "trafficCtrlIndex"))
if mibBuilder.loadTexts: trafficCtrlEntry.setStatus('current')
trafficCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCtrlIndex.setStatus('current')
trafficCtrlActionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drop", 0), ("shutdown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlActionMode.setStatus('current')
trafficCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("b", 1), ("m", 2), ("mb", 3), ("u", 4), ("ub", 5), ("um", 6), ("umb", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlType.setStatus('current')
trafficCtrlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 102400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlThreshold.setStatus('current')
trafficCtrlCountDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlCountDown.setStatus('current')
trafficCtrlTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTimeInterval.setStatus('current')
trafficCtrlAutoRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 13, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlAutoRecoverTime.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
ipv4trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 2), )
if mibBuilder.loadTexts: ipv4trustedHostTable.setStatus('obsolete')
ipv4trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ipv4trustedHostIpAddr"), (0, "DES-1210-26MEbx", "ipv4trustedHostIpMask"))
if mibBuilder.loadTexts: ipv4trustedHostEntry.setStatus('obsolete')
ipv4trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpAddr.setStatus('obsolete')
ipv4trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpMask.setStatus('obsolete')
ipv4trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4trustedHostRowStatus.setStatus('obsolete')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 3), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "trustedHostIPType"), (0, "DES-1210-26MEbx", "trustedHostIpAddr"), (0, "DES-1210-26MEbx", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIPType.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 3, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 3, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
securitySSH = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8))
sshSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSecurityStatus.setStatus('current')
sshMaxAuthFailAttempts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxAuthFailAttempts.setStatus('current')
sshSessionKeyRekeying = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("ten-min", 1), ("thirty-min", 2), ("sixty-min", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSessionKeyRekeying.setStatus('current')
sshMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxSession.setStatus('current')
sshConnectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshConnectionTimeout.setStatus('current')
sshAuthenMethodPassWordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodPassWordAdmin.setStatus('current')
sshAuthenMethodPubKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodPubKeyAdmin.setStatus('current')
sshAuthenMethodHostKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodHostKeyAdmin.setStatus('current')
sshCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 9), Bits().clone(namedValues=NamedValues(("tripleDESCBC", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCipherSuiteList.setStatus('current')
sshMacSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 10), Bits().clone(namedValues=NamedValues(("hMAC-SHA1", 0), ("hMAC-MD5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMacSuiteList.setStatus('current')
sshPublKeyRSAAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPublKeyRSAAdmin.setStatus('current')
sshUserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 12), )
if mibBuilder.loadTexts: sshUserInfoTable.setStatus('current')
sshUserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 12, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sshUserInfoID"))
if mibBuilder.loadTexts: sshUserInfoEntry.setStatus('current')
sshUserInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoID.setStatus('current')
sshUserInfoUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoUserName.setStatus('current')
sshUserInfoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 2, 1))).clone(namedValues=NamedValues(("publickey", 4), ("password", 2), ("hostbased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoAuth.setStatus('current')
sshUserInfoHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostName.setStatus('current')
sshUserInfoHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 8, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostIp.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
portSecLockAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deleteOnReset", 1), ("deleteOnTimeout", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecLockAddrMode.setStatus('current')
portSecFDBPermanentTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 2), )
if mibBuilder.loadTexts: portSecFDBPermanentTable.setStatus('current')
portSecFDBPermanentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "portSecFDBPermPort"), (0, "DES-1210-26MEbx", "portSecFDBPermIndex"))
if mibBuilder.loadTexts: portSecFDBPermanentEntry.setStatus('current')
portSecFDBPermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermIndex.setStatus('current')
portSecFDBPermVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermVlanID.setStatus('current')
portSecFDBPermMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermMac.setStatus('current')
portSecFDBPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermPort.setStatus('current')
portSecTableClearPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecTableClearPortList.setStatus('current')
portSecTableClear = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 2, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecTableClear.setStatus('current')
cableDiagTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1), )
if mibBuilder.loadTexts: cableDiagTable.setStatus('current')
cableDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "cableDiagPortIndex"))
if mibBuilder.loadTexts: cableDiagEntry.setStatus('current')
cableDiagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPortIndex.setStatus('current')
cableDiagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastEthernet", 0), ("gigaEthernet", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPortType.setStatus('current')
cableDiagLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("linkdown", 0), ("linkup", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagLinkStatus.setStatus('current')
cableDiagPair1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("crosstalk", 4), ("unknown", 5), ("count", 6), ("no-cable", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1Status.setStatus('current')
cableDiagPair2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("crosstalk", 4), ("unknown", 5), ("count", 6), ("no-cable", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2Status.setStatus('current')
cableDiagPair3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("crosstalk", 4), ("unknown", 5), ("count", 6), ("no-cable", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3Status.setStatus('current')
cableDiagPair4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("crosstalk", 4), ("unknown", 5), ("count", 6), ("no-cable", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4Status.setStatus('current')
cableDiagPair1Length = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1Length.setStatus('current')
cableDiagPair2Length = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2Length.setStatus('current')
cableDiagPair3Length = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3Length.setStatus('current')
cableDiagPair4Length = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4Length.setStatus('current')
cableDiagAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("action", 1), ("processing", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagAction.setStatus('current')
cableDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notrun", 1), ("processing", 2), ("lasttestok", 3), ("lasttestfailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagStatus.setStatus('current')
autoCableDiagTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 2), )
if mibBuilder.loadTexts: autoCableDiagTable.setStatus('current')
autoCableDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "autoCableDiagPortIndex"))
if mibBuilder.loadTexts: autoCableDiagEntry.setStatus('current')
autoCableDiagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoCableDiagPortIndex.setStatus('current')
autoCableDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 35, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoCableDiagStatus.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1))
ipv4aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1), )
if mibBuilder.loadTexts: ipv4aclProfileTable.setStatus('obsolete')
ipv4aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ipv4aclProfileNo"))
if mibBuilder.loadTexts: ipv4aclProfileEntry.setStatus('obsolete')
ipv4aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileNo.setStatus('obsolete')
ipv4aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("impb", 3), ("arpSP-permit", 4), ("arpSP-deny", 5), ("aclQos", 8), ("userDefined", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileType.setStatus('obsolete')
ipv4aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileRuleCount.setStatus('obsolete')
ipv4aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileMask.setStatus('obsolete')
ipv4aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstMacAddrMask.setStatus('obsolete')
ipv4aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcMacAddrMask.setStatus('obsolete')
ipv4aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 58, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("icmpv6", 58), ("ipProtocolMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileIPProtocol.setStatus('obsolete')
ipv4aclProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileIPProtocolMask.setStatus('obsolete')
ipv4aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstIpAddrMask.setStatus('obsolete')
ipv4aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcIpAddrMask.setStatus('obsolete')
ipv4aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstPortMask.setStatus('obsolete')
ipv4aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcPortMask.setStatus('obsolete')
ipv4aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 13), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileArpSenderMacAddrMask.setStatus('obsolete')
ipv4aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 14), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileArpSenderIpAddrMask.setStatus('obsolete')
ipv4aclProfileUdfOffsetMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileUdfOffsetMap.setStatus('obsolete')
ipv4aclUdfOffsetBase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l2", 0), ("l3", 2), ("l4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetBase1.setStatus('obsolete')
ipv4aclUdfOffsetByte1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetByte1.setStatus('obsolete')
ipv4aclUdfOffsetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 18), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetMask1.setStatus('obsolete')
ipv4aclUdfOffsetBase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l2", 0), ("l3", 2), ("l4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetBase2.setStatus('obsolete')
ipv4aclUdfOffsetByte2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetByte2.setStatus('obsolete')
ipv4aclUdfOffsetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 21), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetMask2.setStatus('obsolete')
ipv4aclUdfOffsetBase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l2", 0), ("l3", 2), ("l4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetBase3.setStatus('obsolete')
ipv4aclUdfOffsetByte3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetByte3.setStatus('obsolete')
ipv4aclUdfOffsetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 24), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetMask3.setStatus('obsolete')
ipv4aclUdfOffsetBase4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l2", 0), ("l3", 2), ("l4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetBase4.setStatus('obsolete')
ipv4aclUdfOffsetByte4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetByte4.setStatus('obsolete')
ipv4aclUdfOffsetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 27), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetMask4.setStatus('obsolete')
ipv4aclUdfDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 28), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfDstMacMask.setStatus('obsolete')
ipv4aclUdfSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfSrcMacMask.setStatus('obsolete')
ipv4aclUdfCTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfCTagMask.setStatus('obsolete')
ipv4aclUdfSTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfSTagMask.setStatus('obsolete')
ipv4aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 1, 1, 32), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4aclProfileStatus.setStatus('obsolete')
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 11, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("l2", 1), ("l3v4", 2), ("l3v6", 11), ("impb", 3), ("arpSP-permit", 4), ("arpSP-deny", 5), ("aclQos", 8), ("userDefined", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileMask.setStatus('current')
aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setStatus('current')
aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setStatus('current')
aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 58, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("icmpv6", 58), ("ipProtocolMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocol.setStatus('current')
aclProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocolMask.setStatus('current')
aclProfileDstIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMaskType.setStatus('current')
aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setStatus('current')
aclProfileSrcIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMaskType.setStatus('current')
aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 12), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setStatus('current')
aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 13), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstPortMask.setStatus('current')
aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 14), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcPortMask.setStatus('current')
aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 15), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderMacAddrMask.setStatus('current')
aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 16), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderIpAddrMask.setStatus('current')
aclProfileUdfOffsetMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileUdfOffsetMap.setStatus('current')
aclUdfOffsetBase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l2", 0), ("l3", 2), ("l4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetBase1.setStatus('current')
aclUdfOffsetByte1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetByte1.setStatus('current')
aclUdfOffsetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 20), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetMask1.setStatus('current')
aclUdfOffsetBase2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l2", 0), ("l3", 2), ("l4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetBase2.setStatus('current')
aclUdfOffsetByte2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetByte2.setStatus('current')
aclUdfOffsetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 23), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetMask2.setStatus('current')
aclUdfOffsetBase3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l2", 0), ("l3", 2), ("l4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetBase3.setStatus('current')
aclUdfOffsetByte3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetByte3.setStatus('current')
aclUdfOffsetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 26), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetMask3.setStatus('current')
aclUdfOffsetBase4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l2", 0), ("l3", 2), ("l4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetBase4.setStatus('current')
aclUdfOffsetByte4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetByte4.setStatus('current')
aclUdfOffsetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 29), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetMask4.setStatus('current')
aclUdfDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 30), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfDstMacMask.setStatus('current')
aclUdfSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 31), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfSrcMacMask.setStatus('current')
aclUdfCTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfCTagMask.setStatus('current')
aclUdfSTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfSTagMask.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 1, 2, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aclL2ProfileID"), (0, "DES-1210-26MEbx", "aclL2AccessID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("replaceDSCP", 5), ("replace1P", 6), ("replaceQueue", 7), ("replaceVLAN", 8))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleRateLimit.setStatus('current')
aclL2RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplaceDSCP.setStatus('current')
aclL2RuleReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplace1P.setStatus('current')
aclL2RuleReplaceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplaceQueue.setStatus('current')
aclL2RuleReplaceVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplaceVLAN.setStatus('current')
aclL2RuleFilterTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 17), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleFilterTimeRange.setStatus('current')
aclL2RuleVlanIdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 18), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanIdMask.setStatus('current')
aclL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 51), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInPortList.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3))
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aclL3RuleProfileNo"), (0, "DES-1210-26MEbx", "aclL3RuleAccessID"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
aclL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileNo.setStatus('current')
aclL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleProtocol.setStatus('current')
aclL3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProtocolMask.setStatus('current')
aclL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setStatus('current')
aclL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setStatus('current')
aclL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setStatus('current')
aclL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setStatus('current')
aclL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setStatus('current')
aclL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setStatus('current')
aclL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setStatus('current')
aclL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setStatus('current')
aclL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setStatus('current')
aclL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setStatus('current')
aclL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setStatus('current')
aclL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setStatus('current')
aclL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setStatus('current')
aclL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setStatus('current')
aclL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setStatus('current')
aclL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setStatus('current')
aclL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleDscp.setStatus('current')
aclL3RuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTos.setStatus('current')
aclL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleIgmpType.setStatus('current')
aclL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("replaceDSCP", 5), ("replace1P", 6), ("replaceQueue", 7), ("replaceVLAN", 8))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleAction.setStatus('current')
aclL3RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleRateLimit.setStatus('current')
aclL3RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplaceDSCP.setStatus('current')
aclL3RuleReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplace1P.setStatus('current')
aclL3RuleReplaceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplaceQueue.setStatus('current')
aclL3RuleReplaceVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplaceVLAN.setStatus('current')
aclL3RuleFilterTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 31), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleFilterTimeRange.setStatus('current')
aclL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 51), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePortList.setStatus('current')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
aclv6L3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2), )
if mibBuilder.loadTexts: aclv6L3RuleTable.setStatus('current')
aclv6L3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aclv6L3RuleProfileNo"), (0, "DES-1210-26MEbx", "aclv6L3RuleAccessID"))
if mibBuilder.loadTexts: aclv6L3RuleEntry.setStatus('current')
aclv6L3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleAccessID.setStatus('current')
aclv6L3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProfileNo.setStatus('current')
aclv6L3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17, 58))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17), ("icmpv6", 58)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleProtocol.setStatus('current')
aclv6L3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProtocolMask.setStatus('current')
aclv6L3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageType.setStatus('current')
aclv6L3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageCode.setStatus('current')
aclv6L3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 7), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddr.setStatus('current')
aclv6L3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 8), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddr.setStatus('current')
aclv6L3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddrMask.setStatus('current')
aclv6L3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddrMask.setStatus('current')
aclv6L3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPort.setStatus('current')
aclv6L3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPort.setStatus('current')
aclv6L3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPortMask.setStatus('current')
aclv6L3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPortMask.setStatus('current')
aclv6L3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpAckBit.setStatus('current')
aclv6L3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpRstBit.setStatus('current')
aclv6L3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpUrgBit.setStatus('current')
aclv6L3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpPshBit.setStatus('current')
aclv6L3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpSynBit.setStatus('current')
aclv6L3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpFinBit.setStatus('current')
aclv6L3RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTrafficClass.setStatus('current')
aclv6L3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("replaceDSCP", 5), ("replace1P", 6), ("replaceQueue", 7), ("replaceVLAN", 8))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleAction.setStatus('current')
aclv6L3RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleRateLimit.setStatus('current')
aclv6L3RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplaceDSCP.setStatus('current')
aclv6L3RuleReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplace1P.setStatus('current')
aclv6L3RuleReplaceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplaceQueue.setStatus('current')
aclv6L3RuleReplaceVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplaceVLAN.setStatus('current')
aclv6L3RuleFilterTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 30), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleFilterTimeRange.setStatus('current')
aclv6L3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 51), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RulePortList.setStatus('current')
aclv6L3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 3, 2, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleStatus.setStatus('current')
aclPacketRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4))
aclPacketRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1), )
if mibBuilder.loadTexts: aclPacketRuleTable.setStatus('current')
aclPacketRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aclPacketProfileID"), (0, "DES-1210-26MEbx", "aclPacketAccessID"))
if mibBuilder.loadTexts: aclPacketRuleEntry.setStatus('current')
aclPacketAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPacketAccessID.setStatus('current')
aclPacketProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPacketProfileID.setStatus('current')
aclPacketRuleOffsetValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue1.setStatus('current')
aclPacketRuleOffsetValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue2.setStatus('current')
aclPacketRuleOffsetValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue3.setStatus('current')
aclPacketRuleOffsetValue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue4.setStatus('current')
aclPacketRuleDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleDstMac.setStatus('current')
aclPacketRuleDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleDstMacMask.setStatus('current')
aclPacketRuleSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleSrcMac.setStatus('current')
aclPacketRuleSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleSrcMacMask.setStatus('current')
aclPacketRuleCTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleCTag.setStatus('current')
aclPacketRuleCTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleCTagMask.setStatus('current')
aclPacketRuleSTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleSTag.setStatus('current')
aclPacketRuleSTagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleSTagMask.setStatus('current')
aclPacketRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("replaceDSCP", 5), ("replace1P", 6), ("replaceQueue", 7), ("replaceVLAN", 8))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleAction.setStatus('current')
aclPacketRuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleRateLimit.setStatus('current')
aclPacketRuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleReplaceDSCP.setStatus('current')
aclPacketRuleReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleReplace1P.setStatus('current')
aclPacketRuleReplaceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleReplaceQueue.setStatus('current')
aclPacketRuleReplaceVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleReplaceVLAN.setStatus('current')
aclPacketRuleFilterTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 21), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclPacketRuleFilterTimeRange.setStatus('current')
aclPacketRuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 51), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleInPortList.setStatus('current')
aclPacketRuleOffsetValue1Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 52), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue1Mask.setStatus('current')
aclPacketRuleOffsetValue2Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 53), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue2Mask.setStatus('current')
aclPacketRuleOffsetValue3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 54), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue3Mask.setStatus('current')
aclPacketRuleOffsetValue4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 55), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue4Mask.setStatus('current')
aclPacketRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 4, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclPacketRuleStatus.setStatus('current')
aclFlowMeterRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10))
aclFlowMeterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1), )
if mibBuilder.loadTexts: aclFlowMeterTable.setStatus('current')
aclFlowMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aclFlowMeterProfileID"), (0, "DES-1210-26MEbx", "aclFlowMeterAccessID"))
if mibBuilder.loadTexts: aclFlowMeterEntry.setStatus('current')
aclFlowMeterProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclFlowMeterProfileID.setStatus('current')
aclFlowMeterAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclFlowMeterAccessID.setStatus('current')
aclFlowMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclFlowMeterRate.setStatus('current')
aclFlowMeterBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1016))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclFlowMeterBurstSize.setStatus('current')
aclFlowMeterReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclFlowMeterReplaceDscp.setStatus('current')
aclFlowMeterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5))).clone(namedValues=NamedValues(("drop", 2), ("replaceDSCP", 5))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclFlowMeterAction.setStatus('current')
aclFlowMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 15, 10, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclFlowMeterStatus.setStatus('current')
cpuFilterProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1))
cpuFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2), )
if mibBuilder.loadTexts: cpuFilterProfileTable.setStatus('current')
cpuFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "cpuFilterProfileNo"))
if mibBuilder.loadTexts: cpuFilterProfileEntry.setStatus('current')
cpuFilterProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterProfileNo.setStatus('current')
cpuFilterProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 11))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("udf", 9), ("l3v6", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileType.setStatus('current')
cpuFilterProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterProfileRuleCount.setStatus('current')
cpuFilterProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileMask.setStatus('current')
cpuFilterProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstMacAddrMask.setStatus('current')
cpuFilterProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcMacAddrMask.setStatus('current')
cpuFilterProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 41, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipv6", 41), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileIPProtocol.setStatus('current')
cpuFilterProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileIPProtocolMask.setStatus('current')
cpuFilterProfileDstIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstIpAddrMaskType.setStatus('current')
cpuFilterProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstIpAddrMask.setStatus('current')
cpuFilterProfileSrcIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcIpAddrMaskType.setStatus('current')
cpuFilterProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 12), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcIpAddrMask.setStatus('current')
cpuFilterProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 13), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstPortMask.setStatus('current')
cpuFilterProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 14), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcPortMask.setStatus('current')
cpuFilterProfileOffset1Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileOffset1Mask.setStatus('current')
cpuFilterProfileOffset2Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileOffset2Mask.setStatus('current')
cpuFilterProfileOffset3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileOffset3Mask.setStatus('current')
cpuFilterProfileOffset4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileOffset4Mask.setStatus('current')
cpuFilterProfileOffset5Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileOffset5Mask.setStatus('current')
cpuFilterProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 1, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterProfileStatus.setStatus('current')
cpuFilterL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2))
cpuFilterL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1), )
if mibBuilder.loadTexts: cpuFilterL2RuleTable.setStatus('current')
cpuFilterL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "cpuFilterL2ProfileID"), (0, "DES-1210-26MEbx", "cpuFilterL2AccessID"))
if mibBuilder.loadTexts: cpuFilterL2RuleEntry.setStatus('current')
cpuFilterL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2ProfileID.setStatus('current')
cpuFilterL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2AccessID.setStatus('current')
cpuFilterL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleEtherType.setStatus('current')
cpuFilterL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleDstMacAddr.setStatus('current')
cpuFilterL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleSrcMacAddr.setStatus('current')
cpuFilterL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleVlanId.setStatus('current')
cpuFilterL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2Rule1pPriority.setStatus('current')
cpuFilterL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2RuleDstMacAddrMask.setStatus('current')
cpuFilterL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2RuleSrcMacAddrMask.setStatus('current')
cpuFilterL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleInPortList.setStatus('current')
cpuFilterL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleAction.setStatus('current')
cpuFilterL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL2RuleStatus.setStatus('current')
cpuFilterL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3))
cpuFilterL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1), )
if mibBuilder.loadTexts: cpuFilterL3RuleTable.setStatus('current')
cpuFilterL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "cpuFilterL3RuleProfileNo"), (0, "DES-1210-26MEbx", "cpuFilterL3RuleAccessID"))
if mibBuilder.loadTexts: cpuFilterL3RuleEntry.setStatus('current')
cpuFilterL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleProfileNo.setStatus('current')
cpuFilterL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleAccessID.setStatus('current')
cpuFilterL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleProtocol.setStatus('current')
cpuFilterL3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleProtocolMask.setStatus('current')
cpuFilterL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleICMPMessageType.setStatus('current')
cpuFilterL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleICMPMessageCode.setStatus('current')
cpuFilterL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleDstIpAddr.setStatus('current')
cpuFilterL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleSrcIpAddr.setStatus('current')
cpuFilterL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleDstIpAddrMask.setStatus('current')
cpuFilterL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleSrcIpAddrMask.setStatus('current')
cpuFilterL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpDstPort.setStatus('current')
cpuFilterL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpSrcPort.setStatus('current')
cpuFilterL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpDstPortMask.setStatus('current')
cpuFilterL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpSrcPortMask.setStatus('current')
cpuFilterL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpAckBit.setStatus('current')
cpuFilterL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpRstBit.setStatus('current')
cpuFilterL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUrgBit.setStatus('current')
cpuFilterL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpPshBit.setStatus('current')
cpuFilterL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpSynBit.setStatus('current')
cpuFilterL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpFinBit.setStatus('current')
cpuFilterL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleDscp.setStatus('current')
cpuFilterL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleIgmpType.setStatus('current')
cpuFilterL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 23), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RulePortList.setStatus('current')
cpuFilterL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleAction.setStatus('current')
cpuFilterL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleStatus.setStatus('current')
cpuFilterv6L3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2), )
if mibBuilder.loadTexts: cpuFilterv6L3RuleTable.setStatus('current')
cpuFilterv6L3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "cpuFilterv6L3RuleProfileNo"), (0, "DES-1210-26MEbx", "cpuFilterv6L3RuleAccessID"))
if mibBuilder.loadTexts: cpuFilterv6L3RuleEntry.setStatus('current')
cpuFilterv6L3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProfileNo.setStatus('current')
cpuFilterv6L3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleAccessID.setStatus('current')
cpuFilterv6L3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 41))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("ipv6", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProtocol.setStatus('current')
cpuFilterv6L3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProtocolMask.setStatus('current')
cpuFilterv6L3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleICMPMessageType.setStatus('current')
cpuFilterv6L3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleICMPMessageCode.setStatus('current')
cpuFilterv6L3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 7), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleDstIpAddr.setStatus('current')
cpuFilterv6L3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 8), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleSrcIpAddr.setStatus('current')
cpuFilterv6L3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleDstIpAddrMask.setStatus('current')
cpuFilterv6L3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleSrcIpAddrMask.setStatus('current')
cpuFilterv6L3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpDstPort.setStatus('current')
cpuFilterv6L3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpSrcPort.setStatus('current')
cpuFilterv6L3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpDstPortMask.setStatus('current')
cpuFilterv6L3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpSrcPortMask.setStatus('current')
cpuFilterv6L3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpAckBit.setStatus('current')
cpuFilterv6L3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpRstBit.setStatus('current')
cpuFilterv6L3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUrgBit.setStatus('current')
cpuFilterv6L3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpPshBit.setStatus('current')
cpuFilterv6L3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpSynBit.setStatus('current')
cpuFilterv6L3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpFinBit.setStatus('current')
cpuFilterv6L3RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTrafficClass.setStatus('current')
cpuFilterv6L3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 22), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RulePortList.setStatus('current')
cpuFilterv6L3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleAction.setStatus('current')
cpuFilterv6L3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 3, 2, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleStatus.setStatus('current')
cpuFilterUdfRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4))
cpuFilterUdfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1), )
if mibBuilder.loadTexts: cpuFilterUdfRuleTable.setStatus('current')
cpuFilterUdfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "cpuFilterUdfRuleProfileNo"), (0, "DES-1210-26MEbx", "cpuFilterUdfRuleAccessID"))
if mibBuilder.loadTexts: cpuFilterUdfRuleEntry.setStatus('current')
cpuFilterUdfRuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterUdfRuleProfileNo.setStatus('current')
cpuFilterUdfRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterUdfRuleAccessID.setStatus('current')
cpuFilterUdfRuleOffset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset1.setStatus('current')
cpuFilterUdfRuleOffset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset2.setStatus('current')
cpuFilterUdfRuleOffset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset3.setStatus('current')
cpuFilterUdfRuleOffset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset4.setStatus('current')
cpuFilterUdfRuleOffset5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset5.setStatus('current')
cpuFilterUdfRuleOffset1Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset1Mask.setStatus('current')
cpuFilterUdfRuleOffset2Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset2Mask.setStatus('current')
cpuFilterUdfRuleOffset3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset3Mask.setStatus('current')
cpuFilterUdfRuleOffset4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset4Mask.setStatus('current')
cpuFilterUdfRuleOffset5Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterUdfRuleOffset5Mask.setStatus('current')
cpuFilterUdfRulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 13), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterUdfRulePortList.setStatus('current')
cpuFilterUdfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterUdfRuleAction.setStatus('current')
cpuFilterUdfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 4, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterUdfRuleStatus.setStatus('current')
cpuFilterState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 33, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterState.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "snmpV3UserName"), (0, "DES-1210-26MEbx", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "snmpV3GroupName"), (0, "DES-1210-26MEbx", "snmpV3GroupSecurityModel"), (0, "DES-1210-26MEbx", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 4, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "snmpV3viewTreeName"), (0, "DES-1210-26MEbx", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 5, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
ipv4snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 1), )
if mibBuilder.loadTexts: ipv4snmpV3HostTable.setStatus('obsolete')
ipv4snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ipv4snmpV3HostAddress"))
if mibBuilder.loadTexts: ipv4snmpV3HostEntry.setStatus('obsolete')
ipv4snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4snmpV3HostAddress.setStatus('obsolete')
ipv4snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostCommunityName.setStatus('obsolete')
ipv4snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostVersion.setStatus('obsolete')
ipv4snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostStatus.setStatus('obsolete')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 2), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "snmpV3HostAddress"), (0, "DES-1210-26MEbx", "snmpV3IPType"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 2, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3IPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3IPType.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostInterfaceName.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapColdStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapColdStart.setStatus('current')
snmpV3TrapWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapWarmStart.setStatus('current')
snmpV3TrapLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLinkUpDown.setStatus('current')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
snmpV3TrapBPDUAttack = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("attackDetected", 2), ("attackCleared", 3), ("both", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBPDUAttack.setStatus('current')
snmpV3TrapPortSecurity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPortSecurity.setStatus('current')
snmpV3TrapIMPBViolation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapIMPBViolation.setStatus('current')
snmpV3TrapLBD = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLBD.setStatus('current')
snmpV3TrapDHCPServerScreening = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapDHCPServerScreening.setStatus('current')
snmpV3TrapDuplicateIPDetected = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapDuplicateIPDetected.setStatus('current')
snmpV3TrapDHCPv6ServerScreening = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapDHCPv6ServerScreening.setStatus('current')
snmpV3TrapICMPv6RaAllNodeFilter = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapICMPv6RaAllNodeFilter.setStatus('current')
snmpV3TrapLoginout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLoginout.setStatus('current')
snmpV3TrapDULD = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 8, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapDULD.setStatus('current')
snmpV3CommunityEncryption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3CommunityEncryption.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0))
snmpTrapSNMPAuthentication = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 1))
if mibBuilder.loadTexts: snmpTrapSNMPAuthentication.setStatus('current')
snmpTrapColdStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 2))
if mibBuilder.loadTexts: snmpTrapColdStart.setStatus('current')
snmpTrapWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 3))
if mibBuilder.loadTexts: snmpTrapWarmStart.setStatus('current')
snmpTrapCopperLinkUpDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 4))
if mibBuilder.loadTexts: snmpTrapCopperLinkUpDown.setStatus('current')
snmpTrapRSTPStateChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 5))
if mibBuilder.loadTexts: snmpTrapRSTPStateChange.setStatus('current')
snmpTrapFirmUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 6))
if mibBuilder.loadTexts: snmpTrapFirmUpgrade.setStatus('current')
snmpTrapBPDUAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 11))
if mibBuilder.loadTexts: snmpTrapBPDUAttack.setStatus('current')
snmpTrapPortSecurity = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 12))
if mibBuilder.loadTexts: snmpTrapPortSecurity.setStatus('current')
snmpTrapIMPBv2 = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 13))
if mibBuilder.loadTexts: snmpTrapIMPBv2.setStatus('current')
snmpTrapLBD = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 14))
if mibBuilder.loadTexts: snmpTrapLBD.setStatus('current')
snmpTrapDHCPScreen = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 15))
if mibBuilder.loadTexts: snmpTrapDHCPScreen.setStatus('current')
snmpTrapGratuitousArp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 16))
if mibBuilder.loadTexts: snmpTrapGratuitousArp.setStatus('current')
macNotificatiotn = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 17))
if mibBuilder.loadTexts: macNotificatiotn.setStatus('current')
duplicateIP = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 21))
if mibBuilder.loadTexts: duplicateIP.setStatus('current')
trafficControl = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 22))
if mibBuilder.loadTexts: trafficControl.setStatus('current')
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 23))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
newRootBrgaddress = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 24))
if mibBuilder.loadTexts: newRootBrgaddress.setStatus('current')
newRootOlddesignatedroot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 25))
if mibBuilder.loadTexts: newRootOlddesignatedroot.setStatus('current')
newRootMSTibridgeregionalroot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 26))
if mibBuilder.loadTexts: newRootMSTibridgeregionalroot.setStatus('current')
snmpTrapDHCPv6Screen = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 27))
if mibBuilder.loadTexts: snmpTrapDHCPv6Screen.setStatus('current')
snmpTrapICMPv6RaAllNodeFilter = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 28))
if mibBuilder.loadTexts: snmpTrapICMPv6RaAllNodeFilter.setStatus('current')
snmpTrapDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 29))
if mibBuilder.loadTexts: snmpTrapDyingGasp.setStatus('current')
snmpTrapWebLoginout = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 30))
if mibBuilder.loadTexts: snmpTrapWebLoginout.setStatus('current')
snmpTrapLoginout = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 31))
if mibBuilder.loadTexts: snmpTrapLoginout.setStatus('current')
snmpTrapDULD = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 32))
if mibBuilder.loadTexts: snmpTrapDULD.setStatus('current')
snmpTrapDOSPrevent = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 34))
if mibBuilder.loadTexts: snmpTrapDOSPrevent.setStatus('current')
snmpTrapAutoCableDiag = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 120, 0, 36))
if mibBuilder.loadTexts: snmpTrapAutoCableDiag.setStatus('current')
syslogSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 1))
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
syslogSaveMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onDemand", 0), ("timeInterval", 1), ("logTrigger", 2))).clone('logTrigger')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMode.setStatus('current')
syslogSaveMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMinutes.setStatus('current')
ipv4syslogServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2))
ipv4syslogServTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1), )
if mibBuilder.loadTexts: ipv4syslogServTable.setStatus('current')
ipv4syslogServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ipv4syslogServIndex"))
if mibBuilder.loadTexts: ipv4syslogServEntry.setStatus('current')
ipv4syslogServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4syslogServIndex.setStatus('current')
ipv4syslogServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServAddr.setStatus('current')
ipv4syslogServSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("information", 6), ("all", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServSeverity.setStatus('current')
ipv4syslogServFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServFacility.setStatus('current')
ipv4syslogServUDPport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(514, 514), ValueRangeConstraint(6000, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServUDPport.setStatus('current')
ipv4syslogServSrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServSrvStatus.setStatus('current')
ipv4syslogServSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogServSrvRowStatus.setStatus('current')
syslogServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3))
syslogServTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1), )
if mibBuilder.loadTexts: syslogServTable.setStatus('current')
syslogServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "syslogServIndex"))
if mibBuilder.loadTexts: syslogServEntry.setStatus('current')
syslogServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogServIndex.setStatus('current')
syslogServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServAddrType.setStatus('current')
syslogServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServAddr.setStatus('current')
syslogServInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServInterfaceName.setStatus('current')
syslogServSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("information", 6), ("all", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServSeverity.setStatus('current')
syslogServFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServFacility.setStatus('current')
syslogServUDPport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(514, 514), ValueRangeConstraint(6000, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServUDPport.setStatus('current')
syslogServSrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvStatus.setStatus('current')
syslogServSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 16, 3, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvRowStatus.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 5, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 6, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
sysTrapIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapIP.setStatus('current')
sysTrapSystemEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("deviceBootUp", 1), ("illegalLogin", 2), ("both", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapSystemEvent.setStatus('current')
sysTrapFiberPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFiberPortEvent.setStatus('current')
sysTrapTwistedPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapTwistedPortEvent.setStatus('current')
sysTrapStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStateChangeEvent.setStatus('current')
sysTrapFirmUpgradeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFirmUpgradeEvent.setStatus('current')
sysTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStatus.setStatus('current')
sysTrapPortSecurity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPortSecurity.setStatus('current')
sysTrapIMPBViolation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapIMPBViolation.setStatus('current')
sysTrapLBD = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapLBD.setStatus('current')
sysTrapDHCPServerScreening = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapDHCPServerScreening.setStatus('current')
sysTrapDuplicateIPDetected = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 30, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapDuplicateIPDetected.setStatus('current')
ipv4sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPTimeSeconds.setStatus('obsolete')
ipv4sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPFirstServer.setStatus('obsolete')
ipv4sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPSecondServer.setStatus('obsolete')
ipv4sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPPollInterval.setStatus('obsolete')
ipv4sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPState.setStatus('obsolete')
ipv4sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTOffset.setStatus('obsolete')
ipv4sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPGMTMinutes.setStatus('obsolete')
ipv4sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMon.setStatus('obsolete')
ipv4sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartDay.setStatus('obsolete')
ipv4sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartHour.setStatus('obsolete')
ipv4sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMin.setStatus('obsolete')
ipv4sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMon.setStatus('obsolete')
ipv4sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndDay.setStatus('obsolete')
ipv4sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndHour.setStatus('obsolete')
ipv4sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMin.setStatus('obsolete')
ipv4sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTState.setStatus('obsolete')
sysSNTPServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17))
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPFirstType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstType.setStatus('current')
sysSNTPFirstInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstInterfaceName.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPSecondType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondType.setStatus('current')
sysSNTPSecondInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondInterfaceName.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
sysSNTPDSTMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("repeating", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTMethod.setStatus('current')
sysSNTPDSTRepeatStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartMon.setStatus('current')
sysSNTPDSTRepeatStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("last", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("fifth", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartWeek.setStatus('current')
sysSNTPDSTRepeatStartWeekDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartWeekDay.setStatus('current')
sysSNTPDSTRepeatStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartHour.setStatus('current')
sysSNTPDSTRepeatStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartMin.setStatus('current')
sysSNTPDSTRepeatEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndMon.setStatus('current')
sysSNTPDSTRepeatEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("last", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("fifth", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndWeek.setStatus('current')
sysSNTPDSTRepeatEndWeekDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndWeekDay.setStatus('current')
sysSNTPDSTRepeatEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndHour.setStatus('current')
sysSNTPDSTRepeatEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 20, 17, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndMin.setStatus('current')
limitIpMulticastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 1), )
if mibBuilder.loadTexts: limitIpMulticastProfileTable.setStatus('current')
limitIpMulticastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "limitIpMulticastIPType"), (0, "DES-1210-26MEbx", "limitIpMulticastProfileID"))
if mibBuilder.loadTexts: limitIpMulticastProfileEntry.setStatus('current')
limitIpMulticastIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastIPType.setStatus('current')
limitIpMulticastProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastProfileID.setStatus('current')
limitIpMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastProfileName.setStatus('current')
limitIpMulticastProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastProfileStatus.setStatus('current')
limitIpMulticastEntryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 2), )
if mibBuilder.loadTexts: limitIpMulticastEntryTable.setStatus('current')
limitIpMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "limitIpMulticastEntryIPType"), (0, "DES-1210-26MEbx", "limitIpMulticastEntryProfileID"), (0, "DES-1210-26MEbx", "limitIpMulticaststartIpAddr"), (0, "DES-1210-26MEbx", "limitIpMulticastendIpAddr"))
if mibBuilder.loadTexts: limitIpMulticastEntry.setStatus('current')
limitIpMulticastEntryIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastEntryIPType.setStatus('current')
limitIpMulticastEntryProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastEntryProfileID.setStatus('current')
limitIpMulticaststartIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticaststartIpAddr.setStatus('current')
limitIpMulticastendIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastendIpAddr.setStatus('current')
limitIpMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastStatus.setStatus('current')
limitIpMulticastPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 3), )
if mibBuilder.loadTexts: limitIpMulticastPortTable.setStatus('current')
limitIpMulticastPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "limitIpMulticastPortIPType"), (0, "DES-1210-26MEbx", "limitIpMulticastPortID"))
if mibBuilder.loadTexts: limitIpMulticastPortEntry.setStatus('current')
limitIpMulticastPortIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastPortIPType.setStatus('current')
limitIpMulticastPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastPortID.setStatus('current')
limitIpMulticastPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortState.setStatus('current')
limitIpMulticastPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 3, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortProfileID.setStatus('current')
limitIpMulticastPortMaxGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortMaxGrp.setStatus('current')
limitIpMulticastPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 45, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("replace", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortAction.setStatus('current')
guestVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanName.setStatus('current')
guestVlanPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 24, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanPort.setStatus('current')
guestVlanDelState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanDelState.setStatus('current')
protocolGroupNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 1), )
if mibBuilder.loadTexts: protocolGroupNameTable.setStatus('current')
protocolGroupNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "protocolGroupGID"))
if mibBuilder.loadTexts: protocolGroupNameEntry.setStatus('current')
protocolGroupGID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolGroupGID.setStatus('current')
protocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolGroupName.setStatus('current')
protocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 2), )
if mibBuilder.loadTexts: protocolGroupTable.setStatus('current')
protocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "protocolGroupId"), (0, "DES-1210-26MEbx", "protocolGroupFrameType"), (0, "DES-1210-26MEbx", "protocolGroupProtocolValue"))
if mibBuilder.loadTexts: protocolGroupEntry.setStatus('current')
protocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolGroupId.setStatus('current')
protocolGroupFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8023-snap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolGroupFrameType.setStatus('current')
protocolGroupProtocolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolGroupProtocolValue.setStatus('current')
protocolGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 2, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolGroupRowStatus.setStatus('current')
protocolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 3), )
if mibBuilder.loadTexts: protocolVlanTable.setStatus('current')
protocolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "protocolVlanPort"), (0, "DES-1210-26MEbx", "protocolVlanVID"), (0, "DES-1210-26MEbx", "protocolVlanGroupID"))
if mibBuilder.loadTexts: protocolVlanEntry.setStatus('current')
protocolVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolVlanPort.setStatus('current')
protocolVlanVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolVlanVID.setStatus('current')
protocolVlanGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolVlanGroupID.setStatus('current')
protocolVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 101, 3, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolVlanRowStatus.setStatus('current')
macNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyState.setStatus('current')
macNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyInterval.setStatus('current')
macNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyHistorySize.setStatus('current')
macNotifyCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 4), )
if mibBuilder.loadTexts: macNotifyCtrlTable.setStatus('current')
macNotifyCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "macNotifyCtrlIndex"))
if mibBuilder.loadTexts: macNotifyCtrlEntry.setStatus('current')
macNotifyCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotifyCtrlIndex.setStatus('current')
macNotifyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyPortStatus.setStatus('current')
macNotifyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 5))
macNotifyInfoDiscription = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 25, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macNotifyInfoDiscription.setStatus('current')
sysBPDUAttackStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackStateEnable.setStatus('current')
sysBPDUAttackRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackRecoverTime.setStatus('current')
sysBPDUAttackCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 3), )
if mibBuilder.loadTexts: sysBPDUAttackCtrlTable.setStatus('current')
sysBPDUAttackCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysBPDUAttackCtrlIndex"))
if mibBuilder.loadTexts: sysBPDUAttackCtrlEntry.setStatus('current')
sysBPDUAttackCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBPDUAttackCtrlIndex.setStatus('current')
sysBPDUAttackPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackPortState.setStatus('current')
sysBPDUAttackPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("block", 2), ("shutdown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackPortMode.setStatus('current')
sysBPDUAttackPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("underAttack", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBPDUAttackPortStatus.setStatus('current')
sysBPDUAttackLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 77, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("attackDetected", 2), ("attackCleared", 3), ("both", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackLog.setStatus('current')
vlanTrunkSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 36, 1))
vlanTrunkGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkGlobalStatus.setStatus('current')
vlanTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 36, 1, 2), )
if mibBuilder.loadTexts: vlanTrunkTable.setStatus('current')
vlanTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 36, 1, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "vlanTrunkIfIndex"))
if mibBuilder.loadTexts: vlanTrunkEntry.setStatus('current')
vlanTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 36, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkIfIndex.setStatus('current')
vlanTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 36, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkState.setStatus('current')
qinqSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1))
qinqVLANTranslation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 2))
qinqGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqGlobalStatus.setStatus('current')
qinqTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1, 2), )
if mibBuilder.loadTexts: qinqTable.setStatus('current')
qinqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "qinqIfIndex"))
if mibBuilder.loadTexts: qinqEntry.setStatus('current')
qinqIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinqIfIndex.setStatus('current')
qinqRoleState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqRoleState.setStatus('current')
qinqOuterTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqOuterTPID.setStatus('current')
qinqTrustCVIDState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqTrustCVIDState.setStatus('current')
qinqVLANTranslationState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqVLANTranslationState.setStatus('current')
qinqVlanTranslationCVIDTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 2, 1), )
if mibBuilder.loadTexts: qinqVlanTranslationCVIDTable.setStatus('current')
qinqVlanTranslationCVIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "qinqVlanTranslationCVID"))
if mibBuilder.loadTexts: qinqVlanTranslationCVIDEntry.setStatus('current')
qinqVlanTranslationCVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinqVlanTranslationCVID.setStatus('current')
qinqVlanTranslationSVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qinqVlanTranslationSVID.setStatus('current')
qinqVlanTranslationSVIDOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("replace", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qinqVlanTranslationSVIDOperation.setStatus('current')
qinqVlanTranslationCVIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 37, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qinqVlanTranslationCVIDRowStatus.setStatus('current')
eoamSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1))
eoamLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2))
eoamTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2), )
if mibBuilder.loadTexts: eoamTable.setStatus('current')
eoamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "eoamIfIndex"))
if mibBuilder.loadTexts: eoamEntry.setStatus('current')
eoamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamIfIndex.setStatus('current')
eoamState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamState.setStatus('current')
eoamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamMode.setStatus('current')
eoamReceivedRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("process", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamReceivedRemoteLoopback.setStatus('current')
eoamRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoopBack", 1), ("startLoopBack", 2), ("remoteLoopBack", 3), ("stopLoopBack", 4), ("localLoopBack", 5), ("unknownLoopBack", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamRemoteLoopback.setStatus('current')
eoamDyingGaspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamDyingGaspEnable.setStatus('current')
eoamCriticalEventEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamCriticalEventEnable.setStatus('current')
eoamLinkMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1), )
if mibBuilder.loadTexts: eoamLinkMonitorTable.setStatus('current')
eoamLinkMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "eoamLinkMonitorIfIndex"))
if mibBuilder.loadTexts: eoamLinkMonitorEntry.setStatus('current')
eoamLinkMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLinkMonitorIfIndex.setStatus('current')
errorSymbolNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolNotifyState.setStatus('current')
errorSymbolThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolThreshold.setStatus('current')
errorSymbolWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolWindow.setStatus('current')
errorFrameNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameNotifyState.setStatus('current')
errorFrameThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameThreshold.setStatus('current')
errorFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameWindow.setStatus('current')
errorFrameSecondsNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsNotifyState.setStatus('current')
errorFrameSecondsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsThreshold.setStatus('current')
errorFrameSecondsWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsWindow.setStatus('current')
errorFramePeriodNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodNotifyState.setStatus('current')
errorFramePeriodThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodThreshold.setStatus('current')
errorFramePeriodWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 51, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodWindow.setStatus('current')
duldSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1))
duldTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 1), )
if mibBuilder.loadTexts: duldTable.setStatus('current')
duldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "duldIfIndex"))
if mibBuilder.loadTexts: duldEntry.setStatus('current')
duldIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldIfIndex.setStatus('current')
duldState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldState.setStatus('current')
duldOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldOperState.setStatus('current')
duldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldMode.setStatus('current')
duldLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknow", 1), ("bidirectional", 2), ("txFault", 3), ("rxFault", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldLinkStatus.setStatus('current')
duldDiscoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldDiscoveryTime.setStatus('current')
duldRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 52, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldRecoverTime.setStatus('current')
doSCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1), )
if mibBuilder.loadTexts: doSCtrlTable.setStatus('current')
doSCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "doSCtrlType"))
if mibBuilder.loadTexts: doSCtrlEntry.setStatus('current')
doSCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("land-attack", 1), ("blat-attack", 2), ("smurf-attack", 3), ("tcp-null-scan", 4), ("tcp-xmascan", 5), ("tcp-synfin", 6), ("tcp-syn-srcport-less-1024", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSCtrlType.setStatus('current')
doSCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlState.setStatus('current')
doSCtrlActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drop", 0), ("mirror", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlActionType.setStatus('current')
doSCtrlMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlMirrorPort.setStatus('current')
doSCtrlMirrorReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlMirrorReplace1P.setStatus('current')
doSCtrlMirrorRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlMirrorRxRate.setStatus('current')
doSCtrlFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSCtrlFrameCount.setStatus('current')
doSCtrlClearFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlClearFrameCount.setStatus('current')
dosCtrlTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 99, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosCtrlTrapLogState.setStatus('current')
swTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1), )
if mibBuilder.loadTexts: swTimeRangeSettingTable.setStatus('current')
swTimeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "swTimeRangeIndex"))
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setStatus('current')
swTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTimeRangeIndex.setStatus('current')
swTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeName.setStatus('current')
swTimeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeDate.setStatus('current')
swTimeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartYear.setStatus('current')
swTimeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMonth.setStatus('current')
swTimeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartDay.setStatus('current')
swTimeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartHour.setStatus('current')
swTimeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMinute.setStatus('current')
swTimeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndYear.setStatus('current')
swTimeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMonth.setStatus('current')
swTimeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndDay.setStatus('current')
swTimeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndHour.setStatus('current')
swTimeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMinute.setStatus('current')
swTimeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeMonday.setStatus('current')
swTimeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeTuesday.setStatus('current')
swTimeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeWednesday.setStatus('current')
swTimeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeThursday.setStatus('current')
swTimeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeFriday.setStatus('current')
swTimeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSaturday.setStatus('current')
swTimeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSunday.setStatus('current')
swTimeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 38, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swTimeRangeRowStatus.setStatus('current')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
dlinklldpConfigManAddrPortsTxEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
class LldpPortNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4096)

lldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 11), )
if mibBuilder.loadTexts: lldpPortConfigTable.setStatus('current')
lldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 11, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpPortConfigPortNum"))
if mibBuilder.loadTexts: lldpPortConfigEntry.setStatus('current')
lldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 11, 1, 1), LldpPortNumber())
if mibBuilder.loadTexts: lldpPortConfigPortNum.setStatus('current')
lldpPortConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigAdminStatus.setStatus('current')
lldpPortConfigNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 11, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigNotificationEnable.setStatus('current')
lldpPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 11, 1, 4), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigTLVsTxEnable.setStatus('current')
lldpXdot3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12))
lldpXdot3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 1))
lldpXdot3LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2))
lldpXdot3RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3))
class LldpPowerPortClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pClassPSE", 1), ("pClassPD", 2))

class LldpLinkAggStatusMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("aggCapable", 0), ("aggEnabled", 1))

lldpXdot3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 1, 1), )
if mibBuilder.loadTexts: lldpXdot3PortConfigTable.setStatus('current')
lldpXdot3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("DES-1210-26MEbx", "lldpXdot3PortConfigEntry"))
lldpXdot3PortConfigEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot3PortConfigEntry.setStatus('current')
lldpXdot3PortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("macPhyConfigStatus", 0), ("powerViaMDI", 1), ("linkAggregation", 2), ("maxFrameSize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3PortConfigTLVsTxEnable.setStatus('current')
lldpXdot3LocPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 1), )
if mibBuilder.loadTexts: lldpXdot3LocPortTable.setStatus('current')
lldpXdot3LocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot3LocPortAutoNegSupported"))
if mibBuilder.loadTexts: lldpXdot3LocPortEntry.setStatus('current')
lldpXdot3LocPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegSupported.setStatus('current')
lldpXdot3LocPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegEnabled.setStatus('current')
lldpXdot3LocPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3LocPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortOperMauType.setStatus('current')
lldpXdot3LocPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 2), )
if mibBuilder.loadTexts: lldpXdot3LocPowerTable.setStatus('current')
lldpXdot3LocPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot3LocPowerPortClass"))
if mibBuilder.loadTexts: lldpXdot3LocPowerEntry.setStatus('current')
lldpXdot3LocPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 2, 1, 1), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPortClass.setStatus('current')
lldpXdot3LocPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDISupported.setStatus('current')
lldpXdot3LocPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDIEnabled.setStatus('current')
lldpXdot3LocPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairControlable.setStatus('current')
lldpXdot3LocPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairs.setStatus('current')
lldpXdot3LocPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerClass.setStatus('current')
lldpXdot3LocLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 3), )
if mibBuilder.loadTexts: lldpXdot3LocLinkAggTable.setStatus('current')
lldpXdot3LocLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot3LocLinkAggStatus"))
if mibBuilder.loadTexts: lldpXdot3LocLinkAggEntry.setStatus('current')
lldpXdot3LocLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 3, 1, 1), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggStatus.setStatus('current')
lldpXdot3LocLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggPortId.setStatus('current')
lldpXdot3LocMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 4), )
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeTable.setStatus('current')
lldpXdot3LocMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot3LocMaxFrameSize"))
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeEntry.setStatus('current')
lldpXdot3LocMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSize.setStatus('current')
lldpXdot3RemPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 1), )
if mibBuilder.loadTexts: lldpXdot3RemPortTable.setStatus('current')
lldpXdot3RemPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot3RemPortAutoNegSupported"))
if mibBuilder.loadTexts: lldpXdot3RemPortEntry.setStatus('current')
lldpXdot3RemPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegSupported.setStatus('current')
lldpXdot3RemPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegEnabled.setStatus('current')
lldpXdot3RemPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3RemPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortOperMauType.setStatus('current')
lldpXdot3RemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 2), )
if mibBuilder.loadTexts: lldpXdot3RemPowerTable.setStatus('current')
lldpXdot3RemPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot3RemPowerPortClass"))
if mibBuilder.loadTexts: lldpXdot3RemPowerEntry.setStatus('current')
lldpXdot3RemPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 2, 1, 1), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPortClass.setStatus('current')
lldpXdot3RemPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDISupported.setStatus('current')
lldpXdot3RemPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDIEnabled.setStatus('current')
lldpXdot3RemPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairControlable.setStatus('current')
lldpXdot3RemPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairs.setStatus('current')
lldpXdot3RemPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerClass.setStatus('current')
lldpXdot3RemLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 3), )
if mibBuilder.loadTexts: lldpXdot3RemLinkAggTable.setStatus('current')
lldpXdot3RemLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot3RemLinkAggStatus"))
if mibBuilder.loadTexts: lldpXdot3RemLinkAggEntry.setStatus('current')
lldpXdot3RemLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 3, 1, 1), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggStatus.setStatus('current')
lldpXdot3RemLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggPortId.setStatus('current')
lldpXdot3RemMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 4), )
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeTable.setStatus('current')
lldpXdot3RemMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot3RemMaxFrameSize"))
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeEntry.setStatus('current')
lldpXdot3RemMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 12, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSize.setStatus('current')
lldpXdot1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13))
lldpXdot1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1))
lldpXdot1LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2))
lldpXdot1RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3))
lldpXdot1ConfigPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTable.setStatus('current')
lldpXdot1ConfigPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("DES-1210-26MEbx", "lldpXdot1ConfigPortVlanEntry"))
lldpXdot1ConfigPortVlanEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanEntry.setStatus('current')
lldpXdot1ConfigPortVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTxEnable.setStatus('current')
lldpXdot1LocVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 3), )
if mibBuilder.loadTexts: lldpXdot1LocVlanNameTable.setStatus('current')
lldpXdot1LocVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot1LocVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocVlanNameEntry.setStatus('current')
lldpXdot1LocVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpXdot1LocVlanId.setStatus('current')
lldpXdot1LocVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanName.setStatus('current')
lldpXdot1ConfigVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTable.setStatus('current')
lldpXdot1ConfigVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 2, 1), )
lldpXdot1LocVlanNameEntry.registerAugmentions(("DES-1210-26MEbx", "lldpXdot1ConfigVlanNameEntry"))
lldpXdot1ConfigVlanNameEntry.setIndexNames(*lldpXdot1LocVlanNameEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameEntry.setStatus('current')
lldpXdot1ConfigVlanNameTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTxEnable.setStatus('current')
lldpXdot1LocProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 2), )
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanTable.setStatus('current')
lldpXdot1LocProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot1LocProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEntry.setStatus('current')
lldpXdot1LocProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanId.setStatus('current')
lldpXdot1LocProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanSupported.setStatus('current')
lldpXdot1LocProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEnabled.setStatus('current')
lldpXdot1ConfigProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTable.setStatus('current')
lldpXdot1ConfigProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 3, 1), )
lldpXdot1LocProtoVlanEntry.registerAugmentions(("DES-1210-26MEbx", "lldpXdot1ConfigProtoVlanEntry"))
lldpXdot1ConfigProtoVlanEntry.setIndexNames(*lldpXdot1LocProtoVlanEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanEntry.setStatus('current')
lldpXdot1ConfigProtoVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTxEnable.setStatus('current')
lldpXdot1LocProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 4), )
if mibBuilder.loadTexts: lldpXdot1LocProtocolTable.setStatus('current')
lldpXdot1LocProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot1LocProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1LocProtocolEntry.setStatus('current')
lldpXdot1LocProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpXdot1LocProtocolIndex.setStatus('current')
lldpXdot1LocProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolId.setStatus('current')
lldpXdot1ConfigProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTable.setStatus('current')
lldpXdot1ConfigProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 4, 1), )
lldpXdot1LocProtocolEntry.registerAugmentions(("DES-1210-26MEbx", "lldpXdot1ConfigProtocolEntry"))
lldpXdot1ConfigProtocolEntry.setIndexNames(*lldpXdot1LocProtocolEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolEntry.setStatus('current')
lldpXdot1ConfigProtocolTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTxEnable.setStatus('current')
lldpXdot1LocTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1LocTable.setStatus('current')
lldpXdot1LocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot1LocPortVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocEntry.setStatus('current')
lldpXdot1LocPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocPortVlanId.setStatus('current')
lldpXdot1RemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1RemTable.setStatus('current')
lldpXdot1RemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot1RemPortVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemEntry.setStatus('current')
lldpXdot1RemPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemPortVlanId.setStatus('current')
lldpXdot1RemProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanTable.setStatus('current')
lldpXdot1RemProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot1RemProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEntry.setStatus('current')
lldpXdot1RemProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanId.setStatus('current')
lldpXdot1RemProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanSupported.setStatus('current')
lldpXdot1RemProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEnabled.setStatus('current')
lldpXdot1RemVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 3), )
if mibBuilder.loadTexts: lldpXdot1RemVlanNameTable.setStatus('current')
lldpXdot1RemVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot1RemVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemVlanNameEntry.setStatus('current')
lldpXdot1RemVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpXdot1RemVlanId.setStatus('current')
lldpXdot1RemVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanName.setStatus('current')
lldpXdot1RemProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 4), )
if mibBuilder.loadTexts: lldpXdot1RemProtocolTable.setStatus('current')
lldpXdot1RemProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "lldpXdot1RemProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1RemProtocolEntry.setStatus('current')
lldpXdot1RemProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpXdot1RemProtocolIndex.setStatus('current')
lldpXdot1RemProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 32, 13, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolId.setStatus('current')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
dhcpServerScreenEnableVlanlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnableVlanlist.setStatus('current')
dhcpServerScreenLogSuppressDuration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 30))).clone(namedValues=NamedValues(("one-min", 1), ("five-min", 5), ("thirty-min", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenLogSuppressDuration.setStatus('current')
filterDHCPServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 4), )
if mibBuilder.loadTexts: filterDHCPServerTable.setStatus('current')
filterDHCPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "filterDHCPServerIpAddr"), (0, "DES-1210-26MEbx", "filterDHCPServerClientMacAddr"))
if mibBuilder.loadTexts: filterDHCPServerEntry.setStatus('current')
filterDHCPServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: filterDHCPServerIpAddr.setStatus('current')
filterDHCPServerClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 4, 1, 2), MacAddress().clone(hexValue="000102030405"))
if mibBuilder.loadTexts: filterDHCPServerClientMacAddr.setStatus('current')
filterDHCPServerPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 4, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDHCPServerPortList.setStatus('current')
filterDHCPServerVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 4, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDHCPServerVlanList.setStatus('current')
filterDHCPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 4, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDHCPServerRowStatus.setStatus('current')
dhcpServerScreenEnableLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnableLog.setStatus('current')
securityDhcpv6ServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 12))
dhcpv6ServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 12, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6ServerScreenEnablePortlist.setStatus('current')
dhcpv6ServerScreenEnableLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6ServerScreenEnableLog.setStatus('current')
filterDHCPv6ServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 12, 4), )
if mibBuilder.loadTexts: filterDHCPv6ServerTable.setStatus('current')
filterDHCPv6ServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 12, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "filterDHCPv6ServerIpAddr"))
if mibBuilder.loadTexts: filterDHCPv6ServerEntry.setStatus('current')
filterDHCPv6ServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 12, 4, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterDHCPv6ServerIpAddr.setStatus('current')
filterDHCPv6ServerPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 12, 4, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDHCPv6ServerPortList.setStatus('current')
filterDHCPv6ServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 12, 4, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDHCPv6ServerRowStatus.setStatus('current')
securityIcmpv6RaAllNode = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 13))
icmpv6RaAllNodeEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 13, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpv6RaAllNodeEnablePortlist.setStatus('current')
icmpv6RaAllNodeEnableLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpv6RaAllNodeEnableLog.setStatus('current')
filterICMPv6RaAllNodeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 13, 4), )
if mibBuilder.loadTexts: filterICMPv6RaAllNodeTable.setStatus('current')
filterICMPv6RaAllNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 13, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "filterICMPv6RaAllNodeServerIpAddr"))
if mibBuilder.loadTexts: filterICMPv6RaAllNodeEntry.setStatus('current')
filterICMPv6RaAllNodeServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 13, 4, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterICMPv6RaAllNodeServerIpAddr.setStatus('current')
filterICMPv6RaAllNodeServerPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 13, 4, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterICMPv6RaAllNodeServerPortList.setStatus('current')
filterICMPv6RaAllNodeServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 13, 4, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterICMPv6RaAllNodeServerRowStatus.setStatus('current')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 9))
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 9, 1), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 9, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 9, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 9, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
securityAAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11))
aacAuthenAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthenAdminState.setStatus('current')
aacAuthParamResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamResponseTimeout.setStatus('current')
aacAuthParamAttempt = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamAttempt.setStatus('current')
aacAPAuthMethodGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4))
aacAPLoginMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 1))
aacAPEnableMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 2))
aacAPConsoleLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPConsoleLoginMethod.setStatus('current')
aacAPTelnetLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetLoginMethod.setStatus('current')
aacAPSSHLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPSSHLoginMethod.setStatus('current')
aacAPHttpLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpLoginMethod.setStatus('current')
aacAPConsoleEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPConsoleEnableMethod.setStatus('current')
aacAPTelnetEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetEnableMethod.setStatus('current')
aacAPSSHEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPSSHEnableMethod.setStatus('current')
aacAPHttpEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpEnableMethod.setStatus('current')
aacServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 5), )
if mibBuilder.loadTexts: aacServerGroupTable.setStatus('current')
aacServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 5, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aacServerGroupIndex"))
if mibBuilder.loadTexts: aacServerGroupEntry.setStatus('current')
aacServerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerGroupIndex.setStatus('current')
aacServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerGroupName.setStatus('current')
aacServersInGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 5, 1, 3), Bits().clone(namedValues=NamedValues(("id1", 0), ("id2", 1), ("id3", 2), ("id4", 3), ("id5", 4), ("id6", 5), ("id7", 6), ("id8", 7), ("id9", 8), ("id10", 9), ("id11", 10), ("id12", 11), ("id13", 12), ("id14", 13), ("id15", 14), ("id16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServersInGroup.setStatus('current')
aacServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerGroupRowStatus.setStatus('current')
iPv4aacServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6), )
if mibBuilder.loadTexts: iPv4aacServerInfoTable.setStatus('obsolete')
iPv4aacServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1), ).setIndexNames((0, "DES-1210-26MEbx", "iPv4aacServerIndex"))
if mibBuilder.loadTexts: iPv4aacServerInfoEntry.setStatus('obsolete')
iPv4aacServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv4aacServerIndex.setStatus('obsolete')
iPv4aacServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerIPAddr.setStatus('obsolete')
iPv4aacServerAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerAuthProtocol.setStatus('obsolete')
iPv4aacServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerAuthPort.setStatus('obsolete')
iPv4aacServerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerAuthKey.setStatus('obsolete')
iPv4aacServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerTimeout.setStatus('obsolete')
iPv4aacServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerRetryCount.setStatus('obsolete')
iPv4aacServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPv4aacServerRowStatus.setStatus('obsolete')
aacServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7), )
if mibBuilder.loadTexts: aacServerInfoTable.setStatus('current')
aacServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aacServerIndex"))
if mibBuilder.loadTexts: aacServerInfoEntry.setStatus('current')
aacServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerIndex.setStatus('current')
aacServerIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerIPType.setStatus('current')
aacServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerIPAddr.setStatus('current')
aacServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerInterfaceName.setStatus('current')
aacServerAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthProtocol.setStatus('current')
aacServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthPort.setStatus('current')
aacServerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthKey.setStatus('current')
aacServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerTimeout.setStatus('current')
aacServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerRetryCount.setStatus('current')
aacServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAccountingPort.setStatus('current')
aacServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 7, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerRowStatus.setStatus('current')
aacLoginMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8), )
if mibBuilder.loadTexts: aacLoginMethodListTable.setStatus('current')
aacLoginMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aacLoginMethodListIndex"))
if mibBuilder.loadTexts: aacLoginMethodListEntry.setStatus('current')
aacLoginMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacLoginMethodListIndex.setStatus('current')
aacLoginMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethodListName.setStatus('current')
aacLoginMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod1.setStatus('current')
aacLoginMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod2.setStatus('current')
aacLoginMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod3.setStatus('current')
aacLoginMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod4.setStatus('current')
aacLoginMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacLoginMethodListRowStatus.setStatus('current')
aacEnableMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9), )
if mibBuilder.loadTexts: aacEnableMethodListTable.setStatus('current')
aacEnableMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aacEnableMethodListIndex"))
if mibBuilder.loadTexts: aacEnableMethodListEntry.setStatus('current')
aacEnableMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacEnableMethodListIndex.setStatus('current')
aacEnableMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethodListName.setStatus('current')
aacEnableMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod1.setStatus('current')
aacEnableMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod2.setStatus('current')
aacEnableMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod3.setStatus('current')
aacEnableMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod4.setStatus('current')
aacEnableMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 9, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacEnableMethodListRowStatus.setStatus('current')
aacLocalEnablePassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLocalEnablePassword.setStatus('current')
aacAccountingMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11), )
if mibBuilder.loadTexts: aacAccountingMethodListTable.setStatus('current')
aacAccountingMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11, 1), ).setIndexNames((0, "DES-1210-26MEbx", "aacAccountingMethodListIndex"))
if mibBuilder.loadTexts: aacAccountingMethodListEntry.setStatus('current')
aacAccountingMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacAccountingMethodListIndex.setStatus('current')
aacAccountingMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethodListName.setStatus('current')
aacAccountingMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethod1.setStatus('current')
aacAccountingMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethod2.setStatus('current')
aacAccountingMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethod3.setStatus('current')
aacAccountingMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethod4.setStatus('current')
aacAccountingMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 11, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacAccountingMethodListRowStatus.setStatus('current')
aacAccountingServiceIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 12))
aacAccountingServiceNetwork = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("radius-only", 0), ("default-method-list", 1), ("method-list-name", 2), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceNetwork.setStatus('current')
aacAccountingServiceShell = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("radius-only", 0), ("default-method-list", 1), ("method-list-name", 2), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceShell.setStatus('current')
aacAccountingServiceSystem = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("radius-only", 0), ("default-method-list", 1), ("method-list-name", 2), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceSystem.setStatus('current')
aacAccountingServiceCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 13))
aacAccountingServiceCommandAdministrator = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, -1))).clone(namedValues=NamedValues(("method1", 0), ("method2", 1), ("method3", 2), ("method4", 3), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceCommandAdministrator.setStatus('current')
aacAccountingServiceCommandOperator = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, -1))).clone(namedValues=NamedValues(("method1", 0), ("method2", 1), ("method3", 2), ("method4", 3), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceCommandOperator.setStatus('current')
aacAccountingServiceCommandPoweruser = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, -1))).clone(namedValues=NamedValues(("method1", 0), ("method2", 1), ("method3", 2), ("method4", 3), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceCommandPoweruser.setStatus('current')
aacAccountingServiceCommandUser = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, -1))).clone(namedValues=NamedValues(("method1", 0), ("method2", 1), ("method3", 2), ("method4", 3), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceCommandUser.setStatus('current')
aacServerPasswordEncryption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 14, 11, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerPasswordEncryption.setStatus('current')
mcastFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 49, 1), )
if mibBuilder.loadTexts: mcastFilterPortTable.setStatus('current')
mcastFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 49, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "mcastFilterPortIndex"))
if mibBuilder.loadTexts: mcastFilterPortEntry.setStatus('current')
mcastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 49, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: mcastFilterPortIndex.setStatus('current')
mcastFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 49, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastFilterPortType.setStatus('current')
staticARPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 34, 2), )
if mibBuilder.loadTexts: staticARPTable.setStatus('current')
staticARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 34, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "staticARPIP"), (0, "DES-1210-26MEbx", "staticARPMac"))
if mibBuilder.loadTexts: staticARPEntry.setStatus('current')
staticARPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 34, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticARPIP.setStatus('current')
staticARPMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 34, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticARPMac.setStatus('current')
staticARPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 34, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticARPRowStatus.setStatus('current')
sysGratuitousARPGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 1))
sysGratuitousARPSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 2))
sysGratuitousARPIPIfStatusUp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPIPIfStatusUp.setStatus('current')
sysGratuitousARPDuplicateIPDetected = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPDuplicateIPDetected.setStatus('current')
sysGratuitousARPLearning = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPLearning.setStatus('current')
sysGratuitousARPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 2, 1), )
if mibBuilder.loadTexts: sysGratuitousARPTable.setStatus('current')
sysGratuitousARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sysGratuitousARPIFName"))
if mibBuilder.loadTexts: sysGratuitousARPEntry.setStatus('current')
sysGratuitousARPIFName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGratuitousARPIFName.setStatus('current')
sysGratuitousARPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 48, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPInterval.setStatus('current')
staticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1), )
if mibBuilder.loadTexts: staticRouteTable.setStatus('current')
staticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "staticRouteIpAddr"), (0, "DES-1210-26MEbx", "staticRouteNetmask"), (0, "DES-1210-26MEbx", "staticRouteGateway"))
if mibBuilder.loadTexts: staticRouteEntry.setStatus('current')
staticRouteInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteInterfaceID.setStatus('current')
staticRouteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteIpAddr.setStatus('current')
staticRouteNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteNetmask.setStatus('current')
staticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteGateway.setStatus('current')
staticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteMetric.setStatus('current')
staticRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("static", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteProtocol.setStatus('current')
staticRouteActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteActiveStatus.setStatus('current')
staticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteRowStatus.setStatus('current')
staticRouteV6Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2), )
if mibBuilder.loadTexts: staticRouteV6Table.setStatus('current')
staticRouteV6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "staticRouteV6IpAddr"), (0, "DES-1210-26MEbx", "staticRouteV6Prefix"), (0, "DES-1210-26MEbx", "staticRouteV6NextHop"))
if mibBuilder.loadTexts: staticRouteV6Entry.setStatus('current')
staticRouteV6InterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteV6InterfaceID.setStatus('current')
staticRouteV6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteV6IpAddr.setStatus('current')
staticRouteV6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteV6Prefix.setStatus('current')
staticRouteV6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteV6NextHop.setStatus('current')
staticRouteV6Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteV6Metric.setStatus('current')
staticRouteV6Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("static", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteV6Protocol.setStatus('current')
staticRouteV6ActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteV6ActiveStatus.setStatus('current')
staticRouteV6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 42, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteV6RowStatus.setStatus('current')
agentCPUutilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 1))
agentMEMutilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 2))
agentCPUutilizationIn5sec = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5sec.setStatus('current')
agentCPUutilizationIn1min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn1min.setStatus('current')
agentCPUutilizationIn5min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5min.setStatus('current')
agentMEMutilizationIn5sec = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn5sec.setStatus('current')
agentMEMutilizationIn1min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn1min.setStatus('current')
agentMEMutilizationIn5min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn5min.setStatus('current')
agentPORTutilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 3), )
if mibBuilder.loadTexts: agentPORTutilizationTable.setStatus('current')
agentPORTutilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "agentPORTutilizationPortIndex"))
if mibBuilder.loadTexts: agentPORTutilizationEntry.setStatus('current')
agentPORTutilizationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationPortIndex.setStatus('current')
agentPORTutilizationPortTX5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationPortTX5sec.setStatus('current')
agentPORTutilizationPortRX5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationPortRX5sec.setStatus('current')
agentPORTutilizationPortUtil5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationPortUtil5sec.setStatus('current')
agentPORTutilizationPortUtil1min = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationPortUtil1min.setStatus('current')
agentPORTutilizationPortUtil5min = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 100, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationPortUtil5min.setStatus('current')
l2PTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTState.setStatus('current')
l2PTPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 2), )
if mibBuilder.loadTexts: l2PTPortTable.setStatus('current')
l2PTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "l2PTPortIndex"))
if mibBuilder.loadTexts: l2PTEntry.setStatus('current')
l2PTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: l2PTPortIndex.setStatus('current')
l2PTPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("uni", 2), ("nni", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTPortType.setStatus('current')
l2PTProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 2, 1, 3), Bits().clone(namedValues=NamedValues(("stp", 0), ("gvrp", 1), ("macCC", 2), ("macCD", 3), ("lldp", 4), ("isis", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTProtocol.setStatus('current')
l2PTThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 3), )
if mibBuilder.loadTexts: l2PTThresholdTable.setStatus('current')
l2PTThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "l2PTPortIndex"), (0, "DES-1210-26MEbx", "l2PTProtocolIndex"))
if mibBuilder.loadTexts: l2PTThresholdEntry.setStatus('current')
l2PTProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("stp", 1), ("gvrp", 2), ("macCC", 3), ("macCD", 4), ("lldp", 5), ("isis", 6))))
if mibBuilder.loadTexts: l2PTProtocolIndex.setStatus('current')
l2PTDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTDropThreshold.setStatus('current')
l2PTStpMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTStpMacAddress.setStatus('current')
l2PTGvrpMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTGvrpMacAddress.setStatus('current')
l2PTCCMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTCCMacAddress.setStatus('current')
l2PTCDMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTCDMacAddress.setStatus('current')
l2PTLldpMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTLldpMacAddress.setStatus('current')
l2PTIsisMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 102, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTIsisMacAddress.setStatus('current')
ipv4smtpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpState.setStatus('obsolete')
ipv4smtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpServerAddr.setStatus('obsolete')
ipv4smtpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpServerPort.setStatus('obsolete')
ipv4smtpSelfMailAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpSelfMailAddr.setStatus('obsolete')
ipv4smtpRecvMailAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 5), )
if mibBuilder.loadTexts: ipv4smtpRecvMailAddrTable.setStatus('current')
ipv4smtpRecvMailAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 5, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ipv4smtpRecvMailAddrIndex"))
if mibBuilder.loadTexts: ipv4smtpRecvMailAddrEntry.setStatus('current')
ipv4smtpRecvMailAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4smtpRecvMailAddrIndex.setStatus('current')
ipv4smtpRecvMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpRecvMailAddr.setStatus('current')
ipv4smtpRecvMailAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 5, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpRecvMailAddrStatus.setStatus('current')
sysSMTPServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6))
smtpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpState.setStatus('current')
smtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAddr.setStatus('current')
smtpServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAddrType.setStatus('current')
smtpServerAddrInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAddrInterfaceName.setStatus('current')
smtpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerPort.setStatus('current')
smtpSelfMailAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSelfMailAddr.setStatus('current')
smtpRecvMailAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 7), )
if mibBuilder.loadTexts: smtpRecvMailAddrTable.setStatus('current')
smtpRecvMailAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 7, 1), ).setIndexNames((0, "DES-1210-26MEbx", "smtpRecvMailAddrIndex"))
if mibBuilder.loadTexts: smtpRecvMailAddrEntry.setStatus('current')
smtpRecvMailAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecvMailAddrIndex.setStatus('current')
smtpRecvMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 7, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRecvMailAddr.setStatus('current')
smtpRecvMailAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 40, 6, 7, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRecvMailAddrStatus.setStatus('current')
igmpMulticastVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanStatus.setStatus('current')
igmpMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2), )
if mibBuilder.loadTexts: igmpMulticastVlanTable.setStatus('current')
igmpMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "igmpMulticastVlanid"))
if mibBuilder.loadTexts: igmpMulticastVlanEntry.setStatus('current')
igmpMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanid.setStatus('current')
igmpMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanName.setStatus('current')
igmpMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanSourcePort.setStatus('current')
igmpMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanMemberPort.setStatus('current')
igmpMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanTagMemberPort.setStatus('current')
igmpMulticastVlanUntaggedSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanUntaggedSourcePort.setStatus('current')
igmpMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanState.setStatus('current')
igmpMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanReplaceSourceIp.setStatus('current')
igmpMulticastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanRemapPriority.setStatus('current')
igmpMulticastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanReplacePriority.setStatus('current')
igmpMulticastVlanSrcPortDymLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanSrcPortDymLearn.setStatus('current')
igmpMulticastVlanReplaceCVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanReplaceCVID.setStatus('current')
igmpMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanRowStatus.setStatus('current')
igmpMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 3), )
if mibBuilder.loadTexts: igmpMulticastVlanGroupTable.setStatus('current')
igmpMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "igmpMulticastVlanGroupVid"), (0, "DES-1210-26MEbx", "igmpMulticastVlanGroupFromIp"), (0, "DES-1210-26MEbx", "igmpMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: igmpMulticastVlanGroupEntry.setStatus('current')
igmpMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupVid.setStatus('current')
igmpMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupFromIp.setStatus('current')
igmpMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupToIp.setStatus('current')
igmpMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanGroupStatus.setStatus('current')
multicastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4), )
if mibBuilder.loadTexts: multicastVlanTable.setStatus('current')
multicastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1), ).setIndexNames((0, "DES-1210-26MEbx", "multicastVlanid"))
if mibBuilder.loadTexts: multicastVlanEntry.setStatus('current')
multicastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanid.setStatus('current')
multicastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanName.setStatus('current')
multicastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanSourcePort.setStatus('current')
multicastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanMemberPort.setStatus('current')
multicastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanTagMemberPort.setStatus('current')
multicastVlanUntaggedSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanUntaggedSourcePort.setStatus('current')
multicastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanState.setStatus('current')
multicastVlanIgmpReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanIgmpReplaceSourceIp.setStatus('current')
multicastVlanMldReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 9), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanMldReplaceSourceIp.setStatus('current')
multicastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanRemapPriority.setStatus('current')
multicastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanReplacePriority.setStatus('current')
multicastVlanSrcPortDymLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanSrcPortDymLearn.setStatus('current')
multicastVlanReplaceCVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanReplaceCVID.setStatus('current')
multicastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanRowStatus.setStatus('current')
multicastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 5), )
if mibBuilder.loadTexts: multicastVlanGroupTable.setStatus('current')
multicastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 5, 1), ).setIndexNames((0, "DES-1210-26MEbx", "multicastVlanGroupVid"), (0, "DES-1210-26MEbx", "multicastVlanGroupIpType"), (0, "DES-1210-26MEbx", "multicastVlanGroupFromIp"), (0, "DES-1210-26MEbx", "multicastVlanGroupToIp"))
if mibBuilder.loadTexts: multicastVlanGroupEntry.setStatus('current')
multicastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupVid.setStatus('current')
multicastVlanGroupIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupIpType.setStatus('current')
multicastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 5, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupFromIp.setStatus('current')
multicastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 5, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupToIp.setStatus('current')
multicastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 27, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanGroupStatus.setStatus('current')
pppoeGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeGlobalState.setStatus('current')
pppoePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2), )
if mibBuilder.loadTexts: pppoePortTable.setStatus('current')
pppoePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "pppoePortIndex"))
if mibBuilder.loadTexts: pppoePortEntry.setStatus('current')
pppoePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoePortIndex.setStatus('current')
pppoePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortState.setStatus('current')
pppoePortCircuitIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 0), ("mac", 1), ("udf", 2), ("vendor2", 3), ("vendor3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortCircuitIDType.setStatus('current')
pppoePortUDFString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortUDFString.setStatus('current')
pppoePortCircuitIDVendor3String = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortCircuitIDVendor3String.setStatus('current')
pppoePortRemoteIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("vendor2", 1), ("vendor3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortRemoteIDType.setStatus('current')
pppoePortRemoteIDVendor3String = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 98, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortRemoteIDVendor3String.setStatus('current')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 2, 1, 1, 3), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 9), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 22, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1), )
if mibBuilder.loadTexts: neighborTable.setStatus('current')
neighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "neighborIfindex"), (0, "DES-1210-26MEbx", "neighborIPv6Addr"), (0, "DES-1210-26MEbx", "neighborMACAddr"))
if mibBuilder.loadTexts: neighborEntry.setStatus('current')
neighborIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIfindex.setStatus('current')
neighborIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPv6Addr.setStatus('current')
neighborMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddr.setStatus('current')
neighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborType.setStatus('current')
neighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborCacheState.setStatus('current')
neighborActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborActiveStatus.setStatus('current')
neighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 50, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neighborRowStatus.setStatus('current')
dhcpv6RelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 1))
dhcpv6RelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 2))
dhcpv6RelayOption37 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 3))
dhcpv6RelayOption38 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 4))
dhcpv6RelayOption18 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 5))
dhcpv6RelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayState.setStatus('current')
dhcpv6RelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setStatus('current')
dhcpv6RelayEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayEnablePortlist.setStatus('current')
dhcpv6RelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 2, 1), )
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsTable.setStatus('current')
dhcpv6RelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 2, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "dhcpv6RelayInterface"), (0, "DES-1210-26MEbx", "dhcpv6RelayServerIP"))
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsEntry.setStatus('current')
dhcpv6RelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayInterface.setStatus('current')
dhcpv6RelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 2, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setStatus('current')
dhcpv6RelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsRowStatus.setStatus('current')
dhcpv6RelayOption37State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setStatus('current')
dhcpv6RelayOption37CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setStatus('current')
dhcpv6RelayOption37RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid-with-user-define", 1), ("user-define", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setStatus('current')
dhcpv6RelayOption37RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setStatus('current')
dhcpv6RelayOpt38Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 4, 1), )
if mibBuilder.loadTexts: dhcpv6RelayOpt38Table.setStatus('current')
dhcpv6RelayOpt38Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 4, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "dhcpv6RelayOpt38PortIndex"))
if mibBuilder.loadTexts: dhcpv6RelayOpt38Entry.setStatus('current')
dhcpv6RelayOpt38PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayOpt38PortIndex.setStatus('current')
dhcpv6RelayOpt38PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOpt38PortState.setStatus('current')
dhcpv6RelayOpt38PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("user-defined", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOpt38PortType.setStatus('current')
dhcpv6RelayOpt38PortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOpt38PortID.setStatus('current')
dhcpv6RelayOption18State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption18State.setStatus('current')
dhcpv6RelayOption18CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption18CheckState.setStatus('current')
dhcpv6RelayOption18InterfaceIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 86, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid", 1), ("vendor1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption18InterfaceIDType.setStatus('current')
macBasedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1), )
if mibBuilder.loadTexts: macBasedVlanTable.setStatus('current')
macBasedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "vlanMacMapIndex"))
if mibBuilder.loadTexts: macBasedVlanEntry.setStatus('current')
vlanMacMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacMapIndex.setStatus('current')
vlanMacMapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacMapAddr.setStatus('current')
vlanMacMapAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacMapAddrMask.setStatus('current')
vlanMacMapVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1, 1, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacMapVid.setStatus('current')
vlanMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacStatus.setStatus('current')
vlanMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacType.setStatus('current')
vlanMacMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacMapRowStatus.setStatus('current')
macBasedVlanLearningTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 2), )
if mibBuilder.loadTexts: macBasedVlanLearningTable.setStatus('current')
macBasedVlanLearningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "vlanMacMapLearningAddr"))
if mibBuilder.loadTexts: macBasedVlanLearningEntry.setStatus('current')
vlanMacMapLearningAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacMapLearningAddr.setStatus('current')
vlanMacMapLearningVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 2, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacMapLearningVid.setStatus('current')
vlanMacLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacLearningStatus.setStatus('current')
vlanMacLearningType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacLearningType.setStatus('current')
vlanMacMapLearningRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 70, 2, 1, 99), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacMapLearningRowStatus.setStatus('current')
sfpVendorInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1), )
if mibBuilder.loadTexts: sfpVendorInfoTable.setStatus('current')
sfpVendorInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "sfpPortIndex"))
if mibBuilder.loadTexts: sfpVendorInfoEntry.setStatus('current')
sfpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPortIndex.setStatus('current')
sfpConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConnectorType.setStatus('current')
sfpTranceiverCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTranceiverCode.setStatus('current')
sfpBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpBaudRate.setStatus('current')
sfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorName.setStatus('current')
sfpVendorOui = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorOui.setStatus('current')
sfpVendorPn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorPn.setStatus('current')
sfpVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorRev.setStatus('current')
sfpWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpWavelength.setStatus('current')
sfpVendorSn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSn.setStatus('current')
sfpDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 104, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDateCode.setStatus('current')
ddmCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1))
ddmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2))
ddmPowerUnit = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mw", 0), ("dbm", 1))).clone('mw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmPowerUnit.setStatus('current')
ddmActionMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 2), )
if mibBuilder.loadTexts: ddmActionMgmtTable.setStatus('obsolete')
ddmActionMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 2, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ddmActionPort"))
if mibBuilder.loadTexts: ddmActionMgmtEntry.setStatus('obsolete')
ddmActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmActionPort.setStatus('current')
ddmActionState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmActionState.setStatus('obsolete')
ddmActionShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("alarm", 1), ("warning", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmActionShutdown.setStatus('obsolete')
ddmThresholdMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 3), )
if mibBuilder.loadTexts: ddmThresholdMgmtTable.setStatus('current')
ddmThresholdMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 3, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ddmThresholdPort"), (0, "DES-1210-26MEbx", "ddmThresholdType"))
if mibBuilder.loadTexts: ddmThresholdMgmtEntry.setStatus('current')
ddmThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmThresholdPort.setStatus('current')
ddmThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("temperature", 0), ("voltage", 1), ("bias", 2), ("txPower", 3), ("rxPower", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmThresholdType.setStatus('current')
ddmHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmHighAlarm.setStatus('current')
ddmLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmLowAlarm.setStatus('current')
ddmHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmHighWarning.setStatus('current')
ddmLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 1, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmLowWarning.setStatus('current')
ddmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1))
ddmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1, 1), )
if mibBuilder.loadTexts: ddmStatusTable.setStatus('current')
ddmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "ddmStatusPort"))
if mibBuilder.loadTexts: ddmStatusEntry.setStatus('current')
ddmStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmStatusPort.setStatus('current')
ddmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTemperature.setStatus('current')
ddmVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmVoltage.setStatus('current')
ddmBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmBiasCurrent.setStatus('current')
ddmTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxPower.setStatus('current')
ddmRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 105, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxPower.setStatus('current')
ftpFwTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1))
ftpConfigTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2))
ftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwServerIpAddress.setStatus('obsolete')
ftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwImageFileName.setStatus('obsolete')
ftpFwUsername = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwUsername.setStatus('obsolete')
ftpFwPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwPassword.setStatus('obsolete')
ftpFwPath = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwPath.setStatus('obsolete')
ftpFwPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwPort.setStatus('obsolete')
ftpFwFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwFTPOperation.setStatus('obsolete')
ftpFwFTPOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpFwFTPOperationStatus.setStatus('obsolete')
ftpConfigServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigServerIpAddress.setStatus('obsolete')
ftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigFileName.setStatus('obsolete')
ftpConfigUsername = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigUsername.setStatus('obsolete')
ftpConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigPassword.setStatus('obsolete')
ftpConfigPath = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigPath.setStatus('obsolete')
ftpConfigPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigPort.setStatus('obsolete')
ftpConfigConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configID1", 1), ("configID2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigConfigID.setStatus('current')
ftpConfigFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigFTPOperation.setStatus('obsolete')
ftpConfigFTPOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 107, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpConfigFTPOperationStatus.setStatus('obsolete')
statisticsClearPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 125, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statisticsClearPortList.setStatus('current')
statisticsClear = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 125, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statisticsClear.setStatus('current')
swLedPanelstate = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 121, 1))
swLedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 121, 1, 1), )
if mibBuilder.loadTexts: swLedInfoTable.setStatus('current')
swLedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 121, 1, 1, 1), ).setIndexNames((0, "DES-1210-26MEbx", "swLedInfoUnitId"))
if mibBuilder.loadTexts: swLedInfoEntry.setStatus('current')
swLedInfoUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 121, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLedInfoUnitId.setStatus('current')
swLedInfoFrontPanelLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 16, 1, 121, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLedInfoFrontPanelLedStatus.setStatus('current')
mibBuilder.exportSymbols("DES-1210-26MEbx", firmwareInfoImage1Version=firmwareInfoImage1Version, tftpFwTargetTftpOperation=tftpFwTargetTftpOperation, igsVlanSnoopStatus=igsVlanSnoopStatus, impbDhcpSnoopingEntry=impbDhcpSnoopingEntry, stpPortTable=stpPortTable, trafficCtrlTable=trafficCtrlTable, snmpV3TrapDuplicateIPDetected=snmpV3TrapDuplicateIPDetected, LldpLinkAggStatusMap=LldpLinkAggStatusMap, sshPublKeyRSAAdmin=sshPublKeyRSAAdmin, qinqTable=qinqTable, sysBPDUAttackCtrlEntry=sysBPDUAttackCtrlEntry, ipifV6AddressIpPrefix=ipifV6AddressIpPrefix, tftpCfgTargetTftpConfigID=tftpCfgTargetTftpConfigID, eoamLinkMonitorEntry=eoamLinkMonitorEntry, impbBindingtrap=impbBindingtrap, trafficCtrlSettings=trafficCtrlSettings, eoamLinkMonitorIfIndex=eoamLinkMonitorIfIndex, ddmRxPower=ddmRxPower, aacAPSSHEnableMethod=aacAPSSHEnableMethod, qinqRoleState=qinqRoleState, igsStatus=igsStatus, laPortActorPortPriority=laPortActorPortPriority, aclUdfOffsetBase4=aclUdfOffsetBase4, lldpXdot3RemPortEntry=lldpXdot3RemPortEntry, sshSecurityStatus=sshSecurityStatus, trustedHostIpMask=trustedHostIpMask, snmpV3CommunityTable=snmpV3CommunityTable, l2PTPortTable=l2PTPortTable, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, tftpCfgTargetGroup=tftpCfgTargetGroup, duldMode=duldMode, firmwareInfoImage1UpdateTime=firmwareInfoImage1UpdateTime, aclL2RuleReplaceVLAN=aclL2RuleReplaceVLAN, firmwareInfoImage1User=firmwareInfoImage1User, qosTOSType04=qosTOSType04, securityARPSpoofPrevent=securityARPSpoofPrevent, sysMirrorStatus=sysMirrorStatus, aclL3RuleTcpUdpDstPortMask=aclL3RuleTcpUdpDstPortMask, aacAccountingMethodListEntry=aacAccountingMethodListEntry, tftpCfgTargetServerIpAddress=tftpCfgTargetServerIpAddress, aclFlowMeterRule=aclFlowMeterRule, dhcpv6RelayOption18CheckState=dhcpv6RelayOption18CheckState, snmpTrapAutoCableDiag=snmpTrapAutoCableDiag, gvrpSettingsLeaveTime=gvrpSettingsLeaveTime, ipv4aclUdfOffsetBase3=ipv4aclUdfOffsetBase3, companyVLANTrunk=companyVLANTrunk, snmpV3TrapColdStart=snmpV3TrapColdStart, igsVlanFilterEntry=igsVlanFilterEntry, dot1qVlanAdvertisementStatus=dot1qVlanAdvertisementStatus, pppoePortCircuitIDType=pppoePortCircuitIDType, impbPortDHCPv4VlanList3k=impbPortDHCPv4VlanList3k, aclL3RuleReplaceDSCP=aclL3RuleReplaceDSCP, ipv4aclProfileSrcIpAddrMask=ipv4aclProfileSrcIpAddrMask, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr, staticRouteV6Table=staticRouteV6Table, agentPORTutilizationPortRX5sec=agentPORTutilizationPortRX5sec, aclPacketRuleTable=aclPacketRuleTable, ipv4aclProfileMask=ipv4aclProfileMask, lldpXdot3LocPortAutoNegSupported=lldpXdot3LocPortAutoNegSupported, lldpXdot3LocMaxFrameSize=lldpXdot3LocMaxFrameSize, stpTopologyChangeTrapStatus=stpTopologyChangeTrapStatus, gvrpSettingsTable=gvrpSettingsTable, ipv4snmpV3HostAddress=ipv4snmpV3HostAddress, guestVlanName=guestVlanName, qosTOSType06=qosTOSType06, macNotifyHistorySize=macNotifyHistorySize, sysLBDInterval=sysLBDInterval, swTimeRangeMonday=swTimeRangeMonday, aclQosTCPUDPPort=aclQosTCPUDPPort, aacAPLoginMethod=aacAPLoginMethod, cpuFilterUdfRuleAction=cpuFilterUdfRuleAction, eoamTable=eoamTable, lldpXdot1Config=lldpXdot1Config, mldsVlanMulticastGroupMacAddress=mldsVlanMulticastGroupMacAddress, ipv4sysSNTPTimeSeconds=ipv4sysSNTPTimeSeconds, dhcpServerScreenLogSuppressDuration=dhcpServerScreenLogSuppressDuration, impbLogState=impbLogState, snmpV3Community=snmpV3Community, qosDiffServType33=qosDiffServType33, eoamRemoteLoopback=eoamRemoteLoopback, newRootOlddesignatedroot=newRootOlddesignatedroot, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, ipv4smtpRecvMailAddrTable=ipv4smtpRecvMailAddrTable, limitIpMulticastPortIPType=limitIpMulticastPortIPType, lldpXdot1RemTable=lldpXdot1RemTable, sshAuthenMethodPassWordAdmin=sshAuthenMethodPassWordAdmin, aacAccountingServiceCommandUser=aacAccountingServiceCommandUser, aclv6L3RuleTcpUdpSrcPort=aclv6L3RuleTcpUdpSrcPort, bandwidthEffecRxThreshold=bandwidthEffecRxThreshold, doSCtrlActionType=doSCtrlActionType, impbAutoScanIpAddress=impbAutoScanIpAddress, rmonHistoryStatus=rmonHistoryStatus, sysPortDescMediumType=sysPortDescMediumType, rmonEventTable=rmonEventTable, impbBlockListIpAddress=impbBlockListIpAddress, impbPortDHCPv4VlanList2k=impbPortDHCPv4VlanList2k, lldpXdot3RemMaxFrameSizeTable=lldpXdot3RemMaxFrameSizeTable, mstCiststpLastTopologyChange=mstCiststpLastTopologyChange, guestVlanDelState=guestVlanDelState, aclL3Rule=aclL3Rule, sysBPDUAttackPortStatus=sysBPDUAttackPortStatus, mldsVlanDataDrivenLearningStatus=mldsVlanDataDrivenLearningStatus, lldpXdot1ConfigProtoVlanTxEnable=lldpXdot1ConfigProtoVlanTxEnable, aclFlowMeterAction=aclFlowMeterAction, aclL3RuleReplaceQueue=aclL3RuleReplaceQueue, igmpMulticastVlanGroupStatus=igmpMulticastVlanGroupStatus, impbVlanModeVlanList=impbVlanModeVlanList, lldpXdot1RemProtocolEntry=lldpXdot1RemProtocolEntry, cosOutputSchedule=cosOutputSchedule, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, lldpXdot1RemVlanId=lldpXdot1RemVlanId, mstCistPortTable=mstCistPortTable, qosDiffServType43=qosDiffServType43, eoamLinkMonitorTable=eoamLinkMonitorTable, tftpCfgTargetTftpOperation=tftpCfgTargetTftpOperation, snmpTrapDULD=snmpTrapDULD, impbPortDHCPSnoopingState=impbPortDHCPSnoopingState, swAuthCtrlPktFwdMode=swAuthCtrlPktFwdMode, impbPortArpInspectionState=impbPortArpInspectionState, cpuFilterL3RuleICMPMessageType=cpuFilterL3RuleICMPMessageType, cpuFilterv6L3RuleEntry=cpuFilterv6L3RuleEntry, lldpXdot1Objects=lldpXdot1Objects, aacAccountingServiceCommandOperator=aacAccountingServiceCommandOperator, aclv6L3RuleICMPMessageType=aclv6L3RuleICMPMessageType, companyAuthGroup=companyAuthGroup, mldsVlan=mldsVlan, dot1qVlanPVIDAutoAssignOnOff=dot1qVlanPVIDAutoAssignOnOff, l2PTPortIndex=l2PTPortIndex, staticVlanBaseAutoLearnList2k=staticVlanBaseAutoLearnList2k, sfpVendorPn=sfpVendorPn, ipv4aclProfileDstMacAddrMask=ipv4aclProfileDstMacAddrMask, companyTraps=companyTraps, ipifV6AddressTable=ipifV6AddressTable, qinqEntry=qinqEntry, lldpXdot3RemLinkAggEntry=lldpXdot3RemLinkAggEntry, smtpState=smtpState, qosDiffServType57=qosDiffServType57, tftpFwTargetServerIpAddress=tftpFwTargetServerIpAddress, ipv4smtpServerAddr=ipv4smtpServerAddr, limitIpMulticastendIpAddr=limitIpMulticastendIpAddr, impbBindingListTable=impbBindingListTable, aacEnableMethodListName=aacEnableMethodListName, snmpV3ViewTreeTable=snmpV3ViewTreeTable, aclProfileIPProtocol=aclProfileIPProtocol, rmonStatsDataSource=rmonStatsDataSource, cpuFilterv6L3RuleDstIpAddr=cpuFilterv6L3RuleDstIpAddr, protocolVlanGroupID=protocolVlanGroupID, staticEntry=staticEntry, swAuthUserTable=swAuthUserTable, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, syslogServSeverity=syslogServSeverity, ipv4sysSNTPDSTEndHour=ipv4sysSNTPDSTEndHour, lldpXdot3RemPowerTable=lldpXdot3RemPowerTable, impbBlockListPort=impbBlockListPort, impbPortDHCPv6VlanList2k=impbPortDHCPv6VlanList2k, trafficSegMemberList=trafficSegMemberList, guestVlanPort=guestVlanPort, dlink=dlink, mldsVlanQueryInterval=mldsVlanQueryInterval, aacAccountingServiceShell=aacAccountingServiceShell, aclL3RuleProtocolMask=aclL3RuleProtocolMask, multicastVlanTable=multicastVlanTable, qosDiffServType06=qosDiffServType06, stpInstancePortTable=stpInstancePortTable, aclL3RuleTcpSynBit=aclL3RuleTcpSynBit, multicastVlanid=multicastVlanid, igsVlanRouterPortList=igsVlanRouterPortList, qosDiffServType58=qosDiffServType58, aacServerTimeout=aacServerTimeout, aacLocalEnablePassword=aacLocalEnablePassword, tftpFwTargetInterfaceName=tftpFwTargetInterfaceName, qosDiffServType13=qosDiffServType13, qosDiffServType23=qosDiffServType23, lldpXdot3Config=lldpXdot3Config, neighborIfindex=neighborIfindex, aclv6L3RuleTcpAckBit=aclv6L3RuleTcpAckBit, mstCistVlanMapped2k=mstCistVlanMapped2k, gvrpGVRPGlobalSettingsOnOff=gvrpGVRPGlobalSettingsOnOff, ipifv6DHCPStatus=ipifv6DHCPStatus, aclUdfOffsetByte4=aclUdfOffsetByte4, cpuFilterProfileSrcIpAddrMaskType=cpuFilterProfileSrcIpAddrMaskType, cpuFilterL3RuleTcpFinBit=cpuFilterL3RuleTcpFinBit, swAuthRadiusServerTable=swAuthRadiusServerTable, snmpTrapColdStart=snmpTrapColdStart, lldpXdot1ConfigVlanNameTxEnable=lldpXdot1ConfigVlanNameTxEnable, sysGratuitousARPLearning=sysGratuitousARPLearning, vlanTrunkGlobalStatus=vlanTrunkGlobalStatus, impbDhcpSnoopingLeaseTime=impbDhcpSnoopingLeaseTime, rmonHistoryIndex=rmonHistoryIndex, trafficCtrlTrap=trafficCtrlTrap, staticDisableAutoLearn=staticDisableAutoLearn, dhcpBOOTPRelayOption82Policy=dhcpBOOTPRelayOption82Policy, igsHost=igsHost, ipv4sysSNTPState=ipv4sysSNTPState, dhcpv6RelayHopCount=dhcpv6RelayHopCount, trafficSegIfIndex=trafficSegIfIndex, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, errorFramePeriodNotifyState=errorFramePeriodNotifyState, impbAutoScanMacAddress=impbAutoScanMacAddress, qosDiffServType37=qosDiffServType37, duldState=duldState, cpuFilterL2RuleEntry=cpuFilterL2RuleEntry, cpuFilterProfileOffset3Mask=cpuFilterProfileOffset3Mask, mstCistPortEntry=mstCistPortEntry, cpuFilterUdfRuleEntry=cpuFilterUdfRuleEntry, sfpTranceiverCode=sfpTranceiverCode, portSecTableClearPortList=portSecTableClearPortList, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, staticARPEntry=staticARPEntry, impbAutoScanEntry=impbAutoScanEntry, rmonHistoryInterval=rmonHistoryInterval, bandwidthCtrlSettings=bandwidthCtrlSettings, qosDiffServType01=qosDiffServType01, limitIpMulticastProfileTable=limitIpMulticastProfileTable, aacServersInGroup=aacServersInGroup, vlanTrunkEntry=vlanTrunkEntry, aclProfile=aclProfile, ipv4aclUdfCTagMask=ipv4aclUdfCTagMask, snmpV3HostVersion=snmpV3HostVersion, aacAccountingMethodListRowStatus=aacAccountingMethodListRowStatus, tftpCfgServerIpAddress=tftpCfgServerIpAddress, stpNewRootTraps=stpNewRootTraps, filterDHCPServerEntry=filterDHCPServerEntry, dhcpv6RelayOpt38PortState=dhcpv6RelayOpt38PortState, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, ipv4sysSNTPDSTStartMin=ipv4sysSNTPDSTStartMin, sysSNTPFirstServer=sysSNTPFirstServer, rmonHistoryOwner=rmonHistoryOwner, qosDiffServType52=qosDiffServType52, sysSNTPSecondServer=sysSNTPSecondServer, aclPacketRuleOffsetValue2=aclPacketRuleOffsetValue2, filterICMPv6RaAllNodeEntry=filterICMPv6RaAllNodeEntry, aacServerAuthProtocol=aacServerAuthProtocol, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, qinqVlanTranslationCVIDRowStatus=qinqVlanTranslationCVIDRowStatus, aacAPTelnetEnableMethod=aacAPTelnetEnableMethod, trustedHostRowStatus=trustedHostRowStatus, qosPriSettings=qosPriSettings, qosDiffServType25=qosDiffServType25, dhcpv6RelayInterfaceSettingsEntry=dhcpv6RelayInterfaceSettingsEntry, sysGateway=sysGateway, aacEnableMethod4=aacEnableMethod4, cpuFilterUdfRuleProfileNo=cpuFilterUdfRuleProfileNo, aacAccountingMethod4=aacAccountingMethod4, staticRouteV6InterfaceID=staticRouteV6InterfaceID, laPortControl=laPortControl, gvrpSettingsJoinTime=gvrpSettingsJoinTime, sysGratuitousARPDuplicateIPDetected=sysGratuitousARPDuplicateIPDetected, lldpXdot1RemVlanNameTable=lldpXdot1RemVlanNameTable, dhcpv6RelayOption37State=dhcpv6RelayOption37State, dhcpBOOTPRelayInterface=dhcpBOOTPRelayInterface, tftpCfgTargetIncrement=tftpCfgTargetIncrement, lldpXdot1ConfigProtoVlanEntry=lldpXdot1ConfigProtoVlanEntry, aacAccountingServiceIndex=aacAccountingServiceIndex)
mibBuilder.exportSymbols("DES-1210-26MEbx", multicastVlanGroupToIp=multicastVlanGroupToIp, aclPacketRuleReplace1P=aclPacketRuleReplace1P, cpuFilterL3RuleProfileNo=cpuFilterL3RuleProfileNo, staticVlanBaseTable=staticVlanBaseTable, cpuFilterState=cpuFilterState, qosDiffServType22=qosDiffServType22, stpFowardBPDU=stpFowardBPDU, dhcpv6RelayOption18=dhcpv6RelayOption18, LldpManAddress=LldpManAddress, topologyChange=topologyChange, qosDiffServTOS=qosDiffServTOS, cableDiagPortType=cableDiagPortType, cpuFilterProfileEntry=cpuFilterProfileEntry, aclProfileSrcMacAddrMask=aclProfileSrcMacAddrMask, laPortChannelMasterPort=laPortChannelMasterPort, igsReportToAllPort=igsReportToAllPort, autoCableDiagEntry=autoCableDiagEntry, companyRMON=companyRMON, swAuthRadiusServerAddress=swAuthRadiusServerAddress, qosDiffServType09=qosDiffServType09, qosDiffServType18=qosDiffServType18, sysPortMediaTypeSn=sysPortMediaTypeSn, cosBandwidthCtrlEntry=cosBandwidthCtrlEntry, qosDiffServType55=qosDiffServType55, aacAuthParamAttempt=aacAuthParamAttempt, igmpMulticastVlanTagMemberPort=igmpMulticastVlanTagMemberPort, Ipv6Address=Ipv6Address, cableDiagPair4Status=cableDiagPair4Status, tftpCfgTargetTftpOperationStatus=tftpCfgTargetTftpOperationStatus, ipifv6AutolinkloStatus=ipifv6AutolinkloStatus, sysFirmwareInfomation=sysFirmwareInfomation, portSecLockAddrMode=portSecLockAddrMode, cpuFilterUdfRuleOffset2Mask=cpuFilterUdfRuleOffset2Mask, mldsHostTableVLANID=mldsHostTableVLANID, VlanIndex=VlanIndex, ipv4syslogServSrvRowStatus=ipv4syslogServSrvRowStatus, staticVlanBaseAutoLearnList3k=staticVlanBaseAutoLearnList3k, aclUdfSTagMask=aclUdfSTagMask, qinqVlanTranslationCVIDEntry=qinqVlanTranslationCVIDEntry, ipv4sysSNTPPollInterval=ipv4sysSNTPPollInterval, lldpXdot3LocPowerMDIEnabled=lldpXdot3LocPowerMDIEnabled, aclv6L3RuleTcpFinBit=aclv6L3RuleTcpFinBit, cpuFilterProfileDstMacAddrMask=cpuFilterProfileDstMacAddrMask, ipv4sysSNTPDSTEndDay=ipv4sysSNTPDSTEndDay, staticMac=staticMac, limitIpMulticastPortAction=limitIpMulticastPortAction, impbDhcpSnoopingTable=impbDhcpSnoopingTable, swAuthAuthCapability=swAuthAuthCapability, rmonAlarmTable=rmonAlarmTable, protocolGroupId=protocolGroupId, cpuFilterUdfRuleOffset5=cpuFilterUdfRuleOffset5, aclQosIPv6Addr=aclQosIPv6Addr, aclQosProtocol=aclQosProtocol, aclPacketRuleOffsetValue3=aclPacketRuleOffsetValue3, multicastVlanMldReplaceSourceIp=multicastVlanMldReplaceSourceIp, snmpV3TrapIMPBViolation=snmpV3TrapIMPBViolation, smtpServerAddr=smtpServerAddr, sysTrapTwistedPortEvent=sysTrapTwistedPortEvent, filterICMPv6RaAllNodeTable=filterICMPv6RaAllNodeTable, sysGratuitousARPEntry=sysGratuitousARPEntry, cpuFilterL3RuleTcpUdpSrcPort=cpuFilterL3RuleTcpUdpSrcPort, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, sysSNTPGMTMinutes=sysSNTPGMTMinutes, doSCtrlMirrorRxRate=doSCtrlMirrorRxRate, aacAPConsoleEnableMethod=aacAPConsoleEnableMethod, ipv4aclProfileIPProtocol=ipv4aclProfileIPProtocol, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, companyMldsGroup=companyMldsGroup, macBasedVlanLearningEntry=macBasedVlanLearningEntry, mstCistForcePortState=mstCistForcePortState, LacpKey=LacpKey, multicastVlanGroupEntry=multicastVlanGroupEntry, ipv4sysIpAddrCfgMode=ipv4sysIpAddrCfgMode, sysSafeGuardEnable=sysSafeGuardEnable, filterDHCPServerTable=filterDHCPServerTable, mcastFilterPortType=mcastFilterPortType, stpPortHelloTime=stpPortHelloTime, stpRootPort=stpRootPort, smtpRecvMailAddrStatus=smtpRecvMailAddrStatus, lldpXdot3LocPowerPairControlable=lldpXdot3LocPowerPairControlable, ipv4sysSNTPGMTMinutes=ipv4sysSNTPGMTMinutes, mstCistPortPathCost=mstCistPortPathCost, cpuFilterL3RuleDstIpAddr=cpuFilterL3RuleDstIpAddr, qosDiffServType07=qosDiffServType07, qosDSCPTOSMode=qosDSCPTOSMode, companyL2PT=companyL2PT, dhcpv6RelayManagement=dhcpv6RelayManagement, ipv4IfIndex=ipv4IfIndex, dhcpv6RelayOption37RemoteIDType=dhcpv6RelayOption37RemoteIDType, aclv6L3RuleReplaceDSCP=aclv6L3RuleReplaceDSCP, sysScheduleRebootEntry=sysScheduleRebootEntry, qosDiffServType53=qosDiffServType53, snmpTrapICMPv6RaAllNodeFilter=snmpTrapICMPv6RaAllNodeFilter, sshUserInfoHostIp=sshUserInfoHostIp, swTimeRangeWednesday=swTimeRangeWednesday, cosBandwidthCtrlClassIndex=cosBandwidthCtrlClassIndex, multicastVlanReplaceCVID=multicastVlanReplaceCVID, staticRouteInterfaceID=staticRouteInterfaceID, cpuFilterL3RuleTcpSynBit=cpuFilterL3RuleTcpSynBit, eoamLinkMonitor=eoamLinkMonitor, staticMcastStatus=staticMcastStatus, iPv4swAuthRadiusServerTable=iPv4swAuthRadiusServerTable, swAuthRadiusServerAccountingPort=swAuthRadiusServerAccountingPort, pppoePortCircuitIDVendor3String=pppoePortCircuitIDVendor3String, staticRouteV6NextHop=staticRouteV6NextHop, sysTrapSystemEvent=sysTrapSystemEvent, cpuFilterv6L3RuleDstIpAddrMask=cpuFilterv6L3RuleDstIpAddrMask, sysScheduleRebootTable=sysScheduleRebootTable, sysLBDRecoverTime=sysLBDRecoverTime, cableDiagLinkStatus=cableDiagLinkStatus, l2PTStpMacAddress=l2PTStpMacAddress, trafficCtrlEntry=trafficCtrlEntry, igmpMulticastVlanMemberPort=igmpMulticastVlanMemberPort, gvrpSettingsGVRPState=gvrpSettingsGVRPState, ipv4aclUdfSTagMask=ipv4aclUdfSTagMask, qosDiffServType36=qosDiffServType36, mstVlanMstiMappingEntry=mstVlanMstiMappingEntry, dhcpv6ServerScreenEnablePortlist=dhcpv6ServerScreenEnablePortlist, companyFTPGroup=companyFTPGroup, mstCistCurrentPortRole=mstCistCurrentPortRole, aclL3RuleTos=aclL3RuleTos, impbPortProtocolState=impbPortProtocolState, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, aacLoginMethod1=aacLoginMethod1, lldpXdot1LocProtoVlanSupported=lldpXdot1LocProtoVlanSupported, dhcpv6RelayControl=dhcpv6RelayControl, companyDot1qVlanGroup=companyDot1qVlanGroup, stpPortAdminP2P=stpPortAdminP2P, lldpXdot1LocProtocolIndex=lldpXdot1LocProtocolIndex, ipv4aclQosVlanID=ipv4aclQosVlanID, errorSymbolThreshold=errorSymbolThreshold, aclQosIPAddr=aclQosIPAddr, errorFrameSecondsWindow=errorFrameSecondsWindow, mstMstiPortEntry=mstMstiPortEntry, companyGratuitousARP=companyGratuitousARP, sysSave=sysSave, cpuFilterL2Rule1pPriority=cpuFilterL2Rule1pPriority, snmpTrapSNMPAuthentication=snmpTrapSNMPAuthentication, aacLoginMethod2=aacLoginMethod2, impbPortDHCPv4VlanList1k=impbPortDHCPv4VlanList1k, ipv4aclProfileEntry=ipv4aclProfileEntry, securityAAC=securityAAC, igmpMulticastVlanUntaggedSourcePort=igmpMulticastVlanUntaggedSourcePort, ftpFwPath=ftpFwPath, snmpTrapDHCPv6Screen=snmpTrapDHCPv6Screen, aclFlowMeterReplaceDscp=aclFlowMeterReplaceDscp, mldsHostPortPurgeInterval=mldsHostPortPurgeInterval, cpuFilterUdfRuleOffset3Mask=cpuFilterUdfRuleOffset3Mask, qosDefaultUserPri=qosDefaultUserPri, impbDhcpSnoopingTableClearPortList=impbDhcpSnoopingTableClearPortList, swTimeRangeDate=swTimeRangeDate, impbSettingTable=impbSettingTable, sysTrapFiberPortEvent=sysTrapFiberPortEvent, aclProfileMask=aclProfileMask, mldsVlanFilterEntry=mldsVlanFilterEntry, aacServerGroupName=aacServerGroupName, ddmTemperature=ddmTemperature, rmonEventStatus=rmonEventStatus, errorFrameNotifyState=errorFrameNotifyState, aclQosTable=aclQosTable, qinqVlanTranslationCVID=qinqVlanTranslationCVID, trafficCtrlCountDown=trafficCtrlCountDown, aacAuthParamResponseTimeout=aacAuthParamResponseTimeout, lldpXdot3RemPowerPortClass=lldpXdot3RemPowerPortClass, stpBridgeMaxHop=stpBridgeMaxHop, cpuFilterL2AccessID=cpuFilterL2AccessID, sysPortDescIndex=sysPortDescIndex, cpuFilterv6L3RulePortList=cpuFilterv6L3RulePortList, laPortControlTable=laPortControlTable, staticRouteProtocol=staticRouteProtocol, LldpPortNumber=LldpPortNumber, dhcpv6RelayInterfaceSettingsTable=dhcpv6RelayInterfaceSettingsTable, lldpXdot3RemPortAutoNegAdvertisedCap=lldpXdot3RemPortAutoNegAdvertisedCap, cpuFilterL3RuleStatus=cpuFilterL3RuleStatus, doSCtrlType=doSCtrlType, multicastVlanEntry=multicastVlanEntry, ipv4aclQosTCPUDPPort=ipv4aclQosTCPUDPPort, trafficSegTable=trafficSegTable, ftpConfigFileName=ftpConfigFileName, filterDHCPv6ServerTable=filterDHCPv6ServerTable, stpPortRestrictedRole=stpPortRestrictedRole, protocolGroupTable=protocolGroupTable, aclQosType=aclQosType, impbBlockListVlanId=impbBlockListVlanId, lldpXdot1RemProtoVlanEnabled=lldpXdot1RemProtoVlanEnabled, stpNniBpduAddr=stpNniBpduAddr, companyDHCPLocalRelay=companyDHCPLocalRelay, pppoePortState=pppoePortState, cpuFilterProfileSrcMacAddrMask=cpuFilterProfileSrcMacAddrMask, rmonAlarmInterval=rmonAlarmInterval, snmpV3viewTreeStatus=snmpV3viewTreeStatus, vlanTrunkState=vlanTrunkState, companyDoSCtrl=companyDoSCtrl, tftpFwTftpOperation=tftpFwTftpOperation, miscStatisticsReset=miscStatisticsReset, impbPortIpInspectionState=impbPortIpInspectionState, ipv4aclQosMACAddr=ipv4aclQosMACAddr, mldsVlanFilterVlanId=mldsVlanFilterVlanId, lldpXdot1ConfigPortVlanTable=lldpXdot1ConfigPortVlanTable, aclPacketRuleOffsetValue4=aclPacketRuleOffsetValue4, aclProfileStatus=aclProfileStatus, swAuthAuthReAuthentication=swAuthAuthReAuthentication, icmpv6RaAllNodeEnableLog=icmpv6RaAllNodeEnableLog, qosDiffServType51=qosDiffServType51, syslogServEntry=syslogServEntry, snmpV3TrapDULD=snmpV3TrapDULD, staticARPRowStatus=staticARPRowStatus, ipifV6AddressIpType=ipifV6AddressIpType, sysPortMediaTypeOui=sysPortMediaTypeOui, cosBandwidthCtrlTable=cosBandwidthCtrlTable, qosDiffServType28=qosDiffServType28, macNotifyInterval=macNotifyInterval, sysTrapDHCPServerScreening=sysTrapDHCPServerScreening, sysSNTPDSTRepeatStartMin=sysSNTPDSTRepeatStartMin, trustedHostIpAddr=trustedHostIpAddr, companySNTPSetting=companySNTPSetting, filterDHCPv6ServerIpAddr=filterDHCPv6ServerIpAddr, lldpXdot3RemoteData=lldpXdot3RemoteData, macNotifyCtrlIndex=macNotifyCtrlIndex, cpuFilterProfileType=cpuFilterProfileType, qosDiffServType10=qosDiffServType10, sshSessionKeyRekeying=sshSessionKeyRekeying, impbBindingListPort=impbBindingListPort, sysGratuitousARPIFName=sysGratuitousARPIFName, sysSNTPTimeSeconds=sysSNTPTimeSeconds, mstCistStatus=mstCistStatus, swAuthUserPassword=swAuthUserPassword, snmpTrapWarmStart=snmpTrapWarmStart, igsHostTableHostIPAddress=igsHostTableHostIPAddress, protocolGroupNameEntry=protocolGroupNameEntry, dhcpv6RelayState=dhcpv6RelayState, firmwareInfoImage1=firmwareInfoImage1, cpuFilterL3RuleTcpUdpDstPortMask=cpuFilterL3RuleTcpUdpDstPortMask, companyDDM=companyDDM, qosDiffServType32=qosDiffServType32, cpuFilterL2ProfileID=cpuFilterL2ProfileID, impbBlockListMacAddress=impbBlockListMacAddress, snmpV3HostCommunityName=snmpV3HostCommunityName, PortLaMode=PortLaMode, cpuFilterL3RuleTcpUdpSrcPortMask=cpuFilterL3RuleTcpUdpSrcPortMask, qosDiffServType16=qosDiffServType16, qosTOSType00=qosTOSType00, dhcpLocalRelayEnablePortlist=dhcpLocalRelayEnablePortlist, aacAccountingServiceNetwork=aacAccountingServiceNetwork, portSecTableClear=portSecTableClear, snmpV3GroupReadViewName=snmpV3GroupReadViewName, sysSNTPDSTStartDay=sysSNTPDSTStartDay, lldpXdot1RemPortVlanId=lldpXdot1RemPortVlanId, aacLoginMethodListIndex=aacLoginMethodListIndex, aclPacketRuleCTag=aclPacketRuleCTag, cableDiagPortIndex=cableDiagPortIndex, newRootMSTibridgeregionalroot=newRootMSTibridgeregionalroot, aclL2Rule=aclL2Rule, l2PTState=l2PTState)
mibBuilder.exportSymbols("DES-1210-26MEbx", sysSNTPDSTRepeatEndHour=sysSNTPDSTRepeatEndHour, dhcpServerScreenEnableVlanlist=dhcpServerScreenEnableVlanlist, igsVlanRtrPortList=igsVlanRtrPortList, vlanTrunkSystem=vlanTrunkSystem, aRPSpoofPreventEntry=aRPSpoofPreventEntry, sshUserInfoUserName=sshUserInfoUserName, aclL2RuleRateLimit=aclL2RuleRateLimit, cpuFilterv6L3RuleTcpUdpDstPortMask=cpuFilterv6L3RuleTcpUdpDstPortMask, pppoePortTable=pppoePortTable, sfpBaudRate=sfpBaudRate, stpPort=stpPort, swAuthRadiusServer=swAuthRadiusServer, aclPacketRuleCTagMask=aclPacketRuleCTagMask, cpuFilterL2RuleDstMacAddrMask=cpuFilterL2RuleDstMacAddrMask, dhcpRelayVlanTableEntry=dhcpRelayVlanTableEntry, qosDiffServType38=qosDiffServType38, igmpMulticastVlanReplaceSourceIp=igmpMulticastVlanReplaceSourceIp, baudRateConfiguration=baudRateConfiguration, mldsVlanSnoopStatus=mldsVlanSnoopStatus, aacServerInfoTable=aacServerInfoTable, aclv6L3RulePortList=aclv6L3RulePortList, companyLA=companyLA, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, rmonEventType=rmonEventType, vlanMacLearningType=vlanMacLearningType, pppoePortIndex=pppoePortIndex, sshMaxAuthFailAttempts=sshMaxAuthFailAttempts, companySTP=companySTP, qinqGlobalStatus=qinqGlobalStatus, iPv4aacServerRowStatus=iPv4aacServerRowStatus, staticRouteNetmask=staticRouteNetmask, securityDhcpv6ServerScreen=securityDhcpv6ServerScreen, sysPortErrPortIndex=sysPortErrPortIndex, aacServerPasswordEncryption=aacServerPasswordEncryption, igsVlan=igsVlan, autoFdbPort=autoFdbPort, sysIpAddr=sysIpAddr, lldpXdot3PortConfigTLVsTxEnable=lldpXdot3PortConfigTLVsTxEnable, cosBandwidthEffectiveTX=cosBandwidthEffectiveTX, aclL2RuleFilterTimeRange=aclL2RuleFilterTimeRange, snmpV3HostStatus=snmpV3HostStatus, companyProtocolVlan=companyProtocolVlan, sysPortCtrlCapability=sysPortCtrlCapability, sysBPDUAttackCtrlTable=sysBPDUAttackCtrlTable, cpuFilterL2RuleAction=cpuFilterL2RuleAction, qosDiffServType60=qosDiffServType60, dhcpBOOTPRelayManagement=dhcpBOOTPRelayManagement, sfpVendorName=sfpVendorName, sysPortCtrlTable=sysPortCtrlTable, swLedPanelstate=swLedPanelstate, multicastVlanGroupFromIp=multicastVlanGroupFromIp, aclv6L3RuleTcpPshBit=aclv6L3RuleTcpPshBit, limitIpMulticaststartIpAddr=limitIpMulticaststartIpAddr, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, aclUdfOffsetByte3=aclUdfOffsetByte3, ipv4IPIFTable=ipv4IPIFTable, mldsVlanMulticastGroupTable=mldsVlanMulticastGroupTable, laPortChannelMemberList=laPortChannelMemberList, rmonEventOwner=rmonEventOwner, cpuFilterL3RuleDscp=cpuFilterL3RuleDscp, qosDiffServType05=qosDiffServType05, qosInBandMgmt=qosInBandMgmt, smtpServerPort=smtpServerPort, aclProfileTable=aclProfileTable, aclv6L3RuleTcpUrgBit=aclv6L3RuleTcpUrgBit, swTimeRangeStartYear=swTimeRangeStartYear, companySMTP=companySMTP, iPv4aacServerAuthKey=iPv4aacServerAuthKey, snmpTrapFirmUpgrade=snmpTrapFirmUpgrade, sysScheduleRebootSaveConfig=sysScheduleRebootSaveConfig, sysPortCtrlState=sysPortCtrlState, stpPortEntry=stpPortEntry, aclFlowMeterAccessID=aclFlowMeterAccessID, autoFdbEntry=autoFdbEntry, staticRouteRowStatus=staticRouteRowStatus, sysSNTPPollInterval=sysSNTPPollInterval, lldpPortConfigTLVsTxEnable=lldpPortConfigTLVsTxEnable, qosInBandMgmtSetDefPriority=qosInBandMgmtSetDefPriority, aacServerIPType=aacServerIPType, protocolGroupRowStatus=protocolGroupRowStatus, mldsVlanRouterVlanId=mldsVlanRouterVlanId, sysPortMediaTypeTable=sysPortMediaTypeTable, dhcpBOOTPRelayOption82RemoteID=dhcpBOOTPRelayOption82RemoteID, aclQosEntry=aclQosEntry, companyAgentBasicInfo=companyAgentBasicInfo, ipv4trustedHostTable=ipv4trustedHostTable, lldpXdot3LocalData=lldpXdot3LocalData, sysSerialNumber=sysSerialNumber, sysPortCtrlOperStatus=sysPortCtrlOperStatus, cpuFilterL3RuleTcpRstBit=cpuFilterL3RuleTcpRstBit, ipv4snmpV3HostStatus=ipv4snmpV3HostStatus, BridgeId=BridgeId, impbPortDHCPv6VlanList1k=impbPortDHCPv6VlanList1k, securityDhcpServerScreen=securityDhcpServerScreen, ipv4aclUdfOffsetByte3=ipv4aclUdfOffsetByte3, qinqIfIndex=qinqIfIndex, lldpXdot1LocVlanNameTable=lldpXdot1LocVlanNameTable, cpuFilterv6L3RuleProfileNo=cpuFilterv6L3RuleProfileNo, aclL3RuleFilterTimeRange=aclL3RuleFilterTimeRange, aacServerRetryCount=aacServerRetryCount, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, limitIpMulticastPortID=limitIpMulticastPortID, aclL3RuleDscp=aclL3RuleDscp, mldsVlanRobustnessValue=mldsVlanRobustnessValue, multicastVlanRowStatus=multicastVlanRowStatus, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, snmpTrapDyingGasp=snmpTrapDyingGasp, autoCableDiagPortIndex=autoCableDiagPortIndex, sysContactName=sysContactName, aclPacketRuleDstMacMask=aclPacketRuleDstMacMask, mstiRevisionLevel=mstiRevisionLevel, snmpV3TrapPortSecurity=snmpV3TrapPortSecurity, mstiConfigurationName=mstiConfigurationName, aclv6L3RuleStatus=aclv6L3RuleStatus, igsVlanQuerierVersionStatus=igsVlanQuerierVersionStatus, qosDiffServType59=qosDiffServType59, autoRefreshConfiguration=autoRefreshConfiguration, aclL3RuleICMPMessageCode=aclL3RuleICMPMessageCode, lldpXdot3LocPowerMDISupported=lldpXdot3LocPowerMDISupported, impbAutoScanCurrentStatus=impbAutoScanCurrentStatus, aclv6L3RuleProfileNo=aclv6L3RuleProfileNo, mldsVlanGrpQueryInterval=mldsVlanGrpQueryInterval, ipifName=ipifName, swTimeRangeTuesday=swTimeRangeTuesday, swTimeRangeStartDay=swTimeRangeStartDay, sysTrapDuplicateIPDetected=sysTrapDuplicateIPDetected, lldpXdot3RemLinkAggPortId=lldpXdot3RemLinkAggPortId, errorFrameWindow=errorFrameWindow, ftpConfigPassword=ftpConfigPassword, ftpFwFTPOperationStatus=ftpFwFTPOperationStatus, mldsRouterPortPurgeInterval=mldsRouterPortPurgeInterval, rmonStatsIndex=rmonStatsIndex, ipv4aclUdfOffsetByte2=ipv4aclUdfOffsetByte2, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, sysPortUpLinkTime=sysPortUpLinkTime, snmpV3HostAddress=snmpV3HostAddress, snmpTrapDOSPrevent=snmpTrapDOSPrevent, aclPacketRuleStatus=aclPacketRuleStatus, sysFirmwareVersion=sysFirmwareVersion, cpuFilterv6L3RuleTcpUrgBit=cpuFilterv6L3RuleTcpUrgBit, aclL2RuleAction=aclL2RuleAction, qinqTrustCVIDState=qinqTrustCVIDState, staticARPIP=staticARPIP, swAuthRadiusServerRetransmit=swAuthRadiusServerRetransmit, mstVlanMstiMappingTable=mstVlanMstiMappingTable, aacServerInfoEntry=aacServerInfoEntry, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, lldpXdot1ConfigVlanNameTable=lldpXdot1ConfigVlanNameTable, ipv4aclUdfOffsetByte1=ipv4aclUdfOffsetByte1, qosDiffServType50=qosDiffServType50, lldpXdot1LocVlanNameEntry=lldpXdot1LocVlanNameEntry, ipv4sysSNTPDSTEndMin=ipv4sysSNTPDSTEndMin, mstCistPortPriority=mstCistPortPriority, ipv4trustedHostEntry=ipv4trustedHostEntry, dot1qVlanRowStatus=dot1qVlanRowStatus, securityTrustedHost=securityTrustedHost, staticRouteMetric=staticRouteMetric, sysPortMediaTypeVendorName=sysPortMediaTypeVendorName, igsSystem=igsSystem, lldpXdot1LocVlanId=lldpXdot1LocVlanId, PortList=PortList, multicastVlanIgmpReplaceSourceIp=multicastVlanIgmpReplaceSourceIp, cpuFilterv6L3RuleTcpUdpSrcPortMask=cpuFilterv6L3RuleTcpUdpSrcPortMask, swTimeRangeEndMinute=swTimeRangeEndMinute, neighborIPv6Addr=neighborIPv6Addr, mstMstiCurrentPortRole=mstMstiCurrentPortRole, macNotifyCtrlTable=macNotifyCtrlTable, gvrpSettingsLeaveAllTime=gvrpSettingsLeaveAllTime, dhcpv6RelayOption18InterfaceIDType=dhcpv6RelayOption18InterfaceIDType, sshUserInfoAuth=sshUserInfoAuth, sysPortErrTable=sysPortErrTable, smtpServerAddrType=smtpServerAddrType, duldIfIndex=duldIfIndex, aacServerAccountingPort=aacServerAccountingPort, neighborActiveStatus=neighborActiveStatus, staticTable=staticTable, lldpXdot3RemPowerEntry=lldpXdot3RemPowerEntry, impbAutoScanBinding=impbAutoScanBinding, rmonEventEntry=rmonEventEntry, igmpMulticastVlanState=igmpMulticastVlanState, aclv6L3RuleAction=aclv6L3RuleAction, ftpFwPort=ftpFwPort, laStatus=laStatus, ipv4aclProfileDstIpAddrMask=ipv4aclProfileDstIpAddrMask, companyLBD=companyLBD, ipifV6AddressMainIndex=ipifV6AddressMainIndex, companyACLGroup=companyACLGroup, dhcpv6RelayOption37=dhcpv6RelayOption37, duldOperState=duldOperState, lldpXdot3LocPowerEntry=lldpXdot3LocPowerEntry, cpuFilterv6L3RuleICMPMessageType=cpuFilterv6L3RuleICMPMessageType, rmonStatsEntry=rmonStatsEntry, statisticsClearPortList=statisticsClearPortList, sysSNTPFirstType=sysSNTPFirstType, RmonStatus=RmonStatus, protocolVlanVID=protocolVlanVID, ddmThresholdMgmtTable=ddmThresholdMgmtTable, sysPortErrPortState=sysPortErrPortState, macNotificatiotn=macNotificatiotn, lldpXdot1RemProtoVlanTable=lldpXdot1RemProtoVlanTable, agentPORTutilizationPortUtil5sec=agentPORTutilizationPortUtil5sec, firmwareInfoImage1FromIP=firmwareInfoImage1FromIP, impbPortDHCPMaxEntryIPv6=impbPortDHCPMaxEntryIPv6, iPv4swAuthRadiusServerEntry=iPv4swAuthRadiusServerEntry, swLedInfoUnitId=swLedInfoUnitId, aacAPAuthMethodGroup=aacAPAuthMethodGroup, autoCableDiagTable=autoCableDiagTable, cpuFilterProfileOffset5Mask=cpuFilterProfileOffset5Mask, cpuFilterUdfRuleOffset2=cpuFilterUdfRuleOffset2, swTimeRangeStartMinute=swTimeRangeStartMinute, cpuFilterv6L3RuleTable=cpuFilterv6L3RuleTable, staticMcastMac=staticMcastMac, snmpV3GroupTable=snmpV3GroupTable, mstCistPortDesignatedBridge=mstCistPortDesignatedBridge, companySNMPV3=companySNMPV3, qosDiffServType62=qosDiffServType62, sysBPDUAttackPortMode=sysBPDUAttackPortMode, sysPortMediaType=sysPortMediaType, aclL3RuleSrcIpAddrMask=aclL3RuleSrcIpAddrMask, igsVlanFilterTable=igsVlanFilterTable, ipv4syslogServIndex=ipv4syslogServIndex, ipv4aclProfileUdfOffsetMap=ipv4aclProfileUdfOffsetMap, sysSwitchName=sysSwitchName, qosDiffServType49=qosDiffServType49, protocolVlanRowStatus=protocolVlanRowStatus, cpuFilterL3RuleTcpUrgBit=cpuFilterL3RuleTcpUrgBit, rmonHistoryDataSource=rmonHistoryDataSource, cpuFilterUdfRuleStatus=cpuFilterUdfRuleStatus, dhcpLocalRelayTable=dhcpLocalRelayTable, cpuFilterL2RuleVlanId=cpuFilterL2RuleVlanId, sysSNTPDSTState=sysSNTPDSTState, des_1210_26me=des_1210_26me, impbAutoScanVlanId=impbAutoScanVlanId, snmpV3UserName=snmpV3UserName, sysIpSubnetMask=sysIpSubnetMask, impbVlanModeState=impbVlanModeState, vlanMacMapLearningVid=vlanMacMapLearningVid, swLedInfoFrontPanelLedStatus=swLedInfoFrontPanelLedStatus, lldpXdot1RemProtocolId=lldpXdot1RemProtocolId, macBasedVlanTable=macBasedVlanTable, syslogServIndex=syslogServIndex, aacAccountingServiceSystem=aacAccountingServiceSystem, sysLBDMode=sysLBDMode, trafficControl=trafficControl, brgAddress=brgAddress, swAuthUserName=swAuthUserName, securityTrafficSeg=securityTrafficSeg, swAuthAuthReAuthPeriod=swAuthAuthReAuthPeriod, lldpXdot3RemPortAutoNegEnabled=lldpXdot3RemPortAutoNegEnabled, aacAccountingMethod3=aacAccountingMethod3, ipifv6GlobalStatus=ipifv6GlobalStatus, limitIpMulticastPortProfileID=limitIpMulticastPortProfileID, ftpConfigFTPOperationStatus=ftpConfigFTPOperationStatus, aclProfileRuleCount=aclProfileRuleCount)
mibBuilder.exportSymbols("DES-1210-26MEbx", errorFramePeriodThreshold=errorFramePeriodThreshold, aclv6L3RuleDstIpAddr=aclv6L3RuleDstIpAddr, mcastFilterPortEntry=mcastFilterPortEntry, igsHostTable=igsHostTable, filterDHCPv6ServerRowStatus=filterDHCPv6ServerRowStatus, companyCPUInterfaceFilterGroup=companyCPUInterfaceFilterGroup, lldpXdot3RemPortAutoNegSupported=lldpXdot3RemPortAutoNegSupported, duldTable=duldTable, des_1210_26mebx=des_1210_26mebx, sfpVendorOui=sfpVendorOui, snmpV3ViewTree=snmpV3ViewTree, lldpXdot3PortConfigTable=lldpXdot3PortConfigTable, aclL3RuleTcpPshBit=aclL3RuleTcpPshBit, filterICMPv6RaAllNodeServerPortList=filterICMPv6RaAllNodeServerPortList, ipv4aclProfileArpSenderIpAddrMask=ipv4aclProfileArpSenderIpAddrMask, ipv4dhcpOption12HostName=ipv4dhcpOption12HostName, iPv4swAuthRadiusServerAccountingPort=iPv4swAuthRadiusServerAccountingPort, trafficCtrlType=trafficCtrlType, duplicateIP=duplicateIP, swAuthRadiusServerEntry=swAuthRadiusServerEntry, lldpPortConfigTable=lldpPortConfigTable, miscReset=miscReset, ipv4syslogServSrvStatus=ipv4syslogServSrvStatus, stpPortEdge=stpPortEdge, sysLBDCtrlEntry=sysLBDCtrlEntry, filterDHCPv6ServerPortList=filterDHCPv6ServerPortList, aclL3RuleAction=aclL3RuleAction, qinqVlanTranslationCVIDTable=qinqVlanTranslationCVIDTable, igmpMulticastVlanRemapPriority=igmpMulticastVlanRemapPriority, companyLLDPSetting=companyLLDPSetting, impbBindingtrapsign=impbBindingtrapsign, mldsVlanRouterTable=mldsVlanRouterTable, aclPacketProfileID=aclPacketProfileID, cpuFilterL2RuleInPortList=cpuFilterL2RuleInPortList, aclv6L3RuleTcpRstBit=aclv6L3RuleTcpRstBit, swAuthPortAccessControlEntry=swAuthPortAccessControlEntry, mstCistVlanMapped3k=mstCistVlanMapped3k, stpRootCost=stpRootCost, mcastFilterPortTable=mcastFilterPortTable, aclv6L3RuleAccessID=aclv6L3RuleAccessID, cableDiagPair1Status=cableDiagPair1Status, ipv4sysSNTPDSTOffset=ipv4sysSNTPDSTOffset, portSecIndex=portSecIndex, ddmThresholdPort=ddmThresholdPort, aacAccountingMethod2=aacAccountingMethod2, qosDiffServType14=qosDiffServType14, mstResetVlanList=mstResetVlanList, aclProfileDstMacAddrMask=aclProfileDstMacAddrMask, aclPacketRuleOffsetValue1=aclPacketRuleOffsetValue1, aclL2RuleReplaceDSCP=aclL2RuleReplaceDSCP, qosInBandMgmtPktPriority=qosInBandMgmtPktPriority, dlinklldpState=dlinklldpState, smtpRecvMailAddrEntry=smtpRecvMailAddrEntry, aclUdfSrcMacMask=aclUdfSrcMacMask, mldsVlanFbdRtrPortList=mldsVlanFbdRtrPortList, autoFdbTable=autoFdbTable, staticVlanID=staticVlanID, aclPacketRuleOffsetValue3Mask=aclPacketRuleOffsetValue3Mask, swTimeRangeSettingEntry=swTimeRangeSettingEntry, icmpv6RaAllNodeEnablePortlist=icmpv6RaAllNodeEnablePortlist, cpuFilterv6L3RuleTcpUdpDstPort=cpuFilterv6L3RuleTcpUdpDstPort, cpuFilterUdfRuleTable=cpuFilterUdfRuleTable, staticMcastIpAddr=staticMcastIpAddr, snmpTrapRSTPStateChange=snmpTrapRSTPStateChange, cpuFilterUdfRuleOffset1Mask=cpuFilterUdfRuleOffset1Mask, staticStatus=staticStatus, aclL3RuleSrcIpAddr=aclL3RuleSrcIpAddr, iPv4aacServerIndex=iPv4aacServerIndex, lldpXdot1ConfigProtocolTxEnable=lldpXdot1ConfigProtocolTxEnable, dhcpv6RelayOpt38Table=dhcpv6RelayOpt38Table, sshMaxSession=sshMaxSession, mldsHostTable=mldsHostTable, companyISMVLAN=companyISMVLAN, ddmStatusPort=ddmStatusPort, sysSNTPDSTStartHour=sysSNTPDSTStartHour, aclUdfOffsetByte2=aclUdfOffsetByte2, snmpV3HostInterfaceName=snmpV3HostInterfaceName, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, cableDiagPair3Length=cableDiagPair3Length, sysGratuitousARPInterval=sysGratuitousARPInterval, gvrpSettingsIngressChecking=gvrpSettingsIngressChecking, errorSymbolWindow=errorSymbolWindow, laPortActorTimeout=laPortActorTimeout, swAuthenCtrl=swAuthenCtrl, vlanMacMapAddr=vlanMacMapAddr, igmpMulticastVlanName=igmpMulticastVlanName, lldpXdot3LocPowerPortClass=lldpXdot3LocPowerPortClass, sysSaveOperationStatus=sysSaveOperationStatus, aclL2ProfileID=aclL2ProfileID, aclPacketRuleOffsetValue2Mask=aclPacketRuleOffsetValue2Mask, ipv4sysSNTPDSTState=ipv4sysSNTPDSTState, cpuFilterv6L3RuleAction=cpuFilterv6L3RuleAction, rmonHistory=rmonHistory, aRPSpoofPreventPortList=aRPSpoofPreventPortList, aclPacketRuleEntry=aclPacketRuleEntry, ddmStatus=ddmStatus, qinqVlanTranslationSVID=qinqVlanTranslationSVID, swAuthUserEntry=swAuthUserEntry, aclPacketRuleInPortList=aclPacketRuleInPortList, snmpV3CommunityEntry=snmpV3CommunityEntry, dhcpBOOTPRelayOption82CircuitID=dhcpBOOTPRelayOption82CircuitID, ipv4syslogServSeverity=ipv4syslogServSeverity, newRootBrgaddress=newRootBrgaddress, limitIpMulticastProfileStatus=limitIpMulticastProfileStatus, cpuFilterL3RuleDstIpAddrMask=cpuFilterL3RuleDstIpAddrMask, lldpXdot1ConfigVlanNameEntry=lldpXdot1ConfigVlanNameEntry, multicastVlanState=multicastVlanState, companyQinQ=companyQinQ, qosDefaultUserPriTable=qosDefaultUserPriTable, cpuFilterv6L3RuleTcpFinBit=cpuFilterv6L3RuleTcpFinBit, swAuthPortAccessControlTable=swAuthPortAccessControlTable, qinqOuterTPID=qinqOuterTPID, doSCtrlTable=doSCtrlTable, aacAPHttpLoginMethod=aacAPHttpLoginMethod, sysLoginTimeoutInterval=sysLoginTimeoutInterval, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, impbDhcpSnoopingMacAddress=impbDhcpSnoopingMacAddress, sysBPDUAttackLog=sysBPDUAttackLog, dhcpLocalRelayGlobalState=dhcpLocalRelayGlobalState, doSCtrlEntry=doSCtrlEntry, cableDiagPair2Length=cableDiagPair2Length, dhcpBOOTPRelayInterfaceSettingsTable=dhcpBOOTPRelayInterfaceSettingsTable, aclFlowMeterTable=aclFlowMeterTable, ddmActionMgmtTable=ddmActionMgmtTable, sysLBDCtrlTable=sysLBDCtrlTable, cpuFilterProfileIPProtocol=cpuFilterProfileIPProtocol, aclL3RuleReplace1P=aclL3RuleReplace1P, companyTrapSetting=companyTrapSetting, aclUdfOffsetBase1=aclUdfOffsetBase1, cpuFilterL3RuleTcpUdpDstPort=cpuFilterL3RuleTcpUdpDstPort, ipv4snmpV3HostCommunityName=ipv4snmpV3HostCommunityName, aacEnableMethodListTable=aacEnableMethodListTable, multicastVlanReplacePriority=multicastVlanReplacePriority, ftpFwFTPOperation=ftpFwFTPOperation, tftpConfigTftpOperation=tftpConfigTftpOperation, firmwareInfoImage1Type=firmwareInfoImage1Type, cpuFilterL2RuleStatus=cpuFilterL2RuleStatus, ipv4sysIprouteHops=ipv4sysIprouteHops, dhcpBOOTPRelayEnablePortlist=dhcpBOOTPRelayEnablePortlist, impbPortDHCPv4VlanList4k=impbPortDHCPv4VlanList4k, ftpFwServerIpAddress=ftpFwServerIpAddress, aclPacketRuleAction=aclPacketRuleAction, multicastVlanSourcePort=multicastVlanSourcePort, qosDiffServType03=qosDiffServType03, staticRouteTable=staticRouteTable, errorFrameSecondsNotifyState=errorFrameSecondsNotifyState, aclQosAssignClass=aclQosAssignClass, snmpV3CommunityPolicy=snmpV3CommunityPolicy, lldpXdot3RemPowerClass=lldpXdot3RemPowerClass, aclProfileArpSenderIpAddrMask=aclProfileArpSenderIpAddrMask, filterICMPv6RaAllNodeServerRowStatus=filterICMPv6RaAllNodeServerRowStatus, staticRouteV6Prefix=staticRouteV6Prefix, sysIpAddrCfgMode=sysIpAddrCfgMode, limitIpMulticastProfileEntry=limitIpMulticastProfileEntry, sfpVendorRev=sfpVendorRev, cpuFilterv6L3RuleSrcIpAddr=cpuFilterv6L3RuleSrcIpAddr, igsVlanRouterEntry=igsVlanRouterEntry, multicastVlanName=multicastVlanName, stpPortRestrictedTCN=stpPortRestrictedTCN, mstCistBridgePriority=mstCistBridgePriority, dhcpBOOTPRelayOption82CircuitIDType=dhcpBOOTPRelayOption82CircuitIDType, aclProfileEntry=aclProfileEntry, sysSNTPDSTRepeatEndMon=sysSNTPDSTRepeatEndMon, aacEnableMethodListIndex=aacEnableMethodListIndex, trafficCtrlTimeInterval=trafficCtrlTimeInterval, lldpXdot3LocPortTable=lldpXdot3LocPortTable, aclL2RuleInPortList=aclL2RuleInPortList, aacServerGroupIndex=aacServerGroupIndex, staticRouteV6ActiveStatus=staticRouteV6ActiveStatus, aacServerInterfaceName=aacServerInterfaceName, qosDefaultPriority=qosDefaultPriority, sysPortMediaTypeDateCode=sysPortMediaTypeDateCode, lldpXdot3RemLinkAggStatus=lldpXdot3RemLinkAggStatus, lldpXdot1RemoteData=lldpXdot1RemoteData, aclL3RuleRateLimit=aclL3RuleRateLimit, qosDiffServType47=qosDiffServType47, ftpConfigPath=ftpConfigPath, dhcpBOOTPRelayManagementOption82=dhcpBOOTPRelayManagementOption82, errorFrameSecondsThreshold=errorFrameSecondsThreshold, igmpMulticastVlanEntry=igmpMulticastVlanEntry, lldpXdot1RemProtoVlanSupported=lldpXdot1RemProtoVlanSupported, aclL3RuleDstIpAddr=aclL3RuleDstIpAddr, ipv4syslogServTable=ipv4syslogServTable, mldsVlanFastLeave=mldsVlanFastLeave, aacAPEnableMethod=aacAPEnableMethod, syslogServAddrType=syslogServAddrType, firmwareInfoImage1Size=firmwareInfoImage1Size, igsHostPortPurgeInterval=igsHostPortPurgeInterval, cpuFilterL3RulePortList=cpuFilterL3RulePortList, ipv4sysSNTPDSTStartDay=ipv4sysSNTPDSTStartDay, aclUdfCTagMask=aclUdfCTagMask, vlanMacMapVid=vlanMacMapVid, ipv4syslogServAddr=ipv4syslogServAddr, qosDiffServType27=qosDiffServType27, aclL2RuleVlanId=aclL2RuleVlanId, cpuFilterL2RuleSrcMacAddr=cpuFilterL2RuleSrcMacAddr, dhcpv6RelayOpt38PortType=dhcpv6RelayOpt38PortType, sshAuthenMethodHostKeyAdmin=sshAuthenMethodHostKeyAdmin, companyStaticRoute=companyStaticRoute, dhcpServerScreenEnableLog=dhcpServerScreenEnableLog, multicastVlanUntaggedSourcePort=multicastVlanUntaggedSourcePort, autoCableDiagStatus=autoCableDiagStatus, qinqVlanTranslationSVIDOperation=qinqVlanTranslationSVIDOperation, neighborEntry=neighborEntry, rmonHistoryTable=rmonHistoryTable, cosClassIndex=cosClassIndex, neighborRowStatus=neighborRowStatus, lldpXdot1RemEntry=lldpXdot1RemEntry, igsVlanFilterVlanId=igsVlanFilterVlanId, cableDiagAction=cableDiagAction, lldpXdot1LocEntry=lldpXdot1LocEntry, vlanMacMapLearningAddr=vlanMacMapLearningAddr, lldpXdot3LocPortOperMauType=lldpXdot3LocPortOperMauType, dhcpv6RelayOption38=dhcpv6RelayOption38, igsHostEntry=igsHostEntry, aacServerGroupTable=aacServerGroupTable, autologoutConfiguration=autologoutConfiguration, aclPacketRuleOffsetValue1Mask=aclPacketRuleOffsetValue1Mask, mldsVlanReportSuppression=mldsVlanReportSuppression, limitIpMulticastEntryProfileID=limitIpMulticastEntryProfileID, protocolVlanPort=protocolVlanPort, igmpMulticastVlanReplacePriority=igmpMulticastVlanReplacePriority, portSecFDBPermMac=portSecFDBPermMac, ipv4smtpRecvMailAddrIndex=ipv4smtpRecvMailAddrIndex, mstMstiBridgePriority=mstMstiBridgePriority, mstMstiPortDesignatedBridge=mstMstiPortDesignatedBridge, cpuFilterL3RuleTcpPshBit=cpuFilterL3RuleTcpPshBit, sysTrapStateChangeEvent=sysTrapStateChangeEvent, aclQosIP6TC=aclQosIP6TC, tftpFwTargetImageFileName=tftpFwTargetImageFileName, cpuFilterL3RuleTable=cpuFilterL3RuleTable, iPv4swAuthRadiusServerAddress=iPv4swAuthRadiusServerAddress, ddmVoltage=ddmVoltage, sysMirrorTargetPort=sysMirrorTargetPort, laPortChannelTable=laPortChannelTable, lldpXdot3LocLinkAggPortId=lldpXdot3LocLinkAggPortId, impbDhcpSnoopingIpAddress=impbDhcpSnoopingIpAddress, PYSNMP_MODULE_ID=des_1210_26mebx, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, staticVlanBaseEnableAutoLearn=staticVlanBaseEnableAutoLearn, aclL2RuleVlanIdMask=aclL2RuleVlanIdMask, multicastVlanGroupVid=multicastVlanGroupVid, lldpPortConfigAdminStatus=lldpPortConfigAdminStatus, qosDiffServType42=qosDiffServType42, ipv4sysSNTPFirstServer=ipv4sysSNTPFirstServer, sysLBDPortStatus=sysLBDPortStatus, swTimeRangeIndex=swTimeRangeIndex, autoFdbMacAddress=autoFdbMacAddress, swAuthAuthConfigPortNumber=swAuthAuthConfigPortNumber, sysLBDStateEnable=sysLBDStateEnable, swAuthAuthSuppTimeout=swAuthAuthSuppTimeout, autoFdbVlanID=autoFdbVlanID, ipv4sysGateway=ipv4sysGateway, aclUdfOffsetMask1=aclUdfOffsetMask1)
mibBuilder.exportSymbols("DES-1210-26MEbx", cpuFilterProfileRuleCount=cpuFilterProfileRuleCount, eoamEntry=eoamEntry, agentCPUutilizationIn5sec=agentCPUutilizationIn5sec, aacEnableMethod3=aacEnableMethod3, swTimeRangeEndMonth=swTimeRangeEndMonth, filterDHCPServerClientMacAddr=filterDHCPServerClientMacAddr, dhcpBOOTPRelayHopCount=dhcpBOOTPRelayHopCount, snmpV3EngineID=snmpV3EngineID, swLedInfoEntry=swLedInfoEntry, cpuFilterv6L3RuleTrafficClass=cpuFilterv6L3RuleTrafficClass, eoamReceivedRemoteLoopback=eoamReceivedRemoteLoopback, igmpMulticastVlanRowStatus=igmpMulticastVlanRowStatus, ipv4trustedHostRowStatus=ipv4trustedHostRowStatus, staticRouteV6Metric=staticRouteV6Metric, telnetsettingManagementOnOff=telnetsettingManagementOnOff, cpuFilterUdfRule=cpuFilterUdfRule, companyGuestVlan=companyGuestVlan, qosUserPriorityTable=qosUserPriorityTable, impbBlockListTable=impbBlockListTable, laPortChannelIfIndex=laPortChannelIfIndex, impbAutoScanTable=impbAutoScanTable, tftpConfigFileName=tftpConfigFileName, companySfpVendorInfo=companySfpVendorInfo, impbAutoScanIpAddressFrom=impbAutoScanIpAddressFrom, agentCPUutilizationIn5min=agentCPUutilizationIn5min, l2PTProtocol=l2PTProtocol, sysSNTPDSTEndMin=sysSNTPDSTEndMin, sfpConnectorType=sfpConnectorType, snmpV3TrapBPDUAttack=snmpV3TrapBPDUAttack, mstCistPortAdminPathCost=mstCistPortAdminPathCost, aacLoginMethod4=aacLoginMethod4, swAuthAuthServerTimeout=swAuthAuthServerTimeout, rmonStatistics=rmonStatistics, aacServerAuthKey=aacServerAuthKey, aacLoginMethodListRowStatus=aacLoginMethodListRowStatus, igmpMulticastVlanid=igmpMulticastVlanid, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, ddmThresholdMgmtEntry=ddmThresholdMgmtEntry, impbSettingEntry=impbSettingEntry, dhcpBOOTPRelayInterfaceSettingsRowStatus=dhcpBOOTPRelayInterfaceSettingsRowStatus, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, companyDHCPRelay=companyDHCPRelay, LldpPowerPortClass=LldpPowerPortClass, aclL2RuleTable=aclL2RuleTable, stpNewRootTrapStatus=stpNewRootTrapStatus, lldpXdot3RemPortTable=lldpXdot3RemPortTable, smtpSelfMailAddr=smtpSelfMailAddr, aacAPSSHLoginMethod=aacAPSSHLoginMethod, agentPORTutilizationPortUtil1min=agentPORTutilizationPortUtil1min, agentCPUutilizationIn1min=agentCPUutilizationIn1min, sysSNTPDSTMethod=sysSNTPDSTMethod, ipv4snmpV3HostVersion=ipv4snmpV3HostVersion, qosPriSettingsEntry=qosPriSettingsEntry, cosClassEntry=cosClassEntry, snmpV3TrapDHCPServerScreening=snmpV3TrapDHCPServerScreening, trafficCtrlActionMode=trafficCtrlActionMode, sysScheduleRebootTimeSetting=sysScheduleRebootTimeSetting, sysLBDPortLoopStatus=sysLBDPortLoopStatus, sysGratuitousARPTable=sysGratuitousARPTable, protocolGroupFrameType=protocolGroupFrameType, aclFlowMeterBurstSize=aclFlowMeterBurstSize, aclProfileDstIpAddrMask=aclProfileDstIpAddrMask, sshMacSuiteList=sshMacSuiteList, qosUserPriIndex=qosUserPriIndex, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, qosDiffServType21=qosDiffServType21, vlanTrunkTable=vlanTrunkTable, companyPPPoE=companyPPPoE, iPv4aacServerInfoTable=iPv4aacServerInfoTable, snmpTrapPortSecurity=snmpTrapPortSecurity, ipv4aclProfileType=ipv4aclProfileType, ftpFwUsername=ftpFwUsername, dhcpRelayVlanSettingsState=dhcpRelayVlanSettingsState, aclv6L3RuleTable=aclv6L3RuleTable, stpPortProtocolMigration=stpPortProtocolMigration, ipifV6AddressIpAddr=ipifV6AddressIpAddr, vlanTrunkIfIndex=vlanTrunkIfIndex, swTimeRangeFriday=swTimeRangeFriday, sysSNTPDSTEndDay=sysSNTPDSTEndDay, filterICMPv6RaAllNodeServerIpAddr=filterICMPv6RaAllNodeServerIpAddr, staticVlanBaseDisableAutoLearn=staticVlanBaseDisableAutoLearn, lldpXdot1LocalData=lldpXdot1LocalData, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, ipv4sysIpSubnetMask=ipv4sysIpSubnetMask, lldpXdot3RemLinkAggTable=lldpXdot3RemLinkAggTable, igsVlanProxyReportingSourceIP=igsVlanProxyReportingSourceIP, qosDefaultUserPriEntry=qosDefaultUserPriEntry, macBasedVlanEntry=macBasedVlanEntry, stpRootBridge=stpRootBridge, l2PTEntry=l2PTEntry, tftpCfgTargetImageFileName=tftpCfgTargetImageFileName, autoFdbIPAddress=autoFdbIPAddress, staticVlanBaseAutoLearnList4k=staticVlanBaseAutoLearnList4k, qosPriSetPortIndex=qosPriSetPortIndex, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, protocolGroupEntry=protocolGroupEntry, agentPORTutilizationEntry=agentPORTutilizationEntry, protocolVlanEntry=protocolVlanEntry, portSecFDBPermanentEntry=portSecFDBPermanentEntry, lldpXdot1RemVlanNameEntry=lldpXdot1RemVlanNameEntry, lldpXdot1LocPortVlanId=lldpXdot1LocPortVlanId, lldpXdot3LocPortAutoNegEnabled=lldpXdot3LocPortAutoNegEnabled, dhcpLocalRelaySettingsState=dhcpLocalRelaySettingsState, cableDiagPair2Status=cableDiagPair2Status, dhcpv6RelayInterface=dhcpv6RelayInterface, vlanMacType=vlanMacType, bandwidthCtrlIndex=bandwidthCtrlIndex, rmonStatsTable=rmonStatsTable, aclProfileDstIpAddrMaskType=aclProfileDstIpAddrMaskType, ddmStatusEntry=ddmStatusEntry, cpuFilterUdfRuleOffset5Mask=cpuFilterUdfRuleOffset5Mask, pppoePortEntry=pppoePortEntry, companyStaticMcast=companyStaticMcast, mstMstiBridgeTable=mstMstiBridgeTable, qosTOSType03=qosTOSType03, aclL3RuleTcpUdpSrcPortMask=aclL3RuleTcpUdpSrcPortMask, aacAuthenAdminState=aacAuthenAdminState, snmpV3GroupStatus=snmpV3GroupStatus, dhcpBOOTPRelayControl=dhcpBOOTPRelayControl, syslogSaveMinutes=syslogSaveMinutes, aacLoginMethod3=aacLoginMethod3, doSCtrlMirrorReplace1P=doSCtrlMirrorReplace1P, mldsVlanMulticastGroupPortList=mldsVlanMulticastGroupPortList, impbBindingListMacAddress=impbBindingListMacAddress, cosBandwidthCtrlSettings=cosBandwidthCtrlSettings, aacAPTelnetLoginMethod=aacAPTelnetLoginMethod, dhcpBOOTPRelayOption82State=dhcpBOOTPRelayOption82State, syslogServAddr=syslogServAddr, sysBPDUAttackCtrlIndex=sysBPDUAttackCtrlIndex, stpPortStatus=stpPortStatus, agentPORTutilizationTable=agentPORTutilizationTable, ipv4aclProfileArpSenderMacAddrMask=ipv4aclProfileArpSenderMacAddrMask, portSecFDBPermPort=portSecFDBPermPort, aclv6L3RuleSrcIpAddr=aclv6L3RuleSrcIpAddr, snmpV3GroupEntry=snmpV3GroupEntry, doSCtrlClearFrameCount=doSCtrlClearFrameCount, aclv6L3RuleReplace1P=aclv6L3RuleReplace1P, sysGratuitousARPIPIfStatusUp=sysGratuitousARPIPIfStatusUp, mstInstanceVlanMapped2k=mstInstanceVlanMapped2k, aclL3RuleTcpFinBit=aclL3RuleTcpFinBit, macNotifyState=macNotifyState, aacAccountingServiceCommandPoweruser=aacAccountingServiceCommandPoweruser, staticARPTable=staticARPTable, laPortControlIndex=laPortControlIndex, swAuthAuthDirection=swAuthAuthDirection, sysSNTPFirstInterfaceName=sysSNTPFirstInterfaceName, qosUserPriEntry=qosUserPriEntry, ddmActionPort=ddmActionPort, aclProfileNo=aclProfileNo, aclUdfOffsetBase3=aclUdfOffsetBase3, qosDiffServType45=qosDiffServType45, lldpXdot3LocMaxFrameSizeTable=lldpXdot3LocMaxFrameSizeTable, cpuFilterProfileOffset2Mask=cpuFilterProfileOffset2Mask, errorFrameThreshold=errorFrameThreshold, sshCipherSuiteList=sshCipherSuiteList, ipv4aclQosAssignClass=ipv4aclQosAssignClass, cosClassTable=cosClassTable, rmonAlarmStatus=rmonAlarmStatus, sfpWavelength=sfpWavelength, snmpTrapWebLoginout=snmpTrapWebLoginout, impbPortIndex=impbPortIndex, qosUserPriority=qosUserPriority, sysScheduleRebootStatus=sysScheduleRebootStatus, sshUserInfoID=sshUserInfoID, sysSNTPSecondType=sysSNTPSecondType, mstMstiInstanceIndex=mstMstiInstanceIndex, sysTrapIMPBViolation=sysTrapIMPBViolation, snmpTrapBPDUAttack=snmpTrapBPDUAttack, sshUserInfoTable=sshUserInfoTable, mstInstanceIndex=mstInstanceIndex, sysDhcpAutoImage=sysDhcpAutoImage, cpuFilterL3RuleAction=cpuFilterL3RuleAction, qosDiffServType41=qosDiffServType41, sysSNTPDSTEndMon=sysSNTPDSTEndMon, sysPortCtrlIndex=sysPortCtrlIndex, qinqSystem=qinqSystem, swAuthMode=swAuthMode, agentCPUutilization=agentCPUutilization, companyMiscGroup=companyMiscGroup, ftpConfigUsername=ftpConfigUsername, macNotifyPortStatus=macNotifyPortStatus, bandwidthEffecTxThreshold=bandwidthEffecTxThreshold, sysSNTPDSTRepeatStartMon=sysSNTPDSTRepeatStartMon, multicastVlanGroupStatus=multicastVlanGroupStatus, securityIcmpv6RaAllNode=securityIcmpv6RaAllNode, dhcpBOOTPRelayOption82RemoteIDType=dhcpBOOTPRelayOption82RemoteIDType, dlink_products=dlink_products, igsVlanRouterVlanId=igsVlanRouterVlanId, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, swAuthAuthTxPeriod=swAuthAuthTxPeriod, dlink_DES1210SeriesProd=dlink_DES1210SeriesProd, ipv4smtpState=ipv4smtpState, aacServerIPAddr=aacServerIPAddr, lldpXdot1ConfigPortVlanEntry=lldpXdot1ConfigPortVlanEntry, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, bandwidthCtrlTable=bandwidthCtrlTable, snmpV3User=snmpV3User, syslogSettingGroup=syslogSettingGroup, igmpMulticastVlanTable=igmpMulticastVlanTable, aclPacketAccessID=aclPacketAccessID, ddmBiasCurrent=ddmBiasCurrent, ftpConfigPort=ftpConfigPort, sysLBDCtrlIndex=sysLBDCtrlIndex, aclL2RuleReplaceQueue=aclL2RuleReplaceQueue, companyIpifGroup=companyIpifGroup, aacEnableMethod2=aacEnableMethod2, impbDhcpSnoopingPort=impbDhcpSnoopingPort, dlinklldpReinitDelay=dlinklldpReinitDelay, mstConfigurationIdentification=mstConfigurationIdentification, mstMstistpTopologyChangesCount=mstMstistpTopologyChangesCount, lldpXdot1LocTable=lldpXdot1LocTable, pppoePortRemoteIDVendor3String=pppoePortRemoteIDVendor3String, ipv4sysSNTPDSTStartHour=ipv4sysSNTPDSTStartHour, companyTftpGroup=companyTftpGroup, duldEntry=duldEntry, aclv6L3RuleFilterTimeRange=aclv6L3RuleFilterTimeRange, aclL3RuleProtocol=aclL3RuleProtocol, lldpXdot1ConfigProtocolTable=lldpXdot1ConfigProtocolTable, ipv4aclUdfOffsetBase4=ipv4aclUdfOffsetBase4, staticRouteEntry=staticRouteEntry, ipv4sysSNTPSecondServer=ipv4sysSNTPSecondServer, cpuFilterL3RuleProtocolMask=cpuFilterL3RuleProtocolMask, ipifSupportV4V6Info=ipifSupportV4V6Info, neighborMACAddr=neighborMACAddr, impbPortNDInspectionState=impbPortNDInspectionState, cosBandwidthEffectiveRX=cosBandwidthEffectiveRX, companyNeighbor=companyNeighbor, qosDiffServType26=qosDiffServType26, sysCommandLogging=sysCommandLogging, cableDiagEntry=cableDiagEntry, aclL3RuleICMPMessageType=aclL3RuleICMPMessageType, aclL3RuleStatus=aclL3RuleStatus, l2PTThresholdEntry=l2PTThresholdEntry, sysTrapIP=sysTrapIP, aclUdfOffsetMask3=aclUdfOffsetMask3, swTimeRangeStartMonth=swTimeRangeStartMonth, lldpXdot1ConfigPortVlanTxEnable=lldpXdot1ConfigPortVlanTxEnable, qosDiffServType12=qosDiffServType12, trafficCtrlAutoRecoverTime=trafficCtrlAutoRecoverTime, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, aclv6L3RuleReplaceQueue=aclv6L3RuleReplaceQueue, igsDataDrivenLearningMaxLearnedEntryVlaue=igsDataDrivenLearningMaxLearnedEntryVlaue, ipv4syslogServUDPport=ipv4syslogServUDPport, sysPortDescriptionTable=sysPortDescriptionTable, sysLBDVlanLoopTable=sysLBDVlanLoopTable, snmpV3CommunityStatus=snmpV3CommunityStatus, aclL3RulePortList=aclL3RulePortList, impbAutoScanIpAddressTo=impbAutoScanIpAddressTo, swAuthAuthConfigPortControl=swAuthAuthConfigPortControl, dhcpv6RelayOpt38Entry=dhcpv6RelayOpt38Entry, aacAccountingMethod1=aacAccountingMethod1, snmpTrapGratuitousArp=snmpTrapGratuitousArp, dhcpBOOTPRelayServerIP=dhcpBOOTPRelayServerIP, aclProfileSrcIpAddrMask=aclProfileSrcIpAddrMask)
mibBuilder.exportSymbols("DES-1210-26MEbx", securityIpMacPortBinding=securityIpMacPortBinding, rmonAlarmOwner=rmonAlarmOwner, qosDiffServType54=qosDiffServType54, aclProfileIPProtocolMask=aclProfileIPProtocolMask, protocolGroupNameTable=protocolGroupNameTable, dhcpRelayVlanSettingsVLANID=dhcpRelayVlanSettingsVLANID, ipv4syslogServerGroup=ipv4syslogServerGroup, Timeout=Timeout, mstCistVlanMapped=mstCistVlanMapped, staticAutoLearningList=staticAutoLearningList, ddmTxPower=ddmTxPower, traps=traps, sysPortMediaTypeIndex=sysPortMediaTypeIndex, qosTOSType07=qosTOSType07, aacAccountingServiceCommandAdministrator=aacAccountingServiceCommandAdministrator, pppoeGlobalState=pppoeGlobalState, aclQosMACAddr=aclQosMACAddr, sysSNTPDSTRepeatStartWeekDay=sysSNTPDSTRepeatStartWeekDay, impbBindingListIpAddress=impbBindingListIpAddress, gvrpSettingsEntry=gvrpSettingsEntry, companyMulticastFilter=companyMulticastFilter, sysPortCtrlEntry=sysPortCtrlEntry, protocolGroupProtocolValue=protocolGroupProtocolValue, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, macNotifyInfo=macNotifyInfo, lldpXdot1ConfigProtoVlanTable=lldpXdot1ConfigProtoVlanTable, aclL2RuleReplace1P=aclL2RuleReplace1P, mldsDataDrivenLearningMaxLearnedEntryVlaue=mldsDataDrivenLearningMaxLearnedEntryVlaue, lldpXdot1RemVlanName=lldpXdot1RemVlanName, aclUdfOffsetMask2=aclUdfOffsetMask2, lldpXdot1LocVlanName=lldpXdot1LocVlanName, ipv4aclProfileNo=ipv4aclProfileNo, filterDHCPServerVlanList=filterDHCPServerVlanList, sshUserInfoHostName=sshUserInfoHostName, mldsReportToAllPort=mldsReportToAllPort, ipv4sysSNTPDSTEndMon=ipv4sysSNTPDSTEndMon, sfpDateCode=sfpDateCode, sysHardwareVersion=sysHardwareVersion, cpuFilterL3RuleTcpAckBit=cpuFilterL3RuleTcpAckBit, vlanMacMapLearningRowStatus=vlanMacMapLearningRowStatus, snmpV3GroupName=snmpV3GroupName, lldpXdot1LocProtocolId=lldpXdot1LocProtocolId, aacAccountingServiceCommand=aacAccountingServiceCommand, syslogSaveMode=syslogSaveMode, igmpMulticastVlanReplaceCVID=igmpMulticastVlanReplaceCVID, l2PTProtocolIndex=l2PTProtocolIndex, sysPortDescriptionEntry=sysPortDescriptionEntry, aclL3RuleAccessID=aclL3RuleAccessID, aclPacketRuleReplaceDSCP=aclPacketRuleReplaceDSCP, dhcpOption12HostName=dhcpOption12HostName, sslCipherSuiteList=sslCipherSuiteList, aclProfileSrcPortMask=aclProfileSrcPortMask, swTimeRangeSunday=swTimeRangeSunday, sysTrapLBD=sysTrapLBD, lldpXdot3LocPortEntry=lldpXdot3LocPortEntry, limitIpMulticastEntry=limitIpMulticastEntry, snmpV3UserGroupName=snmpV3UserGroupName, qosUserPriClass=qosUserPriClass, ipv4aclQosIPAddr=ipv4aclQosIPAddr, mldsVlanMulticastGroupIpAddress=mldsVlanMulticastGroupIpAddress, mstInstanceVlanMapped3k=mstInstanceVlanMapped3k, staticARPMac=staticARPMac, sysPortDescString=sysPortDescString, aclv6L3RuleRateLimit=aclv6L3RuleRateLimit, companyCableDiagnostic=companyCableDiagnostic, pppoePortRemoteIDType=pppoePortRemoteIDType, sysWebPortNumber=sysWebPortNumber, iPv4aacServerInfoEntry=iPv4aacServerInfoEntry, swAuthRadiusServerKey=swAuthRadiusServerKey, lldpPortConfigEntry=lldpPortConfigEntry, snmpV3TrapLinkUpDown=snmpV3TrapLinkUpDown, aacAPConsoleLoginMethod=aacAPConsoleLoginMethod, mstMstiPortPriority=mstMstiPortPriority, syslogServFacility=syslogServFacility, qosEffectiveDefaultPriority=qosEffectiveDefaultPriority, qosTOSType05=qosTOSType05, duldSystem=duldSystem, eoamMode=eoamMode, ipv4snmpV3HostTable=ipv4snmpV3HostTable, multicastVlanRemapPriority=multicastVlanRemapPriority, stpAdminPortPathCost=stpAdminPortPathCost, cpuFilterL2RuleTable=cpuFilterL2RuleTable, impbAutoScanStatus=impbAutoScanStatus, rmonAlarm=rmonAlarm, sysTrapStatus=sysTrapStatus, swTimeRangeSettingTable=swTimeRangeSettingTable, cpuFilterL2RuleEtherType=cpuFilterL2RuleEtherType, trustedHostEntry=trustedHostEntry, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, snmpV3TrapLoginout=snmpV3TrapLoginout, iPv4swAuthRadiusServerIndex=iPv4swAuthRadiusServerIndex, aclUdfOffsetByte1=aclUdfOffsetByte1, mldsStatus=mldsStatus, l2PTPortType=l2PTPortType, cpuFilterUdfRuleOffset4Mask=cpuFilterUdfRuleOffset4Mask, qosDiffServType31=qosDiffServType31, impbPortDHCPv6SetVlanList=impbPortDHCPv6SetVlanList, iPv4swAuthRadiusServerStatus=iPv4swAuthRadiusServerStatus, dhcpv6RelayOpt38PortIndex=dhcpv6RelayOpt38PortIndex, aclv6L3RuleTrafficClass=aclv6L3RuleTrafficClass, vlanMacMapAddrMask=vlanMacMapAddrMask, qosDiffServType19=qosDiffServType19, cpuFilterProfileDstPortMask=cpuFilterProfileDstPortMask, ipv4aclProfileStatus=ipv4aclProfileStatus, companyStaticMAC=companyStaticMAC, impbDhcpSnoopingTableClearIPType=impbDhcpSnoopingTableClearIPType, ipv4sysIprouteGateway=ipv4sysIprouteGateway, tftpFwImageFileName=tftpFwImageFileName, qosDiffServType30=qosDiffServType30, cpuFilterUdfRulePortList=cpuFilterUdfRulePortList, snmpV3UserEntry=snmpV3UserEntry, swTimeRangeEndHour=swTimeRangeEndHour, impbBindingListEntry=impbBindingListEntry, sysPortErrEntry=sysPortErrEntry, macBasedVlanLearningTable=macBasedVlanLearningTable, cpuFilterProfileSrcPortMask=cpuFilterProfileSrcPortMask, laPortChannelMode=laPortChannelMode, igmpMulticastVlanGroupFromIp=igmpMulticastVlanGroupFromIp, swTimeRangeStartHour=swTimeRangeStartHour, qosDiffServType39=qosDiffServType39, igmpMulticastVlanStatus=igmpMulticastVlanStatus, staticMcastVlanID=staticMcastVlanID, aclFlowMeterEntry=aclFlowMeterEntry, aclv6L3RuleReplaceVLAN=aclv6L3RuleReplaceVLAN, doSCtrlFrameCount=doSCtrlFrameCount, sysBootupConfigID=sysBootupConfigID, qosDiffServType35=qosDiffServType35, rmonAlarmEntry=rmonAlarmEntry, agentPORTutilizationPortTX5sec=agentPORTutilizationPortTX5sec, swAuthStatus=swAuthStatus, neighborType=neighborType, ftpFwTable=ftpFwTable, snmpV3TrapWarmStart=snmpV3TrapWarmStart, aclPacketRuleSrcMac=aclPacketRuleSrcMac, agentMEMutilizationIn5sec=agentMEMutilizationIn5sec, aclL3RuleTcpAckBit=aclL3RuleTcpAckBit, aclProfileUdfOffsetMap=aclProfileUdfOffsetMap, agentPORTutilizationPortUtil5min=agentPORTutilizationPortUtil5min, cpuFilterv6L3RuleICMPMessageCode=cpuFilterv6L3RuleICMPMessageCode, mstMstiPortPathCost=mstMstiPortPathCost, aclPacketRuleFilterTimeRange=aclPacketRuleFilterTimeRange, stpPortPriority=stpPortPriority, lldpXdot1LocProtocolTable=lldpXdot1LocProtocolTable, ddmActionShutdown=ddmActionShutdown, ipv4aclUdfOffsetMask2=ipv4aclUdfOffsetMask2, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, qosDefaultUserPriPortIndex=qosDefaultUserPriPortIndex, igsHostTablePort=igsHostTablePort, mldsHostTablePort=mldsHostTablePort, rmonStatsOwner=rmonStatsOwner, stpPortFowardBPDU=stpPortFowardBPDU, dhcpv6RelayInterfaceSettingsRowStatus=dhcpv6RelayInterfaceSettingsRowStatus, ddmActionState=ddmActionState, aclv6L3RuleTcpUdpDstPortMask=aclv6L3RuleTcpUdpDstPortMask, ddmHighAlarm=ddmHighAlarm, trustedHostStatus=trustedHostStatus, sysGratuitousARPSettings=sysGratuitousARPSettings, companyBPDUAttack=companyBPDUAttack, companyLimitIp=companyLimitIp, qosPriSetPortType=qosPriSetPortType, aclPacketRuleDstMac=aclPacketRuleDstMac, cpuFilterL3RuleProtocol=cpuFilterL3RuleProtocol, cosBandwidthCtrlPortIndex=cosBandwidthCtrlPortIndex, limitIpMulticastEntryIPType=limitIpMulticastEntryIPType, iPv4aacServerAuthProtocol=iPv4aacServerAuthProtocol, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, swAuthRadiusServerInterfaceName=swAuthRadiusServerInterfaceName, swAuthUser=swAuthUser, swAuthPortAccessCtrl=swAuthPortAccessCtrl, lldpXdot3LocLinkAggTable=lldpXdot3LocLinkAggTable, mldsVlanRouterEntry=mldsVlanRouterEntry, sysPortCtrlSpeed=sysPortCtrlSpeed, impbDhcpSnoopingremainingTime=impbDhcpSnoopingremainingTime, dhcpv6RelayOption37RemoteID=dhcpv6RelayOption37RemoteID, mldsVlanRouterPortList=mldsVlanRouterPortList, cpuFilterv6L3RuleTcpPshBit=cpuFilterv6L3RuleTcpPshBit, rmonEventCommunity=rmonEventCommunity, aacServerGroupEntry=aacServerGroupEntry, impbPortDHCPv6VlanList3k=impbPortDHCPv6VlanList3k, iPv4swAuthRadiusServerTimeout=iPv4swAuthRadiusServerTimeout, stpModuleStatus=stpModuleStatus, cpuFilterUdfRuleOffset4=cpuFilterUdfRuleOffset4, sysSNTPDSTEndHour=sysSNTPDSTEndHour, tftpFwTargetGroup=tftpFwTargetGroup, mldsVlanRtrPortList=mldsVlanRtrPortList, ipifVLANname=ipifVLANname, vlanMacLearningStatus=vlanMacLearningStatus, qosDiffServType04=qosDiffServType04, aclL3RuleTcpUdpDstPort=aclL3RuleTcpUdpDstPort, staticRouteV6RowStatus=staticRouteV6RowStatus, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, l2PTDropThreshold=l2PTDropThreshold, dhcpv6RelayEnablePortlist=dhcpv6RelayEnablePortlist, dot1qVlanTable=dot1qVlanTable, dhcpLocalRelayTableEntry=dhcpLocalRelayTableEntry, companyQoSGroup=companyQoSGroup, sysPortType=sysPortType, igsHostTableVLANID=igsHostTableVLANID, snmpV3TrapLBD=snmpV3TrapLBD, qosDiffServType61=qosDiffServType61, sysSMTPServerGroup=sysSMTPServerGroup, aacEnableMethodListEntry=aacEnableMethodListEntry, sysSNTPDSTRepeatEndMin=sysSNTPDSTRepeatEndMin, doSCtrlState=doSCtrlState, eoamCriticalEventEnable=eoamCriticalEventEnable, igsVlanQueryMaxResponseTime=igsVlanQueryMaxResponseTime, mldsHostTableHostIPAddress=mldsHostTableHostIPAddress, ipv4aclUdfSrcMacMask=ipv4aclUdfSrcMacMask, snmpV3TrapICMPv6RaAllNodeFilter=snmpV3TrapICMPv6RaAllNodeFilter, cpuFilterL3RuleIgmpType=cpuFilterL3RuleIgmpType, cableDiagStatus=cableDiagStatus, swTimeRangeEndYear=swTimeRangeEndYear, syslogServInterfaceName=syslogServInterfaceName, aacLoginMethodListTable=aacLoginMethodListTable, sysSNTPDSTRepeatEndWeek=sysSNTPDSTRepeatEndWeek, qosDiffServType40=qosDiffServType40, lldpXdot1RemProtoVlanEntry=lldpXdot1RemProtoVlanEntry, companySecurity=companySecurity, igsVlanRouterTable=igsVlanRouterTable, qosTOSType02=qosTOSType02, laPortChannelActiveMemberPorts=laPortChannelActiveMemberPorts, sysSNTPServerTable=sysSNTPServerTable, cpuFilterProfileNo=cpuFilterProfileNo, mldsVlanMulticastGroupVlanId=mldsVlanMulticastGroupVlanId, syslogServSrvRowStatus=syslogServSrvRowStatus, impbPortState=impbPortState, sysARPAgingTime=sysARPAgingTime, sysLocationName=sysLocationName, snmpV3viewTreeName=snmpV3viewTreeName, laPortControlEntry=laPortControlEntry, aclQosIndex=aclQosIndex, l2PTCCMacAddress=l2PTCCMacAddress, portSecFDBPermanentTable=portSecFDBPermanentTable, lldpXdot3LocPowerPairs=lldpXdot3LocPowerPairs, limitIpMulticastPortState=limitIpMulticastPortState, qosTOSType01=qosTOSType01, trustedHostIPType=trustedHostIPType, cpuFilterProfileSrcIpAddrMask=cpuFilterProfileSrcIpAddrMask, swAuthRadiusServerAuthenticationPort=swAuthRadiusServerAuthenticationPort, stpBridgePriority=stpBridgePriority, dhcpv6RelayOption18State=dhcpv6RelayOption18State, mldsVlanCfgQuerier=mldsVlanCfgQuerier, aclv6L3RuleTcpUdpSrcPortMask=aclv6L3RuleTcpUdpSrcPortMask, syslogServSrvStatus=syslogServSrvStatus, ipv4smtpRecvMailAddr=ipv4smtpRecvMailAddr, aclQosStatus=aclQosStatus, mldsHostEntry=mldsHostEntry, staticMcastTable=staticMcastTable, sysPortErrPortReason=sysPortErrPortReason, qosDiffServType02=qosDiffServType02, mldsHostTableGroupAddress=mldsHostTableGroupAddress, lldpXdot3RemPortOperMauType=lldpXdot3RemPortOperMauType, ipv4aclProfileIPProtocolMask=ipv4aclProfileIPProtocolMask, ipv4aclQosTable=ipv4aclQosTable)
mibBuilder.exportSymbols("DES-1210-26MEbx", aclUdfOffsetMask4=aclUdfOffsetMask4, ddmInfo=ddmInfo, cpuFilterProfileIPProtocolMask=cpuFilterProfileIPProtocolMask, ddmPowerUnit=ddmPowerUnit, snmpTrapLoginout=snmpTrapLoginout, sysPortCtrlFlowControl=sysPortCtrlFlowControl, ipv4aclQosIndex=ipv4aclQosIndex, igsVlanReportSuppression=igsVlanReportSuppression, qosDiffServType48=qosDiffServType48, stpTxHoldCount=stpTxHoldCount, aclPacketRuleOffsetValue4Mask=aclPacketRuleOffsetValue4Mask, mldsVlanQuerier=mldsVlanQuerier, aclv6L3RuleProtocol=aclv6L3RuleProtocol, lldpXdot3LocMaxFrameSizeEntry=lldpXdot3LocMaxFrameSizeEntry, qosDiffServType24=qosDiffServType24, ddmThresholdType=ddmThresholdType, ftpConfigTable=ftpConfigTable, snmpV3HostEntry=snmpV3HostEntry, duldDiscoveryTime=duldDiscoveryTime, snmpV3TrapDHCPv6ServerScreening=snmpV3TrapDHCPv6ServerScreening, igsVlanProxyReportingStatus=igsVlanProxyReportingStatus, ipv4aclProfileSrcPortMask=ipv4aclProfileSrcPortMask, ftpConfigConfigID=ftpConfigConfigID, companyStaticARP=companyStaticARP, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, errorFramePeriodWindow=errorFramePeriodWindow, cpuFilterv6L3RuleStatus=cpuFilterv6L3RuleStatus, dlinklldpTxDelay=dlinklldpTxDelay, lldpXdot3LocLinkAggEntry=lldpXdot3LocLinkAggEntry, lldpXdot3LocLinkAggStatus=lldpXdot3LocLinkAggStatus, rmonAlarmIndex=rmonAlarmIndex, companyMacBasedVlan=companyMacBasedVlan, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, tftpCfgTargetServerIpType=tftpCfgTargetServerIpType, igsVlanRobustnessValue=igsVlanRobustnessValue, rmonGlobalState=rmonGlobalState, mstMstistpLastTopologyChange=mstMstistpLastTopologyChange, multicastVlanMemberPort=multicastVlanMemberPort, sysSNTPDSTStartMin=sysSNTPDSTStartMin, mldsVlanQueryMaxResponseTime=mldsVlanQueryMaxResponseTime, sysSNTPDSTOffset=sysSNTPDSTOffset, cpuFilterv6L3RuleProtocolMask=cpuFilterv6L3RuleProtocolMask, iPv4swAuthRadiusServerKey=iPv4swAuthRadiusServerKey, stpBridgeHelloTime=stpBridgeHelloTime, cableDiagTable=cableDiagTable, rmonStatsStatus=rmonStatsStatus, igsVlanGrpQueryInterval=igsVlanGrpQueryInterval, cpuFilterL3RuleSrcIpAddrMask=cpuFilterL3RuleSrcIpAddrMask, sfpVendorSn=sfpVendorSn, impbBindingListRowStatus=impbBindingListRowStatus, dhcpBOOTPRelayInterfaceSettingsEntry=dhcpBOOTPRelayInterfaceSettingsEntry, dhcpOption12Status=dhcpOption12Status, ipv4sysIpAddr=ipv4sysIpAddr, qosDiffServType46=qosDiffServType46, aclL3RuleEntry=aclL3RuleEntry, limitIpMulticastPortMaxGrp=limitIpMulticastPortMaxGrp, sysPortMediaTypeEntry=sysPortMediaTypeEntry, dot1qVlanName=dot1qVlanName, dhcpBOOTPRelayOption82CheckState=dhcpBOOTPRelayOption82CheckState, stpMaxAge=stpMaxAge, ipv4aclProfileRuleCount=ipv4aclProfileRuleCount, cpuFilterv6L3RuleSrcIpAddrMask=cpuFilterv6L3RuleSrcIpAddrMask, cpuFilterL2RuleSrcMacAddrMask=cpuFilterL2RuleSrcMacAddrMask, companyGVRPGroup=companyGVRPGroup, protocolGroupGID=protocolGroupGID, sysScheduleRebootTimeType=sysScheduleRebootTimeType, aclProfileArpSenderMacAddrMask=aclProfileArpSenderMacAddrMask, stpForwardDelay=stpForwardDelay, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, aclProfileSrcIpAddrMaskType=aclProfileSrcIpAddrMaskType, sfpPortIndex=sfpPortIndex, lldpXdot3RemPowerMDIEnabled=lldpXdot3RemPowerMDIEnabled, rmonAlarmVariable=rmonAlarmVariable, gvrpSettingsPVID=gvrpSettingsPVID, sysTrapPortSecurity=sysTrapPortSecurity, mstMstiPortTable=mstMstiPortTable, mldsSystem=mldsSystem, eoamDyingGaspEnable=eoamDyingGaspEnable, qosDiffServType15=qosDiffServType15, trafficCtrlIndex=trafficCtrlIndex, multicastVlanGroupTable=multicastVlanGroupTable, l2PTThresholdTable=l2PTThresholdTable, mstCiststpTopologyChangesCount=mstCiststpTopologyChangesCount, companyTrafficMgmt=companyTrafficMgmt, cpuFilterv6L3RuleProtocol=cpuFilterv6L3RuleProtocol, igsVlanCfgQuerier=igsVlanCfgQuerier, lldpXdot3LocPowerClass=lldpXdot3LocPowerClass, laPortChannelEntry=laPortChannelEntry, qosDiffServTypeGroup=qosDiffServTypeGroup, ddmLowAlarm=ddmLowAlarm, dhcpLocalRelaySettingsVLANID=dhcpLocalRelaySettingsVLANID, multicastVlanGroupIpType=multicastVlanGroupIpType, tftpFwServerIpAddress=tftpFwServerIpAddress, agentMEMutilizationIn1min=agentMEMutilizationIn1min, floodfdbOnOff=floodfdbOnOff, ipifv6DefaultGateway=ipifv6DefaultGateway, tftpFwTftpOperationStatus=tftpFwTftpOperationStatus, ipv4smtpSelfMailAddr=ipv4smtpSelfMailAddr, lldpXdot1LocProtocolEntry=lldpXdot1LocProtocolEntry, iPv4aacServerRetryCount=iPv4aacServerRetryCount, ipv4aclProfileTable=ipv4aclProfileTable, stpBridgeMaxAge=stpBridgeMaxAge, ipv4aclQosProtocol=ipv4aclQosProtocol, staticRouteIpAddr=staticRouteIpAddr, cpuFilterv6L3RuleTcpSynBit=cpuFilterv6L3RuleTcpSynBit, ftpFwPassword=ftpFwPassword, cpuFilterProfileTable=cpuFilterProfileTable, snmpV3CommunityName=snmpV3CommunityName, l2PTCDMacAddress=l2PTCDMacAddress, ipifV6AddressEntry=ipifV6AddressEntry, impbPortDHCPMaxEntryIPv4=impbPortDHCPMaxEntryIPv4, qosDiffServType20=qosDiffServType20, qinqVLANTranslationState=qinqVLANTranslationState, swAuthUserStatus=swAuthUserStatus, ipv4aclUdfOffsetMask1=ipv4aclUdfOffsetMask1, aclPacketRuleReplaceVLAN=aclPacketRuleReplaceVLAN, staticRouteActiveStatus=staticRouteActiveStatus, sfpVendorInfoTable=sfpVendorInfoTable, swTimeRangeEndDay=swTimeRangeEndDay, sysSNTPDSTRepeatStartHour=sysSNTPDSTRepeatStartHour, rmonAlarmSampleType=rmonAlarmSampleType, sysPortMediaTypePn=sysPortMediaTypePn, aacServerRowStatus=aacServerRowStatus, impbAutoScanPort=impbAutoScanPort, ipv4aclUdfOffsetMask3=ipv4aclUdfOffsetMask3, snmpV3UserVersion=snmpV3UserVersion, sysPortCtrlMediumType=sysPortCtrlMediumType, aclUdfDstMacMask=aclUdfDstMacMask, lldpXdot1LocProtoVlanTable=lldpXdot1LocProtoVlanTable, sysBPDUAttackRecoverTime=sysBPDUAttackRecoverTime, igmpMulticastVlanGroupTable=igmpMulticastVlanGroupTable, limitIpMulticastPortEntry=limitIpMulticastPortEntry, sysPortErrPortStatus=sysPortErrPortStatus, doSCtrlMirrorPort=doSCtrlMirrorPort, aclv6L3RuleSrcIpAddrMask=aclv6L3RuleSrcIpAddrMask, dot1qVlanForbiddenPorts=dot1qVlanForbiddenPorts, lldpXdot3RemMaxFrameSizeEntry=lldpXdot3RemMaxFrameSizeEntry, iPv4aacServerTimeout=iPv4aacServerTimeout, securityPortSecurity=securityPortSecurity, gvrpSettingsPortControlIndex=gvrpSettingsPortControlIndex, dhcpv6RelayServerIP=dhcpv6RelayServerIP, syslogServUDPport=syslogServUDPport, qinqVLANTranslation=qinqVLANTranslation, l2PTGvrpMacAddress=l2PTGvrpMacAddress, dhcpBOOTPRelayState=dhcpBOOTPRelayState, aclFlowMeterStatus=aclFlowMeterStatus, rmonHistoryEntry=rmonHistoryEntry, companySystem=companySystem, ipv4aclQosType=ipv4aclQosType, qosDiffServType11=qosDiffServType11, iPv4aacServerIPAddr=iPv4aacServerIPAddr, ftpFwImageFileName=ftpFwImageFileName, qosDiffServType56=qosDiffServType56, cpuFilterL3RuleEntry=cpuFilterL3RuleEntry, ipifV6AddressRowStatus=ipifV6AddressRowStatus, autoFdbTimeStamp=autoFdbTimeStamp, aclPacketRuleReplaceQueue=aclPacketRuleReplaceQueue, cpuFilterv6L3RuleTcpUdpSrcPort=cpuFilterv6L3RuleTcpUdpSrcPort, aacAccountingMethodListIndex=aacAccountingMethodListIndex, filterDHCPv6ServerEntry=filterDHCPv6ServerEntry, lldpXdot1RemProtoVlanId=lldpXdot1RemProtoVlanId, dot1qVlanEgressPorts=dot1qVlanEgressPorts, igmpMulticastVlanGroupEntry=igmpMulticastVlanGroupEntry, impbBlockListStatus=impbBlockListStatus, snmpV3HostTable=snmpV3HostTable, sysGratuitousARPGlobalSettings=sysGratuitousARPGlobalSettings, l2PTIsisMacAddress=l2PTIsisMacAddress, companyDHCPv6Relay=companyDHCPv6Relay, mstInstanceVlanMapped4k=mstInstanceVlanMapped4k, stpInstance=stpInstance, igsVlanDataDrivenLearningAgeOutStatus=igsVlanDataDrivenLearningAgeOutStatus, staticPort=staticPort, ipv4trustedHostIpAddr=ipv4trustedHostIpAddr, sysMACAgingTime=sysMACAgingTime, ipv4trustedHostIpMask=ipv4trustedHostIpMask, aclL3RuleReplaceVLAN=aclL3RuleReplaceVLAN, sysDhcpAutoConfigTimeout=sysDhcpAutoConfigTimeout, impbBindingtraplog=impbBindingtraplog, companySyslog=companySyslog, lldpXdot3LocPortAutoNegAdvertisedCap=lldpXdot3LocPortAutoNegAdvertisedCap, cpuFilterv6L3RuleTcpRstBit=cpuFilterv6L3RuleTcpRstBit, snmpV3Host=snmpV3Host, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, aclPacketRuleSTagMask=aclPacketRuleSTagMask, ddmCtrl=ddmCtrl, dhcpv6RelayOpt38PortID=dhcpv6RelayOpt38PortID, mstDeleteInstanceStatus=mstDeleteInstanceStatus, rmonEventDescription=rmonEventDescription, cpuFilterUdfRuleOffset1=cpuFilterUdfRuleOffset1, staticRouteV6Entry=staticRouteV6Entry, cosScheduleMechanism=cosScheduleMechanism, aclUdfOffsetBase2=aclUdfOffsetBase2, lldpXdot1LocProtoVlanId=lldpXdot1LocProtoVlanId, ipifv6NSRetransmitTime=ipifv6NSRetransmitTime, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, stpBridgeGlobal=stpBridgeGlobal, mstSetVlanList=mstSetVlanList, portSecMLA=portSecMLA, impbPortDHCPv4SetVlanList=impbPortDHCPv4SetVlanList, aclL2RuleStatus=aclL2RuleStatus, eoamSystem=eoamSystem, igmpMulticastVlanGroupToIp=igmpMulticastVlanGroupToIp, snmpTrapLBD=snmpTrapLBD, aacServerIndex=aacServerIndex, snmpV3Group=snmpV3Group, iPv4aacServerAuthPort=iPv4aacServerAuthPort, swTimeRangeName=swTimeRangeName, aclL3RuleTcpUrgBit=aclL3RuleTcpUrgBit, aacAccountingMethodListTable=aacAccountingMethodListTable, mstMstiForcePortState=mstMstiForcePortState, swAuthAuthQuietPeriod=swAuthAuthQuietPeriod, ipv4syslogServEntry=ipv4syslogServEntry, snmpV3IPType=snmpV3IPType, ipv4aclProfileDstPortMask=ipv4aclProfileDstPortMask, neighborTable=neighborTable, aclFlowMeterProfileID=aclFlowMeterProfileID, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, macNotifyInfoDiscription=macNotifyInfoDiscription, ipv4aclUdfOffsetMask4=ipv4aclUdfOffsetMask4, lldpXdot3Objects=lldpXdot3Objects, lldpXdot3RemPowerPairs=lldpXdot3RemPowerPairs, trafficSegEntry=trafficSegEntry, sysGroupInterval=sysGroupInterval, mstInstanceVlanMapped=mstInstanceVlanMapped, cableDiagPair1Length=cableDiagPair1Length, staticMcastEntry=staticMcastEntry, statisticsClear=statisticsClear, lldpXdot1ConfigProtocolEntry=lldpXdot1ConfigProtocolEntry, cableDiagPair3Status=cableDiagPair3Status, swTimeRangeRowStatus=swTimeRangeRowStatus, staticRouteV6Protocol=staticRouteV6Protocol, aacAccountingMethodListName=aacAccountingMethodListName, sysBPDUAttackStateEnable=sysBPDUAttackStateEnable, tftpFwTargetServerIpType=tftpFwTargetServerIpType, swAuthRadiusServerIndex=swAuthRadiusServerIndex, dhcpRelayVlanTable=dhcpRelayVlanTable, bandwidthCtrlEntry=bandwidthCtrlEntry, mldsHost=mldsHost, aclQosVlanID=aclQosVlanID, pppoePortUDFString=pppoePortUDFString, snmpV3CommunityEncryption=snmpV3CommunityEncryption, sshConnectionTimeout=sshConnectionTimeout, telnetUDPPort=telnetUDPPort, vlanMacMapRowStatus=vlanMacMapRowStatus, cpuFilterUdfRuleOffset3=cpuFilterUdfRuleOffset3, snmpTrapIMPBv2=snmpTrapIMPBv2, vlanMacStatus=vlanMacStatus, qosTOSGroup=qosTOSGroup, eoamState=eoamState, smtpRecvMailAddr=smtpRecvMailAddr, swAuthAuthMaxReq=swAuthAuthMaxReq, cosBandwidthValue=cosBandwidthValue, laAlgorithm=laAlgorithm, dot1qVlanId=dot1qVlanId)
mibBuilder.exportSymbols("DES-1210-26MEbx", aacEnableMethodListRowStatus=aacEnableMethodListRowStatus, authProtocol=authProtocol, companyswLedPanel=companyswLedPanel, igsHostTableGroupAddress=igsHostTableGroupAddress, swAuthRadiusIPType=swAuthRadiusIPType, duldLinkStatus=duldLinkStatus, cpuFilterv6L3RuleAccessID=cpuFilterv6L3RuleAccessID, igsVlanDataDrivenLearningStatus=igsVlanDataDrivenLearningStatus, impbPortForwardDHCPPktState=impbPortForwardDHCPPktState, aclL2RuleEtherType=aclL2RuleEtherType, mstMstiPort=mstMstiPort, limitIpMulticastEntryTable=limitIpMulticastEntryTable, syslogEnable=syslogEnable, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, sysPortLinkChangeTime=sysPortLinkChangeTime, iPv4swAuthRadiusServerAuthenticationPort=iPv4swAuthRadiusServerAuthenticationPort, aclL2Rule1pPriority=aclL2Rule1pPriority, sysPortMediaTypeRev=sysPortMediaTypeRev, lldpXdot1RemProtocolIndex=lldpXdot1RemProtocolIndex, cpuFilterL3RuleICMPMessageCode=cpuFilterL3RuleICMPMessageCode, cpuFilterProfile=cpuFilterProfile, rmonEvent=rmonEvent, mstMstiBridgeEntry=mstMstiBridgeEntry, filterDHCPServerIpAddr=filterDHCPServerIpAddr, cpuFilterProfileOffset4Mask=cpuFilterProfileOffset4Mask, igsVlanQuerier=igsVlanQuerier, qosDiffServType00=qosDiffServType00, smtpRecvMailAddrIndex=smtpRecvMailAddrIndex, portSecTable=portSecTable, trustedHostTable=trustedHostTable, cpuFilterL3Rule=cpuFilterL3Rule, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, smtpServerAddrInterfaceName=smtpServerAddrInterfaceName, swAuthRadiusServerTimeout=swAuthRadiusServerTimeout, smtpRecvMailAddrTable=smtpRecvMailAddrTable, lldpXdot1LocProtoVlanEnabled=lldpXdot1LocProtoVlanEnabled, aclv6L3RuleDstIpAddrMask=aclv6L3RuleDstIpAddrMask, aclFlowMeterRate=aclFlowMeterRate, dhcpv6RelayOption37CheckState=dhcpv6RelayOption37CheckState, lldpXdot3PortConfigEntry=lldpXdot3PortConfigEntry, aclProfileType=aclProfileType, companyMacNotify=companyMacNotify, igmpMulticastVlanSourcePort=igmpMulticastVlanSourcePort, igsVlanQueryInterval=igsVlanQueryInterval, stpPortState=stpPortState, iPv4swAuthRadiusServerRetransmit=iPv4swAuthRadiusServerRetransmit, lldpXdot3RemPowerMDISupported=lldpXdot3RemPowerMDISupported, multicastVlanTagMemberPort=multicastVlanTagMemberPort, snmpV3viewTreeMask=snmpV3viewTreeMask, ipv4snmpV3HostEntry=ipv4snmpV3HostEntry, lldpXdot3RemPowerPairControlable=lldpXdot3RemPowerPairControlable, portSecFDBPermIndex=portSecFDBPermIndex, snmpGlobalState=snmpGlobalState, companyDuld=companyDuld, trafficCtrlThreshold=trafficCtrlThreshold, sysJumboFrameEnable=sysJumboFrameEnable, igmpMulticastVlanSrcPortDymLearn=igmpMulticastVlanSrcPortDymLearn, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, qosDiffServType63=qosDiffServType63, ipv4aclUdfDstMacMask=ipv4aclUdfDstMacMask, syslogServTable=syslogServTable, aclL3RuleTcpRstBit=aclL3RuleTcpRstBit, ipv4sysSNTPDSTStartMon=ipv4sysSNTPDSTStartMon, mldsVlanMulticastGroupEntry=mldsVlanMulticastGroupEntry, staticVlanBaseAutoLearnList1k=staticVlanBaseAutoLearnList1k, aclPacketRule=aclPacketRule, cpuFilterProfileDstIpAddrMask=cpuFilterProfileDstIpAddrMask, swLedInfoTable=swLedInfoTable, cpuFilterL3RuleSrcIpAddr=cpuFilterL3RuleSrcIpAddr, snmpTrapCopperLinkUpDown=snmpTrapCopperLinkUpDown, igsVlanFbdRtrPortList=igsVlanFbdRtrPortList, ipv4aclUdfOffsetByte4=ipv4aclUdfOffsetByte4, qosDiffServType08=qosDiffServType08, aclPacketRuleSrcMacMask=aclPacketRuleSrcMacMask, multicastVlanSrcPortDymLearn=multicastVlanSrcPortDymLearn, impbDHCPv6PrefixDelegationSnoopState=impbDHCPv6PrefixDelegationSnoopState, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, neighborCacheState=neighborCacheState, stpBridgeForwardDelay=stpBridgeForwardDelay, ddmHighWarning=ddmHighWarning, companyMirror=companyMirror, mstMstiStatus=mstMstiStatus, lldpXdot3LocPowerTable=lldpXdot3LocPowerTable, securitySSH=securitySSH, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, sysScheduleRebootIndex=sysScheduleRebootIndex, mstiBridgeRegionalRoot=mstiBridgeRegionalRoot, protocolVlanTable=protocolVlanTable, ipv4IfVLANname=ipv4IfVLANname, sslCiphers=sslCiphers, companyEoam=companyEoam, lldpXdot1RemProtocolTable=lldpXdot1RemProtocolTable, stpProtocolVersion=stpProtocolVersion, laPortActorActivity=laPortActorActivity, tftpConfigTftpOperationStatus=tftpConfigTftpOperationStatus, sfpVendorInfoEntry=sfpVendorInfoEntry, aclL3RuleTcpUdpSrcPort=aclL3RuleTcpUdpSrcPort, lldpXdot1LocProtoVlanEntry=lldpXdot1LocProtoVlanEntry, oldDesignatedRoot=oldDesignatedRoot, sysPortCtrlMDI=sysPortCtrlMDI, protocolGroupName=protocolGroupName, lldpPortConfigPortNum=lldpPortConfigPortNum, staticRouteV6IpAddr=staticRouteV6IpAddr, aclL3RuleIgmpType=aclL3RuleIgmpType, sysBPDUAttackPortState=sysBPDUAttackPortState, ipv4dhcpOption12Status=ipv4dhcpOption12Status, agentPORTutilizationPortIndex=agentPORTutilizationPortIndex, cpuFilterL2Rule=cpuFilterL2Rule, snmpV3Trap=snmpV3Trap, impbDhcpSnoopingTableClear=impbDhcpSnoopingTableClear, sshAuthenMethodPubKeyAdmin=sshAuthenMethodPubKeyAdmin, aclv6L3RuleEntry=aclv6L3RuleEntry, sshUserInfoEntry=sshUserInfoEntry, staticMcastEgressPorts=staticMcastEgressPorts, duldRecoverTime=duldRecoverTime, aacLoginMethodListEntry=aacLoginMethodListEntry, sysSNTPSecondInterfaceName=sysSNTPSecondInterfaceName, ipv4IPIFEntry=ipv4IPIFEntry, aacAPHttpEnableMethod=aacAPHttpEnableMethod, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, eoamIfIndex=eoamIfIndex, ipv4syslogServFacility=ipv4syslogServFacility, syslogServerGroup=syslogServerGroup, limitIpMulticastPortTable=limitIpMulticastPortTable, ipv4aclQosEntry=ipv4aclQosEntry, cpuFilterProfileMask=cpuFilterProfileMask, companyTimeRangeMgmt=companyTimeRangeMgmt, mstCistPort=mstCistPort, cpuFilterUdfRuleAccessID=cpuFilterUdfRuleAccessID, ipv4aclUdfOffsetBase2=ipv4aclUdfOffsetBase2, aclProfileDstPortMask=aclProfileDstPortMask, aclv6L3RuleTcpUdpDstPort=aclv6L3RuleTcpUdpDstPort, ftpConfigFTPOperation=ftpConfigFTPOperation, ddmStatusTable=ddmStatusTable, cpuFilterv6L3RuleTcpAckBit=cpuFilterv6L3RuleTcpAckBit, ipv4smtpRecvMailAddrStatus=ipv4smtpRecvMailAddrStatus, ftpConfigServerIpAddress=ftpConfigServerIpAddress, lldpPortConfigNotificationEnable=lldpPortConfigNotificationEnable, portSecEntry=portSecEntry, companyStatistics=companyStatistics, limitIpMulticastStatus=limitIpMulticastStatus, swAuthRadiusServerStatus=swAuthRadiusServerStatus, aclv6L3RuleProtocolMask=aclv6L3RuleProtocolMask, OwnerString=OwnerString, impbBlockListEntry=impbBlockListEntry, impbPortDHCPv6VlanList4k=impbPortDHCPv6VlanList4k, sysSNTPDSTRepeatEndWeekDay=sysSNTPDSTRepeatEndWeekDay, aacEnableMethod1=aacEnableMethod1, snmpV3UserTable=snmpV3UserTable, rmonEventIndex=rmonEventIndex, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, aclL2RuleEntry=aclL2RuleEntry, ipv4aclQosStatus=ipv4aclQosStatus, vlanMacMapIndex=vlanMacMapIndex, mstMstiPortAdminPathCost=mstMstiPortAdminPathCost, swTimeRangeSaturday=swTimeRangeSaturday, sysSNTPState=sysSNTPState, ipv4aclUdfOffsetBase1=ipv4aclUdfOffsetBase1, dosCtrlTrapLogState=dosCtrlTrapLogState, staticRouteGateway=staticRouteGateway, filterDHCPServerRowStatus=filterDHCPServerRowStatus, qosDiffServType29=qosDiffServType29, qosAclPrioritySettings=qosAclPrioritySettings, aRPSpoofPreventTable=aRPSpoofPreventTable, aacServerAuthPort=aacServerAuthPort, sysWebState=sysWebState, aclL3RuleTable=aclL3RuleTable, aclv6L3RuleTcpSynBit=aclv6L3RuleTcpSynBit, mcastFilterPortIndex=mcastFilterPortIndex, snmpV3viewTreeType=snmpV3viewTreeType, qosDiffServType44=qosDiffServType44, mldsVlanFilterTable=mldsVlanFilterTable, igmpMulticastVlanGroupVid=igmpMulticastVlanGroupVid, qosDiffServType17=qosDiffServType17, lldpXdot3RemMaxFrameSize=lldpXdot3RemMaxFrameSize, sysSNTPDSTRepeatStartWeek=sysSNTPDSTRepeatStartWeek, cpuFilterL3RuleAccessID=cpuFilterL3RuleAccessID, aclPacketRuleSTag=aclPacketRuleSTag, sysPortCtrlType=sysPortCtrlType, dhcpBOOTPRelayTimeThreshold=dhcpBOOTPRelayTimeThreshold, limitIpMulticastIPType=limitIpMulticastIPType, limitIpMulticastProfileName=limitIpMulticastProfileName, aclPacketRuleRateLimit=aclPacketRuleRateLimit, securitySSL=securitySSL, swTimeRangeThursday=swTimeRangeThursday, sysTrapFirmUpgradeEvent=sysTrapFirmUpgradeEvent, portSecFDBPermVlanID=portSecFDBPermVlanID, aclL3RuleDstIpAddrMask=aclL3RuleDstIpAddrMask, cpuFilterProfileOffset1Mask=cpuFilterProfileOffset1Mask, agentMEMutilizationIn5min=agentMEMutilizationIn5min, l2PTLldpMacAddress=l2PTLldpMacAddress, companyIgsGroup=companyIgsGroup, ddmActionMgmtEntry=ddmActionMgmtEntry, tftpFwTargetTftpOperationStatus=tftpFwTargetTftpOperationStatus, errorSymbolNotifyState=errorSymbolNotifyState, aacServerGroupRowStatus=aacServerGroupRowStatus, autoFdbStatus=autoFdbStatus, impbPortAllowZeroIPState=impbPortAllowZeroIPState, snmpTrapDHCPScreen=snmpTrapDHCPScreen, snmpV3UserStatus=snmpV3UserStatus, dot1qVlanEntry=dot1qVlanEntry, ipv4aclProfileSrcMacAddrMask=ipv4aclProfileSrcMacAddrMask, cosWeight=cosWeight, gvrpSettingsAcceptableFrameType=gvrpSettingsAcceptableFrameType, sysSNTPDSTStartMon=sysSNTPDSTStartMon, ddmLowWarning=ddmLowWarning, impbRoamingState=impbRoamingState, aclv6L3RuleICMPMessageCode=aclv6L3RuleICMPMessageCode, dhcpv6ServerScreenEnableLog=dhcpv6ServerScreenEnableLog, portSecState=portSecState, igsVlanFastLeave=igsVlanFastLeave, sslSecurityHttpStatus=sslSecurityHttpStatus, ipv4smtpServerPort=ipv4smtpServerPort, cableDiagPair4Length=cableDiagPair4Length, ipv4smtpRecvMailAddrEntry=ipv4smtpRecvMailAddrEntry, mstCistVlanMapped4k=mstCistVlanMapped4k, macNotifyCtrlEntry=macNotifyCtrlEntry, filterDHCPServerPortList=filterDHCPServerPortList, laSystem=laSystem, agentMEMutilization=agentMEMutilization, limitIpMulticastProfileID=limitIpMulticastProfileID, sysRestart=sysRestart, cpuFilterL2RuleDstMacAddr=cpuFilterL2RuleDstMacAddr, cpuFilterProfileStatus=cpuFilterProfileStatus, tftpCfgTargetInterfaceName=tftpCfgTargetInterfaceName, cpuFilterProfileDstIpAddrMaskType=cpuFilterProfileDstIpAddrMaskType, aacLoginMethodListName=aacLoginMethodListName, aclL3RuleProfileNo=aclL3RuleProfileNo, qosPriSettingsTable=qosPriSettingsTable, aclL2AccessID=aclL2AccessID, qosDiffServType34=qosDiffServType34, stpPortPathCost=stpPortPathCost)
