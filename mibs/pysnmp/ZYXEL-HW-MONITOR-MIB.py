#
# PySNMP MIB module ZYXEL-HW-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-HW-MONITOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:44:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, Gauge32, TimeTicks, Counter64, Integer32, iso, MibIdentifier, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "Gauge32", "TimeTicks", "Counter64", "Integer32", "iso", "MibIdentifier", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelHwMonitor = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26))
if mibBuilder.loadTexts: zyxelHwMonitor.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelHwMonitor.setOrganization('Enterprise Solution ZyXEL')
zyxelHwMonitorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1))
zyxelHwMonitorNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2))
zyxelHwMonitorFanRpmTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1), )
if mibBuilder.loadTexts: zyxelHwMonitorFanRpmTable.setStatus('current')
zyxelHwMonitorFanRpmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1), ).setIndexNames((0, "ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmIndex"))
if mibBuilder.loadTexts: zyxelHwMonitorFanRpmEntry.setStatus('current')
zyHwMonitorFanRpmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: zyHwMonitorFanRpmIndex.setStatus('current')
zyHwMonitorFanRpmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmDescription.setStatus('current')
zyHwMonitorFanRpmCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmCurrentValue.setStatus('current')
zyHwMonitorFanRpmMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmMaxValue.setStatus('current')
zyHwMonitorFanRpmMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmMinValue.setStatus('current')
zyHwMonitorFanRpmLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmLowThreshold.setStatus('current')
zyHwMonitorFanRpmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorFanRpmStatus.setStatus('current')
zyxelHwMonitorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2), )
if mibBuilder.loadTexts: zyxelHwMonitorTemperatureTable.setStatus('current')
zyxelHwMonitorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1), ).setIndexNames((0, "ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureIndex"))
if mibBuilder.loadTexts: zyxelHwMonitorTemperatureEntry.setStatus('current')
zyHwMonitorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyHwMonitorTemperatureIndex.setStatus('current')
zyHwMonitorTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureDescription.setStatus('current')
zyHwMonitorTemperatureCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureCurrentValue.setStatus('current')
zyHwMonitorTemperatureMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureMaxValue.setStatus('current')
zyHwMonitorTemperatureMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureMinValue.setStatus('current')
zyHwMonitorTemperatureHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureHighThreshold.setStatus('current')
zyHwMonitorTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorTemperatureStatus.setStatus('current')
zyxelHwMonitorVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3), )
if mibBuilder.loadTexts: zyxelHwMonitorVoltageTable.setStatus('current')
zyxelHwMonitorVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1), ).setIndexNames((0, "ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageIndex"))
if mibBuilder.loadTexts: zyxelHwMonitorVoltageEntry.setStatus('current')
zyHwMonitorVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: zyHwMonitorVoltageIndex.setStatus('current')
zyHwMonitorVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageDescription.setStatus('current')
zyHwMonitorVoltageCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageCurrentValue.setStatus('current')
zyHwMonitorVoltageMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageMaxValue.setStatus('current')
zyHwMonitorVoltageMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageMinValue.setStatus('current')
zyHwMonitorVoltageNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageNominalValue.setStatus('current')
zyHwMonitorVoltageLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageLowThreshold.setStatus('current')
zyHwMonitorVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorVoltageStatus.setStatus('current')
zyxelHwMonitorPowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4))
zyHwMonitorPowerSourceMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorPowerSourceMode.setStatus('current')
zyxelHwMonitorPowerSourceTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2), )
if mibBuilder.loadTexts: zyxelHwMonitorPowerSourceTable.setStatus('current')
zyxelHwMonitorPowerSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2, 1), ).setIndexNames((0, "ZYXEL-HW-MONITOR-MIB", "zyHwMonitorPowerSourceIndex"))
if mibBuilder.loadTexts: zyxelHwMonitorPowerSourceEntry.setStatus('current')
zyHwMonitorPowerSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyHwMonitorPowerSourceIndex.setStatus('current')
zyHwMonitorPowerSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorPowerSourceType.setStatus('current')
zyHwMonitorPowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyHwMonitorPowerSourceStatus.setStatus('current')
zyHwMonitorFanSpeedOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 1)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmDescription"))
if mibBuilder.loadTexts: zyHwMonitorFanSpeedOutOfRange.setStatus('current')
zyHwMonitorTemperatureOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 2)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureDescription"))
if mibBuilder.loadTexts: zyHwMonitorTemperatureOutOfRange.setStatus('current')
zyHwMonitorPowerSupplyVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 3)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageDescription"))
if mibBuilder.loadTexts: zyHwMonitorPowerSupplyVoltageOutOfRange.setStatus('current')
zyHwMonitorBackupPowerSupplyInUse = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 4))
if mibBuilder.loadTexts: zyHwMonitorBackupPowerSupplyInUse.setStatus('current')
zyHwMonitorDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 5))
if mibBuilder.loadTexts: zyHwMonitorDyingGasp.setStatus('current')
zyHwMonitorFanAirFlowInconsistency = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 6))
if mibBuilder.loadTexts: zyHwMonitorFanAirFlowInconsistency.setStatus('current')
zyHwMonitorFanSpeedOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 7)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorFanRpmDescription"))
if mibBuilder.loadTexts: zyHwMonitorFanSpeedOutOfRangeRecovered.setStatus('current')
zyHwMonitorTemperatureOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 8)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorTemperatureDescription"))
if mibBuilder.loadTexts: zyHwMonitorTemperatureOutOfRangeRecovered.setStatus('current')
zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 26, 2, 9)).setObjects(("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageIndex"), ("ZYXEL-HW-MONITOR-MIB", "zyHwMonitorVoltageDescription"))
if mibBuilder.loadTexts: zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered.setStatus('current')
mibBuilder.exportSymbols("ZYXEL-HW-MONITOR-MIB", zyHwMonitorPowerSourceType=zyHwMonitorPowerSourceType, zyxelHwMonitorTemperatureTable=zyxelHwMonitorTemperatureTable, zyHwMonitorFanRpmStatus=zyHwMonitorFanRpmStatus, zyHwMonitorTemperatureCurrentValue=zyHwMonitorTemperatureCurrentValue, zyHwMonitorTemperatureMaxValue=zyHwMonitorTemperatureMaxValue, zyHwMonitorTemperatureIndex=zyHwMonitorTemperatureIndex, zyxelHwMonitorFanRpmTable=zyxelHwMonitorFanRpmTable, zyHwMonitorFanRpmMaxValue=zyHwMonitorFanRpmMaxValue, zyHwMonitorFanRpmCurrentValue=zyHwMonitorFanRpmCurrentValue, zyHwMonitorTemperatureHighThreshold=zyHwMonitorTemperatureHighThreshold, zyxelHwMonitorPowerSourceTable=zyxelHwMonitorPowerSourceTable, zyxelHwMonitorPowerSource=zyxelHwMonitorPowerSource, zyHwMonitorVoltageLowThreshold=zyHwMonitorVoltageLowThreshold, zyHwMonitorVoltageCurrentValue=zyHwMonitorVoltageCurrentValue, zyHwMonitorPowerSupplyVoltageOutOfRange=zyHwMonitorPowerSupplyVoltageOutOfRange, zyHwMonitorVoltageIndex=zyHwMonitorVoltageIndex, zyHwMonitorVoltageDescription=zyHwMonitorVoltageDescription, zyHwMonitorFanRpmIndex=zyHwMonitorFanRpmIndex, zyHwMonitorVoltageStatus=zyHwMonitorVoltageStatus, zyHwMonitorPowerSourceStatus=zyHwMonitorPowerSourceStatus, zyHwMonitorTemperatureOutOfRangeRecovered=zyHwMonitorTemperatureOutOfRangeRecovered, zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered=zyHwMonitorPowerSupplyVoltageOutOfRangeRecovered, zyxelHwMonitor=zyxelHwMonitor, zyHwMonitorTemperatureOutOfRange=zyHwMonitorTemperatureOutOfRange, zyHwMonitorVoltageNominalValue=zyHwMonitorVoltageNominalValue, zyHwMonitorTemperatureMinValue=zyHwMonitorTemperatureMinValue, zyHwMonitorFanRpmDescription=zyHwMonitorFanRpmDescription, zyxelHwMonitorVoltageTable=zyxelHwMonitorVoltageTable, zyHwMonitorFanSpeedOutOfRange=zyHwMonitorFanSpeedOutOfRange, zyHwMonitorFanRpmLowThreshold=zyHwMonitorFanRpmLowThreshold, zyHwMonitorBackupPowerSupplyInUse=zyHwMonitorBackupPowerSupplyInUse, zyHwMonitorVoltageMinValue=zyHwMonitorVoltageMinValue, zyHwMonitorVoltageMaxValue=zyHwMonitorVoltageMaxValue, PYSNMP_MODULE_ID=zyxelHwMonitor, zyHwMonitorTemperatureStatus=zyHwMonitorTemperatureStatus, zyxelHwMonitorVoltageEntry=zyxelHwMonitorVoltageEntry, zyxelHwMonitorStatus=zyxelHwMonitorStatus, zyHwMonitorTemperatureDescription=zyHwMonitorTemperatureDescription, zyHwMonitorFanRpmMinValue=zyHwMonitorFanRpmMinValue, zyxelHwMonitorTemperatureEntry=zyxelHwMonitorTemperatureEntry, zyxelHwMonitorPowerSourceEntry=zyxelHwMonitorPowerSourceEntry, zyHwMonitorDyingGasp=zyHwMonitorDyingGasp, zyHwMonitorFanSpeedOutOfRangeRecovered=zyHwMonitorFanSpeedOutOfRangeRecovered, zyxelHwMonitorNotifications=zyxelHwMonitorNotifications, zyHwMonitorPowerSourceIndex=zyHwMonitorPowerSourceIndex, zyHwMonitorFanAirFlowInconsistency=zyHwMonitorFanAirFlowInconsistency, zyHwMonitorPowerSourceMode=zyHwMonitorPowerSourceMode, zyxelHwMonitorFanRpmEntry=zyxelHwMonitorFanRpmEntry)
