#
# PySNMP MIB module PERLE-MCR-MGT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PERLE-MCR-MGT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:31:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
SnmpEngineID, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, TimeTicks, Counter32, Integer32, NotificationType, iso, Bits, Unsigned32, ObjectIdentity, Gauge32, IpAddress, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Counter32", "Integer32", "NotificationType", "iso", "Bits", "Unsigned32", "ObjectIdentity", "Gauge32", "IpAddress", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention, DateAndTime, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "MacAddress")
mcrMGTMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1))
mcrMGTMIB.setRevisions(('2014-09-03 00:00', '2013-03-02 00:00', '2012-11-15 00:00', '2012-02-01 00:00', '2011-01-20 00:00', '2011-01-12 00:00', '2010-09-10 00:00',))
if mibBuilder.loadTexts: mcrMGTMIB.setLastUpdated('201409030000Z')
if mibBuilder.loadTexts: mcrMGTMIB.setOrganization('Perle Systems Limited')
perle = MibIdentifier((1, 3, 6, 1, 4, 1, 1966))
productId = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 20))
mediaConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 20, 1))
mcrMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 20, 1, 1))
productMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21))
mediaconverterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1))
mcrMGTMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0))
mcrMGTMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1))
mcrMGTMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2))
mcrChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1))
mcrManagementGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2))
class YesNoValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1))
    namedValues = NamedValues(("notApplicable", -1), ("no", 0), ("yes", 1))

class OnOffValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1))
    namedValues = NamedValues(("notApplicable", -1), ("off", 0), ("on", 1))

class EnableDisableValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1))
    namedValues = NamedValues(("notApplicable", -1), ("disable", 0), ("enable", 1))

class Ipv4v6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class GenericTableIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class SlotNumber(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class ContainerStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("active", 1), ("modified", 2), ("applyChanges", 4), ("discardChanges", 6))

class AlertSeverityLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("systemLevelFault", 0), ("moduleLevelFault", 1), ("persistantError", 2), ("oneTimeError", 3), ("significantEvent", 4), ("normalOperation", 5))

mcrChassisTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: mcrChassisTable.setStatus('current')
mcrChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisEntry.setStatus('current')
mcrChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrChassisIndex.setStatus('current')
chassisModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelName.setStatus('current')
chassisModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelDesc.setStatus('current')
chassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisSerialNumber.setStatus('current')
chassisBootloaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBootloaderVersion.setStatus('current')
chassisFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFirmwareVersion.setStatus('current')
chassisOutStandWarnAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisOutStandWarnAlarms.setStatus('current')
chassisDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisDiagStatus.setStatus('current')
chassisTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperature.setStatus('current')
chassisCfgHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisCfgHighTempThreshold.setStatus('current')
chassisReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 11), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisReset.setStatus('current')
chassisCfgMgmtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisCfgMgmtSlot.setStatus('current')
mcrPsmuTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: mcrPsmuTable.setStatus('current')
mcrPsmuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuEntry.setStatus('current')
mcrPsmuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("b", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrPsmuIndex.setStatus('current')
mcrPsmuModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuModelName.setStatus('current')
mcrPsmuModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuModelDesc.setStatus('current')
mcrPsmuPsuSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuPsuSerialNumber.setStatus('current')
mcrPsmuBootloaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuBootloaderVersion.setStatus('current')
mcrPsmuFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuFirmwareVersion.setStatus('current')
mcrPsmuOutStandWarnAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuOutStandWarnAlarms.setStatus('current')
mcrPsmuPsuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPresent", 0), ("good", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuPsuStatus.setStatus('current')
mcrPsmuPsuVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuPsuVoltage.setStatus('current')
mcrPsmuPsuPowerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuPsuPowerUsage.setStatus('current')
mcrPsmuFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPresent", 0), ("good", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuFanStatus.setStatus('current')
mcrPsmuFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuFanSpeed.setStatus('current')
mcrChassisSlotTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: mcrChassisSlotTable.setStatus('current')
mcrChassisSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"))
if mibBuilder.loadTexts: mcrChassisSlotEntry.setStatus('current')
mcrChassisSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 2), SlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrChassisSlotIndex.setStatus('current')
mcrUserDefinedModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrUserDefinedModuleName.setStatus('current')
mcrModuleModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleModelName.setStatus('current')
mcrUnManagedModuleSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrUnManagedModuleSlotName.setStatus('current')
mcrModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleSerialNumber.setStatus('current')
mcrModuleBootloaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleBootloaderVersion.setStatus('current')
mcrModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleFirmwareVersion.setStatus('current')
mcrModuleoOutStandWarnAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleoOutStandWarnAlarms.setStatus('current')
mcrModuleDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleDiagStatus.setStatus('current')
mcrModuleTypeInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unManaged", -3), ("mcrMgt", -2), ("unknown", -1), ("empty", 0), ("cm1000Fixed", 1), ("cm100Fixed", 2), ("cm1110RateConv", 3), ("cm110RateConv", 4), ("cm100mmFixed", 5), ("cm1000mmFixed", 6), ("cm10gFixed", 7), ("exCM", 8), ("cm10gt", 9), ("cm4gpt", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleTypeInserted.setStatus('current')
mcrMediaConfigBackupRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMediaConfigBackupRestore.setStatus('current')
mcrMediaBackedupModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 0), ("cm1000Fixed", 1), ("cm100Fixed", 2), ("cm1110RateConv", 3), ("cm110RateConv", 4), ("cm100mmFixed", 5), ("cm1000mmFixed", 6), ("cm10gFixed", 7), ("exCM", 8), ("cm10gt", 9), ("cm4gpt", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMediaBackedupModuleType.setStatus('current')
mcrChassisPwrUpSlotPwrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrChassisPwrUpSlotPwrState.setStatus('current')
mcrCurrentPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrCurrentPowerState.setStatus('current')
mcrPowerScheduleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrPowerScheduleEnable.setStatus('current')
mcrModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrModuleReset.setStatus('current')
mcrModuleResetToFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrModuleResetToFactory.setStatus('current')
mcrModuleModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleModelDesc.setStatus('current')
mcrModuleTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4))
cm1000Fixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1))
cm1000FixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1), )
if mibBuilder.loadTexts: cm1000FixedTable.setStatus('current')
cm1000FixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000SlotIndex"))
if mibBuilder.loadTexts: cm1000FixedEntry.setStatus('current')
cm1000SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000SlotIndex.setStatus('current')
cm1000Modelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000Modelname.setStatus('current')
cm1000ModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000ModelDesc.setStatus('current')
cm1000HwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwJmp5ConfigMode.setStatus('current')
cm1000HwSw1FiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw1FiberAutoNeg.setStatus('current')
cm1000HwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw2LinkMode.setStatus('current')
cm1000HwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw3FiberFaultAlert.setStatus('current')
cm1000HwSw4Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpAuto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw4Duplex.setStatus('current')
cm1000HwSw5Pause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw5Pause.setStatus('current')
cm1000HwSw6Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw6Loopback.setStatus('current')
cm1000FiberLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberLinkStatus.setStatus('current')
cm1000FiberConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberConnType.setStatus('current')
cm1000FiberAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberAutoNegState.setStatus('current')
cm1000FiberSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberSpeed.setStatus('current')
cm1000FiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberDuplex.setStatus('current')
cm1000FiberPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberPauseEnh.setStatus('current')
cm1000FiberLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberLPRFStatus.setStatus('current')
cm1000FiberReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000FiberReceiveStatus.setStatus('current')
cm1000FiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 20), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000FiberLoopBack.setStatus('current')
cm1000CopperLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperLinkStatus.setStatus('current')
cm1000CopperConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperConnType.setStatus('current')
cm1000CopperAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperAutoNegState.setStatus('current')
cm1000CopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperSpeed.setStatus('current')
cm1000CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperDuplex.setStatus('current')
cm1000CopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperCrossOver.setStatus('current')
cm1000CopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperPauseEnh.setStatus('current')
cm1000CopperLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperLPRFStatus.setStatus('current')
cm1000ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2), )
if mibBuilder.loadTexts: cm1000ConfigTable.setStatus('current')
cm1000ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000ConfigSlotIndex"))
if mibBuilder.loadTexts: cm1000ConfigEntry.setStatus('current')
cm1000ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000ConfigSlotIndex.setStatus('current')
cm1000ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigStatus.setStatus('current')
cm1000ConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigModuleName.setStatus('current')
cm1000ConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigLinkMode.setStatus('current')
cm1000ConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigFiberFaultAlert.setStatus('current')
cm1000ConfigJumboPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 7), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigJumboPackets.setStatus('current')
cm1000ConfigFiberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigFiberPortName.setStatus('current')
cm1000ConfigFiberPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigFiberPortEnable.setStatus('current')
cm1000ConfigFiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 10), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigFiberAutoNeg.setStatus('current')
cm1000ConfigCopperPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperPortName.setStatus('current')
cm1000ConfigCopperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 12), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperPortEnable.setStatus('current')
cm1000ConfigCopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperDuplex.setStatus('current')
cm1000ConfigCopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("symmAsymRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperPauseEnh.setStatus('current')
cm1000ConfigCopperLowPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperLowPower.setStatus('current')
cm1000LedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3), )
if mibBuilder.loadTexts: cm1000LedTable.setStatus('current')
cm1000LedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000LedSlotIndex"))
if mibBuilder.loadTexts: cm1000LedEntry.setStatus('current')
cm1000LedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000LedSlotIndex.setStatus('current')
cm1000LedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000LedPWR.setStatus('current')
cm1000LedLKF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000LedLKF.setStatus('current')
cm1000LedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000LedLKC.setStatus('current')
cm1000mmFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6))
cm1000mmFixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1), )
if mibBuilder.loadTexts: cm1000mmFixedTable.setStatus('current')
cm1000mmFixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000mmSlotIndex"))
if mibBuilder.loadTexts: cm1000mmFixedEntry.setStatus('current')
cm1000mmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000mmSlotIndex.setStatus('current')
cm1000mmModelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmModelname.setStatus('current')
cm1000mmModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmModelDesc.setStatus('current')
cm1000mmHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwJmp5ConfigMode.setStatus('current')
cm1000mmHwSw1FiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw1FiberAutoNeg.setStatus('current')
cm1000mmHwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw2LinkMode.setStatus('current')
cm1000mmHwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw3FiberFaultAlert.setStatus('current')
cm1000mmHwSw4Loopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw4Loopback1.setStatus('current')
cm1000mmHwSw5Loopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw5Loopback2.setStatus('current')
cm1000mmFiber1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1LinkStatus.setStatus('current')
cm1000mmFiber1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1ConnType.setStatus('current')
cm1000mmFiber1AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1AutoNegState.setStatus('current')
cm1000mmFiber1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1Speed.setStatus('current')
cm1000mmFiber1Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1Duplex.setStatus('current')
cm1000mmFiber1PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1PauseEnh.setStatus('current')
cm1000mmFiber1LPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1LPRFStatus.setStatus('current')
cm1000mmFiber1ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmFiber1ReceiveStatus.setStatus('current')
cm1000mmFiber2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2LinkStatus.setStatus('current')
cm1000mmFiber2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2ConnType.setStatus('current')
cm1000mmFiber2AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2AutoNegState.setStatus('current')
cm1000mmFiber2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2Speed.setStatus('current')
cm1000mmFiber2Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2Duplex.setStatus('current')
cm1000mmFiber2PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2PauseEnh.setStatus('current')
cm1000mmFiber2LPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2LPRFStatus.setStatus('current')
cm1000mmFiber2ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmFiber2ReceiveStatus.setStatus('current')
cm1000mmFiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmFiberLoopBack.setStatus('current')
cm1000mmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2), )
if mibBuilder.loadTexts: cm1000mmConfigTable.setStatus('current')
cm1000mmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000mmConfigSlotIndex"))
if mibBuilder.loadTexts: cm1000mmConfigEntry.setStatus('current')
cm1000mmConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000mmConfigSlotIndex.setStatus('current')
cm1000mmConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigStatus.setStatus('current')
cm1000mmConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigModuleName.setStatus('current')
cm1000mmConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigLinkMode.setStatus('current')
cm1000mmConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiberFaultAlert.setStatus('current')
cm1000mmConfigJumboPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 7), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigJumboPackets.setStatus('current')
cm1000mmConfigFiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 8), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiberAutoNeg.setStatus('current')
cm1000mmConfigFiber1PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiber1PortName.setStatus('current')
cm1000mmConfigFiber1PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 10), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiber1PortEnable.setStatus('current')
cm1000mmConfigFiber2PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiber2PortName.setStatus('current')
cm1000mmConfigFiber2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 12), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiber2PortEnable.setStatus('current')
cm1000mmLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3), )
if mibBuilder.loadTexts: cm1000mmLedTable.setStatus('current')
cm1000mmLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000mmLedsSlotIndex"))
if mibBuilder.loadTexts: cm1000mmLedEntry.setStatus('current')
cm1000mmLedsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000mmLedsSlotIndex.setStatus('current')
cm1000mmLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmLedPWR.setStatus('current')
cm1000mmLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmLedLK1.setStatus('current')
cm1000mmLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmLedLK2.setStatus('current')
cm100Fixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2))
cm100FixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: cm100FixedTable.setStatus('current')
cm100FixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100SlotIndex"))
if mibBuilder.loadTexts: cm100FixedEntry.setStatus('current')
cm100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100SlotIndex.setStatus('current')
cm100ModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100ModelName.setStatus('current')
cm100ModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100ModelDesc.setStatus('current')
cm100HwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwJmp5ConfigMode.setStatus('current')
cm100HwJmp6AutoMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwJmp6AutoMDI.setStatus('current')
cm100HwSw1AutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw1AutoNegotiation.setStatus('current')
cm100HwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownStandardMode", 0), ("swUpLinkPassthroughMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw2LinkMode.setStatus('current')
cm100HwSw3FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw3FarEndFault.setStatus('current')
cm100HwSw5Pause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw5Pause.setStatus('current')
cm100HwSw6Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw6Loopback.setStatus('current')
cm100FiberLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100FiberLinkStatus.setStatus('current')
cm100FiberConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100FiberConnType.setStatus('current')
cm100FiberSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100FiberSpeed.setStatus('current')
cm100FiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100FiberFarEndFault.setStatus('current')
cm100FiberReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100FiberReceiveStatus.setStatus('current')
cm100FiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 17), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100FiberLoopBack.setStatus('current')
cm100CopperLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperLinkStatus.setStatus('current')
cm100CopperConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperConnType.setStatus('current')
cm100CopperAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperAutoNegState.setStatus('current')
cm100CopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperSpeed.setStatus('current')
cm100CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperDuplex.setStatus('current')
cm100CopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperCrossOver.setStatus('current')
cm100CopperPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperPause.setStatus('current')
cm100CopperLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperLPRFStatus.setStatus('current')
cm100ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: cm100ConfigTable.setStatus('current')
cm100ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100ConfigSlotIndex"))
if mibBuilder.loadTexts: cm100ConfigEntry.setStatus('current')
cm100ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100ConfigSlotIndex.setStatus('current')
cm100ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigStatus.setStatus('current')
cm100ConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigModuleName.setStatus('current')
cm100ConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("linkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigLinkMode.setStatus('current')
cm100ConfigFiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigFiberFarEndFault.setStatus('current')
cm100ConfigFiberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigFiberPortName.setStatus('current')
cm100ConfigFiberPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 8), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigFiberPortEnable.setStatus('current')
cm100ConfigCopperPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperPortName.setStatus('current')
cm100ConfigCopperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 10), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperPortEnable.setStatus('current')
cm100ConfigCopperAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 11), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperAutoNegotiation.setStatus('current')
cm100ConfigCopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperCrossOver.setStatus('current')
cm100ConfigCopperPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperPause.setStatus('current')
cm100LedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: cm100LedTable.setStatus('current')
cm100LedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100LedSlotIndex"))
if mibBuilder.loadTexts: cm100LedEntry.setStatus('current')
cm100LedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100LedSlotIndex.setStatus('current')
cm100LedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100LedPWR.setStatus('current')
cm100LedLKF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100LedLKF.setStatus('current')
cm100LedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100LedLKC.setStatus('current')
cm100mmFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7))
cm100mmFixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1), )
if mibBuilder.loadTexts: cm100mmFixedTable.setStatus('current')
cm100mmFixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100mmSlotIndex"))
if mibBuilder.loadTexts: cm100mmFixedEntry.setStatus('current')
cm100mmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100mmSlotIndex.setStatus('current')
cm100mmModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmModelName.setStatus('current')
cm100mmModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmModelDesc.setStatus('current')
cm100mmHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwJmp5ConfigMode.setStatus('current')
cm100mmHwSw1LinkPassthrough = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwSw1LinkPassthrough.setStatus('current')
cm100mmHwSw2FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwSw2FarEndFault.setStatus('current')
cm100mmHwSw3Loopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwSw3Loopback1.setStatus('current')
cm100mmHwSw4Loopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwSw4Loopback2.setStatus('current')
cm100mmFiber1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber1LinkStatus.setStatus('current')
cm100mmFiber1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber1ConnType.setStatus('current')
cm100mmFiber1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber1Speed.setStatus('current')
cm100mmFiber1FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber1FarEndFault.setStatus('current')
cm100mmFiber1ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmFiber1ReceiveStatus.setStatus('current')
cm100mmFiber2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber2LinkStatus.setStatus('current')
cm100mmFiber2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber2ConnType.setStatus('current')
cm100mmFiber2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber2Speed.setStatus('current')
cm100mmFiber2FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber2FarEndFault.setStatus('current')
cm100mmFiber2ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmFiber2ReceiveStatus.setStatus('current')
cm100mmFiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmFiberLoopBack.setStatus('current')
cm100mmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2), )
if mibBuilder.loadTexts: cm100mmConfigTable.setStatus('current')
cm100mmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100mmConfigSlotIndex"))
if mibBuilder.loadTexts: cm100mmConfigEntry.setStatus('current')
cm100mmConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100mmConfigSlotIndex.setStatus('current')
cm100mmConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigStatus.setStatus('current')
cm100mmConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigModuleName.setStatus('current')
cm100mmConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("linkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigLinkMode.setStatus('current')
cm100mmConfigFiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiberFarEndFault.setStatus('current')
cm100mmConfigFiber1PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiber1PortName.setStatus('current')
cm100mmConfigFiber1PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 8), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiber1PortEnable.setStatus('current')
cm100mmConfigFiber2PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiber2PortName.setStatus('current')
cm100mmConfigFiber2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 10), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiber2PortEnable.setStatus('current')
cm100mmLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3), )
if mibBuilder.loadTexts: cm100mmLedTable.setStatus('current')
cm100mmLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100mmLedSlotIndex"))
if mibBuilder.loadTexts: cm100mmLedEntry.setStatus('current')
cm100mmLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100mmLedSlotIndex.setStatus('current')
cm100mmLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmLedPWR.setStatus('current')
cm100mmLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmLedLK1.setStatus('current')
cm100mmLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmLedLK2.setStatus('current')
cm1110RateConv = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3))
cm1110RateConvTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: cm1110RateConvTable.setStatus('current')
cm1110RateConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110SlotIndex"))
if mibBuilder.loadTexts: cm1110RateConvEntry.setStatus('current')
cm1110SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110SlotIndex.setStatus('current')
cm1110ModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110ModelName.setStatus('current')
cm1110ModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110ModelDesc.setStatus('current')
cm1110HwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwJmp5ConfigMode.setStatus('current')
cm1110HwJmp6AutoMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdix", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwJmp6AutoMDIX.setStatus('current')
cm1110HwSw1TpAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw1TpAutoNegotiation.setStatus('current')
cm1110HwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownNormalMode", 0), ("swUpSmartLinkPassthroughMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw2LinkMode.setStatus('current')
cm1110HwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw3FiberFaultAlert.setStatus('current')
cm1110HwSw4TpDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw4TpDuplex.setStatus('current')
cm1110HwSw5TpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDown10Mbps", 0), ("swUp100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw5TpSpeed.setStatus('current')
cm1110HwSw6FiberAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw6FiberAutoNegotiation.setStatus('current')
cm1110HwSw6FiberSfp100Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("swDownHalfDuplex", 0), ("swUpFullDuplex", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw6FiberSfp100Duplex.setStatus('current')
cm1110HwSw7Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw7Loopback.setStatus('current')
cm1110FiberLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberLinkStatus.setStatus('current')
cm1110FiberConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberConnType.setStatus('current')
cm1110FiberAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 99))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberAutoNegState.setStatus('current')
cm1110FiberSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed100Mbps", 1), ("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberSpeed.setStatus('current')
cm1110FiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberDuplex.setStatus('current')
cm1110FiberPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberPauseEnh.setStatus('current')
cm1110FiberLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 99))).clone(namedValues=NamedValues(("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberLPRFStatus.setStatus('current')
cm1110FiberSfp100FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 99))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberSfp100FarEndFault.setStatus('current')
cm1110FiberReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110FiberReceiveStatus.setStatus('current')
cm1110FiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 24), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110FiberLoopBack.setStatus('current')
cm1110CopperLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperLinkStatus.setStatus('current')
cm1110CopperConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperConnType.setStatus('current')
cm1110CopperAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperAutoNegState.setStatus('current')
cm1110CopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperSpeed.setStatus('current')
cm1110CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperDuplex.setStatus('current')
cm1110CopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperCrossOver.setStatus('current')
cm1110CopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperPauseEnh.setStatus('current')
cm1110CopperLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperLPRFStatus.setStatus('current')
cm1110CopperAutoSpeedDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noDownshift", 0), ("downshift", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperAutoSpeedDownshift.setStatus('current')
cm1110ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2), )
if mibBuilder.loadTexts: cm1110ConfigTable.setStatus('current')
cm1110ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110ConfigSlotIndex"))
if mibBuilder.loadTexts: cm1110ConfigEntry.setStatus('current')
cm1110ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110ConfigSlotIndex.setStatus('current')
cm1110ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigStatus.setStatus('current')
cm1110ConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigModuleName.setStatus('current')
cm1110ConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigLinkMode.setStatus('current')
cm1110ConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberFaultAlert.setStatus('current')
cm1110ConfigMaxPacketsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("maxPacket1522", 0), ("maxPacket2048", 1), ("maxPacket10240", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigMaxPacketsSize.setStatus('current')
cm1110ConfigFiberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPortName.setStatus('current')
cm1110ConfigFiberPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPortEnable.setStatus('current')
cm1110ConfigFiberAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 10), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberAutoNegotiation.setStatus('current')
cm1110ConfigFiberSfp100duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberSfp100duplex.setStatus('current')
cm1110ConfigCopperPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPortName.setStatus('current')
cm1110ConfigCopperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 13), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPortEnable.setStatus('current')
cm1110ConfigCopperAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 14), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegotiation.setStatus('current')
cm1110ConfigCopperAutoNegAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 15), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv10HDX.setStatus('current')
cm1110ConfigCopperAutoNegAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 16), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv10FDX.setStatus('current')
cm1110ConfigCopperAutoNegAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 17), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv100HDX.setStatus('current')
cm1110ConfigCopperAutoNegAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 18), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv100FDX.setStatus('current')
cm1110ConfigCopperAutoNegAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 19), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv1000FDX.setStatus('current')
cm1110ConfigCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperSpeed.setStatus('current')
cm1110ConfigCopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDuplex.setStatus('current')
cm1110ConfigCopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperCrossOver.setStatus('current')
cm1110ConfigCopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("symmAsymRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPauseEnh.setStatus('current')
cm1110ConfigCopperAutoSpeedDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoSpeedDownshift.setStatus('current')
cm1110ConfigCopper10BaseTDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("extended", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopper10BaseTDistance.setStatus('current')
cm1110ConfigUnidirectionalEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("copperToFiber", 1), ("fiberToCopper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigUnidirectionalEthernet.setStatus('current')
cm1110ConfigPriorityToEgressQueueMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap0.setStatus('current')
cm1110ConfigPriorityToEgressQueueMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap1.setStatus('current')
cm1110ConfigPriorityToEgressQueueMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap2.setStatus('current')
cm1110ConfigPriorityToEgressQueueMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap3.setStatus('current')
cm1110ConfigPriorityToEgressQueueMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap4.setStatus('current')
cm1110ConfigPriorityToEgressQueueMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap5.setStatus('current')
cm1110ConfigPriorityToEgressQueueMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap6.setStatus('current')
cm1110ConfigPriorityToEgressQueueMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap7.setStatus('current')
cm1110ConfigCopper8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 35), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopper8021pPriority.setStatus('current')
cm1110ConfigCopperIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 36), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperIpTosPriority.setStatus('current')
cm1110ConfigCopperPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityPrecedence.setStatus('current')
cm1110ConfigCopperCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperCongestionPolicy.setStatus('current')
cm1110ConfigCopperPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap0.setStatus('current')
cm1110ConfigCopperPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap1.setStatus('current')
cm1110ConfigCopperPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap2.setStatus('current')
cm1110ConfigCopperPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap3.setStatus('current')
cm1110ConfigCopperPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap4.setStatus('current')
cm1110ConfigCopperPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap5.setStatus('current')
cm1110ConfigCopperPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap6.setStatus('current')
cm1110ConfigCopperPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap7.setStatus('current')
cm1110ConfigCopperIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26), ("rate100mbps", 27), ("rate200mbps", 28), ("rate300mbps", 29), ("rate400mbps", 30), ("rate500mbps", 31), ("rate600mbps", 32), ("rate700mbps", 33), ("rate800mbps", 34), ("rate900mbps", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperIngressLimit.setStatus('current')
cm1110ConfigCopperEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26), ("rate100mbps", 27), ("rate200mbps", 28), ("rate300mbps", 29), ("rate400mbps", 30), ("rate500mbps", 31), ("rate600mbps", 32), ("rate700mbps", 33), ("rate800mbps", 34), ("rate900mbps", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperEgressLimit.setStatus('current')
cm1110ConfigCopperDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 49), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDiscardTaggedFrames.setStatus('current')
cm1110ConfigCopperDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 50), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDiscardUntaggedFrames.setStatus('current')
cm1110ConfigCopperDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDefaultVlanId.setStatus('current')
cm1110ConfigCopperDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDefaultPriority.setStatus('current')
cm1110ConfigCopperVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperVlanTaggingAction.setStatus('current')
cm1110ConfigCopperFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 54), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperFilterUnknownMulticast.setStatus('current')
cm1110ConfigCopperFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 55), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperFilterUnknownUnicast.setStatus('current')
cm1110ConfigFiber8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 56), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiber8021pPriority.setStatus('current')
cm1110ConfigFiberIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 57), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberIpTosPriority.setStatus('current')
cm1110ConfigFiberPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityPrecedence.setStatus('current')
cm1110ConfigFiberCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberCongestionPolicy.setStatus('current')
cm1110ConfigFiberPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap0.setStatus('current')
cm1110ConfigFiberPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap1.setStatus('current')
cm1110ConfigFiberPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap2.setStatus('current')
cm1110ConfigFiberPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap3.setStatus('current')
cm1110ConfigFiberPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap4.setStatus('current')
cm1110ConfigFiberPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap5.setStatus('current')
cm1110ConfigFiberPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap6.setStatus('current')
cm1110ConfigFiberPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap7.setStatus('current')
cm1110ConfigFiberIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26), ("rate100mbps", 27), ("rate200mbps", 28), ("rate300mbps", 29), ("rate400mbps", 30), ("rate500mbps", 31), ("rate600mbps", 32), ("rate700mbps", 33), ("rate800mbps", 34), ("rate900mbps", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberIngressLimit.setStatus('current')
cm1110ConfigFiberEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26), ("rate100mbps", 27), ("rate200mbps", 28), ("rate300mbps", 29), ("rate400mbps", 30), ("rate500mbps", 31), ("rate600mbps", 32), ("rate700mbps", 33), ("rate800mbps", 34), ("rate900mbps", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberEgressLimit.setStatus('current')
cm1110ConfigFiberDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 70), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberDiscardTaggedFrames.setStatus('current')
cm1110ConfigFiberDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 71), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberDiscardUntaggedFrames.setStatus('current')
cm1110ConfigFiberDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberDefaultVlanId.setStatus('current')
cm1110ConfigFiberDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberDefaultPriority.setStatus('current')
cm1110ConfigFiberVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberVlanTaggingAction.setStatus('current')
cm1110ConfigFiberFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 75), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberFilterUnknownMulticast.setStatus('current')
cm1110ConfigFiberFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 76), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberFilterUnknownUnicast.setStatus('current')
cm1110ConfigFiberSgmiiInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 77), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberSgmiiInterface.setStatus('current')
cm1110LedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3), )
if mibBuilder.loadTexts: cm1110LedTable.setStatus('current')
cm1110LedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110LedSlotIndex"))
if mibBuilder.loadTexts: cm1110LedEntry.setStatus('current')
cm1110LedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110LedSlotIndex.setStatus('current')
cm1110LedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedPWR.setStatus('current')
cm1110LedFDF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offHalfDuplex", 0), ("onFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedFDF.setStatus('current')
cm1110LedLKF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedLKF.setStatus('current')
cm1110LedCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off10Mbps", 0), ("onYellow100Mbps", 1), ("onGreen1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedCopperSpeed.setStatus('current')
cm1110LedFDC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offHalfDuplex", 0), ("onFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedFDC.setStatus('current')
cm1110LedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedLKC.setStatus('current')
cm1110RateConvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4), )
if mibBuilder.loadTexts: cm1110RateConvStatsTable.setStatus('current')
cm1110RateConvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110StatsSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110MediaPortIndex"))
if mibBuilder.loadTexts: cm1110RateConvStatsEntry.setStatus('current')
cm1110StatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110StatsSlotIndex.setStatus('current')
cm1110MediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2))))
if mibBuilder.loadTexts: cm1110MediaPortIndex.setStatus('current')
cm1110PortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInDiscards.setStatus('current')
cm1110PortInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInFiltered.setStatus('current')
cm1110PortInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInGoodOctets.setStatus('current')
cm1110PortHCInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortHCInGoodOctets.setStatus('current')
cm1110PortInBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInBadOctets.setStatus('current')
cm1110PortInUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInUnicasts.setStatus('current')
cm1110PortInBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInBroadcasts.setStatus('current')
cm1110PortInMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInMulticasts.setStatus('current')
cm1110PortInPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInPauses.setStatus('current')
cm1110PortInUnderSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInUnderSizes.setStatus('current')
cm1110PortInFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInFragments.setStatus('current')
cm1110PortInOversizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInOversizes.setStatus('current')
cm1110PortInJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInJabbers.setStatus('current')
cm1110PortInRxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInRxErrs.setStatus('current')
cm1110PortInFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInFcsErrs.setStatus('current')
cm1110PortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts64Octets.setStatus('current')
cm1110PortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts65to127Octets.setStatus('current')
cm1110PortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts128to255Octets.setStatus('current')
cm1110PortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts256to511Octets.setStatus('current')
cm1110PortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts512to1023Octets.setStatus('current')
cm1110PortPkts1024toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts1024toMaxOctets.setStatus('current')
cm1110PortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutOctets.setStatus('current')
cm1110PortHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortHCOutOctets.setStatus('current')
cm1110PortOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutFiltered.setStatus('current')
cm1110PortOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutUnicasts.setStatus('current')
cm1110PortOutBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutBroadcasts.setStatus('current')
cm1110PortOutMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutMulticasts.setStatus('current')
cm1110PortOutPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutPauses.setStatus('current')
cm1110PortDeferreds = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortDeferreds.setStatus('current')
cm1110PortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortCollisions.setStatus('current')
cm1110PortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortSingles.setStatus('current')
cm1110PortMultiples = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortMultiples.setStatus('current')
cm1110PortExcessives = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortExcessives.setStatus('current')
cm1110PortLates = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortLates.setStatus('current')
cm1110PortOutFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutFcsErrs.setStatus('current')
cm1110PortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 39), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110PortResetCounters.setStatus('current')
cm1110RateConvAvctTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5), )
if mibBuilder.loadTexts: cm1110RateConvAvctTable.setStatus('current')
cm1110RateConvAvctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110AvctSlotIndex"))
if mibBuilder.loadTexts: cm1110RateConvAvctEntry.setStatus('current')
cm1110AvctSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110AvctSlotIndex.setStatus('current')
cm1110AvctStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 3), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110AvctStart.setStatus('current')
cm1110AvctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notStarted", 0), ("inProgress", 1), ("testComplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctStatus.setStatus('current')
cm1110AvctTxRxPair1Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Results.setStatus('current')
cm1110AvctTxRxPair1Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Amplitude.setStatus('current')
cm1110AvctTxRxPair1Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Distance.setStatus('current')
cm1110AvctTxRxPair2Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Results.setStatus('current')
cm1110AvctTxRxPair2Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Amplitude.setStatus('current')
cm1110AvctTxRxPair2Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Distance.setStatus('current')
cm1110AvctTxRxPair3Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Results.setStatus('current')
cm1110AvctTxRxPair3Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Amplitude.setStatus('current')
cm1110AvctTxRxPair3Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Distance.setStatus('current')
cm1110AvctTxRxPair4Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Results.setStatus('current')
cm1110AvctTxRxPair4Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Amplitude.setStatus('current')
cm1110AvctTxRxPair4Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Distance.setStatus('current')
cm110RateConv = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4))
cm110RateConvTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1), )
if mibBuilder.loadTexts: cm110RateConvTable.setStatus('current')
cm110RateConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110SlotIndex"))
if mibBuilder.loadTexts: cm110RateConvEntry.setStatus('current')
cm110SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110SlotIndex.setStatus('current')
cm110Modelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110Modelname.setStatus('current')
cm110ModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110ModelDesc.setStatus('current')
cm110HwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwJmp5ConfigMode.setStatus('current')
cm110HwJmp6AutoMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdix", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwJmp6AutoMDIX.setStatus('current')
cm110HwSw1TpAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw1TpAutoNegotiation.setStatus('current')
cm110HwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownNormalMode", 0), ("swUpSmartLinkPassthroughMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw2LinkMode.setStatus('current')
cm110HwSw3FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw3FarEndFault.setStatus('current')
cm110HwSw4TpDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw4TpDuplex.setStatus('current')
cm110HwSw5TpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDown10Mbps", 0), ("swUp100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw5TpSpeed.setStatus('current')
cm110HwSw6FiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw6FiberDuplex.setStatus('current')
cm110HwSw7Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw7Loopback.setStatus('current')
cm110FiberLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110FiberLinkStatus.setStatus('current')
cm110FiberConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110FiberConnType.setStatus('current')
cm110FiberSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110FiberSpeed.setStatus('current')
cm110FiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110FiberFarEndFault.setStatus('current')
cm110FiberReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110FiberReceiveStatus.setStatus('current')
cm110FiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 19), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110FiberLoopBack.setStatus('current')
cm110CopperLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperLinkStatus.setStatus('current')
cm110CopperConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperConnType.setStatus('current')
cm110CopperAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperAutoNegState.setStatus('current')
cm110CopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperSpeed.setStatus('current')
cm110CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperDuplex.setStatus('current')
cm110CopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperCrossOver.setStatus('current')
cm110CopperPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperPause.setStatus('current')
cm110CopperLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperLPRFStatus.setStatus('current')
cm110ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2), )
if mibBuilder.loadTexts: cm110ConfigTable.setStatus('current')
cm110ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110ConfigSlotIndex"))
if mibBuilder.loadTexts: cm110ConfigEntry.setStatus('current')
cm110ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110ConfigSlotIndex.setStatus('current')
cm110ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigStatus.setStatus('current')
cm110ConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigModuleName.setStatus('current')
cm110ConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("linkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigLinkMode.setStatus('current')
cm110ConfigFiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberFarEndFault.setStatus('current')
cm110ConfigMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("maxpacket1522", 0), ("maxpacket2048", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigMaxPacketSize.setStatus('current')
cm110ConfigFiberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPortName.setStatus('current')
cm110ConfigFiberPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPortEnable.setStatus('current')
cm110ConfigFiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110ConfigFiberDuplex.setStatus('current')
cm110ConfigCopperPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPortName.setStatus('current')
cm110ConfigCopperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 12), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPortEnable.setStatus('current')
cm110ConfigCopperAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegotiation.setStatus('current')
cm110ConfigCopperAutoNegAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 14), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv10HDX.setStatus('current')
cm110ConfigCopperAutoNegAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 15), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv10FDX.setStatus('current')
cm110ConfigCopperAutoNegAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 16), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv100HDX.setStatus('current')
cm110ConfigCopperAutoNegAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 17), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv100FDX.setStatus('current')
cm110ConfigCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperSpeed.setStatus('current')
cm110ConfigCopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDuplex.setStatus('current')
cm110ConfigCopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperCrossOver.setStatus('current')
cm110ConfigCopperPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPause.setStatus('current')
cm110ConfigCopperExtendDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 22), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperExtendDistance.setStatus('current')
cm110ConfigUnidirectionalEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("copperToFiber", 1), ("fiberToCopper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigUnidirectionalEthernet.setStatus('current')
cm110ConfigPriorityToEgressQueueMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap0.setStatus('current')
cm110ConfigPriorityToEgressQueueMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap1.setStatus('current')
cm110ConfigPriorityToEgressQueueMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap2.setStatus('current')
cm110ConfigPriorityToEgressQueueMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap3.setStatus('current')
cm110ConfigPriorityToEgressQueueMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap4.setStatus('current')
cm110ConfigPriorityToEgressQueueMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap5.setStatus('current')
cm110ConfigPriorityToEgressQueueMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap6.setStatus('current')
cm110ConfigPriorityToEgressQueueMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap7.setStatus('current')
cm110ConfigCopper8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 32), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopper8021pPriority.setStatus('current')
cm110ConfigCopperIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 33), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperIpTosPriority.setStatus('current')
cm110ConfigCopperPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityPrecedence.setStatus('current')
cm110ConfigCopperCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperCongestionPolicy.setStatus('current')
cm110ConfigCopperPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap0.setStatus('current')
cm110ConfigCopperPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap1.setStatus('current')
cm110ConfigCopperPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap2.setStatus('current')
cm110ConfigCopperPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap3.setStatus('current')
cm110ConfigCopperPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap4.setStatus('current')
cm110ConfigCopperPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap5.setStatus('current')
cm110ConfigCopperPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap6.setStatus('current')
cm110ConfigCopperPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap7.setStatus('current')
cm110ConfigCopperIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperIngressLimit.setStatus('current')
cm110ConfigCopperEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperEgressLimit.setStatus('current')
cm110ConfigCopperDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 46), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDiscardTaggedFrames.setStatus('current')
cm110ConfigCopperDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 47), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDiscardUntaggedFrames.setStatus('current')
cm110ConfigCopperDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDefaultVlanId.setStatus('current')
cm110ConfigCopperDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDefaultPriority.setStatus('current')
cm110ConfigCopperVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperVlanTaggingAction.setStatus('current')
cm110ConfigCopperFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 51), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperFilterUnknownMulticast.setStatus('current')
cm110ConfigCopperFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 52), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperFilterUnknownUnicast.setStatus('current')
cm110ConfigFiber8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 53), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiber8021pPriority.setStatus('current')
cm110ConfigFiberIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 54), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberIpTosPriority.setStatus('current')
cm110ConfigFiberPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityPrecedence.setStatus('current')
cm110ConfigFiberCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberCongestionPolicy.setStatus('current')
cm110ConfigFiberPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap0.setStatus('current')
cm110ConfigFiberPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap1.setStatus('current')
cm110ConfigFiberPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap2.setStatus('current')
cm110ConfigFiberPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap3.setStatus('current')
cm110ConfigFiberPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap4.setStatus('current')
cm110ConfigFiberPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap5.setStatus('current')
cm110ConfigFiberPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap6.setStatus('current')
cm110ConfigFiberPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap7.setStatus('current')
cm110ConfigFiberIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberIngressLimit.setStatus('current')
cm110ConfigFiberEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberEgressLimit.setStatus('current')
cm110ConfigFiberDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 67), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberDiscardTaggedFrames.setStatus('current')
cm110ConfigFiberDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 68), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberDiscardUntaggedFrames.setStatus('current')
cm110ConfigFiberDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberDefaultVlanId.setStatus('current')
cm110ConfigFiberDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberDefaultPriority.setStatus('current')
cm110ConfigFiberVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberVlanTaggingAction.setStatus('current')
cm110ConfigFiberFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 72), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberFilterUnknownMulticast.setStatus('current')
cm110ConfigFiberFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 73), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberFilterUnknownUnicast.setStatus('current')
cm110LedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3), )
if mibBuilder.loadTexts: cm110LedTable.setStatus('current')
cm110LedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110LedSlotIndex"))
if mibBuilder.loadTexts: cm110LedEntry.setStatus('current')
cm110LedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110LedSlotIndex.setStatus('current')
cm110LedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedPWR.setStatus('current')
cm110LedFDF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offHalfDuplex", 0), ("onFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedFDF.setStatus('current')
cm110LedLKF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedLKF.setStatus('current')
cm110LedCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off10Mbps", 0), ("onGreen100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedCopperSpeed.setStatus('current')
cm110LedFDC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offHalfDuplex", 0), ("onFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedFDC.setStatus('current')
cm110LedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedLKC.setStatus('current')
cm110RateConvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4), )
if mibBuilder.loadTexts: cm110RateConvStatsTable.setStatus('current')
cm110RateConvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110StatsSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110MediaPortIndex"))
if mibBuilder.loadTexts: cm110RateConvStatsEntry.setStatus('current')
cm110StatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110StatsSlotIndex.setStatus('current')
cm110MediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2))))
if mibBuilder.loadTexts: cm110MediaPortIndex.setStatus('current')
cm110PortRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortRxErrors.setStatus('current')
cm110PortTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortTxCollisions.setStatus('current')
cm110PortInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInFiltered.setStatus('current')
cm110PortInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInGoodOctets.setStatus('current')
cm110PortInBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInBadOctets.setStatus('current')
cm110PortInUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInUnicasts.setStatus('current')
cm110PortInBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInBroadcasts.setStatus('current')
cm110PortInMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInMulticasts.setStatus('current')
cm110PortInPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInPauses.setStatus('current')
cm110PortInUnderSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInUnderSizes.setStatus('current')
cm110PortInFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInFragments.setStatus('current')
cm110PortInOversizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInOversizes.setStatus('current')
cm110PortInJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInJabbers.setStatus('current')
cm110PortInMACRcvErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInMACRcvErrs.setStatus('current')
cm110PortInFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInFcsErrs.setStatus('current')
cm110PortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts64Octets.setStatus('current')
cm110PortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts65to127Octets.setStatus('current')
cm110PortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts128to255Octets.setStatus('current')
cm110PortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts256to511Octets.setStatus('current')
cm110PortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts512to1023Octets.setStatus('current')
cm110PortPkts1024toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts1024toMaxOctets.setStatus('current')
cm110PortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutOctets.setStatus('current')
cm110PortOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutUnicasts.setStatus('current')
cm110PortOutBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutBroadcasts.setStatus('current')
cm110PortOutMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutMulticasts.setStatus('current')
cm110PortOutPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutPauses.setStatus('current')
cm110PortDeferreds = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortDeferreds.setStatus('current')
cm110PortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortCollisions.setStatus('current')
cm110PortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortSingles.setStatus('current')
cm110PortMultiples = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortMultiples.setStatus('current')
cm110PortExcessives = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortExcessives.setStatus('current')
cm110PortLates = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortLates.setStatus('current')
cm110PortOutFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutFcsErrs.setStatus('current')
cm110PortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 37), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110PortResetCounters.setStatus('current')
cm110RateConvVctTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5), )
if mibBuilder.loadTexts: cm110RateConvVctTable.setStatus('current')
cm110RateConvVctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110VctSlotIndex"))
if mibBuilder.loadTexts: cm110RateConvVctEntry.setStatus('current')
cm110VctSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110VctSlotIndex.setStatus('current')
cm110VctStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 3), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110VctStart.setStatus('current')
cm110VctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notStarted", 0), ("inProgress", 1), ("testComplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctStatus.setStatus('current')
cm110VctTxPairResults = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctTxPairResults.setStatus('current')
cm110VctTxPairAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctTxPairAmplitude.setStatus('current')
cm110VctTxPairDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctTxPairDistance.setStatus('current')
cm110VctRxPairResults = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctRxPairResults.setStatus('current')
cm110VctRxPairAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctRxPairAmplitude.setStatus('current')
cm110VctRxPairDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctRxPairDistance.setStatus('current')
mcrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5))
mcrMgtTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1), )
if mibBuilder.loadTexts: mcrMgtTable.setStatus('current')
mcrMgtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrMgtSlotIndex"))
if mibBuilder.loadTexts: mcrMgtEntry.setStatus('current')
mcrMgtSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: mcrMgtSlotIndex.setStatus('current')
mcrMgtModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtModelName.setStatus('current')
mcrMgtModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtModelDesc.setStatus('current')
mcrMgtFailSafeBootLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtFailSafeBootLoaderVer.setStatus('current')
mcrMgtUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtUpTime.setStatus('current')
mcrMgtConsoleDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 7), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtConsoleDSR.setStatus('current')
mcrMgtConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2), )
if mibBuilder.loadTexts: mcrMgtConfigTable.setStatus('current')
mcrMgtConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrMgtConfigSlotIndex"))
if mibBuilder.loadTexts: mcrMgtConfigEntry.setStatus('current')
mcrMgtConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: mcrMgtConfigSlotIndex.setStatus('current')
mcrMgtConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigStatus.setStatus('current')
mcrMgtConfigEthSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("auto", 0), ("speed10Half", 1), ("speed10Full", 2), ("speed100Half", 3), ("speed100Full", 4), ("speed1000", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigEthSpeedDuplex.setStatus('current')
mcrMgtConfigEthCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigEthCrossover.setStatus('current')
mcrMgtConfigConsolePortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 6), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsolePortEnabled.setStatus('current')
mcrMgtConfigConsoleSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("b9600", 13), ("b19200", 14), ("b38400", 15), ("b57600", 16), ("b115200", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleSpeed.setStatus('current')
mcrMgtConfigConsoleDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("d7", 2), ("d8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleDataBits.setStatus('current')
mcrMgtConfigConsoleParity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleParity.setStatus('current')
mcrMgtConfigConsoleStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("s1", 0), ("s2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleStopBits.setStatus('current')
mcrMgtConfigConsoleFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("soft", 1), ("hard", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleFlowControl.setStatus('current')
mcrMgtConfigConsoleMonitorDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleMonitorDSR.setStatus('current')
mcrMgtLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3), )
if mibBuilder.loadTexts: mcrMgtLedTable.setStatus('current')
mcrMgtLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrMgtLedSlotIndex"))
if mibBuilder.loadTexts: mcrMgtLedEntry.setStatus('current')
mcrMgtLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: mcrMgtLedSlotIndex.setStatus('current')
mcrMgtLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtLedPWR.setStatus('current')
mcrMgtLedALM = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offNoAlarms", 0), ("onRedAlarmsPresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtLedALM.setStatus('current')
mcrMgtLedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offLinkDown", 0), ("onGreenLinkUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtLedLKC.setStatus('current')
mcrMgtLedCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off10Mbps", 0), ("onYellow100Mbps", 1), ("onGreen1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtLedCopperSpeed.setStatus('current')
mcrMgtEthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4), )
if mibBuilder.loadTexts: mcrMgtEthStatsTable.setStatus('current')
mcrMgtEthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mgtEthSlotIndex"))
if mibBuilder.loadTexts: mcrMgtEthStatsEntry.setStatus('current')
mgtEthSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 2), SlotNumber())
if mibBuilder.loadTexts: mgtEthSlotIndex.setStatus('current')
mgtEthStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 3), GenericTableIndex())
if mibBuilder.loadTexts: mgtEthStatsIfIndex.setStatus('current')
mgtEthStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsName.setStatus('current')
mgtEthStatsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsMacAddress.setStatus('current')
mgtEthStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsStatus.setStatus('current')
mgtEthStatsSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("speed10Half", 1), ("speed10Full", 2), ("speed100Half", 3), ("speed100Full", 4), ("speed1000Half", 5), ("speed1000Full", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsSpeedDuplex.setStatus('current')
mgtEthStatsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 8), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsBroadcast.setStatus('current')
mgtEthStatsDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 9), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsDebug.setStatus('current')
mgtEthStatsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 10), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsLoopback.setStatus('current')
mgtEthStatsPointtoPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 11), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsPointtoPoint.setStatus('current')
mgtEthStatsNoTrailers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 12), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsNoTrailers.setStatus('current')
mgtEthStatsRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 13), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRunning.setStatus('current')
mgtEthStatsNoArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 14), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsNoArp.setStatus('current')
mgtEthStatsPromiscuous = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 15), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsPromiscuous.setStatus('current')
mgtEthStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 16), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxMulticast.setStatus('current')
mgtEthStatsMasterLoadBalancer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 17), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsMasterLoadBalancer.setStatus('current')
mgtEthStatsSlaveLoadBalancer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 18), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsSlaveLoadBalancer.setStatus('current')
mgtEthStatsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 19), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsMulticast.setStatus('current')
mgtEthStatsSetMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 20), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsSetMedia.setStatus('current')
mgtEthStatsAutoMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 21), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsAutoMedia.setStatus('current')
mgtEthStatsDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 22), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsDynamic.setStatus('current')
mgtEthStatsLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsLocalAddress.setStatus('current')
mgtEthStatsSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsSubnetMask.setStatus('current')
mgtEthStatsBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsBroadcastAddress.setStatus('current')
mgtEthStatsMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsMtu.setStatus('current')
mgtEthStatsTxQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxQLen.setStatus('current')
mgtEthStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxBytes.setStatus('current')
mgtEthStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxBytes.setStatus('current')
mgtEthStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxPackets.setStatus('current')
mgtEthStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxPackets.setStatus('current')
mgtEthStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxErrors.setStatus('current')
mgtEthStatsTxPktErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxPktErrors.setStatus('current')
mgtEthStatsRxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxDroppedPkts.setStatus('current')
mgtEthStatsTxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxDroppedPkts.setStatus('current')
mgtEthStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxOverruns.setStatus('current')
mgtEthStatsTxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxOverruns.setStatus('current')
mgtEthStatsRxFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxFrameErrs.setStatus('current')
mgtEthStatsTxCarrierErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxCarrierErrs.setStatus('current')
mgtEthStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsCollisions.setStatus('current')
cm10gFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8))
cm10gFixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1), )
if mibBuilder.loadTexts: cm10gFixedTable.setStatus('current')
cm10gFixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gSlotIndex"))
if mibBuilder.loadTexts: cm10gFixedEntry.setStatus('current')
cm10gSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gSlotIndex.setStatus('current')
cm10gModelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gModelname.setStatus('current')
cm10gModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gModelDesc.setStatus('current')
cm10gHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwJmp5ConfigMode.setStatus('current')
cm10gHwSw1OperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("test", 0), ("data", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw1OperationMode.setStatus('current')
cm10gHwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw2LinkMode.setStatus('current')
cm10gHwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw3FiberFaultAlert.setStatus('current')
cm10gHwSw4Port1EdcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw4Port1EdcMode.setStatus('current')
cm10gHwSw5Port2EdcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw5Port2EdcMode.setStatus('current')
cm10gPort1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1LinkStatus.setStatus('current')
cm10gPort1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1ConnType.setStatus('current')
cm10gPort1AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1AutoNegState.setStatus('current')
cm10gPort1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1Speed.setStatus('current')
cm10gPort1Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1Duplex.setStatus('current')
cm10gPort1PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1PauseEnh.setStatus('current')
cm10gPort1ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1ReceiveStatus.setStatus('current')
cm10gPort2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2LinkStatus.setStatus('current')
cm10gPort2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2ConnType.setStatus('current')
cm10gPort2AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2AutoNegState.setStatus('current')
cm10gPort2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2Speed.setStatus('current')
cm10gPort2Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2Duplex.setStatus('current')
cm10gPort2PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2PauseEnh.setStatus('current')
cm10gPort2ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2ReceiveStatus.setStatus('current')
cm10gPortLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gPortLoopBack.setStatus('current')
cm10gPortTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPortTestMode.setStatus('current')
cm10gConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2), )
if mibBuilder.loadTexts: cm10gConfigTable.setStatus('current')
cm10gConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gConfigSlotIndex"))
if mibBuilder.loadTexts: cm10gConfigEntry.setStatus('current')
cm10gConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gConfigSlotIndex.setStatus('current')
cm10gConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigStatus.setStatus('current')
cm10gConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigModuleName.setStatus('current')
cm10gConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigLinkMode.setStatus('current')
cm10gConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigFiberFaultAlert.setStatus('current')
cm10gConfigFiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 7), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigFiberAutoNeg.setStatus('current')
cm10gConfigPort1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1Name.setStatus('current')
cm10gConfigPort1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1Enable.setStatus('current')
cm10gConfigPort1EdcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("alternate", 1), ("linear", 2), ("limiting", 3), ("cx1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1EdcMode.setStatus('current')
cm10gConfigPort1FecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 11), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1FecEnable.setStatus('current')
cm10gConfigPort1FecAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1FecAmplitude.setStatus('current')
cm10gConfigPort1FecPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1FecPhase.setStatus('current')
cm10gConfigPort1WavelengthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 14), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1WavelengthEnable.setStatus('current')
cm10gConfigPort1WavelengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1WavelengthValue.setStatus('current')
cm10gConfigPort1ChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 16), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1ChannelEnable.setStatus('current')
cm10gConfigPort1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1ChannelNumber.setStatus('current')
cm10gConfigPort1TxDitherEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 18), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1TxDitherEnable.setStatus('current')
cm10gConfigPort1TxDitherValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 19), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1TxDitherValue.setStatus('current')
cm10gConfigPort2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2Name.setStatus('current')
cm10gConfigPort2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 21), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2Enable.setStatus('current')
cm10gConfigPort2EdcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("alternate", 1), ("linear", 2), ("limiting", 3), ("cx1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2EdcMode.setStatus('current')
cm10gConfigPort2FecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 23), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2FecEnable.setStatus('current')
cm10gConfigPort2FecAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2FecAmplitude.setStatus('current')
cm10gConfigPort2FecPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2FecPhase.setStatus('current')
cm10gConfigPort2WavelengthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 26), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2WavelengthEnable.setStatus('current')
cm10gConfigPort2WavelengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2WavelengthValue.setStatus('current')
cm10gConfigPort2ChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 28), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2ChannelEnable.setStatus('current')
cm10gConfigPort2ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2ChannelNumber.setStatus('current')
cm10gConfigPort2TxDitherEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 30), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2TxDitherEnable.setStatus('current')
cm10gConfigPort2TxDitherValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 31), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2TxDitherValue.setStatus('current')
cm10gLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3), )
if mibBuilder.loadTexts: cm10gLedTable.setStatus('current')
cm10gLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gLedsSlotIndex"))
if mibBuilder.loadTexts: cm10gLedEntry.setStatus('current')
cm10gLedsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gLedsSlotIndex.setStatus('current')
cm10gLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gLedPWR.setStatus('current')
cm10gLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gLedLK1.setStatus('current')
cm10gLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gLedLK2.setStatus('current')
exCM = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9))
exCMTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1), )
if mibBuilder.loadTexts: exCMTable.setStatus('current')
exCMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMSlotIndex"))
if mibBuilder.loadTexts: exCMEntry.setStatus('current')
exCMSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMSlotIndex.setStatus('current')
exCMModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMModelName.setStatus('current')
exCMModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMModelDesc.setStatus('current')
exCMHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwJmp5ConfigMode.setStatus('current')
exCMHwSw1AutoLocalRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownRemote", 0), ("swUpAutoLocal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw1AutoLocalRemote.setStatus('current')
exCMHwSw2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownLongRange", 0), ("swUpHighSpeed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw2Rate.setStatus('current')
exCMHwSw3SymmetricAsymmetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw3SymmetricAsymmetric.setStatus('current')
exCMHwSw4SnrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDown6db", 0), ("swUp9db", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw4SnrRatio.setStatus('current')
exCMHwSw5Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw5Loopback.setStatus('current')
exCMHwSw6EthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw6EthAutoNeg.setStatus('current')
exCMHwSw7EthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDown10Mbps", 0), ("swUp100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw7EthSpeed.setStatus('current')
exCMHwSw8EthDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw8EthDuplex.setStatus('current')
exCMHwSw9LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw9LinkMode.setStatus('current')
exCMHwSw10InterlinkFaultFeedback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw10InterlinkFaultFeedback.setStatus('current')
exCMVdslLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("handshake", 1), ("training", 2), ("up", 3), ("upLogicallyDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslLinkStatus.setStatus('current')
exCMVdslConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 11))).clone(namedValues=NamedValues(("rj45", 9), ("terminalBlock", 10), ("bnc", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslConnType.setStatus('current')
exCMVdslLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 18), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMVdslLoopBack.setStatus('current')
exCMVdslRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslRole.setStatus('current')
exCMVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("notApplicable", 0), ("profile1-AnnexA-R-POTS-D-32-EU-32-30a", 1), ("profile2-AnnexA-R-POTS-D-32-EU-32-17a", 2), ("profile3-AnnexA-R-POTS-D-32-EU-32-12b", 3), ("profile4-AnnexA-R-POTS-D-32-EU-32-12a", 4), ("profile5-AnnexA-R-POTS-D-32-EU-32-8a", 5), ("profile6-AnnexA-R-POTS-D-32-EU-32-8b", 6), ("profile7-AnnexA-R-POTS-D-32-EU-32-8c", 7), ("profile8-AnnexA-R-POTS-D-32-EU-32-8d", 8), ("profile9-AnnexA-R-POTS-D-64-EU-64-30a-NUS0", 9), ("profile10-AnnexA-R-POTS-D-64-EU-64-17a", 10), ("profile11-AnnexB-B7-3-997-M1x-M", 11), ("profile12-AnnexB-B7-4-997-M2x-M-8", 12), ("profile13-AnnexB-B7-5-997-M2x-A", 13), ("profile14-AnnexB-B7-6-997-M2x-M", 14), ("profile15-AnnexB-B7-9-997E17-M2x-A", 15), ("profile16-AnnexB-B7-10-997E30-M2x-NUS0", 16), ("profile17-AnnexB-B8-1-998-M1x-A", 17), ("profile18-AnnexB-B8-2-998-M1x-B", 18), ("profile19-AnnexB-B8-4-998-M2x-A", 19), ("profile20-AnnexB-B8-5-998-M2x-M", 20), ("profile21-AnnexB-B8-6-998-M2x-B", 21), ("profile22-AnnexB-B8-8-998E17-M2x-NUS0", 22), ("profile23-AnnexB-B8-9-998E17-M2x-NUS0-M", 23), ("profile24-AnnexB-B8-10-998ADE17-M2x-NUS0-M", 24), ("profile25-AnnexB-B8-11-998E17-M2x-A", 25), ("profile26-AnnexB-B8-12-998E17-M2x-B", 26), ("profile27-AnnexB-B8-13-998E30-M2x-NUS0", 27), ("profile28-AnnexB-B8-14-998E30-M2x-NUS0-M", 28), ("profile29-AnnexB-B8-15-998ADE30-M2x-NUS0-M", 29), ("profile30-AnnexB-B8-16-998ADE30-M2x-NUS0-A", 30), ("profile31-AnnexC-POTS-25-138-b", 31), ("profile32-AnnexC-POTS-25-276-b", 32), ("profile33-AnnexC-TMC-ISDN", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslProfile.setStatus('current')
exCMVdslBitswapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslBitswapping.setStatus('current')
exCMVdslStatusAttainableDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusAttainableDataRateUp.setStatus('current')
exCMVdslStatusAttainableDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusAttainableDataRateDown.setStatus('current')
exCMVdslStatusActualDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualDataRateUp.setStatus('current')
exCMVdslStatusActualDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualDataRateDown.setStatus('current')
exCMVdslStatusPrevDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusPrevDataRateUp.setStatus('current')
exCMVdslStatusPrevDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusPrevDataRateDown.setStatus('current')
exCMVdslStatusActualSnrUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUp.setStatus('current')
exCMVdslStatusActualSnrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDown.setStatus('current')
exCMVdslStatusActualSnrUs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs0.setStatus('current')
exCMVdslStatusActualSnrUs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs1.setStatus('current')
exCMVdslStatusActualSnrDs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs1.setStatus('current')
exCMVdslStatusActualSnrUs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs2.setStatus('current')
exCMVdslStatusActualSnrDs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs2.setStatus('current')
exCMVdslStatusActualSnrUs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs3.setStatus('current')
exCMVdslStatusActualSnrDs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs3.setStatus('current')
exCMVdslStatusActualSnrUs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs4.setStatus('current')
exCMVdslStatusActualSnrDs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs4.setStatus('current')
exCMVdslStatusActualSignalAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUp.setStatus('current')
exCMVdslStatusActualSignalAttenuationDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDown.setStatus('current')
exCMVdslStatusActualSignalAttenuationUs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs0.setStatus('current')
exCMVdslStatusActualSignalAttenuationUs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs1.setStatus('current')
exCMVdslStatusActualSignalAttenuationDs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs1.setStatus('current')
exCMVdslStatusActualSignalAttenuationUs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs2.setStatus('current')
exCMVdslStatusActualSignalAttenuationDs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs2.setStatus('current')
exCMVdslStatusActualSignalAttenuationUs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs3.setStatus('current')
exCMVdslStatusActualSignalAttenuationDs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs3.setStatus('current')
exCMVdslStatusActualSignalAttenuationUs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs4.setStatus('current')
exCMVdslStatusActualSignalAttenuationDs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs4.setStatus('current')
exCMVdslStatusActualLineAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUp.setStatus('current')
exCMVdslStatusActualLineAttenuationDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDown.setStatus('current')
exCMVdslStatusActualLineAttenuationUs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs0.setStatus('current')
exCMVdslStatusActualLineAttenuationUs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs1.setStatus('current')
exCMVdslStatusActualLineAttenuationDs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs1.setStatus('current')
exCMVdslStatusActualLineAttenuationUs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs2.setStatus('current')
exCMVdslStatusActualLineAttenuationDs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs2.setStatus('current')
exCMVdslStatusActualLineAttenuationUs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs3.setStatus('current')
exCMVdslStatusActualLineAttenuationDs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs3.setStatus('current')
exCMVdslStatusActualLineAttenuationUs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs4.setStatus('current')
exCMVdslStatusActualLineAttenuationDs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs4.setStatus('current')
exCMVdslStatusActualInterleaveDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleaveDelayUp.setStatus('current')
exCMVdslStatusActualInterleaveDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleaveDelayDown.setStatus('current')
exCMVdslStatusActualInpUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInpUp.setStatus('current')
exCMVdslStatusActualInpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInpDown.setStatus('current')
exCMVdslStatusActualInterleavingDepthUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingDepthUp.setStatus('current')
exCMVdslStatusActualInterleavingDepthDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingDepthDown.setStatus('current')
exCMVdslStatusActualInterleavingBlockUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingBlockUp.setStatus('current')
exCMVdslStatusActualInterleavingBlockDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingBlockDown.setStatus('current')
exCMVdslStatusActualTransmitPowerUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualTransmitPowerUp.setStatus('current')
exCMVdslStatusActualTransmitPowerDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualTransmitPowerDown.setStatus('current')
exCMVdslStatusMaxDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMaxDataRateUp.setStatus('current')
exCMVdslStatusMaxDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMaxDataRateDown.setStatus('current')
exCMVdslStatusMinDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMinDataRateUp.setStatus('current')
exCMVdslStatusMinDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMinDataRateDown.setStatus('current')
exCMVdslStatusTargetSnrUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusTargetSnrUp.setStatus('current')
exCMVdslStatusTargetSnrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusTargetSnrDown.setStatus('current')
exCMVdslStatusMaxInterleaveDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMaxInterleaveDelayUp.setStatus('current')
exCMVdslStatusMaxInterleaveDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMaxInterleaveDelayDown.setStatus('current')
exCMVdslStatusMinInpUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMinInpUp.setStatus('current')
exCMVdslStatusMinInpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMinInpDown.setStatus('current')
exCMVdslRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("remoteLoopbackOff", 1), ("remoteLoopbackOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMVdslRemoteLoopback.setStatus('current')
exCMVdslRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notApplicable", 0), ("resetRemotePeer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMVdslRemoteReset.setStatus('current')
exCMEthernetLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetLinkStatus.setStatus('current')
exCMEthernetConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetConnType.setStatus('current')
exCMEthernetAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetAutoNegState.setStatus('current')
exCMEthernetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetSpeed.setStatus('current')
exCMEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetDuplex.setStatus('current')
exCMEthernetCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetCrossOver.setStatus('current')
exCMEthernetPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetPauseEnh.setStatus('current')
exCMEthernetLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetLPRFStatus.setStatus('current')
exCMEthernetAutoSpeedDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noDownshift", 0), ("downshift", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetAutoSpeedDownshift.setStatus('current')
exCMEthernetMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetMDI.setStatus('current')
exCMVdslFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslFirmwareVersion.setStatus('current')
exCMVdslFirmwareDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 94), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslFirmwareDate.setStatus('current')
exCMVdslFirmwareDateString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 95), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslFirmwareDateString.setStatus('current')
exCMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2), )
if mibBuilder.loadTexts: exCMConfigTable.setStatus('current')
exCMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMConfigSlotIndex"))
if mibBuilder.loadTexts: exCMConfigEntry.setStatus('current')
exCMConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMConfigSlotIndex.setStatus('current')
exCMConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigStatus.setStatus('current')
exCMConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigModuleName.setStatus('current')
exCMConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigLinkMode.setStatus('current')
exCMConfigInterlinkFaultFeedback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigInterlinkFaultFeedback.setStatus('current')
exCMConfigVdslPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPortName.setStatus('current')
exCMConfigVdslPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 8), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPortEnable.setStatus('current')
exCMConfigVdslProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslProfileMode.setStatus('current')
exCMConfigVdslRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslRole.setStatus('current')
exCMConfigVdslRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("highSpeed", 0), ("longRange", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslRate.setStatus('current')
exCMConfigVdslSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("asymmetric", 0), ("symmetric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslSymmetry.setStatus('current')
exCMConfigVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("profile1-AnnexA-R-POTS-D-32-EU-32-30a", 1), ("profile2-AnnexA-R-POTS-D-32-EU-32-17a", 2), ("profile3-AnnexA-R-POTS-D-32-EU-32-12b", 3), ("profile4-AnnexA-R-POTS-D-32-EU-32-12a", 4), ("profile5-AnnexA-R-POTS-D-32-EU-32-8a", 5), ("profile6-AnnexA-R-POTS-D-32-EU-32-8b", 6), ("profile7-AnnexA-R-POTS-D-32-EU-32-8c", 7), ("profile8-AnnexA-R-POTS-D-32-EU-32-8d", 8), ("profile9-AnnexA-R-POTS-D-64-EU-64-30a-NUS0", 9), ("profile10-AnnexA-R-POTS-D-64-EU-64-17a", 10), ("profile11-AnnexB-B7-3-997-M1x-M", 11), ("profile12-AnnexB-B7-4-997-M2x-M-8", 12), ("profile13-AnnexB-B7-5-997-M2x-A", 13), ("profile14-AnnexB-B7-6-997-M2x-M", 14), ("profile15-AnnexB-B7-9-997E17-M2x-A", 15), ("profile16-AnnexB-B7-10-997E30-M2x-NUS0", 16), ("profile17-AnnexB-B8-1-998-M1x-A", 17), ("profile18-AnnexB-B8-2-998-M1x-B", 18), ("profile19-AnnexB-B8-4-998-M2x-A", 19), ("profile20-AnnexB-B8-5-998-M2x-M", 20), ("profile21-AnnexB-B8-6-998-M2x-B", 21), ("profile22-AnnexB-B8-8-998E17-M2x-NUS0", 22), ("profile23-AnnexB-B8-9-998E17-M2x-NUS0-M", 23), ("profile24-AnnexB-B8-10-998ADE17-M2x-NUS0-M", 24), ("profile25-AnnexB-B8-11-998E17-M2x-A", 25), ("profile26-AnnexB-B8-12-998E17-M2x-B", 26), ("profile27-AnnexB-B8-13-998E30-M2x-NUS0", 27), ("profile28-AnnexB-B8-14-998E30-M2x-NUS0-M", 28), ("profile29-AnnexB-B8-15-998ADE30-M2x-NUS0-M", 29), ("profile30-AnnexB-B8-16-998ADE30-M2x-NUS0-A", 30), ("profile31-AnnexC-POTS-25-138-b", 31), ("profile32-AnnexC-POTS-25-276-b", 32), ("profile33-AnnexC-TMC-ISDN", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslProfile.setStatus('current')
exCMConfigVdslOverrideProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 14), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslOverrideProfile.setStatus('current')
exCMConfigVdslSignalToNoiseRatioUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslSignalToNoiseRatioUp.setStatus('current')
exCMConfigVdslMinDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 101064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMinDataRateUp.setStatus('current')
exCMConfigVdslMaxDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 101064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMaxDataRateUp.setStatus('current')
exCMConfigVdslMaxInterleaveDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMaxInterleaveDelayUp.setStatus('current')
exCMConfigVdslMinInpUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMinInpUp.setStatus('current')
exCMConfigVdslSignalToNoiseRatioDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslSignalToNoiseRatioDown.setStatus('current')
exCMConfigVdslMinDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 101064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMinDataRateDown.setStatus('current')
exCMConfigVdslMaxDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 101064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMaxDataRateDown.setStatus('current')
exCMConfigVdslMaxInterleaveDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMaxInterleaveDelayDown.setStatus('current')
exCMConfigVdslMinInpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMinInpDown.setStatus('current')
exCMConfigVdslBitswapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 25), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslBitswapping.setStatus('current')
exCMConfigVdslLowBandwidthAlarmUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslLowBandwidthAlarmUp.setStatus('current')
exCMConfigVdslLowBandwidthAlarmDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslLowBandwidthAlarmDown.setStatus('current')
exCMConfigEthernetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPortName.setStatus('current')
exCMConfigEthernetPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 29), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPortEnable.setStatus('current')
exCMConfigEthernetAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 30), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegotiation.setStatus('current')
exCMConfigEthernetAutoNegAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 31), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv10HDX.setStatus('current')
exCMConfigEthernetAutoNegAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 32), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv10FDX.setStatus('current')
exCMConfigEthernetAutoNegAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 33), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv100HDX.setStatus('current')
exCMConfigEthernetAutoNegAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 34), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv100FDX.setStatus('current')
exCMConfigEthernetAutoNegAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 35), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv1000FDX.setStatus('current')
exCMConfigEthernetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetSpeed.setStatus('current')
exCMConfigEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDuplex.setStatus('current')
exCMConfigEthernetCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetCrossOver.setStatus('current')
exCMConfigEthernetPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("symmAsymRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPauseEnh.setStatus('current')
exCMConfigEthernetAutoSpeedDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoSpeedDownshift.setStatus('current')
exCMConfigEthernet10BaseTDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("extended", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernet10BaseTDistance.setStatus('current')
exCMConfigUnidirectionalEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("ethernetToVdsl", 1), ("vdslToEthernet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigUnidirectionalEthernet.setStatus('current')
exCMConfigPriorityToEgressQueueMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap0.setStatus('current')
exCMConfigPriorityToEgressQueueMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap1.setStatus('current')
exCMConfigPriorityToEgressQueueMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap2.setStatus('current')
exCMConfigPriorityToEgressQueueMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap3.setStatus('current')
exCMConfigPriorityToEgressQueueMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap4.setStatus('current')
exCMConfigPriorityToEgressQueueMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap5.setStatus('current')
exCMConfigPriorityToEgressQueueMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap6.setStatus('current')
exCMConfigPriorityToEgressQueueMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap7.setStatus('current')
exCMConfigEthernet8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 51), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernet8021pPriority.setStatus('current')
exCMConfigEthernetIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 52), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetIpTosPriority.setStatus('current')
exCMConfigEthernetPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityPrecedence.setStatus('current')
exCMConfigEthernetCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetCongestionPolicy.setStatus('current')
exCMConfigEthernetPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap0.setStatus('current')
exCMConfigEthernetPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap1.setStatus('current')
exCMConfigEthernetPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap2.setStatus('current')
exCMConfigEthernetPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap3.setStatus('current')
exCMConfigEthernetPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap4.setStatus('current')
exCMConfigEthernetPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap5.setStatus('current')
exCMConfigEthernetPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap6.setStatus('current')
exCMConfigEthernetPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap7.setStatus('current')
exCMConfigEthernetIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetIngressLimit.setStatus('current')
exCMConfigEthernetEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetEgressLimit.setStatus('current')
exCMConfigEthernetDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 65), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDiscardTaggedFrames.setStatus('current')
exCMConfigEthernetDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 66), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDiscardUntaggedFrames.setStatus('current')
exCMConfigEthernetDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDefaultVlanId.setStatus('current')
exCMConfigEthernetDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDefaultPriority.setStatus('current')
exCMConfigEthernetVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetVlanTaggingAction.setStatus('current')
exCMConfigEthernetFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 70), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetFilterUnknownMulticast.setStatus('current')
exCMConfigEthernetFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 71), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetFilterUnknownUnicast.setStatus('current')
exCMConfigVdsl8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 72), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdsl8021pPriority.setStatus('current')
exCMConfigVdslIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 73), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslIpTosPriority.setStatus('current')
exCMConfigVdslPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityPrecedence.setStatus('current')
exCMConfigVdslCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslCongestionPolicy.setStatus('current')
exCMConfigVdslPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap0.setStatus('current')
exCMConfigVdslPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap1.setStatus('current')
exCMConfigVdslPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap2.setStatus('current')
exCMConfigVdslPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap3.setStatus('current')
exCMConfigVdslPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap4.setStatus('current')
exCMConfigVdslPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap5.setStatus('current')
exCMConfigVdslPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap6.setStatus('current')
exCMConfigVdslPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap7.setStatus('current')
exCMConfigVdslIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslIngressLimit.setStatus('current')
exCMConfigVdslEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslEgressLimit.setStatus('current')
exCMConfigVdslDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 86), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslDiscardTaggedFrames.setStatus('current')
exCMConfigVdslDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 87), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslDiscardUntaggedFrames.setStatus('current')
exCMConfigVdslDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslDefaultVlanId.setStatus('current')
exCMConfigVdslDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslDefaultPriority.setStatus('current')
exCMConfigVdslVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslVlanTaggingAction.setStatus('current')
exCMConfigVdslFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 91), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslFilterUnknownMulticast.setStatus('current')
exCMConfigVdslFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 92), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslFilterUnknownUnicast.setStatus('current')
exCMConfigVdslFastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 93), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslFastMode.setStatus('current')
exCMLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3), )
if mibBuilder.loadTexts: exCMLedTable.setStatus('current')
exCMLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMLedSlotIndex"))
if mibBuilder.loadTexts: exCMLedEntry.setStatus('current')
exCMLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMLedSlotIndex.setStatus('current')
exCMLedILNK = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("slowBlinkingGreen", 1), ("fastBlinkingGreen", 2), ("green", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedILNK.setStatus('current')
exCMLedLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("green", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedLOC.setStatus('current')
exCMLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedPWR.setStatus('current')
exCMLedETH = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("slowBlinkingGreen", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedETH.setStatus('current')
exCMLedRMT = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("green", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedRMT.setStatus('current')
exCMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4), )
if mibBuilder.loadTexts: exCMStatsTable.setStatus('current')
exCMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMStatsSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMMediaPortIndex"))
if mibBuilder.loadTexts: exCMStatsEntry.setStatus('current')
exCMStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMStatsSlotIndex.setStatus('current')
exCMMediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: exCMMediaPortIndex.setStatus('current')
exCMPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInDiscards.setStatus('current')
exCMPortInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInFiltered.setStatus('current')
exCMPortInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInGoodOctets.setStatus('current')
exCMPortHCInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortHCInGoodOctets.setStatus('current')
exCMPortInBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInBadOctets.setStatus('current')
exCMPortInUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInUnicasts.setStatus('current')
exCMPortInBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInBroadcasts.setStatus('current')
exCMPortInMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInMulticasts.setStatus('current')
exCMPortInPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInPauses.setStatus('current')
exCMPortInUnderSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInUnderSizes.setStatus('current')
exCMPortInFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInFragments.setStatus('current')
exCMPortInOversizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInOversizes.setStatus('current')
exCMPortInJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInJabbers.setStatus('current')
exCMPortInRxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInRxErrs.setStatus('current')
exCMPortInFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInFcsErrs.setStatus('current')
exCMPortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts64Octets.setStatus('current')
exCMPortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts65to127Octets.setStatus('current')
exCMPortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts128to255Octets.setStatus('current')
exCMPortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts256to511Octets.setStatus('current')
exCMPortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts512to1023Octets.setStatus('current')
exCMPortPkts1024toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts1024toMaxOctets.setStatus('current')
exCMPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutOctets.setStatus('current')
exCMPortHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortHCOutOctets.setStatus('current')
exCMPortOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutFiltered.setStatus('current')
exCMPortOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutUnicasts.setStatus('current')
exCMPortOutBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutBroadcasts.setStatus('current')
exCMPortOutMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutMulticasts.setStatus('current')
exCMPortOutPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutPauses.setStatus('current')
exCMPortDeferreds = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortDeferreds.setStatus('current')
exCMPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortCollisions.setStatus('current')
exCMPortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortSingles.setStatus('current')
exCMPortMultiples = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortMultiples.setStatus('current')
exCMPortExcessives = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortExcessives.setStatus('current')
exCMPortLates = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortLates.setStatus('current')
exCMPortOutFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutFcsErrs.setStatus('current')
exCMPortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 39), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMPortResetCounters.setStatus('current')
exCMVdslStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5), )
if mibBuilder.loadTexts: exCMVdslStatsTable.setStatus('current')
exCMVdslStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMVdslStatsSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMVdslStatsMediaPortIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMVdslStatsTimePeriod"))
if mibBuilder.loadTexts: exCMVdslStatsEntry.setStatus('current')
exCMVdslStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMVdslStatsSlotIndex.setStatus('current')
exCMVdslStatsMediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: exCMVdslStatsMediaPortIndex.setStatus('current')
exCMVdslStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sinceLinkup", 1), ("current15Minutes", 2), ("previous15Minutes", 3), ("current24Hours", 4), ("previous24Hours", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsTimePeriod.setStatus('current')
exCMVdslStatsFullInitLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsFullInitLocal.setStatus('current')
exCMVdslStatsCodeViolationLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsCodeViolationLocal.setStatus('current')
exCMVdslStatsCorrectedLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsCorrectedLocal.setStatus('current')
exCMVdslStatsFecSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsFecSecsLocal.setStatus('current')
exCMVdslStatsErroredSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsErroredSecsLocal.setStatus('current')
exCMVdslStatsSeverelyErroredSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsSeverelyErroredSecsLocal.setStatus('current')
exCMVdslStatsLossOfSignalSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsLossOfSignalSecsLocal.setStatus('current')
exCMVdslStatsUnavailableSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsUnavailableSecsLocal.setStatus('current')
exCMVdslStatsTimeElapsedLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsTimeElapsedLocal.setStatus('current')
exCMVdslStatsFullInitRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsFullInitRemote.setStatus('current')
exCMVdslStatsCodeViolationRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsCodeViolationRemote.setStatus('current')
exCMVdslStatsCorrectedRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsCorrectedRemote.setStatus('current')
exCMVdslStatsFecSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsFecSecsRemote.setStatus('current')
exCMVdslStatsErroredSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsErroredSecsRemote.setStatus('current')
exCMVdslStatsSeverelyErroredSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsSeverelyErroredSecsRemote.setStatus('current')
exCMVdslStatsLossOfSignalSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsLossOfSignalSecsRemote.setStatus('current')
exCMVdslStatsUnavailableSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsUnavailableSecsRemote.setStatus('current')
exCMVdslStatsTimeElapsedRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsTimeElapsedRemote.setStatus('current')
exCMAvctTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6), )
if mibBuilder.loadTexts: exCMAvctTable.setStatus('current')
exCMAvctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMAvctSlotIndex"))
if mibBuilder.loadTexts: exCMAvctEntry.setStatus('current')
exCMAvctSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMAvctSlotIndex.setStatus('current')
exCMAvctStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 3), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMAvctStart.setStatus('current')
exCMAvctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notStarted", 0), ("inProgress", 1), ("testComplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctStatus.setStatus('current')
exCMAvctTxRxPair1Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair1Results.setStatus('current')
exCMAvctTxRxPair1Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair1Amplitude.setStatus('current')
exCMAvctTxRxPair1Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair1Distance.setStatus('current')
exCMAvctTxRxPair2Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair2Results.setStatus('current')
exCMAvctTxRxPair2Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair2Amplitude.setStatus('current')
exCMAvctTxRxPair2Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair2Distance.setStatus('current')
exCMAvctTxRxPair3Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair3Results.setStatus('current')
exCMAvctTxRxPair3Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair3Amplitude.setStatus('current')
exCMAvctTxRxPair3Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair3Distance.setStatus('current')
exCMAvctTxRxPair4Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair4Results.setStatus('current')
exCMAvctTxRxPair4Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair4Amplitude.setStatus('current')
exCMAvctTxRxPair4Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair4Distance.setStatus('current')
cm10gt = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10))
cm10gtTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1), )
if mibBuilder.loadTexts: cm10gtTable.setStatus('current')
cm10gtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gtSlotIndex"))
if mibBuilder.loadTexts: cm10gtEntry.setStatus('current')
cm10gtSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gtSlotIndex.setStatus('current')
cm10gtModelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtModelname.setStatus('current')
cm10gtModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtModelDesc.setStatus('current')
cm10gtHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwJmp5ConfigMode.setStatus('current')
cm10gtHwSw1OperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("test", 0), ("data", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw1OperationMode.setStatus('current')
cm10gtHwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw2LinkMode.setStatus('current')
cm10gtHwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw3FiberFaultAlert.setStatus('current')
cm10gtHwSw4EnergyEfficentEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw4EnergyEfficentEthernet.setStatus('current')
cm10gtHwSw5Unused = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw5Unused.setStatus('current')
cm10gtPort1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1LinkStatus.setStatus('current')
cm10gtPort1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1ConnType.setStatus('current')
cm10gtPort1AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1AutoNegState.setStatus('current')
cm10gtPort1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1Speed.setStatus('current')
cm10gtPort1Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1Duplex.setStatus('current')
cm10gtPort1PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1PauseEnh.setStatus('current')
cm10gtPort1ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1ReceiveStatus.setStatus('current')
cm10gtPort1LPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1LPRFStatus.setStatus('current')
cm10gtPort2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2LinkStatus.setStatus('current')
cm10gtPort2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("rj45", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2ConnType.setStatus('current')
cm10gtPort2AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2AutoNegState.setStatus('current')
cm10gtPort2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2Speed.setStatus('current')
cm10gtPort2Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2Duplex.setStatus('current')
cm10gtPort2PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2PauseEnh.setStatus('current')
cm10gtPort2LPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2LPRFStatus.setStatus('current')
cm10gtPortLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtPortLoopBack.setStatus('current')
cm10gtPortTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPortTestMode.setStatus('current')
cm10gtConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2), )
if mibBuilder.loadTexts: cm10gtConfigTable.setStatus('current')
cm10gtConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gtConfigSlotIndex"))
if mibBuilder.loadTexts: cm10gtConfigEntry.setStatus('current')
cm10gtConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gtConfigSlotIndex.setStatus('current')
cm10gtConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigStatus.setStatus('current')
cm10gtConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigModuleName.setStatus('current')
cm10gtConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigLinkMode.setStatus('current')
cm10gtConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigFiberFaultAlert.setStatus('current')
cm10gtConfigFiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 7), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigFiberAutoNeg.setStatus('current')
cm10gtConfigPort1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1Name.setStatus('current')
cm10gtConfigPort1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1Enable.setStatus('current')
cm10gtConfigPort1FecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 10), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1FecEnable.setStatus('current')
cm10gtConfigPort1FecAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1FecAmplitude.setStatus('current')
cm10gtConfigPort1FecPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1FecPhase.setStatus('current')
cm10gtConfigPort1WavelengthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 13), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1WavelengthEnable.setStatus('current')
cm10gtConfigPort1WavelengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1WavelengthValue.setStatus('current')
cm10gtConfigPort1ChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 15), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1ChannelEnable.setStatus('current')
cm10gtConfigPort1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1ChannelNumber.setStatus('current')
cm10gtConfigPort1TxDitherEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 17), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1TxDitherEnable.setStatus('current')
cm10gtConfigPort1TxDitherValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 18), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1TxDitherValue.setStatus('current')
cm10gtConfigPort2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2Name.setStatus('current')
cm10gtConfigPort2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 20), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2Enable.setStatus('current')
cm10gtConfigPort2CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2CopperDuplex.setStatus('current')
cm10gtConfigPort2CopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("symmAsymRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2CopperPauseEnh.setStatus('current')
cm10gtConfigPort2CopperEnergyEfficientEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 23), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2CopperEnergyEfficientEthernet.setStatus('current')
cm10gtLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3), )
if mibBuilder.loadTexts: cm10gtLedTable.setStatus('current')
cm10gtLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gtLedsSlotIndex"))
if mibBuilder.loadTexts: cm10gtLedEntry.setStatus('current')
cm10gtLedsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1, 2), SlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtLedsSlotIndex.setStatus('current')
cm10gtLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtLedPWR.setStatus('current')
cm10gtLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtLedLK1.setStatus('current')
cm10gtLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtLedLK2.setStatus('current')
cm4gpt = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11))
cm4gptTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1), )
if mibBuilder.loadTexts: cm4gptTable.setStatus('current')
cm4gptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm4gptSlotIndex"))
if mibBuilder.loadTexts: cm4gptEntry.setStatus('current')
cm4gptSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm4gptSlotIndex.setStatus('current')
cm4gptModelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptModelname.setStatus('current')
cm4gptModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptModelDesc.setStatus('current')
cm4gptHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwJmp5ConfigMode.setStatus('current')
cm4gptHwSw1LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwSw1LinkMode.setStatus('current')
cm4gptHwSw2FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwSw2FiberFaultAlert.setStatus('current')
cm4gptHwSw3RateSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownLow", 0), ("swUpHigh", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwSw3RateSelect.setStatus('current')
cm4gptHwSw4Unused = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwSw4Unused.setStatus('current')
cm4gptPort1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptPort1LinkStatus.setStatus('current')
cm4gptPort1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptPort1ConnType.setStatus('current')
cm4gptPort2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptPort2LinkStatus.setStatus('current')
cm4gptPort2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptPort2ConnType.setStatus('current')
cm4gptConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2), )
if mibBuilder.loadTexts: cm4gptConfigTable.setStatus('current')
cm4gptConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm4gptConfigSlotIndex"))
if mibBuilder.loadTexts: cm4gptConfigEntry.setStatus('current')
cm4gptConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm4gptConfigSlotIndex.setStatus('current')
cm4gptConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigStatus.setStatus('current')
cm4gptConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigModuleName.setStatus('current')
cm4gptConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigLinkMode.setStatus('current')
cm4gptConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigFiberFaultAlert.setStatus('current')
cm4gptConfigRateSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigRateSelect.setStatus('current')
cm4gptConfigPort1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigPort1Name.setStatus('current')
cm4gptConfigPort1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigPort1Enable.setStatus('current')
cm4gptConfigPort2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigPort2Name.setStatus('current')
cm4gptConfigPort2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 11), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigPort2Enable.setStatus('current')
cm4gptLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3), )
if mibBuilder.loadTexts: cm4gptLedTable.setStatus('current')
cm4gptLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm4gptLedsSlotIndex"))
if mibBuilder.loadTexts: cm4gptLedEntry.setStatus('current')
cm4gptLedsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm4gptLedsSlotIndex.setStatus('current')
cm4gptLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptLedPWR.setStatus('current')
cm4gptLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptLedLK1.setStatus('current')
cm4gptLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptLedLK2.setStatus('current')
mcrSfpDmiModuleTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5), )
if mibBuilder.loadTexts: mcrSfpDmiModuleTable.setStatus('current')
mcrSfpDmiModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "sfpDmiSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "sfpDmiMediaPortIndex"))
if mibBuilder.loadTexts: mcrSfpDmiModuleEntry.setStatus('current')
sfpDmiSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 2), SlotNumber())
if mibBuilder.loadTexts: sfpDmiSlotIndex.setStatus('current')
sfpDmiMediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: sfpDmiMediaPortIndex.setStatus('current')
sfpDmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 4), Bits().clone(namedValues=NamedValues(("sfpModuleInserted", 24), ("sfpCommFailed", 25), ("sfpDmiSupported", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiStatus.setStatus('current')
sfpDmiConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknownUnspecified", 0), ("sc", 1), ("fiberChannelStyle1Copper", 2), ("fiberChannelStyle2Copper", 3), ("bncTnc", 4), ("fiberChannelCoaxHeader", 5), ("fiberJack", 6), ("lc", 7), ("mtrj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdcII", 32), ("copperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiConnectorType.setStatus('current')
sfpDmiNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiNominalBitRate.setStatus('current')
sfpDmiLinkReach9125 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLinkReach9125.setStatus('current')
sfpDmiLinkReach50125 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLinkReach50125.setStatus('current')
sfpDmiLinkReach625125 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLinkReach625125.setStatus('current')
sfpDmiFiberWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiFiberWaveLength.setStatus('current')
sfpDmiCurrentTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentTempState.setStatus('current')
sfpDmiRealTimeTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeTemp.setStatus('current')
sfpDmiHighTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTempWarn.setStatus('current')
sfpDmiHighTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTempAlarm.setStatus('current')
sfpDmiLowTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTempWarn.setStatus('current')
sfpDmiLowTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTempAlarm.setStatus('current')
sfpDmiCurrentVoltState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentVoltState.setStatus('current')
sfpDmiRealTimeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeVolt.setStatus('current')
sfpDmiHighVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighVoltWarn.setStatus('current')
sfpDmiHighVoltAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighVoltAlarm.setStatus('current')
sfpDmiLowVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowVoltWarn.setStatus('current')
sfpDmiLowVoltAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowVoltAlarm.setStatus('current')
sfpDmiCurrentTxBiasState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentTxBiasState.setStatus('current')
sfpDmiRealTimeTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeTxBias.setStatus('current')
sfpDmiHighTxBiasWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTxBiasWarn.setStatus('current')
sfpDmiHighTxBiasAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTxBiasAlarm.setStatus('current')
sfpDmiLowTxBiasWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTxBiasWarn.setStatus('current')
sfpDmiLowTxBiasAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTxBiasAlarm.setStatus('current')
sfpDmiCurrentTxPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentTxPowerState.setStatus('current')
sfpDmiRealTimeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeTxPower.setStatus('current')
sfpDmiHighTxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTxPowerWarn.setStatus('current')
sfpDmiHighTxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTxPowerAlarm.setStatus('current')
sfpDmiLowTxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTxPowerWarn.setStatus('current')
sfpDmiLowTxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTxPowerAlarm.setStatus('current')
sfpDmiCurrentRxPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentRxPowerState.setStatus('current')
sfpDmiRealTimeRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeRxPower.setStatus('current')
sfpDmiHighRxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighRxPowerWarn.setStatus('current')
sfpDmiHighRxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighRxPowerAlarm.setStatus('current')
sfpDmiLowRxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowRxPowerWarn.setStatus('current')
sfpDmiLowRxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowRxPowerAlarm.setStatus('current')
sfpDmiStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiStatus2.setStatus('current')
sfpDmiVendorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiVendorSerialNumber.setStatus('current')
sfpDmiVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiVendorName.setStatus('current')
sfpDmiVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiVendorPartNumber.setStatus('current')
xfpDmiAux1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15))).clone(namedValues=NamedValues(("notSupported", 0), ("apdBiasVoltmv", 1), ("tecCurrentma", 3), ("laserTemperature", 4), ("laserWavelength", 5), ("p5Voltv", 6), ("p33Voltv", 7), ("p18Voltv", 8), ("m52Voltv", 9), ("p5vCurrentma", 10), ("p33vCurrentma", 13), ("p18vCurrentma", 14), ("m52vCurrentma", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiAux1Type.setStatus('current')
xfpDmiAux1State = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiAux1State.setStatus('current')
xfpDmiRealTimeAux1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiRealTimeAux1.setStatus('current')
xfpDmiHighAux1Warn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAux1Warn.setStatus('current')
xfpDmiHighAux1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAux1Alarm.setStatus('current')
xfpDmiLowAux1Warn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAux1Warn.setStatus('current')
xfpDmiLowAux1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAux1Alarm.setStatus('current')
xfpDmiAux2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15))).clone(namedValues=NamedValues(("notSupported", 0), ("apdBiasVoltmv", 1), ("tecCurrentma", 3), ("laserTemperature", 4), ("laserWavelength", 5), ("p5Voltv", 6), ("p33Voltv", 7), ("p18Voltv", 8), ("m52Voltv", 9), ("p5vCurrentma", 10), ("p33vCurrentma", 13), ("p18vCurrentma", 14), ("m52vCurrentma", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiAux2Type.setStatus('current')
xfpDmiAux2State = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiAux2State.setStatus('current')
xfpDmiRealTimeAux2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiRealTimeAux2.setStatus('current')
xfpDmiHighAux2Warn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAux2Warn.setStatus('current')
xfpDmiHighAux2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAux2Alarm.setStatus('current')
xfpDmiLowAux2Warn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAux2Warn.setStatus('current')
xfpDmiLowAux2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAux2Alarm.setStatus('current')
xfpDmiMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiMinBitRate.setStatus('current')
xfpDmiMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiMaxBitRate.setStatus('current')
xfpDmiReachEBW50125 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiReachEBW50125.setStatus('current')
sfpDmiReachCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiReachCopper.setStatus('current')
mcrAlarmsWarningsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6), )
if mibBuilder.loadTexts: mcrAlarmsWarningsTable.setStatus('current')
mcrAlarmsWarningsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "alarmWarnSequenceIndex"))
if mibBuilder.loadTexts: mcrAlarmsWarningsEntry.setStatus('current')
alarmWarnSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: alarmWarnSequenceIndex.setStatus('current')
alarmWarnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnType.setStatus('current')
alarmWarnSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnSeverity.setStatus('current')
alarmWarnFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnFlags.setStatus('current')
alarmWarnChassisNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnChassisNum.setStatus('current')
alarmWarnDeviceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnDeviceNum.setStatus('current')
alarmWarnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnTimeStamp.setStatus('current')
alarmWarnMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnMessage.setStatus('current')
alarmWarnPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnPortNum.setStatus('current')
mcrMediaPortTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7), )
if mibBuilder.loadTexts: mcrMediaPortTable.setStatus('current')
mcrMediaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mediaPortSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "mediaPortPortIndex"))
if mibBuilder.loadTexts: mcrMediaPortEntry.setStatus('current')
mediaPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: mediaPortSlotIndex.setStatus('current')
mediaPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: mediaPortPortIndex.setStatus('current')
moduleModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleModel.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEnable.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("copper", 0), ("fiber", 1), ("sfp", 2), ("xfp", 3), ("sfpPlus", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkStatus.setStatus('current')
portConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("rj45", 0), ("sc", 1), ("lc", 2), ("st", 3), ("sfp", 4), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConnType.setStatus('current')
portAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAutoNegState.setStatus('current')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("speed10Mbs", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeed.setStatus('current')
portDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDuplex.setStatus('current')
portPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPause.setStatus('current')
portRemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", -1), ("ok", 0), ("remoteFault", 1), ("offline", 2), ("linkFault", 3), ("autoNegError", 4), ("disable", 5), ("receivingFEF", 6), ("sendingFEF", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRemoteStatus.setStatus('current')
portMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unknown", -1), ("copper", 0), ("fiber", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaType.setStatus('current')
portPhysicalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("vdsl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhysicalProtocol.setStatus('current')
mgtNetworkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1))
mgtAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2))
mgtAlertGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3))
mgtUsersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4))
mgtDateTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5))
mgtFilesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6))
mgtAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7))
mgtDisplayFormatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8))
mgtChassisCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1))
systemStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStatus.setStatus('current')
systemName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemName.setStatus('current')
systemDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDomainName.setStatus('current')
systemIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIpAddress.setStatus('current')
systemSubnetBits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSubnetBits.setStatus('current')
systemDHCPUpdateDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDHCPUpdateDNS.setStatus('current')
systemAutoObtainDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAutoObtainDNS.setStatus('current')
systemAutoObtainGW = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAutoObtainGW.setStatus('current')
systemDomainPrefix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDomainPrefix.setStatus('current')
systemTFTPRetry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTFTPRetry.setStatus('current')
systemTFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTFTPTimeOut.setStatus('current')
gatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: gatewayTable.setStatus('current')
gatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "gatewayIndex"))
if mibBuilder.loadTexts: gatewayEntry.setStatus('current')
gatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: gatewayIndex.setStatus('current')
gatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayStatus.setStatus('current')
gatewayHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayHost.setStatus('current')
gatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("host", 0), ("network", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayType.setStatus('current')
gatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 5), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIpAddress.setStatus('current')
gatewaySubnetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewaySubnetBits.setStatus('current')
gatewayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayInterface.setStatus('current')
hostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3), )
if mibBuilder.loadTexts: hostTable.setStatus('current')
hostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "hostIndex"))
if mibBuilder.loadTexts: hostEntry.setStatus('current')
hostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: hostIndex.setStatus('current')
hostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostStatus.setStatus('current')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('current')
hostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIpAddr.setStatus('current')
hostFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostFqdn.setStatus('current')
dnsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4), )
if mibBuilder.loadTexts: dnsTable.setStatus('current')
dnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "dnsIndex"))
if mibBuilder.loadTexts: dnsEntry.setStatus('current')
dnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: dnsIndex.setStatus('current')
dnsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsStatus.setStatus('current')
dnsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsIpAddress.setStatus('current')
dnsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsActive.setStatus('current')
dynamicDNSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5))
dynamicDNSStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSStatus.setStatus('current')
dynamicDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNS.setStatus('current')
dynamicDNSHostname = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSHostname.setStatus('current')
dynamicDNSUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSUserName.setStatus('current')
dynamicDNSPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSPassword.setStatus('current')
dynamicDNSSystemType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1), ("custom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSystemType.setStatus('current')
dynamicDNSWildCard = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("nochange", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSWildCard.setStatus('current')
dynamicDNSConnectionMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("http", 0), ("httpport8245", 1), ("https", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSConnectionMethod.setStatus('current')
dynamicDNSSSLVerifyPeerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLVerifyPeerCertificate.setStatus('current')
dynamicDNSSSLCountry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCountry.setStatus('current')
dynamicDNSSSLStateProv = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLStateProv.setStatus('current')
dynamicDNSSSLLocality = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLLocality.setStatus('current')
dynamicDNSSSLOrganisation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLOrganisation.setStatus('current')
dynamicDNSSSLOrganisationUnit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLOrganisationUnit.setStatus('current')
dynamicDNSSSLCommonName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCommonName.setStatus('current')
dynamicDNSSSLEmail = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLEmail.setStatus('current')
dynamicDNSStatusString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDNSStatusString.setStatus('current')
dynamicDNSSSLCipherTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18), )
if mibBuilder.loadTexts: dynamicDNSSSLCipherTable.setStatus('current')
dynamicDNSSSLCipherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherPriority"))
if mibBuilder.loadTexts: dynamicDNSSSLCipherEntry.setStatus('current')
dynamicDNSSSLCipherPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: dynamicDNSSSLCipherPriority.setStatus('current')
dynamicDNSSSLCipherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherStatus.setStatus('current')
dynamicDNSSSLCipherEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("any", 1), ("aes", 2), ("tripledes", 3), ("des", 4), ("arctwo", 5), ("arcfour", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherEncryption.setStatus('current')
dynamicDNSSSLCipherKeySizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("min40", 0), ("min56", 1), ("min64", 2), ("min128", 3), ("min168", 4), ("min256", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeySizeMin.setStatus('current')
dynamicDNSSSLCipherKeySizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("max40", 0), ("max56", 1), ("max64", 2), ("max128", 3), ("max168", 4), ("max256", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeySizeMax.setStatus('current')
dynamicDNSSSLCipherKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 0), ("rsa", 1), ("edhrsa", 2), ("edhdss", 3), ("adh", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeyExchange.setStatus('current')
dynamicDNSSSLCipherHMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("sha", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherHMAC.setStatus('current')
ipv6Group = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6))
ipv6ServicesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1))
ipv6serviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6serviceStatus.setStatus('current')
serviceAutoDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAutoDiscovery.setStatus('current')
serviceDHCPv6 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6.setStatus('current')
serviceDHCPv6IPAddresses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6IPAddresses.setStatus('current')
serviceDHCPv6NetworkPrefix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6NetworkPrefix.setStatus('current')
serviceDHCPv6AutoObtainDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6AutoObtainDNS.setStatus('current')
ipv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2), )
if mibBuilder.loadTexts: ipv6AddressTable.setStatus('current')
ipv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "ipv6AddressIndex"))
if mibBuilder.loadTexts: ipv6AddressEntry.setStatus('current')
ipv6AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: ipv6AddressIndex.setStatus('current')
ipv6AddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressStatus.setStatus('current')
ipv6AddressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressAddr.setStatus('current')
ipv6AddressPrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressPrefixBits.setStatus('current')
ipv6AddressAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressAuto.setStatus('current')
ipv6AddressSendAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressSendAdvertise.setStatus('current')
interfacev6StatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3), )
if mibBuilder.loadTexts: interfacev6StatsTable.setStatus('current')
interfacev6StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "interfacev6Index"))
if mibBuilder.loadTexts: interfacev6StatsEntry.setStatus('current')
interfacev6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: interfacev6Index.setStatus('current')
interfacev6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Name.setStatus('current')
interfacev6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Address.setStatus('current')
interfacev6PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6PrefixBits.setStatus('current')
interfacev6Scope = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("global", 0), ("host", 1), ("link", 2), ("site", 3), ("compatv4", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Scope.setStatus('current')
ipv6TunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4), )
if mibBuilder.loadTexts: ipv6TunnelTable.setStatus('current')
ipv6TunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "ipv6TunnelIndex"))
if mibBuilder.loadTexts: ipv6TunnelEntry.setStatus('current')
ipv6TunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: ipv6TunnelIndex.setStatus('current')
ipv6TunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelStatus.setStatus('current')
ipv6TunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelName.setStatus('current')
ipv6TunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("manual", 0), ("ip6to4", 1), ("teredo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelMode.setStatus('current')
ipv6TunnelRemoteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelRemoteHost.setStatus('current')
mgtAcessServicesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1))
accessServicesStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServicesStatus.setStatus('current')
accessServicesSessInactTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServicesSessInactTimeout.setStatus('current')
accessServiceHTTPD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServiceHTTPD.setStatus('current')
accessServiceHTTPSD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServiceHTTPSD.setStatus('current')
accessServiceTelnetD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServiceTelnetD.setStatus('current')
acessServiceSSHD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acessServiceSSHD.setStatus('current')
acessServiceSnmpD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acessServiceSnmpD.setStatus('current')
acessServiceSetIP = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acessServiceSetIP.setStatus('current')
acessIncomingPings = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 9), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acessIncomingPings.setStatus('current')
webManagerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 2))
webManagerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webManagerStatus.setStatus('current')
httpsPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPassphrase.setStatus('current')
sshServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3))
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
sshServerAuthRSA = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAuthRSA.setStatus('current')
sshServerAuthDSA = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAuthDSA.setStatus('current')
sshServerAuthKeyboard = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAuthKeyboard.setStatus('current')
sshServerAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAuthPassword.setStatus('current')
sshServerCipher3Des = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipher3Des.setStatus('current')
sshServerCipherBlowfish = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipherBlowfish.setStatus('current')
sshServerCipherCipherAES = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipherCipherAES.setStatus('current')
sshServerCipherCAST = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipherCAST.setStatus('current')
sshServerCipherArcfour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipherArcfour.setStatus('current')
sshServerVerbose = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerVerbose.setStatus('current')
sshServerCompression = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCompression.setStatus('current')
sshServerSSH1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerSSH1.setStatus('current')
snmpAgentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4))
snmpAgentStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentStatus.setStatus('current')
snmpContact = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpContact.setStatus('current')
snmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpLocation.setStatus('current')
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('current')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "snmpCommunityIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('current')
snmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: snmpCommunityIndex.setStatus('current')
snmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityStatus.setStatus('current')
snmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityName.setStatus('current')
snmpCommunityIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityIpAddress.setStatus('current')
snmpCommunityPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("readonly", 1), ("readwrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityPermission.setStatus('current')
snmpV3ReadOnlyUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5))
snmpV3ReadOnlyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyStatus.setStatus('current')
snmpV3ReadOnlyUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyUserName.setStatus('current')
snmpV3ReadOnlySecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("authNoPriv", 1), ("authPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlySecurityLevel.setStatus('current')
snmpV3ReadOnlyAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyAuthAlgorithm.setStatus('current')
snmpV3ReadOnlyAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyAuthPasswd.setStatus('current')
snmpV3ReadOnlyPrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyPrivacyAlgorithm.setStatus('current')
snmpV3ReadOnlyPrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyPrivacyPasswd.setStatus('current')
snmpV3ReadWriteUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6))
snmpV3ReadWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteStatus.setStatus('current')
snmpV3ReadWriteUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteUserName.setStatus('current')
snmpV3ReadWriteSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("authNoPriv", 1), ("authPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteSecurityLevel.setStatus('current')
snmpV3ReadWriteAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteAuthAlgorithm.setStatus('current')
snmpV3ReadWriteAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteAuthPasswd.setStatus('current')
snmpV3ReadWritePrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWritePrivacyAlgorithm.setStatus('current')
snmpV3ReadWritePrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWritePrivacyPasswd.setStatus('current')
authorizedHostGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5))
authHostsStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostsStatus.setStatus('current')
authHostOnly = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostOnly.setStatus('current')
authIpHostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3), )
if mibBuilder.loadTexts: authIpHostTable.setStatus('current')
authIpHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "authHostIpIndex"))
if mibBuilder.loadTexts: authIpHostEntry.setStatus('current')
authHostIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: authHostIpIndex.setStatus('current')
authHostIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostIpStatus.setStatus('current')
authHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostIpAddr.setStatus('current')
authHostIpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostIpDescr.setStatus('current')
authMacHostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4), )
if mibBuilder.loadTexts: authMacHostTable.setStatus('current')
authMacHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "authHostMacIndex"))
if mibBuilder.loadTexts: authMacHostEntry.setStatus('current')
authHostMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: authHostMacIndex.setStatus('current')
authHostMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostMacStatus.setStatus('current')
authHostMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostMacAddr.setStatus('current')
authHostMacDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostMacDescr.setStatus('current')
alertLocalEventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1))
localEventLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localEventLogStatus.setStatus('current')
localEventLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localEventLogEnabled.setStatus('current')
localEventLogAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1, 3), AlertSeverityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localEventLogAlertLevel.setStatus('current')
localEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1, 4), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localEventLogClear.setStatus('current')
alertSyslogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2))
syslogStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogStatus.setStatus('current')
syslogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnabled.setStatus('current')
syslogSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSeverityLevel.setStatus('current')
syslogPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogPrimaryHost.setStatus('current')
syslogSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSecondaryHost.setStatus('current')
alertSnmpTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3))
snmpTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapStatus.setStatus('current')
snmpTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEnabled.setStatus('current')
snmpTrapAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 3), AlertSeverityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapAlertLevel.setStatus('current')
snmpTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4), )
if mibBuilder.loadTexts: snmpTrapHostTable.setStatus('current')
snmpTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "snmpTrapHostIndex"))
if mibBuilder.loadTexts: snmpTrapHostEntry.setStatus('current')
snmpTrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 1), GenericTableIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: snmpTrapHostIndex.setStatus('current')
snmpTrapHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostStatus.setStatus('current')
snmpTrapHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostIpAddress.setStatus('current')
snmpTrapHostUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostUdpPort.setStatus('current')
snmpTrapHostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snmpTrapV1", 0), ("snmpTrapV2c", 1), ("snmpTrapV3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostVersion.setStatus('current')
snmpTrapHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("snmpTrap", 0), ("snmpInform", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostType.setStatus('current')
snmpTrapHostCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostCommunity.setStatus('current')
snmpTrapHostEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 8), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostEnable.setStatus('current')
snmpV3TrapUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5))
snmpV3TrapUserStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserStatus.setStatus('current')
snmpV3TrapUserUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserUserName.setStatus('current')
snmpV3TrapUserSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("authNoPriv", 1), ("authPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserSecurityLevel.setStatus('current')
snmpV3TrapUserAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserAuthAlgorithm.setStatus('current')
snmpV3TrapUserAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserAuthPasswd.setStatus('current')
snmpV3TrapUserPrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserPrivacyAlgorithm.setStatus('current')
snmpV3TrapUserPrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserPrivacyPasswd.setStatus('current')
snmpTrapGlbHostTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGlbHostTimeout.setStatus('current')
snmpTapGlobHostRetries = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTapGlobHostRetries.setStatus('current')
snmpV3LocalEngineID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 8), SnmpEngineID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3LocalEngineID.setStatus('current')
snmpV3LocalEngineIDTextSuffix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3LocalEngineIDTextSuffix.setStatus('current')
snmpTrapVarsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10))
mgtAccessMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mgtConsole", 1), ("mgtSnmp", 2), ("mgtTelnet", 3), ("mgtSSH", 4), ("mgtHTTP", 5), ("mgtHTTPS", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mgtAccessMethod.setStatus('current')
remoteMgtIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteMgtIpAddress.setStatus('current')
remoteTftpHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteTftpHost.setStatus('current')
remoteTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteTftpFileName.setStatus('current')
networkIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 5), Ipv4v6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: networkIpAddress.setStatus('current')
mcrMediaPortNum = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrMediaPortNum.setStatus('current')
mcrMediaPortDescr = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrMediaPortDescr.setStatus('current')
eventSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 8), AlertSeverityLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSeverityLevel.setStatus('current')
xfpDmiRealTimeAux = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiRealTimeAux.setStatus('current')
xfpDmiHighAuxWarn = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAuxWarn.setStatus('current')
xfpDmiHighAuxAlarm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAuxAlarm.setStatus('current')
xfpDmiLowAuxWarn = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAuxWarn.setStatus('current')
xfpDmiLowAuxAlarm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAuxAlarm.setStatus('current')
mcrModuleSubTypeInserted = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("blank", -1), ("sts", 0), ("xts", 1), ("xtsh", 2), ("xtx", 3), ("xtxh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleSubTypeInserted.setStatus('current')
mcrMediaBackedupModuleSubType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("blank", -1), ("sts", 0), ("xts", 1), ("xtsh", 2), ("xtx", 3), ("xtxh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMediaBackedupModuleSubType.setStatus('current')
mcrMediaPortBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 16), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrMediaPortBandwidth.setStatus('current')
mcrMediaPortBandwidthThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 17), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrMediaPortBandwidthThreshold.setStatus('current')
alertEmailGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4))
emailStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailStatus.setStatus('current')
emailEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailEnabled.setStatus('current')
emailAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 3), AlertSeverityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailAlertLevel.setStatus('current')
emailTo = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailTo.setStatus('current')
emailFrom = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailFrom.setStatus('current')
emailSMTPHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPHost.setStatus('current')
emailReply = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailReply.setStatus('current')
emailSubject = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSubject.setStatus('current')
emailSMTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPUsername.setStatus('current')
emailSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPPassword.setStatus('current')
emailSMTPEncryption = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tls", 2), ("ssl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPEncryption.setStatus('current')
emailSMTPValidatePeerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPValidatePeerCertificate.setStatus('current')
emailSMTPTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPTcpPort.setStatus('current')
emailSMTPDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPDomain.setStatus('current')
mgtUsersStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersStatus.setStatus('current')
mgtUsersByPassLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersByPassLoginEnabled.setStatus('current')
mgtUsersPrimaryAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("kerberos", 3), ("ldap", 4), ("tacacs", 5), ("securid", 6), ("nis", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersPrimaryAuthMethod.setStatus('current')
mgtUsersSecondaryAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("kerberos", 4), ("ldap", 5), ("tacacs", 6), ("securid", 7), ("nis", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersSecondaryAuthMethod.setStatus('current')
mgtUsersAlwaysAttemptSecond = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersAlwaysAttemptSecond.setStatus('current')
localUserAccountsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6), )
if mibBuilder.loadTexts: localUserAccountsTable.setStatus('current')
localUserAccountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "userIndex"))
if mibBuilder.loadTexts: localUserAccountsEntry.setStatus('current')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: userIndex.setStatus('current')
userStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userStatus.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
userLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("admin", 0), ("operator", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLevel.setStatus('current')
localUsersStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7), )
if mibBuilder.loadTexts: localUsersStatusTable.setStatus('current')
localUsersStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "userStatusIndex"))
if mibBuilder.loadTexts: localUsersStatusEntry.setStatus('current')
userStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: userStatusIndex.setStatus('current')
userStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userStatusName.setStatus('current')
userStatusMgtAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mgtAccessHTTP", 1), ("mgtAccessHTTPS", 2), ("mgtAccessTelnet", 3), ("mgtAccessSSH", 4), ("mgtAccessConsole", 5))))
if mibBuilder.loadTexts: userStatusMgtAccessType.setStatus('current')
userStatusRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 4), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userStatusRemoteIPAddress.setStatus('current')
userStatusStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userStatusStartTime.setStatus('current')
userStatusLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("admin", 0), ("operator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userStatusLevel.setStatus('current')
radiusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8))
radiusStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusStatus.setStatus('current')
radiusPrimaryAuthHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPrimaryAuthHost.setStatus('current')
radiusSecondaryAuthHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecondaryAuthHost.setStatus('current')
radiusAuthenticationPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenticationPort.setStatus('current')
radiusAccounting = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccounting.setStatus('current')
radiusPrimaryAcctHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPrimaryAcctHost.setStatus('current')
radiusSecondaryAcctHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecondaryAcctHost.setStatus('current')
radiusAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountingPort.setStatus('current')
radiusAcctAuth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctAuth.setStatus('current')
radiusRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusRetryLimit.setStatus('current')
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeout.setStatus('current')
radiusNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIdentifier.setStatus('current')
radiusNasIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIpAddress.setStatus('current')
radiusNasSpecifyIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasSpecifyIpAddress.setStatus('current')
radiusNasIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIpv6Address.setStatus('current')
radiusNasSpecifyIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasSpecifyIpv6Address.setStatus('current')
kerberosGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9))
kerberosStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosStatus.setStatus('current')
kerberosRealm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosRealm.setStatus('current')
kerberosDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosDomain.setStatus('current')
kerberosPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosPort.setStatus('current')
ldapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10))
ldapStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapStatus.setStatus('current')
ldapHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapHost.setStatus('current')
ldapPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapPort.setStatus('current')
ldapBase = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapBase.setStatus('current')
ldapEnableTLS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapEnableTLS.setStatus('current')
ldapTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapTLSPort.setStatus('current')
ldapUID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUID.setStatus('current')
ldapPasswordEncryption = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapPasswordEncryption.setStatus('current')
ldapClientAuth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuth.setStatus('current')
ldapClientName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientName.setStatus('current')
ldapClientAppendBase = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAppendBase.setStatus('current')
ldapClientPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientPassword.setStatus('current')
tacacsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11))
tacacsStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsStatus.setStatus('current')
tacacsPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPrimaryHost.setStatus('current')
tacacsSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsSecondaryHost.setStatus('current')
tacacsPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPort.setStatus('current')
tacacsAccounting = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccounting.setStatus('current')
tacacsAccountingPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingPrimaryHost.setStatus('current')
tacacsAccountingSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingSecondaryHost.setStatus('current')
tacacsAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingPort.setStatus('current')
tacacsAuthorization = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAuthorization.setStatus('current')
tacacsAlternateServiceNames = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAlternateServiceNames.setStatus('current')
securidGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12))
securidStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidStatus.setStatus('current')
securidMasterHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidMasterHost.setStatus('current')
securidSlaveHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidSlaveHost.setStatus('current')
securidPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidPort.setStatus('current')
securidType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("des", 1), ("sdi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidType.setStatus('current')
securidLegacy = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 6), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidLegacy.setStatus('current')
nisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13))
nisStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisStatus.setStatus('current')
nisDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisDomain.setStatus('current')
nisPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisPrimaryHost.setStatus('current')
nisSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisSecondaryHost.setStatus('current')
mgtDateTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtDateTimeStatus.setStatus('current')
systemDate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDate.setStatus('current')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTime.setStatus('current')
systemDateTimeAndOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDateTimeAndOffset.setStatus('current')
timeZoneListEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneListEnable.setStatus('current')
selectionFromTimeZoneList = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450))).clone(namedValues=NamedValues(("tzAfricaAbidjan", 0), ("tzAfricaAccra", 1), ("tzAfricaAddisAbaba", 2), ("tzAfricaAlgiers", 3), ("tzAfricaAsmera", 4), ("tzAfricaBamako", 5), ("tzAfricaBangui", 6), ("tzAfricaBanjul", 7), ("tzAfricaBissau", 8), ("tzAfricaBlantyre", 9), ("tzAfricaBrazzaville", 10), ("tzAfricaBujumbura", 11), ("tzAfricaCairo", 12), ("tzAfricaCasablanca", 13), ("tzAfricaCeuta", 14), ("tzAfricaConakry", 15), ("tzAfricaDakar", 16), ("tzAfricaDaresSalaam", 17), ("tzAfricaDjibouti", 18), ("tzAfricaDouala", 19), ("tzAfricaElAaiun", 20), ("tzAfricaFreetown", 21), ("tzAfricaGaborone", 22), ("tzAfricaHarare", 23), ("tzAfricaJohannesburg", 24), ("tzAfricaKampala", 25), ("tzAfricaKhartoum", 26), ("tzAfricaKigali", 27), ("tzAfricaKinshasa", 28), ("tzAfricaLagos", 29), ("tzAfricaLibreville", 30), ("tzAfricaLome", 31), ("tzAfricaLuanda", 32), ("tzAfricaLubumbashi", 33), ("tzAfricaLusaka", 34), ("tzAfricaMalabo", 35), ("tzAfricaMaputo", 36), ("tzAfricaMaseru", 37), ("tzAfricaMbabane", 38), ("tzAfricaMogadishu", 39), ("tzAfricaMonrovia", 40), ("tzAfricaNairobi", 41), ("tzAfricaNdjamena", 42), ("tzAfricaNiamey", 43), ("tzAfricaNouakchott", 44), ("tzAfricaOuagadougou", 45), ("tzAfricaPortoNovo", 46), ("tzAfricaSaoTome", 47), ("tzAfricaTimbuktu", 48), ("tzAfricaTripoli", 49), ("tzAfricaTunis", 50), ("tzAfricaWindhoek", 51), ("tzAmericaAdak", 52), ("tzAmericaAnchorage", 53), ("tzAmericaAnguilla", 54), ("tzAmericaAntigua", 55), ("tzAmericaAraguaina", 56), ("tzAmericaAruba", 57), ("tzAmericaAsuncion", 58), ("tzAmericaAtka", 59), ("tzAmericaBarbados", 60), ("tzAmericaBelem", 61), ("tzAmericaBelize", 62), ("tzAmericaBoaVista", 63), ("tzAmericaBogota", 64), ("tzAmericaBoise", 65), ("tzAmericaBuenosAires", 66), ("tzAmericaCambridgeBay", 67), ("tzAmericaCancun", 68), ("tzAmericaCaracas", 69), ("tzAmericaCatamarca", 70), ("tzAmericaCayenne", 71), ("tzAmericaCayman", 72), ("tzAmericaChicago", 73), ("tzAmericaChihuahua", 74), ("tzAmericaCordoba", 75), ("tzAmericaCostaRica", 76), ("tzAmericaCuiaba", 77), ("tzAmericaCuracao", 78), ("tzAmericaDanmarkshavn", 79), ("tzAmericaDawson", 80), ("tzAmericaDawsonCreek", 81), ("tzAmericaDenver", 82), ("tzAmericaDetroit", 83), ("tzAmericaDominica", 84), ("tzAmericaEdmonton", 85), ("tzAmericaEirunepe", 86), ("tzAmericaElSalvador", 87), ("tzAmericaEnsenada", 88), ("tzAmericaFortWayne", 89), ("tzAmericaFortaleza", 90), ("tzAmericaGlaceBay", 91), ("tzAmericaGodthab", 92), ("tzAmericaGooseBay", 93), ("tzAmericaGrandTurk", 94), ("tzAmericaGrenada", 95), ("tzAmericaGuadeloupe", 96), ("tzAmericaGuatemala", 97), ("tzAmericaGuayaquil", 98), ("tzAmericaGuyana", 99), ("tzAmericaHalifax", 100), ("tzAmericaHavana", 101), ("tzAmericaHermosillo", 102), ("tzAmericaIndianaIndianapolis", 103), ("tzAmericaIndianaKnox", 104), ("tzAmericaIndianaMarengo", 105), ("tzAmericaIndianaVevay", 106), ("tzAmericaIndianapolis", 107), ("tzAmericaInuvik", 108), ("tzAmericaIqaluit", 109), ("tzAmericaJamaica", 110), ("tzAmericaJujuy", 111), ("tzAmericaJuneau", 112), ("tzAmericaKentuckyLouisville", 113), ("tzAmericaKentuckyMonticello", 114), ("tzAmericaKnoxIN", 115), ("tzAmericaLaPaz", 116), ("tzAmericaLima", 117), ("tzAmericaLosAngeles", 118), ("tzAmericaLouisville", 119), ("tzAmericaMaceio", 120), ("tzAmericaManagua", 121), ("tzAmericaManaus", 122), ("tzAmericaMartinique", 123), ("tzAmericaMazatlan", 124), ("tzAmericaMendoza", 125), ("tzAmericaMenominee", 126), ("tzAmericaMerida", 127), ("tzAmericaMexicoCity", 128), ("tzAmericaMiquelon", 129), ("tzAmericaMonterrey", 130), ("tzAmericaMontevideo", 131), ("tzAmericaMontreal", 132), ("tzAmericaMontserrat", 133), ("tzAmericaNassau", 134), ("tzAmericaNewYork", 135), ("tzAmericaNipigon", 136), ("tzAmericaNome", 137), ("tzAmericaNoronha", 138), ("tzAmericaNorthDakotaCenter", 139), ("tzAmericaPanama", 140), ("tzAmericaPangnirtung", 141), ("tzAmericaParamaribo", 142), ("tzAmericaPhoenix", 143), ("tzAmericaPortofSpain", 144), ("tzAmericaPortauPrince", 145), ("tzAmericaPortoAcre", 146), ("tzAmericaPortoVelho", 147), ("tzAmericaPuertoRico", 148), ("tzAmericaRainyRiver", 149), ("tzAmericaRankinInlet", 150), ("tzAmericaRecife", 151), ("tzAmericaRegina", 152), ("tzAmericaRioBranco", 153), ("tzAmericaRosario", 154), ("tzAmericaSantiago", 155), ("tzAmericaSantoDomingo", 156), ("tzAmericaSaoPaulo", 157), ("tzAmericaScoresbysund", 158), ("tzAmericaShiprock", 159), ("tzAmericaStJohns", 160), ("tzAmericaStKitts", 161), ("tzAmericaStLucia", 162), ("tzAmericaStThomas", 163), ("tzAmericaStVincent", 164), ("tzAmericaSwiftCurrent", 165), ("tzAmericaTegucigalpa", 166), ("tzAmericaThule", 167), ("tzAmericaThunderBay", 168), ("tzAmericaTijuana", 169), ("tzAmericaTortola", 170), ("tzAmericaVancouver", 171), ("tzAmericaVirgin", 172), ("tzAmericaWhitehorse", 173), ("tzAmericaWinnipeg", 174), ("tzAmericaYakutat", 175), ("tzAmericaYellowknife", 176), ("tzAntarcticaCasey", 177), ("tzAntarcticaDavis", 178), ("tzAntarcticaDumontDUrville", 179), ("tzAntarcticaMawson", 180), ("tzAntarcticaMcMurdo", 181), ("tzAntarcticaPalmer", 182), ("tzAntarcticaSouthPole", 183), ("tzAntarcticaSyowa", 184), ("tzAntarcticaVostok", 185), ("tzArcticLongyearbyen", 186), ("tzAsiaAden", 187), ("tzAsiaAlmaty", 188), ("tzAsiaAmman", 189), ("tzAsiaAnadyr", 190), ("tzAsiaAqtau", 191), ("tzAsiaAqtobe", 192), ("tzAsiaAshgabat", 193), ("tzAsiaAshkhabad", 194), ("tzAsiaBaghdad", 195), ("tzAsiaBahrain", 196), ("tzAsiaBaku", 197), ("tzAsiaBangkok", 198), ("tzAsiaBeirut", 199), ("tzAsiaBishkek", 200), ("tzAsiaBrunei", 201), ("tzAsiaCalcutta", 202), ("tzAsiaChoibalsan", 203), ("tzAsiaChongqing", 204), ("tzAsiaChungking", 205), ("tzAsiaColombo", 206), ("tzAsiaDacca", 207), ("tzAsiaDamascus", 208), ("tzAsiaDhaka", 209), ("tzAsiaDili", 210), ("tzAsiaDubai", 211), ("tzAsiaDushanbe", 212), ("tzAsiaGaza", 213), ("tzAsiaHarbin", 214), ("tzAsiaHongKong", 215), ("tzAsiaHovd", 216), ("tzAsiaIrkutsk", 217), ("tzAsiaIstanbul", 218), ("tzAsiaJakarta", 219), ("tzAsiaJayapura", 220), ("tzAsiaJerusalem", 221), ("tzAsiaKabul", 222), ("tzAsiaKamchatka", 223), ("tzAsiaKarachi", 224), ("tzAsiaKashgar", 225), ("tzAsiaKatmandu", 226), ("tzAsiaKrasnoyarsk", 227), ("tzAsiaKualaLumpur", 228), ("tzAsiaKuching", 229), ("tzAsiaKuwait", 230), ("tzAsiaMacao", 231), ("tzAsiaMagadan", 232), ("tzAsiaManila", 233), ("tzAsiaMuscat", 234), ("tzAsiaNicosia", 235), ("tzAsiaNovosibirsk", 236), ("tzAsiaOmsk", 237), ("tzAsiaPhnomPenh", 238), ("tzAsiaPontianak", 239), ("tzAsiaPyongyang", 240), ("tzAsiaQatar", 241), ("tzAsiaRangoon", 242), ("tzAsiaRiyadh", 243), ("tzAsiaSaigon", 244), ("tzAsiaSakhalin", 245), ("tzAsiaSamarkand", 246), ("tzAsiaSeoul", 247), ("tzAsiaShanghai", 248), ("tzAsiaSingapore", 249), ("tzAsiaTaipei", 250), ("tzAsiaTashkent", 251), ("tzAsiaTbilisi", 252), ("tzAsiaTehran", 253), ("tzAsiaTelAviv", 254)) + NamedValues(("tzAsiaThimbu", 255), ("tzAsiaThimphu", 256), ("tzAsiaTokyo", 257), ("tzAsiaUjungPandang", 258), ("tzAsiaUlaanbaatar", 259), ("tzAsiaUlanBator", 260), ("tzAsiaUrumqi", 261), ("tzAsiaVientiane", 262), ("tzAsiaVladivostok", 263), ("tzAsiaYakutsk", 264), ("tzAsiaYekaterinburg", 265), ("tzAsiaYerevan", 266), ("tzAtlanticAzores", 267), ("tzAtlanticBermuda", 268), ("tzAtlanticCanary", 269), ("tzAtlanticCapeVerde", 270), ("tzAtlanticFaeroe", 271), ("tzAtlanticJanMayen", 272), ("tzAtlanticMadeira", 273), ("tzAtlanticReykjavik", 274), ("tzAtlanticSouthGeorgia", 275), ("tzAtlanticStHelena", 276), ("tzAtlanticStanley", 277), ("tzAustraliaACT", 278), ("tzAustraliaAdelaide", 279), ("tzAustraliaBrisbane", 280), ("tzAustraliaBrokenHill", 281), ("tzAustraliaCanberra", 282), ("tzAustraliaDarwin", 283), ("tzAustraliaHobart", 284), ("tzAustraliaLHI", 285), ("tzAustraliaLindeman", 286), ("tzAustraliaLordHowe", 287), ("tzAustraliaMelbourne", 288), ("tzAustraliaNSW", 289), ("tzAustraliaNorth", 290), ("tzAustraliaPerth", 291), ("tzAustraliaQueensland", 292), ("tzAustraliaSouth", 293), ("tzAustraliaSydney", 294), ("tzAustraliaTasmania", 295), ("tzAustraliaVictoria", 296), ("tzAustraliaWest", 297), ("tzAustraliaYancowinna", 298), ("tzBrazilDeNoronha", 299), ("tzBrazilEast", 300), ("tzBrazilWest", 301), ("tzCanadaAtlantic", 302), ("tzCanadaCentral", 303), ("tzCanadaEastSaskatchewan", 304), ("tzCanadaEastern", 305), ("tzCanadaMountain", 306), ("tzCanadaNewfoundland", 307), ("tzCanadaPacific", 308), ("tzCanadaSaskatchewan", 309), ("tzCanadaYukon", 310), ("tzChileContinental", 311), ("tzChileEasterIsland", 312), ("tzCuba", 313), ("tzEgypt", 314), ("tzEire", 315), ("tzEuropeAmsterdam", 316), ("tzEuropeAndorra", 317), ("tzEuropeAthens", 318), ("tzEuropeBelfast", 319), ("tzEuropeBelgrade", 320), ("tzEuropeBerlin", 321), ("tzEuropeBratislava", 322), ("tzEuropeBrussels", 323), ("tzEuropeBucharest", 324), ("tzEuropeBudapest", 325), ("tzEuropeChisinau", 326), ("tzEuropeCopenhagen", 327), ("tzEuropeDublin", 328), ("tzEuropeGibraltar", 329), ("tzEuropeHelsinki", 330), ("tzEuropeIstanbul", 331), ("tzEuropeKaliningrad", 332), ("tzEuropeKiev", 333), ("tzEuropeLisbon", 334), ("tzEuropeLjubljana", 335), ("tzEuropeLondon", 336), ("tzEuropeLuxembourg", 337), ("tzEuropeMadrid", 338), ("tzEuropeMalta", 339), ("tzEuropeMinsk", 340), ("tzEuropeMonaco", 341), ("tzEuropeMoscow", 342), ("tzEuropeNicosia", 343), ("tzEuropeOslo", 344), ("tzEuropeParis", 345), ("tzEuropePrague", 346), ("tzEuropeRiga", 347), ("tzEuropeRome", 348), ("tzEuropeSamara", 349), ("tzEuropeSanMarino", 350), ("tzEuropeSarajevo", 351), ("tzEuropeSimferopol", 352), ("tzEuropeSkopje", 353), ("tzEuropeSofia", 354), ("tzEuropeStockholm", 355), ("tzEuropeTallinn", 356), ("tzEuropeTirane", 357), ("tzEuropeTiraspol", 358), ("tzEuropeUzhgorod", 359), ("tzEuropeVaduz", 360), ("tzEuropeVatican", 361), ("tzEuropeVienna", 362), ("tzEuropeVilnius", 363), ("tzEuropeWarsaw", 364), ("tzEuropeZagreb", 365), ("tzEuropeZaporozhye", 366), ("tzEuropeZurich", 367), ("tzGreatBritainEire", 368), ("tzGreatBritainGreatBritain", 369), ("tzHongKong", 370), ("tzIceland", 371), ("tzIndianAntananarivo", 372), ("tzIndianChagos", 373), ("tzIndianChristmas", 374), ("tzIndianCocos", 375), ("tzIndianComoro", 376), ("tzIndianKerguelen", 377), ("tzIndianMahe", 378), ("tzIndianMaldives", 379), ("tzIndianMauritius", 380), ("tzIndianMayotte", 381), ("tzIndianReunion", 382), ("tzIran", 383), ("tzIsrael", 384), ("tzJamaica", 385), ("tzJapan", 386), ("tzKwajalein", 387), ("tzLibya", 388), ("tzMexicoBajaNorte", 389), ("tzMexicoBajaSur", 390), ("tzMexicoGeneral", 391), ("tzNavajo", 392), ("tzNewZealandChatham", 393), ("tzNewZealandNewZealand", 394), ("tzPacificApia", 395), ("tzPacificAuckland", 396), ("tzPacificChatham", 397), ("tzPacificEaster", 398), ("tzPacificEfate", 399), ("tzPacificEnderbury", 400), ("tzPacificFakaofo", 401), ("tzPacificFiji", 402), ("tzPacificFunafuti", 403), ("tzPacificGalapagos", 404), ("tzPacificGambier", 405), ("tzPacificGuadalcanal", 406), ("tzPacificGuam", 407), ("tzPacificHonolulu", 408), ("tzPacificJohnston", 409), ("tzPacificKiritimati", 410), ("tzPacificKosrae", 411), ("tzPacificKwajalein", 412), ("tzPacificMajuro", 413), ("tzPacificMarquesas", 414), ("tzPacificMidway", 415), ("tzPacificNauru", 416), ("tzPacificNiue", 417), ("tzPacificNorfolk", 418), ("tzPacificNoumea", 419), ("tzPacificPagoPago", 420), ("tzPacificPalau", 421), ("tzPacificPitcairn", 422), ("tzPacificPonape", 423), ("tzPacificPortMoresby", 424), ("tzPacificRarotonga", 425), ("tzPacificSaipan", 426), ("tzPacificSamoa", 427), ("tzPacificTahiti", 428), ("tzPacificTarawa", 429), ("tzPacificTongatapu", 430), ("tzPacificTruk", 431), ("tzPacificWake", 432), ("tzPacificWallis", 433), ("tzPacificYap", 434), ("tzPoland", 435), ("tzPortugal", 436), ("tzSingapore", 437), ("tzTurkey", 438), ("tzUSAlaska", 439), ("tzUSAleutian", 440), ("tzUSArizona", 441), ("tzUSCentral", 442), ("tzUSEastIndiana", 443), ("tzUSEastern", 444), ("tzUSHawaii", 445), ("tzUSIndianaStarke", 446), ("tzUSMichigan", 447), ("tzUSMountain", 448), ("tzUSPacific", 449), ("tzUSSamoa", 450)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectionFromTimeZoneList.setStatus('current')
timeZoneAdjustForDST = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 7), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneAdjustForDST.setStatus('current')
customTimeZoneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8))
customTimeZoneStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customTimeZoneStatus.setStatus('current')
timeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneName.setStatus('current')
timeOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeOffset.setStatus('current')
timeSummerName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerName.setStatus('current')
timeSummerOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerOffset.setStatus('current')
timeSummerMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("fixed", 1), ("recurring", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerMode.setStatus('current')
timeSummerRecStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartMonth.setStatus('current')
timeSummerRecStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("last", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartWeek.setStatus('current')
timeSummerRecStartDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartDay.setStatus('current')
timeSummerRecStartHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartHour.setStatus('current')
timeSummerRecStartMin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartMin.setStatus('current')
timeSummerRecEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndMonth.setStatus('current')
timeSummerRecEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("last", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndWeek.setStatus('current')
timeSummerRecEndDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndDay.setStatus('current')
timeSummerRecEndHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndHour.setStatus('current')
timeSummerRecEndMin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndMin.setStatus('current')
timeSummerFixStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartMonth.setStatus('current')
timeSummerFixStartDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartDay.setStatus('current')
timeSummerFixStartHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartHour.setStatus('current')
timeSummerFixStartMinute = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartMinute.setStatus('current')
timeSummerFixEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndMonth.setStatus('current')
timeSummerFixEndDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndDay.setStatus('current')
timeSummerFixEndHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndHour.setStatus('current')
timeSummerFixEndMinute = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndMinute.setStatus('current')
networkTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9))
timeStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeStatus.setStatus('current')
timeSntpMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("unicast", 1), ("multicast", 2), ("anycast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpMode.setStatus('current')
timeSntpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("version1", 0), ("version2", 1), ("version3", 2), ("version4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpVersion.setStatus('current')
timeSntpHost1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpHost1.setStatus('current')
timeSntpHost2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpHost2.setStatus('current')
sntpStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6))
sntpStatAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatAddress.setStatus('current')
sntpStatLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatLastUpdate.setStatus('current')
sntpStatLeapIndicator = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noWarning", 0), ("minutes61", 1), ("minutes59", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatLeapIndicator.setStatus('current')
sntpStatVersion = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ipV4", 3), ("ipv4ipv6osi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatVersion.setStatus('current')
sntpStatMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 0), ("symmetricActive", 1), ("symmetricPassive", 2), ("client", 3), ("server", 4), ("broadcast", 5), ("reservedNTP", 6), ("reserved2", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatMode.setStatus('current')
sntpStatStratum = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatStratum.setStatus('current')
sntpStatRefId = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatRefId.setStatus('current')
sntpStatOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatOffset.setStatus('current')
timeSntpServerAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpServerAuthentication.setStatus('current')
timeSntpKeyID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpKeyID.setStatus('current')
timeSntpKeyID2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpKeyID2.setStatus('current')
mgtBootFilesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1))
bootFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootFileStatus.setStatus('current')
fileFirmwareHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileFirmwareHost.setStatus('current')
fileFirmwareName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileFirmwareName.setStatus('current')
fileConfigurationHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileConfigurationHost.setStatus('current')
fileConfigurationName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileConfigurationName.setStatus('current')
mgtfirmwareUpdatesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2))
firmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateStatus.setStatus('current')
firmwareUpdateAuto = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateAuto.setStatus('current')
firmwareUpdateBundleVersionCm100 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm100.setStatus('current')
firmwareUpdateBundleVersionCm110 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm110.setStatus('current')
firmwareUpdateBundleVersionCm1000OrCm1000Sfp = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1000OrCm1000Sfp.setStatus('current')
firmwareUpdateBundleVersionCm1110 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1110.setStatus('current')
firmwareUpdateBundleVersionCm1110Sfp = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1110Sfp.setStatus('current')
firmwareUpdateBundleVersionCm100mm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm100mm.setStatus('current')
firmwareUpdateBundleVersionCm1000mm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1000mm.setStatus('current')
firmwareUpdateBundleVersionCm10g = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm10g.setStatus('current')
nettxfrTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3), )
if mibBuilder.loadTexts: nettxfrTable.setStatus('current')
nettxfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "nettxfrSessionID"))
if mibBuilder.loadTexts: nettxfrEntry.setStatus('current')
nettxfrSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nettxfrSessionID.setStatus('current')
nettxfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fileNotFound", -3), ("busy", -2), ("error", -1), ("idle", 0), ("start", 1), ("transferringFile", 2), ("erassingFlash", 3), ("programmingFlash", 4), ("verifyingFlash", 5), ("moduleReset", 6), ("processingScriptFile", 7), ("finished", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrStatus.setStatus('current')
nettxfrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("load", 0), ("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrDirection.setStatus('current')
nettxfrFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("configuration", 0), ("firmware", 1), ("media-converter", 2), ("script", 3), ("serialt-buf", 4), ("ssh-server", 5), ("ssl", 6), ("text-config", 7), ("diagnostic-file", 8), ("sntp-keys", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrFileType.setStatus('current')
nettxfrFileHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrFileHost.setStatus('current')
nettxfrFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrFileName.setStatus('current')
nettxfrMCSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 7), SlotNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrMCSlotNumber.setStatus('current')
nettxfrUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrUserName.setStatus('current')
nettxfrSSHKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dsa", 0), ("rsa", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrSSHKeyType.setStatus('current')
nettxfrSSLType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ca-list", 0), ("certificate", 1), ("private-key", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrSSLType.setStatus('current')
nettxfrSessionInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("in-use", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrSessionInUse.setStatus('current')
nettxfrTftpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrTftpPort.setStatus('current')
adminFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("writeToFlash", 1), ("resetToFactoryDefaults", 2), ("reboot", 3), ("resetSecurIDNodeSecret", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminFunction.setStatus('current')
adminLastFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("writeToFlash", 1), ("resetToFactoryDefaults", 2), ("reboot", 3), ("resetSecurIDNodeSecret", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminLastFunction.setStatus('current')
adminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("successful", 0), ("error", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminStatus.setStatus('current')
adminbootReason = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 4), Bits().clone(namedValues=NamedValues(("bootCrash", 29), ("bootWarmStart", 30), ("bootNormal", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminbootReason.setStatus('current')
adminDiagFileAvailable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 5), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminDiagFileAvailable.setStatus('current')
displayFormatStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayFormatStatus.setStatus('current')
cfgTemperatureUnits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("celsius", 0), ("fahrenheit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgTemperatureUnits.setStatus('current')
cfgSfpPowerUnits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("milliwats", 0), ("decibelmilliwatts", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSfpPowerUnits.setStatus('current')
cfgTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("time12HourFmt", 0), ("time24HourFmt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgTimeFormat.setStatus('current')
cfgDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dateMonthDayYearFmt", 0), ("dateDayMonthYearFmt", 1), ("dateYearMonthDayFmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDateFormat.setStatus('current')
mgtChassisSlotPowerScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1), )
if mibBuilder.loadTexts: mgtChassisSlotPowerScheduleTable.setStatus('current')
mgtChassisSlotPowerScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "powerSchedSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "powerSchedDayOfWeek"))
if mibBuilder.loadTexts: mgtChassisSlotPowerScheduleEntry.setStatus('current')
powerSchedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: powerSchedSlotIndex.setStatus('current')
powerSchedDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7))))
if mibBuilder.loadTexts: powerSchedDayOfWeek.setStatus('current')
powerSchedConifgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 4), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedConifgStatus.setStatus('current')
powerSchedOnHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedOnHour.setStatus('current')
powerSchedOnMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedOnMinute.setStatus('current')
powerSchedOffHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedOffHour.setStatus('current')
powerSchedOffMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedOffMinute.setStatus('current')
mcrMgtModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 1)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"), ("PERLE-MCR-MGT-MIB", "mcrModuleSerialNumber"))
if mibBuilder.loadTexts: mcrMgtModuleInserted.setStatus('current')
mcrMgtSystemBoot = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 2)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "adminbootReason"))
if mibBuilder.loadTexts: mcrMgtSystemBoot.setStatus('current')
mcrMgtReset = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 3)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtReset.setStatus('current')
mcrMgtResetFactory = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 4)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtResetFactory.setStatus('current')
mcrMgtEtheLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 5)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtEtheLinkUp.setStatus('current')
mcrMgtEtheLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 6)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtEtheLinkDown.setStatus('current')
mcrMgtConMonDSRSigChg = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 7)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrMgtConsoleDSR"))
if mibBuilder.loadTexts: mcrMgtConMonDSRSigChg.setStatus('current')
mcrMgtAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 8)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mgtAccessMethod"), ("PERLE-MCR-MGT-MIB", "remoteMgtIpAddress"))
if mibBuilder.loadTexts: mcrMgtAuthFail.setStatus('current')
mcrMgtAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 9)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mgtAccessMethod"), ("PERLE-MCR-MGT-MIB", "remoteMgtIpAddress"))
if mibBuilder.loadTexts: mcrMgtAuthSuccess.setStatus('current')
mcrMgtDateTimeChg = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 10)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "systemDateTimeAndOffset"))
if mibBuilder.loadTexts: mcrMgtDateTimeChg.setStatus('current')
mcrMgtSntpServFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 11)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "timeSntpHost1"), ("PERLE-MCR-MGT-MIB", "timeSntpHost2"))
if mibBuilder.loadTexts: mcrMgtSntpServFail.setStatus('current')
mcrMgtSntpServRec = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 12)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "timeSntpHost1"), ("PERLE-MCR-MGT-MIB", "timeSntpHost2"))
if mibBuilder.loadTexts: mcrMgtSntpServRec.setStatus('current')
mcrMgtSnmpTrapHostFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 13)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIndex"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIpAddress"))
if mibBuilder.loadTexts: mcrMgtSnmpTrapHostFail.setStatus('current')
mcrMgtSnmpTrapHostRec = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 14)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIndex"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIpAddress"))
if mibBuilder.loadTexts: mcrMgtSnmpTrapHostRec.setStatus('current')
mcrMgtEmailServFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 15)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "emailSMTPHost"))
if mibBuilder.loadTexts: mcrMgtEmailServFail.setStatus('current')
mcrMgtEmailServRec = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 16)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "emailSMTPHost"))
if mibBuilder.loadTexts: mcrMgtEmailServRec.setStatus('current')
mcrMgtConfSavedFlash = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 17)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtConfSavedFlash.setStatus('current')
mcrMgtIpAddrDynChg = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 18)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "networkIpAddress"))
if mibBuilder.loadTexts: mcrMgtIpAddrDynChg.setStatus('current')
mcrMgtTftpUploadFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 19)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"))
if mibBuilder.loadTexts: mcrMgtTftpUploadFail.setStatus('current')
mcrMgtTftpUploadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 20)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"))
if mibBuilder.loadTexts: mcrMgtTftpUploadSuccess.setStatus('current')
mcrMgtTftpDownloadFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 21)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"))
if mibBuilder.loadTexts: mcrMgtTftpDownloadFail.setStatus('current')
mcrMgtTftpDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 22)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"))
if mibBuilder.loadTexts: mcrMgtTftpDownloadSuccess.setStatus('current')
mcrMgtChassisMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 23)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtChassisMismatch.setStatus('current')
mcrChassisAdd = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 24)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "chassisModelName"), ("PERLE-MCR-MGT-MIB", "chassisSerialNumber"))
if mibBuilder.loadTexts: mcrChassisAdd.setStatus('current')
mcrChassisRemove = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 25)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisRemove.setStatus('current')
mcrChassisReset = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 26)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisReset.setStatus('current')
mcrChassisTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 27)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "chassisTemperature"), ("PERLE-MCR-MGT-MIB", "chassisCfgHighTempThreshold"))
if mibBuilder.loadTexts: mcrChassisTemperatureAlarm.setStatus('current')
mcrChassisTemperatureRecover = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 28)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "chassisTemperature"))
if mibBuilder.loadTexts: mcrChassisTemperatureRecover.setStatus('current')
mcrChassisSlotPoweredOn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 29)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"), ("PERLE-MCR-MGT-MIB", "mcrModuleSerialNumber"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrChassisSlotPoweredOn.setStatus('current')
mcrChassisSlotPoweredOff = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 30)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"))
if mibBuilder.loadTexts: mcrChassisSlotPoweredOff.setStatus('current')
mcrChassisFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 31)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisFail.setStatus('current')
mcrChassisOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 32)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisOk.setStatus('current')
mcrPsmuInserted = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 33)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuModelName"))
if mibBuilder.loadTexts: mcrPsmuInserted.setStatus('current')
mcrPsmuRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 34)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuRemoved.setStatus('current')
mcrPsmuPsuFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 35)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuStatus"))
if mibBuilder.loadTexts: mcrPsmuPsuFail.setStatus('current')
mcrPsmuPsuOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 36)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuPsuOk.setStatus('current')
mcrPsmuPsuVoltageFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 37)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuPsuVoltageFail.setStatus('current')
mcrPsmuPsuVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 38)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuPsuVoltageOk.setStatus('current')
mcrPsmuFanFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 39)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuFanFail.setStatus('current')
mcrPsmuFanOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 40)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuFanOk.setStatus('current')
mcrMediaInserted = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 42)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"), ("PERLE-MCR-MGT-MIB", "mcrModuleSerialNumber"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaInserted.setStatus('current')
mcrMediaRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 43)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaRemoved.setStatus('current')
mcrMediaReset = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 44)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaReset.setStatus('current')
mcrMediaLostCommunication = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 45)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaLostCommunication.setStatus('current')
mcrMediaRecovCommunication = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 46)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaRecovCommunication.setStatus('current')
mcrMediaFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 47)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleDiagStatus"))
if mibBuilder.loadTexts: mcrMediaFail.setStatus('current')
mcrMediaOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 48)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaOk.setStatus('current')
mcrMediaLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 49)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortDescr"))
if mibBuilder.loadTexts: mcrMediaLinkUp.setStatus('current')
mcrMediaLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 50)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortDescr"))
if mibBuilder.loadTexts: mcrMediaLinkDown.setStatus('current')
mcrMediaConfUpdateFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 51)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaConfUpdateFail.setStatus('current')
mcrMediaConfUpdateSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 52)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaConfUpdateSuccess.setStatus('current')
mcrMediaConfMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 53)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleType"), ("PERLE-MCR-MGT-MIB", "mcrModuleSubTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleSubType"))
if mibBuilder.loadTexts: mcrMediaConfMismatch.setStatus('current')
mcrMediaConfMismatchResolv = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 54)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleType"), ("PERLE-MCR-MGT-MIB", "mcrModuleSubTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleSubType"))
if mibBuilder.loadTexts: mcrMediaConfMismatchResolv.setStatus('current')
mcrMediaFirmwareUpdateFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 55)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"))
if mibBuilder.loadTexts: mcrMediaFirmwareUpdateFail.setStatus('current')
mcrMediaFirmwareUpdateSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 56)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"))
if mibBuilder.loadTexts: mcrMediaFirmwareUpdateSuccess.setStatus('current')
mcrSfpInserted = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 57)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpInserted.setStatus('current')
mcrSfpRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 58)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpRemoved.setStatus('current')
mcrSfpHighTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 59)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTempWarn.setStatus('current')
mcrSfpHighTempWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 60)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTempWarnRecov.setStatus('current')
mcrSfpHighTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 61)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTempAlarm.setStatus('current')
mcrSfpHighTempAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 62)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTempAlarmRecov.setStatus('current')
mcrSfpLowTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 63)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTempWarn.setStatus('current')
mcrSfpLowTempWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 64)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTempWarnRecov.setStatus('current')
mcrSfpLowTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 65)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTempAlarm.setStatus('current')
mcrSfpLowTempAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 66)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTempAlarmRecov.setStatus('current')
mcrSfpHighVoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 67)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighVoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighVoltWarn.setStatus('current')
mcrSfpHighVoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 68)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighVoltWarnRecov.setStatus('current')
mcrSfpHighVoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 69)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighVoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighVoltAlarm.setStatus('current')
mcrSfpHighVoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 70)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighVoltAlarmRecov.setStatus('current')
mcrSfpLowVoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 71)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowVoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowVoltWarn.setStatus('current')
mcrSfpLowVoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 72)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowVoltWarnRecov.setStatus('current')
mcrSfpLowVoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 73)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowVoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowVoltAlarm.setStatus('current')
mcrSfpLowVoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 74)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowVoltAlarmRecov.setStatus('current')
mcrSfpHighTxBiasWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 75)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxBiasWarn.setStatus('current')
mcrSfpHighTxBiasWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 76)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxBiasWarnRecov.setStatus('current')
mcrSfpHighTxBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 77)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxBiasAlarm.setStatus('current')
mcrSfpHighTxBiasAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 78)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxBiasAlarmRecov.setStatus('current')
mcrSfpLowTxBiasWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 79)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxBiasWarn.setStatus('current')
mcrSfpLowTxBiasWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 80)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxBiasWarnRecov.setStatus('current')
mcrSfpLowTxBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 81)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxBiasAlarm.setStatus('current')
mcrSfpLowTxBiasAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 82)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxBiasAlarmRecov.setStatus('current')
mcrSfpHighTxPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 83)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxPowerWarn.setStatus('current')
mcrSfpHighTxPowerWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 84)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxPowerWarnRecov.setStatus('current')
mcrSfpHighTxPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 85)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxPowerAlarm.setStatus('current')
mcrSfpHighTxPowerAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 86)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxPowerAlarmRecov.setStatus('current')
mcrSfpLowTxPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 87)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxPowerWarn.setStatus('current')
mcrSfpLowTxPowerWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 88)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxPowerWarnRecov.setStatus('current')
mcrSfpLowTxPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 89)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxPowerAlarm.setStatus('current')
mcrSfpLowTxPowerAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 90)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxPowerAlarmRecov.setStatus('current')
mcrSfpHighRxPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 91)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighRxPowerWarn.setStatus('current')
mcrSfpHighRxPowerWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 92)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighRxPowerWarnRecov.setStatus('current')
mcrSfpHighRxPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 93)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighRxPowerAlarm.setStatus('current')
mcrSfpHighRxPowerAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 94)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighRxPowerAlarmRecov.setStatus('current')
mcrSfpLowRxPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 95)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowRxPowerWarn.setStatus('current')
mcrSfpLowRxPowerWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 96)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowRxPowerWarnRecov.setStatus('current')
mcrSfpLowRxPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 97)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowRxPowerAlarm.setStatus('current')
mcrSfpLowRxPowerAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 98)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowRxPowerAlarmRecov.setStatus('current')
mcrChassisCommTempSensorFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 99)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisCommTempSensorFail.setStatus('current')
mcrChassisCommTempSensorRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 100)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisCommTempSensorRecov.setStatus('current')
mcrMediaDetectFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 101)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaDetectFail.setStatus('current')
mcrMediaBadImage = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 102)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaBadImage.setStatus('current')
mcrSfpLostComm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 103)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpLostComm.setStatus('current')
mcrSfpRecovComm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 104)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpRecovComm.setStatus('current')
mcrModuleNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 105)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrModuleNotSupported.setStatus('current')
mcrModuleFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 106)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrModuleFirmwareUpdate.setStatus('current')
mcrSfpPortShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 107)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpPortShutdown.setStatus('current')
mcrSfpPortShutdownRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 108)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpPortShutdownRecov.setStatus('current')
mcrXfpHighApdBiasWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 109)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighApdBiasWarn.setStatus('current')
mcrXfpHighApdBiasWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 110)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighApdBiasWarnRecov.setStatus('current')
mcrXfpHighApdBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 111)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighApdBiasAlarm.setStatus('current')
mcrXfpHighApdBiasAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 112)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighApdBiasAlarmRecov.setStatus('current')
mcrXfpLowApdBiasWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 113)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowApdBiasWarn.setStatus('current')
mcrXfpLowApdBiasWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 114)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowApdBiasWarnRecov.setStatus('current')
mcrXfpLowApdBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 115)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowApdBiasAlarm.setStatus('current')
mcrXfpLowApdBiasAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 116)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowApdBiasAlarmRecov.setStatus('current')
mcrXfpHighTecCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 117)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighTecCurrentWarn.setStatus('current')
mcrXfpHighTecCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 118)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighTecCurrentWarnRecov.setStatus('current')
mcrXfpHighTecCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 119)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighTecCurrentAlarm.setStatus('current')
mcrXfpHighTecCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 120)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighTecCurrentAlarmRecov.setStatus('current')
mcrXfpLowTecCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 121)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowTecCurrentWarn.setStatus('current')
mcrXfpLowTecCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 122)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowTecCurrentWarnRecov.setStatus('current')
mcrXfpLowTecCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 123)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowTecCurrentAlarm.setStatus('current')
mcrXfpLowTecCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 124)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowTecCurrentAlarmRecov.setStatus('current')
mcrXfpHighLaserTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 125)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserTempWarn.setStatus('current')
mcrXfpHighLaserTempWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 126)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserTempWarnRecov.setStatus('current')
mcrXfpHighLaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 127)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserTempAlarm.setStatus('current')
mcrXfpHighLaserTempAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 128)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserTempAlarmRecov.setStatus('current')
mcrXfpLowLaserTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 129)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserTempWarn.setStatus('current')
mcrXfpLowLaserTempWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 130)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserTempWarnRecov.setStatus('current')
mcrXfpLowLaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 131)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserTempAlarm.setStatus('current')
mcrXfpLowLaserTempAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 132)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserTempAlarmRecov.setStatus('current')
mcrXfpHighLaserWavelengthWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 133)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthWarn.setStatus('current')
mcrXfpHighLaserWavelengthWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 134)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthWarnRecov.setStatus('current')
mcrXfpHighLaserWavelengthAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 135)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthAlarm.setStatus('current')
mcrXfpHighLaserWavelengthAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 136)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthAlarmRecov.setStatus('current')
mcrXfpLowLaserWavelengthWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 137)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthWarn.setStatus('current')
mcrXfpLowLaserWavelengthWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 138)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthWarnRecov.setStatus('current')
mcrXfpLowLaserWavelengthAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 139)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthAlarm.setStatus('current')
mcrXfpLowLaserWavelengthAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 140)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthAlarmRecov.setStatus('current')
mcrXfpHigh5VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 141)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VoltWarn.setStatus('current')
mcrXfpHigh5VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 142)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VoltWarnRecov.setStatus('current')
mcrXfpHigh5VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 143)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VoltAlarm.setStatus('current')
mcrXfpHigh5VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 144)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VoltAlarmRecov.setStatus('current')
mcrXfpLow5VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 145)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VoltWarn.setStatus('current')
mcrXfpLow5VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 146)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VoltWarnRecov.setStatus('current')
mcrXfpLow5VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 147)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VoltAlarm.setStatus('current')
mcrXfpLow5VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 148)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VoltAlarmRecov.setStatus('current')
mcrXfpHigh33VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 149)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VoltWarn.setStatus('current')
mcrXfpHigh33VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 150)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VoltWarnRecov.setStatus('current')
mcrXfpHigh33VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 151)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VoltAlarm.setStatus('current')
mcrXfpHigh33VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 152)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VoltAlarmRecov.setStatus('current')
mcrXfpLow33VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 153)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VoltWarn.setStatus('current')
mcrXfpLow33VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 154)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VoltWarnRecov.setStatus('current')
mcrXfpLow33VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 155)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VoltAlarm.setStatus('current')
mcrXfpLow33VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 156)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VoltAlarmRecov.setStatus('current')
mcrXfpHigh18VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 157)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VoltWarn.setStatus('current')
mcrXfpHigh18VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 158)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VoltWarnRecov.setStatus('current')
mcrXfpHigh18VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 159)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VoltAlarm.setStatus('current')
mcrXfpHigh18VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 160)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VoltAlarmRecov.setStatus('current')
mcrXfpLow18VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 161)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VoltWarn.setStatus('current')
mcrXfpLow18VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 162)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VoltWarnRecov.setStatus('current')
mcrXfpLow18VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 163)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VoltAlarm.setStatus('current')
mcrXfpLow18VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 164)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VoltAlarmRecov.setStatus('current')
mcrXfpHighM52VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 165)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VoltWarn.setStatus('current')
mcrXfpHighM52VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 166)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VoltWarnRecov.setStatus('current')
mcrXfpHighM52VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 167)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VoltAlarm.setStatus('current')
mcrXfpHighM52VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 168)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VoltAlarmRecov.setStatus('current')
mcrXfpLowM52VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 169)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VoltWarn.setStatus('current')
mcrXfpLowM52VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 170)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VoltWarnRecov.setStatus('current')
mcrXfpLowM52VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 171)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VoltAlarm.setStatus('current')
mcrXfpLowM52VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 172)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VoltAlarmRecov.setStatus('current')
mcrXfpHigh5VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 173)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentWarn.setStatus('current')
mcrXfpHigh5VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 174)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentWarnRecov.setStatus('current')
mcrXfpHigh5VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 175)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentAlarm.setStatus('current')
mcrXfpHigh5VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 176)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentAlarmRecov.setStatus('current')
mcrXfpLow5VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 177)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VCurrentWarn.setStatus('current')
mcrXfpLow5VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 178)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VCurrentWarnRecov.setStatus('current')
mcrXfpLow5VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 179)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VCurrentAlarm.setStatus('current')
mcrXfpLow5VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 180)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VCurrentAlarmRecov.setStatus('current')
mcrXfpHigh33VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 181)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentWarn.setStatus('current')
mcrXfpHigh33VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 182)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentWarnRecov.setStatus('current')
mcrXfpHigh33VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 183)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentAlarm.setStatus('current')
mcrXfpHigh33VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 184)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentAlarmRecov.setStatus('current')
mcrXfpLow33VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 185)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VCurrentWarn.setStatus('current')
mcrXfpLow33VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 186)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VCurrentWarnRecov.setStatus('current')
mcrXfpLow33VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 187)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VCurrentAlarm.setStatus('current')
mcrXfpLow33VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 188)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VCurrentAlarmRecov.setStatus('current')
mcrXfpHigh18VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 189)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentWarn.setStatus('current')
mcrXfpHigh18VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 190)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentWarnRecov.setStatus('current')
mcrXfpHigh18VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 191)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentAlarm.setStatus('current')
mcrXfpHigh18VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 192)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentAlarmRecov.setStatus('current')
mcrXfpLow18VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 193)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VCurrentWarn.setStatus('current')
mcrXfpLow18VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 194)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VCurrentWarnRecov.setStatus('current')
mcrXfpLow18VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 195)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VCurrentAlarm.setStatus('current')
mcrXfpLow18VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 196)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VCurrentAlarmRecov.setStatus('current')
mcrXfpHighM52VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 197)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentWarn.setStatus('current')
mcrXfpHighM52VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 198)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentWarnRecov.setStatus('current')
mcrXfpHighM52VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 199)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentAlarm.setStatus('current')
mcrXfpHighM52VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 200)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentAlarmRecov.setStatus('current')
mcrXfpLowM52VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 201)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentWarn.setStatus('current')
mcrXfpLowM52VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 202)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentWarnRecov.setStatus('current')
mcrXfpLowM52VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 203)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentAlarm.setStatus('current')
mcrXfpLowM52VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 204)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentAlarmRecov.setStatus('current')
mcrXfpHighVCC5Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 205)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC5Warn.setStatus('current')
mcrXfpHighVCC5WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 206)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC5WarnRecov.setStatus('current')
mcrXfpHighVCC5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 207)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC5Alarm.setStatus('current')
mcrXfpHighVCC5AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 208)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC5AlarmRecov.setStatus('current')
mcrXfpLowVCC5Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 209)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC5Warn.setStatus('current')
mcrXfpLowVCC5WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 210)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC5WarnRecov.setStatus('current')
mcrXfpLowVCC5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 211)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC5Alarm.setStatus('current')
mcrXfpLowVCC5AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 212)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC5AlarmRecov.setStatus('current')
mcrXfpHighVCC3Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 213)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC3Warn.setStatus('current')
mcrXfpHighVCC3WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 214)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC3WarnRecov.setStatus('current')
mcrXfpHighVCC3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 215)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC3Alarm.setStatus('current')
mcrXfpHighVCC3AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 216)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC3AlarmRecov.setStatus('current')
mcrXfpLowVCC3Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 217)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC3Warn.setStatus('current')
mcrXfpLowVCC3WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 218)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC3WarnRecov.setStatus('current')
mcrXfpLowVCC3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 219)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC3Alarm.setStatus('current')
mcrXfpLowVCC3AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 220)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC3AlarmRecov.setStatus('current')
mcrXfpHighVCC2Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 221)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC2Warn.setStatus('current')
mcrXfpHighVCC2WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 222)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC2WarnRecov.setStatus('current')
mcrXfpHighVCC2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 223)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC2Alarm.setStatus('current')
mcrXfpHighVCC2AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 224)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC2AlarmRecov.setStatus('current')
mcrXfpLowVCC2Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 225)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC2Warn.setStatus('current')
mcrXfpLowVCC2WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 226)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC2WarnRecov.setStatus('current')
mcrXfpLowVCC2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 227)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC2Alarm.setStatus('current')
mcrXfpLowVCC2AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 228)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC2AlarmRecov.setStatus('current')
mcrXfpHighVEE5Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 229)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVEE5Warn.setStatus('current')
mcrXfpHighVEE5WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 230)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVEE5WarnRecov.setStatus('current')
mcrXfpHighVEE5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 231)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVEE5Alarm.setStatus('current')
mcrXfpHighVEE5AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 232)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVEE5AlarmRecov.setStatus('current')
mcrXfpLowVEE5Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 233)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVEE5Warn.setStatus('current')
mcrXfpLowVEE5WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 234)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVEE5WarnRecov.setStatus('current')
mcrXfpLowVEE5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 235)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVEE5Alarm.setStatus('current')
mcrXfpLowVEE5AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 236)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVEE5AlarmRecov.setStatus('current')
mcrSfpSpeedMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 237)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpSpeedMismatch.setStatus('current')
mcrSfpSpeedMismatchRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 238)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpSpeedMismatchRecov.setStatus('current')
mcrXfpPowerExceeded = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 239)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrXfpPowerExceeded.setStatus('current')
mcrXfpPowerExceededRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 240)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrXfpPowerExceededRecov.setStatus('current')
mcrLinkTestError = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 241)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrLinkTestError.setStatus('current')
mcrAlarmRelayEngaged = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 242)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrAlarmRelayEngaged.setStatus('current')
mcrAlarmRelayDisengaged = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 243)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrAlarmRelayDisengaged.setStatus('current')
mcrBandwidthLevelUpstreamLow = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 244)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"))
if mibBuilder.loadTexts: mcrBandwidthLevelUpstreamLow.setStatus('current')
mcrBandwidthLevelUpstreamRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 245)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"))
if mibBuilder.loadTexts: mcrBandwidthLevelUpstreamRecov.setStatus('current')
mcrBandwidthLevelDownstreamLow = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 246)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"))
if mibBuilder.loadTexts: mcrBandwidthLevelDownstreamLow.setStatus('current')
mcrBandwidthLevelDownstreamRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 247)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"))
if mibBuilder.loadTexts: mcrBandwidthLevelDownstreamRecov.setStatus('current')
mcrMediaRemoteReset = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 248)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaRemoteReset.setStatus('current')
mcrMGTMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 1))
mcrMGTMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2))
mcrMGTMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 1, 1)).setObjects(("PERLE-MCR-MGT-MIB", "mcrMGTMIBChassisGroup"), ("PERLE-MCR-MGT-MIB", "mcrMGTMIBMediaGroup"), ("PERLE-MCR-MGT-MIB", "mcrMGTMIBMgtGroup"), ("PERLE-MCR-MGT-MIB", "mcrMGTMIBNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBCompliance = mcrMGTMIBCompliance.setStatus('current')
mcrMGTMIBChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2, 1)).setObjects(("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"), ("PERLE-MCR-MGT-MIB", "chassisModelName"), ("PERLE-MCR-MGT-MIB", "chassisModelDesc"), ("PERLE-MCR-MGT-MIB", "chassisSerialNumber"), ("PERLE-MCR-MGT-MIB", "chassisBootloaderVersion"), ("PERLE-MCR-MGT-MIB", "chassisFirmwareVersion"), ("PERLE-MCR-MGT-MIB", "chassisOutStandWarnAlarms"), ("PERLE-MCR-MGT-MIB", "chassisDiagStatus"), ("PERLE-MCR-MGT-MIB", "chassisTemperature"), ("PERLE-MCR-MGT-MIB", "chassisCfgHighTempThreshold"), ("PERLE-MCR-MGT-MIB", "chassisReset"), ("PERLE-MCR-MGT-MIB", "chassisCfgMgmtSlot"), ("PERLE-MCR-MGT-MIB", "mcrPsmuModelName"), ("PERLE-MCR-MGT-MIB", "mcrPsmuModelDesc"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuSerialNumber"), ("PERLE-MCR-MGT-MIB", "mcrPsmuBootloaderVersion"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFirmwareVersion"), ("PERLE-MCR-MGT-MIB", "mcrPsmuOutStandWarnAlarms"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuStatus"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuVoltage"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuPowerUsage"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFanStatus"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFanSpeed"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"), ("PERLE-MCR-MGT-MIB", "mcrUnManagedModuleSlotName"), ("PERLE-MCR-MGT-MIB", "mcrModuleSerialNumber"), ("PERLE-MCR-MGT-MIB", "mcrModuleBootloaderVersion"), ("PERLE-MCR-MGT-MIB", "mcrModuleFirmwareVersion"), ("PERLE-MCR-MGT-MIB", "mcrModuleoOutStandWarnAlarms"), ("PERLE-MCR-MGT-MIB", "mcrModuleDiagStatus"), ("PERLE-MCR-MGT-MIB", "mcrModuleTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfigBackupRestore"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleType"), ("PERLE-MCR-MGT-MIB", "mcrChassisPwrUpSlotPwrState"), ("PERLE-MCR-MGT-MIB", "mcrCurrentPowerState"), ("PERLE-MCR-MGT-MIB", "mcrPowerScheduleEnable"), ("PERLE-MCR-MGT-MIB", "mcrModuleReset"), ("PERLE-MCR-MGT-MIB", "mcrModuleResetToFactory"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelDesc"), ("PERLE-MCR-MGT-MIB", "alarmWarnSeverity"), ("PERLE-MCR-MGT-MIB", "alarmWarnType"), ("PERLE-MCR-MGT-MIB", "alarmWarnFlags"), ("PERLE-MCR-MGT-MIB", "alarmWarnChassisNum"), ("PERLE-MCR-MGT-MIB", "alarmWarnDeviceNum"), ("PERLE-MCR-MGT-MIB", "alarmWarnTimeStamp"), ("PERLE-MCR-MGT-MIB", "alarmWarnMessage"), ("PERLE-MCR-MGT-MIB", "alarmWarnPortNum"), ("PERLE-MCR-MGT-MIB", "moduleModel"), ("PERLE-MCR-MGT-MIB", "portName"), ("PERLE-MCR-MGT-MIB", "portEnable"), ("PERLE-MCR-MGT-MIB", "portType"), ("PERLE-MCR-MGT-MIB", "portLinkStatus"), ("PERLE-MCR-MGT-MIB", "portConnType"), ("PERLE-MCR-MGT-MIB", "portAutoNegState"), ("PERLE-MCR-MGT-MIB", "portSpeed"), ("PERLE-MCR-MGT-MIB", "portDuplex"), ("PERLE-MCR-MGT-MIB", "portPause"), ("PERLE-MCR-MGT-MIB", "portRemoteStatus"), ("PERLE-MCR-MGT-MIB", "portMediaType"), ("PERLE-MCR-MGT-MIB", "portPhysicalProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBChassisGroup = mcrMGTMIBChassisGroup.setStatus('current')
mcrMGTMIBMediaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2, 2))
for _mcrMGTMIBMediaGroup_obj in [[("PERLE-MCR-MGT-MIB", "cm1000Modelname"), ("PERLE-MCR-MGT-MIB", "cm1000ModelDesc"), ("PERLE-MCR-MGT-MIB", "cm1000HwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw1FiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw4Duplex"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw5Pause"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw6Loopback"), ("PERLE-MCR-MGT-MIB", "cm1000FiberLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1000FiberConnType"), ("PERLE-MCR-MGT-MIB", "cm1000FiberAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1000FiberSpeed"), ("PERLE-MCR-MGT-MIB", "cm1000FiberDuplex"), ("PERLE-MCR-MGT-MIB", "cm1000FiberPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000FiberLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1000FiberReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm1000FiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm1000CopperLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1000CopperConnType"), ("PERLE-MCR-MGT-MIB", "cm1000CopperAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1000CopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm1000CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm1000CopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm1000CopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000CopperLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigJumboPackets"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigFiberPortName"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigFiberPortEnable"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigFiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperPortName"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperPortEnable"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperLowPower"), ("PERLE-MCR-MGT-MIB", "cm1000LedPWR"), ("PERLE-MCR-MGT-MIB", "cm1000LedLKF"), ("PERLE-MCR-MGT-MIB", "cm1000LedLKC"), ("PERLE-MCR-MGT-MIB", "cm1000mmModelname"), ("PERLE-MCR-MGT-MIB", "cm1000mmModelDesc"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw1FiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw4Loopback1"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw5Loopback2"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1ConnType"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1Speed"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1Duplex"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1LPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2ConnType"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2Speed"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2Duplex"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2LPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigJumboPackets"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiber1PortName"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiber1PortEnable"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiber2PortName"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiber2PortEnable"), ("PERLE-MCR-MGT-MIB", "cm1000mmLedPWR"), ("PERLE-MCR-MGT-MIB", "cm1000mmLedLK1"), ("PERLE-MCR-MGT-MIB", "cm1000mmLedLK2"), ("PERLE-MCR-MGT-MIB", "cm100ModelName"), ("PERLE-MCR-MGT-MIB", "cm100ModelDesc"), ("PERLE-MCR-MGT-MIB", "cm100HwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm100HwJmp6AutoMDI"), ("PERLE-MCR-MGT-MIB", "cm100HwSw1AutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm100HwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm100HwSw3FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100HwSw5Pause"), ("PERLE-MCR-MGT-MIB", "cm100HwSw6Loopback"), ("PERLE-MCR-MGT-MIB", "cm100FiberLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm100FiberConnType"), ("PERLE-MCR-MGT-MIB", "cm100FiberSpeed"), ("PERLE-MCR-MGT-MIB", "cm100FiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100FiberReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm100FiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm100CopperLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm100CopperConnType"), ("PERLE-MCR-MGT-MIB", "cm100CopperAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm100CopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm100CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm100CopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm100CopperPause"), ("PERLE-MCR-MGT-MIB", "cm100CopperLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm100ConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm100ConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm100ConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm100ConfigFiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100ConfigFiberPortName"), ("PERLE-MCR-MGT-MIB", "cm100ConfigFiberPortEnable"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperPortName"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperPortEnable"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperPause"), ("PERLE-MCR-MGT-MIB", "cm100LedPWR"), ("PERLE-MCR-MGT-MIB", "cm100LedLKC"), ("PERLE-MCR-MGT-MIB", "cm100LedLKF"), ("PERLE-MCR-MGT-MIB", "cm100mmModelName"), ("PERLE-MCR-MGT-MIB", "cm100mmModelDesc"), ("PERLE-MCR-MGT-MIB", "cm100mmHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm100mmHwSw1LinkPassthrough"), ("PERLE-MCR-MGT-MIB", "cm100mmHwSw2FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100mmHwSw3Loopback1"), ("PERLE-MCR-MGT-MIB", "cm100mmHwSw4Loopback2"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1ConnType"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1Speed"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2ConnType"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2Speed"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmFiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiber1PortName"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiber1PortEnable"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiber2PortName"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiber2PortEnable"), ("PERLE-MCR-MGT-MIB", "cm100mmLedPWR"), ("PERLE-MCR-MGT-MIB", "cm100mmLedLK1"), ("PERLE-MCR-MGT-MIB", "cm100mmLedLK2"), ("PERLE-MCR-MGT-MIB", "cm1110ModelName"), ("PERLE-MCR-MGT-MIB", "cm1110ModelDesc"), ("PERLE-MCR-MGT-MIB", "cm1110HwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm1110HwJmp6AutoMDIX"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw1TpAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw4TpDuplex"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw5TpSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw6FiberAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw6FiberSfp100Duplex"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw7Loopback"), ("PERLE-MCR-MGT-MIB", "cm1110FiberLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1110FiberConnType"), ("PERLE-MCR-MGT-MIB", "cm1110FiberAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1110FiberSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110FiberDuplex"), ("PERLE-MCR-MGT-MIB", "cm1110FiberPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1110FiberLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1110FiberSfp100FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm1110FiberReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm1110FiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm1110CopperLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1110CopperConnType"), ("PERLE-MCR-MGT-MIB", "cm1110CopperAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1110CopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm1110CopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm1110CopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1110CopperLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1110CopperAutoSpeedDownshift"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigMaxPacketsSize"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPortName"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPortEnable"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberSfp100duplex"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPortName"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPortEnable"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv10HDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv10FDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv100HDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv100FDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv1000FDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoSpeedDownshift"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopper10BaseTDistance"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigUnidirectionalEthernet"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap0"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap1"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap2"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap3"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap4"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap5"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap6"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap7"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopper8021pPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperIpTosPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap0"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap1"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap2"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap3"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap4"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap5"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap6"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap7"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperIngressLimit"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperEgressLimit"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDefaultPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiber8021pPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberIpTosPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap0"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap1"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap2"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap3"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap4"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap5"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap6"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap7"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberIngressLimit"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberEgressLimit"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberDefaultPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberSgmiiInterface"), ("PERLE-MCR-MGT-MIB", "cm1110LedPWR"), ("PERLE-MCR-MGT-MIB", "cm1110LedFDF"), ("PERLE-MCR-MGT-MIB", "cm1110LedLKF")], [("PERLE-MCR-MGT-MIB", "cm1110LedCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110LedFDC"), ("PERLE-MCR-MGT-MIB", "cm1110LedLKC"), ("PERLE-MCR-MGT-MIB", "cm1110PortInDiscards"), ("PERLE-MCR-MGT-MIB", "cm1110PortInFiltered"), ("PERLE-MCR-MGT-MIB", "cm1110PortInGoodOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortHCInGoodOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortInBadOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortInUnicasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortInBroadcasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortInMulticasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortInPauses"), ("PERLE-MCR-MGT-MIB", "cm1110PortInUnderSizes"), ("PERLE-MCR-MGT-MIB", "cm1110PortInFragments"), ("PERLE-MCR-MGT-MIB", "cm1110PortInOversizes"), ("PERLE-MCR-MGT-MIB", "cm1110PortInJabbers"), ("PERLE-MCR-MGT-MIB", "cm1110PortInRxErrs"), ("PERLE-MCR-MGT-MIB", "cm1110PortInFcsErrs"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts64Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts65to127Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts128to255Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts256to511Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts512to1023Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts1024toMaxOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortHCOutOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutFiltered"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutUnicasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutBroadcasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutMulticasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutPauses"), ("PERLE-MCR-MGT-MIB", "cm1110PortDeferreds"), ("PERLE-MCR-MGT-MIB", "cm1110PortCollisions"), ("PERLE-MCR-MGT-MIB", "cm1110PortSingles"), ("PERLE-MCR-MGT-MIB", "cm1110PortMultiples"), ("PERLE-MCR-MGT-MIB", "cm1110PortExcessives"), ("PERLE-MCR-MGT-MIB", "cm1110PortLates"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutFcsErrs"), ("PERLE-MCR-MGT-MIB", "cm1110PortResetCounters"), ("PERLE-MCR-MGT-MIB", "cm1110AvctStart"), ("PERLE-MCR-MGT-MIB", "cm1110AvctStatus"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair1Results"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair1Amplitude"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair1Distance"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair2Results"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair2Amplitude"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair2Distance"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair3Results"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair3Amplitude"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair3Distance"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair4Results"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair4Amplitude"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair4Distance"), ("PERLE-MCR-MGT-MIB", "cm110Modelname"), ("PERLE-MCR-MGT-MIB", "cm110ModelDesc"), ("PERLE-MCR-MGT-MIB", "cm110HwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm110HwJmp6AutoMDIX"), ("PERLE-MCR-MGT-MIB", "cm110HwSw1TpAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm110HwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm110HwSw3FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm110HwSw4TpDuplex"), ("PERLE-MCR-MGT-MIB", "cm110HwSw5TpSpeed"), ("PERLE-MCR-MGT-MIB", "cm110HwSw6FiberDuplex"), ("PERLE-MCR-MGT-MIB", "cm110HwSw7Loopback"), ("PERLE-MCR-MGT-MIB", "cm110FiberLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm110FiberConnType"), ("PERLE-MCR-MGT-MIB", "cm110FiberSpeed"), ("PERLE-MCR-MGT-MIB", "cm110FiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm110FiberReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm110FiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm110CopperLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm110CopperConnType"), ("PERLE-MCR-MGT-MIB", "cm110CopperAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm110CopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm110CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm110CopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm110CopperPause"), ("PERLE-MCR-MGT-MIB", "cm110CopperLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm110ConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm110ConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm110ConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm110ConfigMaxPacketSize"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPortName"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPortEnable"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDuplex"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPortName"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPortEnable"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegAdv10HDX"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegAdv10FDX"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegAdv100HDX"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegAdv100FDX"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPause"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperExtendDistance"), ("PERLE-MCR-MGT-MIB", "cm110ConfigUnidirectionalEthernet"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap0"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap1"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap2"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap3"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap4"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap5"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap6"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap7"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopper8021pPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperIpTosPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap0"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap1"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap2"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap3"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap4"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap5"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap6"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap7"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperIngressLimit"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperEgressLimit"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDefaultPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiber8021pPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberIpTosPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap0"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap1"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap2"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap3"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap4"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap5"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap6"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap7"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberIngressLimit"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberEgressLimit"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDefaultPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "cm110LedPWR"), ("PERLE-MCR-MGT-MIB", "cm110LedFDF"), ("PERLE-MCR-MGT-MIB", "cm110LedLKF"), ("PERLE-MCR-MGT-MIB", "cm110LedCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm110LedFDC"), ("PERLE-MCR-MGT-MIB", "cm110LedLKC"), ("PERLE-MCR-MGT-MIB", "cm110PortRxErrors"), ("PERLE-MCR-MGT-MIB", "cm110PortTxCollisions"), ("PERLE-MCR-MGT-MIB", "cm110PortInFiltered"), ("PERLE-MCR-MGT-MIB", "cm110PortInGoodOctets"), ("PERLE-MCR-MGT-MIB", "cm110PortInBadOctets"), ("PERLE-MCR-MGT-MIB", "cm110PortInUnicasts"), ("PERLE-MCR-MGT-MIB", "cm110PortInBroadcasts"), ("PERLE-MCR-MGT-MIB", "cm110PortInMulticasts"), ("PERLE-MCR-MGT-MIB", "cm110PortInPauses"), ("PERLE-MCR-MGT-MIB", "cm110PortInUnderSizes"), ("PERLE-MCR-MGT-MIB", "cm110PortInFragments"), ("PERLE-MCR-MGT-MIB", "cm110PortInOversizes"), ("PERLE-MCR-MGT-MIB", "cm110PortInJabbers"), ("PERLE-MCR-MGT-MIB", "cm110PortInMACRcvErrs"), ("PERLE-MCR-MGT-MIB", "cm110PortInFcsErrs"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts64Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts65to127Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts128to255Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts256to511Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts512to1023Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts1024toMaxOctets"), ("PERLE-MCR-MGT-MIB", "cm110PortOutOctets"), ("PERLE-MCR-MGT-MIB", "cm110PortOutUnicasts"), ("PERLE-MCR-MGT-MIB", "cm110PortOutBroadcasts"), ("PERLE-MCR-MGT-MIB", "cm110PortOutMulticasts"), ("PERLE-MCR-MGT-MIB", "cm110PortOutPauses"), ("PERLE-MCR-MGT-MIB", "cm110PortExcessives"), ("PERLE-MCR-MGT-MIB", "cm110PortCollisions"), ("PERLE-MCR-MGT-MIB", "cm110PortDeferreds"), ("PERLE-MCR-MGT-MIB", "cm110PortSingles"), ("PERLE-MCR-MGT-MIB", "cm110PortMultiples"), ("PERLE-MCR-MGT-MIB", "cm110PortOutFcsErrs"), ("PERLE-MCR-MGT-MIB", "cm110PortLates"), ("PERLE-MCR-MGT-MIB", "cm110PortResetCounters"), ("PERLE-MCR-MGT-MIB", "cm110VctStart"), ("PERLE-MCR-MGT-MIB", "cm110VctStatus"), ("PERLE-MCR-MGT-MIB", "cm110VctTxPairResults"), ("PERLE-MCR-MGT-MIB", "cm110VctTxPairAmplitude"), ("PERLE-MCR-MGT-MIB", "cm110VctTxPairDistance"), ("PERLE-MCR-MGT-MIB", "cm110VctRxPairResults"), ("PERLE-MCR-MGT-MIB", "cm110VctRxPairAmplitude"), ("PERLE-MCR-MGT-MIB", "cm110VctRxPairDistance"), ("PERLE-MCR-MGT-MIB", "mcrMgtModelName"), ("PERLE-MCR-MGT-MIB", "mcrMgtModelDesc"), ("PERLE-MCR-MGT-MIB", "mcrMgtFailSafeBootLoaderVer"), ("PERLE-MCR-MGT-MIB", "mcrMgtUpTime"), ("PERLE-MCR-MGT-MIB", "mcrMgtConsoleDSR"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigStatus"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigEthSpeedDuplex"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigEthCrossover"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsolePortEnabled"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleSpeed"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleDataBits"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleParity"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleStopBits"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleFlowControl"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleMonitorDSR"), ("PERLE-MCR-MGT-MIB", "mcrMgtLedPWR"), ("PERLE-MCR-MGT-MIB", "mcrMgtLedALM"), ("PERLE-MCR-MGT-MIB", "mcrMgtLedLKC"), ("PERLE-MCR-MGT-MIB", "mcrMgtLedCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm10gModelname"), ("PERLE-MCR-MGT-MIB", "cm10gModelDesc"), ("PERLE-MCR-MGT-MIB", "cm10gHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw1OperationMode"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw4Port1EdcMode"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw5Port2EdcMode"), ("PERLE-MCR-MGT-MIB", "cm10gPort1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm10gPort1ConnType"), ("PERLE-MCR-MGT-MIB", "cm10gPort1AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm10gPort1Speed"), ("PERLE-MCR-MGT-MIB", "cm10gPort1Duplex"), ("PERLE-MCR-MGT-MIB", "cm10gPort1PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gPort1ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm10gPort2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm10gPort2ConnType"), ("PERLE-MCR-MGT-MIB", "cm10gPort2AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm10gPort2Speed"), ("PERLE-MCR-MGT-MIB", "cm10gPort2Duplex"), ("PERLE-MCR-MGT-MIB", "cm10gPort2PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gPort2ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm10gPortLoopBack"), ("PERLE-MCR-MGT-MIB", "cm10gPortTestMode"), ("PERLE-MCR-MGT-MIB", "cm10gConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm10gConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm10gConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm10gConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm10gConfigFiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1Name"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1Enable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1EdcMode"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1FecEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1FecAmplitude"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1FecPhase"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1WavelengthEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1WavelengthValue"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1ChannelEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1ChannelNumber")], [("PERLE-MCR-MGT-MIB", "cm10gConfigPort1TxDitherEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1TxDitherValue"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2Name"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2Enable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2EdcMode"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2FecEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2FecAmplitude"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2FecPhase"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2WavelengthEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2WavelengthValue"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2ChannelEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2ChannelNumber"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2TxDitherEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2TxDitherValue"), ("PERLE-MCR-MGT-MIB", "cm10gLedPWR"), ("PERLE-MCR-MGT-MIB", "cm10gLedLK1"), ("PERLE-MCR-MGT-MIB", "cm10gLedLK2"), ("PERLE-MCR-MGT-MIB", "exCMModelName"), ("PERLE-MCR-MGT-MIB", "exCMModelDesc"), ("PERLE-MCR-MGT-MIB", "exCMHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "exCMHwSw1AutoLocalRemote"), ("PERLE-MCR-MGT-MIB", "exCMHwSw2Rate"), ("PERLE-MCR-MGT-MIB", "exCMHwSw3SymmetricAsymmetric"), ("PERLE-MCR-MGT-MIB", "exCMHwSw4SnrRatio"), ("PERLE-MCR-MGT-MIB", "exCMHwSw5Loopback"), ("PERLE-MCR-MGT-MIB", "exCMHwSw6EthAutoNeg"), ("PERLE-MCR-MGT-MIB", "exCMHwSw7EthSpeed"), ("PERLE-MCR-MGT-MIB", "exCMHwSw8EthDuplex"), ("PERLE-MCR-MGT-MIB", "exCMHwSw9LinkMode"), ("PERLE-MCR-MGT-MIB", "exCMHwSw10InterlinkFaultFeedback"), ("PERLE-MCR-MGT-MIB", "exCMVdslLinkStatus"), ("PERLE-MCR-MGT-MIB", "exCMVdslConnType"), ("PERLE-MCR-MGT-MIB", "exCMVdslLoopBack"), ("PERLE-MCR-MGT-MIB", "exCMVdslRole"), ("PERLE-MCR-MGT-MIB", "exCMVdslProfile"), ("PERLE-MCR-MGT-MIB", "exCMVdslBitswapping"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusAttainableDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusAttainableDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusPrevDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusPrevDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs0"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs0"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs0"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleaveDelayUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleaveDelayDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInpUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInpDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleavingDepthUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleavingDepthDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleavingBlockUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleavingBlockDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualTransmitPowerUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualTransmitPowerDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMaxDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMaxDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMinDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMinDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusTargetSnrUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusTargetSnrDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMaxInterleaveDelayUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMaxInterleaveDelayDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMinInpUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMinInpDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslRemoteLoopback"), ("PERLE-MCR-MGT-MIB", "exCMVdslRemoteReset"), ("PERLE-MCR-MGT-MIB", "exCMEthernetLinkStatus"), ("PERLE-MCR-MGT-MIB", "exCMEthernetConnType"), ("PERLE-MCR-MGT-MIB", "exCMEthernetAutoNegState"), ("PERLE-MCR-MGT-MIB", "exCMEthernetSpeed"), ("PERLE-MCR-MGT-MIB", "exCMEthernetDuplex"), ("PERLE-MCR-MGT-MIB", "exCMEthernetCrossOver"), ("PERLE-MCR-MGT-MIB", "exCMEthernetPauseEnh"), ("PERLE-MCR-MGT-MIB", "exCMEthernetLPRFStatus"), ("PERLE-MCR-MGT-MIB", "exCMEthernetAutoSpeedDownshift"), ("PERLE-MCR-MGT-MIB", "exCMEthernetMDI"), ("PERLE-MCR-MGT-MIB", "exCMVdslFirmwareVersion"), ("PERLE-MCR-MGT-MIB", "exCMVdslFirmwareDate"), ("PERLE-MCR-MGT-MIB", "exCMVdslFirmwareDateString"), ("PERLE-MCR-MGT-MIB", "exCMConfigStatus"), ("PERLE-MCR-MGT-MIB", "exCMConfigModuleName"), ("PERLE-MCR-MGT-MIB", "exCMConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "exCMConfigInterlinkFaultFeedback"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPortName"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPortEnable"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslProfileMode"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslRole"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslRate"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslSymmetry"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslProfile"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslOverrideProfile"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslSignalToNoiseRatioUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMinDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMaxDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMaxInterleaveDelayUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMinInpUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslSignalToNoiseRatioDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMinDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMaxDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMaxInterleaveDelayDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMinInpDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslBitswapping"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslLowBandwidthAlarmUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslLowBandwidthAlarmDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPortName"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPortEnable"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv10HDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv10FDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv100HDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv100FDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv1000FDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetSpeed"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDuplex"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetCrossOver"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPauseEnh"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoSpeedDownshift"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernet10BaseTDistance"), ("PERLE-MCR-MGT-MIB", "exCMConfigUnidirectionalEthernet"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap0"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap1"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap2"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap3"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap4"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap5"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap6"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap7"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernet8021pPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetIpTosPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap0"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap1"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap2"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap3"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap4"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap5"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap6"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap7"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetIngressLimit"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetEgressLimit"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDefaultPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdsl8021pPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslIpTosPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap0"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap1"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap2"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap3"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap4"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap5"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap6"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap7"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslIngressLimit"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslEgressLimit"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslDefaultPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslFastMode"), ("PERLE-MCR-MGT-MIB", "exCMLedILNK"), ("PERLE-MCR-MGT-MIB", "exCMLedLOC"), ("PERLE-MCR-MGT-MIB", "exCMLedPWR"), ("PERLE-MCR-MGT-MIB", "exCMLedETH"), ("PERLE-MCR-MGT-MIB", "exCMLedRMT"), ("PERLE-MCR-MGT-MIB", "exCMPortInDiscards"), ("PERLE-MCR-MGT-MIB", "exCMPortInFiltered"), ("PERLE-MCR-MGT-MIB", "exCMPortInGoodOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortHCInGoodOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortInBadOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortInUnicasts"), ("PERLE-MCR-MGT-MIB", "exCMPortInBroadcasts"), ("PERLE-MCR-MGT-MIB", "exCMPortInMulticasts"), ("PERLE-MCR-MGT-MIB", "exCMPortInPauses"), ("PERLE-MCR-MGT-MIB", "exCMPortInUnderSizes"), ("PERLE-MCR-MGT-MIB", "exCMPortInFragments"), ("PERLE-MCR-MGT-MIB", "exCMPortInOversizes"), ("PERLE-MCR-MGT-MIB", "exCMPortInJabbers"), ("PERLE-MCR-MGT-MIB", "exCMPortInRxErrs"), ("PERLE-MCR-MGT-MIB", "exCMPortInFcsErrs"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts64Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts65to127Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts128to255Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts256to511Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts512to1023Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts1024toMaxOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortOutOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortHCOutOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortOutFiltered"), ("PERLE-MCR-MGT-MIB", "exCMPortOutUnicasts"), ("PERLE-MCR-MGT-MIB", "exCMPortOutBroadcasts"), ("PERLE-MCR-MGT-MIB", "exCMPortOutMulticasts"), ("PERLE-MCR-MGT-MIB", "exCMPortOutPauses"), ("PERLE-MCR-MGT-MIB", "exCMPortDeferreds"), ("PERLE-MCR-MGT-MIB", "exCMPortCollisions"), ("PERLE-MCR-MGT-MIB", "exCMPortSingles"), ("PERLE-MCR-MGT-MIB", "exCMPortMultiples"), ("PERLE-MCR-MGT-MIB", "exCMPortExcessives"), ("PERLE-MCR-MGT-MIB", "exCMPortLates"), ("PERLE-MCR-MGT-MIB", "exCMPortOutFcsErrs"), ("PERLE-MCR-MGT-MIB", "exCMPortResetCounters"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsTimePeriod"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsFullInitLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsCodeViolationLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsCorrectedLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsFecSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsErroredSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsSeverelyErroredSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsLossOfSignalSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsUnavailableSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsTimeElapsedLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsFullInitRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsCodeViolationRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsCorrectedRemote")], [("PERLE-MCR-MGT-MIB", "exCMVdslStatsFecSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsErroredSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsSeverelyErroredSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsLossOfSignalSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsUnavailableSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsTimeElapsedRemote"), ("PERLE-MCR-MGT-MIB", "exCMAvctStart"), ("PERLE-MCR-MGT-MIB", "exCMAvctStatus"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair1Results"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair1Amplitude"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair1Distance"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair2Results"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair2Amplitude"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair2Distance"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair3Results"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair3Amplitude"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair3Distance"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair4Results"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair4Amplitude"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair4Distance"), ("PERLE-MCR-MGT-MIB", "cm10gtModelname"), ("PERLE-MCR-MGT-MIB", "cm10gtModelDesc"), ("PERLE-MCR-MGT-MIB", "cm10gtHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw1OperationMode"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw4EnergyEfficentEthernet"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw5Unused"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1ConnType"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1Speed"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1Duplex"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1LPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2ConnType"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2Speed"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2Duplex"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2LPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPortLoopBack"), ("PERLE-MCR-MGT-MIB", "cm10gtPortTestMode"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigFiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1Name"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1Enable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1FecEnable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1FecAmplitude"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1FecPhase"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1WavelengthEnable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1WavelengthValue"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1ChannelEnable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1ChannelNumber"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1TxDitherEnable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1TxDitherValue"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2Name"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2Enable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2CopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2CopperEnergyEfficientEthernet"), ("PERLE-MCR-MGT-MIB", "cm10gtLedsSlotIndex"), ("PERLE-MCR-MGT-MIB", "cm10gtLedPWR"), ("PERLE-MCR-MGT-MIB", "cm10gtLedLK1"), ("PERLE-MCR-MGT-MIB", "cm10gtLedLK2"), ("PERLE-MCR-MGT-MIB", "cm4gptModelname"), ("PERLE-MCR-MGT-MIB", "cm4gptModelDesc"), ("PERLE-MCR-MGT-MIB", "cm4gptHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm4gptHwSw1LinkMode"), ("PERLE-MCR-MGT-MIB", "cm4gptHwSw2FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm4gptHwSw3RateSelect"), ("PERLE-MCR-MGT-MIB", "cm4gptHwSw4Unused"), ("PERLE-MCR-MGT-MIB", "cm4gptPort1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm4gptPort1ConnType"), ("PERLE-MCR-MGT-MIB", "cm4gptPort2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm4gptPort2ConnType"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigRateSelect"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigPort1Name"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigPort1Enable"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigPort2Name"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigPort2Enable"), ("PERLE-MCR-MGT-MIB", "cm4gptLedPWR"), ("PERLE-MCR-MGT-MIB", "cm4gptLedLK1"), ("PERLE-MCR-MGT-MIB", "cm4gptLedLK2"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsName"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsMacAddress"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsStatus"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsSpeedDuplex"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsBroadcast"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsDebug"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsLoopback"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsPointtoPoint"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsNoTrailers"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRunning"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsNoArp"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsPromiscuous"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxMulticast"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsMasterLoadBalancer"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsSlaveLoadBalancer"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsMulticast"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsSetMedia"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsAutoMedia"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsDynamic"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsLocalAddress"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsSubnetMask"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsBroadcastAddress"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsMtu"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxQLen"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxBytes"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxBytes"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxPackets"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxPackets"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxErrors"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxPktErrors"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxDroppedPkts"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxDroppedPkts"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxOverruns"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxOverruns"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxFrameErrs"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxCarrierErrs"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsCollisions"), ("PERLE-MCR-MGT-MIB", "sfpDmiStatus"), ("PERLE-MCR-MGT-MIB", "sfpDmiConnectorType"), ("PERLE-MCR-MGT-MIB", "sfpDmiNominalBitRate"), ("PERLE-MCR-MGT-MIB", "sfpDmiLinkReach9125"), ("PERLE-MCR-MGT-MIB", "sfpDmiLinkReach50125"), ("PERLE-MCR-MGT-MIB", "sfpDmiLinkReach625125"), ("PERLE-MCR-MGT-MIB", "sfpDmiFiberWaveLength"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentTempState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTempWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTempAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTempWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTempAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentVoltState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighVoltWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighVoltAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowVoltWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowVoltAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentTxBiasState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentTxPowerState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentRxPowerState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiStatus2"), ("PERLE-MCR-MGT-MIB", "sfpDmiVendorSerialNumber"), ("PERLE-MCR-MGT-MIB", "sfpDmiVendorName"), ("PERLE-MCR-MGT-MIB", "sfpDmiVendorPartNumber"), ("PERLE-MCR-MGT-MIB", "xfpDmiAux1Type"), ("PERLE-MCR-MGT-MIB", "xfpDmiAux1State"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux1"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAux1Warn"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAux1Alarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAux1Warn"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAux1Alarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiAux2Type"), ("PERLE-MCR-MGT-MIB", "xfpDmiAux2State"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux2"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAux2Warn"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAux2Alarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAux2Warn"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAux2Alarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiMinBitRate"), ("PERLE-MCR-MGT-MIB", "xfpDmiMaxBitRate"), ("PERLE-MCR-MGT-MIB", "xfpDmiReachEBW50125"), ("PERLE-MCR-MGT-MIB", "sfpDmiReachCopper")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mcrMGTMIBMediaGroup = mcrMGTMIBMediaGroup.setObjects(*_mcrMGTMIBMediaGroup_obj)
    else:
        mcrMGTMIBMediaGroup = mcrMGTMIBMediaGroup.setObjects(*_mcrMGTMIBMediaGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBMediaGroup = mcrMGTMIBMediaGroup.setStatus('current')
mcrMGTMIBMgtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2, 3))
for _mcrMGTMIBMgtGroup_obj in [[("PERLE-MCR-MGT-MIB", "systemStatus"), ("PERLE-MCR-MGT-MIB", "systemName"), ("PERLE-MCR-MGT-MIB", "systemDomainName"), ("PERLE-MCR-MGT-MIB", "systemIpAddress"), ("PERLE-MCR-MGT-MIB", "systemSubnetBits"), ("PERLE-MCR-MGT-MIB", "systemDHCPUpdateDNS"), ("PERLE-MCR-MGT-MIB", "systemAutoObtainDNS"), ("PERLE-MCR-MGT-MIB", "systemAutoObtainGW"), ("PERLE-MCR-MGT-MIB", "systemDomainPrefix"), ("PERLE-MCR-MGT-MIB", "systemTFTPRetry"), ("PERLE-MCR-MGT-MIB", "systemTFTPTimeOut"), ("PERLE-MCR-MGT-MIB", "gatewayStatus"), ("PERLE-MCR-MGT-MIB", "gatewayHost"), ("PERLE-MCR-MGT-MIB", "gatewayType"), ("PERLE-MCR-MGT-MIB", "gatewayIpAddress"), ("PERLE-MCR-MGT-MIB", "gatewaySubnetBits"), ("PERLE-MCR-MGT-MIB", "gatewayInterface"), ("PERLE-MCR-MGT-MIB", "hostStatus"), ("PERLE-MCR-MGT-MIB", "hostName"), ("PERLE-MCR-MGT-MIB", "hostIpAddr"), ("PERLE-MCR-MGT-MIB", "hostFqdn"), ("PERLE-MCR-MGT-MIB", "dnsStatus"), ("PERLE-MCR-MGT-MIB", "dnsIpAddress"), ("PERLE-MCR-MGT-MIB", "dnsActive"), ("PERLE-MCR-MGT-MIB", "dynamicDNSStatus"), ("PERLE-MCR-MGT-MIB", "dynamicDNS"), ("PERLE-MCR-MGT-MIB", "dynamicDNSHostname"), ("PERLE-MCR-MGT-MIB", "dynamicDNSUserName"), ("PERLE-MCR-MGT-MIB", "dynamicDNSPassword"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSystemType"), ("PERLE-MCR-MGT-MIB", "dynamicDNSWildCard"), ("PERLE-MCR-MGT-MIB", "dynamicDNSConnectionMethod"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLVerifyPeerCertificate"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCountry"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLStateProv"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLLocality"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLOrganisation"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLOrganisationUnit"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCommonName"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLEmail"), ("PERLE-MCR-MGT-MIB", "dynamicDNSStatusString"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherStatus"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherEncryption"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherKeySizeMin"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherKeySizeMax"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherKeyExchange"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherHMAC"), ("PERLE-MCR-MGT-MIB", "ipv6serviceStatus"), ("PERLE-MCR-MGT-MIB", "serviceAutoDiscovery"), ("PERLE-MCR-MGT-MIB", "serviceDHCPv6"), ("PERLE-MCR-MGT-MIB", "serviceDHCPv6IPAddresses"), ("PERLE-MCR-MGT-MIB", "serviceDHCPv6NetworkPrefix"), ("PERLE-MCR-MGT-MIB", "serviceDHCPv6AutoObtainDNS"), ("PERLE-MCR-MGT-MIB", "ipv6AddressStatus"), ("PERLE-MCR-MGT-MIB", "ipv6AddressAddr"), ("PERLE-MCR-MGT-MIB", "ipv6AddressPrefixBits"), ("PERLE-MCR-MGT-MIB", "ipv6AddressAuto"), ("PERLE-MCR-MGT-MIB", "ipv6AddressSendAdvertise"), ("PERLE-MCR-MGT-MIB", "interfacev6Name"), ("PERLE-MCR-MGT-MIB", "interfacev6Address"), ("PERLE-MCR-MGT-MIB", "interfacev6PrefixBits"), ("PERLE-MCR-MGT-MIB", "interfacev6Scope"), ("PERLE-MCR-MGT-MIB", "ipv6TunnelStatus"), ("PERLE-MCR-MGT-MIB", "ipv6TunnelName"), ("PERLE-MCR-MGT-MIB", "ipv6TunnelMode"), ("PERLE-MCR-MGT-MIB", "ipv6TunnelRemoteHost"), ("PERLE-MCR-MGT-MIB", "accessServicesStatus"), ("PERLE-MCR-MGT-MIB", "accessServicesSessInactTimeout"), ("PERLE-MCR-MGT-MIB", "accessServiceHTTPD"), ("PERLE-MCR-MGT-MIB", "accessServiceHTTPSD"), ("PERLE-MCR-MGT-MIB", "accessServiceTelnetD"), ("PERLE-MCR-MGT-MIB", "acessServiceSSHD"), ("PERLE-MCR-MGT-MIB", "acessServiceSnmpD"), ("PERLE-MCR-MGT-MIB", "acessServiceSetIP"), ("PERLE-MCR-MGT-MIB", "acessIncomingPings"), ("PERLE-MCR-MGT-MIB", "webManagerStatus"), ("PERLE-MCR-MGT-MIB", "httpsPassphrase"), ("PERLE-MCR-MGT-MIB", "sshServerStatus"), ("PERLE-MCR-MGT-MIB", "sshServerAuthRSA"), ("PERLE-MCR-MGT-MIB", "sshServerAuthDSA"), ("PERLE-MCR-MGT-MIB", "sshServerAuthKeyboard"), ("PERLE-MCR-MGT-MIB", "sshServerAuthPassword"), ("PERLE-MCR-MGT-MIB", "sshServerCipher3Des"), ("PERLE-MCR-MGT-MIB", "sshServerCipherBlowfish"), ("PERLE-MCR-MGT-MIB", "sshServerCipherCipherAES"), ("PERLE-MCR-MGT-MIB", "sshServerCipherCAST"), ("PERLE-MCR-MGT-MIB", "sshServerCipherArcfour"), ("PERLE-MCR-MGT-MIB", "sshServerVerbose"), ("PERLE-MCR-MGT-MIB", "sshServerCompression"), ("PERLE-MCR-MGT-MIB", "sshServerSSH1"), ("PERLE-MCR-MGT-MIB", "snmpAgentStatus"), ("PERLE-MCR-MGT-MIB", "snmpContact"), ("PERLE-MCR-MGT-MIB", "snmpLocation"), ("PERLE-MCR-MGT-MIB", "snmpCommunityStatus"), ("PERLE-MCR-MGT-MIB", "snmpCommunityName"), ("PERLE-MCR-MGT-MIB", "snmpCommunityIpAddress"), ("PERLE-MCR-MGT-MIB", "snmpCommunityPermission"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyStatus"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyUserName"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlySecurityLevel"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyAuthAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyAuthPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyPrivacyAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyPrivacyPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteStatus"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteUserName"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteSecurityLevel"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteAuthAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteAuthPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWritePrivacyAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWritePrivacyPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3LocalEngineID"), ("PERLE-MCR-MGT-MIB", "snmpV3LocalEngineIDTextSuffix"), ("PERLE-MCR-MGT-MIB", "authHostsStatus"), ("PERLE-MCR-MGT-MIB", "authHostOnly"), ("PERLE-MCR-MGT-MIB", "authHostIpStatus"), ("PERLE-MCR-MGT-MIB", "authHostIpAddr"), ("PERLE-MCR-MGT-MIB", "authHostIpDescr"), ("PERLE-MCR-MGT-MIB", "authHostMacStatus"), ("PERLE-MCR-MGT-MIB", "authHostMacAddr"), ("PERLE-MCR-MGT-MIB", "authHostMacDescr"), ("PERLE-MCR-MGT-MIB", "localEventLogStatus"), ("PERLE-MCR-MGT-MIB", "localEventLogEnabled"), ("PERLE-MCR-MGT-MIB", "localEventLogAlertLevel"), ("PERLE-MCR-MGT-MIB", "localEventLogClear"), ("PERLE-MCR-MGT-MIB", "syslogStatus"), ("PERLE-MCR-MGT-MIB", "syslogEnabled"), ("PERLE-MCR-MGT-MIB", "syslogSeverityLevel"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIndex"), ("PERLE-MCR-MGT-MIB", "syslogPrimaryHost"), ("PERLE-MCR-MGT-MIB", "syslogSecondaryHost"), ("PERLE-MCR-MGT-MIB", "snmpTrapStatus"), ("PERLE-MCR-MGT-MIB", "snmpTrapEnabled"), ("PERLE-MCR-MGT-MIB", "snmpTrapAlertLevel"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostStatus"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIpAddress"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostUdpPort"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostVersion"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostType"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostCommunity"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostEnable"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserStatus"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserUserName"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserSecurityLevel"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserAuthAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserAuthPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserPrivacyAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserPrivacyPasswd"), ("PERLE-MCR-MGT-MIB", "snmpTrapGlbHostTimeout"), ("PERLE-MCR-MGT-MIB", "snmpTapGlobHostRetries"), ("PERLE-MCR-MGT-MIB", "mgtAccessMethod"), ("PERLE-MCR-MGT-MIB", "remoteMgtIpAddress"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "networkIpAddress"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortDescr"), ("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrModuleSubTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleSubType"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"), ("PERLE-MCR-MGT-MIB", "emailStatus"), ("PERLE-MCR-MGT-MIB", "emailEnabled"), ("PERLE-MCR-MGT-MIB", "emailAlertLevel"), ("PERLE-MCR-MGT-MIB", "emailTo"), ("PERLE-MCR-MGT-MIB", "emailFrom"), ("PERLE-MCR-MGT-MIB", "emailSMTPHost"), ("PERLE-MCR-MGT-MIB", "emailReply"), ("PERLE-MCR-MGT-MIB", "emailSubject"), ("PERLE-MCR-MGT-MIB", "emailSMTPUsername"), ("PERLE-MCR-MGT-MIB", "emailSMTPPassword"), ("PERLE-MCR-MGT-MIB", "emailSMTPEncryption"), ("PERLE-MCR-MGT-MIB", "emailSMTPValidatePeerCertificate"), ("PERLE-MCR-MGT-MIB", "emailSMTPTcpPort"), ("PERLE-MCR-MGT-MIB", "emailSMTPDomain"), ("PERLE-MCR-MGT-MIB", "mgtUsersStatus"), ("PERLE-MCR-MGT-MIB", "mgtUsersByPassLoginEnabled"), ("PERLE-MCR-MGT-MIB", "mgtUsersPrimaryAuthMethod"), ("PERLE-MCR-MGT-MIB", "mgtUsersSecondaryAuthMethod"), ("PERLE-MCR-MGT-MIB", "mgtUsersAlwaysAttemptSecond"), ("PERLE-MCR-MGT-MIB", "userStatus"), ("PERLE-MCR-MGT-MIB", "userName"), ("PERLE-MCR-MGT-MIB", "userPassword"), ("PERLE-MCR-MGT-MIB", "userLevel"), ("PERLE-MCR-MGT-MIB", "userStatusName"), ("PERLE-MCR-MGT-MIB", "userStatusRemoteIPAddress"), ("PERLE-MCR-MGT-MIB", "userStatusStartTime"), ("PERLE-MCR-MGT-MIB", "userStatusLevel"), ("PERLE-MCR-MGT-MIB", "radiusStatus"), ("PERLE-MCR-MGT-MIB", "radiusPrimaryAuthHost"), ("PERLE-MCR-MGT-MIB", "radiusSecondaryAuthHost"), ("PERLE-MCR-MGT-MIB", "radiusAuthenticationPort"), ("PERLE-MCR-MGT-MIB", "radiusAccounting"), ("PERLE-MCR-MGT-MIB", "radiusPrimaryAcctHost"), ("PERLE-MCR-MGT-MIB", "radiusSecondaryAcctHost"), ("PERLE-MCR-MGT-MIB", "radiusAccountingPort"), ("PERLE-MCR-MGT-MIB", "radiusAcctAuth"), ("PERLE-MCR-MGT-MIB", "radiusRetryLimit"), ("PERLE-MCR-MGT-MIB", "radiusTimeout"), ("PERLE-MCR-MGT-MIB", "radiusNasIdentifier"), ("PERLE-MCR-MGT-MIB", "radiusNasIpAddress"), ("PERLE-MCR-MGT-MIB", "radiusNasSpecifyIpAddress"), ("PERLE-MCR-MGT-MIB", "radiusNasIpv6Address"), ("PERLE-MCR-MGT-MIB", "radiusNasSpecifyIpv6Address"), ("PERLE-MCR-MGT-MIB", "kerberosStatus"), ("PERLE-MCR-MGT-MIB", "kerberosRealm"), ("PERLE-MCR-MGT-MIB", "kerberosDomain"), ("PERLE-MCR-MGT-MIB", "kerberosPort"), ("PERLE-MCR-MGT-MIB", "ldapStatus"), ("PERLE-MCR-MGT-MIB", "ldapHost"), ("PERLE-MCR-MGT-MIB", "ldapPort"), ("PERLE-MCR-MGT-MIB", "ldapBase"), ("PERLE-MCR-MGT-MIB", "ldapEnableTLS"), ("PERLE-MCR-MGT-MIB", "ldapTLSPort"), ("PERLE-MCR-MGT-MIB", "ldapUID"), ("PERLE-MCR-MGT-MIB", "ldapPasswordEncryption"), ("PERLE-MCR-MGT-MIB", "ldapClientAuth"), ("PERLE-MCR-MGT-MIB", "ldapClientName"), ("PERLE-MCR-MGT-MIB", "ldapClientAppendBase"), ("PERLE-MCR-MGT-MIB", "ldapClientPassword"), ("PERLE-MCR-MGT-MIB", "tacacsStatus"), ("PERLE-MCR-MGT-MIB", "tacacsPrimaryHost"), ("PERLE-MCR-MGT-MIB", "tacacsSecondaryHost"), ("PERLE-MCR-MGT-MIB", "tacacsPort"), ("PERLE-MCR-MGT-MIB", "tacacsAccounting"), ("PERLE-MCR-MGT-MIB", "tacacsAccountingPrimaryHost"), ("PERLE-MCR-MGT-MIB", "tacacsAccountingSecondaryHost"), ("PERLE-MCR-MGT-MIB", "tacacsAccountingPort"), ("PERLE-MCR-MGT-MIB", "tacacsAuthorization"), ("PERLE-MCR-MGT-MIB", "tacacsAlternateServiceNames"), ("PERLE-MCR-MGT-MIB", "securidStatus"), ("PERLE-MCR-MGT-MIB", "securidMasterHost"), ("PERLE-MCR-MGT-MIB", "securidSlaveHost"), ("PERLE-MCR-MGT-MIB", "securidPort"), ("PERLE-MCR-MGT-MIB", "securidType"), ("PERLE-MCR-MGT-MIB", "securidLegacy"), ("PERLE-MCR-MGT-MIB", "nisStatus"), ("PERLE-MCR-MGT-MIB", "nisDomain"), ("PERLE-MCR-MGT-MIB", "nisPrimaryHost"), ("PERLE-MCR-MGT-MIB", "nisSecondaryHost"), ("PERLE-MCR-MGT-MIB", "mgtDateTimeStatus"), ("PERLE-MCR-MGT-MIB", "systemDate"), ("PERLE-MCR-MGT-MIB", "systemTime"), ("PERLE-MCR-MGT-MIB", "systemDateTimeAndOffset"), ("PERLE-MCR-MGT-MIB", "timeZoneListEnable"), ("PERLE-MCR-MGT-MIB", "selectionFromTimeZoneList"), ("PERLE-MCR-MGT-MIB", "timeZoneAdjustForDST"), ("PERLE-MCR-MGT-MIB", "customTimeZoneStatus"), ("PERLE-MCR-MGT-MIB", "timeZoneName")], [("PERLE-MCR-MGT-MIB", "timeOffset"), ("PERLE-MCR-MGT-MIB", "timeSummerName"), ("PERLE-MCR-MGT-MIB", "timeSummerOffset"), ("PERLE-MCR-MGT-MIB", "timeSummerMode"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartMonth"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartWeek"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartDay"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartHour"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartMin"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndMonth"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndWeek"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndDay"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndHour"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndMin"), ("PERLE-MCR-MGT-MIB", "timeSummerFixStartMonth"), ("PERLE-MCR-MGT-MIB", "timeSummerFixStartDay"), ("PERLE-MCR-MGT-MIB", "timeSummerFixStartHour"), ("PERLE-MCR-MGT-MIB", "timeSummerFixStartMinute"), ("PERLE-MCR-MGT-MIB", "timeSummerFixEndMonth"), ("PERLE-MCR-MGT-MIB", "timeSummerFixEndDay"), ("PERLE-MCR-MGT-MIB", "timeSummerFixEndHour"), ("PERLE-MCR-MGT-MIB", "timeSummerFixEndMinute"), ("PERLE-MCR-MGT-MIB", "timeStatus"), ("PERLE-MCR-MGT-MIB", "timeSntpMode"), ("PERLE-MCR-MGT-MIB", "timeSntpVersion"), ("PERLE-MCR-MGT-MIB", "timeSntpHost1"), ("PERLE-MCR-MGT-MIB", "timeSntpHost2"), ("PERLE-MCR-MGT-MIB", "timeSntpServerAuthentication"), ("PERLE-MCR-MGT-MIB", "timeSntpKeyID"), ("PERLE-MCR-MGT-MIB", "timeSntpKeyID2"), ("PERLE-MCR-MGT-MIB", "sntpStatAddress"), ("PERLE-MCR-MGT-MIB", "sntpStatLastUpdate"), ("PERLE-MCR-MGT-MIB", "sntpStatLeapIndicator"), ("PERLE-MCR-MGT-MIB", "sntpStatVersion"), ("PERLE-MCR-MGT-MIB", "sntpStatMode"), ("PERLE-MCR-MGT-MIB", "sntpStatStratum"), ("PERLE-MCR-MGT-MIB", "sntpStatRefId"), ("PERLE-MCR-MGT-MIB", "sntpStatOffset"), ("PERLE-MCR-MGT-MIB", "bootFileStatus"), ("PERLE-MCR-MGT-MIB", "fileFirmwareHost"), ("PERLE-MCR-MGT-MIB", "fileFirmwareName"), ("PERLE-MCR-MGT-MIB", "fileConfigurationHost"), ("PERLE-MCR-MGT-MIB", "fileConfigurationName"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateStatus"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateAuto"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm100"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm110"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm1000OrCm1000Sfp"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm1110"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm1110Sfp"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm100mm"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm1000mm"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm10g"), ("PERLE-MCR-MGT-MIB", "nettxfrStatus"), ("PERLE-MCR-MGT-MIB", "nettxfrDirection"), ("PERLE-MCR-MGT-MIB", "nettxfrFileType"), ("PERLE-MCR-MGT-MIB", "nettxfrFileHost"), ("PERLE-MCR-MGT-MIB", "nettxfrFileName"), ("PERLE-MCR-MGT-MIB", "nettxfrMCSlotNumber"), ("PERLE-MCR-MGT-MIB", "nettxfrUserName"), ("PERLE-MCR-MGT-MIB", "nettxfrSSHKeyType"), ("PERLE-MCR-MGT-MIB", "nettxfrSSLType"), ("PERLE-MCR-MGT-MIB", "nettxfrSessionInUse"), ("PERLE-MCR-MGT-MIB", "nettxfrTftpPort"), ("PERLE-MCR-MGT-MIB", "adminFunction"), ("PERLE-MCR-MGT-MIB", "adminLastFunction"), ("PERLE-MCR-MGT-MIB", "adminStatus"), ("PERLE-MCR-MGT-MIB", "adminbootReason"), ("PERLE-MCR-MGT-MIB", "adminDiagFileAvailable"), ("PERLE-MCR-MGT-MIB", "displayFormatStatus"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "cfgTimeFormat"), ("PERLE-MCR-MGT-MIB", "cfgDateFormat"), ("PERLE-MCR-MGT-MIB", "powerSchedConifgStatus"), ("PERLE-MCR-MGT-MIB", "powerSchedOnHour"), ("PERLE-MCR-MGT-MIB", "powerSchedOnMinute"), ("PERLE-MCR-MGT-MIB", "powerSchedOffHour"), ("PERLE-MCR-MGT-MIB", "powerSchedOffMinute")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mcrMGTMIBMgtGroup = mcrMGTMIBMgtGroup.setObjects(*_mcrMGTMIBMgtGroup_obj)
    else:
        mcrMGTMIBMgtGroup = mcrMGTMIBMgtGroup.setObjects(*_mcrMGTMIBMgtGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBMgtGroup = mcrMGTMIBMgtGroup.setStatus('current')
mcrMGTMIBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2, 4)).setObjects(("PERLE-MCR-MGT-MIB", "mcrMgtModuleInserted"), ("PERLE-MCR-MGT-MIB", "mcrMgtSystemBoot"), ("PERLE-MCR-MGT-MIB", "mcrMgtReset"), ("PERLE-MCR-MGT-MIB", "mcrMgtResetFactory"), ("PERLE-MCR-MGT-MIB", "mcrMgtEtheLinkUp"), ("PERLE-MCR-MGT-MIB", "mcrMgtEtheLinkDown"), ("PERLE-MCR-MGT-MIB", "mcrMgtConMonDSRSigChg"), ("PERLE-MCR-MGT-MIB", "mcrMgtAuthFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtAuthSuccess"), ("PERLE-MCR-MGT-MIB", "mcrMgtDateTimeChg"), ("PERLE-MCR-MGT-MIB", "mcrMgtSntpServFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtSntpServRec"), ("PERLE-MCR-MGT-MIB", "mcrMgtSnmpTrapHostFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtSnmpTrapHostRec"), ("PERLE-MCR-MGT-MIB", "mcrMgtEmailServFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtEmailServRec"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfSavedFlash"), ("PERLE-MCR-MGT-MIB", "mcrMgtIpAddrDynChg"), ("PERLE-MCR-MGT-MIB", "mcrMgtTftpUploadFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtTftpUploadSuccess"), ("PERLE-MCR-MGT-MIB", "mcrMgtTftpDownloadFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtTftpDownloadSuccess"), ("PERLE-MCR-MGT-MIB", "mcrMgtChassisMismatch"), ("PERLE-MCR-MGT-MIB", "mcrChassisAdd"), ("PERLE-MCR-MGT-MIB", "mcrChassisRemove"), ("PERLE-MCR-MGT-MIB", "mcrChassisReset"), ("PERLE-MCR-MGT-MIB", "mcrChassisTemperatureAlarm"), ("PERLE-MCR-MGT-MIB", "mcrChassisTemperatureRecover"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotPoweredOn"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotPoweredOff"), ("PERLE-MCR-MGT-MIB", "mcrChassisFail"), ("PERLE-MCR-MGT-MIB", "mcrChassisOk"), ("PERLE-MCR-MGT-MIB", "mcrPsmuInserted"), ("PERLE-MCR-MGT-MIB", "mcrPsmuRemoved"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuFail"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuOk"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuVoltageFail"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuVoltageOk"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFanFail"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFanOk"), ("PERLE-MCR-MGT-MIB", "mcrMediaInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaRemoved"), ("PERLE-MCR-MGT-MIB", "mcrMediaReset"), ("PERLE-MCR-MGT-MIB", "mcrMediaLostCommunication"), ("PERLE-MCR-MGT-MIB", "mcrMediaRecovCommunication"), ("PERLE-MCR-MGT-MIB", "mcrMediaFail"), ("PERLE-MCR-MGT-MIB", "mcrMediaOk"), ("PERLE-MCR-MGT-MIB", "mcrMediaLinkUp"), ("PERLE-MCR-MGT-MIB", "mcrMediaLinkDown"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfUpdateFail"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfUpdateSuccess"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfMismatch"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfMismatchResolv"), ("PERLE-MCR-MGT-MIB", "mcrMediaFirmwareUpdateFail"), ("PERLE-MCR-MGT-MIB", "mcrMediaFirmwareUpdateSuccess"), ("PERLE-MCR-MGT-MIB", "mcrSfpInserted"), ("PERLE-MCR-MGT-MIB", "mcrSfpRemoved"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTempWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTempAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTempWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTempAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighVoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighVoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighVoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighVoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowVoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowVoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowVoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowVoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxBiasWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxBiasAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxBiasWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxBiasAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxPowerWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxPowerAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxPowerWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxPowerAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighRxPowerWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighRxPowerAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowRxPowerWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowRxPowerAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrChassisCommTempSensorFail"), ("PERLE-MCR-MGT-MIB", "mcrChassisCommTempSensorRecov"), ("PERLE-MCR-MGT-MIB", "mcrMediaDetectFail"), ("PERLE-MCR-MGT-MIB", "mcrMediaBadImage"), ("PERLE-MCR-MGT-MIB", "mcrSfpLostComm"), ("PERLE-MCR-MGT-MIB", "mcrSfpRecovComm"), ("PERLE-MCR-MGT-MIB", "mcrModuleNotSupported"), ("PERLE-MCR-MGT-MIB", "mcrModuleFirmwareUpdate"), ("PERLE-MCR-MGT-MIB", "mcrSfpPortShutdown"), ("PERLE-MCR-MGT-MIB", "mcrSfpPortShutdownRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighApdBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighApdBiasWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighApdBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighApdBiasAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowApdBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowApdBiasWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowApdBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowApdBiasAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighTecCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighTecCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighTecCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighTecCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowTecCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowTecCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowTecCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowTecCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserTempWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserTempAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserTempWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserTempAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserWavelengthWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserWavelengthWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserWavelengthAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserWavelengthAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserWavelengthWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserWavelengthWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserWavelengthAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserWavelengthAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC5Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC5WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC5Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC5AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC5Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC5WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC5Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC5AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC3Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC3WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC3Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC3AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC3Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC3WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC3Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC3AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC2Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC2WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC2Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC2AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC2Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC2WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC2Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC2AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVEE5Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVEE5WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVEE5Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVEE5AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVEE5Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVEE5WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVEE5Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVEE5AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpSpeedMismatch"), ("PERLE-MCR-MGT-MIB", "mcrSfpSpeedMismatchRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpPowerExceeded"), ("PERLE-MCR-MGT-MIB", "mcrXfpPowerExceededRecov"), ("PERLE-MCR-MGT-MIB", "mcrLinkTestError"), ("PERLE-MCR-MGT-MIB", "mcrAlarmRelayEngaged"), ("PERLE-MCR-MGT-MIB", "mcrAlarmRelayDisengaged"), ("PERLE-MCR-MGT-MIB", "mcrBandwidthLevelUpstreamLow"), ("PERLE-MCR-MGT-MIB", "mcrBandwidthLevelUpstreamRecov"), ("PERLE-MCR-MGT-MIB", "mcrBandwidthLevelDownstreamLow"), ("PERLE-MCR-MGT-MIB", "mcrBandwidthLevelDownstreamRecov"), ("PERLE-MCR-MGT-MIB", "mcrMediaRemoteReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBNotificationsGroup = mcrMGTMIBNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", exCMVdslLoopBack=exCMVdslLoopBack, cm1110MediaPortIndex=cm1110MediaPortIndex, cm1000HwSw5Pause=cm1000HwSw5Pause, dnsActive=dnsActive, exCMConfigEthernetSpeed=exCMConfigEthernetSpeed, exCMPortPkts512to1023Octets=exCMPortPkts512to1023Octets, sshServerCipherArcfour=sshServerCipherArcfour, mcrXfpLow18VCurrentWarn=mcrXfpLow18VCurrentWarn, exCMConfigEthernet10BaseTDistance=exCMConfigEthernet10BaseTDistance, firmwareUpdateBundleVersionCm100=firmwareUpdateBundleVersionCm100, sntpStatGroup=sntpStatGroup, kerberosStatus=kerberosStatus, systemName=systemName, cm110ConfigCopperPortEnable=cm110ConfigCopperPortEnable, cm10gConfigPort2ChannelEnable=cm10gConfigPort2ChannelEnable, sshServerCompression=sshServerCompression, mcrMediaPortNum=mcrMediaPortNum, cm100mmLedPWR=cm100mmLedPWR, cm110PortLates=cm110PortLates, cm110VctTxPairAmplitude=cm110VctTxPairAmplitude, exCMEthernetMDI=exCMEthernetMDI, cm110VctRxPairResults=cm110VctRxPairResults, sfpDmiLinkReach625125=sfpDmiLinkReach625125, exCMPortInOversizes=exCMPortInOversizes, mcrXfpHigh18VoltWarn=mcrXfpHigh18VoltWarn, exCMVdslRemoteReset=exCMVdslRemoteReset, exCMConfigEthernetPriorityMap2=exCMConfigEthernetPriorityMap2, cm1000mmFixedTable=cm1000mmFixedTable, emailEnabled=emailEnabled, mcrChassisCommTempSensorRecov=mcrChassisCommTempSensorRecov, exCMAvctStart=exCMAvctStart, cm100SlotIndex=cm100SlotIndex, cm100mmFiber2Speed=cm100mmFiber2Speed, cm1000mmConfigStatus=cm1000mmConfigStatus, cm4gptHwSw2FiberFaultAlert=cm4gptHwSw2FiberFaultAlert, cm10gtHwSw4EnergyEfficentEthernet=cm10gtHwSw4EnergyEfficentEthernet, cm100HwJmp5ConfigMode=cm100HwJmp5ConfigMode, nettxfrSSLType=nettxfrSSLType, cm1000mmHwSw2LinkMode=cm1000mmHwSw2LinkMode, exCMPortOutOctets=exCMPortOutOctets, cm4gptPort1LinkStatus=cm4gptPort1LinkStatus, sfpDmiCurrentTxBiasState=sfpDmiCurrentTxBiasState, systemTFTPRetry=systemTFTPRetry, dynamicDNSPassword=dynamicDNSPassword, ldapUID=ldapUID, exCMVdslFirmwareDate=exCMVdslFirmwareDate, cm10gtPort1Speed=cm10gtPort1Speed, mcrSfpHighRxPowerAlarmRecov=mcrSfpHighRxPowerAlarmRecov, exCMLedSlotIndex=exCMLedSlotIndex, exCMConfigEthernetAutoNegAdv10HDX=exCMConfigEthernetAutoNegAdv10HDX, tacacsAccountingSecondaryHost=tacacsAccountingSecondaryHost, ipv6AddressEntry=ipv6AddressEntry, cm1110PortPkts65to127Octets=cm1110PortPkts65to127Octets, dynamicDNSSSLLocality=dynamicDNSSSLLocality, exCMPortInUnicasts=exCMPortInUnicasts, mcrMgtAuthSuccess=mcrMgtAuthSuccess, gatewayIndex=gatewayIndex, mcrXfpHigh5VoltWarn=mcrXfpHigh5VoltWarn, cm100LedTable=cm100LedTable, sshServerCipher3Des=sshServerCipher3Des, cm110ConfigFiberDefaultPriority=cm110ConfigFiberDefaultPriority, cm10gtSlotIndex=cm10gtSlotIndex, cm110HwSw4TpDuplex=cm110HwSw4TpDuplex, exCMConfigVdslPriorityMap3=exCMConfigVdslPriorityMap3, mcrXfpLowApdBiasAlarm=mcrXfpLowApdBiasAlarm, mcrManagementGroup=mcrManagementGroup, sfpDmiConnectorType=sfpDmiConnectorType, firmwareUpdateStatus=firmwareUpdateStatus, mcrXfpLow18VoltWarnRecov=mcrXfpLow18VoltWarnRecov, tacacsPrimaryHost=tacacsPrimaryHost, cm10gConfigPort2Enable=cm10gConfigPort2Enable, mcrPsmuPsuVoltageOk=mcrPsmuPsuVoltageOk, cm1110PortPkts1024toMaxOctets=cm1110PortPkts1024toMaxOctets, mcrMGT=mcrMGT, mediaConverter=mediaConverter, networkTimeGroup=networkTimeGroup, mcrSfpHighVoltWarnRecov=mcrSfpHighVoltWarnRecov, cm110CopperConnType=cm110CopperConnType, cm110ConfigFiberFarEndFault=cm110ConfigFiberFarEndFault, hostStatus=hostStatus, exCMVdslStatusActualInpDown=exCMVdslStatusActualInpDown, mediaPortPortIndex=mediaPortPortIndex, mcrXfpHighApdBiasWarnRecov=mcrXfpHighApdBiasWarnRecov, mcrXfpLowVEE5Warn=mcrXfpLowVEE5Warn, timeStatus=timeStatus, cm10gConfigPort1FecEnable=cm10gConfigPort1FecEnable, exCMVdslStatusPrevDataRateUp=exCMVdslStatusPrevDataRateUp, dynamicDNSSSLCipherEntry=dynamicDNSSSLCipherEntry, ldapTLSPort=ldapTLSPort, emailReply=emailReply, mcrMediaRemoteReset=mcrMediaRemoteReset, exCMConfigVdslMaxInterleaveDelayDown=exCMConfigVdslMaxInterleaveDelayDown, cm10gConfigPort1Enable=cm10gConfigPort1Enable, cm1110RateConvTable=cm1110RateConvTable, mcrAlarmRelayEngaged=mcrAlarmRelayEngaged, sshServerAuthRSA=sshServerAuthRSA, mgtEthStatsLoopback=mgtEthStatsLoopback, cm10gConfigPort1ChannelEnable=cm10gConfigPort1ChannelEnable, mcrSfpLowTxBiasWarnRecov=mcrSfpLowTxBiasWarnRecov, portPhysicalProtocol=portPhysicalProtocol, dynamicDNSSSLVerifyPeerCertificate=dynamicDNSSSLVerifyPeerCertificate, dynamicDNSSSLCipherKeySizeMin=dynamicDNSSSLCipherKeySizeMin, timeSummerFixStartMinute=timeSummerFixStartMinute, timeSummerOffset=timeSummerOffset, exCMPortHCOutOctets=exCMPortHCOutOctets, exCMVdslStatsUnavailableSecsRemote=exCMVdslStatsUnavailableSecsRemote, cm1110CopperSpeed=cm1110CopperSpeed, cm110StatsSlotIndex=cm110StatsSlotIndex, cm100CopperAutoNegState=cm100CopperAutoNegState, cm110ConfigPriorityToEgressQueueMap5=cm110ConfigPriorityToEgressQueueMap5, exCMConfigVdslVlanTaggingAction=exCMConfigVdslVlanTaggingAction, cm100HwSw2LinkMode=cm100HwSw2LinkMode, xfpDmiMaxBitRate=xfpDmiMaxBitRate, powerSchedConifgStatus=powerSchedConifgStatus, cm1000mmConfigSlotIndex=cm1000mmConfigSlotIndex, ipv6serviceStatus=ipv6serviceStatus, cm1110ConfigSlotIndex=cm1110ConfigSlotIndex, cm1110CopperLinkStatus=cm1110CopperLinkStatus, cm110CopperLinkStatus=cm110CopperLinkStatus, cm4gptConfigFiberFaultAlert=cm4gptConfigFiberFaultAlert, exCMConfigPriorityToEgressQueueMap3=exCMConfigPriorityToEgressQueueMap3, mcrPsmuFanFail=mcrPsmuFanFail, cfgTemperatureUnits=cfgTemperatureUnits, cm110CopperPause=cm110CopperPause, cm1000ConfigFiberPortEnable=cm1000ConfigFiberPortEnable, cm1110ConfigCopperPriorityMap1=cm1110ConfigCopperPriorityMap1, mgtDisplayFormatGroup=mgtDisplayFormatGroup, timeZoneListEnable=timeZoneListEnable, mcrMediaBadImage=mcrMediaBadImage, localUsersStatusTable=localUsersStatusTable, cm100mmHwSw3Loopback1=cm100mmHwSw3Loopback1, exCMPortPkts1024toMaxOctets=exCMPortPkts1024toMaxOctets, cm10gtConfigPort1TxDitherValue=cm10gtConfigPort1TxDitherValue, systemAutoObtainDNS=systemAutoObtainDNS, cm10gFixedTable=cm10gFixedTable, mcrXfpLow18VoltWarn=mcrXfpLow18VoltWarn, exCMLedPWR=exCMLedPWR, securidType=securidType, exCMPortResetCounters=exCMPortResetCounters, mcrSfpLowTxBiasAlarmRecov=mcrSfpLowTxBiasAlarmRecov, mcrXfpHighVCC2AlarmRecov=mcrXfpHighVCC2AlarmRecov, radiusTimeout=radiusTimeout, cm1000mmConfigLinkMode=cm1000mmConfigLinkMode, cm4gptHwSw1LinkMode=cm4gptHwSw1LinkMode, cm110HwSw3FarEndFault=cm110HwSw3FarEndFault, cm10gConfigPort2TxDitherValue=cm10gConfigPort2TxDitherValue, mcrXfpHighLaserTempAlarm=mcrXfpHighLaserTempAlarm, mcrXfpHighVEE5AlarmRecov=mcrXfpHighVEE5AlarmRecov, cm1110ConfigFiberVlanTaggingAction=cm1110ConfigFiberVlanTaggingAction, exCMConfigEthernetAutoSpeedDownshift=exCMConfigEthernetAutoSpeedDownshift, exCMPortOutPauses=exCMPortOutPauses, gatewayType=gatewayType, cm110RateConvStatsTable=cm110RateConvStatsTable, hostEntry=hostEntry, localEventLogAlertLevel=localEventLogAlertLevel, timeSummerName=timeSummerName, powerSchedOffMinute=powerSchedOffMinute, nisSecondaryHost=nisSecondaryHost, cm110PortPkts1024toMaxOctets=cm110PortPkts1024toMaxOctets, cm110ConfigCopperDefaultPriority=cm110ConfigCopperDefaultPriority, mcrChassisSlotPoweredOn=mcrChassisSlotPoweredOn, cm10gtConfigPort2CopperEnergyEfficientEthernet=cm10gtConfigPort2CopperEnergyEfficientEthernet, mcrModuleFirmwareVersion=mcrModuleFirmwareVersion, exCMVdslStatusActualSignalAttenuationUp=exCMVdslStatusActualSignalAttenuationUp, sfpDmiVendorName=sfpDmiVendorName, sntpStatLeapIndicator=sntpStatLeapIndicator, exCMPortOutFcsErrs=exCMPortOutFcsErrs, exCMVdslStatsTimePeriod=exCMVdslStatsTimePeriod, cm110VctSlotIndex=cm110VctSlotIndex, mgtEthStatsTxBytes=mgtEthStatsTxBytes, cm100FiberLinkStatus=cm100FiberLinkStatus, exCMConfigEthernetPortEnable=exCMConfigEthernetPortEnable, mcrMGTMIBConformance=mcrMGTMIBConformance, cm1110ConfigMaxPacketsSize=cm1110ConfigMaxPacketsSize, mcrMediaLinkUp=mcrMediaLinkUp, kerberosDomain=kerberosDomain, cm110ConfigPriorityToEgressQueueMap6=cm110ConfigPriorityToEgressQueueMap6, mcrXfpHigh18VCurrentWarnRecov=mcrXfpHigh18VCurrentWarnRecov, mgtEthStatsSetMedia=mgtEthStatsSetMedia, mgtDateTimeGroup=mgtDateTimeGroup, cm100ConfigFiberPortName=cm100ConfigFiberPortName, timeOffset=timeOffset, snmpV3ReadOnlyPrivacyPasswd=snmpV3ReadOnlyPrivacyPasswd, cm4gpt=cm4gpt, sfpDmiFiberWaveLength=sfpDmiFiberWaveLength, exCMSlotIndex=exCMSlotIndex, authHostIpAddr=authHostIpAddr, cm4gptConfigModuleName=cm4gptConfigModuleName, mcrPsmuPsuFail=mcrPsmuPsuFail, timeSummerFixEndMonth=timeSummerFixEndMonth, authIpHostEntry=authIpHostEntry, emailSMTPUsername=emailSMTPUsername, mcrSfpLowTxPowerAlarm=mcrSfpLowTxPowerAlarm, cm1110RateConvAvctEntry=cm1110RateConvAvctEntry, cm100ModelName=cm100ModelName, exCMVdslStatusActualSignalAttenuationDs4=exCMVdslStatusActualSignalAttenuationDs4, cm1110ConfigCopperCongestionPolicy=cm1110ConfigCopperCongestionPolicy, cm10gPort1AutoNegState=cm10gPort1AutoNegState, OnOffValue=OnOffValue, mcrSfpLowRxPowerWarn=mcrSfpLowRxPowerWarn, exCMVdslStatusActualLineAttenuationUs1=exCMVdslStatusActualLineAttenuationUs1, cm1110ConfigCopperDuplex=cm1110ConfigCopperDuplex, cm1110PortInUnderSizes=cm1110PortInUnderSizes, cm10gtConfigPort1Name=cm10gtConfigPort1Name, snmpV3LocalEngineIDTextSuffix=snmpV3LocalEngineIDTextSuffix, exCMVdslStatusActualSnrDown=exCMVdslStatusActualSnrDown, cm1110PortInGoodOctets=cm1110PortInGoodOctets, dynamicDNSSSLCipherTable=dynamicDNSSSLCipherTable, mcrXfpLowLaserWavelengthAlarm=mcrXfpLowLaserWavelengthAlarm, cm100CopperCrossOver=cm100CopperCrossOver, cm10gHwSw3FiberFaultAlert=cm10gHwSw3FiberFaultAlert, cm1110ConfigCopperDiscardUntaggedFrames=cm1110ConfigCopperDiscardUntaggedFrames, cm100mmFiber2FarEndFault=cm100mmFiber2FarEndFault, cm10gConfigTable=cm10gConfigTable, cm10gFixed=cm10gFixed, dnsIndex=dnsIndex, cm1000Modelname=cm1000Modelname, exCMVdslStatusActualSignalAttenuationDown=exCMVdslStatusActualSignalAttenuationDown, cm100mmFiber2ConnType=cm100mmFiber2ConnType, cm10gtModelname=cm10gtModelname, dnsTable=dnsTable, cm110ConfigFiberPriorityPrecedence=cm110ConfigFiberPriorityPrecedence, cm1110PortInMulticasts=cm1110PortInMulticasts, exCMConfigVdsl8021pPriority=exCMConfigVdsl8021pPriority, cm110PortInGoodOctets=cm110PortInGoodOctets, cm110ConfigFiberDiscardUntaggedFrames=cm110ConfigFiberDiscardUntaggedFrames, cm100mmConfigStatus=cm100mmConfigStatus, cm4gptModelname=cm4gptModelname, mcrXfpLowVEE5Alarm=mcrXfpLowVEE5Alarm, cm1110RateConvStatsEntry=cm1110RateConvStatsEntry, cm1110ConfigFiberPriorityMap6=cm1110ConfigFiberPriorityMap6, cm1110ConfigCopperPauseEnh=cm1110ConfigCopperPauseEnh, emailSMTPDomain=emailSMTPDomain, mcrXfpLow33VoltWarnRecov=mcrXfpLow33VoltWarnRecov, sfpDmiHighRxPowerWarn=sfpDmiHighRxPowerWarn, mcrSfpSpeedMismatch=mcrSfpSpeedMismatch, mcrAlarmRelayDisengaged=mcrAlarmRelayDisengaged, cm10gConfigFiberFaultAlert=cm10gConfigFiberFaultAlert, cm110CopperAutoNegState=cm110CopperAutoNegState, ldapPasswordEncryption=ldapPasswordEncryption, exCMLedETH=exCMLedETH, cm110ConfigCopper8021pPriority=cm110ConfigCopper8021pPriority, cm100mmLedLK2=cm100mmLedLK2, mcrPsmuOutStandWarnAlarms=mcrPsmuOutStandWarnAlarms, exCMConfigVdslIpTosPriority=exCMConfigVdslIpTosPriority, mcrXfpLowM52VoltWarnRecov=mcrXfpLowM52VoltWarnRecov, exCMConfigEthernetEgressLimit=exCMConfigEthernetEgressLimit, exCMPortInMulticasts=exCMPortInMulticasts, exCMVdslBitswapping=exCMVdslBitswapping, xfpDmiMinBitRate=xfpDmiMinBitRate, cm1000mmConfigJumboPackets=cm1000mmConfigJumboPackets, mcrXfpHigh18VoltAlarmRecov=mcrXfpHigh18VoltAlarmRecov, securidStatus=securidStatus, mcrXfpHighM52VCurrentAlarmRecov=mcrXfpHighM52VCurrentAlarmRecov)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", exCMVdslStatusActualLineAttenuationUp=exCMVdslStatusActualLineAttenuationUp, cm1000mmConfigModuleName=cm1000mmConfigModuleName, cm100CopperLinkStatus=cm100CopperLinkStatus, sntpStatVersion=sntpStatVersion, mcrXfpHighVCC3Warn=mcrXfpHighVCC3Warn, cm1110ConfigTable=cm1110ConfigTable, cm1110FiberSfp100FarEndFault=cm1110FiberSfp100FarEndFault, cm110ConfigCopperDiscardTaggedFrames=cm110ConfigCopperDiscardTaggedFrames, cm100mmFiberLoopBack=cm100mmFiberLoopBack, snmpV3TrapUserUserName=snmpV3TrapUserUserName, mcrMgtEthStatsTable=mcrMgtEthStatsTable, xfpDmiRealTimeAux1=xfpDmiRealTimeAux1, dynamicDNSSystemType=dynamicDNSSystemType, ipv6TunnelMode=ipv6TunnelMode, cm1000mmConfigFiberAutoNeg=cm1000mmConfigFiberAutoNeg, exCMVdslStatusActualDataRateUp=exCMVdslStatusActualDataRateUp, systemGroup=systemGroup, exCMVdslStatsCorrectedRemote=exCMVdslStatsCorrectedRemote, mcrSfpPortShutdownRecov=mcrSfpPortShutdownRecov, cm1000mmFiber1LinkStatus=cm1000mmFiber1LinkStatus, exCMVdslLinkStatus=exCMVdslLinkStatus, mcrMediaPortDescr=mcrMediaPortDescr, cm4gptConfigRateSelect=cm4gptConfigRateSelect, cm110ConfigCopperPortName=cm110ConfigCopperPortName, cm1110ConfigCopper10BaseTDistance=cm1110ConfigCopper10BaseTDistance, exCMVdslStatusMinInpUp=exCMVdslStatusMinInpUp, exCMPortHCInGoodOctets=exCMPortHCInGoodOctets, systemStatus=systemStatus, nettxfrDirection=nettxfrDirection, cm100ConfigStatus=cm100ConfigStatus, mcrSfpLostComm=mcrSfpLostComm, snmpV3TrapUser=snmpV3TrapUser, cm1000mmSlotIndex=cm1000mmSlotIndex, cm1110PortInFragments=cm1110PortInFragments, mcrMgtEtheLinkDown=mcrMgtEtheLinkDown, fileConfigurationName=fileConfigurationName, cm1000mmHwSw5Loopback2=cm1000mmHwSw5Loopback2, mcrMediaPortTable=mcrMediaPortTable, exCMEthernetConnType=exCMEthernetConnType, dynamicDNSSSLCipherPriority=dynamicDNSSSLCipherPriority, cm10gHwJmp5ConfigMode=cm10gHwJmp5ConfigMode, cm110FiberReceiveStatus=cm110FiberReceiveStatus, cm10gtLedLK2=cm10gtLedLK2, timeSummerRecStartHour=timeSummerRecStartHour, mcrMediaLostCommunication=mcrMediaLostCommunication, accessServiceTelnetD=accessServiceTelnetD, exCMConfigSlotIndex=exCMConfigSlotIndex, mcrMgtLedALM=mcrMgtLedALM, cm110ConfigFiberIpTosPriority=cm110ConfigFiberIpTosPriority, exCMEthernetAutoSpeedDownshift=exCMEthernetAutoSpeedDownshift, cm110PortSingles=cm110PortSingles, tacacsPort=tacacsPort, xfpDmiLowAux2Warn=xfpDmiLowAux2Warn, mcrMgt=mcrMgt, cm1000LedLKF=cm1000LedLKF, cm10gtLedPWR=cm10gtLedPWR, nettxfrEntry=nettxfrEntry, cm1000ConfigStatus=cm1000ConfigStatus, cm110ConfigFiberPriorityMap5=cm110ConfigFiberPriorityMap5, dynamicDNSWildCard=dynamicDNSWildCard, timeSummerRecEndMin=timeSummerRecEndMin, fileConfigurationHost=fileConfigurationHost, exCMEthernetPauseEnh=exCMEthernetPauseEnh, mcrSfpHighVoltWarn=mcrSfpHighVoltWarn, interfacev6Index=interfacev6Index, cm110PortOutBroadcasts=cm110PortOutBroadcasts, exCMConfigVdslPriorityMap4=exCMConfigVdslPriorityMap4, localEventLogClear=localEventLogClear, mcrMgtConfigEntry=mcrMgtConfigEntry, cm10gConfigFiberAutoNeg=cm10gConfigFiberAutoNeg, exCMConfigEthernetAutoNegAdv100HDX=exCMConfigEthernetAutoNegAdv100HDX, cm10gtPort2LinkStatus=cm10gtPort2LinkStatus, mcrMgtConsoleDSR=mcrMgtConsoleDSR, cm110ConfigCopperPriorityMap3=cm110ConfigCopperPriorityMap3, exCMPortInPauses=exCMPortInPauses, cm1000CopperCrossOver=cm1000CopperCrossOver, mgtEthStatsCollisions=mgtEthStatsCollisions, mcrXfpHigh5VCurrentWarnRecov=mcrXfpHigh5VCurrentWarnRecov, mcrXfpLowVCC2WarnRecov=mcrXfpLowVCC2WarnRecov, mcrChassisTemperatureRecover=mcrChassisTemperatureRecover, nettxfrStatus=nettxfrStatus, cm1000FiberLPRFStatus=cm1000FiberLPRFStatus, cm1000mmConfigFiber2PortEnable=cm1000mmConfigFiber2PortEnable, cm100FiberConnType=cm100FiberConnType, mcrXfpLowVCC3AlarmRecov=mcrXfpLowVCC3AlarmRecov, mcrSfpLowTempAlarm=mcrSfpLowTempAlarm, cm100mmConfigLinkMode=cm100mmConfigLinkMode, snmpV3TrapUserPrivacyPasswd=snmpV3TrapUserPrivacyPasswd, cm1000ConfigModuleName=cm1000ConfigModuleName, exCMConfigVdslFastMode=exCMConfigVdslFastMode, exCMConfigVdslSymmetry=exCMConfigVdslSymmetry, cm4gptLedEntry=cm4gptLedEntry, radiusSecondaryAcctHost=radiusSecondaryAcctHost, cm4gptLedTable=cm4gptLedTable, authHostIpDescr=authHostIpDescr, mcrMgtConfigConsoleDataBits=mcrMgtConfigConsoleDataBits, cm1110ConfigCopperPortEnable=cm1110ConfigCopperPortEnable, mcrAlarmsWarningsTable=mcrAlarmsWarningsTable, cm110ConfigCopperDefaultVlanId=cm110ConfigCopperDefaultVlanId, cm100mmLedLK1=cm100mmLedLK1, cm1000mmLedLK2=cm1000mmLedLK2, exCMConfigEthernet8021pPriority=exCMConfigEthernet8021pPriority, cm100ConfigEntry=cm100ConfigEntry, sfpDmiRealTimeVolt=sfpDmiRealTimeVolt, snmpAgentStatus=snmpAgentStatus, cm10gtConfigPort1FecEnable=cm10gtConfigPort1FecEnable, cm110ConfigCopperCongestionPolicy=cm110ConfigCopperCongestionPolicy, authHostMacAddr=authHostMacAddr, cm1000ConfigCopperPauseEnh=cm1000ConfigCopperPauseEnh, timeSummerRecEndDay=timeSummerRecEndDay, timeSummerFixStartHour=timeSummerFixStartHour, mcrXfpHigh33VoltWarn=mcrXfpHigh33VoltWarn, mgtEthStatsDebug=mgtEthStatsDebug, sfpDmiHighVoltWarn=sfpDmiHighVoltWarn, sfpDmiStatus2=sfpDmiStatus2, AlertSeverityLevel=AlertSeverityLevel, authorizedHostGroup=authorizedHostGroup, exCMConfigVdslPriorityPrecedence=exCMConfigVdslPriorityPrecedence, snmpTrapStatus=snmpTrapStatus, mcrXfpHigh5VoltWarnRecov=mcrXfpHigh5VoltWarnRecov, cm1110PortResetCounters=cm1110PortResetCounters, tacacsSecondaryHost=tacacsSecondaryHost, cm10gLedTable=cm10gLedTable, mcrXfpHighM52VoltAlarmRecov=mcrXfpHighM52VoltAlarmRecov, cm110LedCopperSpeed=cm110LedCopperSpeed, cm110PortTxCollisions=cm110PortTxCollisions, cm110ConfigEntry=cm110ConfigEntry, mcrMgtLedCopperSpeed=mcrMgtLedCopperSpeed, httpsPassphrase=httpsPassphrase, cm1110ConfigCopperVlanTaggingAction=cm1110ConfigCopperVlanTaggingAction, syslogPrimaryHost=syslogPrimaryHost, syslogEnabled=syslogEnabled, cm110ConfigPriorityToEgressQueueMap1=cm110ConfigPriorityToEgressQueueMap1, exCMPortDeferreds=exCMPortDeferreds, mcrXfpLowM52VoltWarn=mcrXfpLowM52VoltWarn, radiusPrimaryAuthHost=radiusPrimaryAuthHost, cm110Modelname=cm110Modelname, chassisFirmwareVersion=chassisFirmwareVersion, cm1110AvctTxRxPair1Distance=cm1110AvctTxRxPair1Distance, authHostMacDescr=authHostMacDescr, ipv6TunnelName=ipv6TunnelName, acessServiceSetIP=acessServiceSetIP, exCMConfigEthernetAutoNegAdv100FDX=exCMConfigEthernetAutoNegAdv100FDX, sfpDmiHighTxPowerWarn=sfpDmiHighTxPowerWarn, cm10gHwSw1OperationMode=cm10gHwSw1OperationMode, mcrSfpLowTempAlarmRecov=mcrSfpLowTempAlarmRecov, mcrXfpLowM52VCurrentWarn=mcrXfpLowM52VCurrentWarn, cm110ConfigCopperAutoNegotiation=cm110ConfigCopperAutoNegotiation, snmpV3ReadOnlyAuthAlgorithm=snmpV3ReadOnlyAuthAlgorithm, mcrMgtConfigConsoleSpeed=mcrMgtConfigConsoleSpeed, mcrMediaFirmwareUpdateSuccess=mcrMediaFirmwareUpdateSuccess, cm1000FixedEntry=cm1000FixedEntry, exCMVdslStatusActualSignalAttenuationUs1=exCMVdslStatusActualSignalAttenuationUs1, cm110ConfigFiberDiscardTaggedFrames=cm110ConfigFiberDiscardTaggedFrames, localEventLogStatus=localEventLogStatus, cm110ConfigCopperAutoNegAdv100HDX=cm110ConfigCopperAutoNegAdv100HDX, cm1000mmFiber2Duplex=cm1000mmFiber2Duplex, chassisSerialNumber=chassisSerialNumber, exCMConfigVdslMaxDataRateDown=exCMConfigVdslMaxDataRateDown, remoteTftpHost=remoteTftpHost, timeSntpHost2=timeSntpHost2, cm1000HwJmp5ConfigMode=cm1000HwJmp5ConfigMode, mcrXfpHighTecCurrentAlarmRecov=mcrXfpHighTecCurrentAlarmRecov, cm1000mmConfigFiber1PortEnable=cm1000mmConfigFiber1PortEnable, interfacev6Name=interfacev6Name, snmpTrapHostTable=snmpTrapHostTable, cm1110ConfigFiberDefaultPriority=cm1110ConfigFiberDefaultPriority, sfpDmiCurrentTxPowerState=sfpDmiCurrentTxPowerState, mgtChassisCfgGroup=mgtChassisCfgGroup, mcrXfpLowLaserWavelengthAlarmRecov=mcrXfpLowLaserWavelengthAlarmRecov, mgtEthStatsRxMulticast=mgtEthStatsRxMulticast, exCMVdslStatusActualLineAttenuationDs4=exCMVdslStatusActualLineAttenuationDs4, exCMVdslStatusActualSnrUp=exCMVdslStatusActualSnrUp, cm100mmFiber1FarEndFault=cm100mmFiber1FarEndFault, acessIncomingPings=acessIncomingPings, cm1000FiberAutoNegState=cm1000FiberAutoNegState, mcrXfpLowVCC5WarnRecov=mcrXfpLowVCC5WarnRecov, exCMConfigVdslPriorityMap6=exCMConfigVdslPriorityMap6, cm10gConfigPort1ChannelNumber=cm10gConfigPort1ChannelNumber, cm110ConfigFiberPriorityMap7=cm110ConfigFiberPriorityMap7, exCMVdslStatusActualLineAttenuationDown=exCMVdslStatusActualLineAttenuationDown, localEventLogEnabled=localEventLogEnabled, cm1110ConfigFiberSfp100duplex=cm1110ConfigFiberSfp100duplex, firmwareUpdateBundleVersionCm1110Sfp=firmwareUpdateBundleVersionCm1110Sfp, nettxfrFileHost=nettxfrFileHost, cm110ConfigFiberPortName=cm110ConfigFiberPortName, cm1110FiberDuplex=cm1110FiberDuplex, mcrXfpHighApdBiasAlarm=mcrXfpHighApdBiasAlarm, sfpDmiNominalBitRate=sfpDmiNominalBitRate, mcrXfpLow18VCurrentAlarmRecov=mcrXfpLow18VCurrentAlarmRecov, emailSMTPEncryption=emailSMTPEncryption, mcrXfpHighLaserTempAlarmRecov=mcrXfpHighLaserTempAlarmRecov, adminLastFunction=adminLastFunction, systemSubnetBits=systemSubnetBits, mcrMediaPortEntry=mcrMediaPortEntry, mcrMgtLedTable=mcrMgtLedTable, snmpTrapHostIndex=snmpTrapHostIndex, cm100ConfigCopperPortName=cm100ConfigCopperPortName, cm100mmHwSw1LinkPassthrough=cm100mmHwSw1LinkPassthrough, cm1110ConfigFiberFilterUnknownUnicast=cm1110ConfigFiberFilterUnknownUnicast, cm1110LedLKF=cm1110LedLKF, sfpDmiLowVoltWarn=sfpDmiLowVoltWarn, xfpDmiAux2State=xfpDmiAux2State, mcrXfpLow33VCurrentAlarmRecov=mcrXfpLow33VCurrentAlarmRecov, exCMVdslFirmwareDateString=exCMVdslFirmwareDateString, exCMConfigEthernetDefaultPriority=exCMConfigEthernetDefaultPriority, timeSummerRecEndHour=timeSummerRecEndHour, cm10gPort2AutoNegState=cm10gPort2AutoNegState, cm100FiberFarEndFault=cm100FiberFarEndFault, ipv6TunnelEntry=ipv6TunnelEntry, exCMVdslStatsMediaPortIndex=exCMVdslStatsMediaPortIndex, mgtUsersGroup=mgtUsersGroup, mcrXfpHighM52VoltAlarm=mcrXfpHighM52VoltAlarm, cm1110ConfigCopperAutoNegAdv10HDX=cm1110ConfigCopperAutoNegAdv10HDX, xfpDmiHighAux2Warn=xfpDmiHighAux2Warn, cm110ConfigCopperPriorityMap1=cm110ConfigCopperPriorityMap1, mcrSfpLowVoltWarn=mcrSfpLowVoltWarn, exCMConfigEthernetAutoNegAdv10FDX=exCMConfigEthernetAutoNegAdv10FDX, exCMMediaPortIndex=exCMMediaPortIndex, cm1000HwSw1FiberAutoNeg=cm1000HwSw1FiberAutoNeg, cm110ConfigPriorityToEgressQueueMap7=cm110ConfigPriorityToEgressQueueMap7, dynamicDNSStatus=dynamicDNSStatus, cm1110ConfigCopperFilterUnknownUnicast=cm1110ConfigCopperFilterUnknownUnicast, securidSlaveHost=securidSlaveHost, cm4gptConfigPort1Enable=cm4gptConfigPort1Enable, exCMVdslStatusActualSignalAttenuationUs2=exCMVdslStatusActualSignalAttenuationUs2, mcrXfpPowerExceeded=mcrXfpPowerExceeded, fileFirmwareName=fileFirmwareName, exCMVdslProfile=exCMVdslProfile, sshServerAuthDSA=sshServerAuthDSA, productId=productId, exCMConfigVdslIngressLimit=exCMConfigVdslIngressLimit, cm1110CopperConnType=cm1110CopperConnType, cm110ConfigFiberFilterUnknownMulticast=cm110ConfigFiberFilterUnknownMulticast, exCMVdslStatusActualSnrDs4=exCMVdslStatusActualSnrDs4, exCMPortCollisions=exCMPortCollisions, cm10gtModelDesc=cm10gtModelDesc, cm10gConfigPort1WavelengthValue=cm10gConfigPort1WavelengthValue, exCMVdslStatsFecSecsLocal=exCMVdslStatsFecSecsLocal, sntpStatRefId=sntpStatRefId, mgtChassisSlotPowerScheduleEntry=mgtChassisSlotPowerScheduleEntry, cm10gPort1Duplex=cm10gPort1Duplex, mediaPortSlotIndex=mediaPortSlotIndex, cm1110PortMultiples=cm1110PortMultiples, snmpTrapHostVersion=snmpTrapHostVersion, ipv6TunnelIndex=ipv6TunnelIndex, cm1110ConfigPriorityToEgressQueueMap0=cm1110ConfigPriorityToEgressQueueMap0, mcrXfpHigh33VCurrentAlarmRecov=mcrXfpHigh33VCurrentAlarmRecov, cm1000mmFiber2LPRFStatus=cm1000mmFiber2LPRFStatus, cm4gptConfigTable=cm4gptConfigTable, cm110RateConv=cm110RateConv, cm10gConfigEntry=cm10gConfigEntry, cm10gtHwSw2LinkMode=cm10gtHwSw2LinkMode, cm1110ConfigFiberDiscardUntaggedFrames=cm1110ConfigFiberDiscardUntaggedFrames)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", cm1000mmHwSw1FiberAutoNeg=cm1000mmHwSw1FiberAutoNeg, cm1110ConfigPriorityToEgressQueueMap5=cm1110ConfigPriorityToEgressQueueMap5, cm1000ConfigJumboPackets=cm1000ConfigJumboPackets, mcrMgtLedSlotIndex=mcrMgtLedSlotIndex, exCMPortInFiltered=exCMPortInFiltered, cm1000mmFiber1ConnType=cm1000mmFiber1ConnType, mcrXfpLowVCC5Alarm=mcrXfpLowVCC5Alarm, xfpDmiReachEBW50125=xfpDmiReachEBW50125, mcrXfpLowM52VoltAlarmRecov=mcrXfpLowM52VoltAlarmRecov, exCMPortInRxErrs=exCMPortInRxErrs, cm1110ConfigEntry=cm1110ConfigEntry, cm1000mmModelname=cm1000mmModelname, sfpDmiStatus=sfpDmiStatus, sfpDmiRealTimeRxPower=sfpDmiRealTimeRxPower, mgtEthStatsPromiscuous=mgtEthStatsPromiscuous, cm1110ConfigCopperPriorityMap4=cm1110ConfigCopperPriorityMap4, cm1110ConfigFiberPriorityMap5=cm1110ConfigFiberPriorityMap5, snmpV3ReadWriteAuthPasswd=snmpV3ReadWriteAuthPasswd, cm110ConfigCopperCrossOver=cm110ConfigCopperCrossOver, mcrMediaConfUpdateSuccess=mcrMediaConfUpdateSuccess, cm110HwJmp6AutoMDIX=cm110HwJmp6AutoMDIX, sfpDmiLowTxPowerAlarm=sfpDmiLowTxPowerAlarm, cm1110AvctTxRxPair2Distance=cm1110AvctTxRxPair2Distance, cm100CopperPause=cm100CopperPause, mgtEthStatsBroadcast=mgtEthStatsBroadcast, exCMVdslStatusMaxInterleaveDelayDown=exCMVdslStatusMaxInterleaveDelayDown, cm110ConfigFiberPriorityMap3=cm110ConfigFiberPriorityMap3, interfacev6Address=interfacev6Address, mcrSfpHighTempAlarm=mcrSfpHighTempAlarm, cm110PortInFiltered=cm110PortInFiltered, mcrXfpLowLaserWavelengthWarn=mcrXfpLowLaserWavelengthWarn, cm1110PortPkts256to511Octets=cm1110PortPkts256to511Octets, cm1110PortInPauses=cm1110PortInPauses, exCMConfigEthernetIngressLimit=exCMConfigEthernetIngressLimit, cm100mmFiber1ReceiveStatus=cm100mmFiber1ReceiveStatus, exCMAvctTxRxPair2Results=exCMAvctTxRxPair2Results, exCMConfigLinkMode=exCMConfigLinkMode, mcrXfpHighLaserTempWarnRecov=mcrXfpHighLaserTempWarnRecov, cm1000LedEntry=cm1000LedEntry, mcrMgtEtheLinkUp=mcrMgtEtheLinkUp, snmpV3TrapUserStatus=snmpV3TrapUserStatus, alarmWarnDeviceNum=alarmWarnDeviceNum, cm1000mmFiber1Duplex=cm1000mmFiber1Duplex, cm100ConfigTable=cm100ConfigTable, cm1110ConfigCopperDefaultVlanId=cm1110ConfigCopperDefaultVlanId, exCMConfigVdslPriorityMap5=exCMConfigVdslPriorityMap5, gatewayStatus=gatewayStatus, radiusPrimaryAcctHost=radiusPrimaryAcctHost, bootFileStatus=bootFileStatus, cm1110RateConvEntry=cm1110RateConvEntry, cm110PortPkts64Octets=cm110PortPkts64Octets, exCMVdslRole=exCMVdslRole, networkIpAddress=networkIpAddress, cm110PortOutOctets=cm110PortOutOctets, exCMConfigVdslEgressLimit=exCMConfigVdslEgressLimit, cm110HwJmp5ConfigMode=cm110HwJmp5ConfigMode, mcrSfpHighRxPowerAlarm=mcrSfpHighRxPowerAlarm, cm110LedFDC=cm110LedFDC, ldapClientPassword=ldapClientPassword, exCMVdslStatsSeverelyErroredSecsLocal=exCMVdslStatsSeverelyErroredSecsLocal, exCMHwSw9LinkMode=exCMHwSw9LinkMode, mcrXfpLowVEE5AlarmRecov=mcrXfpLowVEE5AlarmRecov, cm10gConfigModuleName=cm10gConfigModuleName, exCMConfigPriorityToEgressQueueMap4=exCMConfigPriorityToEgressQueueMap4, cm1110ConfigFiberPortName=cm1110ConfigFiberPortName, cm1000ConfigSlotIndex=cm1000ConfigSlotIndex, timeSummerFixEndHour=timeSummerFixEndHour, portRemoteStatus=portRemoteStatus, sfpDmiLowRxPowerWarn=sfpDmiLowRxPowerWarn, timeSummerRecStartDay=timeSummerRecStartDay, cm100HwSw6Loopback=cm100HwSw6Loopback, exCMConfigVdslPortName=exCMConfigVdslPortName, cm10gtPort2PauseEnh=cm10gtPort2PauseEnh, mgtEthStatsTxCarrierErrs=mgtEthStatsTxCarrierErrs, cm10gtPortLoopBack=cm10gtPortLoopBack, snmpV3ReadOnlyAuthPasswd=snmpV3ReadOnlyAuthPasswd, sntpStatLastUpdate=sntpStatLastUpdate, snmpV3ReadOnlyStatus=snmpV3ReadOnlyStatus, interfacev6Scope=interfacev6Scope, cm100ConfigModuleName=cm100ConfigModuleName, portPause=portPause, systemAutoObtainGW=systemAutoObtainGW, nettxfrMCSlotNumber=nettxfrMCSlotNumber, mcrXfpHighLaserTempWarn=mcrXfpHighLaserTempWarn, exCMVdslStatusActualSnrDs3=exCMVdslStatusActualSnrDs3, cm10gConfigPort2FecPhase=cm10gConfigPort2FecPhase, systemTime=systemTime, exCMAvctTxRxPair3Results=exCMAvctTxRxPair3Results, snmpCommunityIndex=snmpCommunityIndex, exCMConfigEthernetPriorityMap7=exCMConfigEthernetPriorityMap7, mcrXfpLow5VoltWarnRecov=mcrXfpLow5VoltWarnRecov, alarmWarnMessage=alarmWarnMessage, mcrMgtConfigConsoleMonitorDSR=mcrMgtConfigConsoleMonitorDSR, cm1110FiberConnType=cm1110FiberConnType, exCMConfigEthernetPriorityMap0=exCMConfigEthernetPriorityMap0, cm1110LedTable=cm1110LedTable, mcrPsmuPsuPowerUsage=mcrPsmuPsuPowerUsage, cm1000mmFiber1Speed=cm1000mmFiber1Speed, cm10gFixedEntry=cm10gFixedEntry, cm10gtPort1ConnType=cm10gtPort1ConnType, cm1110ConfigPriorityToEgressQueueMap6=cm1110ConfigPriorityToEgressQueueMap6, cm4gptConfigPort1Name=cm4gptConfigPort1Name, cm1110PortPkts512to1023Octets=cm1110PortPkts512to1023Octets, mcrCurrentPowerState=mcrCurrentPowerState, cm10gConfigPort2Name=cm10gConfigPort2Name, alertLocalEventGroup=alertLocalEventGroup, kerberosPort=kerberosPort, cfgSfpPowerUnits=cfgSfpPowerUnits, cm1110PortOutMulticasts=cm1110PortOutMulticasts, cm1110ConfigCopperPriorityMap2=cm1110ConfigCopperPriorityMap2, cm1110HwSw1TpAutoNegotiation=cm1110HwSw1TpAutoNegotiation, ipv6AddressPrefixBits=ipv6AddressPrefixBits, cm1000mmFiber2PauseEnh=cm1000mmFiber2PauseEnh, exCMVdslStatusActualDataRateDown=exCMVdslStatusActualDataRateDown, hostTable=hostTable, exCMHwSw5Loopback=exCMHwSw5Loopback, cm1110PortHCOutOctets=cm1110PortHCOutOctets, mcrXfpHighM52VCurrentAlarm=mcrXfpHighM52VCurrentAlarm, serviceDHCPv6=serviceDHCPv6, mcrXfpLowTecCurrentAlarmRecov=mcrXfpLowTecCurrentAlarmRecov, exCMConfigEthernetDiscardTaggedFrames=exCMConfigEthernetDiscardTaggedFrames, mcrMgtLedEntry=mcrMgtLedEntry, mcrXfpLow5VoltAlarmRecov=mcrXfpLow5VoltAlarmRecov, cm1110ConfigUnidirectionalEthernet=cm1110ConfigUnidirectionalEthernet, mcrMediaOk=mcrMediaOk, mcrXfpLow18VoltAlarmRecov=mcrXfpLow18VoltAlarmRecov, mcrXfpHigh33VCurrentWarnRecov=mcrXfpHigh33VCurrentWarnRecov, exCMConfigEthernetAutoNegotiation=exCMConfigEthernetAutoNegotiation, mcrModuleSubTypeInserted=mcrModuleSubTypeInserted, mcrMgtResetFactory=mcrMgtResetFactory, mcrSfpLowTxBiasWarn=mcrSfpLowTxBiasWarn, cm100mmSlotIndex=cm100mmSlotIndex, mgtUsersPrimaryAuthMethod=mgtUsersPrimaryAuthMethod, exCMAvctStatus=exCMAvctStatus, hostIpAddr=hostIpAddr, sfpDmiReachCopper=sfpDmiReachCopper, userStatus=userStatus, mcrMgtTftpDownloadFail=mcrMgtTftpDownloadFail, cm1110ConfigFiberPriorityMap7=cm1110ConfigFiberPriorityMap7, snmpContact=snmpContact, snmpV3ReadWriteUser=snmpV3ReadWriteUser, exCMConfigEthernetIpTosPriority=exCMConfigEthernetIpTosPriority, exCMVdslStatsSlotIndex=exCMVdslStatsSlotIndex, ldapHost=ldapHost, mcrMgtConfigConsoleStopBits=mcrMgtConfigConsoleStopBits, cm1110PortDeferreds=cm1110PortDeferreds, cm10gtPort1Duplex=cm10gtPort1Duplex, exCMConfigModuleName=exCMConfigModuleName, mcrChassisReset=mcrChassisReset, cm110ConfigModuleName=cm110ConfigModuleName, cm10gtHwJmp5ConfigMode=cm10gtHwJmp5ConfigMode, timeSntpKeyID2=timeSntpKeyID2, cm10gtConfigEntry=cm10gtConfigEntry, mcrPsmuPsuVoltage=mcrPsmuPsuVoltage, sfpDmiRealTimeTemp=sfpDmiRealTimeTemp, exCMVdslStatusActualSignalAttenuationUs4=exCMVdslStatusActualSignalAttenuationUs4, cm10gLedsSlotIndex=cm10gLedsSlotIndex, ipv6TunnelTable=ipv6TunnelTable, exCMVdslStatusMaxDataRateUp=exCMVdslStatusMaxDataRateUp, sfpDmiLinkReach50125=sfpDmiLinkReach50125, sfpDmiHighTxBiasAlarm=sfpDmiHighTxBiasAlarm, cm1110ConfigFiberPriorityMap0=cm1110ConfigFiberPriorityMap0, cm10gSlotIndex=cm10gSlotIndex, localUserAccountsTable=localUserAccountsTable, exCMVdslStatsLossOfSignalSecsRemote=exCMVdslStatsLossOfSignalSecsRemote, cm1000LedLKC=cm1000LedLKC, cm1110ConfigPriorityToEgressQueueMap4=cm1110ConfigPriorityToEgressQueueMap4, cm1000ConfigCopperPortEnable=cm1000ConfigCopperPortEnable, cm1000mmHwJmp5ConfigMode=cm1000mmHwJmp5ConfigMode, mcrXfpLow18VCurrentWarnRecov=mcrXfpLow18VCurrentWarnRecov, cm10gPort2Speed=cm10gPort2Speed, cm1000FiberPauseEnh=cm1000FiberPauseEnh, exCMConfigEthernetPriorityMap5=exCMConfigEthernetPriorityMap5, cm1000LedPWR=cm1000LedPWR, cm110ConfigFiberPriorityMap6=cm110ConfigFiberPriorityMap6, cm1110PortOutBroadcasts=cm1110PortOutBroadcasts, mcrMgtSntpServFail=mcrMgtSntpServFail, cm1000FiberReceiveStatus=cm1000FiberReceiveStatus, mcrMgtConfigConsoleFlowControl=mcrMgtConfigConsoleFlowControl, cm1110ConfigPriorityToEgressQueueMap1=cm1110ConfigPriorityToEgressQueueMap1, userIndex=userIndex, mcrMgtIpAddrDynChg=mcrMgtIpAddrDynChg, mgtEthStatsAutoMedia=mgtEthStatsAutoMedia, exCMConfigPriorityToEgressQueueMap2=exCMConfigPriorityToEgressQueueMap2, mcrMgtLedPWR=mcrMgtLedPWR, mcrXfpHigh5VoltAlarmRecov=mcrXfpHigh5VoltAlarmRecov, cm10gtEntry=cm10gtEntry, cm4gptModelDesc=cm4gptModelDesc, radiusNasIpv6Address=radiusNasIpv6Address, cm1110RateConv=cm1110RateConv, dynamicDNS=dynamicDNS, mgtEthStatsRxFrameErrs=mgtEthStatsRxFrameErrs, cm100mmFixed=cm100mmFixed, cm1110AvctTxRxPair2Amplitude=cm1110AvctTxRxPair2Amplitude, cm1110PortCollisions=cm1110PortCollisions, cm110FiberFarEndFault=cm110FiberFarEndFault, mcrXfpHighLaserWavelengthAlarmRecov=mcrXfpHighLaserWavelengthAlarmRecov, cm1110FiberLPRFStatus=cm1110FiberLPRFStatus, mgtUsersStatus=mgtUsersStatus, exCMConfigEntry=exCMConfigEntry, mcrXfpLow33VCurrentWarn=mcrXfpLow33VCurrentWarn, cm1000CopperLPRFStatus=cm1000CopperLPRFStatus, exCMConfigVdslFilterUnknownMulticast=exCMConfigVdslFilterUnknownMulticast, perle=perle, serviceAutoDiscovery=serviceAutoDiscovery, cm10gtTable=cm10gtTable, cm1110AvctTxRxPair3Results=cm1110AvctTxRxPair3Results, cm10gtPort2AutoNegState=cm10gtPort2AutoNegState, timeSummerRecEndWeek=timeSummerRecEndWeek, cm100mmConfigFiber2PortEnable=cm100mmConfigFiber2PortEnable, exCMVdslStatsCodeViolationRemote=exCMVdslStatsCodeViolationRemote, exCMVdslStatusActualSignalAttenuationUs0=exCMVdslStatusActualSignalAttenuationUs0, cm10gModelDesc=cm10gModelDesc, mcrChassisSlotPoweredOff=mcrChassisSlotPoweredOff, mcrPsmuModelDesc=mcrPsmuModelDesc, cm100FiberLoopBack=cm100FiberLoopBack, mcrXfpHighVCC3AlarmRecov=mcrXfpHighVCC3AlarmRecov, mcrPsmuBootloaderVersion=mcrPsmuBootloaderVersion, exCMStatsSlotIndex=exCMStatsSlotIndex, exCMConfigEthernetPriorityMap1=exCMConfigEthernetPriorityMap1, cm1110PortHCInGoodOctets=cm1110PortHCInGoodOctets, cm1110ConfigCopperAutoNegAdv100HDX=cm1110ConfigCopperAutoNegAdv100HDX, exCMVdslStatsCorrectedLocal=exCMVdslStatsCorrectedLocal, cm110PortOutMulticasts=cm110PortOutMulticasts, cm110VctStart=cm110VctStart, exCMConfigEthernetVlanTaggingAction=exCMConfigEthernetVlanTaggingAction, exCMEthernetCrossOver=exCMEthernetCrossOver, exCMAvctTxRxPair2Amplitude=exCMAvctTxRxPair2Amplitude, serviceDHCPv6IPAddresses=serviceDHCPv6IPAddresses, cm1110ConfigCopperDefaultPriority=cm1110ConfigCopperDefaultPriority, userName=userName, cm1110ConfigCopperSpeed=cm1110ConfigCopperSpeed, mcrBandwidthLevelUpstreamRecov=mcrBandwidthLevelUpstreamRecov, cm1000CopperDuplex=cm1000CopperDuplex, mcrXfpLowM52VCurrentAlarm=mcrXfpLowM52VCurrentAlarm, cm10gtConfigPort1FecAmplitude=cm10gtConfigPort1FecAmplitude, exCMConfigVdslMinDataRateUp=exCMConfigVdslMinDataRateUp, mcrMgtTftpUploadSuccess=mcrMgtTftpUploadSuccess, mcrPsmuFanOk=mcrPsmuFanOk, exCMPortPkts65to127Octets=exCMPortPkts65to127Octets, exCMVdslStatsLossOfSignalSecsLocal=exCMVdslStatsLossOfSignalSecsLocal, cm110RateConvTable=cm110RateConvTable, cm110ConfigStatus=cm110ConfigStatus, cm110RateConvEntry=cm110RateConvEntry, cm1000FiberSpeed=cm1000FiberSpeed, cm1110HwSw7Loopback=cm1110HwSw7Loopback, cm1110ConfigFiberDefaultVlanId=cm1110ConfigFiberDefaultVlanId, cm110ConfigFiberDefaultVlanId=cm110ConfigFiberDefaultVlanId, exCMLedLOC=exCMLedLOC, cm1110ConfigCopperFilterUnknownMulticast=cm1110ConfigCopperFilterUnknownMulticast, cm10gtConfigSlotIndex=cm10gtConfigSlotIndex, cm10gPort1Speed=cm10gPort1Speed, cm1110CopperAutoNegState=cm1110CopperAutoNegState, sshServerStatus=sshServerStatus)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", cm10gtLedLK1=cm10gtLedLK1, mcrXfpHighLaserWavelengthWarnRecov=mcrXfpHighLaserWavelengthWarnRecov, mcrXfpLow18VCurrentAlarm=mcrXfpLow18VCurrentAlarm, cm110ConfigCopperIngressLimit=cm110ConfigCopperIngressLimit, sshServerCipherCAST=sshServerCipherCAST, mcrXfpHighTecCurrentWarnRecov=mcrXfpHighTecCurrentWarnRecov, cm10gt=cm10gt, snmpV3ReadOnlyUser=snmpV3ReadOnlyUser, mcrXfpHighVCC5WarnRecov=mcrXfpHighVCC5WarnRecov, cm1000FixedTable=cm1000FixedTable, mcrMediaBackedupModuleType=mcrMediaBackedupModuleType, exCMVdslStatusActualInpUp=exCMVdslStatusActualInpUp, cm110PortInJabbers=cm110PortInJabbers, mcrXfpLowM52VoltAlarm=mcrXfpLowM52VoltAlarm, exCMConfigVdslMinInpUp=exCMConfigVdslMinInpUp, portMediaType=portMediaType, mcrSfpLowVoltAlarm=mcrSfpLowVoltAlarm, cm1000HwSw4Duplex=cm1000HwSw4Duplex, snmpV3TrapUserPrivacyAlgorithm=snmpV3TrapUserPrivacyAlgorithm, cm100mmFiber2ReceiveStatus=cm100mmFiber2ReceiveStatus, cm1110FiberAutoNegState=cm1110FiberAutoNegState, cm110PortInBadOctets=cm110PortInBadOctets, mcrMgtTftpUploadFail=mcrMgtTftpUploadFail, exCMAvctTxRxPair3Distance=exCMAvctTxRxPair3Distance, exCMLedRMT=exCMLedRMT, ipv6AddressAuto=ipv6AddressAuto, nettxfrTable=nettxfrTable, adminDiagFileAvailable=adminDiagFileAvailable, exCMPortInJabbers=exCMPortInJabbers, exCMVdslStatsFecSecsRemote=exCMVdslStatsFecSecsRemote, xfpDmiHighAux1Warn=xfpDmiHighAux1Warn, cm100mmLedTable=cm100mmLedTable, selectionFromTimeZoneList=selectionFromTimeZoneList, snmpCommunityIpAddress=snmpCommunityIpAddress, sntpStatMode=sntpStatMode, cm1000mmConfigFiber1PortName=cm1000mmConfigFiber1PortName, exCMConfigStatus=exCMConfigStatus, timeSntpVersion=timeSntpVersion, exCMVdslStatsErroredSecsRemote=exCMVdslStatsErroredSecsRemote, exCMHwJmp5ConfigMode=exCMHwJmp5ConfigMode, mcrSfpHighTxPowerWarn=mcrSfpHighTxPowerWarn, exCMTable=exCMTable, ipv6TunnelStatus=ipv6TunnelStatus, dynamicDNSSSLCommonName=dynamicDNSSSLCommonName, exCMAvctSlotIndex=exCMAvctSlotIndex, cm1110PortPkts128to255Octets=cm1110PortPkts128to255Octets, cm100FiberReceiveStatus=cm100FiberReceiveStatus, emailSMTPHost=emailSMTPHost, exCMConfigEthernetPriorityMap3=exCMConfigEthernetPriorityMap3, cm10gConfigPort1Name=cm10gConfigPort1Name, exCMConfigVdslPriorityMap0=exCMConfigVdslPriorityMap0, xfpDmiHighAuxWarn=xfpDmiHighAuxWarn, cm1110PortInFiltered=cm1110PortInFiltered, mcrSfpHighTempWarn=mcrSfpHighTempWarn, exCMConfigInterlinkFaultFeedback=exCMConfigInterlinkFaultFeedback, emailFrom=emailFrom, cm1000CopperPauseEnh=cm1000CopperPauseEnh, cm4gptHwSw3RateSelect=cm4gptHwSw3RateSelect, mgtEthStatsRxOverruns=mgtEthStatsRxOverruns, cm110ConfigFiberIngressLimit=cm110ConfigFiberIngressLimit, cm110ConfigCopperDiscardUntaggedFrames=cm110ConfigCopperDiscardUntaggedFrames, cm1110PortOutPauses=cm1110PortOutPauses, snmpTrapHostType=snmpTrapHostType, mcrMGTMIBNotifications=mcrMGTMIBNotifications, cm1110PortExcessives=cm1110PortExcessives, cm4gptConfigLinkMode=cm4gptConfigLinkMode, exCMHwSw1AutoLocalRemote=exCMHwSw1AutoLocalRemote, mcrMgtSntpServRec=mcrMgtSntpServRec, ldapPort=ldapPort, cm10gtConfigPort2CopperDuplex=cm10gtConfigPort2CopperDuplex, alarmWarnChassisNum=alarmWarnChassisNum, hostIndex=hostIndex, timeSummerRecEndMonth=timeSummerRecEndMonth, mcrXfpHigh33VCurrentAlarm=mcrXfpHigh33VCurrentAlarm, exCMVdslStatusActualLineAttenuationUs3=exCMVdslStatusActualLineAttenuationUs3, cm110PortInBroadcasts=cm110PortInBroadcasts, exCMVdslStatusPrevDataRateDown=exCMVdslStatusPrevDataRateDown, mgtAcessServicesGroup=mgtAcessServicesGroup, exCMVdslStatsFullInitLocal=exCMVdslStatsFullInitLocal, radiusStatus=radiusStatus, cm110ConfigTable=cm110ConfigTable, sfpDmiLowVoltAlarm=sfpDmiLowVoltAlarm, mcrXfpLowTecCurrentAlarm=mcrXfpLowTecCurrentAlarm, serviceDHCPv6AutoObtainDNS=serviceDHCPv6AutoObtainDNS, exCMConfigEthernetPriorityMap4=exCMConfigEthernetPriorityMap4, firmwareUpdateAuto=firmwareUpdateAuto, cm100CopperLPRFStatus=cm100CopperLPRFStatus, cm1000Fixed=cm1000Fixed, authHostIpStatus=authHostIpStatus, cm10gConfigPort2WavelengthEnable=cm10gConfigPort2WavelengthEnable, mcrMediaConfUpdateFail=mcrMediaConfUpdateFail, mcrXfpHigh5VCurrentAlarmRecov=mcrXfpHigh5VCurrentAlarmRecov, systemIpAddress=systemIpAddress, interfacev6StatsTable=interfacev6StatsTable, mcrChassisRemove=mcrChassisRemove, mcrMediaFirmwareUpdateFail=mcrMediaFirmwareUpdateFail, sfpDmiRealTimeTxBias=sfpDmiRealTimeTxBias, cm110PortDeferreds=cm110PortDeferreds, mcrMediaRemoved=mcrMediaRemoved, productMIB=productMIB, mgtUsersAlwaysAttemptSecond=mgtUsersAlwaysAttemptSecond, cm110ConfigCopperPriorityMap2=cm110ConfigCopperPriorityMap2, exCMConfigVdslDiscardTaggedFrames=exCMConfigVdslDiscardTaggedFrames, cm110ConfigFiberPriorityMap0=cm110ConfigFiberPriorityMap0, mcrChassisEntry=mcrChassisEntry, cm4gptConfigSlotIndex=cm4gptConfigSlotIndex, cm1000LedTable=cm1000LedTable, mcrMgtModelName=mcrMgtModelName, cm1110HwSw4TpDuplex=cm1110HwSw4TpDuplex, mcrMediaFail=mcrMediaFail, cm110ConfigFiberPortEnable=cm110ConfigFiberPortEnable, exCMVdslStatusActualLineAttenuationDs3=exCMVdslStatusActualLineAttenuationDs3, radiusNasSpecifyIpAddress=radiusNasSpecifyIpAddress, cm1110ConfigFiberPriorityPrecedence=cm1110ConfigFiberPriorityPrecedence, cm100mmConfigEntry=cm100mmConfigEntry, cm100mmFixedTable=cm100mmFixedTable, mcrXfpHighTecCurrentWarn=mcrXfpHighTecCurrentWarn, cm1110HwSw6FiberSfp100Duplex=cm1110HwSw6FiberSfp100Duplex, cm1000HwSw3FiberFaultAlert=cm1000HwSw3FiberFaultAlert, mcrSfpHighTxBiasAlarmRecov=mcrSfpHighTxBiasAlarmRecov, exCMConfigEthernetDefaultVlanId=exCMConfigEthernetDefaultVlanId, cm110PortResetCounters=cm110PortResetCounters, exCMVdslStatusActualInterleavingDepthUp=exCMVdslStatusActualInterleavingDepthUp, mgtEthStatsMtu=mgtEthStatsMtu, mcrMgtConfigConsoleParity=mcrMgtConfigConsoleParity, cm110PortOutUnicasts=cm110PortOutUnicasts, securidLegacy=securidLegacy, portName=portName, cm110HwSw1TpAutoNegotiation=cm110HwSw1TpAutoNegotiation, cm10gtConfigPort2Name=cm10gtConfigPort2Name, exCMHwSw10InterlinkFaultFeedback=exCMHwSw10InterlinkFaultFeedback, powerSchedOnHour=powerSchedOnHour, mcrChassisSlotIndex=mcrChassisSlotIndex, cm1000FiberConnType=cm1000FiberConnType, cm1110PortInOversizes=cm1110PortInOversizes, mcrMGTMIBNotificationsGroup=mcrMGTMIBNotificationsGroup, chassisDiagStatus=chassisDiagStatus, cm1110ConfigCopperAutoNegotiation=cm1110ConfigCopperAutoNegotiation, dynamicDNSSSLCipherKeyExchange=dynamicDNSSSLCipherKeyExchange, cm110LedSlotIndex=cm110LedSlotIndex, exCMVdslStatusActualLineAttenuationDs2=exCMVdslStatusActualLineAttenuationDs2, cm4gptConfigEntry=cm4gptConfigEntry, cm10gtConfigFiberAutoNeg=cm10gtConfigFiberAutoNeg, cm4gptEntry=cm4gptEntry, cm1000CopperConnType=cm1000CopperConnType, cm100mmConfigTable=cm100mmConfigTable, cm1110RateConvStatsTable=cm1110RateConvStatsTable, exCMPortInBadOctets=exCMPortInBadOctets, cm110VctTxPairResults=cm110VctTxPairResults, cm100mmFiber1ConnType=cm100mmFiber1ConnType, cm110RateConvStatsEntry=cm110RateConvStatsEntry, ldapClientName=ldapClientName, mcrMgtTable=mcrMgtTable, cm10gtConfigPort1FecPhase=cm10gtConfigPort1FecPhase, mcrMgtUpTime=mcrMgtUpTime, timeSummerRecStartMin=timeSummerRecStartMin, webManagerGroup=webManagerGroup, snmpV3ReadOnlyPrivacyAlgorithm=snmpV3ReadOnlyPrivacyAlgorithm, mgtUsersSecondaryAuthMethod=mgtUsersSecondaryAuthMethod, cm110ConfigFiberPriorityMap4=cm110ConfigFiberPriorityMap4, nettxfrFileType=nettxfrFileType, cm100mmFixedEntry=cm100mmFixedEntry, cm1110AvctTxRxPair4Distance=cm1110AvctTxRxPair4Distance, systemDateTimeAndOffset=systemDateTimeAndOffset, mcrChassisTable=mcrChassisTable, cm10gtConfigPort1WavelengthValue=cm10gtConfigPort1WavelengthValue, cm1110PortOutFcsErrs=cm1110PortOutFcsErrs, mgtUsersByPassLoginEnabled=mgtUsersByPassLoginEnabled, cm1000mmConfigEntry=cm1000mmConfigEntry, cm110ConfigCopperVlanTaggingAction=cm110ConfigCopperVlanTaggingAction, cm110ConfigCopperAutoNegAdv10FDX=cm110ConfigCopperAutoNegAdv10FDX, cm1110HwJmp5ConfigMode=cm1110HwJmp5ConfigMode, cm4gptHwJmp5ConfigMode=cm4gptHwJmp5ConfigMode, tacacsAccounting=tacacsAccounting, mcrXfpLow33VoltAlarmRecov=mcrXfpLow33VoltAlarmRecov, mcrAlarmsWarningsEntry=mcrAlarmsWarningsEntry, userStatusRemoteIPAddress=userStatusRemoteIPAddress, mcrXfpLow33VCurrentAlarm=mcrXfpLow33VCurrentAlarm, xfpDmiLowAux2Alarm=xfpDmiLowAux2Alarm, cm1000mmLedPWR=cm1000mmLedPWR, mgtDateTimeStatus=mgtDateTimeStatus, exCMAvctTable=exCMAvctTable, accessServiceHTTPD=accessServiceHTTPD, xfpDmiLowAux1Alarm=xfpDmiLowAux1Alarm, mgtEthStatsMacAddress=mgtEthStatsMacAddress, cm1110AvctTxRxPair4Results=cm1110AvctTxRxPair4Results, mcrXfpLowVCC5Warn=mcrXfpLowVCC5Warn, mgtAccessGroup=mgtAccessGroup, mcrXfpHighLaserWavelengthWarn=mcrXfpHighLaserWavelengthWarn, cm110PortPkts256to511Octets=cm110PortPkts256to511Octets, mcrChassisCommTempSensorFail=mcrChassisCommTempSensorFail, cm10gtConfigFiberFaultAlert=cm10gtConfigFiberFaultAlert, cm10gtConfigModuleName=cm10gtConfigModuleName, cm10gtConfigPort2CopperPauseEnh=cm10gtConfigPort2CopperPauseEnh, cm100CopperDuplex=cm100CopperDuplex, cm1110ConfigCopperPriorityMap3=cm1110ConfigCopperPriorityMap3, userLevel=userLevel, ipv6AddressTable=ipv6AddressTable, cm1110HwJmp6AutoMDIX=cm1110HwJmp6AutoMDIX, mgtEthStatsDynamic=mgtEthStatsDynamic, mgtEthStatsNoArp=mgtEthStatsNoArp, exCMVdslFirmwareVersion=exCMVdslFirmwareVersion, moduleModel=moduleModel, cm100mmConfigSlotIndex=cm100mmConfigSlotIndex, cm10gPort1ConnType=cm10gPort1ConnType, cm1110HwSw3FiberFaultAlert=cm1110HwSw3FiberFaultAlert, cm1110ConfigFiberCongestionPolicy=cm1110ConfigFiberCongestionPolicy, cm1000HwSw6Loopback=cm1000HwSw6Loopback, exCMEthernetLinkStatus=exCMEthernetLinkStatus, exCMPortMultiples=exCMPortMultiples, tacacsAccountingPort=tacacsAccountingPort, mcrBandwidthLevelDownstreamRecov=mcrBandwidthLevelDownstreamRecov, exCMHwSw6EthAutoNeg=exCMHwSw6EthAutoNeg, gatewayHost=gatewayHost, mcrModuleReset=mcrModuleReset, mcrChassisSlotEntry=mcrChassisSlotEntry, cm1110HwSw2LinkMode=cm1110HwSw2LinkMode, cm1110ConfigFiberFilterUnknownMulticast=cm1110ConfigFiberFilterUnknownMulticast, mcrBandwidthLevelUpstreamLow=mcrBandwidthLevelUpstreamLow, sshServerAuthPassword=sshServerAuthPassword, cm10gConfigPort1FecAmplitude=cm10gConfigPort1FecAmplitude, cm100ConfigFiberPortEnable=cm100ConfigFiberPortEnable, sfpDmiHighTempAlarm=sfpDmiHighTempAlarm, authHostMacStatus=authHostMacStatus, exCMVdslStatusMaxInterleaveDelayUp=exCMVdslStatusMaxInterleaveDelayUp, cm1110AvctTxRxPair2Results=cm1110AvctTxRxPair2Results, dynamicDNSSSLCipherKeySizeMax=dynamicDNSSSLCipherKeySizeMax, cm100ConfigFiberFarEndFault=cm100ConfigFiberFarEndFault, cm100LedPWR=cm100LedPWR, cm1110PortInBadOctets=cm1110PortInBadOctets, exCMPortLates=exCMPortLates, mgtEthStatsIfIndex=mgtEthStatsIfIndex, gatewayTable=gatewayTable, cm110RateConvVctTable=cm110RateConvVctTable, cm10gtPort1LPRFStatus=cm10gtPort1LPRFStatus, cm10gtConfigPort1TxDitherEnable=cm10gtConfigPort1TxDitherEnable, cm1000mmFiber2LinkStatus=cm1000mmFiber2LinkStatus, cm4gptConfigPort2Enable=cm4gptConfigPort2Enable, mcrPsmuTable=mcrPsmuTable, cm10gtPort1LinkStatus=cm10gtPort1LinkStatus, exCMPortOutFiltered=exCMPortOutFiltered, mcrMgtEmailServFail=mcrMgtEmailServFail, cm1000mmFiber2Speed=cm1000mmFiber2Speed, userStatusStartTime=userStatusStartTime, nettxfrUserName=nettxfrUserName, cm1000ModelDesc=cm1000ModelDesc, cm1110ConfigFiberEgressLimit=cm1110ConfigFiberEgressLimit, mcrXfpHighVCC2Warn=mcrXfpHighVCC2Warn, cm1110ConfigStatus=cm1110ConfigStatus, nettxfrSSHKeyType=nettxfrSSHKeyType, cm110ConfigPriorityToEgressQueueMap2=cm110ConfigPriorityToEgressQueueMap2, mcrSfpHighTxPowerAlarm=mcrSfpHighTxPowerAlarm, dynamicDNSSSLCountry=dynamicDNSSSLCountry, adminFunction=adminFunction)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", cm1110ConfigFiberAutoNegotiation=cm1110ConfigFiberAutoNegotiation, portConnType=portConnType, exCMPortOutMulticasts=exCMPortOutMulticasts, cm1110PortInFcsErrs=cm1110PortInFcsErrs, exCMConfigEthernetDiscardUntaggedFrames=exCMConfigEthernetDiscardUntaggedFrames, dynamicDNSSSLStateProv=dynamicDNSSSLStateProv, powerSchedSlotIndex=powerSchedSlotIndex, exCMVdslStatusActualInterleaveDelayDown=exCMVdslStatusActualInterleaveDelayDown, cm1110ModelDesc=cm1110ModelDesc, exCMAvctEntry=exCMAvctEntry, exCMVdslStatsFullInitRemote=exCMVdslStatsFullInitRemote, cm110SlotIndex=cm110SlotIndex, mcrXfpHighLaserWavelengthAlarm=mcrXfpHighLaserWavelengthAlarm, exCMEthernetDuplex=exCMEthernetDuplex, localUsersStatusEntry=localUsersStatusEntry, xfpDmiHighAux2Alarm=xfpDmiHighAux2Alarm, emailStatus=emailStatus, cm110CopperSpeed=cm110CopperSpeed, mcrXfpLowApdBiasAlarmRecov=mcrXfpLowApdBiasAlarmRecov, exCMVdslStatusAttainableDataRateDown=exCMVdslStatusAttainableDataRateDown, Ipv4v6Address=Ipv4v6Address, cm1000ConfigCopperDuplex=cm1000ConfigCopperDuplex, exCMConfigVdslDefaultVlanId=exCMConfigVdslDefaultVlanId, mcrModuleTypeInserted=mcrModuleTypeInserted, adminbootReason=adminbootReason, cm1110ConfigFiberPriorityMap4=cm1110ConfigFiberPriorityMap4, exCMConfigPriorityToEgressQueueMap1=exCMConfigPriorityToEgressQueueMap1, firmwareUpdateBundleVersionCm100mm=firmwareUpdateBundleVersionCm100mm, kerberosRealm=kerberosRealm, ipv6Group=ipv6Group, exCMHwSw4SnrRatio=exCMHwSw4SnrRatio, cm10gPort1ReceiveStatus=cm10gPort1ReceiveStatus, cm110ModelDesc=cm110ModelDesc, cm1000HwSw2LinkMode=cm1000HwSw2LinkMode, cm4gptTable=cm4gptTable, mcrChassisIndex=mcrChassisIndex, portEnable=portEnable, mcrMgtFailSafeBootLoaderVer=mcrMgtFailSafeBootLoaderVer, sntpStatAddress=sntpStatAddress, exCMVdslStatsTimeElapsedRemote=exCMVdslStatsTimeElapsedRemote, exCM=exCM, timeZoneAdjustForDST=timeZoneAdjustForDST, exCMVdslStatusActualSnrUs1=exCMVdslStatusActualSnrUs1, mgtEthStatsPointtoPoint=mgtEthStatsPointtoPoint, mcrXfpLowM52VCurrentAlarmRecov=mcrXfpLowM52VCurrentAlarmRecov, cm1110ConfigCopperAutoNegAdv10FDX=cm1110ConfigCopperAutoNegAdv10FDX, alertEmailGroup=alertEmailGroup, mcrPsmuPsuVoltageFail=mcrPsmuPsuVoltageFail, ipv6AddressSendAdvertise=ipv6AddressSendAdvertise, exCMVdslStatusActualTransmitPowerDown=exCMVdslStatusActualTransmitPowerDown, cm1110ConfigFiberPriorityMap1=cm1110ConfigFiberPriorityMap1, mcrModuleoOutStandWarnAlarms=mcrModuleoOutStandWarnAlarms, mcrXfpLow5VoltAlarm=mcrXfpLow5VoltAlarm, cm1000FiberLinkStatus=cm1000FiberLinkStatus, timeSummerRecStartWeek=timeSummerRecStartWeek, mcrBandwidthLevelDownstreamLow=mcrBandwidthLevelDownstreamLow, cm110VctTxPairDistance=cm110VctTxPairDistance, exCMConfigVdslPriorityMap2=exCMConfigVdslPriorityMap2, mcrMgtSnmpTrapHostFail=mcrMgtSnmpTrapHostFail, userStatusName=userStatusName, exCMPortPkts128to255Octets=exCMPortPkts128to255Octets, mcrSfpLowVoltAlarmRecov=mcrSfpLowVoltAlarmRecov, exCMPortInFragments=exCMPortInFragments, mgtEthStatsTxPktErrors=mgtEthStatsTxPktErrors, cm10gtPort2LPRFStatus=cm10gtPort2LPRFStatus, exCMConfigVdslRate=exCMConfigVdslRate, cm100LedLKC=cm100LedLKC, sshServerCipherBlowfish=sshServerCipherBlowfish, mcrSfpDmiModuleEntry=mcrSfpDmiModuleEntry, mcrMgtModuleInserted=mcrMgtModuleInserted, chassisReset=chassisReset, cm1110PortPkts64Octets=cm1110PortPkts64Octets, cm110PortInUnderSizes=cm110PortInUnderSizes, mcrXfpLow5VCurrentAlarmRecov=mcrXfpLow5VCurrentAlarmRecov, cm1110ConfigCopperEgressLimit=cm1110ConfigCopperEgressLimit, mcrSfpLowTxPowerWarnRecov=mcrSfpLowTxPowerWarnRecov, exCMConfigVdslLowBandwidthAlarmDown=exCMConfigVdslLowBandwidthAlarmDown, exCMConfigVdslMaxDataRateUp=exCMConfigVdslMaxDataRateUp, mcrPsmuRemoved=mcrPsmuRemoved, cm1110LedFDF=cm1110LedFDF, cm10gConfigPort2TxDitherEnable=cm10gConfigPort2TxDitherEnable, cm1110ConfigFiberSgmiiInterface=cm1110ConfigFiberSgmiiInterface, mcrMgtConMonDSRSigChg=mcrMgtConMonDSRSigChg, mcrChassisGroup=mcrChassisGroup, mediaconverterMIB=mediaconverterMIB, cm1110LedPWR=cm1110LedPWR, mcrMgtConfigEthSpeedDuplex=mcrMgtConfigEthSpeedDuplex, snmpTrapHostEnable=snmpTrapHostEnable, xfpDmiLowAuxWarn=xfpDmiLowAuxWarn, tacacsGroup=tacacsGroup, cm1000mmLedEntry=cm1000mmLedEntry, snmpLocation=snmpLocation, mcrXfpHighM52VCurrentWarn=mcrXfpHighM52VCurrentWarn, userStatusMgtAccessType=userStatusMgtAccessType, exCMVdslStatusActualInterleaveDelayUp=exCMVdslStatusActualInterleaveDelayUp, cm1000ConfigLinkMode=cm1000ConfigLinkMode, cm10gtPort2Duplex=cm10gtPort2Duplex, mgtFilesGroup=mgtFilesGroup, exCMConfigVdslProfileMode=exCMConfigVdslProfileMode, mgtEthStatsSpeedDuplex=mgtEthStatsSpeedDuplex, systemTFTPTimeOut=systemTFTPTimeOut, cm100HwSw1AutoNegotiation=cm100HwSw1AutoNegotiation, mcrSfpHighTxBiasAlarm=mcrSfpHighTxBiasAlarm, cm10gtLedTable=cm10gtLedTable, cm10gLedPWR=cm10gLedPWR, mcrMgtConfigConsolePortEnabled=mcrMgtConfigConsolePortEnabled, cm1110CopperLPRFStatus=cm1110CopperLPRFStatus, mgtAccessMethod=mgtAccessMethod, exCMHwSw3SymmetricAsymmetric=exCMHwSw3SymmetricAsymmetric, cm1110ConfigFiberIngressLimit=cm1110ConfigFiberIngressLimit, exCMVdslStatusActualLineAttenuationUs4=exCMVdslStatusActualLineAttenuationUs4, kerberosGroup=kerberosGroup, cm1110AvctTxRxPair1Amplitude=cm1110AvctTxRxPair1Amplitude, gatewayInterface=gatewayInterface, timeSummerFixStartMonth=timeSummerFixStartMonth, exCMVdslConnType=exCMVdslConnType, mcrMediaReset=mcrMediaReset, cm10gConfigPort2WavelengthValue=cm10gConfigPort2WavelengthValue, snmpV3ReadWritePrivacyAlgorithm=snmpV3ReadWritePrivacyAlgorithm, customTimeZoneStatus=customTimeZoneStatus, cm10gConfigPort1WavelengthEnable=cm10gConfigPort1WavelengthEnable, mcrMgtSystemBoot=mcrMgtSystemBoot, ldapBase=ldapBase, mcrMediaLinkDown=mcrMediaLinkDown, mcrXfpLowVCC3Warn=mcrXfpLowVCC3Warn, exCMVdslStatsTable=exCMVdslStatsTable, emailSMTPTcpPort=emailSMTPTcpPort, cm1000mmLedLK1=cm1000mmLedLK1, cm110ConfigCopperPriorityMap7=cm110ConfigCopperPriorityMap7, cm10gtHwSw3FiberFaultAlert=cm10gtHwSw3FiberFaultAlert, serviceDHCPv6NetworkPrefix=serviceDHCPv6NetworkPrefix, xfpDmiAux2Type=xfpDmiAux2Type, mcrMediaConfMismatch=mcrMediaConfMismatch, cm1110PortOutUnicasts=cm1110PortOutUnicasts, cm10gtHwSw1OperationMode=cm10gtHwSw1OperationMode, cm110HwSw2LinkMode=cm110HwSw2LinkMode, mcrXfpHighTecCurrentAlarm=mcrXfpHighTecCurrentAlarm, timeSummerFixEndDay=timeSummerFixEndDay, cm10gtConfigPort1Enable=cm10gtConfigPort1Enable, cm10gtPortTestMode=cm10gtPortTestMode, chassisBootloaderVersion=chassisBootloaderVersion, exCMHwSw7EthSpeed=exCMHwSw7EthSpeed, authHostsStatus=authHostsStatus, radiusNasIpAddress=radiusNasIpAddress, mcrSfpLowRxPowerAlarmRecov=mcrSfpLowRxPowerAlarmRecov, sshServerGroup=sshServerGroup, mcrXfpLowLaserTempAlarm=mcrXfpLowLaserTempAlarm, cm1000ConfigFiberFaultAlert=cm1000ConfigFiberFaultAlert, cm110PortInMulticasts=cm110PortInMulticasts, cm10gHwSw5Port2EdcMode=cm10gHwSw5Port2EdcMode, nettxfrFileName=nettxfrFileName, cm110PortOutPauses=cm110PortOutPauses, mcrModuleFirmwareUpdate=mcrModuleFirmwareUpdate, snmpV3ReadWritePrivacyPasswd=snmpV3ReadWritePrivacyPasswd, cm110LedPWR=cm110LedPWR, cm100mmModelName=cm100mmModelName, cm1110HwSw5TpSpeed=cm1110HwSw5TpSpeed, firmwareUpdateBundleVersionCm1000mm=firmwareUpdateBundleVersionCm1000mm, exCMAvctTxRxPair4Amplitude=exCMAvctTxRxPair4Amplitude, exCMPortInUnderSizes=exCMPortInUnderSizes, cm10gtPort2ConnType=cm10gtPort2ConnType, xfpDmiRealTimeAux=xfpDmiRealTimeAux, powerSchedDayOfWeek=powerSchedDayOfWeek, PYSNMP_MODULE_ID=mcrMGTMIB, mcrXfpHighVCC2WarnRecov=mcrXfpHighVCC2WarnRecov, mgtEthStatsNoTrailers=mgtEthStatsNoTrailers, chassisCfgHighTempThreshold=chassisCfgHighTempThreshold, mcrSfpHighVoltAlarmRecov=mcrSfpHighVoltAlarmRecov, syslogSeverityLevel=syslogSeverityLevel, snmpTrapEnabled=snmpTrapEnabled, mgtEthStatsRxPackets=mgtEthStatsRxPackets, sfpDmiLowTempAlarm=sfpDmiLowTempAlarm, mcrMgtConfigStatus=mcrMgtConfigStatus, alarmWarnTimeStamp=alarmWarnTimeStamp, xfpDmiHighAuxAlarm=xfpDmiHighAuxAlarm, mcrXfpLow18VoltAlarm=mcrXfpLow18VoltAlarm, cm1110LedFDC=cm1110LedFDC, timeSummerRecStartMonth=timeSummerRecStartMonth, cm1000mmLedsSlotIndex=cm1000mmLedsSlotIndex, cm10gHwSw2LinkMode=cm10gHwSw2LinkMode, cm100ConfigCopperPortEnable=cm100ConfigCopperPortEnable, securidPort=securidPort, exCMVdslStatusActualTransmitPowerUp=exCMVdslStatusActualTransmitPowerUp, webManagerStatus=webManagerStatus, cm110LedLKC=cm110LedLKC, sfpDmiHighTxPowerAlarm=sfpDmiHighTxPowerAlarm, cm1000mmFixedEntry=cm1000mmFixedEntry, ldapClientAuth=ldapClientAuth, cm1110PortInDiscards=cm1110PortInDiscards, cm110ConfigCopperPriorityMap0=cm110ConfigCopperPriorityMap0, acessServiceSnmpD=acessServiceSnmpD, mcrMediaDetectFail=mcrMediaDetectFail, cm1000ConfigCopperLowPower=cm1000ConfigCopperLowPower, mcrXfpHighApdBiasAlarmRecov=mcrXfpHighApdBiasAlarmRecov, mgtEthStatsMulticast=mgtEthStatsMulticast, exCMConfigVdslDiscardUntaggedFrames=exCMConfigVdslDiscardUntaggedFrames, cm1110ConfigCopperCrossOver=cm1110ConfigCopperCrossOver, sfpDmiCurrentTempState=sfpDmiCurrentTempState, cm1110CopperAutoSpeedDownshift=cm1110CopperAutoSpeedDownshift, cm1000mmConfigFiberFaultAlert=cm1000mmConfigFiberFaultAlert, timeSummerFixEndMinute=timeSummerFixEndMinute, emailSMTPValidatePeerCertificate=emailSMTPValidatePeerCertificate, mcrPsmuInserted=mcrPsmuInserted, mcrSfpLowTxBiasAlarm=mcrSfpLowTxBiasAlarm, exCMPortInBroadcasts=exCMPortInBroadcasts, cm10gtLedsSlotIndex=cm10gtLedsSlotIndex, mcrSfpLowTxPowerWarn=mcrSfpLowTxPowerWarn, chassisTemperature=chassisTemperature, mgtEthStatsRunning=mgtEthStatsRunning, cm100mmConfigFiber1PortEnable=cm100mmConfigFiber1PortEnable, mcrModuleSerialNumber=mcrModuleSerialNumber, mcrXfpHigh33VoltWarnRecov=mcrXfpHigh33VoltWarnRecov, mcrMGTMIB=mcrMGTMIB, exCMPortOutBroadcasts=exCMPortOutBroadcasts, cm110FiberLinkStatus=cm110FiberLinkStatus, cm1110AvctStatus=cm1110AvctStatus, cm10gtPort1PauseEnh=cm10gtPort1PauseEnh, cm100LedSlotIndex=cm100LedSlotIndex, cm1000ConfigCopperPortName=cm1000ConfigCopperPortName, cm1110AvctTxRxPair4Amplitude=cm1110AvctTxRxPair4Amplitude, localUserAccountsEntry=localUserAccountsEntry, cm10gConfigLinkMode=cm10gConfigLinkMode, cm10gPort2Duplex=cm10gPort2Duplex, cm110ConfigFiberCongestionPolicy=cm110ConfigFiberCongestionPolicy, mcrSfpLowTempWarn=mcrSfpLowTempWarn, portType=portType, exCMVdslStatusMaxDataRateDown=exCMVdslStatusMaxDataRateDown, nettxfrSessionID=nettxfrSessionID, cm110ConfigPriorityToEgressQueueMap0=cm110ConfigPriorityToEgressQueueMap0, mgtEthStatsTxPackets=mgtEthStatsTxPackets, radiusAuthenticationPort=radiusAuthenticationPort, cm110ConfigFiberDuplex=cm110ConfigFiberDuplex, cm4gptHwSw4Unused=cm4gptHwSw4Unused, mcrMGTMIBGroups=mcrMGTMIBGroups, mcrXfpHighVCC3Alarm=mcrXfpHighVCC3Alarm, mcrSfpLowTempWarnRecov=mcrSfpLowTempWarnRecov, cm10gPortTestMode=cm10gPortTestMode, cm10gtConfigPort1ChannelEnable=cm10gtConfigPort1ChannelEnable, exCMVdslStatusActualSnrUs2=exCMVdslStatusActualSnrUs2, cm110LedTable=cm110LedTable, cm100LedEntry=cm100LedEntry, mcrChassisFail=mcrChassisFail, mcrPsmuEntry=mcrPsmuEntry, cm110VctRxPairDistance=cm110VctRxPairDistance, cm100FixedEntry=cm100FixedEntry, mgtEthStatsSlaveLoadBalancer=mgtEthStatsSlaveLoadBalancer, mcrXfpHighM52VoltWarn=mcrXfpHighM52VoltWarn, cm110ConfigLinkMode=cm110ConfigLinkMode, firmwareUpdateBundleVersionCm1000OrCm1000Sfp=firmwareUpdateBundleVersionCm1000OrCm1000Sfp, exCMAvctTxRxPair1Results=exCMAvctTxRxPair1Results, firmwareUpdateBundleVersionCm1110=firmwareUpdateBundleVersionCm1110, cm110PortRxErrors=cm110PortRxErrors, exCMAvctTxRxPair4Results=exCMAvctTxRxPair4Results, cm100ConfigCopperAutoNegotiation=cm100ConfigCopperAutoNegotiation)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", cm110FiberSpeed=cm110FiberSpeed, cm1000ConfigTable=cm1000ConfigTable, cm10gConfigSlotIndex=cm10gConfigSlotIndex, mcrSfpHighRxPowerWarnRecov=mcrSfpHighRxPowerWarnRecov, exCMPortSingles=exCMPortSingles, mcrMediaPortBandwidth=mcrMediaPortBandwidth, snmpV3ReadOnlyUserName=snmpV3ReadOnlyUserName, mcrSfpHighTempAlarmRecov=mcrSfpHighTempAlarmRecov, mcrXfpHighApdBiasWarn=mcrXfpHighApdBiasWarn, mcrMgtEthStatsEntry=mcrMgtEthStatsEntry, alarmWarnFlags=alarmWarnFlags, hostFqdn=hostFqdn, mgtEthStatsBroadcastAddress=mgtEthStatsBroadcastAddress, cm10gtConfigTable=cm10gtConfigTable, exCMPortPkts256to511Octets=exCMPortPkts256to511Octets, powerSchedOffHour=powerSchedOffHour, mcrXfpLowM52VCurrentWarnRecov=mcrXfpLowM52VCurrentWarnRecov, cm10gLedLK1=cm10gLedLK1, cm1000mmFiber1ReceiveStatus=cm1000mmFiber1ReceiveStatus, cm10gConfigStatus=cm10gConfigStatus, cm10gConfigPort1FecPhase=cm10gConfigPort1FecPhase, cm1000ConfigFiberPortName=cm1000ConfigFiberPortName, snmpV3TrapUserAuthPasswd=snmpV3TrapUserAuthPasswd, mcrXfpHighVCC3WarnRecov=mcrXfpHighVCC3WarnRecov, mcrXfpHighVEE5Alarm=mcrXfpHighVEE5Alarm, mcrMgtDateTimeChg=mcrMgtDateTimeChg, mcrSfpHighVoltAlarm=mcrSfpHighVoltAlarm, mcrMgtSlotIndex=mcrMgtSlotIndex, cm1110AvctSlotIndex=cm1110AvctSlotIndex, dnsIpAddress=dnsIpAddress, mcrXfpHighM52VCurrentWarnRecov=mcrXfpHighM52VCurrentWarnRecov, userPassword=userPassword, mcrXfpHighVCC5Warn=mcrXfpHighVCC5Warn, mcrChassisOk=mcrChassisOk, sfpDmiRealTimeTxPower=sfpDmiRealTimeTxPower, cm1110LedEntry=cm1110LedEntry, mcrMGTMIBCompliances=mcrMGTMIBCompliances, cm1110FiberPauseEnh=cm1110FiberPauseEnh, cm100FiberSpeed=cm100FiberSpeed, exCMPortExcessives=exCMPortExcessives, cm110CopperCrossOver=cm110CopperCrossOver, exCMStatsEntry=exCMStatsEntry, mcrXfpHigh33VoltAlarm=mcrXfpHigh33VoltAlarm, cm100Fixed=cm100Fixed, ContainerStatus=ContainerStatus, mcrPsmuPsuOk=mcrPsmuPsuOk, exCMConfigEthernetPortName=exCMConfigEthernetPortName, cm100mmFiber1Speed=cm100mmFiber1Speed, cm110ConfigFiberPriorityMap1=cm110ConfigFiberPriorityMap1, cm1110PortInBroadcasts=cm1110PortInBroadcasts, cm1000SlotIndex=cm1000SlotIndex, cm1110ConfigCopperPriorityMap7=cm1110ConfigCopperPriorityMap7, mcrSfpInserted=mcrSfpInserted, mcrMgtReset=mcrMgtReset, mcrModuleTypes=mcrModuleTypes, sntpStatOffset=sntpStatOffset, exCMConfigVdslMinDataRateDown=exCMConfigVdslMinDataRateDown, cm100mmConfigFiber1PortName=cm100mmConfigFiber1PortName, cm4gptSlotIndex=cm4gptSlotIndex, cm110PortInOversizes=cm110PortInOversizes, mgtEthStatsTxQLen=mgtEthStatsTxQLen, mcrMediaConfigBackupRestore=mcrMediaConfigBackupRestore, exCMVdslStatsCodeViolationLocal=exCMVdslStatsCodeViolationLocal, mcrSfpLowTxPowerAlarmRecov=mcrSfpLowTxPowerAlarmRecov, exCMConfigVdslPortEnable=exCMConfigVdslPortEnable, mcrPsmuFanSpeed=mcrPsmuFanSpeed, cm1110ConfigModuleName=cm1110ConfigModuleName, cm110HwSw6FiberDuplex=cm110HwSw6FiberDuplex, exCMConfigEthernetCongestionPolicy=exCMConfigEthernetCongestionPolicy, cm110FiberLoopBack=cm110FiberLoopBack, cm10gtHwSw5Unused=cm10gtHwSw5Unused, cm4gptLedLK1=cm4gptLedLK1, displayFormatStatus=displayFormatStatus, cm1110PortInJabbers=cm1110PortInJabbers, fileFirmwareHost=fileFirmwareHost, mcrPsmuPsuStatus=mcrPsmuPsuStatus, cm110LedLKF=cm110LedLKF, authMacHostEntry=authMacHostEntry, exCMVdslStatusActualSignalAttenuationDs2=exCMVdslStatusActualSignalAttenuationDs2, cm1110ConfigFiberIpTosPriority=cm1110ConfigFiberIpTosPriority, SlotNumber=SlotNumber, cm100ConfigCopperCrossOver=cm100ConfigCopperCrossOver, mcrMgtEmailServRec=mcrMgtEmailServRec, mcrSfpLowRxPowerAlarm=mcrSfpLowRxPowerAlarm, mcrMGTMIBChassisGroup=mcrMGTMIBChassisGroup, alarmWarnSeverity=alarmWarnSeverity, cm10gHwSw4Port1EdcMode=cm10gHwSw4Port1EdcMode, snmpV3ReadWriteAuthAlgorithm=snmpV3ReadWriteAuthAlgorithm, mcrMgtAuthFail=mcrMgtAuthFail, cm1110ConfigLinkMode=cm1110ConfigLinkMode, cm1110LedSlotIndex=cm1110LedSlotIndex, mcrXfpHighVCC2Alarm=mcrXfpHighVCC2Alarm, cm110ConfigCopperIpTosPriority=cm110ConfigCopperIpTosPriority, cm100mmModelDesc=cm100mmModelDesc, sfpDmiVendorSerialNumber=sfpDmiVendorSerialNumber, cm100CopperSpeed=cm100CopperSpeed, cm10gtConfigPort1WavelengthEnable=cm10gtConfigPort1WavelengthEnable, mgtEthStatsMasterLoadBalancer=mgtEthStatsMasterLoadBalancer, ipv6TunnelRemoteHost=ipv6TunnelRemoteHost, mcrXfpLowTecCurrentWarn=mcrXfpLowTecCurrentWarn, cm110ConfigCopperFilterUnknownUnicast=cm110ConfigCopperFilterUnknownUnicast, exCMConfigEthernetPauseEnh=exCMConfigEthernetPauseEnh, mcrMgtConfigTable=mcrMgtConfigTable, mcrXfpHigh18VCurrentAlarm=mcrXfpHigh18VCurrentAlarm, snmpTrapGlbHostTimeout=snmpTrapGlbHostTimeout, mcrXfpLowApdBiasWarn=mcrXfpLowApdBiasWarn, exCMVdslStatusMinDataRateUp=exCMVdslStatusMinDataRateUp, mgtEthStatsSubnetMask=mgtEthStatsSubnetMask, mcrMgtLedLKC=mcrMgtLedLKC, sfpDmiLowTxPowerWarn=sfpDmiLowTxPowerWarn, cm1000FiberLoopBack=cm1000FiberLoopBack, acessServiceSSHD=acessServiceSSHD, exCMConfigPriorityToEgressQueueMap0=exCMConfigPriorityToEgressQueueMap0, mcrMgtSnmpTrapHostRec=mcrMgtSnmpTrapHostRec, dynamicDNSSSLEmail=dynamicDNSSSLEmail, dnsEntry=dnsEntry, cm1110HwSw6FiberAutoNegotiation=cm1110HwSw6FiberAutoNegotiation, cm110PortInMACRcvErrs=cm110PortInMACRcvErrs, cm1110LedLKC=cm1110LedLKC, cm1110ConfigFiberPriorityMap2=cm1110ConfigFiberPriorityMap2, exCMAvctTxRxPair1Distance=exCMAvctTxRxPair1Distance, cm1000FiberDuplex=cm1000FiberDuplex, ipv6AddressAddr=ipv6AddressAddr, exCMConfigEthernetDuplex=exCMConfigEthernetDuplex, mcrXfpLowApdBiasWarnRecov=mcrXfpLowApdBiasWarnRecov, exCMLedILNK=exCMLedILNK, firmwareUpdateBundleVersionCm10g=firmwareUpdateBundleVersionCm10g, mcrXfpLow33VoltWarn=mcrXfpLow33VoltWarn, emailSMTPPassword=emailSMTPPassword, mcrXfpHighVCC5AlarmRecov=mcrXfpHighVCC5AlarmRecov, interfacev6PrefixBits=interfacev6PrefixBits, mcrModuleDiagStatus=mcrModuleDiagStatus, ldapStatus=ldapStatus, dynamicDNSStatusString=dynamicDNSStatusString, sfpDmiHighTxBiasWarn=sfpDmiHighTxBiasWarn, exCMPortPkts64Octets=exCMPortPkts64Octets, cm1110PortSingles=cm1110PortSingles, mcrPsmuModelName=mcrPsmuModelName, mcrUserDefinedModuleName=mcrUserDefinedModuleName, cm110ConfigFiberFilterUnknownUnicast=cm110ConfigFiberFilterUnknownUnicast, snmpV3ReadWriteUserName=snmpV3ReadWriteUserName, timeSummerFixStartDay=timeSummerFixStartDay, cm10gPort2ReceiveStatus=cm10gPort2ReceiveStatus, snmpCommunityPermission=snmpCommunityPermission, mcrXfpHigh18VoltWarnRecov=mcrXfpHigh18VoltWarnRecov, dynamicDNSSSLCipherEncryption=dynamicDNSSSLCipherEncryption, cm1000mmFiber2ReceiveStatus=cm1000mmFiber2ReceiveStatus, exCMConfigVdslSignalToNoiseRatioDown=exCMConfigVdslSignalToNoiseRatioDown, authMacHostTable=authMacHostTable, timeSntpMode=timeSntpMode, powerSchedOnMinute=powerSchedOnMinute, cm110ConfigFiberPriorityMap2=cm110ConfigFiberPriorityMap2, cm110ConfigFiberEgressLimit=cm110ConfigFiberEgressLimit, mgtChassisSlotPowerScheduleTable=mgtChassisSlotPowerScheduleTable, mcrModuleBootloaderVersion=mcrModuleBootloaderVersion, exCMVdslRemoteLoopback=exCMVdslRemoteLoopback, exCMHwSw8EthDuplex=exCMHwSw8EthDuplex, cm10gModelname=cm10gModelname, sfpDmiHighVoltAlarm=sfpDmiHighVoltAlarm, portLinkStatus=portLinkStatus, exCMConfigVdslCongestionPolicy=exCMConfigVdslCongestionPolicy, portDuplex=portDuplex, mcrXfpHigh5VCurrentWarn=mcrXfpHigh5VCurrentWarn, cm1000mmFixed=cm1000mmFixed, cm1110ConfigCopperPriorityMap5=cm1110ConfigCopperPriorityMap5, exCMVdslStatusTargetSnrDown=exCMVdslStatusTargetSnrDown, mcrXfpLow5VoltWarn=mcrXfpLow5VoltWarn, dynamicDNSSSLCipherStatus=dynamicDNSSSLCipherStatus, exCMConfigTable=exCMConfigTable, cfgDateFormat=cfgDateFormat, cm110ConfigCopperAutoNegAdv100FDX=cm110ConfigCopperAutoNegAdv100FDX, cm110PortInFcsErrs=cm110PortInFcsErrs, portSpeed=portSpeed, cm110ConfigUnidirectionalEthernet=cm110ConfigUnidirectionalEthernet, cm1000mmModelDesc=cm1000mmModelDesc, systemDomainName=systemDomainName, sfpDmiLowRxPowerAlarm=sfpDmiLowRxPowerAlarm, cm1110ConfigCopperIpTosPriority=cm1110ConfigCopperIpTosPriority, exCMPortInGoodOctets=exCMPortInGoodOctets, cm1110CopperPauseEnh=cm1110CopperPauseEnh, dynamicDNSSSLOrganisationUnit=dynamicDNSSSLOrganisationUnit, exCMConfigVdslPriorityMap7=exCMConfigVdslPriorityMap7, exCMVdslStatusActualSnrDs2=exCMVdslStatusActualSnrDs2, mgtEthStatsName=mgtEthStatsName, cm4gptPort1ConnType=cm4gptPort1ConnType, mcrSfpRemoved=mcrSfpRemoved, mcrXfpHigh33VCurrentWarn=mcrXfpHigh33VCurrentWarn, dynamicDNSConnectionMethod=dynamicDNSConnectionMethod, cm10gPort1LinkStatus=cm10gPort1LinkStatus, mgtfirmwareUpdatesGroup=mgtfirmwareUpdatesGroup, sfpDmiLinkReach9125=sfpDmiLinkReach9125, cm100mmLedEntry=cm100mmLedEntry, cm110CopperLPRFStatus=cm110CopperLPRFStatus, timeSntpHost1=timeSntpHost1, cm110CopperDuplex=cm110CopperDuplex, exCMEntry=exCMEntry, syslogSecondaryHost=syslogSecondaryHost, cm1000mmLedTable=cm1000mmLedTable, cm110ConfigSlotIndex=cm110ConfigSlotIndex, mcrXfpHigh18VCurrentAlarmRecov=mcrXfpHigh18VCurrentAlarmRecov, dnsStatus=dnsStatus, mgtAlertGroup=mgtAlertGroup, sfpDmiLowTempWarn=sfpDmiLowTempWarn, cm1000mmFiber1PauseEnh=cm1000mmFiber1PauseEnh, mcrXfpHigh5VCurrentAlarm=mcrXfpHigh5VCurrentAlarm, exCMVdslStatusActualSnrUs3=exCMVdslStatusActualSnrUs3, cm10gPort1PauseEnh=cm10gPort1PauseEnh, cm1110CopperDuplex=cm1110CopperDuplex, cm10gtPort1ReceiveStatus=cm10gtPort1ReceiveStatus, cm110ConfigFiber8021pPriority=cm110ConfigFiber8021pPriority, exCMConfigVdslProfile=exCMConfigVdslProfile, gatewaySubnetBits=gatewaySubnetBits, accessServicesSessInactTimeout=accessServicesSessInactTimeout, cm4gptPort2LinkStatus=cm4gptPort2LinkStatus, cm110VctRxPairAmplitude=cm110VctRxPairAmplitude, xfpDmiAux1State=xfpDmiAux1State, exCMConfigEthernetFilterUnknownUnicast=exCMConfigEthernetFilterUnknownUnicast, cm1110FiberSpeed=cm1110FiberSpeed, mcrXfpLowLaserTempWarnRecov=mcrXfpLowLaserTempWarnRecov, cm110ConfigCopperPriorityMap4=cm110ConfigCopperPriorityMap4, exCMConfigVdslBitswapping=exCMConfigVdslBitswapping, exCMConfigVdslFilterUnknownUnicast=exCMConfigVdslFilterUnknownUnicast, mcrXfpLowVCC2Warn=mcrXfpLowVCC2Warn, ldapClientAppendBase=ldapClientAppendBase, mcrSfpHighTxPowerAlarmRecov=mcrSfpHighTxPowerAlarmRecov, cm1110FiberLinkStatus=cm1110FiberLinkStatus, alarmWarnType=alarmWarnType, nisStatus=nisStatus, exCMConfigVdslLowBandwidthAlarmUp=exCMConfigVdslLowBandwidthAlarmUp, timeSntpKeyID=timeSntpKeyID, YesNoValue=YesNoValue, cm1000CopperLinkStatus=cm1000CopperLinkStatus, cm4gptLedLK2=cm4gptLedLK2, mcrMediaBackedupModuleSubType=mcrMediaBackedupModuleSubType, chassisCfgMgmtSlot=chassisCfgMgmtSlot, sfpDmiHighRxPowerAlarm=sfpDmiHighRxPowerAlarm, securidGroup=securidGroup, exCMConfigPriorityToEgressQueueMap7=exCMConfigPriorityToEgressQueueMap7, snmpV3ReadWriteStatus=snmpV3ReadWriteStatus, systemDomainPrefix=systemDomainPrefix, cm1110PortOutFiltered=cm1110PortOutFiltered, exCMVdslStatusActualLineAttenuationUs2=exCMVdslStatusActualLineAttenuationUs2, ipv6ServicesGroup=ipv6ServicesGroup, radiusNasIdentifier=radiusNasIdentifier, exCMVdslStatsEntry=exCMVdslStatsEntry, mcrMgtConfigSlotIndex=mcrMgtConfigSlotIndex, exCMConfigVdslMaxInterleaveDelayUp=exCMConfigVdslMaxInterleaveDelayUp, mcrSfpHighTxPowerWarnRecov=mcrSfpHighTxPowerWarnRecov, timeSummerMode=timeSummerMode, cm1110ConfigFiberPortEnable=cm1110ConfigFiberPortEnable, cm110ConfigCopperDuplex=cm110ConfigCopperDuplex, firmwareUpdateBundleVersionCm110=firmwareUpdateBundleVersionCm110, xfpDmiAux1Type=xfpDmiAux1Type, cm100mmConfigFiberFarEndFault=cm100mmConfigFiberFarEndFault)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", mcrXfpLowLaserWavelengthWarnRecov=mcrXfpLowLaserWavelengthWarnRecov, tacacsAlternateServiceNames=tacacsAlternateServiceNames, emailAlertLevel=emailAlertLevel, cm10gtPort2Speed=cm10gtPort2Speed, exCMVdslStatusMinInpDown=exCMVdslStatusMinInpDown, mcrPowerScheduleEnable=mcrPowerScheduleEnable, mcrMgtTftpDownloadSuccess=mcrMgtTftpDownloadSuccess, xfpDmiRealTimeAux2=xfpDmiRealTimeAux2, mcrSfpHighTempWarnRecov=mcrSfpHighTempWarnRecov, exCMAvctTxRxPair3Amplitude=exCMAvctTxRxPair3Amplitude, mcrXfpLowVCC2Alarm=mcrXfpLowVCC2Alarm, emailTo=emailTo, cm1000mmFiber2AutoNegState=cm1000mmFiber2AutoNegState, mcrMGTMIBMgtGroup=mcrMGTMIBMgtGroup, cm110PortInPauses=cm110PortInPauses, cm100mmLedSlotIndex=cm100mmLedSlotIndex, cm100ConfigLinkMode=cm100ConfigLinkMode, exCMVdslStatusActualInterleavingDepthDown=exCMVdslStatusActualInterleavingDepthDown, mgtAdminGroup=mgtAdminGroup, nettxfrSessionInUse=nettxfrSessionInUse, cm1000mmFiber1AutoNegState=cm1000mmFiber1AutoNegState, cm100ConfigSlotIndex=cm100ConfigSlotIndex, mcrXfpPowerExceededRecov=mcrXfpPowerExceededRecov, cm100mmConfigModuleName=cm100mmConfigModuleName, sfpDmiSlotIndex=sfpDmiSlotIndex, mcrModuleModelName=mcrModuleModelName, cm10gtConfigPort2Enable=cm10gtConfigPort2Enable, timeZoneName=timeZoneName, mgtEthStatsRxBytes=mgtEthStatsRxBytes, nisPrimaryHost=nisPrimaryHost, cm110VctStatus=cm110VctStatus, sshServerVerbose=sshServerVerbose, cm1110ConfigCopperAutoSpeedDownshift=cm1110ConfigCopperAutoSpeedDownshift, eventSeverityLevel=eventSeverityLevel, mcrChassisTemperatureAlarm=mcrChassisTemperatureAlarm, mcrMediaInserted=mcrMediaInserted, snmpV3ReadOnlySecurityLevel=snmpV3ReadOnlySecurityLevel, mcrXfpLowLaserTempWarn=mcrXfpLowLaserTempWarn, cm1000ConfigEntry=cm1000ConfigEntry, snmpTrapHostUdpPort=snmpTrapHostUdpPort, mcrMGTMIBCompliance=mcrMGTMIBCompliance, exCMModelDesc=exCMModelDesc, cm1110ConfigCopperPortName=cm1110ConfigCopperPortName, cm1110PortInRxErrs=cm1110PortInRxErrs, exCMVdslStatusActualSignalAttenuationDs1=exCMVdslStatusActualSignalAttenuationDs1, dynamicDNSSSLOrganisation=dynamicDNSSSLOrganisation, cm1110ConfigCopperDiscardTaggedFrames=cm1110ConfigCopperDiscardTaggedFrames, alertSyslogGroup=alertSyslogGroup, cm100ConfigCopperPause=cm100ConfigCopperPause, cm100CopperConnType=cm100CopperConnType, dynamicDNSGroup=dynamicDNSGroup, cm110ConfigCopperPriorityMap5=cm110ConfigCopperPriorityMap5, cm10gtConfigPort1ChannelNumber=cm10gtConfigPort1ChannelNumber, cm1110ConfigCopper8021pPriority=cm1110ConfigCopper8021pPriority, mcrXfpLow33VCurrentWarnRecov=mcrXfpLow33VCurrentWarnRecov, snmpCommunityTable=snmpCommunityTable, customTimeZoneGroup=customTimeZoneGroup, cm100HwJmp6AutoMDI=cm100HwJmp6AutoMDI, ipv6AddressStatus=ipv6AddressStatus, timeSntpServerAuthentication=timeSntpServerAuthentication, cm110ConfigCopperEgressLimit=cm110ConfigCopperEgressLimit, cm1000ConfigFiberAutoNeg=cm1000ConfigFiberAutoNeg, mcrChassisAdd=mcrChassisAdd, sntpStatStratum=sntpStatStratum, mcrPsmuFanStatus=mcrPsmuFanStatus, cm110PortPkts128to255Octets=cm110PortPkts128to255Octets, exCMConfigEthernetFilterUnknownMulticast=exCMConfigEthernetFilterUnknownMulticast, cm1110ConfigPriorityToEgressQueueMap7=cm1110ConfigPriorityToEgressQueueMap7, cm110PortInFragments=cm110PortInFragments, snmpCommunityName=snmpCommunityName, userStatusLevel=userStatusLevel, cm1110ConfigFiberDiscardTaggedFrames=cm1110ConfigFiberDiscardTaggedFrames, authHostOnly=authHostOnly, userStatusIndex=userStatusIndex, exCMVdslStatusActualSignalAttenuationDs3=exCMVdslStatusActualSignalAttenuationDs3, exCMVdslStatusActualLineAttenuationUs0=exCMVdslStatusActualLineAttenuationUs0, cm110ConfigCopperPriorityMap6=cm110ConfigCopperPriorityMap6, mgtBootFilesGroup=mgtBootFilesGroup, cm110ConfigPriorityToEgressQueueMap3=cm110ConfigPriorityToEgressQueueMap3, cm100HwSw5Pause=cm100HwSw5Pause, mcrMgtModelDesc=mcrMgtModelDesc, exCMVdslStatusAttainableDataRateUp=exCMVdslStatusAttainableDataRateUp, mcrXfpLowVEE5WarnRecov=mcrXfpLowVEE5WarnRecov, exCMVdslStatusMinDataRateDown=exCMVdslStatusMinDataRateDown, cm1110FiberLoopBack=cm1110FiberLoopBack, cm110ConfigCopperPause=cm110ConfigCopperPause, radiusAcctAuth=radiusAcctAuth, cm10gPort2LinkStatus=cm10gPort2LinkStatus, xfpDmiHighAux1Alarm=xfpDmiHighAux1Alarm, mcrSfpLowRxPowerWarnRecov=mcrSfpLowRxPowerWarnRecov, mgtNetworkGroup=mgtNetworkGroup, chassisOutStandWarnAlarms=chassisOutStandWarnAlarms, cm1110ConfigCopperPriorityMap0=cm1110ConfigCopperPriorityMap0, xfpDmiLowAux1Warn=xfpDmiLowAux1Warn, exCMVdslStatusActualSnrDs1=exCMVdslStatusActualSnrDs1, cm1110ConfigFiber8021pPriority=cm1110ConfigFiber8021pPriority, sfpDmiCurrentRxPowerState=sfpDmiCurrentRxPowerState, cm110PortPkts512to1023Octets=cm110PortPkts512to1023Octets, mgtEthStatsLocalAddress=mgtEthStatsLocalAddress, ldapEnableTLS=ldapEnableTLS, cm110FiberConnType=cm110FiberConnType, exCMPortOutUnicasts=exCMPortOutUnicasts, snmpTrapHostIpAddress=snmpTrapHostIpAddress, cm1000mmFiber1LPRFStatus=cm1000mmFiber1LPRFStatus, cm1110ConfigCopperAutoNegAdv1000FDX=cm1110ConfigCopperAutoNegAdv1000FDX, mcrXfpHighVEE5Warn=mcrXfpHighVEE5Warn, exCMModelName=exCMModelName, cm110PortExcessives=cm110PortExcessives, exCMLedTable=exCMLedTable, exCMStatsTable=exCMStatsTable, mcrChassisPwrUpSlotPwrState=mcrChassisPwrUpSlotPwrState, mgtEthSlotIndex=mgtEthSlotIndex, cm1110LedCopperSpeed=cm1110LedCopperSpeed, cm100HwSw3FarEndFault=cm100HwSw3FarEndFault, exCMEthernetAutoNegState=exCMEthernetAutoNegState, cm1000CopperAutoNegState=cm1000CopperAutoNegState, cm1000mmHwSw3FiberFaultAlert=cm1000mmHwSw3FiberFaultAlert, alertSnmpTrapGroup=alertSnmpTrapGroup, mcrMgtEntry=mcrMgtEntry, exCMConfigUnidirectionalEthernet=exCMConfigUnidirectionalEthernet, exCMVdslStatsUnavailableSecsLocal=exCMVdslStatsUnavailableSecsLocal, cm1110PortOutOctets=cm1110PortOutOctets, sfpDmiHighTempWarn=sfpDmiHighTempWarn, cm110HwSw5TpSpeed=cm110HwSw5TpSpeed, mcrXfpHigh18VCurrentWarn=mcrXfpHigh18VCurrentWarn, cm10gtLedEntry=cm10gtLedEntry, mcrUnManagedModuleSlotName=mcrUnManagedModuleSlotName, nettxfrTftpPort=nettxfrTftpPort, dynamicDNSUserName=dynamicDNSUserName, cm110MediaPortIndex=cm110MediaPortIndex, cm110PortCollisions=cm110PortCollisions, mgtEthStatsTxDroppedPkts=mgtEthStatsTxDroppedPkts, cm4gptConfigPort2Name=cm4gptConfigPort2Name, exCMVdslStatusActualSignalAttenuationUs3=exCMVdslStatusActualSignalAttenuationUs3, mcrMGTMIBObjects=mcrMGTMIBObjects, cm10gPort2ConnType=cm10gPort2ConnType, alarmWarnPortNum=alarmWarnPortNum, cm1110ConfigPriorityToEgressQueueMap3=cm1110ConfigPriorityToEgressQueueMap3, cm10gConfigPort1TxDitherEnable=cm10gConfigPort1TxDitherEnable, cm10gtConfigStatus=cm10gtConfigStatus, exCMVdslStatsTimeElapsedLocal=exCMVdslStatsTimeElapsedLocal, accessServicesStatus=accessServicesStatus, cm10gConfigPort1EdcMode=cm10gConfigPort1EdcMode, radiusSecondaryAuthHost=radiusSecondaryAuthHost, cm110ConfigCopperAutoNegAdv10HDX=cm110ConfigCopperAutoNegAdv10HDX, mcrXfpLow5VCurrentWarn=mcrXfpLow5VCurrentWarn, cm10gConfigPort2ChannelNumber=cm10gConfigPort2ChannelNumber, cm1110StatsSlotIndex=cm1110StatsSlotIndex, mcrSfpRecovComm=mcrSfpRecovComm, sfpDmiVendorPartNumber=sfpDmiVendorPartNumber, radiusGroup=radiusGroup, mcrPsmuPsuSerialNumber=mcrPsmuPsuSerialNumber, snmpTrapAlertLevel=snmpTrapAlertLevel, exCMPortInFcsErrs=exCMPortInFcsErrs, cm100mmFiber1LinkStatus=cm100mmFiber1LinkStatus, cm10gConfigPort1TxDitherValue=cm10gConfigPort1TxDitherValue, cm110ConfigCopperSpeed=cm110ConfigCopperSpeed, exCMAvctTxRxPair1Amplitude=exCMAvctTxRxPair1Amplitude, cm1110ConfigCopperIngressLimit=cm1110ConfigCopperIngressLimit, mcrMediaRecovCommunication=mcrMediaRecovCommunication, sfpDmiCurrentVoltState=sfpDmiCurrentVoltState, mcrXfpHigh18VoltAlarm=mcrXfpHigh18VoltAlarm, mcrXfpLowLaserTempAlarmRecov=mcrXfpLowLaserTempAlarmRecov, mcrXfpHighVEE5WarnRecov=mcrXfpHighVEE5WarnRecov, tacacsStatus=tacacsStatus, cm1000CopperSpeed=cm1000CopperSpeed, exCMVdslStatusActualSnrUs0=exCMVdslStatusActualSnrUs0, ldapGroup=ldapGroup, systemDHCPUpdateDNS=systemDHCPUpdateDNS, portAutoNegState=portAutoNegState, exCMConfigVdslRole=exCMConfigVdslRole, cm1110AvctTxRxPair1Results=cm1110AvctTxRxPair1Results, exCMConfigEthernetCrossOver=exCMConfigEthernetCrossOver, snmpV3TrapUserAuthAlgorithm=snmpV3TrapUserAuthAlgorithm, mcrXfpLow5VCurrentWarnRecov=mcrXfpLow5VCurrentWarnRecov, securidMasterHost=securidMasterHost, snmpV3TrapUserSecurityLevel=snmpV3TrapUserSecurityLevel, sshServerAuthKeyboard=sshServerAuthKeyboard, radiusRetryLimit=radiusRetryLimit, mcrChassisSlotTable=mcrChassisSlotTable, mcrXfpHigh5VoltAlarm=mcrXfpHigh5VoltAlarm, mcrMgtConfSavedFlash=mcrMgtConfSavedFlash, tacacsAccountingPrimaryHost=tacacsAccountingPrimaryHost, cm10gPortLoopBack=cm10gPortLoopBack, cm1110ModelName=cm1110ModelName, exCMLedEntry=exCMLedEntry, exCMConfigPriorityToEgressQueueMap5=exCMConfigPriorityToEgressQueueMap5, cm10gConfigPort2FecAmplitude=cm10gConfigPort2FecAmplitude, cm110RateConvVctEntry=cm110RateConvVctEntry, gatewayEntry=gatewayEntry, dynamicDNSHostname=dynamicDNSHostname, snmpTrapHostStatus=snmpTrapHostStatus, cm100mmFiber2LinkStatus=cm100mmFiber2LinkStatus, exCMAvctTxRxPair2Distance=exCMAvctTxRxPair2Distance, snmpTrapHostEntry=snmpTrapHostEntry, cm1110ConfigFiberPriorityMap3=cm1110ConfigFiberPriorityMap3, cm110LedFDF=cm110LedFDF, exCMVdslStatusActualInterleavingBlockDown=exCMVdslStatusActualInterleavingBlockDown, hostName=hostName, mcrMgtChassisMismatch=mcrMgtChassisMismatch, cm100mmHwSw2FarEndFault=cm100mmHwSw2FarEndFault, exCMConfigEthernetPriorityPrecedence=exCMConfigEthernetPriorityPrecedence, exCMVdslStatsErroredSecsLocal=exCMVdslStatsErroredSecsLocal, mcrMediaPortBandwidthThreshold=mcrMediaPortBandwidthThreshold, cm1000mmConfigTable=cm1000mmConfigTable, cm110PortPkts65to127Octets=cm110PortPkts65to127Octets, exCMConfigVdslOverrideProfile=exCMConfigVdslOverrideProfile, cfgTimeFormat=cfgTimeFormat, mcrSfpDmiModuleTable=mcrSfpDmiModuleTable, syslogStatus=syslogStatus, mcrXfpLow33VoltAlarm=mcrXfpLow33VoltAlarm, snmpAgentGroup=snmpAgentGroup, mcrPsmuFirmwareVersion=mcrPsmuFirmwareVersion, cm100mmHwSw4Loopback2=cm100mmHwSw4Loopback2, cm1000LedSlotIndex=cm1000LedSlotIndex, mcrMgtConfigEthCrossover=mcrMgtConfigEthCrossover, radiusNasSpecifyIpv6Address=radiusNasSpecifyIpv6Address, chassisModelDesc=chassisModelDesc, cm1110AvctTxRxPair3Amplitude=cm1110AvctTxRxPair3Amplitude, cm10gLedLK2=cm10gLedLK2, cm1110CopperCrossOver=cm1110CopperCrossOver, cm1000mmFiberLoopBack=cm1000mmFiberLoopBack, cm4gptLedPWR=cm4gptLedPWR, cm110ConfigFiberVlanTaggingAction=cm110ConfigFiberVlanTaggingAction, mcrXfpLowVCC3Alarm=mcrXfpLowVCC3Alarm, sfpDmiLowTxBiasAlarm=sfpDmiLowTxBiasAlarm, snmpCommunityEntry=snmpCommunityEntry, nisDomain=nisDomain, cm10gtConfigLinkMode=cm10gtConfigLinkMode, snmpV3ReadWriteSecurityLevel=snmpV3ReadWriteSecurityLevel, cm100mmConfigFiber2PortName=cm100mmConfigFiber2PortName, ipv6AddressIndex=ipv6AddressIndex, cm1110RateConvAvctTable=cm1110RateConvAvctTable, sshServerCipherCipherAES=sshServerCipherCipherAES, mcrSfpHighRxPowerWarn=mcrSfpHighRxPowerWarn, cm1110ConfigPriorityToEgressQueueMap2=cm1110ConfigPriorityToEgressQueueMap2, cm110PortInUnicasts=cm110PortInUnicasts, systemDate=systemDate, mcrLinkTestError=mcrLinkTestError, interfacev6StatsEntry=interfacev6StatsEntry, remoteTftpFileName=remoteTftpFileName, cm10gLedEntry=cm10gLedEntry, gatewayIpAddress=gatewayIpAddress, cm110PortMultiples=cm110PortMultiples, cm4gptPort2ConnType=cm4gptPort2ConnType, cm1110ConfigCopperAutoNegAdv100FDX=cm1110ConfigCopperAutoNegAdv100FDX, xfpDmiLowAuxAlarm=xfpDmiLowAuxAlarm, exCMVdslStatusActualInterleavingBlockUp=exCMVdslStatusActualInterleavingBlockUp, cm110ConfigCopperPriorityPrecedence=cm110ConfigCopperPriorityPrecedence, mcrXfpLow5VCurrentAlarm=mcrXfpLow5VCurrentAlarm, cm1000mmFiber2ConnType=cm1000mmFiber2ConnType, cm1110ConfigFiberFaultAlert=cm1110ConfigFiberFaultAlert, cm1110ConfigCopperPriorityMap6=cm1110ConfigCopperPriorityMap6, mgtEthStatsRxErrors=mgtEthStatsRxErrors)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", mgtEthStatsTxOverruns=mgtEthStatsTxOverruns, authHostIpIndex=authHostIpIndex, mcrXfpLowVCC2AlarmRecov=mcrXfpLowVCC2AlarmRecov, mcrModuleModelDesc=mcrModuleModelDesc, exCMConfigVdslMinInpDown=exCMConfigVdslMinInpDown, snmpTrapVarsGroup=snmpTrapVarsGroup, cm1110AvctTxRxPair3Distance=cm1110AvctTxRxPair3Distance, mcrMediaConfMismatchResolv=mcrMediaConfMismatchResolv, snmpTapGlobHostRetries=snmpTapGlobHostRetries, cm100ModelDesc=cm100ModelDesc, exCMEthernetLPRFStatus=exCMEthernetLPRFStatus, cm110ConfigPriorityToEgressQueueMap4=cm110ConfigPriorityToEgressQueueMap4, nisGroup=nisGroup, EnableDisableValue=EnableDisableValue, authHostMacIndex=authHostMacIndex, authIpHostTable=authIpHostTable, exCMConfigEthernetPriorityMap6=exCMConfigEthernetPriorityMap6, dynamicDNSSSLCipherHMAC=dynamicDNSSSLCipherHMAC, radiusAccountingPort=radiusAccountingPort, cm1110PortLates=cm1110PortLates, mcrModuleNotSupported=mcrModuleNotSupported, GenericTableIndex=GenericTableIndex, cm10gPort2PauseEnh=cm10gPort2PauseEnh, mcrXfpHigh33VoltAlarmRecov=mcrXfpHigh33VoltAlarmRecov, cm110PortOutFcsErrs=cm110PortOutFcsErrs, sfpDmiLowTxBiasWarn=sfpDmiLowTxBiasWarn, mcrSfpHighTxBiasWarn=mcrSfpHighTxBiasWarn, cm110ConfigMaxPacketSize=cm110ConfigMaxPacketSize, mcrXfpLowVCC3WarnRecov=mcrXfpLowVCC3WarnRecov, cm1110PortInUnicasts=cm1110PortInUnicasts, cm4gptConfigStatus=cm4gptConfigStatus, cm110HwSw7Loopback=cm110HwSw7Loopback, cm100FixedTable=cm100FixedTable, cm1110FiberReceiveStatus=cm1110FiberReceiveStatus, cm1110AvctStart=cm1110AvctStart, sshServerSSH1=sshServerSSH1, cm110LedEntry=cm110LedEntry, exCMConfigEthernetAutoNegAdv1000FDX=exCMConfigEthernetAutoNegAdv1000FDX, mgtEthStatsRxDroppedPkts=mgtEthStatsRxDroppedPkts, cm10gConfigPort2FecEnable=cm10gConfigPort2FecEnable, cm110ConfigCopperExtendDistance=cm110ConfigCopperExtendDistance, adminStatus=adminStatus, alarmWarnSequenceIndex=alarmWarnSequenceIndex, exCMPortInDiscards=exCMPortInDiscards, cm100LedLKF=cm100LedLKF, mcrXfpLowTecCurrentWarnRecov=mcrXfpLowTecCurrentWarnRecov, exCMVdslStatusActualLineAttenuationDs1=exCMVdslStatusActualLineAttenuationDs1, snmpV3LocalEngineID=snmpV3LocalEngineID, cm1000mmHwSw4Loopback1=cm1000mmHwSw4Loopback1, mcrSfpPortShutdown=mcrSfpPortShutdown, exCMEthernetSpeed=exCMEthernetSpeed, mcrXfpHighM52VoltWarnRecov=mcrXfpHighM52VoltWarnRecov, cm4gptLedsSlotIndex=cm4gptLedsSlotIndex, emailSubject=emailSubject, cm100mmHwJmp5ConfigMode=cm100mmHwJmp5ConfigMode, radiusAccounting=radiusAccounting, mcrSfpLowVoltWarnRecov=mcrSfpLowVoltWarnRecov, exCMAvctTxRxPair4Distance=exCMAvctTxRxPair4Distance, cm10gtPort1AutoNegState=cm10gtPort1AutoNegState, cm110ConfigCopperFilterUnknownMulticast=cm110ConfigCopperFilterUnknownMulticast, exCMConfigVdslPriorityMap1=exCMConfigVdslPriorityMap1, exCMVdslStatsSeverelyErroredSecsRemote=exCMVdslStatsSeverelyErroredSecsRemote, exCMConfigVdslDefaultPriority=exCMConfigVdslDefaultPriority, mcrSfpSpeedMismatchRecov=mcrSfpSpeedMismatchRecov, cm10gConfigPort2EdcMode=cm10gConfigPort2EdcMode, mcrModuleResetToFactory=mcrModuleResetToFactory, exCMHwSw2Rate=exCMHwSw2Rate, tacacsAuthorization=tacacsAuthorization, cm1110ConfigCopperPriorityPrecedence=cm1110ConfigCopperPriorityPrecedence, sfpDmiMediaPortIndex=sfpDmiMediaPortIndex, mcrXfpHighVCC5Alarm=mcrXfpHighVCC5Alarm, mgtEthStatsStatus=mgtEthStatsStatus, exCMConfigVdslSignalToNoiseRatioUp=exCMConfigVdslSignalToNoiseRatioUp, cm1000mmConfigFiber2PortName=cm1000mmConfigFiber2PortName, exCMVdslStatusTargetSnrUp=exCMVdslStatusTargetSnrUp, mcrXfpLowVCC5AlarmRecov=mcrXfpLowVCC5AlarmRecov, chassisModelName=chassisModelName, mcrMGTMIBMediaGroup=mcrMGTMIBMediaGroup, cm1110SlotIndex=cm1110SlotIndex, accessServiceHTTPSD=accessServiceHTTPSD, mcrSfpHighTxBiasWarnRecov=mcrSfpHighTxBiasWarnRecov, snmpTrapHostCommunity=snmpTrapHostCommunity, exCMConfigPriorityToEgressQueueMap6=exCMConfigPriorityToEgressQueueMap6, snmpCommunityStatus=snmpCommunityStatus, exCMVdslStatusActualSnrUs4=exCMVdslStatusActualSnrUs4, mcrPsmuIndex=mcrPsmuIndex, remoteMgtIpAddress=remoteMgtIpAddress)
