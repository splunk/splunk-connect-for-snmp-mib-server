#
# PySNMP MIB module CME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CME-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:09:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, Integer32, NotificationType, Counter32, enterprises, Bits, TimeTicks, Gauge32, ObjectIdentity, NotificationType, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Integer32", "NotificationType", "Counter32", "enterprises", "Bits", "TimeTicks", "Gauge32", "ObjectIdentity", "NotificationType", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class InetAddressIPv6(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:2x:2x:2x:2x:2x:2x:2x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3))
netfinitySupportProcessorAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51))
bladeCenterSnmpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2))
errorLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3))
configureSP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4))
restartReset = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7))
components = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22))
service = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1))
internalTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1))
cmmTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmTemp.setStatus('deprecated')
ambientTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5))
rearLEDCardTempAvg = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardTempAvg.setStatus('mandatory')
rearLEDCardTempMin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardTempMin.setStatus('mandatory')
rearLEDCardTempMax = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardTempMax.setStatus('mandatory')
monitorTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9))
hotAirRecircMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotAirRecircMonitoring.setStatus('mandatory')
hotAirRecircTempDeltaThresh = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotAirRecircTempDeltaThresh.setStatus('mandatory')
hotAirRecircStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7), )
if mibBuilder.loadTexts: hotAirRecircStatusTable.setStatus('mandatory')
hotAirRecircStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1), ).setIndexNames((0, "CME-MIB", "hotAirRecircStatusTopologyPath"), (0, "CME-MIB", "hotAirRecircStatusIndex"))
if mibBuilder.loadTexts: hotAirRecircStatusEntry.setStatus('mandatory')
hotAirRecircStatusTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotAirRecircStatusTopologyPath.setStatus('mandatory')
hotAirRecircStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotAirRecircStatusIndex.setStatus('mandatory')
hotAirRecircStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotAirRecircStatusName.setStatus('mandatory')
hotAirRecircStatusSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotAirRecircStatusSensorLabel.setStatus('mandatory')
hotAirRecircStatusSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotAirRecircStatusSensorReading.setStatus('mandatory')
hotAirRecircStatusExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotAirRecircStatusExceeded.setStatus('mandatory')
chassisFans = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3))
chassisFansTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50), )
if mibBuilder.loadTexts: chassisFansTable.setStatus('mandatory')
chassisFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1), ).setIndexNames((0, "CME-MIB", "chassisFanIndex"))
if mibBuilder.loadTexts: chassisFansEntry.setStatus('mandatory')
chassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanIndex.setStatus('mandatory')
chassisFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("chassisfan1", 1), ("chassisfan2", 2), ("chassisfan3", 3), ("chassisfan4", 4), ("chassisfan5", 5), ("chassisfan6", 6), ("chassisfan7", 7), ("chassisfan8", 8), ("chassisfan9", 9), ("chassisfan10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanId.setStatus('mandatory')
chassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanSpeed.setStatus('mandatory')
chassisFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanState.setStatus('mandatory')
chassisFanSpeedRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanSpeedRPM.setStatus('mandatory')
chassisFanControllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("operational", 0), ("flashing", 1), ("notPresent", 2), ("communicationError", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanControllerState.setStatus('mandatory')
chassisFanCoolingZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("coolingZone1", 1), ("coolingZone2", 2), ("coolingZone3", 3), ("coolingZone4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanCoolingZone.setStatus('mandatory')
chassisCoolingZoneTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51), )
if mibBuilder.loadTexts: chassisCoolingZoneTable.setStatus('mandatory')
chassisCoolingZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1), ).setIndexNames((0, "CME-MIB", "chassisCoolingIndex"))
if mibBuilder.loadTexts: chassisCoolingZoneEntry.setStatus('mandatory')
chassisCoolingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisCoolingIndex.setStatus('mandatory')
chassisCoolingZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("coolingZone1", 1), ("coolingZone2", 2), ("coolingZone3", 3), ("coolingZone4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisCoolingZone.setStatus('mandatory')
chassisCoolingZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisCoolingZoneStatus.setStatus('mandatory')
chassisCoolingZoneComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 41, 42, 43, 44, 61, 62, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14), ("switchModule1", 41), ("switchModule2", 42), ("switchModule3", 43), ("switchModule4", 44), ("mgmtModule1", 61), ("mgmtModule2", 62), ("fan1", 81), ("fan2", 82), ("fan3", 83), ("fan4", 84), ("fan5", 85), ("fan6", 86), ("fan7", 87), ("fan8", 88), ("fan9", 89), ("fan10", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisCoolingZoneComponent.setStatus('mandatory')
powerModuleHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4))
powerModuleHealthTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1), )
if mibBuilder.loadTexts: powerModuleHealthTable.setStatus('mandatory')
powerModuleHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1), ).setIndexNames((0, "CME-MIB", "powerModuleIndex"))
if mibBuilder.loadTexts: powerModuleHealthEntry.setStatus('mandatory')
powerModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleIndex.setStatus('mandatory')
powerModuleExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleExists.setStatus('mandatory')
powerModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("notAvailable", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleState.setStatus('mandatory')
powerModuleDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleDetails.setStatus('mandatory')
powerModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleDescription.setStatus('mandatory')
spStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5))
mmBistAndChassisStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2))
bistRtc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistRtc.setStatus('mandatory')
bistLocalI2CBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistLocalI2CBus.setStatus('mandatory')
bistPrimaryMainAppFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPrimaryMainAppFlashImage.setStatus('mandatory')
bistSecondaryMainAppFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSecondaryMainAppFlashImage.setStatus('mandatory')
bistBootRomFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistBootRomFlashImage.setStatus('mandatory')
bistEthernetPort1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistEthernetPort1.setStatus('mandatory')
bistExternalI2CDevices = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistExternalI2CDevices.setStatus('mandatory')
bistInternalEthernetSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistInternalEthernetSwitch.setStatus('mandatory')
bistPrimaryKernel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPrimaryKernel.setStatus('mandatory')
bistSecondaryKernel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSecondaryKernel.setStatus('mandatory')
bistPhysicalNetworkLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPhysicalNetworkLink.setStatus('mandatory')
bistLogicalNetworkLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistLogicalNetworkLink.setStatus('mandatory')
bistBladesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistBladesInstalled.setStatus('mandatory')
bistBladesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistBladesCommunicating.setStatus('mandatory')
bistChassisFansInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistChassisFansInstalled.setStatus('mandatory')
bistChassisFansFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistChassisFansFunctional.setStatus('mandatory')
bistRearLEDCardInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistRearLEDCardInstalled.setStatus('mandatory')
bistRearLEDCardCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistRearLEDCardCommunicating.setStatus('mandatory')
bistOtherMMInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistOtherMMInstalled.setStatus('mandatory')
bistOtherMMCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistOtherMMCommunicating.setStatus('mandatory')
bistPowerModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPowerModulesInstalled.setStatus('mandatory')
bistPowerModulesFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPowerModulesFunctional.setStatus('mandatory')
bistSwitchModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 97), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSwitchModulesInstalled.setStatus('mandatory')
bistSwitchModulesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 113), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSwitchModulesCommunicating.setStatus('mandatory')
bistChassisFansMUXAInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistChassisFansMUXAInstalled.setStatus('mandatory')
bistChassisFansMUXAFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistChassisFansMUXAFunctional.setStatus('mandatory')
bistChassisFansMUXBInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistChassisFansMUXBInstalled.setStatus('mandatory')
bistChassisFansMUXBFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistChassisFansMUXBFunctional.setStatus('mandatory')
bistLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 200), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistLastUpdate.setStatus('mandatory')
rmmBistAndChassisStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3))
rbistRtc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistRtc.setStatus('mandatory')
rbistLocalI2CBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistLocalI2CBus.setStatus('mandatory')
rbistEthernetPort1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistEthernetPort1.setStatus('mandatory')
rbistExternalI2CDevices = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistExternalI2CDevices.setStatus('mandatory')
rbistInternalEthernetSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistInternalEthernetSwitch.setStatus('mandatory')
rbistPhysicalNetworkLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistPhysicalNetworkLink.setStatus('mandatory')
rbistLogicalNetworkLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistLogicalNetworkLink.setStatus('mandatory')
rbistBladesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistBladesInstalled.setStatus('mandatory')
rbistBladesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistBladesCommunicating.setStatus('mandatory')
rbistChassisFansInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistChassisFansInstalled.setStatus('mandatory')
rbistChassisFansFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistChassisFansFunctional.setStatus('mandatory')
rbistRearLEDCardInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistRearLEDCardInstalled.setStatus('mandatory')
rbistRearLEDCardCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistRearLEDCardCommunicating.setStatus('mandatory')
rbistOtherMMInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistOtherMMInstalled.setStatus('mandatory')
rbistOtherMMCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistOtherMMCommunicating.setStatus('mandatory')
rbistPowerModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistPowerModulesInstalled.setStatus('mandatory')
rbistPowerModulesFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistPowerModulesFunctional.setStatus('mandatory')
rbistSwitchModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 97), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistSwitchModulesInstalled.setStatus('mandatory')
rbistSwitchModulesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 113), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistSwitchModulesCommunicating.setStatus('mandatory')
rbistChassisFansMUXAInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistChassisFansMUXAInstalled.setStatus('mandatory')
rbistChassisFansMUXAFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistChassisFansMUXAFunctional.setStatus('mandatory')
rbistChassisFansMUXBInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistChassisFansMUXBInstalled.setStatus('mandatory')
rbistChassisFansMUXBFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistChassisFansMUXBFunctional.setStatus('mandatory')
rbistUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 200), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistUpdateTime.setStatus('mandatory')
rbistLastUpdatePrimary = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 201), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbistLastUpdatePrimary.setStatus('mandatory')
fanPack = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6))
fanPackTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1), )
if mibBuilder.loadTexts: fanPackTable.setStatus('mandatory')
fanPackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1), ).setIndexNames((0, "CME-MIB", "fanPackIndex"))
if mibBuilder.loadTexts: fanPackEntry.setStatus('mandatory')
fanPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanPackIndex.setStatus('mandatory')
fanPackExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanPackExists.setStatus('mandatory')
fanPackState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanPackState.setStatus('mandatory')
fanPackFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanPackFanCount.setStatus('mandatory')
fanPackAverageSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanPackAverageSpeed.setStatus('mandatory')
fanPackAverageSpeedRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanPackAverageSpeedRPM.setStatus('mandatory')
fanPackControllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("operational", 0), ("flashing", 1), ("notPresent", 2), ("communicationError", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanPackControllerState.setStatus('mandatory')
systemHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7))
systemHealthStat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 255))).clone(namedValues=NamedValues(("critical", 0), ("nonCritical", 2), ("systemLevel", 4), ("normal", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthStat.setStatus('mandatory')
systemHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2), )
if mibBuilder.loadTexts: systemHealthSummaryTable.setStatus('mandatory')
systemHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1), ).setIndexNames((0, "CME-MIB", "systemHealthSummaryIndex"))
if mibBuilder.loadTexts: systemHealthSummaryEntry.setStatus('mandatory')
systemHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryIndex.setStatus('mandatory')
systemHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummarySeverity.setStatus('mandatory')
systemHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryDescription.setStatus('mandatory')
systemHealthSummaryDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryDateTime.setStatus('mandatory')
systemHealthSummaryAuxData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryAuxData.setStatus('mandatory')
systemHealthSummaryEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryEventID.setStatus('mandatory')
leds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8))
frontPanelLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1))
faultLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultLED.setStatus('mandatory')
checkLogLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: checkLogLED.setStatus('mandatory')
identifyLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identifyLED.setStatus('mandatory')
bladeLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2))
bladeLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1), )
if mibBuilder.loadTexts: bladeLEDsTable.setStatus('mandatory')
bladeLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1), ).setIndexNames((0, "CME-MIB", "ledBladeIndex"))
if mibBuilder.loadTexts: bladeLEDsEntry.setStatus('mandatory')
ledBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeIndex.setStatus('mandatory')
ledBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeId.setStatus('mandatory')
ledBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeExists.setStatus('mandatory')
ledBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladePowerState.setStatus('mandatory')
ledBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("critical", 3), ("kernelMode", 4), ("discovering", 5), ("commError", 6), ("noPower", 7), ("flashing", 8), ("initFailure", 9), ("insufficientPower", 10), ("powerDenied", 11), ("maintMode", 12), ("firehoseDump", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeHealthState.setStatus('mandatory')
ledBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeName.setStatus('mandatory')
ledBladeFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeFault.setStatus('mandatory')
ledBladeCheckLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledBladeCheckLog.setStatus('mandatory')
ledBladeIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledBladeIdentify.setStatus('mandatory')
bladeLEDsDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2), )
if mibBuilder.loadTexts: bladeLEDsDetailsTable.setStatus('mandatory')
bladeLEDsDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1), ).setIndexNames((0, "CME-MIB", "ledIndex"))
if mibBuilder.loadTexts: bladeLEDsDetailsEntry.setStatus('mandatory')
ledIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledIndex.setStatus('mandatory')
ledBladeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeBayNumber.setStatus('mandatory')
ledBladeComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeComponentType.setStatus('mandatory')
ledBladeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeLabel.setStatus('mandatory')
ledBladeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeState.setStatus('mandatory')
ledBladeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeLocation.setStatus('mandatory')
smLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4))
smLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2), )
if mibBuilder.loadTexts: smLEDsTable.setStatus('mandatory')
smLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1), ).setIndexNames((0, "CME-MIB", "ledSMSlot"), (0, "CME-MIB", "ledSMIndex"))
if mibBuilder.loadTexts: smLEDsEntry.setStatus('mandatory')
ledSMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSMIndex.setStatus('mandatory')
ledSMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSMSlot.setStatus('mandatory')
ledSMLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSMLabel.setStatus('mandatory')
ledSMState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledSMState.setStatus('mandatory')
ledSMLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSMLocation.setStatus('mandatory')
chassisFanLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5))
chassisFanLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1), )
if mibBuilder.loadTexts: chassisFanLEDsTable.setStatus('mandatory')
chassisFanLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1), ).setIndexNames((0, "CME-MIB", "ledChassisFanIndex"))
if mibBuilder.loadTexts: chassisFanLEDsEntry.setStatus('mandatory')
ledChassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledChassisFanIndex.setStatus('mandatory')
ledChassisFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("chassisfan1", 1), ("chassisfan2", 2), ("chassisfan3", 3), ("chassisfan4", 4), ("chassisfan5", 5), ("chassisfan6", 6), ("chassisfan7", 7), ("chassisfan8", 8), ("chassisfan9", 9), ("chassisfan10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledChassisFanId.setStatus('mandatory')
ledChassisFanExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledChassisFanExists.setStatus('mandatory')
ledChassisFanError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledChassisFanError.setStatus('mandatory')
fanPackLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6))
fanPackLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1), )
if mibBuilder.loadTexts: fanPackLEDsTable.setStatus('deprecated')
fanPackLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1), ).setIndexNames((0, "CME-MIB", "ledFanPackIndex"))
if mibBuilder.loadTexts: fanPackLEDsEntry.setStatus('deprecated')
ledFanPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledFanPackIndex.setStatus('deprecated')
ledFanPackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fanPack1", 1), ("fanPack2", 2), ("fanPack3", 3), ("fanPack4", 4), ("fanPack5", 5), ("fanPack6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledFanPackId.setStatus('deprecated')
ledFanPackExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledFanPackExists.setStatus('deprecated')
ledFanPackError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledFanPackError.setStatus('deprecated')
fuelGauge = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10))
fuelGaugeInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1))
fuelGaugeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1), )
if mibBuilder.loadTexts: fuelGaugeTable.setStatus('mandatory')
fuelGaugeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1), ).setIndexNames((0, "CME-MIB", "fuelGaugeIndex"))
if mibBuilder.loadTexts: fuelGaugeEntry.setStatus('mandatory')
fuelGaugeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeIndex.setStatus('mandatory')
fuelGaugePowerDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("powerDomain1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerDomainNumber.setStatus('mandatory')
fuelGaugeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeStatus.setStatus('mandatory')
fuelGaugePowerModules = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerModules.setStatus('mandatory')
fuelGaugePowerManagementPolicySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("power-module-redundancy", 0), ("power-module-redundancy-throttle", 1), ("basic", 2), ("power-source-redundancy", 3), ("power-source-redundancy-throttle", 4), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerManagementPolicySetting.setStatus('mandatory')
fuelGaugeTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeTotalPower.setStatus('mandatory')
fuelGaugeAllocatedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeAllocatedPower.setStatus('mandatory')
fuelGaugeRemainingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeRemainingPower.setStatus('mandatory')
fuelGaugePowerInUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerInUsed.setStatus('mandatory')
powerDomain1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2))
powerDomain1Table = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1), )
if mibBuilder.loadTexts: powerDomain1Table.setStatus('mandatory')
powerDomain1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1), ).setIndexNames((0, "CME-MIB", "pd1Index"))
if mibBuilder.loadTexts: powerDomain1Entry.setStatus('mandatory')
pd1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1Index.setStatus('mandatory')
pd1BayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1BayNumber.setStatus('mandatory')
pd1BladePrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1BladePrimarySlot.setStatus('mandatory')
pd1ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("insufficientPower", 0), ("moduleIsThrottling", 1), ("moduleNotThrottling", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleStatus.setStatus('mandatory')
pd1ModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleName.setStatus('mandatory')
pd1ModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("standby", 0), ("on", 1), ("notPresent", 2), ("off", 3), ("hibernate", 4), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleState.setStatus('mandatory')
pd1ModuleAllocatedPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleAllocatedPowerCurrent.setStatus('mandatory')
pd1ModuleAllocatedPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleAllocatedPowerMax.setStatus('mandatory')
pd1ModuleAllocatedPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleAllocatedPowerMin.setStatus('mandatory')
pd1ModuleCPUDutyCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleCPUDutyCycles.setStatus('mandatory')
pd1ModuleThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleThrottle.setStatus('mandatory')
pd1ModulePowerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("noAbility", 0), ("staticPowerManagement", 1), ("fixedPowerManagement", 2), ("dynamicPowerManagement", 3), ("dynamicPowerMeasurement1", 4), ("dynamicPowerMeasurement2", 5), ("dynamicPowerMeasurementWithPowerCapping", 6), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModulePowerCapabilities.setStatus('mandatory')
pd1ModuleMeasuredOrStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("static", 0), ("measured", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleMeasuredOrStatic.setStatus('mandatory')
pd1TopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1TopologyPath.setStatus('mandatory')
powerDomain1PowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3))
pd1PowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lastHour", 0), ("last6Hours", 1), ("last12Hours", 2), ("last24Hours", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pd1PowerTrendingPeriod.setStatus('mandatory')
pd1PowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10), )
if mibBuilder.loadTexts: pd1PowerTrendingSampleTable.setStatus('mandatory')
pd1PowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1), ).setIndexNames((0, "CME-MIB", "pd1PowerTrendingSampleIndex"))
if mibBuilder.loadTexts: pd1PowerTrendingSampleEntry.setStatus('mandatory')
pd1PowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1PowerTrendingSampleIndex.setStatus('mandatory')
pd1PowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1PowerTrendingSampleTimeStamp.setStatus('mandatory')
pd1PowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1PowerTrendingSampleAve.setStatus('mandatory')
moduleInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4))
bladeDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1))
bladeDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1), )
if mibBuilder.loadTexts: bladeDetailsTable.setStatus('mandatory')
bladeDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1), ).setIndexNames((0, "CME-MIB", "bladeDetailsIndex"))
if mibBuilder.loadTexts: bladeDetailsEntry.setStatus('mandatory')
bladeDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDetailsIndex.setStatus('mandatory')
bladeDetailsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDetailsId.setStatus('mandatory')
bladeDetailsMaxPowerConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeDetailsMaxPowerConfig.setStatus('mandatory')
bladeDetailsEffectiveClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDetailsEffectiveClockRate.setStatus('mandatory')
bladeDetailsMaximumClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDetailsMaximumClockRate.setStatus('mandatory')
bladeDetailsPowerSaverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeDetailsPowerSaverMode.setStatus('mandatory')
bladeDetailsDynamicPowerSaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeDetailsDynamicPowerSaver.setStatus('mandatory')
bladeDetailsDynamicPowerFavorPerformanceOverPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeDetailsDynamicPowerFavorPerformanceOverPower.setStatus('mandatory')
bladeDetailsPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("none", 0), ("measurement", 1), ("measurementpcap", 2), ("psave", 3), ("measurementpsave", 4), ("measurementpcappsave", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeDetailsPowerControl.setStatus('mandatory')
bladeDetailsPcapMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDetailsPcapMin.setStatus('mandatory')
bladeDetailsPcapGuaranteedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDetailsPcapGuaranteedMin.setStatus('mandatory')
bladeDetailsPcapMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDetailsPcapMax.setStatus('mandatory')
bladePowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3))
bladePowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lastHour", 0), ("last6Hours", 1), ("last12Hours", 2), ("last24Hours", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePowerTrendingPeriod.setStatus('mandatory')
bladePowerTrendingBladeId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePowerTrendingBladeId.setStatus('mandatory')
bladePowerTrendingTopologyPath = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePowerTrendingTopologyPath.setStatus('mandatory')
bladePowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10), )
if mibBuilder.loadTexts: bladePowerTrendingSampleTable.setStatus('mandatory')
bladePowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1), ).setIndexNames((0, "CME-MIB", "bladePowerTrendingSampleIndex"))
if mibBuilder.loadTexts: bladePowerTrendingSampleEntry.setStatus('mandatory')
bladePowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerTrendingSampleIndex.setStatus('mandatory')
bladePowerTrendingSampleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerTrendingSampleId.setStatus('mandatory')
bladePowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerTrendingSampleTimeStamp.setStatus('mandatory')
bladePowerTrendingSampleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerTrendingSampleMax.setStatus('mandatory')
bladePowerTrendingSampleMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerTrendingSampleMin.setStatus('mandatory')
bladePowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerTrendingSampleAve.setStatus('mandatory')
bladePowerTrendingSampleTopologyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerTrendingSampleTopologyId.setStatus('mandatory')
switchDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2))
switchPowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3))
switchPowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lastHour", 0), ("last6Hours", 1), ("last12Hours", 2), ("last24Hours", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPowerTrendingPeriod.setStatus('mandatory')
switchPowerTrendingSwitchId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPowerTrendingSwitchId.setStatus('mandatory')
switchPowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10), )
if mibBuilder.loadTexts: switchPowerTrendingSampleTable.setStatus('mandatory')
switchPowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1), ).setIndexNames((0, "CME-MIB", "switchPowerTrendingSampleIndex"))
if mibBuilder.loadTexts: switchPowerTrendingSampleEntry.setStatus('mandatory')
switchPowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPowerTrendingSampleIndex.setStatus('mandatory')
switchPowerTrendingSampleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8), ("module9", 9), ("module10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPowerTrendingSampleId.setStatus('mandatory')
switchPowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPowerTrendingSampleTimeStamp.setStatus('mandatory')
switchPowerTrendingSampleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPowerTrendingSampleMax.setStatus('mandatory')
switchPowerTrendingSampleMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPowerTrendingSampleMin.setStatus('mandatory')
switchPowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPowerTrendingSampleAve.setStatus('mandatory')
chassisFanDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3))
chassisFanPowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3))
chassisFanPowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lastHour", 0), ("last6Hours", 1), ("last12Hours", 2), ("last24Hours", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisFanPowerTrendingPeriod.setStatus('mandatory')
chassisFanPowerTrendingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("chassisFan1", 1), ("chassisFan2", 2), ("chassisFan3", 3), ("chassisFan4", 4), ("chassisFan5", 5), ("chassisFan6", 6), ("chassisFan7", 7), ("chassisFan8", 8), ("chassisFan9", 9), ("chassisFan10", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisFanPowerTrendingId.setStatus('mandatory')
chassisFanPowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10), )
if mibBuilder.loadTexts: chassisFanPowerTrendingSampleTable.setStatus('mandatory')
chassisFanPowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1), ).setIndexNames((0, "CME-MIB", "chassisFanPowerTrendingSampleIndex"))
if mibBuilder.loadTexts: chassisFanPowerTrendingSampleEntry.setStatus('mandatory')
chassisFanPowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanPowerTrendingSampleIndex.setStatus('mandatory')
chassisFanPowerTrendingSampleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("chassisFan1", 1), ("chassisFan2", 2), ("chassisFan3", 3), ("chassisFan4", 4), ("chassisFan5", 5), ("chassisFan6", 6), ("chassisFan7", 7), ("chassisFan8", 8), ("chassisFan9", 9), ("chassisFan10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanPowerTrendingSampleId.setStatus('mandatory')
chassisFanPowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanPowerTrendingSampleTimeStamp.setStatus('mandatory')
chassisFanPowerTrendingSampleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanPowerTrendingSampleMax.setStatus('mandatory')
chassisFanPowerTrendingSampleMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanPowerTrendingSampleMin.setStatus('mandatory')
chassisFanPowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanPowerTrendingSampleAve.setStatus('mandatory')
chassisInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5))
chassisConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1))
chassisTotalDCPowerAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTotalDCPowerAvailable.setStatus('mandatory')
chassisTotalPowerInUsed = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTotalPowerInUsed.setStatus('mandatory')
chassisTotalThermalOutput = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTotalThermalOutput.setStatus('mandatory')
chassisPowerService = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("volt110", 1), ("volt220", 2), ("notAvailable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerService.setStatus('deprecated')
chassisPowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3))
chassisPowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lastHour", 0), ("last6Hours", 1), ("last12Hours", 2), ("last24Hours", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisPowerTrendingPeriod.setStatus('mandatory')
chassisPowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10), )
if mibBuilder.loadTexts: chassisPowerTrendingSampleTable.setStatus('mandatory')
chassisPowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1), ).setIndexNames((0, "CME-MIB", "chassisPowerTrendingSampleIndex"))
if mibBuilder.loadTexts: chassisPowerTrendingSampleEntry.setStatus('mandatory')
chassisPowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerTrendingSampleIndex.setStatus('mandatory')
chassisPowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerTrendingSampleTimeStamp.setStatus('mandatory')
chassisPowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerTrendingSampleAve.setStatus('mandatory')
chassisThermalTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5))
chassisThermalTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lastHour", 0), ("last6Hours", 1), ("last12Hours", 2), ("last24Hours", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisThermalTrendingPeriod.setStatus('mandatory')
rearLEDCardThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10), )
if mibBuilder.loadTexts: rearLEDCardThermalTrendingTable.setStatus('mandatory')
rearLEDCardThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1), ).setIndexNames((0, "CME-MIB", "rearLEDCardThermalTrendingIndex"))
if mibBuilder.loadTexts: rearLEDCardThermalTrendingEntry.setStatus('mandatory')
rearLEDCardThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardThermalTrendingIndex.setStatus('mandatory')
rearLEDCardThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardThermalTrendingTimeStamp.setStatus('mandatory')
rearLEDCardThermalTrendingTemperatureAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardThermalTrendingTemperatureAvg.setStatus('mandatory')
rearLEDCardThermalTrendingTemperatureMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardThermalTrendingTemperatureMin.setStatus('mandatory')
rearLEDCardThermalTrendingTemperatureMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardThermalTrendingTemperatureMax.setStatus('mandatory')
cfmThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60), )
if mibBuilder.loadTexts: cfmThermalTrendingTable.setStatus('mandatory')
cfmThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1), ).setIndexNames((0, "CME-MIB", "cfmThermalTrendingIndex"))
if mibBuilder.loadTexts: cfmThermalTrendingEntry.setStatus('mandatory')
cfmThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmThermalTrendingIndex.setStatus('mandatory')
cfmThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmThermalTrendingTimeStamp.setStatus('mandatory')
cfmThermalTrendingCurrentCFM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmThermalTrendingCurrentCFM.setStatus('mandatory')
cfmThermalTrendingMaxCFM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmThermalTrendingMaxCFM.setStatus('mandatory')
ehiThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70), )
if mibBuilder.loadTexts: ehiThermalTrendingTable.setStatus('mandatory')
ehiThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1), ).setIndexNames((0, "CME-MIB", "ehiThermalTrendingIndex"))
if mibBuilder.loadTexts: ehiThermalTrendingEntry.setStatus('mandatory')
ehiThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehiThermalTrendingIndex.setStatus('mandatory')
ehiThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehiThermalTrendingTimeStamp.setStatus('mandatory')
ehiThermalTrendingMinEHI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehiThermalTrendingMinEHI.setStatus('mandatory')
ehiThermalTrendingMaxEHI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehiThermalTrendingMaxEHI.setStatus('mandatory')
ehiThermalTrendingAvgEHI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehiThermalTrendingAvgEHI.setStatus('mandatory')
powerPolicyInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6))
powerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1), )
if mibBuilder.loadTexts: powerPolicyTable.setStatus('mandatory')
powerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1), ).setIndexNames((0, "CME-MIB", "powerPolicyIndex"))
if mibBuilder.loadTexts: powerPolicyEntry.setStatus('mandatory')
powerPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyIndex.setStatus('mandatory')
powerPolicyPowerDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerDomain1", 1), ("powerDomain2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyPowerDomainNumber.setStatus('mandatory')
powerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyName.setStatus('mandatory')
powerPolicyPwrSupplyFailureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyPwrSupplyFailureLimit.setStatus('mandatory')
powerPolicyMaxPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyMaxPowerLimit.setStatus('mandatory')
powerPolicyEstimatedUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyEstimatedUtilization.setStatus('mandatory')
powerPolicyActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerPolicyActivate.setStatus('mandatory')
eventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4))
readEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2), )
if mibBuilder.loadTexts: readEventLogTable.setStatus('mandatory')
readEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1), ).setIndexNames((0, "CME-MIB", "readEventLogIndex"))
if mibBuilder.loadTexts: readEventLogEntry.setStatus('mandatory')
readEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEventLogIndex.setStatus('mandatory')
readEventLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEventLogString.setStatus('mandatory')
clearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearEventLog.setStatus('mandatory')
monitorLogStateEvents = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorLogStateEvents.setStatus('mandatory')
readEnhancedEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6), )
if mibBuilder.loadTexts: readEnhancedEventLogTable.setStatus('mandatory')
readEnhancedEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1), ).setIndexNames((0, "CME-MIB", "readEnhancedEventLogNumber"))
if mibBuilder.loadTexts: readEnhancedEventLogEntry.setStatus('mandatory')
readEnhancedEventLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEnhancedEventLogNumber.setStatus('mandatory')
readEnhancedEventLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEnhancedEventLogAttribute.setStatus('mandatory')
readEnhancedEventLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEnhancedEventLogMessage.setStatus('mandatory')
readEnhancedEventLogSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEnhancedEventLogSequenceNum.setStatus('mandatory')
readAuditLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10), )
if mibBuilder.loadTexts: readAuditLogTable.setStatus('mandatory')
readAuditLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1), ).setIndexNames((0, "CME-MIB", "readAuditLogNumber"))
if mibBuilder.loadTexts: readAuditLogEntry.setStatus('mandatory')
readAuditLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readAuditLogNumber.setStatus('mandatory')
readAuditLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readAuditLogAttribute.setStatus('mandatory')
readAuditLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readAuditLogMessage.setStatus('mandatory')
readAuditLogSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readAuditLogSequenceNum.setStatus('mandatory')
clearAuditLog = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearAuditLog.setStatus('mandatory')
readSystemLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12), )
if mibBuilder.loadTexts: readSystemLogTable.setStatus('mandatory')
readSystemLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1), ).setIndexNames((0, "CME-MIB", "readSystemLogNumber"))
if mibBuilder.loadTexts: readSystemLogEntry.setStatus('mandatory')
readSystemLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readSystemLogNumber.setStatus('mandatory')
readSystemLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readSystemLogAttribute.setStatus('mandatory')
readSystemLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readSystemLogMessage.setStatus('mandatory')
readSystemLogSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readSystemLogSequenceNum.setStatus('mandatory')
clearSystemLog = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearSystemLog.setStatus('mandatory')
readEventLogAuxTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14), )
if mibBuilder.loadTexts: readEventLogAuxTable.setStatus('mandatory')
readEventLogAuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14, 1), ).setIndexNames((0, "CME-MIB", "readEventLogAuxNumber"))
if mibBuilder.loadTexts: readEventLogAuxEntry.setStatus('mandatory')
readEventLogAuxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEventLogAuxNumber.setStatus('mandatory')
readEventLogAuxSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEventLogAuxSequenceNum.setStatus('mandatory')
readEventLogAuxMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEventLogAuxMessage.setStatus('mandatory')
remoteAccessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1))
generalRemoteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1))
remoteAlertRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120, 150, 180, 210, 240))).clone(namedValues=NamedValues(("oneHalfMinute", 30), ("oneMinute", 60), ("oneAndHalfMinutes", 90), ("twoMinutes", 120), ("twoAndHalfMinutes", 150), ("threeMinutes", 180), ("threeAndHalfMinutes", 210), ("fourMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertRetryDelay.setStatus('mandatory')
remoteAlertRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noretry", 0), ("retry1", 1), ("retry2", 2), ("retry3", 3), ("retry4", 4), ("retry5", 5), ("retry6", 6), ("retry7", 7), ("retry8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertRetryCount.setStatus('mandatory')
userAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("localOnly", 0), ("ldapOnly", 1), ("localFirstThenLdap", 2), ("ldapFirstThenLocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthenticationMethod.setStatus('mandatory')
maxSessionsPerLDAPUser = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxSessionsPerLDAPUser.setStatus('mandatory')
authenticationLoggingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("logAll", 0), ("fiveSeconds", 1), ("thirtySeconds", 2), ("oneMinute", 3), ("fiveMinutes", 4), ("tenMinutes", 5), ("thirtyMinutes", 6), ("oneHour", 7), ("twelveHours", 8), ("oneDay", 9), ("logNone", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenticationLoggingTimeout.setStatus('mandatory')
trackingIP = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trackingIP.setStatus('mandatory')
accountSecurityManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20))
accountSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("legacy", 0), ("high", 1), ("custom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountSecurityLevel.setStatus('mandatory')
customSecuritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2))
passwordExpirationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordExpirationPeriod.setStatus('mandatory')
defaultAdminPasswordExpired = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultAdminPasswordExpired.setStatus('mandatory')
minimumPasswordReuseCycle = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("onePassword", 1), ("twoPasswords", 2), ("threePasswords", 3), ("fourPasswords", 4), ("fivePasswords", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumPasswordReuseCycle.setStatus('mandatory')
complexPasswordRules = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: complexPasswordRules.setStatus('mandatory')
minimumDiffCharsPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("oneChar", 1), ("twoChars", 2), ("threeChars", 3), ("fourChars", 4), ("fiveChars", 5), ("sixChars", 6), ("sevenChars", 7), ("eightChars", 8), ("nineChars", 9), ("tenChars", 10), ("elevenChars", 11), ("twelveChars", 12), ("thirteenChars", 13), ("fourteenChars", 14), ("fifteenChars", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumDiffCharsPassword.setStatus('mandatory')
changePasswordFirstAccess = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changePasswordFirstAccess.setStatus('mandatory')
inactivityAlertPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactivityAlertPeriod.setStatus('mandatory')
inactivityAlertDisablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactivityAlertDisablePeriod.setStatus('mandatory')
lockoutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lockoutPeriod.setStatus('mandatory')
maxLoginFailures = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 0), ("oneTime", 1), ("twoTimes", 2), ("threeTimes", 3), ("fourTimes", 4), ("fiveTimes", 5), ("sixTimes", 6), ("sevenTimes", 7), ("eightTimes", 8), ("nineTimes", 9), ("tenTimes", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLoginFailures.setStatus('mandatory')
passwordChangeInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordChangeInterval.setStatus('mandatory')
serialPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2))
portBaud = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 7, 15, 23, 47))).clone(namedValues=NamedValues(("baud2400", 0), ("baud4800", 1), ("baud9600", 3), ("baud19200", 7), ("baud38400", 15), ("baud57600", 23), ("baud115200", 47)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaud.setStatus('mandatory')
portParity = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5, 7))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 3), ("mark", 5), ("space", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('mandatory')
portStopBits = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oneStopbit", 0), ("twoOrOnePtFive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopBits.setStatus('mandatory')
remoteAlertIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3))
remoteAlertIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1), )
if mibBuilder.loadTexts: remoteAlertIdsTable.setStatus('mandatory')
remoteAlertIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1), ).setIndexNames((0, "CME-MIB", "remoteAlertIdEntryIndex"))
if mibBuilder.loadTexts: remoteAlertIdsEntry.setStatus('mandatory')
remoteAlertIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlertIdEntryIndex.setStatus('mandatory')
remoteAlertIdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("disabledAndValid", 1), ("enabledAndValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryStatus.setStatus('mandatory')
remoteAlertIdEntryIpOrHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryIpOrHostAddress.setStatus('mandatory')
remoteAlertIdEntryTextDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryTextDescription.setStatus('mandatory')
remoteAlertIdEntryNotificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("snmpOverLan", 4), ("emailOverLan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryNotificationType.setStatus('mandatory')
remoteAlertIdEmailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEmailAddr.setStatus('mandatory')
remoteAlertIdEntrySelectiveAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("critOnlyAlerts", 0), ("allAlerts", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntrySelectiveAlert.setStatus('mandatory')
generateTestAlert = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generateTestAlert.setStatus('mandatory')
remoteAccessIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4))
remoteAccessIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1), )
if mibBuilder.loadTexts: remoteAccessIdsTable.setStatus('mandatory')
remoteAccessIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1), ).setIndexNames((0, "CME-MIB", "remoteAccessIdEntryIndex"))
if mibBuilder.loadTexts: remoteAccessIdsEntry.setStatus('mandatory')
remoteAccessIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryIndex.setStatus('mandatory')
remoteAccessIdEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryUserId.setStatus('mandatory')
remoteAccessIdEntryPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryPassword.setStatus('mandatory')
remoteAccessIdEntryPermgroups = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryPermgroups.setStatus('mandatory')
remoteAccessIdEntryLoggedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryLoggedIn.setStatus('mandatory')
remoteAccessIdEntryLastLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryLastLogin.setStatus('mandatory')
remoteAccessIdEntryPwdCompliant = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryPwdCompliant.setStatus('mandatory')
remoteAccessIdEntryPwdExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryPwdExp.setStatus('mandatory')
remoteAccessIdEntryDormant = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryDormant.setStatus('mandatory')
remoteAccessIdEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("active", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryState.setStatus('mandatory')
remoteAccessIdEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("unlock", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryAction.setStatus('mandatory')
remoteAccessIdEntrySessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntrySessionCount.setStatus('mandatory')
remoteAccessIdEntryMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryMaxSessions.setStatus('mandatory')
remoteAccessIdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 20), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryStatus.setStatus('mandatory')
remoteAccessIdEntryIPMIProvisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryIPMIProvisioned.setStatus('mandatory')
remoteAccessIdEntrySNMPv3Provisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntrySNMPv3Provisioned.setStatus('mandatory')
remoteAccessRBSroleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3), )
if mibBuilder.loadTexts: remoteAccessRBSroleTable.setStatus('mandatory')
remoteAccessRBSroleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1), ).setIndexNames((0, "CME-MIB", "roleIndex"))
if mibBuilder.loadTexts: remoteAccessRBSroleEntry.setStatus('mandatory')
roleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleIndex.setStatus('mandatory')
roleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roleId.setStatus('mandatory')
rbsSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSupervisor.setStatus('mandatory')
rbsOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsOperator.setStatus('mandatory')
rbsChassisOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisOperator.setStatus('mandatory')
rbsChassisAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisAccountManagement.setStatus('mandatory')
rbsChassisLogManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisLogManagement.setStatus('mandatory')
rbsChassisConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisConfiguration.setStatus('mandatory')
rbsChassisAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisAdministration.setStatus('mandatory')
rbsBladeOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBladeOperator.setStatus('mandatory')
rbsBladeRemotePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBladeRemotePresence.setStatus('mandatory')
rbsBladeConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBladeConfiguration.setStatus('mandatory')
rbsBladeAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBladeAdministration.setStatus('mandatory')
rbsSwitchModuleOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitchModuleOperator.setStatus('mandatory')
rbsSwitchModuleConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitchModuleConfiguration.setStatus('mandatory')
rbsSwitchModuleAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitchModuleAdministration.setStatus('mandatory')
rbsEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 23), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsEntryStatus.setStatus('mandatory')
remoteAccessRBSscopeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4), )
if mibBuilder.loadTexts: remoteAccessRBSscopeTable.setStatus('mandatory')
remoteAccessRBSscopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1), ).setIndexNames((0, "CME-MIB", "scopeIndex"))
if mibBuilder.loadTexts: remoteAccessRBSscopeEntry.setStatus('mandatory')
scopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scopeIndex.setStatus('mandatory')
scopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scopeId.setStatus('mandatory')
rbsChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassis.setStatus('mandatory')
rbsBlade1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade1.setStatus('mandatory')
rbsBlade2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade2.setStatus('mandatory')
rbsBlade3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade3.setStatus('mandatory')
rbsBlade4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade4.setStatus('mandatory')
rbsBlade5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade5.setStatus('mandatory')
rbsBlade6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade6.setStatus('mandatory')
rbsBlade7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade7.setStatus('mandatory')
rbsBlade8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade8.setStatus('mandatory')
rbsBlade9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade9.setStatus('mandatory')
rbsBlade10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade10.setStatus('mandatory')
rbsBlade11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade11.setStatus('mandatory')
rbsBlade12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade12.setStatus('mandatory')
rbsBlade13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade13.setStatus('mandatory')
rbsBlade14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade14.setStatus('mandatory')
rbsSwitch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch1.setStatus('mandatory')
rbsSwitch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch2.setStatus('mandatory')
rbsSwitch3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch3.setStatus('mandatory')
rbsSwitch4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch4.setStatus('mandatory')
rbsSwitch5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch5.setStatus('mandatory')
rbsSwitch6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch6.setStatus('mandatory')
rbsSwitch7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch7.setStatus('mandatory')
rbsSwitch8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch8.setStatus('mandatory')
rbsSwitch9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch9.setStatus('mandatory')
rbsSwitch10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch10.setStatus('mandatory')
cmmCentralManagerIPMISNMPv3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmCentralManagerIPMISNMPv3.setStatus('mandatory')
userInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5))
cli = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("telnet-only", 1), ("ssh-only", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cli.setStatus('mandatory')
snmp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("v1-only", 1), ("v3-only", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp.setStatus('mandatory')
tcm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcm.setStatus('mandatory')
web = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: web.setStatus('mandatory')
stcm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stcm.setStatus('mandatory')
mmSshClientAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6))
mmSshClientAuthPubKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1), )
if mibBuilder.loadTexts: mmSshClientAuthPubKeyTable.setStatus('mandatory')
mmSshClientAuthPubKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1), ).setIndexNames((0, "CME-MIB", "mmSshClientAuthRemoteAccessIdIndex"), (0, "CME-MIB", "mmSshClientAuthPubKeyIndex"))
if mibBuilder.loadTexts: mmSshClientAuthPubKeyEntry.setStatus('mandatory')
mmSshClientAuthRemoteAccessIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshClientAuthRemoteAccessIdIndex.setStatus('mandatory')
mmSshClientAuthPubKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyIndex.setStatus('mandatory')
mmSshClientAuthPubKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sshDss", 1), ("sshRsa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyType.setStatus('mandatory')
mmSshClientAuthPubKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bits512", 1), ("bits768", 2), ("bits1024", 3), ("bits2048", 4), ("bits4096", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshClientAuthPubKeySize.setStatus('mandatory')
mmSshClientAuthPubKeyFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyFingerprint.setStatus('mandatory')
mmSshClientAuthPubKeyAcceptFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyAcceptFrom.setStatus('mandatory')
mmSshClientAuthPubKeyComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyComment.setStatus('mandatory')
mmSshClientAuthPubKeyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyAction.setStatus('mandatory')
mmSshClientAuthPubKeyEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 9), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyEntryStatus.setStatus('mandatory')
mmSshClientAuthPubKeyUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyUserId.setStatus('mandatory')
mmSshClientAuthPubKeyUnused = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyUnused.setStatus('mandatory')
mmSshClientAuthPubKeyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyTftpServer.setStatus('mandatory')
mmSshClientAuthPubKeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyFileName.setStatus('mandatory')
mmSshClientAuthPubKeyFileFormat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSSH", 1), ("rfc4716", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmSshClientAuthPubKeyFileFormat.setStatus('mandatory')
groupProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7))
groupIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1), )
if mibBuilder.loadTexts: groupIdsTable.setStatus('mandatory')
groupIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1), ).setIndexNames((0, "CME-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupIdsEntry.setStatus('mandatory')
groupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupIndex.setStatus('mandatory')
groupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupId.setStatus('mandatory')
groupRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRole.setStatus('mandatory')
groupEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 9), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupEntryStatus.setStatus('mandatory')
groupRBSroleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2), )
if mibBuilder.loadTexts: groupRBSroleTable.setStatus('mandatory')
groupRBSroleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1), ).setIndexNames((0, "CME-MIB", "groupRBSroleIndex"))
if mibBuilder.loadTexts: groupRBSroleEntry.setStatus('mandatory')
groupRBSroleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRBSroleIndex.setStatus('mandatory')
groupRBSroleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRBSroleId.setStatus('mandatory')
groupRBSSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSupervisor.setStatus('mandatory')
groupRBSOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSOperator.setStatus('mandatory')
groupRBSChassisOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSChassisOperator.setStatus('mandatory')
groupRBSChassisAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSChassisAccountManagement.setStatus('mandatory')
groupRBSChassisLogManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSChassisLogManagement.setStatus('mandatory')
groupRBSChassisConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSChassisConfiguration.setStatus('mandatory')
groupRBSChassisAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSChassisAdministration.setStatus('mandatory')
groupRBSBladeOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBladeOperator.setStatus('mandatory')
groupRBSBladeRemotePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBladeRemotePresence.setStatus('mandatory')
groupRBSBladeConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBladeConfiguration.setStatus('mandatory')
groupRBSBladeAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBladeAdministration.setStatus('mandatory')
groupRBSSwitchModuleOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitchModuleOperator.setStatus('mandatory')
groupRBSSwitchModuleConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitchModuleConfiguration.setStatus('mandatory')
groupRBSSwitchModuleAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitchModuleAdministration.setStatus('mandatory')
groupRBSscopeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3), )
if mibBuilder.loadTexts: groupRBSscopeTable.setStatus('mandatory')
groupRBSscopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1), ).setIndexNames((0, "CME-MIB", "groupRBSscopeIndex"))
if mibBuilder.loadTexts: groupRBSscopeEntry.setStatus('mandatory')
groupRBSscopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRBSscopeIndex.setStatus('mandatory')
groupRBSscopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRBSscopeId.setStatus('mandatory')
groupRBSChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSChassis.setStatus('mandatory')
groupRBSBlade1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade1.setStatus('mandatory')
groupRBSBlade2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade2.setStatus('mandatory')
groupRBSBlade3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade3.setStatus('mandatory')
groupRBSBlade4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade4.setStatus('mandatory')
groupRBSBlade5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade5.setStatus('mandatory')
groupRBSBlade6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade6.setStatus('mandatory')
groupRBSBlade7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade7.setStatus('mandatory')
groupRBSBlade8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade8.setStatus('mandatory')
groupRBSBlade9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade9.setStatus('mandatory')
groupRBSBlade10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade10.setStatus('mandatory')
groupRBSBlade11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade11.setStatus('mandatory')
groupRBSBlade12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade12.setStatus('mandatory')
groupRBSBlade13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade13.setStatus('mandatory')
groupRBSBlade14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBlade14.setStatus('mandatory')
groupRBSSwitch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch1.setStatus('mandatory')
groupRBSSwitch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch2.setStatus('mandatory')
groupRBSSwitch3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch3.setStatus('mandatory')
groupRBSSwitch4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch4.setStatus('mandatory')
groupRBSSwitch5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch5.setStatus('mandatory')
groupRBSSwitch6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch6.setStatus('mandatory')
groupRBSSwitch7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch7.setStatus('mandatory')
groupRBSSwitch8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch8.setStatus('mandatory')
groupRBSSwitch9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch9.setStatus('mandatory')
groupRBSSwitch10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSwitch10.setStatus('mandatory')
remoteAlerts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2))
remoteAlertsCrit = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1))
critPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critPower.setStatus('mandatory')
critBlade = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critBlade.setStatus('mandatory')
critIO = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critIO.setStatus('mandatory')
critStorage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critStorage.setStatus('mandatory')
critChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critChassis.setStatus('mandatory')
critFan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critFan.setStatus('mandatory')
remoteAlertsNonCrit = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2))
warnLogFull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnLogFull.setStatus('mandatory')
warnBlade = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnBlade.setStatus('mandatory')
warnIO = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnIO.setStatus('mandatory')
warnStorage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnStorage.setStatus('mandatory')
warnPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnPower.setStatus('mandatory')
warnChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnChassis.setStatus('mandatory')
warnFan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnFan.setStatus('mandatory')
remoteAlertsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3))
systemInventory = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemInventory.setStatus('mandatory')
systemLog75PctFull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLog75PctFull.setStatus('mandatory')
networkChangeNotification = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkChangeNotification.setStatus('mandatory')
systemRemoteLogin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRemoteLogin.setStatus('mandatory')
systemBlade = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemBlade.setStatus('mandatory')
systemIO = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIO.setStatus('mandatory')
systemStorage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStorage.setStatus('mandatory')
systemPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPower.setStatus('mandatory')
systemChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemChassis.setStatus('mandatory')
systemFan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFan.setStatus('mandatory')
systemPWRDO = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPWRDO.setStatus('mandatory')
users = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17))
mmUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1))
currentlyLoggedInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1), )
if mibBuilder.loadTexts: currentlyLoggedInTable.setStatus('mandatory')
currentlyLoggedInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1), ).setIndexNames((0, "CME-MIB", "currentlyLoggedInEntryIndex"))
if mibBuilder.loadTexts: currentlyLoggedInEntry.setStatus('mandatory')
currentlyLoggedInEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryIndex.setStatus('mandatory')
currentlyLoggedInEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryUserId.setStatus('mandatory')
currentlyLoggedInEntryAccMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryAccMethod.setStatus('mandatory')
vpdInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21))
chassisInfoVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1))
chassisVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1))
chassisVpdMachineType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisVpdMachineType.setStatus('deprecated')
chassisVpdMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisVpdMachineModel.setStatus('deprecated')
chassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisSerialNumber.setStatus('deprecated')
chassisUUID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisUUID.setStatus('deprecated')
chassisManufacturingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisManufacturingId.setStatus('deprecated')
chassisHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisHardwareRevision.setStatus('deprecated')
chassisFruNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFruNumber.setStatus('deprecated')
chassisManufDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisManufDate.setStatus('deprecated')
chassisPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPartNumber.setStatus('deprecated')
chassisFruSerial = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFruSerial.setStatus('deprecated')
chassisManufacturingIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisManufacturingIDNumber.setStatus('deprecated')
chassisProductId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisProductId.setStatus('deprecated')
chassisSubManufacturerId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSubManufacturerId.setStatus('deprecated')
chassisClei = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisClei.setStatus('deprecated')
chassisHardwareRevisionString = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisHardwareRevisionString.setStatus('deprecated')
mmHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2))
mmHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1), )
if mibBuilder.loadTexts: mmHardwareVpdTable.setStatus('deprecated')
mmHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1), ).setIndexNames((0, "CME-MIB", "mmHardwareVpdIndex"))
if mibBuilder.loadTexts: mmHardwareVpdEntry.setStatus('deprecated')
mmHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdIndex.setStatus('deprecated')
mmHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdBayNumber.setStatus('deprecated')
mmHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdManufacturingId.setStatus('deprecated')
mmHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdFruNumber.setStatus('deprecated')
mmHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdHardwareRevision.setStatus('deprecated')
mmHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdUuid.setStatus('deprecated')
mmHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdManufDate.setStatus('deprecated')
mmHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdPartNumber.setStatus('deprecated')
mmHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdFruSerial.setStatus('deprecated')
mmHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdManufacturingIDNumber.setStatus('deprecated')
mmHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdProductId.setStatus('deprecated')
mmHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdSubManufacturerId.setStatus('deprecated')
mmHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdClei.setStatus('deprecated')
mmHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdHardwareRevisionString.setStatus('deprecated')
mmFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3))
mmMainApplVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1), )
if mibBuilder.loadTexts: mmMainApplVpdTable.setStatus('deprecated')
mmMainApplVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1), ).setIndexNames((0, "CME-MIB", "mmMainApplVpdIndex"))
if mibBuilder.loadTexts: mmMainApplVpdEntry.setStatus('deprecated')
mmMainApplVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdIndex.setStatus('deprecated')
mmMainApplVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdName.setStatus('deprecated')
mmMainApplVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdBuildId.setStatus('deprecated')
mmMainApplVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdRevisonNumber.setStatus('deprecated')
mmMainApplVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdFilename.setStatus('deprecated')
mmMainApplVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdBuildDate.setStatus('deprecated')
inventoryManagementActivityVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22), )
if mibBuilder.loadTexts: inventoryManagementActivityVpdTable.setStatus('mandatory')
inventoryManagementActivityVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1), ).setIndexNames((0, "CME-MIB", "componentLevelActivityVpdIndex"))
if mibBuilder.loadTexts: inventoryManagementActivityVpdEntry.setStatus('mandatory')
componentLevelActivityVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdIndex.setStatus('mandatory')
componentLevelActivityVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdFruNumber.setStatus('mandatory')
componentLevelActivityVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdSerialNumber.setStatus('mandatory')
componentLevelActivityVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdManufacturingId.setStatus('mandatory')
componentLevelActivityVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdBayNumber.setStatus('deprecated')
componentLevelActivityVpdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdAction.setStatus('mandatory')
componentLevelActivityVpdTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdTimestamp.setStatus('mandatory')
componentLevelActivityVpdModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdModuleName.setStatus('mandatory')
componentLevelActivityVpdTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdTopologyPath.setStatus('mandatory')
bladeHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4))
bladeHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1), )
if mibBuilder.loadTexts: bladeHardwareVpdTable.setStatus('deprecated')
bladeHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1), ).setIndexNames((0, "CME-MIB", "bladeHardwareVpdIndex"))
if mibBuilder.loadTexts: bladeHardwareVpdEntry.setStatus('deprecated')
bladeHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdIndex.setStatus('deprecated')
bladeHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdBayNumber.setStatus('deprecated')
bladeHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdManufacturingId.setStatus('deprecated')
bladeHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdFruNumber.setStatus('deprecated')
bladeHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdHardwareRevision.setStatus('deprecated')
bladeHardwareVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdSerialNumber.setStatus('deprecated')
bladeHardwareVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdMachineType.setStatus('deprecated')
bladeHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdUuid.setStatus('deprecated')
bladeHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdManufDate.setStatus('deprecated')
bladeHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdPartNumber.setStatus('deprecated')
bladeHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdFruSerial.setStatus('deprecated')
bladeHardwareVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdMachineModel.setStatus('deprecated')
bladeHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdManufacturingIDNumber.setStatus('deprecated')
bladeHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdProductId.setStatus('deprecated')
bladeHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdSubManufacturerId.setStatus('deprecated')
bladeHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdClei.setStatus('deprecated')
bladeHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdHardwareRevisionString.setStatus('deprecated')
bladeDaughterVpdCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("networkExpansion", 1), ("storageExpansion", 2), ("pciExpansion", 3), ("genericExpansion", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdCardType.setStatus('deprecated')
bladeDaughterVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdManufacturingId.setStatus('deprecated')
bladeDaughterVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdFruNumber.setStatus('deprecated')
bladeDaughterVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdHardwareRevision.setStatus('deprecated')
bladeDaughterVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdSerialNumber.setStatus('deprecated')
bladeDaughterVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdMachineType.setStatus('deprecated')
bladeDaughterVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdUuid.setStatus('deprecated')
bladeDaughterVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdManufDate.setStatus('deprecated')
bladeDaughterVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdPartNumber.setStatus('deprecated')
bladeDaughterVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdFruSerial.setStatus('deprecated')
bladeDaughterVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdManufacturingIDNumber.setStatus('deprecated')
bladeDaughterVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdProductId.setStatus('deprecated')
bladeDaughterVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdSubManufacturerId.setStatus('deprecated')
bladeDaughterVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdClei.setStatus('deprecated')
bladeDaughterVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdHardwareRevisionString.setStatus('deprecated')
bladeMACAddressVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2), )
if mibBuilder.loadTexts: bladeMACAddressVpdTable.setStatus('mandatory')
bladeMACAddressVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1), ).setIndexNames((0, "CME-MIB", "bladeMACAddressVpdIndex"))
if mibBuilder.loadTexts: bladeMACAddressVpdEntry.setStatus('mandatory')
bladeMACAddressVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddressVpdIndex.setStatus('mandatory')
bladeMACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress1Vpd.setStatus('mandatory')
bladeMACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress2Vpd.setStatus('mandatory')
bladeMACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress3Vpd.setStatus('mandatory')
bladeMACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress4Vpd.setStatus('mandatory')
bladeMACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress5Vpd.setStatus('mandatory')
bladeMACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress6Vpd.setStatus('mandatory')
bladeMACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress7Vpd.setStatus('mandatory')
bladeMACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress8Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress1Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress2Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress3Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress4Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress5Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress6Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress7Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress8Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress1Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress2Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress3Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress4Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress5Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress6Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress7Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress8Vpd.setStatus('mandatory')
bladeDaughterCard3MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard3MACAddress1Vpd.setStatus('mandatory')
bladeDaughterCard3MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard3MACAddress2Vpd.setStatus('mandatory')
bladeDaughterCard3MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard3MACAddress3Vpd.setStatus('mandatory')
bladeDaughterCard3MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard3MACAddress4Vpd.setStatus('mandatory')
bladeDaughterCard3MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard3MACAddress5Vpd.setStatus('mandatory')
bladeDaughterCard3MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard3MACAddress6Vpd.setStatus('mandatory')
bladeDaughterCard3MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard3MACAddress7Vpd.setStatus('mandatory')
bladeDaughterCard3MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard3MACAddress8Vpd.setStatus('mandatory')
bladeDaughterCard4MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard4MACAddress1Vpd.setStatus('mandatory')
bladeDaughterCard4MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard4MACAddress2Vpd.setStatus('mandatory')
bladeDaughterCard4MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard4MACAddress3Vpd.setStatus('mandatory')
bladeDaughterCard4MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard4MACAddress4Vpd.setStatus('mandatory')
bladeDaughterCard4MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard4MACAddress5Vpd.setStatus('mandatory')
bladeDaughterCard4MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard4MACAddress6Vpd.setStatus('mandatory')
bladeDaughterCard4MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard4MACAddress7Vpd.setStatus('mandatory')
bladeDaughterCard4MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard4MACAddress8Vpd.setStatus('mandatory')
bladeDaughterCard5MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard5MACAddress1Vpd.setStatus('mandatory')
bladeDaughterCard5MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard5MACAddress2Vpd.setStatus('mandatory')
bladeDaughterCard5MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard5MACAddress3Vpd.setStatus('mandatory')
bladeDaughterCard5MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard5MACAddress4Vpd.setStatus('mandatory')
bladeDaughterCard5MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard5MACAddress5Vpd.setStatus('mandatory')
bladeDaughterCard5MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard5MACAddress6Vpd.setStatus('mandatory')
bladeDaughterCard5MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard5MACAddress7Vpd.setStatus('mandatory')
bladeDaughterCard5MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard5MACAddress8Vpd.setStatus('mandatory')
bladeHSDaughterCard1MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 100), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHSDaughterCard1MACAddress1Vpd.setStatus('mandatory')
bladeHSDaughterCard1MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 101), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHSDaughterCard1MACAddress2Vpd.setStatus('mandatory')
bladeHSDaughterCard1MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 102), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHSDaughterCard1MACAddress3Vpd.setStatus('mandatory')
bladeHSDaughterCard1MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 103), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHSDaughterCard1MACAddress4Vpd.setStatus('mandatory')
bladeHSDaughterCard1MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 104), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHSDaughterCard1MACAddress5Vpd.setStatus('mandatory')
bladeHSDaughterCard1MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 105), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHSDaughterCard1MACAddress6Vpd.setStatus('mandatory')
bladeHSDaughterCard1MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 106), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHSDaughterCard1MACAddress7Vpd.setStatus('mandatory')
bladeHSDaughterCard1MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 107), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHSDaughterCard1MACAddress8Vpd.setStatus('mandatory')
bladeSideCardMACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 164), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSideCardMACAddress1Vpd.setStatus('mandatory')
bladeSideCardMACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 165), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSideCardMACAddress2Vpd.setStatus('mandatory')
bladeSideCardMACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 166), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSideCardMACAddress3Vpd.setStatus('mandatory')
bladeSideCardMACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 167), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSideCardMACAddress4Vpd.setStatus('mandatory')
bladeSideCardMACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 168), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSideCardMACAddress5Vpd.setStatus('mandatory')
bladeSideCardMACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 169), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSideCardMACAddress6Vpd.setStatus('mandatory')
bladeSideCardMACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 170), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSideCardMACAddress7Vpd.setStatus('mandatory')
bladeSideCardMACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 171), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSideCardMACAddress8Vpd.setStatus('mandatory')
bladeExpCardVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5), )
if mibBuilder.loadTexts: bladeExpCardVpdTable.setStatus('deprecated')
bladeExpCardVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1), ).setIndexNames((0, "CME-MIB", "bladeExpCardVpdIndex"))
if mibBuilder.loadTexts: bladeExpCardVpdEntry.setStatus('deprecated')
bladeExpCardVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdIndex.setStatus('deprecated')
bladeExpCardVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdBayNumber.setStatus('deprecated')
bladeExpCardVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdManufacturingId.setStatus('deprecated')
bladeExpCardVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdFruNumber.setStatus('deprecated')
bladeExpCardVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdHardwareRevision.setStatus('deprecated')
bladeExpCardVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdSerialNumber.setStatus('deprecated')
bladeExpCardVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdMachineType.setStatus('deprecated')
bladeExpCardVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdUuid.setStatus('deprecated')
bladeExpCardVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdManufDate.setStatus('deprecated')
bladeExpCardVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdPartNumber.setStatus('deprecated')
bladeExpCardVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdFruSerial.setStatus('deprecated')
bladeExpCardVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdMachineModel.setStatus('deprecated')
bladeExpCardVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdManufacturingIDNumber.setStatus('deprecated')
bladeExpCardVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdProductId.setStatus('deprecated')
bladeExpCardVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdSubManufacturerId.setStatus('deprecated')
bladeExpCardVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdClei.setStatus('deprecated')
bladeExpCardVpdBladeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdBladeBayNumber.setStatus('deprecated')
bladeExpCardVpdCardTypeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("bladeEthernetExpCard", 1), ("bladeFiberChannelExpCard", 2), ("serialPortExpCard", 3), ("bladeOpticalPassThrough", 4), ("bladeInfinibandExpCard", 5), ("bladeIscsiExpCard", 6), ("bladeGenericExpCard", 7), ("bladeNetworkCFFeExpCard", 8), ("bladeSASConnectivityCard", 9), ("bladeSATAConnectivityCard", 10), ("bladeNetworkCFFzExpCard", 11), ("bladeNetworkCNAExpCard", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdCardTypeInfo.setStatus('deprecated')
bladeExpCardVpdHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdHighSpeed.setStatus('deprecated')
bladeExpCardVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExpCardVpdHardwareRevisionString.setStatus('deprecated')
bladeAndExpCardWwnGuidVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7), )
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpdTable.setStatus('deprecated')
bladeAndExpCardWwnGuidVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1), ).setIndexNames((0, "CME-MIB", "bladeAndExpCardWwnGuidVpdIndex"))
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpdEntry.setStatus('deprecated')
bladeAndExpCardWwnGuidVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpdIndex.setStatus('deprecated')
bladeAndExpCardWwnGuidVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpdBayNumber.setStatus('deprecated')
bladeAndExpCardWwnGuidVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpdName.setStatus('deprecated')
bladeAndExpCardWwnGuidVpdBladeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpdBladeBayNumber.setStatus('deprecated')
bladeAndExpCardWwnGuidVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 0), ("wwn", 1), ("guid", 2), ("sas", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpdType.setStatus('deprecated')
bladeAndExpCardWwnGuidVpd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpd1.setStatus('deprecated')
bladeAndExpCardWwnGuidVpd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpd2.setStatus('deprecated')
bladeAndExpCardWwnGuidVpd3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpd3.setStatus('deprecated')
bladeAndExpCardWwnGuidVpd4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpd4.setStatus('deprecated')
bladeAndExpCardWwnGuidVpd5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpd5.setStatus('deprecated')
bladeAndExpCardWwnGuidVpd6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpd6.setStatus('deprecated')
bladeAndExpCardWwnGuidVpd7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpd7.setStatus('deprecated')
bladeAndExpCardWwnGuidVpd8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeAndExpCardWwnGuidVpd8.setStatus('deprecated')
bladeManagementCardVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8), )
if mibBuilder.loadTexts: bladeManagementCardVpdTable.setStatus('deprecated')
bladeManagementCardVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1), ).setIndexNames((0, "CME-MIB", "bladeManagementCardVpdIndex"))
if mibBuilder.loadTexts: bladeManagementCardVpdEntry.setStatus('deprecated')
bladeManagementCardVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdIndex.setStatus('deprecated')
bladeManagementCardVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdBayNumber.setStatus('deprecated')
bladeManagementCardVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdManufacturingId.setStatus('deprecated')
bladeManagementCardVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdFruNumber.setStatus('deprecated')
bladeManagementCardVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdHardwareRevision.setStatus('deprecated')
bladeManagementCardVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdSerialNumber.setStatus('deprecated')
bladeManagementCardVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdMachineType.setStatus('deprecated')
bladeManagementCardVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdUuid.setStatus('deprecated')
bladeManagementCardVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdManufDate.setStatus('deprecated')
bladeManagementCardVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdPartNumber.setStatus('deprecated')
bladeManagementCardVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdFruSerial.setStatus('deprecated')
bladeManagementCardVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdMachineModel.setStatus('deprecated')
bladeManagementCardVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdManufacturingIDNumber.setStatus('deprecated')
bladeManagementCardVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdProductId.setStatus('deprecated')
bladeManagementCardVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdSubManufacturerId.setStatus('deprecated')
bladeManagementCardVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdClei.setStatus('deprecated')
bladeManagementCardVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeManagementCardVpdHardwareRevisionString.setStatus('deprecated')
bladeFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5))
bladeBiosVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1), )
if mibBuilder.loadTexts: bladeBiosVPDTable.setStatus('deprecated')
bladeBiosVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1), ).setIndexNames((0, "CME-MIB", "bladeBiosVpdIndex"))
if mibBuilder.loadTexts: bladeBiosVPDEntry.setStatus('deprecated')
bladeBiosVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdIndex.setStatus('deprecated')
bladeBiosVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdId.setStatus('deprecated')
bladeBiosVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdExists.setStatus('deprecated')
bladeBiosVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdPowerState.setStatus('deprecated')
bladeBiosVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdName.setStatus('deprecated')
bladeBiosVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdBuildId.setStatus('deprecated')
bladeBiosVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdRevision.setStatus('deprecated')
bladeBiosVpdDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdDate.setStatus('deprecated')
bladeBiosVpdLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdLevelStatus.setStatus('deprecated')
bladeDiagsVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2), )
if mibBuilder.loadTexts: bladeDiagsVPDTable.setStatus('deprecated')
bladeDiagsVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1), ).setIndexNames((0, "CME-MIB", "bladeDiagsVpdIndex"))
if mibBuilder.loadTexts: bladeDiagsVPDEntry.setStatus('deprecated')
bladeDiagsVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdIndex.setStatus('deprecated')
bladeDiagsVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdId.setStatus('deprecated')
bladeDiagsVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdExists.setStatus('deprecated')
bladeDiagsVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdPowerState.setStatus('deprecated')
bladeDiagsVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdName.setStatus('deprecated')
bladeDiagsVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdBuildId.setStatus('deprecated')
bladeDiagsVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdRevision.setStatus('deprecated')
bladeDiagsVpdDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdDate.setStatus('deprecated')
bladeDiagsVpdLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdLevelStatus.setStatus('deprecated')
bladeSysMgmtProcVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3), )
if mibBuilder.loadTexts: bladeSysMgmtProcVPDTable.setStatus('deprecated')
bladeSysMgmtProcVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1), ).setIndexNames((0, "CME-MIB", "bladeSysMgmtProcVpdIndex"))
if mibBuilder.loadTexts: bladeSysMgmtProcVPDEntry.setStatus('deprecated')
bladeSysMgmtProcVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdIndex.setStatus('deprecated')
bladeSysMgmtProcVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdId.setStatus('deprecated')
bladeSysMgmtProcVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdExists.setStatus('deprecated')
bladeSysMgmtProcVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdPowerState.setStatus('deprecated')
bladeSysMgmtProcVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdName.setStatus('deprecated')
bladeSysMgmtProcVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdBuildId.setStatus('deprecated')
bladeSysMgmtProcVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdRevision.setStatus('deprecated')
bladeSysMgmtProcVpdLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdLevelStatus.setStatus('deprecated')
smHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6))
smHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1), )
if mibBuilder.loadTexts: smHardwareVpdTable.setStatus('deprecated')
smHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1), ).setIndexNames((0, "CME-MIB", "smHardwareVpdIndex"))
if mibBuilder.loadTexts: smHardwareVpdEntry.setStatus('deprecated')
smHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdIndex.setStatus('deprecated')
smHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdBayNumber.setStatus('deprecated')
smHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdManufacturingId.setStatus('deprecated')
smHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdFruNumber.setStatus('deprecated')
smHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdHardwareRevision.setStatus('deprecated')
smHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdUuid.setStatus('deprecated')
smHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdManufDate.setStatus('deprecated')
smHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdPartNumber.setStatus('deprecated')
smHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdFruSerial.setStatus('deprecated')
smHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdManufacturingIDNumber.setStatus('deprecated')
smHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdProductId.setStatus('deprecated')
smHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdSubManufacturerId.setStatus('deprecated')
smHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdClei.setStatus('deprecated')
smHardwareVpdWwnGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdWwnGuid.setStatus('deprecated')
smHardwareVpdWwnGuidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdWwnGuidType.setStatus('deprecated')
smHardwareVpdWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdWidth.setStatus('deprecated')
smHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdHardwareRevisionString.setStatus('deprecated')
smFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7))
smMainAppVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1), )
if mibBuilder.loadTexts: smMainAppVpdTable.setStatus('deprecated')
smMainAppVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1), ).setIndexNames((0, "CME-MIB", "smMainAppVpdIndex"))
if mibBuilder.loadTexts: smMainAppVpdEntry.setStatus('deprecated')
smMainAppVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdIndex.setStatus('deprecated')
smMainAppVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8), ("module9", 9), ("module10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdId.setStatus('deprecated')
smMainAppVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdExists.setStatus('deprecated')
smMainAppVpdSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 20, 30, 40))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("fibre", 2), ("opm", 3), ("serialCM", 4), ("copperPassThrough", 5), ("infiniband", 6), ("highSpeed", 20), ("passThrough", 30), ("sas", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdSwitchType.setStatus('deprecated')
smMainApp1VpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp1VpdBuildId.setStatus('deprecated')
smMainApp1VpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp1VpdBuildDate.setStatus('deprecated')
smMainApp1VpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp1VpdRevisionNumber.setStatus('deprecated')
smMainApp2VpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp2VpdBuildId.setStatus('deprecated')
smMainApp2VpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp2VpdBuildDate.setStatus('deprecated')
smMainApp2VpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp2VpdRevisionNumber.setStatus('deprecated')
smMainApp3VpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp3VpdBuildId.setStatus('deprecated')
smMainApp3VpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp3VpdBuildDate.setStatus('deprecated')
smMainApp3VpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp3VpdRevisionNumber.setStatus('deprecated')
smMainAppVpdSwitchSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("fibre", 2), ("infiniband", 6), ("sas", 7), ("raidsas", 8), ("icpm", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdSwitchSubType.setStatus('deprecated')
smBootRomVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2), )
if mibBuilder.loadTexts: smBootRomVpdTable.setStatus('deprecated')
smBootRomVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1), ).setIndexNames((0, "CME-MIB", "smBootRomVpdIndex"))
if mibBuilder.loadTexts: smBootRomVpdEntry.setStatus('deprecated')
smBootRomVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdIndex.setStatus('deprecated')
smBootRomVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8), ("module9", 9), ("module10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdId.setStatus('deprecated')
smBootRomVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdExists.setStatus('deprecated')
smBootRomVpdSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 20, 30, 40))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("fibre", 2), ("opm", 3), ("serialCM", 4), ("copperPassThrough", 5), ("infiniband", 6), ("highSpeed", 20), ("passThrough", 30), ("sas", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdSwitchType.setStatus('deprecated')
smBootRomVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdBuildId.setStatus('deprecated')
smBootRomVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdBuildDate.setStatus('deprecated')
smBootRomVpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdRevisionNumber.setStatus('deprecated')
smBootRomVpdSwitchSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("fibre", 2), ("infiniband", 6), ("sas", 7), ("raidsas", 8), ("icpm", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdSwitchSubType.setStatus('deprecated')
pmHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8))
pmHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1), )
if mibBuilder.loadTexts: pmHardwareVpdTable.setStatus('deprecated')
pmHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1), ).setIndexNames((0, "CME-MIB", "pmHardwareVpdIndex"))
if mibBuilder.loadTexts: pmHardwareVpdEntry.setStatus('deprecated')
pmHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdIndex.setStatus('deprecated')
pmHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdBayNumber.setStatus('deprecated')
pmHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdManufacturingId.setStatus('deprecated')
pmHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdFruNumber.setStatus('deprecated')
pmHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdHardwareRevision.setStatus('deprecated')
pmHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdUuid.setStatus('deprecated')
pmHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdManufDate.setStatus('deprecated')
pmHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdPartNumber.setStatus('deprecated')
pmHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdFruSerial.setStatus('deprecated')
pmHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdManufacturingIDNumber.setStatus('deprecated')
pmHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdProductId.setStatus('deprecated')
pmHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdSubManufacturerId.setStatus('deprecated')
pmHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdClei.setStatus('deprecated')
pmHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdHardwareRevisionString.setStatus('deprecated')
rearLEDCardHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9))
rearLEDCardHardwareVpdManufacturingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdManufacturingId.setStatus('deprecated')
rearLEDCardHardwareVpdFruNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdFruNumber.setStatus('deprecated')
rearLEDCardHardwareVpdHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdHardwareRevision.setStatus('deprecated')
rearLEDCardHardwareVpdUuid = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdUuid.setStatus('deprecated')
rearLEDCardHardwareVpdManufacturingIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdManufacturingIDNumber.setStatus('deprecated')
rearLEDCardHardwareVpdProductId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdProductId.setStatus('deprecated')
rearLEDCardHardwareVpdSubManufacturerId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdSubManufacturerId.setStatus('deprecated')
rearLEDCardHardwareVpdClei = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdClei.setStatus('deprecated')
rearLEDCardHardwareVpdHardwareRevisionString = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdHardwareRevisionString.setStatus('deprecated')
rearLEDCardHardwareVpdManufDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdManufDate.setStatus('deprecated')
rearLEDCardHardwareVpdPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdPartNumber.setStatus('deprecated')
rearLEDCardHardwareVpdFruSerial = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rearLEDCardHardwareVpdFruSerial.setStatus('deprecated')
chassisFanFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12))
chassisFanControllerVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1), )
if mibBuilder.loadTexts: chassisFanControllerVPDTable.setStatus('deprecated')
chassisFanControllerVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1), ).setIndexNames((0, "CME-MIB", "chassisFanControllerVpdIndex"))
if mibBuilder.loadTexts: chassisFanControllerVPDEntry.setStatus('deprecated')
chassisFanControllerVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanControllerVpdIndex.setStatus('deprecated')
chassisFanControllerVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("chassisFan1", 1), ("chassisFan2", 2), ("chassisFan3", 3), ("chassisFan4", 4), ("chassisFan5", 5), ("chassisFan6", 6), ("chassisFan7", 7), ("chassisFan8", 8), ("chassisFan9", 9), ("chassisFan10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanControllerVpdId.setStatus('deprecated')
chassisFanControllerVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanControllerVpdExists.setStatus('deprecated')
chassisFanControllerVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanControllerVpdRevision.setStatus('deprecated')
chassisFanHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13))
chassisFanHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1), )
if mibBuilder.loadTexts: chassisFanHardwareVpdTable.setStatus('deprecated')
chassisFanHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1), ).setIndexNames((0, "CME-MIB", "chassisFanHardwareVpdIndex"))
if mibBuilder.loadTexts: chassisFanHardwareVpdEntry.setStatus('deprecated')
chassisFanHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdIndex.setStatus('deprecated')
chassisFanHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdBayNumber.setStatus('deprecated')
chassisFanHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdManufacturingId.setStatus('deprecated')
chassisFanHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdFruNumber.setStatus('deprecated')
chassisFanHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdHardwareRevision.setStatus('deprecated')
chassisFanHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdUuid.setStatus('deprecated')
chassisFanHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdManufDate.setStatus('deprecated')
chassisFanHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdPartNumber.setStatus('deprecated')
chassisFanHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdFruSerial.setStatus('deprecated')
chassisFanHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdManufacturingIDNumber.setStatus('deprecated')
chassisFanHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdProductId.setStatus('deprecated')
chassisFanHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdSubManufacturerId.setStatus('deprecated')
chassisFanHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdClei.setStatus('deprecated')
chassisFanHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanHardwareVpdHardwareRevisionString.setStatus('deprecated')
pmFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14))
pmControllerVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1), )
if mibBuilder.loadTexts: pmControllerVPDTable.setStatus('deprecated')
pmControllerVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1), ).setIndexNames((0, "CME-MIB", "pmControllerVpdIndex"))
if mibBuilder.loadTexts: pmControllerVPDEntry.setStatus('deprecated')
pmControllerVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmControllerVpdIndex.setStatus('deprecated')
pmControllerVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("powerModule1", 1), ("powerModule2", 2), ("powerModule3", 3), ("powerModule4", 4), ("powerModule5", 5), ("powerModule6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmControllerVpdId.setStatus('deprecated')
pmControllerVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmControllerVpdExists.setStatus('deprecated')
pmControllerVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmControllerVpdRevision.setStatus('deprecated')
reloadVpdData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23))
reloadAllVpdData = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reloadAllVpdData.setStatus('mandatory')
reloadFwVpdData = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reloadFwVpdData.setStatus('mandatory')
reloadHwVpdData = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reloadHwVpdData.setStatus('mandatory')
reloadMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reloadMACAddress.setStatus('mandatory')
reloadWwnGuidVpdData = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reloadWwnGuidVpdData.setStatus('mandatory')
airFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22))
passiveAirFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1))
passiveAirFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passiveAirFilterStatus.setStatus('mandatory')
passiveAirFilterMonthFreq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6))).clone(namedValues=NamedValues(("oneMonth", 1), ("threeMonths", 3), ("sixMonths", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passiveAirFilterMonthFreq.setStatus('mandatory')
passiveAirFilterReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: passiveAirFilterReplaceDate.setStatus('mandatory')
componentInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23))
componentInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1))
componentInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1), )
if mibBuilder.loadTexts: componentInventoryTable.setStatus('mandatory')
componentInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1), ).setIndexNames((0, "CME-MIB", "componentInventoryTopologyPath"))
if mibBuilder.loadTexts: componentInventoryEntry.setStatus('mandatory')
componentInventoryTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryTopologyPath.setStatus('mandatory')
componentInventoryInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryInstance.setStatus('mandatory')
componentInventoryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryDescription.setStatus('mandatory')
componentInventoryMachineTypeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryMachineTypeModel.setStatus('mandatory')
componentInventoryMachineSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryMachineSerial.setStatus('mandatory')
componentInventoryAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryAssetID.setStatus('mandatory')
componentInventoryPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryPartNumber.setStatus('mandatory')
componentInventoryFRUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryFRUNumber.setStatus('mandatory')
componentInventoryFRUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryFRUSerialNumber.setStatus('mandatory')
componentInventoryManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryManufacture.setStatus('mandatory')
componentInventoryHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryHardwareRevision.setStatus('mandatory')
componentInventoryManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryManufactureDate.setStatus('mandatory')
componentInventoryUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryUUID.setStatus('mandatory')
componentInventoryProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProductID.setStatus('mandatory')
componentInventorySubManufactureID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventorySubManufactureID.setStatus('mandatory')
componentInventoryCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryCLEI.setStatus('mandatory')
componentInventoryAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryAssetTag.setStatus('mandatory')
componentInventorySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventorySpeed.setStatus('mandatory')
componentInventoryIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryIdentifier.setStatus('mandatory')
componentInventorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventorySize.setStatus('mandatory')
componentInventoryMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 11))).clone(namedValues=NamedValues(("fpmdram", 1), ("edo", 2), ("edodram", 3), ("sdram", 4), ("multiplexedram", 5), ("ddrsgram", 6), ("ddrsdram", 7), ("ddr2sdrm", 8), ("ddr3sdram", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryMemoryType.setStatus('mandatory')
componentInventoryProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProductName.setStatus('mandatory')
componentInventoryProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProductVersion.setStatus('mandatory')
componentInventoryProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("central", 3), ("math", 4), ("dsp", 5), ("video", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorType.setStatus('mandatory')
componentInventoryProcessorFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorFamily.setStatus('mandatory')
componentInventoryProcessorCores = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorCores.setStatus('mandatory')
componentInventoryProcessorThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorThreads.setStatus('mandatory')
componentInventoryProcessorL1DCache = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorL1DCache.setStatus('mandatory')
componentInventoryProcessorL1ICache = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorL1ICache.setStatus('mandatory')
componentInventoryProcessorL2Cache = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorL2Cache.setStatus('mandatory')
componentInventoryProcessorL3Cache = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorL3Cache.setStatus('mandatory')
componentInventoryProcessorVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorVoltage.setStatus('mandatory')
componentInventoryProcessorExtClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorExtClock.setStatus('mandatory')
componentInventoryProcessorDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryProcessorDataWidth.setStatus('mandatory')
componentInventoryManufactureIDNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryManufactureIDNum.setStatus('mandatory')
componentInventoryGlobalID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryGlobalID.setStatus('mandatory')
componentInventoryTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryTableCacheTimeout.setStatus('mandatory')
componentFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2))
componentFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1), )
if mibBuilder.loadTexts: componentFirmwareTable.setStatus('mandatory')
componentFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1), ).setIndexNames((0, "CME-MIB", "componentFirmwareTopologyPath"), (0, "CME-MIB", "componentFirmwareIndex"))
if mibBuilder.loadTexts: componentFirmwareEntry.setStatus('mandatory')
componentFirmwareTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareTopologyPath.setStatus('mandatory')
componentFirmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareIndex.setStatus('mandatory')
componentFirmwareComponentInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareComponentInstance.setStatus('mandatory')
componentFirmwareComponentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareComponentDescription.setStatus('mandatory')
componentFirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareType.setStatus('mandatory')
componentFirmwareBuildID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareBuildID.setStatus('mandatory')
componentFirmwareReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareReleaseDate.setStatus('mandatory')
componentFirmwareFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareFilename.setStatus('mandatory')
componentFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareRevision.setStatus('mandatory')
componentFirmwareRevisionMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareRevisionMajor.setStatus('mandatory')
componentFirmwareRevisionMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareRevisionMinor.setStatus('mandatory')
componentFirmwareLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareLevelStatus.setStatus('mandatory')
componentFirmwarePendingBuildID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwarePendingBuildID.setStatus('mandatory')
componentFirmwarePendingReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwarePendingReleaseDate.setStatus('mandatory')
componentFirmwarePendingRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwarePendingRevision.setStatus('mandatory')
componentFirmwareReleaseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareReleaseLevel.setStatus('mandatory')
componentFirmwareImageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareImageStatus.setStatus('mandatory')
componentFirmwareRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareRole.setStatus('mandatory')
componentFirmwareTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 40, 41, 42, 43, 61, 62, 81, 91, 92, 101, 102, 103, 104, 105, 106, 255))).clone(namedValues=NamedValues(("bladeFwBios", 1), ("bladeDiagnostics", 2), ("bladeSysMgmtProcessor", 3), ("bladeFpga", 4), ("bladecKVM", 5), ("bladeMP", 6), ("bladeUEFI", 7), ("bladeDSA", 8), ("switchModuleMainAppl", 40), ("switchModuleMainAppl1", 41), ("switchModuleMainAppl2", 42), ("switchModuleBootROM", 43), ("mgmtModuleMainAppl", 61), ("mgmtModuleMainApplPendingRestart", 62), ("fanController", 81), ("powerSupplyFirmware", 91), ("powerSupplyFanController", 92), ("expansionCardGeneric", 101), ("expansionCardEfi", 102), ("expansionCardFcode", 103), ("expansionCardBios", 104), ("expansionCardMain", 105), ("expansionCardMulti", 106), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareTypeID.setStatus('mandatory')
componentFirmwareTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentFirmwareTableCacheTimeout.setStatus('mandatory')
componentInventoryReady = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notReady", 0), ("ready", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInventoryReady.setStatus('mandatory')
nodeFirmwareAnalysisTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7), )
if mibBuilder.loadTexts: nodeFirmwareAnalysisTable.setStatus('mandatory')
nodeFirmwareAnalysisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1), ).setIndexNames((0, "CME-MIB", "nodeFirmwareAnalysisIndex"))
if mibBuilder.loadTexts: nodeFirmwareAnalysisEntry.setStatus('mandatory')
nodeFirmwareAnalysisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareAnalysisIndex.setStatus('mandatory')
nodeFirmwareAnalysisMachineTypeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareAnalysisMachineTypeModel.setStatus('mandatory')
nodeFirmwareAnalysisFirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareAnalysisFirmwareType.setStatus('mandatory')
nodeFirmwareAnalysisBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareAnalysisBuildId.setStatus('mandatory')
nodeFirmwareAnalysisReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareAnalysisReleaseDate.setStatus('mandatory')
nodeFirmwareAnalysisRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareAnalysisRevisionLevel.setStatus('mandatory')
nodeFirmwareAnalysisTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareAnalysisTopology.setStatus('mandatory')
nodeFirmwareAnalysisDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareAnalysisDeviceName.setStatus('mandatory')
smFirmwareAnalysisTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11), )
if mibBuilder.loadTexts: smFirmwareAnalysisTable.setStatus('mandatory')
smFirmwareAnalysisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1), ).setIndexNames((0, "CME-MIB", "smFirmwareAnalysisIndex"))
if mibBuilder.loadTexts: smFirmwareAnalysisEntry.setStatus('mandatory')
smFirmwareAnalysisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareAnalysisIndex.setStatus('mandatory')
smFirmwareAnalysisProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareAnalysisProductId.setStatus('mandatory')
smFirmwareAnalysisProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareAnalysisProductName.setStatus('mandatory')
smFirmwareAnalysisFirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareAnalysisFirmwareType.setStatus('mandatory')
smFirmwareAnalysisFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareAnalysisFirmwareVersion.setStatus('mandatory')
smFirmwareAnalysisReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareAnalysisReleaseDate.setStatus('mandatory')
smFirmwareAnalysisTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareAnalysisTopology.setStatus('mandatory')
componentDriveTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10), )
if mibBuilder.loadTexts: componentDriveTable.setStatus('mandatory')
componentDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1), ).setIndexNames((0, "CME-MIB", "componentDriveTopologyPath"))
if mibBuilder.loadTexts: componentDriveEntry.setStatus('mandatory')
componentDriveTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentDriveTopologyPath.setStatus('mandatory')
componentDriveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentDriveDescription.setStatus('mandatory')
componentDriveTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentDriveTableCacheTimeout.setStatus('mandatory')
licenseKeyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30))
licenseKeyInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1), )
if mibBuilder.loadTexts: licenseKeyInfoTable.setStatus('mandatory')
licenseKeyInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1), ).setIndexNames((0, "CME-MIB", "licenseKeyComponentIndex"), (0, "CME-MIB", "licenseKeyIndex"))
if mibBuilder.loadTexts: licenseKeyInfoEntry.setStatus('mandatory')
licenseKeyComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 41, 42, 43, 44))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14), ("switchModule1", 41), ("switchModule2", 42), ("switchModule3", 43), ("switchModule4", 44)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyComponentIndex.setStatus('mandatory')
licenseKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyIndex.setStatus('mandatory')
licenseKeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyDescription.setStatus('mandatory')
licenseKeyTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyTimestamp.setStatus('mandatory')
licenseKeyLicenseID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyLicenseID.setStatus('mandatory')
licenseKeyOtherInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyOtherInfo.setStatus('mandatory')
licenseKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("unknown", 0), ("valid", 1), ("invalid", 2), ("expired", 3), ("usageExceeded", 4), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyStatus.setStatus('mandatory')
chassisLicenseKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5), )
if mibBuilder.loadTexts: chassisLicenseKeyTable.setStatus('mandatory')
chassisLicenseKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1), ).setIndexNames((0, "CME-MIB", "chassisLicenseKeyIndex"))
if mibBuilder.loadTexts: chassisLicenseKeyEntry.setStatus('mandatory')
chassisLicenseKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyIndex.setStatus('mandatory')
chassisLicenseKeyFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyFeature.setStatus('mandatory')
chassisLicenseKeyFeatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyFeatureType.setStatus('mandatory')
chassisLicenseKeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyDescription.setStatus('mandatory')
chassisLicenseKeySystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeySystem.setStatus('mandatory')
chassisLicenseKeyLicenseID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyLicenseID.setStatus('mandatory')
chassisLicenseKeyValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyValidation.setStatus('mandatory')
chassisLicenseKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("valid", 0), ("validatingKey", 1), ("invalidMTSN", 2), ("invalidMAC", 3), ("signatureValidationFailed", 4), ("keyExpired", 5), ("usageExceeded", 6), ("validateElsewhere", 7), ("notApplicable", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyStatus.setStatus('mandatory')
chassisLicenseKeyTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyTimeLimit.setStatus('mandatory')
chassisLicenseKeyUsageLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLicenseKeyUsageLimit.setStatus('mandatory')
securitySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3))
trespassWarning = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trespassWarning.setStatus('mandatory')
trespassWarningDefault = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trespassWarningDefault.setStatus('mandatory')
trespassMessage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trespassMessage.setStatus('mandatory')
chassisSecuritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5))
securityPolicySetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("legacy", 0), ("secure", 1), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityPolicySetting.setStatus('mandatory')
securityPolicyState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("active", 0), ("pending", 1), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPolicyState.setStatus('mandatory')
securityPolicyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3), )
if mibBuilder.loadTexts: securityPolicyStatusTable.setStatus('mandatory')
securityPolicyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1), ).setIndexNames((0, "CME-MIB", "securityPolicyStatusIndex"))
if mibBuilder.loadTexts: securityPolicyStatusEntry.setStatus('mandatory')
securityPolicyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPolicyStatusIndex.setStatus('mandatory')
securityPolicyStatusComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 33, 34))).clone(namedValues=NamedValues(("system", 0), ("mgmtModule1", 1), ("mgmtModule2", 2), ("blade1", 11), ("blade2", 12), ("blade3", 13), ("blade4", 14), ("blade5", 15), ("blade6", 16), ("blade7", 17), ("blade8", 18), ("blade9", 19), ("blade10", 20), ("blade11", 21), ("blade12", 22), ("blade13", 23), ("blade14", 24), ("switchModule1", 31), ("switchModule2", 32), ("switchModule3", 33), ("switchModule4", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPolicyStatusComponentType.setStatus('mandatory')
securityPolicyStatusBayId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPolicyStatusBayId.setStatus('mandatory')
securityPolicyStatusSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPolicyStatusSummary.setStatus('mandatory')
securityPolicyStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPolicyStatusDetails.setStatus('mandatory')
cryptography = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10))
cryptographySummary = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptographySummary.setStatus('mandatory')
cryptographyMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nistCompatibility", 0), ("nist800131a", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptographyMode.setStatus('mandatory')
cryptographyModeDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18), )
if mibBuilder.loadTexts: cryptographyModeDetailsTable.setStatus('mandatory')
cryptographyModeDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18, 1), ).setIndexNames((0, "CME-MIB", "cryptographyModeDetailsIndex"))
if mibBuilder.loadTexts: cryptographyModeDetailsEntry.setStatus('mandatory')
cryptographyModeDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptographyModeDetailsIndex.setStatus('mandatory')
cryptographyModeDetailsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("customization", 0), ("transition", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptographyModeDetailsType.setStatus('mandatory')
cryptographyModeDetailsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptographyModeDetailsDescription.setStatus('mandatory')
cryptographyModeComponentTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 20), )
if mibBuilder.loadTexts: cryptographyModeComponentTable.setStatus('mandatory')
cryptographyModeComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 20, 1), ).setIndexNames((0, "CME-MIB", "cryptographyModeComponentIndex"))
if mibBuilder.loadTexts: cryptographyModeComponentEntry.setStatus('mandatory')
cryptographyModeComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptographyModeComponentIndex.setStatus('mandatory')
cryptographyModeComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptographyModeComponentId.setStatus('mandatory')
cryptographicCipher = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("legacy", 0), ("tls12serveronly", 1), ("tls12serverclient", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptographicCipher.setStatus('mandatory')
cryptographyCipherComponentTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 30), )
if mibBuilder.loadTexts: cryptographyCipherComponentTable.setStatus('mandatory')
cryptographyCipherComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 30, 1), ).setIndexNames((0, "CME-MIB", "cryptographyCipherComponentIndex"))
if mibBuilder.loadTexts: cryptographyCipherComponentEntry.setStatus('mandatory')
cryptographyCipherComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptographyCipherComponentIndex.setStatus('mandatory')
cryptographyCipherComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 30, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptographyCipherComponentId.setStatus('mandatory')
cipherStrength = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("rsa2048SHA1", 1), ("rsa2048SHA256", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipherStrength.setStatus('mandatory')
spClock = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4))
spClockDateAndTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spClockDateAndTimeSetting.setStatus('mandatory')
spClockTimezoneSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spClockTimezoneSetting.setStatus('mandatory')
spClockTimezoneTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3), )
if mibBuilder.loadTexts: spClockTimezoneTable.setStatus('mandatory')
spClockTimezoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1), ).setIndexNames((0, "CME-MIB", "spClockTimezoneIndex"))
if mibBuilder.loadTexts: spClockTimezoneEntry.setStatus('mandatory')
spClockTimezoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneIndex.setStatus('mandatory')
spClockTimezoneId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneId.setStatus('mandatory')
spClockTimezoneCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneCaption.setStatus('mandatory')
spClockTimezoneDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDescription.setStatus('mandatory')
spClockTimezoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneName.setStatus('mandatory')
spClockTimezoneStandardName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneStandardName.setStatus('mandatory')
spClockTimezoneStandardCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneStandardCaption.setStatus('mandatory')
spClockTimezoneDaylightName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightName.setStatus('mandatory')
spClockTimezoneDaylightCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightCaption.setStatus('mandatory')
spClockTimezoneCmmOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneCmmOffset.setStatus('mandatory')
spClockTimezoneStandardOffsetMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneStandardOffsetMinutes.setStatus('mandatory')
spClockTimezoneStandardDaylightOffsetMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneStandardDaylightOffsetMinutes.setStatus('mandatory')
spClockTimezoneDaylightDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightDay.setStatus('mandatory')
spClockTimezoneDaylightDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -1, -2, -3, -4, -5, -6, -7, 1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("exactDayOfMonth", 0), ("minusSunday", -1), ("minusMonday", -2), ("minusTuesday", -3), ("minusWednesday", -4), ("minusThursday", -5), ("minusFriday", -6), ("minusSaturday", -7), ("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightDayOfWeek.setStatus('mandatory')
spClockTimezoneDaylightMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightMonth.setStatus('mandatory')
spClockTimezoneDaylightStandardDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightStandardDay.setStatus('mandatory')
spClockTimezoneDaylightStandardDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -1, -2, -3, -4, -5, -6, -7, 1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("exactDayOfMonth", 0), ("minusSunday", -1), ("minusMonday", -2), ("minusTuesday", -3), ("minusWednesday", -4), ("minusThursday", -5), ("minusFriday", -6), ("minusSaturday", -7), ("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightStandardDayOfWeek.setStatus('mandatory')
spClockTimezoneDaylightStandardMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightStandardMonth.setStatus('mandatory')
spClockTimezoneDaylightIntervalInMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightIntervalInMinutes.setStatus('mandatory')
spClockTimezoneDaylightStandardInMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightStandardInMinutes.setStatus('mandatory')
spClockTimezoneDaylightStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightStart.setStatus('mandatory')
spClockTimezoneDaylightEnd = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spClockTimezoneDaylightEnd.setStatus('mandatory')
spIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5))
spTxtId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spTxtId.setStatus('mandatory')
networkConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9))
networkInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1))
extEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1))
extEthernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceType.setStatus('mandatory')
extEthernetInterfaceHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceHostName.setStatus('mandatory')
extEthernetInterfaceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPAddress.setStatus('mandatory')
extEthernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("enet10Megabit", 3), ("enet100Megabit", 4), ("autoSpeed", 5), ("enet1Gigabit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceDataRate.setStatus('mandatory')
extEthernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceDuplexSetting.setStatus('mandatory')
extEthernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceLAA.setStatus('mandatory')
extEthernetInterfaceDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dhcpDisabled", 0), ("dhcpEnabled", 1), ("tryDhcpThenTryStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceDhcpEnabled.setStatus('mandatory')
extEthernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceGatewayIPAddress.setStatus('mandatory')
extEthernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceBIA.setStatus('mandatory')
extEthernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceMTU.setStatus('mandatory')
extEthernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceSubnetMask.setStatus('mandatory')
extEthernetInterfaceFloatingIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceFloatingIPAddress.setStatus('mandatory')
dhcpEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16))
dhcpHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpHostName.setStatus('mandatory')
dhcpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpIPAddress.setStatus('mandatory')
dhcpGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGatewayIPAddress.setStatus('mandatory')
dhcpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('mandatory')
dhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDomainName.setStatus('mandatory')
dhcpDHCPServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDHCPServer.setStatus('mandatory')
dhcpPrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPrimaryDNSServer.setStatus('mandatory')
dhcpSecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSecondaryDNSServer.setStatus('mandatory')
dhcpTertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpTertiaryDNSServer.setStatus('mandatory')
standbyExtEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3))
standbyExtEthernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceType.setStatus('mandatory')
standbyExtEthernetInterfaceHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceHostName.setStatus('mandatory')
standbyExtEthernetInterfaceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceIPAddress.setStatus('mandatory')
standbyExtEthernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("enet10Megabit", 3), ("enet100Megabit", 4), ("autoSpeed", 5), ("enet1Gigabit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceDataRate.setStatus('mandatory')
standbyExtEthernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceDuplexSetting.setStatus('mandatory')
standbyExtEthernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceLAA.setStatus('mandatory')
standbyExtEthernetInterfaceDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dhcpDisabled", 0), ("dhcpEnabled", 1), ("tryDhcpThenTryStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceDhcpEnabled.setStatus('mandatory')
standbyExtEthernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceGatewayIPAddress.setStatus('mandatory')
standbyExtEthernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceBIA.setStatus('mandatory')
standbyExtEthernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceMTU.setStatus('mandatory')
standbyExtEthernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyExtEthernetInterfaceSubnetMask.setStatus('mandatory')
advancedFailover = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("ipnoswap", 1), ("ipswap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advancedFailover.setStatus('mandatory')
standbyDhcpEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16))
standbyDhcpHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpHostName.setStatus('mandatory')
standbyDhcpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpIPAddress.setStatus('mandatory')
standbyDhcpGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpGatewayIPAddress.setStatus('mandatory')
standbyDhcpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpSubnetMask.setStatus('mandatory')
standbyDhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpDomainName.setStatus('mandatory')
standbyDhcpDHCPServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpDHCPServer.setStatus('mandatory')
standbyDhcpPrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpPrimaryDNSServer.setStatus('mandatory')
standbyDhcpSecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpSecondaryDNSServer.setStatus('mandatory')
standbyDhcpTertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyDhcpTertiaryDNSServer.setStatus('mandatory')
extEthernetInterfaceIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4))
extEthernetInterfaceIPv6Type = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6Type.setStatus('mandatory')
extEthernetInterfaceIPv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6Enabled.setStatus('mandatory')
extEthernetInterfaceIPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5))
extEthernetInterfaceIPv6LocalAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 1))
extEthernetInterfaceIPv6LinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 1, 1), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6LinkLocalAddress.setStatus('mandatory')
extEthernetInterfaceIPv6StaticIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2))
extEthernetInterfaceIPv6StaticIPConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6StaticIPConfigEnabled.setStatus('mandatory')
extEthernetInterfaceIPv6StaticIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 2), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6StaticIPAddress.setStatus('mandatory')
extEthernetInterfaceIPv6StaticIPAddressPrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6StaticIPAddressPrefixLen.setStatus('mandatory')
extEthernetInterfaceIPv6StaticIPDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 4), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6StaticIPDefaultRoute.setStatus('mandatory')
extEthernetInterfaceIPv6LinkFloatingAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 5), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6LinkFloatingAddress.setStatus('mandatory')
extEthernetInterfaceIPv6AutoIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3))
extEthernetInterfaceIPv6AutoIPConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6AutoIPConfigEnabled.setStatus('mandatory')
extEthernetInterfaceDHCPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2))
extEthernetInterfaceDHCPv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceDHCPv6Enabled.setStatus('mandatory')
extEthernetInterfaceDHCPv6IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceDHCPv6IPAddress.setStatus('mandatory')
extEthernetInterfaceDHCPv6DomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceDHCPv6DomainName.setStatus('mandatory')
extEthernetInterfaceDHCPv6PrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceDHCPv6PrimaryDNSServer.setStatus('mandatory')
extEthernetInterfaceDHCPv6SecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceDHCPv6SecondaryDNSServer.setStatus('mandatory')
extEthernetInterfaceDHCPv6TertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 7), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceDHCPv6TertiaryDNSServer.setStatus('mandatory')
extEthernetInterfaceDHCPv6Server = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 8), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceDHCPv6Server.setStatus('mandatory')
extEthernetInterfaceIPv6StatelessAutoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3))
extEthernetInterfaceIPv6StatelessAutoConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPv6StatelessAutoConfigEnabled.setStatus('mandatory')
extEthernetInterfaceStatelessAutoConfigAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2), )
if mibBuilder.loadTexts: extEthernetInterfaceStatelessAutoConfigAddressesTable.setStatus('mandatory')
extEthernetInterfaceStatelessAutoConfigAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1), ).setIndexNames((0, "CME-MIB", "extEthernetInterfaceStatelessAutoConfigAddressesIndex"))
if mibBuilder.loadTexts: extEthernetInterfaceStatelessAutoConfigAddressesEntry.setStatus('mandatory')
extEthernetInterfaceStatelessAutoConfigAddressesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceStatelessAutoConfigAddressesIndex.setStatus('mandatory')
extEthernetInterfaceStatelessAutoConfigAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceStatelessAutoConfigAddresses.setStatus('mandatory')
extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setStatus('mandatory')
standbyExtEthernetInterfaceIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5))
standbyEthernetInterfaceIPv6LocalAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 1))
standbyEthernetInterfaceIPv6LinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 1, 1), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceIPv6LinkLocalAddress.setStatus('mandatory')
standbyEthernetInterfaceIPv6StaticIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2))
standbyEthernetInterfaceIPv6StaticIPConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceIPv6StaticIPConfigEnabled.setStatus('mandatory')
standbyEthernetInterfaceIPv6StaticIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 2), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyEthernetInterfaceIPv6StaticIPAddress.setStatus('mandatory')
standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen.setStatus('mandatory')
standbyEthernetInterfaceIPv6StaticIPDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 4), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceIPv6StaticIPDefaultRoute.setStatus('mandatory')
standbyEthernetInterfaceDHCPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3))
standbyEthernetInterfaceDHCPv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceDHCPv6Enabled.setStatus('mandatory')
standbyEthernetInterfaceDHCPv6IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceDHCPv6IPAddress.setStatus('mandatory')
standbyEthernetInterfaceDHCPv6DomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceDHCPv6DomainName.setStatus('mandatory')
standbyEthernetInterfaceStatelessAutoConfigAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4), )
if mibBuilder.loadTexts: standbyEthernetInterfaceStatelessAutoConfigAddressesTable.setStatus('mandatory')
standbyEthernetInterfaceStatelessAutoConfigAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1), ).setIndexNames((0, "CME-MIB", "standbyEthernetInterfaceStatelessAutoConfigAddressesIndex"))
if mibBuilder.loadTexts: standbyEthernetInterfaceStatelessAutoConfigAddressesEntry.setStatus('mandatory')
standbyEthernetInterfaceStatelessAutoConfigAddressesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceStatelessAutoConfigAddressesIndex.setStatus('mandatory')
standbyEthernetInterfaceStatelessAutoConfigAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceStatelessAutoConfigAddresses.setStatus('mandatory')
standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setStatus('mandatory')
ddnsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsStatus.setStatus('mandatory')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
standbyHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyHostName.setStatus('mandatory')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
standbyDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standbyDomainName.setStatus('mandatory')
activateNetworkUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPendingUpdates", 0), ("pendingUpdates", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activateNetworkUpdates.setStatus('mandatory')
vlanConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20))
vlanGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanGlobalState.setStatus('mandatory')
vlanCommitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCommitTimeout.setStatus('mandatory')
vlanCommitState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noChangesPending", 1), ("commitNeeded", 2), ("executeCommit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCommitState.setStatus('mandatory')
vlanCMMTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20), )
if mibBuilder.loadTexts: vlanCMMTable.setStatus('mandatory')
vlanCMMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1), ).setIndexNames((0, "CME-MIB", "vlanCMMIndex"))
if mibBuilder.loadTexts: vlanCMMEntry.setStatus('mandatory')
vlanCMMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCMMIndex.setStatus('mandatory')
vlanCMMVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMVlanId.setStatus('mandatory')
vlanCMMName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMName.setStatus('mandatory')
vlanCMMEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 4), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMEntryStatus.setStatus('mandatory')
vlanCMMState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMState.setStatus('mandatory')
vlanCMMSOLAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMSOLAccess.setStatus('mandatory')
vlanCMMTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMTagging.setStatus('mandatory')
vlanCMMIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4Address.setStatus('mandatory')
vlanCMMIPv4Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4Gateway.setStatus('mandatory')
vlanCMMIPv4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4Mask.setStatus('mandatory')
vlanCMMIPv4SubnetRoute1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 51), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4SubnetRoute1.setStatus('mandatory')
vlanCMMIPv4SubnetRouteMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 52), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4SubnetRouteMask1.setStatus('mandatory')
vlanCMMIPv4SubnetRoute2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 53), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4SubnetRoute2.setStatus('mandatory')
vlanCMMIPv4SubnetRouteMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 54), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4SubnetRouteMask2.setStatus('mandatory')
vlanCMMIPv4SubnetRoute3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 55), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4SubnetRoute3.setStatus('mandatory')
vlanCMMIPv4SubnetRouteMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 56), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv4SubnetRouteMask3.setStatus('mandatory')
vlanCMMIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 71), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6Address.setStatus('mandatory')
vlanCMMIPv6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6AddressPrefixLen.setStatus('mandatory')
vlanCMMIPv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 73), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6Gateway.setStatus('mandatory')
vlanCMMIPv6SubnetRoute1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 91), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6SubnetRoute1.setStatus('mandatory')
vlanCMMIPv6SubnetRoutePrefixLen1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6SubnetRoutePrefixLen1.setStatus('mandatory')
vlanCMMIPv6SubnetRoute2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 93), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6SubnetRoute2.setStatus('mandatory')
vlanCMMIPv6SubnetRoutePrefixLen2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6SubnetRoutePrefixLen2.setStatus('mandatory')
vlanCMMIPv6SubnetRoute3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 95), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6SubnetRoute3.setStatus('mandatory')
vlanCMMIPv6SubnetRoutePrefixLen3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanCMMIPv6SubnetRoutePrefixLen3.setStatus('mandatory')
vlanCMMTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCMMTableCacheTimeout.setStatus('mandatory')
tcpProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3))
snmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1))
snmpSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemContact.setStatus('mandatory')
snmpSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemLocation.setStatus('mandatory')
snmpSystemAgentTrapsDisable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("trapsEnabled", 0), ("trapsDisabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemAgentTrapsDisable.setStatus('mandatory')
snmpAgentCommunityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4))
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('mandatory')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1), ).setIndexNames((0, "CME-MIB", "snmpCommunityEntryIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('mandatory')
snmpCommunityEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityEntryIndex.setStatus('mandatory')
snmpCommunityEntryCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityName.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress1.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress2.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress3.setStatus('mandatory')
snmpCommunityEntryCommunityViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read-Traps", 1), ("write-Read-Traps", 2), ("traps-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityViewType.setStatus('mandatory')
snmpv1SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv1SystemAgentEnable.setStatus('mandatory')
snmpv3SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3SystemAgentEnable.setStatus('mandatory')
snmpAgentUserProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9))
snmpUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1), )
if mibBuilder.loadTexts: snmpUserProfileTable.setStatus('mandatory')
snmpUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1), ).setIndexNames((0, "CME-MIB", "snmpUserProfileEntryIndex"))
if mibBuilder.loadTexts: snmpUserProfileEntry.setStatus('mandatory')
snmpUserProfileEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserProfileEntryIndex.setStatus('mandatory')
snmpUserProfileEntryContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryContextName.setStatus('mandatory')
snmpUserProfileEntryAuthProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("md5", 2), ("sha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryAuthProt.setStatus('mandatory')
snmpUserProfileEntryPrivProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("aes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryPrivProt.setStatus('mandatory')
snmpUserProfileEntryPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryPrivPassword.setStatus('mandatory')
snmpUserProfileEntryViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read-Traps", 1), ("read-Write-Traps", 2), ("traps-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryViewType.setStatus('mandatory')
snmpUserProfileEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryIpAddress.setStatus('mandatory')
snmpUserProfileEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserProfileEntryUserId.setStatus('mandatory')
dnsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2))
dnsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dnsDisabled", 0), ("dnsEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnabled.setStatus('mandatory')
dnsServerIPAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress1.setStatus('mandatory')
dnsServerIPAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress2.setStatus('mandatory')
dnsServerIPAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress3.setStatus('mandatory')
dnsServerIPv6Address1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 12), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address1.setStatus('mandatory')
dnsServerIPv6Address2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 13), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address2.setStatus('mandatory')
dnsServerIPv6Address3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 14), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address3.setStatus('mandatory')
dnsPriority = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv6", 1), ("ipv4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPriority.setStatus('mandatory')
smtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3))
smtpServerNameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerNameOrIPAddress.setStatus('mandatory')
attachmentsToEmailAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAttachments", 0), ("attachServiceInformation", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: attachmentsToEmailAlerts.setStatus('mandatory')
smtpEmailDomain = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpEmailDomain.setStatus('mandatory')
tcpApplicationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4))
telnetInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetInactivityTimeout.setStatus('mandatory')
commandModeInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandModeInactivityTimeout.setStatus('mandatory')
secureCommandModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secureCommandModeEnable.setStatus('mandatory')
commandModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandModeEnable.setStatus('mandatory')
slpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("multicast", 0), ("broadcast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slpAddrType.setStatus('mandatory')
slpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slpEnable.setStatus('mandatory')
telnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetEnable.setStatus('mandatory')
sshEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshEnable.setStatus('mandatory')
sslServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslServerEnable.setStatus('mandatory')
sslClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslClientEnable.setStatus('mandatory')
ftpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpEnable.setStatus('mandatory')
sftpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpEnable.setStatus('mandatory')
tftpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpEnable.setStatus('mandatory')
ftpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpTimeout.setStatus('mandatory')
cimEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimEnable.setStatus('mandatory')
mmSshServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27))
mmSshServerHostKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1), )
if mibBuilder.loadTexts: mmSshServerHostKeyTable.setStatus('mandatory')
mmSshServerHostKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1), ).setIndexNames((0, "CME-MIB", "mmSshServerHostKeyIndex"))
if mibBuilder.loadTexts: mmSshServerHostKeyEntry.setStatus('mandatory')
mmSshServerHostKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshServerHostKeyIndex.setStatus('mandatory')
mmSshServerHostKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sshDss", 1), ("sshRsa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshServerHostKeyType.setStatus('mandatory')
mmSshServerHostKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bits512", 1), ("bits768", 2), ("bits1024", 3), ("bits2048", 4), ("bits4096", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshServerHostKeySize.setStatus('mandatory')
mmSshServerHostKeyFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshServerHostKeyFingerprint.setStatus('mandatory')
mmSshServerHostKeyGenerate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmSshServerHostKeyGenerate.setStatus('mandatory')
mmSshServerHostKeyGenerateProgress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmSshServerHostKeyGenerateProgress.setStatus('mandatory')
tcpPortAssignmentCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5))
tcpPortsRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortsRestoreDefault.setStatus('mandatory')
httpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPortAssignment.setStatus('mandatory')
httpsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPortAssignment.setStatus('mandatory')
telnetPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortAssignment.setStatus('mandatory')
sshPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortAssignment.setStatus('mandatory')
snmpAgentPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentPortAssignment.setStatus('mandatory')
snmpTrapsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsPortAssignment.setStatus('mandatory')
commandModePortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandModePortAssignment.setStatus('mandatory')
secureCommandModePortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secureCommandModePortAssignment.setStatus('mandatory')
ftpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPortAssignment.setStatus('mandatory')
ftpDataPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpDataPortAssignment.setStatus('mandatory')
tftpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpPortAssignment.setStatus('mandatory')
slpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slpPortAssignment.setStatus('mandatory')
cimPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimPortAssignment.setStatus('mandatory')
ldapClientCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6))
ldapServer1NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer1NameOrIPAddress.setStatus('mandatory')
ldapServer1PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer1PortNumber.setStatus('mandatory')
ldapServer2NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer2NameOrIPAddress.setStatus('mandatory')
ldapServer2PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer2PortNumber.setStatus('mandatory')
ldapServer3NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer3NameOrIPAddress.setStatus('mandatory')
ldapServer3PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer3PortNumber.setStatus('mandatory')
ldapRootDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapRootDN.setStatus('mandatory')
ldapGroupFilter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapGroupFilter.setStatus('mandatory')
ldapBindingMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clientAuthentication", 1), ("userPrincipalName", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapBindingMethod.setStatus('mandatory')
ldapClientAuthenticationDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuthenticationDN.setStatus('mandatory')
ldapClientAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuthenticationPassword.setStatus('mandatory')
ldapUIDsearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUIDsearchAttribute.setStatus('mandatory')
ldapGroupSearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapGroupSearchAttribute.setStatus('mandatory')
ldapLoginPermissionAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapLoginPermissionAttribute.setStatus('mandatory')
ldapUseDNSOrPreConfiguredServers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usePreConfiguredLDAPServers", 0), ("useDNSToFindLDAPServers", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUseDNSOrPreConfiguredServers.setStatus('mandatory')
ldapRBSModelCfg = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oldPermissionString", 0), ("newRBSModel", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapRBSModelCfg.setStatus('mandatory')
ldapTargetName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapTargetName.setStatus('mandatory')
ldapAuthCfg = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("authenticationAndAuthorization", 0), ("authenticationOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapAuthCfg.setStatus('mandatory')
ldapForestName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapForestName.setStatus('mandatory')
ldapDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapDomainName.setStatus('mandatory')
ldapServer4NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer4NameOrIPAddress.setStatus('mandatory')
ldapServer4PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer4PortNumber.setStatus('mandatory')
uplinkCheckConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7))
uplinkCheckEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uplinkCheckDisabled", 0), ("uplinkCheckEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uplinkCheckEnabled.setStatus('mandatory')
uplinkCheckDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uplinkCheckDelay.setStatus('mandatory')
logicalUplinkDestination = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalUplinkDestination.setStatus('mandatory')
logicalUplinkCheckEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uplinkCheckDisabled", 0), ("uplinkCheckEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalUplinkCheckEnabled.setStatus('mandatory')
logicalUplinkCheckDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalUplinkCheckDelay.setStatus('mandatory')
physicalUplinkCheckDelayInSecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalUplinkCheckDelayInSecs.setStatus('mandatory')
logicalUplinkCheckDelayInSecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalUplinkCheckDelayInSecs.setStatus('mandatory')
logicalUplinkIPv6Destination = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 8), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalUplinkIPv6Destination.setStatus('mandatory')
logicalUplinkFailoverPolicy = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("either", 1), ("both", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalUplinkFailoverPolicy.setStatus('mandatory')
ntpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8))
ntpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpEnable.setStatus('mandatory')
ntpIpAddressHostname = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname.setStatus('mandatory')
ntpUpdateFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpUpdateFrequency.setStatus('mandatory')
ntpLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdate.setStatus('mandatory')
ntpUpdateClock = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpUpdateClock.setStatus('mandatory')
ntpAuthEntry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthEntry.setStatus('mandatory')
ntpAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthEnable.setStatus('mandatory')
syslogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9))
syslogSevFilterLevel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("error", 0), ("warning", 1), ("information", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSevFilterLevel.setStatus('mandatory')
syslogCollectorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2))
syslogCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1), )
if mibBuilder.loadTexts: syslogCollectorTable.setStatus('mandatory')
syslogCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1), ).setIndexNames((0, "CME-MIB", "syslogCollectorIndex"))
if mibBuilder.loadTexts: syslogCollectorEntry.setStatus('mandatory')
syslogCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogCollectorIndex.setStatus('mandatory')
syslogCollectorHostnameOrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogCollectorHostnameOrIpAddress.setStatus('mandatory')
syslogCollectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogCollectorPort.setStatus('mandatory')
syslogCollectorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogCollectorEnable.setStatus('mandatory')
syslogTestPacket = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTestPacket.setStatus('mandatory')
solConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10))
solGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1))
solEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("solDisabled", 0), ("solEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solEnable.setStatus('mandatory')
solAccumulateTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solAccumulateTimeout.setStatus('mandatory')
solCharSendThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solCharSendThreshold.setStatus('mandatory')
solRetry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solRetry.setStatus('mandatory')
solRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solRetryInterval.setStatus('mandatory')
solExitToCliKeySeq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solExitToCliKeySeq.setStatus('mandatory')
solResetBladeKeySeq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solResetBladeKeySeq.setStatus('mandatory')
solBladeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2))
solBladeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1), )
if mibBuilder.loadTexts: solBladeTable.setStatus('mandatory')
solBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1), ).setIndexNames((0, "CME-MIB", "solBladeIndex"))
if mibBuilder.loadTexts: solBladeEntry.setStatus('mandatory')
solBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeIndex.setStatus('mandatory')
solBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeName.setStatus('mandatory')
solBladeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("solBladeDisabled", 0), ("solBladeEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solBladeEnable.setStatus('mandatory')
solBladeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeIpAddr.setStatus('deprecated')
solBladeSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("solSessionNotReady", 0), ("solSessionReady", 1), ("solSessionActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeSessionStatus.setStatus('mandatory')
solBladeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSupport", 0), ("support", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeCapability.setStatus('mandatory')
solBladeIpAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 7), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeIpAddr6.setStatus('mandatory')
solBladeRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeRetryInterval.setStatus('mandatory')
solBladeRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeRetryCount.setStatus('mandatory')
solBladeBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeBytesSent.setStatus('mandatory')
solBladeBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeBytesReceived.setStatus('mandatory')
solBladeDestinationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeDestinationMAC.setStatus('mandatory')
solBladeConsoleUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeConsoleUserId.setStatus('mandatory')
solBladeConsoleLoginFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeConsoleLoginFrom.setStatus('mandatory')
solBladeConsoleLoginStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeConsoleLoginStart.setStatus('mandatory')
solBladeConsoleLoginEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeConsoleLoginEnd.setStatus('mandatory')
chassisInternalNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11))
cinsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cinsSupported.setStatus('mandatory')
cinGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cinDisabled", 0), ("cinEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cinGlobalEnable.setStatus('mandatory')
cinTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3), )
if mibBuilder.loadTexts: cinTable.setStatus('mandatory')
cinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1), ).setIndexNames((0, "CME-MIB", "cinIndex"))
if mibBuilder.loadTexts: cinEntry.setStatus('mandatory')
cinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cinIndex.setStatus('mandatory')
cinDefExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cinDefExists.setStatus('mandatory')
cinDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cinDelete.setStatus('mandatory')
cinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cinEnable.setStatus('mandatory')
cinId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cinId.setStatus('mandatory')
cinIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cinIpAddress.setStatus('mandatory')
cinIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 7), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cinIpv6Address.setStatus('mandatory')
cinStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4))
cinStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1), )
if mibBuilder.loadTexts: cinStatusTable.setStatus('mandatory')
cinStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1), ).setIndexNames((0, "CME-MIB", "cinStatusIndex"))
if mibBuilder.loadTexts: cinStatusEntry.setStatus('mandatory')
cinStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cinStatusIndex.setStatus('mandatory')
cinStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cinStatusString.setStatus('mandatory')
restartSPImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartSPImmediately.setStatus('mandatory')
restartStandbyMM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartStandbyMM.setStatus('mandatory')
switchOverRedundantMM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchOverRedundantMM.setStatus('mandatory')
resetSPConfigAndRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetSPConfigAndRestart.setStatus('mandatory')
resetSPConfigAndRestartSaveLogs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetSPConfigAndRestartSaveLogs.setStatus('mandatory')
processorBlade = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1))
bladePolicyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4))
bladePolicyControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1), )
if mibBuilder.loadTexts: bladePolicyControlTable.setStatus('mandatory')
bladePolicyControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1), ).setIndexNames((0, "CME-MIB", "policyControlIndex"))
if mibBuilder.loadTexts: bladePolicyControlEntry.setStatus('mandatory')
policyControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyControlIndex.setStatus('mandatory')
policyControlBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyControlBladeId.setStatus('mandatory')
policyControlBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyControlBladeExists.setStatus('mandatory')
policyControlBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyControlBladePowerState.setStatus('mandatory')
policyControlBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("critical", 3), ("kernelMode", 4), ("discovering", 5), ("commError", 6), ("noPower", 7), ("flashing", 8), ("initFailure", 9), ("insufficientPower", 10), ("powerDenied", 11), ("maintMode", 12), ("firehoseDump", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyControlBladeHealthState.setStatus('mandatory')
policyControlBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyControlBladeName.setStatus('mandatory')
policyLocalPowerControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyLocalPowerControlEnable.setStatus('mandatory')
policyWakeOnLanControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyWakeOnLanControlEnable.setStatus('mandatory')
bladePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2))
bladePolicyLocalPowerControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePolicyLocalPowerControlEnable.setStatus('mandatory')
bladePolicyWakeOnLanControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePolicyWakeOnLanControlEnable.setStatus('mandatory')
bladeMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5))
bladeSystemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1), )
if mibBuilder.loadTexts: bladeSystemStatusTable.setStatus('mandatory')
bladeSystemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1), ).setIndexNames((0, "CME-MIB", "bladeStatusIndex"))
if mibBuilder.loadTexts: bladeSystemStatusEntry.setStatus('mandatory')
bladeStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeStatusIndex.setStatus('mandatory')
bladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeId.setStatus('mandatory')
bladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExists.setStatus('mandatory')
bladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerState.setStatus('mandatory')
bladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("critical", 3), ("kernelMode", 4), ("discovering", 5), ("commError", 6), ("noPower", 7), ("flashing", 8), ("initFailure", 9), ("insufficientPower", 10), ("powerDenied", 11), ("maintMode", 12), ("firehoseDump", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthState.setStatus('mandatory')
bladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeName.setStatus('mandatory')
bladeRemotePowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeRemotePowerEnable.setStatus('mandatory')
bladeConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ethernet", 1), ("fiber", 2), ("serial", 3), ("opticalPassThrough", 4), ("infiniband", 5), ("iSCSI", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeConnectionType.setStatus('mandatory')
bladeRemoteWakeOnLanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeRemoteWakeOnLanEnable.setStatus('mandatory')
bladeServerExpansion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeServerExpansion.setStatus('mandatory')
bladeWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeWidth.setStatus('mandatory')
bladeServerExpansion2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeServerExpansion2.setStatus('mandatory')
bladeConnectionType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ethernet", 1), ("fiber", 2), ("serial", 3), ("opticalPassThrough", 4), ("infiniband", 5), ("iSCSI", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeConnectionType2.setStatus('mandatory')
bladeConnectionType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ethernet", 1), ("fiber", 2), ("serial", 3), ("opticalPassThrough", 4), ("infiniband", 5), ("iSCSI", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeConnectionType3.setStatus('mandatory')
bladeConnectionType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ethernet", 1), ("fiber", 2), ("serial", 3), ("opticalPassThrough", 4), ("infiniband", 5), ("iSCSI", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeConnectionType4.setStatus('mandatory')
bladeConnectionType5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ethernet", 1), ("fiber", 2), ("serial", 3), ("opticalPassThrough", 4), ("infiniband", 5), ("iSCSI", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeConnectionType5.setStatus('mandatory')
bladeHighSpeedConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("ethernet", 1), ("fiber", 2), ("serial", 3), ("opticalPassThrough", 4), ("infiniband", 5), ("iSCSI", 6), ("infinibandPassThrough", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHighSpeedConnectionType.setStatus('mandatory')
bladeIOCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIOCompatibility.setStatus('mandatory')
bladeInventoryReady = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notReady", 0), ("ready", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeInventoryReady.setStatus('mandatory')
bladeHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2), )
if mibBuilder.loadTexts: bladeHealthSummaryTable.setStatus('mandatory')
bladeHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1), ).setIndexNames((0, "CME-MIB", "bladeHealthSummaryIndex"))
if mibBuilder.loadTexts: bladeHealthSummaryEntry.setStatus('mandatory')
bladeHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummaryIndex.setStatus('mandatory')
bladeHealthSummaryBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummaryBladeId.setStatus('mandatory')
bladeHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummarySeverity.setStatus('mandatory')
bladeHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummaryDescription.setStatus('mandatory')
bladeHealthSummaryDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummaryDateTime.setStatus('mandatory')
bladeHealthSummaryEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummaryEventID.setStatus('mandatory')
bladeTemperaturesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3), )
if mibBuilder.loadTexts: bladeTemperaturesTable.setStatus('mandatory')
bladeTemperaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1), ).setIndexNames((0, "CME-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: bladeTemperaturesEntry.setStatus('mandatory')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureIndex.setStatus('mandatory')
temperatureBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureBladeId.setStatus('mandatory')
temperatureBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureBladeExists.setStatus('mandatory')
temperatureBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureBladePowerState.setStatus('mandatory')
temperatureBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureBladeName.setStatus('mandatory')
temperatureCPU1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU1.setStatus('mandatory')
temperatureCPU2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU2.setStatus('mandatory')
temperatureCPU3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU3.setStatus('mandatory')
temperatureCPU4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU4.setStatus('mandatory')
temperatureDASD1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDASD1.setStatus('mandatory')
bladeSensorTempCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensorTempCapability.setStatus('mandatory')
bladeSensor1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor1Temp.setStatus('mandatory')
bladeSensor2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor2Temp.setStatus('mandatory')
bladeSensor3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor3Temp.setStatus('mandatory')
bladeSensor4Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor4Temp.setStatus('mandatory')
bladeSensor5Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor5Temp.setStatus('mandatory')
bladeSensor6Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor6Temp.setStatus('mandatory')
bladeSensor7Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor7Temp.setStatus('mandatory')
bladeSensor8Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor8Temp.setStatus('mandatory')
bladeSensor9Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor9Temp.setStatus('mandatory')
bladeTemperatureThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4), )
if mibBuilder.loadTexts: bladeTemperatureThresholdsTable.setStatus('mandatory')
bladeTemperatureThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1), ).setIndexNames((0, "CME-MIB", "temperatureThresholdIndex"))
if mibBuilder.loadTexts: bladeTemperatureThresholdsEntry.setStatus('mandatory')
temperatureThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdIndex.setStatus('mandatory')
temperatureThresholdBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdBladeId.setStatus('mandatory')
temperatureThresholdBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdBladeExists.setStatus('mandatory')
temperatureThresholdBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdBladePowerState.setStatus('mandatory')
temperatureThresholdBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdBladeName.setStatus('mandatory')
temperatureCPU1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU1HardShutdown.setStatus('mandatory')
temperatureCPU1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU1Warning.setStatus('mandatory')
temperatureCPU1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU1WarningReset.setStatus('mandatory')
temperatureCPU2HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU2HardShutdown.setStatus('mandatory')
temperatureCPU2Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU2Warning.setStatus('mandatory')
temperatureCPU2WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU2WarningReset.setStatus('mandatory')
temperatureCPU3HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU3HardShutdown.setStatus('mandatory')
temperatureCPU3Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU3Warning.setStatus('mandatory')
temperatureCPU3WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU3WarningReset.setStatus('mandatory')
temperatureCPU4HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU4HardShutdown.setStatus('mandatory')
temperatureCPU4Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU4Warning.setStatus('mandatory')
temperatureCPU4WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU4WarningReset.setStatus('mandatory')
temperatureDASD1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDASD1HardShutdown.setStatus('mandatory')
temperatureDASD1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDASD1Warning.setStatus('mandatory')
temperatureDASD1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDASD1WarningReset.setStatus('mandatory')
bladeTempThresholdSensorCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeTempThresholdSensorCapability.setStatus('mandatory')
temperatureSensor1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor1HardShutdown.setStatus('mandatory')
temperatureSensor1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor1Warning.setStatus('mandatory')
temperatureSensor1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor1WarningReset.setStatus('mandatory')
temperatureSensor2HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor2HardShutdown.setStatus('mandatory')
temperatureSensor2Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor2Warning.setStatus('mandatory')
temperatureSensor2WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor2WarningReset.setStatus('mandatory')
temperatureSensor3HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor3HardShutdown.setStatus('mandatory')
temperatureSensor3Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor3Warning.setStatus('mandatory')
temperatureSensor3WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor3WarningReset.setStatus('mandatory')
temperatureSensor4HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor4HardShutdown.setStatus('mandatory')
temperatureSensor4Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor4Warning.setStatus('mandatory')
temperatureSensor4WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor4WarningReset.setStatus('mandatory')
temperatureSensor5HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor5HardShutdown.setStatus('mandatory')
temperatureSensor5Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor5Warning.setStatus('mandatory')
temperatureSensor5WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor5WarningReset.setStatus('mandatory')
temperatureSensor6HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor6HardShutdown.setStatus('mandatory')
temperatureSensor6Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor6Warning.setStatus('mandatory')
temperatureSensor6WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor6WarningReset.setStatus('mandatory')
temperatureSensor7HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor7HardShutdown.setStatus('mandatory')
temperatureSensor7Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor7Warning.setStatus('mandatory')
temperatureSensor7WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor7WarningReset.setStatus('mandatory')
temperatureSensor8HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor8HardShutdown.setStatus('mandatory')
temperatureSensor8Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor8Warning.setStatus('mandatory')
temperatureSensor8WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor8WarningReset.setStatus('mandatory')
temperatureSensor9HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor9HardShutdown.setStatus('mandatory')
temperatureSensor9Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor9Warning.setStatus('mandatory')
temperatureSensor9WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor9WarningReset.setStatus('mandatory')
bladeVoltagesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5), )
if mibBuilder.loadTexts: bladeVoltagesTable.setStatus('mandatory')
bladeVoltagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1), ).setIndexNames((0, "CME-MIB", "voltageIndex"))
if mibBuilder.loadTexts: bladeVoltagesEntry.setStatus('mandatory')
voltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageIndex.setStatus('mandatory')
voltageBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageBladeId.setStatus('mandatory')
voltageBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageBladeExists.setStatus('mandatory')
voltageBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageBladePowerState.setStatus('mandatory')
voltageBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageBladeName.setStatus('mandatory')
bladePlus5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus5Volt.setStatus('mandatory')
bladePlus3pt3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus3pt3Volt.setStatus('mandatory')
bladePlus12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus12Volt.setStatus('mandatory')
bladePlus2pt5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus2pt5Volt.setStatus('mandatory')
bladePlus1pt5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt5Volt.setStatus('mandatory')
bladePlus1pt25Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt25Volt.setStatus('mandatory')
bladeVRM1Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeVRM1Volt.setStatus('mandatory')
bladeSensorVoltCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensorVoltCapability.setStatus('mandatory')
bladeSensor1Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor1Volt.setStatus('mandatory')
bladeSensor2Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor2Volt.setStatus('mandatory')
bladeSensor3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor3Volt.setStatus('mandatory')
bladeSensor4Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor4Volt.setStatus('mandatory')
bladeSensor5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor5Volt.setStatus('mandatory')
bladeSensor6Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor6Volt.setStatus('mandatory')
bladeSensor7Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor7Volt.setStatus('mandatory')
bladeSensor8Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor8Volt.setStatus('mandatory')
bladeSensor9Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor9Volt.setStatus('mandatory')
bladeSensor10Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor10Volt.setStatus('mandatory')
bladeSensor11Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor11Volt.setStatus('mandatory')
bladeSensor12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor12Volt.setStatus('mandatory')
bladeSensor13Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor13Volt.setStatus('mandatory')
bladeSensor14Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor14Volt.setStatus('mandatory')
bladeSensor15Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor15Volt.setStatus('mandatory')
bladeSensor16Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor16Volt.setStatus('mandatory')
bladeSensor17Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor17Volt.setStatus('mandatory')
bladeSensor18Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor18Volt.setStatus('mandatory')
bladeSensor19Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor19Volt.setStatus('mandatory')
bladeSensor20Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor20Volt.setStatus('mandatory')
bladeSensor21Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor21Volt.setStatus('mandatory')
bladeSensor22Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor22Volt.setStatus('mandatory')
bladeSensor23Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor23Volt.setStatus('mandatory')
bladeSensor24Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor24Volt.setStatus('mandatory')
bladeSensor25Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor25Volt.setStatus('mandatory')
bladeSensor26Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor26Volt.setStatus('mandatory')
bladeSensor27Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor27Volt.setStatus('mandatory')
bladeSensor28Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor28Volt.setStatus('mandatory')
bladeSensor29Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor29Volt.setStatus('mandatory')
bladeSensor30Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor30Volt.setStatus('mandatory')
bladeVoltageThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6), )
if mibBuilder.loadTexts: bladeVoltageThresholdsTable.setStatus('mandatory')
bladeVoltageThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1), ).setIndexNames((0, "CME-MIB", "voltageThresholdIndex"))
if mibBuilder.loadTexts: bladeVoltageThresholdsEntry.setStatus('mandatory')
voltageThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdIndex.setStatus('mandatory')
voltageThresholdBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdBladeId.setStatus('mandatory')
voltageThresholdBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdBladeExists.setStatus('mandatory')
voltageThresholdBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdBladePowerState.setStatus('mandatory')
voltageThresholdBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageThresholdBladeName.setStatus('mandatory')
bladePlus5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus5VoltHighWarning.setStatus('mandatory')
bladePlus5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus5VoltLowWarning.setStatus('mandatory')
bladePlus3pt3VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus3pt3VoltHighWarning.setStatus('mandatory')
bladePlus3pt3VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus3pt3VoltLowWarning.setStatus('mandatory')
bladePlus12VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus12VoltHighWarning.setStatus('mandatory')
bladePlus12VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus12VoltLowWarning.setStatus('mandatory')
bladePlus2pt5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus2pt5VoltHighWarning.setStatus('mandatory')
bladePlus2pt5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus2pt5VoltLowWarning.setStatus('mandatory')
bladePlus1pt5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt5VoltHighWarning.setStatus('mandatory')
bladePlus1pt5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt5VoltLowWarning.setStatus('mandatory')
bladePlus1pt25VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt25VoltHighWarning.setStatus('mandatory')
bladePlus1pt25VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt25VoltLowWarning.setStatus('mandatory')
bladeVoltThresholdSensorCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeVoltThresholdSensorCapability.setStatus('mandatory')
bladeSensor1VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor1VoltHighWarning.setStatus('mandatory')
bladeSensor1VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor1VoltLowWarning.setStatus('mandatory')
bladeSensor2VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor2VoltHighWarning.setStatus('mandatory')
bladeSensor2VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor2VoltLowWarning.setStatus('mandatory')
bladeSensor3VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor3VoltHighWarning.setStatus('mandatory')
bladeSensor3VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor3VoltLowWarning.setStatus('mandatory')
bladeSensor4VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor4VoltHighWarning.setStatus('mandatory')
bladeSensor4VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor4VoltLowWarning.setStatus('mandatory')
bladeSensor5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor5VoltHighWarning.setStatus('mandatory')
bladeSensor5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor5VoltLowWarning.setStatus('mandatory')
bladeSensor6VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor6VoltHighWarning.setStatus('mandatory')
bladeSensor6VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor6VoltLowWarning.setStatus('mandatory')
bladeSensor7VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor7VoltHighWarning.setStatus('mandatory')
bladeSensor7VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor7VoltLowWarning.setStatus('mandatory')
bladeSensor8VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor8VoltHighWarning.setStatus('mandatory')
bladeSensor8VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor8VoltLowWarning.setStatus('mandatory')
bladeSensor9VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor9VoltHighWarning.setStatus('mandatory')
bladeSensor9VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor9VoltLowWarning.setStatus('mandatory')
bladeSensor10VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor10VoltHighWarning.setStatus('mandatory')
bladeSensor10VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor10VoltLowWarning.setStatus('mandatory')
bladeSensor11VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor11VoltHighWarning.setStatus('mandatory')
bladeSensor11VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor11VoltLowWarning.setStatus('mandatory')
bladeSensor12VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor12VoltHighWarning.setStatus('mandatory')
bladeSensor12VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor12VoltLowWarning.setStatus('mandatory')
bladeSensor13VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor13VoltHighWarning.setStatus('mandatory')
bladeSensor13VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor13VoltLowWarning.setStatus('mandatory')
bladeSensor14VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor14VoltHighWarning.setStatus('mandatory')
bladeSensor14VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 50), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor14VoltLowWarning.setStatus('mandatory')
bladeSensor15VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor15VoltHighWarning.setStatus('mandatory')
bladeSensor15VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor15VoltLowWarning.setStatus('mandatory')
bladeSensor16VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 53), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor16VoltHighWarning.setStatus('mandatory')
bladeSensor16VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor16VoltLowWarning.setStatus('mandatory')
bladeSensor17VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 55), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor17VoltHighWarning.setStatus('mandatory')
bladeSensor17VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor17VoltLowWarning.setStatus('mandatory')
bladeSensor18VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 57), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor18VoltHighWarning.setStatus('mandatory')
bladeSensor18VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 58), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor18VoltLowWarning.setStatus('mandatory')
bladeSensor19VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 59), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor19VoltHighWarning.setStatus('mandatory')
bladeSensor19VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor19VoltLowWarning.setStatus('mandatory')
bladeSensor20VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor20VoltHighWarning.setStatus('mandatory')
bladeSensor20VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor20VoltLowWarning.setStatus('mandatory')
bladeSensor21VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 63), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor21VoltHighWarning.setStatus('mandatory')
bladeSensor21VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor21VoltLowWarning.setStatus('mandatory')
bladeSensor22VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor22VoltHighWarning.setStatus('mandatory')
bladeSensor22VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor22VoltLowWarning.setStatus('mandatory')
bladeSensor23VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor23VoltHighWarning.setStatus('mandatory')
bladeSensor23VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 68), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor23VoltLowWarning.setStatus('mandatory')
bladeSensor24VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 69), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor24VoltHighWarning.setStatus('mandatory')
bladeSensor24VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 70), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor24VoltLowWarning.setStatus('mandatory')
bladeSensor25VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 71), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor25VoltHighWarning.setStatus('mandatory')
bladeSensor25VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 72), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor25VoltLowWarning.setStatus('mandatory')
bladeSensor26VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor26VoltHighWarning.setStatus('mandatory')
bladeSensor26VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 74), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor26VoltLowWarning.setStatus('mandatory')
bladeSensor27VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 75), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor27VoltHighWarning.setStatus('mandatory')
bladeSensor27VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor27VoltLowWarning.setStatus('mandatory')
bladeSensor28VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 77), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor28VoltHighWarning.setStatus('mandatory')
bladeSensor28VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 78), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor28VoltLowWarning.setStatus('mandatory')
bladeSensor29VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 79), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor29VoltHighWarning.setStatus('mandatory')
bladeSensor29VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 80), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor29VoltLowWarning.setStatus('mandatory')
bladeSensor30VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor30VoltHighWarning.setStatus('mandatory')
bladeSensor30VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 82), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor30VoltLowWarning.setStatus('mandatory')
bladePowerRestart = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6))
bladePowerRestartTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1), )
if mibBuilder.loadTexts: bladePowerRestartTable.setStatus('mandatory')
bladePowerRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1), ).setIndexNames((0, "CME-MIB", "powerRestartIndex"))
if mibBuilder.loadTexts: bladePowerRestartEntry.setStatus('mandatory')
powerRestartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartIndex.setStatus('mandatory')
powerRestartBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladeId.setStatus('mandatory')
powerRestartBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladeExists.setStatus('mandatory')
powerRestartBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladePowerState.setStatus('mandatory')
powerRestartBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("critical", 3), ("kernelMode", 4), ("discovering", 5), ("commError", 6), ("noPower", 7), ("flashing", 8), ("initFailure", 9), ("insufficientPower", 10), ("powerDenied", 11), ("maintMode", 12), ("firehoseDump", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladeHealthState.setStatus('mandatory')
powerRestartBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladeName.setStatus('mandatory')
powerOnOffBlade = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("softoff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerOnOffBlade.setStatus('mandatory')
restartBlade = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBlade.setStatus('mandatory')
restartBladeSMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeSMP.setStatus('mandatory')
restartBladeNMI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeNMI.setStatus('mandatory')
restartBladeClearNVRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeClearNVRAM.setStatus('mandatory')
restartBladeInvokeDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeInvokeDiags.setStatus('mandatory')
restartBladeInvokeDiagsFromDefaultBootList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeInvokeDiagsFromDefaultBootList.setStatus('mandatory')
restartBladeToSMSBootMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeToSMSBootMenu.setStatus('deprecated')
bladePowerEnableSMSBootMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePowerEnableSMSBootMenu.setStatus('mandatory')
bladeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7))
bladeConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1), )
if mibBuilder.loadTexts: bladeConfigurationTable.setStatus('mandatory')
bladeConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1), ).setIndexNames((0, "CME-MIB", "configurationIndex"))
if mibBuilder.loadTexts: bladeConfigurationEntry.setStatus('mandatory')
configurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationIndex.setStatus('mandatory')
configurationBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBladeId.setStatus('mandatory')
configurationBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBladeExists.setStatus('mandatory')
configurationBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBladePowerState.setStatus('mandatory')
configurationBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationBladeName.setStatus('mandatory')
configurationBladeActiveBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("temporary", 1), ("permanent", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBladeActiveBootMode.setStatus('mandatory')
configurationBladePendingBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("temporary", 1), ("permanent", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationBladePendingBootMode.setStatus('mandatory')
configurationBladeAutoPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("restore", 1), ("auto", 2), ("manual", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationBladeAutoPowerOn.setStatus('mandatory')
configurationBladePowerOnRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationBladePowerOnRestartDelay.setStatus('mandatory')
bladePowerManagementPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2))
powerManagementPolicy = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 16, 17))).clone(namedValues=NamedValues(("power-module-redundancy", 0), ("power-module-redundancy-throttle", 1), ("basic", 2), ("power-source-redundancy", 16), ("power-source-redundancy-throttle", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerManagementPolicy.setStatus('mandatory')
acousticMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("acoustic-quiet-level1", 1), ("acoustic-quiet-level2", 2), ("acoustic-quiet-level3", 3), ("acoustic-quiet-level4", 4), ("acoustic-quiet-level5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acousticMode.setStatus('mandatory')
bladeBootCountPowerOnTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10))
bladeBootCountPowerOnTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1), )
if mibBuilder.loadTexts: bladeBootCountPowerOnTimeTable.setStatus('mandatory')
bladeBootCountPowerOnTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1), ).setIndexNames((0, "CME-MIB", "bootCountPowerOnTimeBladeIndex"))
if mibBuilder.loadTexts: bladeBootCountPowerOnTimeEntry.setStatus('mandatory')
bootCountPowerOnTimeBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootCountPowerOnTimeBladeIndex.setStatus('mandatory')
bootCountPowerOnTimeBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootCountPowerOnTimeBladeId.setStatus('mandatory')
bootCountPowerOnTimeBoots = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootCountPowerOnTimeBoots.setStatus('mandatory')
bootCountPowerOnTimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootCountPowerOnTimeSecs.setStatus('mandatory')
bladeVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeVlanId.setStatus('mandatory')
bladeBayDataTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13), )
if mibBuilder.loadTexts: bladeBayDataTable.setStatus('mandatory')
bladeBayDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1), ).setIndexNames((0, "CME-MIB", "bayDataIndex"))
if mibBuilder.loadTexts: bladeBayDataEntry.setStatus('mandatory')
bayDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bayDataIndex.setStatus('mandatory')
bayDataBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bayDataBladeId.setStatus('mandatory')
bayDataBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bayDataBladeExists.setStatus('mandatory')
bayDataBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bayDataBladePowerState.setStatus('mandatory')
bayDataBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bayDataBladeName.setStatus('mandatory')
bayData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bayData.setStatus('mandatory')
bayDataBladeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("supported", 0), ("bsmp", 1), ("notPresent", 2), ("discovering", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bayDataBladeStatus.setStatus('mandatory')
bladeNetworkConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12))
bladeIPv4ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5), )
if mibBuilder.loadTexts: bladeIPv4ConfigTable.setStatus('mandatory')
bladeIPv4ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1), ).setIndexNames((0, "CME-MIB", "bladeIPv4ConfigIndex"), (0, "CME-MIB", "bladeIPv4ConfigPortIndex"))
if mibBuilder.loadTexts: bladeIPv4ConfigEntry.setStatus('mandatory')
bladeIPv4ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv4ConfigIndex.setStatus('mandatory')
bladeIPv4ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv4ConfigPortIndex.setStatus('mandatory')
bladeIPv4ConfigPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv4ConfigPortLabel.setStatus('mandatory')
bladeIPv4ConfigPhysicalLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv4ConfigPhysicalLinkStatus.setStatus('mandatory')
bladeIPv4ConfigPhysicalLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("loopback", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv4ConfigPhysicalLinkState.setStatus('mandatory')
bladeIPv4ConfigIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv4ConfigIPAddr.setStatus('mandatory')
bladeIPv4ConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv4ConfigSubnetMask.setStatus('mandatory')
bladeIPv4ConfigGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv4ConfigGatewayAddr.setStatus('mandatory')
bladeIPv4ConfigVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv4ConfigVlanId.setStatus('mandatory')
bladeIPv4ConfigDHCPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("useStatic", 0), ("useDhcp", 1), ("tryDhcpThenTryStatic", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv4ConfigDHCPEnable.setStatus('mandatory')
bladeIPv4ConfigMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv4ConfigMACAddr.setStatus('mandatory')
bladeIPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10))
bladeIPv6ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1), )
if mibBuilder.loadTexts: bladeIPv6ConfigTable.setStatus('mandatory')
bladeIPv6ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1), ).setIndexNames((0, "CME-MIB", "bladeIPv6ConfigIndex"), (0, "CME-MIB", "bladeIPv6ConfigPortIndex"))
if mibBuilder.loadTexts: bladeIPv6ConfigEntry.setStatus('mandatory')
bladeIPv6ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv6ConfigIndex.setStatus('mandatory')
bladeIPv6ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv6ConfigPortIndex.setStatus('mandatory')
bladeIPv6ConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv6ConfigEnabled.setStatus('mandatory')
bladeIPv6ConfigStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv6ConfigStatic.setStatus('mandatory')
bladeDHCPv6ConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeDHCPv6ConfigEnabled.setStatus('mandatory')
bladeIPv6ConfigStatelessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv6ConfigStatelessEnabled.setStatus('mandatory')
bladeIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2), )
if mibBuilder.loadTexts: bladeIPv6AddressTable.setStatus('mandatory')
bladeIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1), ).setIndexNames((0, "CME-MIB", "bladeIPv6AddressIndex"), (0, "CME-MIB", "bladeIPv6AddressPortIndex"), (0, "CME-MIB", "bladeIPv6AddressEntryIndex"))
if mibBuilder.loadTexts: bladeIPv6AddressEntry.setStatus('mandatory')
bladeIPv6AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv6AddressIndex.setStatus('mandatory')
bladeIPv6AddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv6AddressPortIndex.setStatus('mandatory')
bladeIPv6AddressEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv6AddressEntryIndex.setStatus('mandatory')
bladeIPv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active-static", 1), ("dhcp6", 2), ("link-local", 3), ("autconfig", 4), ("current", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeIPv6AddressType.setStatus('mandatory')
bladeIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 5), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv6Address.setStatus('mandatory')
bladeIPv6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv6AddressPrefixLen.setStatus('mandatory')
bladeIPv6AddressDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 7), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPv6AddressDefaultRoute.setStatus('mandatory')
bladeSPEthOverUSBInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14))
spEthOverUSBInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1), )
if mibBuilder.loadTexts: spEthOverUSBInterfaceTable.setStatus('mandatory')
spEthOverUSBInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1), ).setIndexNames((0, "CME-MIB", "spEthOverUSBInterfaceIndex"))
if mibBuilder.loadTexts: spEthOverUSBInterfaceEntry.setStatus('mandatory')
spEthOverUSBInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEthOverUSBInterfaceIndex.setStatus('mandatory')
spEthOverUSBInterfaceBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEthOverUSBInterfaceBladeId.setStatus('mandatory')
spEthOverUSBInterfaceBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEthOverUSBInterfaceBladeExists.setStatus('mandatory')
spEthOverUSBInterfaceBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEthOverUSBInterfaceBladeName.setStatus('mandatory')
spEthOverUSBInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spEthOverUSBInterfaceEnable.setStatus('mandatory')
bootDeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15), )
if mibBuilder.loadTexts: bootDeviceInfoTable.setStatus('mandatory')
bootDeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1), ).setIndexNames((0, "CME-MIB", "bootInfoTopologyIndex"), (0, "CME-MIB", "bootDeviceIndex"))
if mibBuilder.loadTexts: bootDeviceInfoEntry.setStatus('mandatory')
bootInfoTopologyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootInfoTopologyIndex.setStatus('mandatory')
bootDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootDeviceIndex.setStatus('mandatory')
bootDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootDeviceId.setStatus('mandatory')
bootDeviceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootDeviceActive.setStatus('mandatory')
bootDevicePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootDevicePresence.setStatus('mandatory')
bootDeviceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootDeviceLabel.setStatus('mandatory')
bootDeviceUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootDeviceUserLabel.setStatus('mandatory')
bootDeviceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootDeviceOrder.setStatus('mandatory')
bootSequenceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16), )
if mibBuilder.loadTexts: bootSequenceInfoTable.setStatus('mandatory')
bootSequenceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16, 1), ).setIndexNames((0, "CME-MIB", "bootSequenceInfoTopologyIndex"))
if mibBuilder.loadTexts: bootSequenceInfoEntry.setStatus('mandatory')
bootSequenceInfoTopologyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootSequenceInfoTopologyIndex.setStatus('mandatory')
bootSequenceInfoMaxBootDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootSequenceInfoMaxBootDevices.setStatus('mandatory')
bootSequenceInfoBootSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootSequenceInfoBootSequence.setStatus('mandatory')
switchModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3))
switchModuleControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1))
smControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1), )
if mibBuilder.loadTexts: smControlTable.setStatus('mandatory')
smControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1), ).setIndexNames((0, "CME-MIB", "smControlIndex"))
if mibBuilder.loadTexts: smControlEntry.setStatus('mandatory')
smControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smControlIndex.setStatus('mandatory')
switchModuleControlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8), ("module9", 9), ("module10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchModuleControlId.setStatus('mandatory')
smPostResultsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPostResultsAvailable.setStatus('mandatory')
smPostResultsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPostResultsValue.setStatus('mandatory')
switchModuleMemDiagEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchModuleMemDiagEnableDisable.setStatus('deprecated')
smCfgCtrlEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smCfgCtrlEnableDisable.setStatus('mandatory')
smExtEthPortsEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smExtEthPortsEnableDisable.setStatus('mandatory')
smCfgCtrlOnResetEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smCfgCtrlOnResetEnableDisable.setStatus('mandatory')
smHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHealthState.setStatus('mandatory')
smPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("disabled", 0), ("pending", 1), ("attention", 2), ("active", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPMState.setStatus('mandatory')
smPMCtrlEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smPMCtrlEnableDisable.setStatus('mandatory')
smIOCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIOCompatibility.setStatus('mandatory')
smPingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2), )
if mibBuilder.loadTexts: smPingTable.setStatus('mandatory')
smPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1), ).setIndexNames((0, "CME-MIB", "smPingIndex"), (0, "CME-MIB", "smPingAddressEntryIndex"))
if mibBuilder.loadTexts: smPingEntry.setStatus('mandatory')
smPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPingIndex.setStatus('mandatory')
smPingAddressEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPingAddressEntryIndex.setStatus('mandatory')
smPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPingAddress.setStatus('mandatory')
smPingAddressExecute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smPingAddressExecute.setStatus('mandatory')
smPowerRestartTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7), )
if mibBuilder.loadTexts: smPowerRestartTable.setStatus('mandatory')
smPowerRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1), ).setIndexNames((0, "CME-MIB", "smPowerRestartIndex"))
if mibBuilder.loadTexts: smPowerRestartEntry.setStatus('mandatory')
smPowerRestartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPowerRestartIndex.setStatus('mandatory')
smPowerRestartId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8), ("module9", 9), ("module10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPowerRestartId.setStatus('mandatory')
smSwitchExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSwitchExists.setStatus('mandatory')
smMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMACAddress.setStatus('mandatory')
smIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPAddress.setStatus('mandatory')
switchModulePowerOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("poweroff", 0), ("poweron", 1), ("shutdownInProgress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchModulePowerOnOff.setStatus('mandatory')
smReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smReset.setStatus('mandatory')
smResetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smResetToDefault.setStatus('mandatory')
smRestartAndRunStdDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smRestartAndRunStdDiag.setStatus('mandatory')
smRestartAndRunExtDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smRestartAndRunExtDiag.setStatus('mandatory')
smRestartAndRunFullDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smRestartAndRunFullDiag.setStatus('mandatory')
smPowerOnRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smPowerOnRestartDelay.setStatus('mandatory')
smSwitchWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSwitchWidth.setStatus('mandatory')
smManufacturingID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smManufacturingID.setStatus('mandatory')
smStackingModeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("standby", 0), ("member", 1), ("master", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smStackingModeState.setStatus('mandatory')
smStackingModeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smStackingModeInfo.setStatus('mandatory')
smIOCompatibilityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10), )
if mibBuilder.loadTexts: smIOCompatibilityTable.setStatus('mandatory')
smIOCompatibilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1), ).setIndexNames((0, "CME-MIB", "smIOCompatibilityIndex"))
if mibBuilder.loadTexts: smIOCompatibilityEntry.setStatus('mandatory')
smIOCompatibilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIOCompatibilityIndex.setStatus('mandatory')
smIOCompatibilityId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8), ("module9", 9), ("module10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIOCompatibilityId.setStatus('mandatory')
smIOCompatibilityModuleBay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIOCompatibilityModuleBay.setStatus('mandatory')
smIOCompatibilityModulePower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIOCompatibilityModulePower.setStatus('mandatory')
smIOCompatibilityModuleFabricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIOCompatibilityModuleFabricType.setStatus('mandatory')
smIOCompatibilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIOCompatibilityStatus.setStatus('mandatory')
smIOCompatibilityTargetTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIOCompatibilityTargetTopologyPath.setStatus('mandatory')
switchModuleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2))
switchMgmtNetworkCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1))
switchCurrentNwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1))
smCurrentIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1), )
if mibBuilder.loadTexts: smCurrentIPInfoTable.setStatus('mandatory')
smCurrentIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1), ).setIndexNames((0, "CME-MIB", "smCurrentIPInfoIndex"))
if mibBuilder.loadTexts: smCurrentIPInfoEntry.setStatus('mandatory')
smCurrentIPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPInfoIndex.setStatus('mandatory')
smCurrentIPInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8), ("module9", 9), ("module10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPInfoId.setStatus('mandatory')
smCurrentIPInfoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPInfoExists.setStatus('mandatory')
smCurrentIPInfoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("shutdownInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPInfoPowerState.setStatus('mandatory')
smCurrentIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPAddr.setStatus('mandatory')
smCurrentSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentSubnetMask.setStatus('mandatory')
smCurrentGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentGateway.setStatus('mandatory')
smCurrentIPConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("static", 1), ("dhcp", 2), ("nat", 3), ("bootp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPConfigMethod.setStatus('mandatory')
switchNewNwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2))
smNewIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1), )
if mibBuilder.loadTexts: smNewIPInfoTable.setStatus('mandatory')
smNewIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1), ).setIndexNames((0, "CME-MIB", "smNewIPInfoIndex"))
if mibBuilder.loadTexts: smNewIPInfoEntry.setStatus('mandatory')
smNewIPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNewIPInfoIndex.setStatus('mandatory')
smNewIPInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8), ("module9", 9), ("module10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNewIPInfoId.setStatus('mandatory')
smNewIPInfoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNewIPInfoExists.setStatus('mandatory')
smNewIPInfoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNewIPInfoPowerState.setStatus('mandatory')
smNewIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewIPAddr.setStatus('mandatory')
smNewSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewSubnetMask.setStatus('mandatory')
smNewGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewGateway.setStatus('mandatory')
smNewIPConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("static", 1), ("dhcp", 2), ("nat", 3), ("bootp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewIPConfigMethod.setStatus('mandatory')
smNewIPConfigEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewIPConfigEnableDisable.setStatus('mandatory')
switchIPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4))
smIPv6ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1), )
if mibBuilder.loadTexts: smIPv6ConfigTable.setStatus('mandatory')
smIPv6ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1), ).setIndexNames((0, "CME-MIB", "smIPv6ConfigIndex"))
if mibBuilder.loadTexts: smIPv6ConfigEntry.setStatus('mandatory')
smIPv6ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPv6ConfigIndex.setStatus('mandatory')
smIPv6ConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIPv6ConfigEnabled.setStatus('mandatory')
smIPv6ConfigStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIPv6ConfigStatic.setStatus('mandatory')
smDHCPv6ConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smDHCPv6ConfigEnabled.setStatus('mandatory')
smIPv6ConfigStatelessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIPv6ConfigStatelessEnabled.setStatus('mandatory')
smIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2), )
if mibBuilder.loadTexts: smIPv6AddressTable.setStatus('mandatory')
smIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1), ).setIndexNames((0, "CME-MIB", "smIPv6AddressIndex"), (0, "CME-MIB", "smIPv6AddressEntryIndex"))
if mibBuilder.loadTexts: smIPv6AddressEntry.setStatus('mandatory')
smIPv6AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPv6AddressIndex.setStatus('mandatory')
smIPv6AddressEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPv6AddressEntryIndex.setStatus('mandatory')
smIPv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("static", 1), ("dhcp6", 2), ("link-local", 3), ("autconfig", 4), ("configured-static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPv6AddressType.setStatus('mandatory')
smIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 4), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPv6Address.setStatus('mandatory')
smIPv6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPv6AddressPrefixLen.setStatus('mandatory')
smIPv6AddressDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPv6AddressDefaultRoute.setStatus('mandatory')
smIPv6StaticConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3), )
if mibBuilder.loadTexts: smIPv6StaticConfigTable.setStatus('mandatory')
smIPv6StaticConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1), ).setIndexNames((0, "CME-MIB", "smIPv6StaticIndex"))
if mibBuilder.loadTexts: smIPv6StaticConfigEntry.setStatus('mandatory')
smIPv6StaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPv6StaticIndex.setStatus('mandatory')
smIPv6StaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 2), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIPv6StaticAddress.setStatus('mandatory')
smIPv6StaticAddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIPv6StaticAddressPrefixLen.setStatus('mandatory')
smIPv6StaticAddressDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 4), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIPv6StaticAddressDefaultRoute.setStatus('mandatory')
switchPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2))
switchModOnePortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1))
smOnePortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1), )
if mibBuilder.loadTexts: smOnePortCfgTable.setStatus('mandatory')
smOnePortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1), ).setIndexNames((0, "CME-MIB", "smOnePortCfgIndex"))
if mibBuilder.loadTexts: smOnePortCfgEntry.setStatus('mandatory')
smOnePortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgIndex.setStatus('mandatory')
smOnePortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgLabel.setStatus('mandatory')
smOnePortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unused", 0), ("externalPort", 1), ("externalManagementPort", 2), ("externalDualPort", 3), ("bladePort", 4), ("mmManagementPort", 5), ("uplinkPort", 6), ("interModulePort", 7), ("interModuleManagementPort", 8), ("interModuleDualPort", 9), ("interModuleExternalBridgePort", 10), ("interModuleDualInternalBridgePort", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgType.setStatus('mandatory')
smOnePortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smOnePortCfgLinkSetting.setStatus('mandatory')
smOnePortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("initialized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgLinkState.setStatus('mandatory')
smOnePortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smOnePortCfgSpeedSetting.setStatus('mandatory')
smOnePortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgSpeedStatus.setStatus('mandatory')
smOnePortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgAvailSpeeds.setStatus('mandatory')
smOnePortCfgMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 48, 255))).clone(namedValues=NamedValues(("copper", 0), ("serdes", 1), ("opticalShortHaul", 32), ("opticalLongHaul", 48), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgMedia.setStatus('mandatory')
smOnePortCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 64, 80, 112, 255))).clone(namedValues=NamedValues(("ethernet", 16), ("fibreChannel", 32), ("scalability", 48), ("infiniband", 64), ("pciExpress", 80), ("myrinet", 112), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgProtocol.setStatus('mandatory')
smOnePortCfgWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgWidth.setStatus('mandatory')
smOnePortCfgCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgCableLength.setStatus('mandatory')
smOnePortCfgCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgCableType.setStatus('mandatory')
smOnePortCfgVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgVendorName.setStatus('mandatory')
smOnePortCfgCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("incompatible", 0), ("compatible", 1), ("compatibleNotRecommended", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgCompatibility.setStatus('mandatory')
smOnePortCfgDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("sdr", 0), ("ddr", 1), ("qdr", 2), ("edr", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smOnePortCfgDataRate.setStatus('mandatory')
switchModTwoPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2))
smTwoPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1), )
if mibBuilder.loadTexts: smTwoPortCfgTable.setStatus('mandatory')
smTwoPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1), ).setIndexNames((0, "CME-MIB", "smTwoPortCfgIndex"))
if mibBuilder.loadTexts: smTwoPortCfgEntry.setStatus('mandatory')
smTwoPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgIndex.setStatus('mandatory')
smTwoPortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgLabel.setStatus('mandatory')
smTwoPortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unused", 0), ("externalPort", 1), ("externalManagementPort", 2), ("externalDualPort", 3), ("bladePort", 4), ("mmManagementPort", 5), ("uplinkPort", 6), ("interModulePort", 7), ("interModuleManagementPort", 8), ("interModuleDualPort", 9), ("interModuleExternalBridgePort", 10), ("interModuleDualInternalBridgePort", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgType.setStatus('mandatory')
smTwoPortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smTwoPortCfgLinkSetting.setStatus('mandatory')
smTwoPortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("initialized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgLinkState.setStatus('mandatory')
smTwoPortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smTwoPortCfgSpeedSetting.setStatus('mandatory')
smTwoPortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgSpeedStatus.setStatus('mandatory')
smTwoPortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgAvailSpeeds.setStatus('mandatory')
smTwoPortCfgMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 48, 255))).clone(namedValues=NamedValues(("copper", 0), ("serdes", 1), ("opticalShortHaul", 32), ("opticalLongHaul", 48), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgMedia.setStatus('mandatory')
smTwoPortCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 64, 80, 112, 255))).clone(namedValues=NamedValues(("ethernet", 16), ("fibreChannel", 32), ("scalability", 48), ("infiniband", 64), ("pciExpress", 80), ("myrinet", 112), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgProtocol.setStatus('mandatory')
smTwoPortCfgWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgWidth.setStatus('mandatory')
smTwoPortCfgCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgCableLength.setStatus('mandatory')
smTwoPortCfgCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgCableType.setStatus('mandatory')
smTwoPortCfgVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgVendorName.setStatus('mandatory')
smTwoPortCfgCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("incompatible", 0), ("compatible", 1), ("compatibleNotRecommended", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgCompatibility.setStatus('mandatory')
smTwoPortCfgDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("sdr", 0), ("ddr", 1), ("qdr", 2), ("edr", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smTwoPortCfgDataRate.setStatus('mandatory')
switchModThreePortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3))
smThreePortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1), )
if mibBuilder.loadTexts: smThreePortCfgTable.setStatus('mandatory')
smThreePortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1), ).setIndexNames((0, "CME-MIB", "smThreePortCfgIndex"))
if mibBuilder.loadTexts: smThreePortCfgEntry.setStatus('mandatory')
smThreePortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgIndex.setStatus('mandatory')
smThreePortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgLabel.setStatus('mandatory')
smThreePortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unused", 0), ("externalPort", 1), ("externalManagementPort", 2), ("externalDualPort", 3), ("bladePort", 4), ("mmManagementPort", 5), ("uplinkPort", 6), ("interModulePort", 7), ("interModuleManagementPort", 8), ("interModuleDualPort", 9), ("interModuleExternalBridgePort", 10), ("interModuleDualInternalBridgePort", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgType.setStatus('mandatory')
smThreePortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smThreePortCfgLinkSetting.setStatus('mandatory')
smThreePortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("initialized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgLinkState.setStatus('mandatory')
smThreePortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smThreePortCfgSpeedSetting.setStatus('mandatory')
smThreePortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgSpeedStatus.setStatus('mandatory')
smThreePortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgAvailSpeeds.setStatus('mandatory')
smThreePortCfgMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 48, 255))).clone(namedValues=NamedValues(("copper", 0), ("serdes", 1), ("opticalShortHaul", 32), ("opticalLongHaul", 48), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgMedia.setStatus('mandatory')
smThreePortCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 64, 80, 112, 255))).clone(namedValues=NamedValues(("ethernet", 16), ("fibreChannel", 32), ("scalability", 48), ("infiniband", 64), ("pciExpress", 80), ("myrinet", 112), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgProtocol.setStatus('mandatory')
smThreePortCfgWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgWidth.setStatus('mandatory')
smThreePortCfgCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgCableLength.setStatus('mandatory')
smThreePortCfgCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgCableType.setStatus('mandatory')
smThreePortCfgVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgVendorName.setStatus('mandatory')
smThreePortCfgCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("incompatible", 0), ("compatible", 1), ("compatibleNotRecommended", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgCompatibility.setStatus('mandatory')
smThreePortCfgDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("sdr", 0), ("ddr", 1), ("qdr", 2), ("edr", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smThreePortCfgDataRate.setStatus('mandatory')
switchModFourPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4))
smFourPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1), )
if mibBuilder.loadTexts: smFourPortCfgTable.setStatus('mandatory')
smFourPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1), ).setIndexNames((0, "CME-MIB", "smFourPortCfgIndex"))
if mibBuilder.loadTexts: smFourPortCfgEntry.setStatus('mandatory')
smFourPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgIndex.setStatus('mandatory')
smFourPortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgLabel.setStatus('mandatory')
smFourPortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unused", 0), ("externalPort", 1), ("externalManagementPort", 2), ("externalDualPort", 3), ("bladePort", 4), ("mmManagementPort", 5), ("uplinkPort", 6), ("interModulePort", 7), ("interModuleManagementPort", 8), ("interModuleDualPort", 9), ("interModuleExternalBridgePort", 10), ("interModuleDualInternalBridgePort", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgType.setStatus('mandatory')
smFourPortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smFourPortCfgLinkSetting.setStatus('mandatory')
smFourPortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("initialized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgLinkState.setStatus('mandatory')
smFourPortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smFourPortCfgSpeedSetting.setStatus('mandatory')
smFourPortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgSpeedStatus.setStatus('mandatory')
smFourPortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgAvailSpeeds.setStatus('mandatory')
smFourPortCfgMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 48, 255))).clone(namedValues=NamedValues(("copper", 0), ("serdes", 1), ("opticalShortHaul", 32), ("opticalLongHaul", 48), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgMedia.setStatus('mandatory')
smFourPortCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 64, 80, 112, 255))).clone(namedValues=NamedValues(("ethernet", 16), ("fibreChannel", 32), ("scalability", 48), ("infiniband", 64), ("pciExpress", 80), ("myrinet", 112), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgProtocol.setStatus('mandatory')
smFourPortCfgWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgWidth.setStatus('mandatory')
smFourPortCfgCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgCableLength.setStatus('mandatory')
smFourPortCfgCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgCableType.setStatus('mandatory')
smFourPortCfgVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgVendorName.setStatus('mandatory')
smFourPortCfgCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("incompatible", 0), ("compatible", 1), ("compatibleNotRecommended", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgCompatibility.setStatus('mandatory')
smFourPortCfgDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("sdr", 0), ("ddr", 1), ("qdr", 2), ("edr", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFourPortCfgDataRate.setStatus('mandatory')
chassisTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4))
chassisResponseVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisResponseVersion.setStatus('mandatory')
chassisFlags = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rackOrStandAlone", 0), ("serverBlade", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFlags.setStatus('mandatory')
chassisNoOfFPsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfFPsSupported.setStatus('deprecated')
chassisNoOfBayDevicesSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfBayDevicesSupported.setStatus('mandatory')
chassisNoOfSMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfSMsSupported.setStatus('mandatory')
chassisNoOfMMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfMMsSupported.setStatus('mandatory')
chassisNoOfPMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfPMsSupported.setStatus('mandatory')
chassisNoOfRearLEDCardsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfRearLEDCardsSupported.setStatus('mandatory')
chassisNoOfChassisFansSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfChassisFansSupported.setStatus('mandatory')
chassisBayDevicesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBayDevicesInstalled.setStatus('mandatory')
chassisSMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSMsInstalled.setStatus('mandatory')
chassisMMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMMsInstalled.setStatus('mandatory')
chassisPMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPMsInstalled.setStatus('mandatory')
chassisRearLEDCardInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisRearLEDCardInstalled.setStatus('mandatory')
chassisFansInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFansInstalled.setStatus('mandatory')
chassisActiveMM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisActiveMM.setStatus('mandatory')
chassisFPsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFPsInstalled.setStatus('deprecated')
chassisType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101))).clone(namedValues=NamedValues(("flex", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
chassisSubtype = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 48, 49, 50, 255))).clone(namedValues=NamedValues(("flex", 101), ("tracewell4", 48), ("tracewell8", 49), ("tracewell7", 50), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSubtype.setStatus('mandatory')
chassisNoOfRearLEDCardsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfRearLEDCardsInstalled.setStatus('mandatory')
chassisRoom = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisRoom.setStatus('mandatory')
chassisName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisName.setStatus('mandatory')
chassisRack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisRack.setStatus('mandatory')
chassisLowestU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisLowestU.setStatus('mandatory')
chassisUHeight = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisUHeight.setStatus('mandatory')
managementModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5))
mmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1), )
if mibBuilder.loadTexts: mmStatusTable.setStatus('mandatory')
mmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1), ).setIndexNames((0, "CME-MIB", "mmStatusIndex"))
if mibBuilder.loadTexts: mmStatusEntry.setStatus('mandatory')
mmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmStatusIndex.setStatus('mandatory')
mmPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPresent.setStatus('mandatory')
mmExtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmExtIpAddress.setStatus('mandatory')
mmPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPrimary.setStatus('mandatory')
mmHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHealthState.setStatus('mandatory')
firmwareInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8))
smFirmwareInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1))
smFirmwareInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1), )
if mibBuilder.loadTexts: smFirmwareInfoTable.setStatus('mandatory')
smFirmwareInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1), ).setIndexNames((0, "CME-MIB", "smFirmwareInfoIndex"))
if mibBuilder.loadTexts: smFirmwareInfoEntry.setStatus('mandatory')
smFirmwareInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareInfoIndex.setStatus('mandatory')
smFirmwareInfoModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareInfoModIndex.setStatus('mandatory')
smFirmwareInfoImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smFirmwareInfoImageIndex.setStatus('mandatory')
smFirmwareInfoImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smFirmwareInfoImageName.setStatus('mandatory')
firmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9))
firmwareUpdateTarget = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 11, 12, 13, 14, 255))).clone(namedValues=NamedValues(("managementModule", 0), ("switchModule1", 11), ("switchModule2", 12), ("switchModule3", 13), ("switchModule4", 14), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTarget.setStatus('mandatory')
firmwareUpdateTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTftpServer.setStatus('mandatory')
firmwareUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateFileName.setStatus('mandatory')
firmwareUpdateStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("execute", 1), ("execute-with-reboot", 2), ("execute-nowait", 3), ("execute-with-reboot-nowait", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateStart.setStatus('mandatory')
firmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateStatus.setStatus('mandatory')
standbyFirmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyFirmwareUpdateStatus.setStatus('mandatory')
firmwareImageNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareImageNumber.setStatus('mandatory')
firmwareActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareActiveImage.setStatus('mandatory')
firmwareUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateServer.setStatus('mandatory')
fileManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11))
fileTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1))
currentDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentDirectory.setStatus('mandatory')
fileDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2), )
if mibBuilder.loadTexts: fileDetailsTable.setStatus('mandatory')
fileDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1), ).setIndexNames((0, "CME-MIB", "fileIndex"))
if mibBuilder.loadTexts: fileDetailsEntry.setStatus('mandatory')
fileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileIndex.setStatus('mandatory')
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileName.setStatus('mandatory')
fileLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileLastUpdate.setStatus('mandatory')
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSize.setStatus('mandatory')
fileManagementCmd = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileManagementCmd.setStatus('mandatory')
fileSystemSpaceAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemSpaceAvailable.setStatus('mandatory')
cmeRemoteChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12))
cmeRemoteChassisTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1), )
if mibBuilder.loadTexts: cmeRemoteChassisTable.setStatus('mandatory')
cmeRemoteChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1), ).setIndexNames((0, "CME-MIB", "cmeRemoteChassisIndex"))
if mibBuilder.loadTexts: cmeRemoteChassisEntry.setStatus('mandatory')
cmeRemoteChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeRemoteChassisIndex.setStatus('mandatory')
cmeSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeSystemName.setStatus('mandatory')
cmeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeType.setStatus('mandatory')
cmeSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeSerial.setStatus('mandatory')
cmeFru = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeFru.setStatus('mandatory')
cmeUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeUuid.setStatus('mandatory')
cmeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeSlot.setStatus('mandatory')
cmeMidPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeMidPid.setStatus('mandatory')
cmeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeMacAddress.setStatus('mandatory')
cmeChassisSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisSerial.setStatus('mandatory')
cmeChassisFru = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisFru.setStatus('mandatory')
cmeChassisMachineTypeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisMachineTypeMode.setStatus('mandatory')
cmeSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 9, 170, 255))).clone(namedValues=NamedValues(("critical", 0), ("non-Critical", 2), ("system-Level", 4), ("unknown", 9), ("noResponse", 170), ("normal", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeSystemStatus.setStatus('mandatory')
cmeChassisUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisUuid.setStatus('mandatory')
cmeChassisMidPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisMidPid.setStatus('mandatory')
cmeChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisId.setStatus('mandatory')
cmeChassisLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisLocation.setStatus('mandatory')
cmeChassisRoomId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisRoomId.setStatus('mandatory')
cmeChassisRackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisRackId.setStatus('mandatory')
cmeChassisUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisUser.setStatus('mandatory')
cmeChassisFruList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisFruList.setStatus('mandatory')
cmeFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeFirmwareVersion.setStatus('mandatory')
cmeChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeChassisType.setStatus('mandatory')
cmeIpv4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeIpv4Status.setStatus('mandatory')
cmeIpv4Addresses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeIpv4Addresses.setStatus('mandatory')
cmeIpv4AddressesFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeIpv4AddressesFloat.setStatus('mandatory')
cmeIpv4Protocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeIpv4Protocols.setStatus('mandatory')
cmeIpv6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeIpv6Status.setStatus('mandatory')
cmeIpv6Addresses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeIpv6Addresses.setStatus('mandatory')
cmeIpv6AddressesFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeIpv6AddressesFloat.setStatus('mandatory')
cmeIpv6Protocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeIpv6Protocols.setStatus('mandatory')
chassisDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisDiscovery.setStatus('mandatory')
componentPower = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31))
componentPowerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1), )
if mibBuilder.loadTexts: componentPowerTable.setStatus('mandatory')
componentPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1), ).setIndexNames((0, "CME-MIB", "componentPowerTopologyPath"))
if mibBuilder.loadTexts: componentPowerEntry.setStatus('mandatory')
componentPowerTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerTopologyPath.setStatus('mandatory')
componentPowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerName.setStatus('mandatory')
componentPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerState.setStatus('mandatory')
componentPowerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("off", 1), ("on", 2), ("softoff", 3), ("restart", 4), ("restartSysMgmtProcessor", 5), ("restartNMI", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentPowerAction.setStatus('mandatory')
componentPowerEnableSMSBootMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentPowerEnableSMSBootMenu.setStatus('mandatory')
componentPowerTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerTableCacheTimeout.setStatus('mandatory')
componentPowerDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6), )
if mibBuilder.loadTexts: componentPowerDetailsTable.setStatus('mandatory')
componentPowerDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1), ).setIndexNames((0, "CME-MIB", "componentPowerDetailsTopologyPath"))
if mibBuilder.loadTexts: componentPowerDetailsEntry.setStatus('mandatory')
componentPowerDetailsTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsTopologyPath.setStatus('mandatory')
componentPowerDetailsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsName.setStatus('mandatory')
componentPowerDetailsMaxPowerConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentPowerDetailsMaxPowerConfig.setStatus('mandatory')
componentPowerDetailsEffectiveClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsEffectiveClockRate.setStatus('mandatory')
componentPowerDetailsMaximumClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsMaximumClockRate.setStatus('mandatory')
componentPowerDetailsPowerSaverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentPowerDetailsPowerSaverMode.setStatus('mandatory')
componentPowerDetailsDynamicPowerSaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentPowerDetailsDynamicPowerSaver.setStatus('mandatory')
componentPowerDetailsDynamicPowerFavorPerformanceOverPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentPowerDetailsDynamicPowerFavorPerformanceOverPower.setStatus('mandatory')
componentPowerDetailsPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("none", 0), ("measurement", 1), ("measurementpcap", 2), ("psave", 3), ("measurementpsave", 4), ("measurementpcappsave", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentPowerDetailsPowerControl.setStatus('mandatory')
componentPowerDetailsPcapMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsPcapMin.setStatus('mandatory')
componentPowerDetailsPcapGuaranteedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsPcapGuaranteedMin.setStatus('mandatory')
componentPowerDetailsPcapMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsPcapMax.setStatus('mandatory')
componentPowerDetailsStaticCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsStaticCap.setStatus('mandatory')
componentPowerDetailsRuntimeCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsRuntimeCap.setStatus('mandatory')
componentPowerDetailsTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPowerDetailsTableCacheTimeout.setStatus('mandatory')
componentConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32))
componentBayDataTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1), )
if mibBuilder.loadTexts: componentBayDataTable.setStatus('mandatory')
componentBayDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1), ).setIndexNames((0, "CME-MIB", "componentBayDataTopologyPath"))
if mibBuilder.loadTexts: componentBayDataEntry.setStatus('mandatory')
componentBayDataTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentBayDataTopologyPath.setStatus('mandatory')
componentBayDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentBayDataName.setStatus('mandatory')
componentBayDataStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("supported", 0), ("bsmp", 1), ("notPresent", 2), ("discovering", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentBayDataStatus.setStatus('mandatory')
componentBayData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentBayData.setStatus('mandatory')
componentBayDataTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentBayDataTableCacheTimeout.setStatus('mandatory')
componentEthOverUSBInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6), )
if mibBuilder.loadTexts: componentEthOverUSBInterfaceTable.setStatus('mandatory')
componentEthOverUSBInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6, 1), ).setIndexNames((0, "CME-MIB", "componentEthOverUSBInterfaceTopologyPath"))
if mibBuilder.loadTexts: componentEthOverUSBInterfaceEntry.setStatus('mandatory')
componentEthOverUSBInterfaceTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentEthOverUSBInterfaceTopologyPath.setStatus('mandatory')
componentEthOverUSBInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentEthOverUSBInterfaceName.setStatus('mandatory')
componentEthOverUSBInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentEthOverUSBInterfaceEnable.setStatus('mandatory')
componentEthOverUSBInterfaceTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentEthOverUSBInterfaceTableCacheTimeout.setStatus('mandatory')
componentConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11), )
if mibBuilder.loadTexts: componentConfigurationTable.setStatus('mandatory')
componentConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1), ).setIndexNames((0, "CME-MIB", "componentConfigurationTopologyPath"))
if mibBuilder.loadTexts: componentConfigurationEntry.setStatus('mandatory')
componentConfigurationTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentConfigurationTopologyPath.setStatus('mandatory')
componentConfigurationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentConfigurationName.setStatus('mandatory')
componentConfigurationActiveBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("temporary", 1), ("permanent", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentConfigurationActiveBootMode.setStatus('mandatory')
componentConfigurationPendingBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("temporary", 1), ("permanent", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentConfigurationPendingBootMode.setStatus('mandatory')
componentConfigurationAutoPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("restore", 1), ("auto", 2), ("manual", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentConfigurationAutoPowerOn.setStatus('mandatory')
componentConfigurationPowerOnRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentConfigurationPowerOnRestartDelay.setStatus('mandatory')
componentConfigurationLocalPowerControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentConfigurationLocalPowerControlEnable.setStatus('mandatory')
componentConfigurationWakeOnLanControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentConfigurationWakeOnLanControlEnable.setStatus('mandatory')
componentConfigurationTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentConfigurationTableCacheTimeout.setStatus('mandatory')
componentNetworkConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16))
componentIPv4ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1), )
if mibBuilder.loadTexts: componentIPv4ConfigTable.setStatus('mandatory')
componentIPv4ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1), ).setIndexNames((0, "CME-MIB", "componentIPv4ConfigTopologyPath"), (0, "CME-MIB", "componentIPv4ConfigPortIndex"))
if mibBuilder.loadTexts: componentIPv4ConfigEntry.setStatus('mandatory')
componentIPv4ConfigTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv4ConfigTopologyPath.setStatus('mandatory')
componentIPv4ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv4ConfigPortIndex.setStatus('mandatory')
componentIPv4ConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv4ConfigName.setStatus('mandatory')
componentIPv4ConfigPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv4ConfigPortLabel.setStatus('mandatory')
componentIPv4ConfigPhysicalLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv4ConfigPhysicalLinkStatus.setStatus('mandatory')
componentIPv4ConfigPhysicalLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("loopback", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv4ConfigPhysicalLinkState.setStatus('mandatory')
componentIPv4ConfigIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv4ConfigIPAddr.setStatus('mandatory')
componentIPv4ConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv4ConfigSubnetMask.setStatus('mandatory')
componentIPv4ConfigGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv4ConfigGatewayAddr.setStatus('mandatory')
componentIPv4ConfigVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv4ConfigVlanId.setStatus('mandatory')
componentIPv4ConfigDHCPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("useStatic", 0), ("useDhcp", 1), ("tryDhcpThenTryStatic", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv4ConfigDHCPEnable.setStatus('mandatory')
componentIPv4ConfigMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv4ConfigMACAddr.setStatus('mandatory')
componentIPv4ConfigTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv4ConfigTableCacheTimeout.setStatus('mandatory')
componentIPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11))
componentIPv6ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1), )
if mibBuilder.loadTexts: componentIPv6ConfigTable.setStatus('mandatory')
componentIPv6ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1), ).setIndexNames((0, "CME-MIB", "componentIPv6ConfigTopologyPath"), (0, "CME-MIB", "componentIPv6ConfigPortIndex"))
if mibBuilder.loadTexts: componentIPv6ConfigEntry.setStatus('mandatory')
componentIPv6ConfigTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6ConfigTopologyPath.setStatus('mandatory')
componentIPv6ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6ConfigPortIndex.setStatus('mandatory')
componentIPv6ConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6ConfigName.setStatus('mandatory')
componentIPv6ConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv6ConfigEnabled.setStatus('mandatory')
componentIPv6ConfigStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv6ConfigStatic.setStatus('mandatory')
componentDHCPv6ConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentDHCPv6ConfigEnabled.setStatus('mandatory')
componentIPv6ConfigStatelessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv6ConfigStatelessEnabled.setStatus('mandatory')
componentIPv6ConfigTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6ConfigTableCacheTimeout.setStatus('mandatory')
componentIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6), )
if mibBuilder.loadTexts: componentIPv6AddressTable.setStatus('mandatory')
componentIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1), ).setIndexNames((0, "CME-MIB", "componentIPv6AddressTopologyPath"), (0, "CME-MIB", "componentIPv6AddressPortIndex"), (0, "CME-MIB", "componentIPv6AddressEntryIndex"))
if mibBuilder.loadTexts: componentIPv6AddressEntry.setStatus('mandatory')
componentIPv6AddressTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6AddressTopologyPath.setStatus('mandatory')
componentIPv6AddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6AddressPortIndex.setStatus('mandatory')
componentIPv6AddressEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6AddressEntryIndex.setStatus('mandatory')
componentIPv6AddressName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6AddressName.setStatus('mandatory')
componentIPv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active-static", 1), ("dhcp6", 2), ("link-local", 3), ("autconfig", 4), ("current", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6AddressType.setStatus('mandatory')
componentIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 6), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv6Address.setStatus('mandatory')
componentIPv6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv6AddressPrefixLen.setStatus('mandatory')
componentIPv6AddressDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 8), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentIPv6AddressDefaultRoute.setStatus('mandatory')
componentIPv6AddressTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIPv6AddressTableCacheTimeout.setStatus('mandatory')
componentTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20), )
if mibBuilder.loadTexts: componentTimeTable.setStatus('mandatory')
componentTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1), ).setIndexNames((0, "CME-MIB", "componentTimeTopologyPath"))
if mibBuilder.loadTexts: componentTimeEntry.setStatus('mandatory')
componentTimeTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTimeTopologyPath.setStatus('mandatory')
componentTimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTimeName.setStatus('mandatory')
componentTimeNTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentTimeNTPEnable.setStatus('mandatory')
componentTimeNTPFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentTimeNTPFrequency.setStatus('mandatory')
componentTimeTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTimeTableCacheTimeout.setStatus('mandatory')
componentSolTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26), )
if mibBuilder.loadTexts: componentSolTable.setStatus('mandatory')
componentSolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1), ).setIndexNames((0, "CME-MIB", "componentSolTopologyPath"))
if mibBuilder.loadTexts: componentSolEntry.setStatus('mandatory')
componentSolTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolTopologyPath.setStatus('mandatory')
componentSolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolName.setStatus('mandatory')
componentSolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("solDisabled", 0), ("solEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentSolEnable.setStatus('mandatory')
componentSolIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolIpAddr.setStatus('deprecated')
componentSolSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("solSessionNotReady", 0), ("solSessionReady", 1), ("solSessionActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolSessionStatus.setStatus('mandatory')
componentSolCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSupport", 0), ("support", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolCapability.setStatus('mandatory')
componentSolIpAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 7), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolIpAddr6.setStatus('mandatory')
componentSolRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolRetryInterval.setStatus('mandatory')
componentSolRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolRetryCount.setStatus('mandatory')
componentSolBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolBytesSent.setStatus('mandatory')
componentSolBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolBytesReceived.setStatus('mandatory')
componentSolDestinationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolDestinationMAC.setStatus('mandatory')
componentSolConsoleUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolConsoleUserId.setStatus('mandatory')
componentSolConsoleLoginFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolConsoleLoginFrom.setStatus('mandatory')
componentSolConsoleLoginStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolConsoleLoginStart.setStatus('mandatory')
componentSolConsoleLoginEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolConsoleLoginEnd.setStatus('mandatory')
componentSolTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSolTableCacheTimeout.setStatus('mandatory')
componentMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37))
componentSystemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1), )
if mibBuilder.loadTexts: componentSystemStatusTable.setStatus('mandatory')
componentSystemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1), ).setIndexNames((0, "CME-MIB", "componentStatusTopologyPath"))
if mibBuilder.loadTexts: componentSystemStatusEntry.setStatus('mandatory')
componentStatusTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusTopologyPath.setStatus('mandatory')
componentStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusName.setStatus('mandatory')
componentStatusPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusPowerState.setStatus('mandatory')
componentStatusHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("critical", 3), ("kernelMode", 4), ("discovering", 5), ("commError", 6), ("noPower", 7), ("flashing", 8), ("initFailure", 9), ("insufficientPower", 10), ("powerDenied", 11), ("maintMode", 12), ("firehoseDump", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusHealthState.setStatus('mandatory')
componentStatusPowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusPowerEnable.setStatus('mandatory')
componentStatusWakeOnLanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusWakeOnLanEnable.setStatus('mandatory')
componentStatusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusWidth.setStatus('mandatory')
componentStatusIOCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusIOCompatibility.setStatus('mandatory')
componentStatusInventoryReady = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notReady", 0), ("ready", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStatusInventoryReady.setStatus('mandatory')
componentStatusBootCountPowerOnTimeBoots = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentStatusBootCountPowerOnTimeBoots.setStatus('mandatory')
componentStatusBootCountPowerOnTimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentStatusBootCountPowerOnTimeSecs.setStatus('mandatory')
componentSystemStatusTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSystemStatusTableCacheTimeout.setStatus('mandatory')
componentHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6), )
if mibBuilder.loadTexts: componentHealthSummaryTable.setStatus('mandatory')
componentHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1), ).setIndexNames((0, "CME-MIB", "componentHealthTopologyPath"), (0, "CME-MIB", "componentHealthEventIndex"))
if mibBuilder.loadTexts: componentHealthSummaryEntry.setStatus('mandatory')
componentHealthTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentHealthTopologyPath.setStatus('mandatory')
componentHealthEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentHealthEventIndex.setStatus('mandatory')
componentHealthSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentHealthSummaryName.setStatus('mandatory')
componentHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentHealthSummarySeverity.setStatus('mandatory')
componentHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentHealthSummaryDescription.setStatus('mandatory')
componentHealthSummaryDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentHealthSummaryDateTime.setStatus('mandatory')
componentHealthSummaryEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentHealthSummaryEventID.setStatus('mandatory')
componentHealthSummaryTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentHealthSummaryTableCacheTimeout.setStatus('mandatory')
componentMACAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11), )
if mibBuilder.loadTexts: componentMACAddressTable.setStatus('mandatory')
componentMACAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1), ).setIndexNames((0, "CME-MIB", "componentMACAddressTopologyPath"), (0, "CME-MIB", "componentMACAddressIndex"))
if mibBuilder.loadTexts: componentMACAddressEntry.setStatus('mandatory')
componentMACAddressTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentMACAddressTopologyPath.setStatus('mandatory')
componentMACAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentMACAddressIndex.setStatus('mandatory')
componentMACAddressName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentMACAddressName.setStatus('mandatory')
componentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentMACAddress.setStatus('mandatory')
componentMACAddressTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentMACAddressTableCacheTimeout.setStatus('mandatory')
componentUniqueIDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13), )
if mibBuilder.loadTexts: componentUniqueIDsTable.setStatus('mandatory')
componentUniqueIDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1), ).setIndexNames((0, "CME-MIB", "componentUniqueIDsTopologyPath"), (0, "CME-MIB", "componentUniqueIDsIndex"))
if mibBuilder.loadTexts: componentUniqueIDsEntry.setStatus('mandatory')
componentUniqueIDsTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentUniqueIDsTopologyPath.setStatus('mandatory')
componentUniqueIDsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentUniqueIDsIndex.setStatus('mandatory')
componentUniqueIDsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentUniqueIDsName.setStatus('mandatory')
componentUniqueIDsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wwn", 1), ("guid", 2), ("sas", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentUniqueIDsType.setStatus('mandatory')
componentUniqueIDsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentUniqueIDsValue.setStatus('mandatory')
componentUniqueIDsTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentUniqueIDsTableCacheTimeout.setStatus('mandatory')
componentVoltagesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16), )
if mibBuilder.loadTexts: componentVoltagesTable.setStatus('mandatory')
componentVoltagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1), ).setIndexNames((0, "CME-MIB", "componentVoltagesTopologyPath"), (0, "CME-MIB", "componentVoltagesSensorIndex"))
if mibBuilder.loadTexts: componentVoltagesEntry.setStatus('mandatory')
componentVoltagesTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentVoltagesTopologyPath.setStatus('mandatory')
componentVoltagesSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentVoltagesSensorIndex.setStatus('mandatory')
componentVoltagesComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentVoltagesComponentName.setStatus('mandatory')
componentVoltagesSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentVoltagesSensorLabel.setStatus('mandatory')
componentVoltagesSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentVoltagesSensorValue.setStatus('mandatory')
componentVoltagesLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentVoltagesLowWarningThreshold.setStatus('mandatory')
componentVoltagesHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentVoltagesHighWarningThreshold.setStatus('mandatory')
componentVoltagesTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentVoltagesTableCacheTimeout.setStatus('mandatory')
componentTemperaturesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21), )
if mibBuilder.loadTexts: componentTemperaturesTable.setStatus('mandatory')
componentTemperaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1), ).setIndexNames((0, "CME-MIB", "componentTemperaturesTopologyPath"), (0, "CME-MIB", "componentTemperaturesSensorIndex"))
if mibBuilder.loadTexts: componentTemperaturesEntry.setStatus('mandatory')
componentTemperaturesTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesTopologyPath.setStatus('mandatory')
componentTemperaturesSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesSensorIndex.setStatus('mandatory')
componentTemperaturesComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesComponentName.setStatus('mandatory')
componentTemperaturesSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesSensorLabel.setStatus('mandatory')
componentTemperaturesSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesSensorValue.setStatus('mandatory')
componentTemperaturesWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesWarningThreshold.setStatus('mandatory')
componentTemperaturesShutdownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesShutdownThreshold.setStatus('mandatory')
componentTemperaturesWarningResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesWarningResetThreshold.setStatus('mandatory')
componentTemperaturesTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTemperaturesTableCacheTimeout.setStatus('mandatory')
componentIOCompatibilityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26), )
if mibBuilder.loadTexts: componentIOCompatibilityTable.setStatus('mandatory')
componentIOCompatibilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1), ).setIndexNames((0, "CME-MIB", "componentIOCompatibilityTopologyPath"), (0, "CME-MIB", "componentIOCompatibilityIOMBay"))
if mibBuilder.loadTexts: componentIOCompatibilityEntry.setStatus('mandatory')
componentIOCompatibilityTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIOCompatibilityTopologyPath.setStatus('mandatory')
componentIOCompatibilityIOMBay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIOCompatibilityIOMBay.setStatus('mandatory')
componentIOCompatibilityComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIOCompatibilityComponentName.setStatus('mandatory')
componentIOCompatibilityIOMPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIOCompatibilityIOMPower.setStatus('mandatory')
componentIOCompatibilityIOMFabricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIOCompatibilityIOMFabricType.setStatus('mandatory')
componentIOCompatibilityFabricOnComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIOCompatibilityFabricOnComponent.setStatus('mandatory')
componentIOCompatibilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIOCompatibilityStatus.setStatus('mandatory')
componentIOCompatibilityTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIOCompatibilityTableCacheTimeout.setStatus('mandatory')
nodeConnectivityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31), )
if mibBuilder.loadTexts: nodeConnectivityTable.setStatus('mandatory')
nodeConnectivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31, 1), ).setIndexNames((0, "CME-MIB", "nodeConnectivityIndex"))
if mibBuilder.loadTexts: nodeConnectivityEntry.setStatus('mandatory')
nodeConnectivityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeConnectivityIndex.setStatus('mandatory')
nodeConnectivityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeConnectivityName.setStatus('mandatory')
nodeConnectivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notcommunicating", 0), ("communicating", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeConnectivityStatus.setStatus('mandatory')
componentServiceReset = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38))
componentServiceResetTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1), )
if mibBuilder.loadTexts: componentServiceResetTable.setStatus('mandatory')
componentServiceResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1), ).setIndexNames((0, "CME-MIB", "componentServiceResetTopologyPath"))
if mibBuilder.loadTexts: componentServiceResetEntry.setStatus('mandatory')
componentServiceResetTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceResetTopologyPath.setStatus('mandatory')
componentServiceResetName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceResetName.setStatus('mandatory')
componentServiceResetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("auxPowerOff", 0), ("auxPowerOn", 1), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceResetStatus.setStatus('mandatory')
componentServiceResetCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noOperation", 0), ("resetVirtualReseatOperation", 1), ("resetHardRestartOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentServiceResetCmd.setStatus('mandatory')
componentServiceResetTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceResetTableCacheTimeout.setStatus('mandatory')
componentLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39))
componentLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1), )
if mibBuilder.loadTexts: componentLEDsTable.setStatus('mandatory')
componentLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1), ).setIndexNames((0, "CME-MIB", "ledComponentTopologyPath"))
if mibBuilder.loadTexts: componentLEDsEntry.setStatus('mandatory')
ledComponentTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledComponentTopologyPath.setStatus('mandatory')
ledComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledComponentName.setStatus('mandatory')
ledComponentFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledComponentFault.setStatus('mandatory')
ledComponentCheckLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledComponentCheckLog.setStatus('mandatory')
ledComponentIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledComponentIdentity.setStatus('mandatory')
componentLEDsTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLEDsTableCacheTimeout.setStatus('mandatory')
componentLEDsDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9), )
if mibBuilder.loadTexts: componentLEDsDetailsTable.setStatus('mandatory')
componentLEDsDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1), ).setIndexNames((0, "CME-MIB", "componentLEDsDetailsTopologyPath"), (0, "CME-MIB", "componentLEDsDetailsIndex"))
if mibBuilder.loadTexts: componentLEDsDetailsEntry.setStatus('mandatory')
componentLEDsDetailsTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLEDsDetailsTopologyPath.setStatus('mandatory')
componentLEDsDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLEDsDetailsIndex.setStatus('mandatory')
componentLEDsDetailsComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLEDsDetailsComponentType.setStatus('mandatory')
componentLEDsDetailsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLEDsDetailsLabel.setStatus('mandatory')
componentLEDsDetailsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLEDsDetailsState.setStatus('mandatory')
componentLEDsDetailsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLEDsDetailsLocation.setStatus('mandatory')
componentLEDsDetailsTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLEDsDetailsTableCacheTimeout.setStatus('mandatory')
backupRestore = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42))
backupRestoreAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("backup", 0), ("restore", 1), ("restoreAndRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupRestoreAction.setStatus('mandatory')
backupRestoreStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ready", 0), ("pending", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupRestoreStatus.setStatus('mandatory')
backupRestoreMessage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupRestoreMessage.setStatus('mandatory')
backupRestoreURI = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupRestoreURI.setStatus('mandatory')
backupRestorePassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupRestorePassword.setStatus('mandatory')
backupRestoreLogURI = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupRestoreLogURI.setStatus('mandatory')
backupRestoreLogPush = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPush", 0), ("push", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupRestoreLogPush.setStatus('mandatory')
bladeServiceData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3))
bladeServiceDataTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1), )
if mibBuilder.loadTexts: bladeServiceDataTable.setStatus('mandatory')
bladeServiceDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1), ).setIndexNames((0, "CME-MIB", "serviceDataIndex"))
if mibBuilder.loadTexts: bladeServiceDataEntry.setStatus('mandatory')
serviceDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceDataIndex.setStatus('mandatory')
serviceDataBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceDataBladeId.setStatus('mandatory')
serviceDataBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceDataBladeExists.setStatus('mandatory')
serviceDataBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceDataBladePowerState.setStatus('mandatory')
serviceDataBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceDataBladeName.setStatus('mandatory')
serviceDataDumpInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("processorDump", 1), ("platformDump", 2), ("partitionDump", 3), ("serviceData", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDataDumpInitiate.setStatus('mandatory')
serviceDataDumpRetrieve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("processorDump", 1), ("platformDump", 2), ("partitionDump", 3), ("serviceData", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDataDumpRetrieve.setStatus('mandatory')
serviceDataDumpCapabilityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceDataDumpCapabilityMask.setStatus('mandatory')
serviceDataDumpInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("inProgress", 1), ("notInProgress", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceDataDumpInProgress.setStatus('mandatory')
serviceAdvisor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4))
autoCallHomeSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1))
acceptLicenseAgreement = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptLicenseAgreement.setStatus('mandatory')
serviceAdvisorEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAdvisorEnable.setStatus('mandatory')
serviceSupportCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 2))
ibmSupportCenter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSupportCenter.setStatus('mandatory')
contactInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3))
companyName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: companyName.setStatus('mandatory')
contactName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactName.setStatus('mandatory')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneNumber.setStatus('mandatory')
emailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailAddress.setStatus('mandatory')
address = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: address.setStatus('mandatory')
city = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: city.setStatus('mandatory')
state = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: state.setStatus('mandatory')
postalCode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: postalCode.setStatus('mandatory')
phoneNumberExt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneNumberExt.setStatus('mandatory')
altContactName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altContactName.setStatus('mandatory')
altPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altPhoneNumber.setStatus('mandatory')
altPhoneNumberExt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altPhoneNumberExt.setStatus('mandatory')
altEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altEmailAddress.setStatus('mandatory')
httpProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4))
httpProxyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyEnable.setStatus('mandatory')
httpProxyLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyLocation.setStatus('mandatory')
httpProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyPort.setStatus('mandatory')
httpProxyUserName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyUserName.setStatus('mandatory')
httpProxyPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyPassword.setStatus('mandatory')
activityLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5))
activityLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1), )
if mibBuilder.loadTexts: activityLogTable.setStatus('mandatory')
activityLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1), ).setIndexNames((0, "CME-MIB", "activityLogIndex"))
if mibBuilder.loadTexts: activityLogEntry.setStatus('mandatory')
activityLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogIndex.setStatus('mandatory')
activityLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogString.setStatus('mandatory')
activityLogAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activityLogAcknowledge.setStatus('mandatory')
activityLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogAttribute.setStatus('mandatory')
autoFTPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5))
autoFTPCallMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("ftp", 1), ("tftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallMode.setStatus('mandatory')
autoFTPCallAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallAddr.setStatus('mandatory')
autoFTPCallPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallPort.setStatus('mandatory')
autoFTPCallUserID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallUserID.setStatus('mandatory')
autoFTPCallPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallPassword.setStatus('mandatory')
callHomeExclusionEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6))
readCallHomeExclusionEventTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1), )
if mibBuilder.loadTexts: readCallHomeExclusionEventTable.setStatus('mandatory')
readCallHomeExclusionEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1), ).setIndexNames((0, "CME-MIB", "readCallHomeExclusionEventIndex"))
if mibBuilder.loadTexts: readCallHomeExclusionEventEntry.setStatus('mandatory')
readCallHomeExclusionEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCallHomeExclusionEventIndex.setStatus('mandatory')
readCallHomeExclusionEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCallHomeExclusionEventID.setStatus('mandatory')
addCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCallHomeExclusionEvent.setStatus('mandatory')
rmCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmCallHomeExclusionEvent.setStatus('mandatory')
rmAllCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmAllCallHomeExclusionEvent.setStatus('mandatory')
componentPowerServiceReset = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10))
bladePowerServiceResetTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1), )
if mibBuilder.loadTexts: bladePowerServiceResetTable.setStatus('mandatory')
bladePowerServiceResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1), ).setIndexNames((0, "CME-MIB", "bladePowerServiceResetIndex"))
if mibBuilder.loadTexts: bladePowerServiceResetEntry.setStatus('mandatory')
bladePowerServiceResetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerServiceResetIndex.setStatus('mandatory')
bladePowerServiceResetBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerServiceResetBladeId.setStatus('mandatory')
bladePowerServiceResetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auxPowerOff", 0), ("auxPowerOn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerServiceResetStatus.setStatus('mandatory')
bladePowerServiceResetCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noOperation", 0), ("resetVirtualReseatOperation", 1), ("resetHardRestartOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePowerServiceResetCmd.setStatus('mandatory')
smPowerServiceResetTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2), )
if mibBuilder.loadTexts: smPowerServiceResetTable.setStatus('mandatory')
smPowerServiceResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1), ).setIndexNames((0, "CME-MIB", "smPowerServiceResetIndex"))
if mibBuilder.loadTexts: smPowerServiceResetEntry.setStatus('mandatory')
smPowerServiceResetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPowerServiceResetIndex.setStatus('mandatory')
smPowerServiceResetSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("switch1", 1), ("switch2", 2), ("switch3", 3), ("switch4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPowerServiceResetSwitchId.setStatus('mandatory')
smPowerServiceResetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auxPowerOff", 0), ("auxPowerOn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPowerServiceResetStatus.setStatus('mandatory')
smPowerServiceResetCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetVirtualReseatOperation", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smPowerServiceResetCmd.setStatus('mandatory')
componentServiceData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15))
componentServiceDataTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1), )
if mibBuilder.loadTexts: componentServiceDataTable.setStatus('mandatory')
componentServiceDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1), ).setIndexNames((0, "CME-MIB", "componentServiceDataTopologyPath"))
if mibBuilder.loadTexts: componentServiceDataEntry.setStatus('mandatory')
componentServiceDataTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceDataTopologyPath.setStatus('mandatory')
componentServiceDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceDataComponentName.setStatus('mandatory')
componentServiceDataDumpInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("processorDump", 1), ("platformDump", 2), ("partitionDump", 3), ("serviceData", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentServiceDataDumpInitiate.setStatus('mandatory')
componentServiceDataDumpRetrieve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("processorDump", 1), ("platformDump", 2), ("partitionDump", 3), ("serviceData", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentServiceDataDumpRetrieve.setStatus('mandatory')
componentServiceDataDumpCapabilityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceDataDumpCapabilityMask.setStatus('mandatory')
componentServiceDataDumpInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("inProgress", 1), ("notInProgress", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceDataDumpInProgress.setStatus('mandatory')
componentServiceDataStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceDataStatus.setStatus('mandatory')
componentServiceDataStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceDataStatusDetails.setStatus('mandatory')
componentServiceDataTableCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentServiceDataTableCacheTimeout.setStatus('mandatory')
downloadMMServiceData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21))
downloadMMServiceDataFileCreateAndDownload = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadMMServiceDataFileCreateAndDownload.setStatus('mandatory')
downloadMMServiceDataStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ready", 0), ("fileGenerationInProgress", 1), ("fileDownloadInProgress", 2), ("cancelingDownload", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: downloadMMServiceDataStatus.setStatus('mandatory')
downloadMMServiceDataResult = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("permissionFailed", 1), ("fileGenerationFailed", 2), ("fileDownloadFailed", 3), ("canceled", 4), ("complete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadMMServiceDataResult.setStatus('mandatory')
downloadMMServiceDataCancelDownload = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cancel", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadMMServiceDataCancelDownload.setStatus('mandatory')
scaling = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24))
scalableComplexTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1), )
if mibBuilder.loadTexts: scalableComplexTable.setStatus('mandatory')
scalableComplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1), ).setIndexNames((0, "CME-MIB", "scalableComplexTopologyPath"))
if mibBuilder.loadTexts: scalableComplexEntry.setStatus('mandatory')
scalableComplexTopologyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexTopologyPath.setStatus('mandatory')
scalableComplexIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexIdentifier.setStatus('mandatory')
scalableComplexNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeName.setStatus('mandatory')
scalableComplexNodeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("critical", 3), ("kernelMode", 4), ("discovering", 5), ("commError", 6), ("noPower", 7), ("flashing", 8), ("initFailure", 9), ("insufficientPower", 10), ("powerDenied", 11), ("maintMode", 12), ("firehoseDump", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeHealthState.setStatus('mandatory')
scalableComplexNodePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("standby", 3), ("hibernate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePowerState.setStatus('mandatory')
scalableComplexNodeResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeResources.setStatus('mandatory')
mibBuilder.exportSymbols("CME-MIB", groupRBSBladeAdministration=groupRBSBladeAdministration, switchMgmtNetworkCfg=switchMgmtNetworkCfg, ibmSupportCenter=ibmSupportCenter, componentFirmwarePendingRevision=componentFirmwarePendingRevision, spClockTimezoneDaylightMonth=spClockTimezoneDaylightMonth, componentMACAddressTableCacheTimeout=componentMACAddressTableCacheTimeout, remoteAccessRBSroleTable=remoteAccessRBSroleTable, temperatureCPU3WarningReset=temperatureCPU3WarningReset, componentVoltagesTopologyPath=componentVoltagesTopologyPath, bladeDetailsPowerControl=bladeDetailsPowerControl, vpdInformation=vpdInformation, componentLEDsDetailsIndex=componentLEDsDetailsIndex, standbyEthernetInterfaceIPv6StaticIPConfigEnabled=standbyEthernetInterfaceIPv6StaticIPConfigEnabled, componentStatusPowerEnable=componentStatusPowerEnable, rmmBistAndChassisStatus=rmmBistAndChassisStatus, currentlyLoggedInEntryIndex=currentlyLoggedInEntryIndex, groupRBSBlade12=groupRBSBlade12, cmmTemp=cmmTemp, backupRestoreMessage=backupRestoreMessage, state=state, bladeMACAddress6Vpd=bladeMACAddress6Vpd, smThreePortCfgCompatibility=smThreePortCfgCompatibility, backupRestoreStatus=backupRestoreStatus, smThreePortCfgSpeedSetting=smThreePortCfgSpeedSetting, bladeDaughterVpdManufacturingIDNumber=bladeDaughterVpdManufacturingIDNumber, componentFirmwareReleaseLevel=componentFirmwareReleaseLevel, pd1TopologyPath=pd1TopologyPath, rbsBlade2=rbsBlade2, syslogCollectorConfig=syslogCollectorConfig, temperatureBladeId=temperatureBladeId, chassisInfoVpd=chassisInfoVpd, bladeDiagsVpdBuildId=bladeDiagsVpdBuildId, smExtEthPortsEnableDisable=smExtEthPortsEnableDisable, rbsBlade7=rbsBlade7, groupRBSBlade14=groupRBSBlade14, tcm=tcm, cmeMidPid=cmeMidPid, powerPolicyTable=powerPolicyTable, syslogCollectorTable=syslogCollectorTable, cmeFirmwareVersion=cmeFirmwareVersion, componentServiceResetTable=componentServiceResetTable, remoteAccessIdEntrySNMPv3Provisioned=remoteAccessIdEntrySNMPv3Provisioned, smFourPortCfgLinkSetting=smFourPortCfgLinkSetting, componentIPv6AddressTableCacheTimeout=componentIPv6AddressTableCacheTimeout, componentIPv4ConfigMACAddr=componentIPv4ConfigMACAddr, web=web, cmeRemoteChassis=cmeRemoteChassis, chassisPMsInstalled=chassisPMsInstalled, componentServiceResetStatus=componentServiceResetStatus, snmpAgentCommunityConfig=snmpAgentCommunityConfig, systemChassis=systemChassis, componentInventoryCLEI=componentInventoryCLEI, componentFirmwareTopologyPath=componentFirmwareTopologyPath, securityPolicyStatusEntry=securityPolicyStatusEntry, componentTemperaturesShutdownThreshold=componentTemperaturesShutdownThreshold, rbistPhysicalNetworkLink=rbistPhysicalNetworkLink, rearLEDCardThermalTrendingTable=rearLEDCardThermalTrendingTable, altContactName=altContactName, smMainApp2VpdBuildId=smMainApp2VpdBuildId, spClockTimezoneDaylightIntervalInMinutes=spClockTimezoneDaylightIntervalInMinutes, temperatureSensor6WarningReset=temperatureSensor6WarningReset, smCurrentIPConfigMethod=smCurrentIPConfigMethod, activityLogAttribute=activityLogAttribute, ldapServer3PortNumber=ldapServer3PortNumber, smManufacturingID=smManufacturingID, mmHardwareVpdFruNumber=mmHardwareVpdFruNumber, spEthOverUSBInterfaceIndex=spEthOverUSBInterfaceIndex, mmExtIpAddress=mmExtIpAddress, componentInventoryFRUSerialNumber=componentInventoryFRUSerialNumber, bladePowerTrendingPeriod=bladePowerTrendingPeriod, groupRBSChassis=groupRBSChassis, cmeChassisSerial=cmeChassisSerial, remoteAlertIdEmailAddr=remoteAlertIdEmailAddr, fanPackLEDs=fanPackLEDs, extEthernetInterfaceIPv6StaticIPConfig=extEthernetInterfaceIPv6StaticIPConfig, trespassWarning=trespassWarning, bistBladesCommunicating=bistBladesCommunicating, passiveAirFilterStatus=passiveAirFilterStatus, componentIOCompatibilityComponentName=componentIOCompatibilityComponentName, smFirmwareInfoIndex=smFirmwareInfoIndex, componentEthOverUSBInterfaceTable=componentEthOverUSBInterfaceTable, bladeSensor19VoltHighWarning=bladeSensor19VoltHighWarning, bladeDetailsDynamicPowerSaver=bladeDetailsDynamicPowerSaver, ldapServer3NameOrIPAddress=ldapServer3NameOrIPAddress, maxSessionsPerLDAPUser=maxSessionsPerLDAPUser, ambientTemp=ambientTemp, fanPackAverageSpeed=fanPackAverageSpeed, componentIPv6AddressEntry=componentIPv6AddressEntry, componentUniqueIDsValue=componentUniqueIDsValue, rearLEDCardHardwareVpdManufacturingIDNumber=rearLEDCardHardwareVpdManufacturingIDNumber, smCfgCtrlOnResetEnableDisable=smCfgCtrlOnResetEnableDisable, bladeConnectionType=bladeConnectionType, extEthernetInterfaceDataRate=extEthernetInterfaceDataRate, restartStandbyMM=restartStandbyMM, bladeExpCardVpdHardwareRevision=bladeExpCardVpdHardwareRevision, ledSMIndex=ledSMIndex, standbyEthernetInterfaceDHCPv6Enabled=standbyEthernetInterfaceDHCPv6Enabled, fileSystemSpaceAvailable=fileSystemSpaceAvailable, switchModulePowerOnOff=switchModulePowerOnOff, bladeSensor8Volt=bladeSensor8Volt, trespassMessage=trespassMessage, bladeIPv4ConfigPhysicalLinkStatus=bladeIPv4ConfigPhysicalLinkStatus, ledSMSlot=ledSMSlot, smNewIPAddr=smNewIPAddr, bladePolicyWakeOnLanControlEnable=bladePolicyWakeOnLanControlEnable, smIPv6Address=smIPv6Address, chassisProductId=chassisProductId, componentPowerDetailsPowerControl=componentPowerDetailsPowerControl, hotAirRecircStatusTopologyPath=hotAirRecircStatusTopologyPath, nodeFirmwareAnalysisIndex=nodeFirmwareAnalysisIndex, smFourPortCfgMedia=smFourPortCfgMedia, httpProxyLocation=httpProxyLocation, bladeManagementCardVpdSubManufacturerId=bladeManagementCardVpdSubManufacturerId, extEthernetInterfaceIPv6StatelessAutoConfigEnabled=extEthernetInterfaceIPv6StatelessAutoConfigEnabled, rbistBladesInstalled=rbistBladesInstalled, slpEnable=slpEnable, firmwareUpdateTftpServer=firmwareUpdateTftpServer, rearLEDCardHardwareVpdPartNumber=rearLEDCardHardwareVpdPartNumber, pmHardwareVpd=pmHardwareVpd, bladeDaughterCard1MACAddress2Vpd=bladeDaughterCard1MACAddress2Vpd, temperatureSensor2WarningReset=temperatureSensor2WarningReset, smThreePortCfgIndex=smThreePortCfgIndex, ledBladeState=ledBladeState, smMainApp3VpdBuildDate=smMainApp3VpdBuildDate, bladePowerTrendingSampleMax=bladePowerTrendingSampleMax, bladeSensor14VoltHighWarning=bladeSensor14VoltHighWarning, smTwoPortCfgWidth=smTwoPortCfgWidth, remoteAccessIds=remoteAccessIds, bladeSensor13Volt=bladeSensor13Volt, spClockTimezoneSetting=spClockTimezoneSetting, powerRestartBladeExists=powerRestartBladeExists, componentLEDsDetailsEntry=componentLEDsDetailsEntry, downloadMMServiceDataResult=downloadMMServiceDataResult, bladeDaughterCard4MACAddress7Vpd=bladeDaughterCard4MACAddress7Vpd, ehiThermalTrendingAvgEHI=ehiThermalTrendingAvgEHI, chassisPowerTrendingSampleTimeStamp=chassisPowerTrendingSampleTimeStamp, ledFanPackIndex=ledFanPackIndex, httpPortAssignment=httpPortAssignment, mmHardwareVpdTable=mmHardwareVpdTable, componentPowerServiceReset=componentPowerServiceReset, remoteAccessIdEntryIndex=remoteAccessIdEntryIndex, dhcpDomainName=dhcpDomainName, ldapTargetName=ldapTargetName, bistPrimaryMainAppFlashImage=bistPrimaryMainAppFlashImage, componentConfigurationTable=componentConfigurationTable, bladeSensor28VoltLowWarning=bladeSensor28VoltLowWarning, trespassWarningDefault=trespassWarningDefault, bladeMACAddress8Vpd=bladeMACAddress8Vpd, warnLogFull=warnLogFull, bladeSideCardMACAddress2Vpd=bladeSideCardMACAddress2Vpd, smFirmwareAnalysisIndex=smFirmwareAnalysisIndex, solBladeCapability=solBladeCapability, temperatureSensor5WarningReset=temperatureSensor5WarningReset, groupRBSBlade11=groupRBSBlade11, spClockTimezoneDaylightDayOfWeek=spClockTimezoneDaylightDayOfWeek, rbistRtc=rbistRtc, readAuditLogAttribute=readAuditLogAttribute, smFirmwareAnalysisTopology=smFirmwareAnalysisTopology, ntpEnable=ntpEnable, smFourPortCfgSpeedSetting=smFourPortCfgSpeedSetting, smFirmwareAnalysisProductId=smFirmwareAnalysisProductId, rbsSwitchModuleOperator=rbsSwitchModuleOperator, ledChassisFanExists=ledChassisFanExists, bladeMonitors=bladeMonitors, smCurrentIPInfoTable=smCurrentIPInfoTable, componentUniqueIDsEntry=componentUniqueIDsEntry, bladeHSDaughterCard1MACAddress3Vpd=bladeHSDaughterCard1MACAddress3Vpd, bladeSensor26VoltHighWarning=bladeSensor26VoltHighWarning, hotAirRecircStatusTable=hotAirRecircStatusTable, bladePlus2pt5Volt=bladePlus2pt5Volt, cmeChassisUuid=cmeChassisUuid, componentInventoryUUID=componentInventoryUUID, chassisInformation=chassisInformation, bladeSensor19VoltLowWarning=bladeSensor19VoltLowWarning, pmHardwareVpdManufDate=pmHardwareVpdManufDate, companyName=companyName, bladeRemoteWakeOnLanEnable=bladeRemoteWakeOnLanEnable, sftpEnable=sftpEnable, componentInventoryProductID=componentInventoryProductID, bladeDaughterCard4MACAddress3Vpd=bladeDaughterCard4MACAddress3Vpd, smMainAppVpdEntry=smMainAppVpdEntry, componentInformation=componentInformation, serviceDataBladePowerState=serviceDataBladePowerState, cmeIpv6Protocols=cmeIpv6Protocols, rbistEthernetPort1=rbistEthernetPort1, licenseKeyComponentIndex=licenseKeyComponentIndex, chassisFanHardwareVpdIndex=chassisFanHardwareVpdIndex, bistChassisFansMUXBInstalled=bistChassisFansMUXBInstalled, cinGlobalEnable=cinGlobalEnable, bladeTemperatureThresholdsTable=bladeTemperatureThresholdsTable, solGlobalConfig=solGlobalConfig, bladeVoltagesEntry=bladeVoltagesEntry, cmeChassisMachineTypeMode=cmeChassisMachineTypeMode, chassisFanCoolingZone=chassisFanCoolingZone, InetAddressIPv6=InetAddressIPv6, bladePolicyControlEntry=bladePolicyControlEntry, extEthernetInterfaceHostName=extEthernetInterfaceHostName, rbsBlade11=rbsBlade11, bladeAndExpCardWwnGuidVpdType=bladeAndExpCardWwnGuidVpdType, componentPowerTable=componentPowerTable, componentTemperaturesSensorValue=componentTemperaturesSensorValue, reloadMACAddress=reloadMACAddress, systemFan=systemFan, componentIPv6ConfigTopologyPath=componentIPv6ConfigTopologyPath, bladeSensor7VoltLowWarning=bladeSensor7VoltLowWarning, ehiThermalTrendingTable=ehiThermalTrendingTable, hotAirRecircTempDeltaThresh=hotAirRecircTempDeltaThresh, standbyExtEthernetInterfaceBIA=standbyExtEthernetInterfaceBIA, rbistChassisFansMUXAInstalled=rbistChassisFansMUXAInstalled, cfmThermalTrendingTable=cfmThermalTrendingTable, remoteAccessIdEntrySessionCount=remoteAccessIdEntrySessionCount, bladeSensor9VoltHighWarning=bladeSensor9VoltHighWarning, smRestartAndRunFullDiag=smRestartAndRunFullDiag, componentLEDs=componentLEDs, ehiThermalTrendingIndex=ehiThermalTrendingIndex, ldapRootDN=ldapRootDN, reloadWwnGuidVpdData=reloadWwnGuidVpdData, componentServiceDataComponentName=componentServiceDataComponentName, remoteAlertsSystem=remoteAlertsSystem, chassisCoolingZoneComponent=chassisCoolingZoneComponent, activityLogAcknowledge=activityLogAcknowledge, customSecuritySettings=customSecuritySettings, backupRestoreAction=backupRestoreAction, smControlTable=smControlTable, componentSolSessionStatus=componentSolSessionStatus, componentIPv4ConfigSubnetMask=componentIPv4ConfigSubnetMask, bladePolicyControl=bladePolicyControl, temperatureSensor5Warning=temperatureSensor5Warning, cli=cli, scalableComplexNodeResources=scalableComplexNodeResources, securityPolicyState=securityPolicyState, fanPackIndex=fanPackIndex, fileManagementCmd=fileManagementCmd, remoteAccessIdEntryStatus=remoteAccessIdEntryStatus, bladeBiosVPDTable=bladeBiosVPDTable, hotAirRecircStatusSensorReading=hotAirRecircStatusSensorReading, solBladeEnable=solBladeEnable, bladeMACAddress4Vpd=bladeMACAddress4Vpd, networkConfiguration=networkConfiguration, chassisPowerTrendingSampleAve=chassisPowerTrendingSampleAve, readEnhancedEventLogSequenceNum=readEnhancedEventLogSequenceNum, chassisFanHardwareVpdFruSerial=chassisFanHardwareVpdFruSerial, spClockTimezoneStandardName=spClockTimezoneStandardName, readCallHomeExclusionEventTable=readCallHomeExclusionEventTable, componentPowerDetailsDynamicPowerSaver=componentPowerDetailsDynamicPowerSaver, roleIndex=roleIndex, componentIPv6ConfigName=componentIPv6ConfigName, spClockTimezoneTable=spClockTimezoneTable, bladeSideCardMACAddress4Vpd=bladeSideCardMACAddress4Vpd, tcpProtocols=tcpProtocols, componentInventoryTopologyPath=componentInventoryTopologyPath, bladeLEDsTable=bladeLEDsTable, clearSystemLog=clearSystemLog, chassisFanHardwareVpdManufDate=chassisFanHardwareVpdManufDate)
mibBuilder.exportSymbols("CME-MIB", componentIOCompatibilityTableCacheTimeout=componentIOCompatibilityTableCacheTimeout, extEthernetInterfaceIPv6=extEthernetInterfaceIPv6, bladeSensor27Volt=bladeSensor27Volt, mmBistAndChassisStatus=mmBistAndChassisStatus, componentHealthSummarySeverity=componentHealthSummarySeverity, readCallHomeExclusionEventID=readCallHomeExclusionEventID, powerModuleDescription=powerModuleDescription, mmSshServerHostKeySize=mmSshServerHostKeySize, bladeSideCardMACAddress7Vpd=bladeSideCardMACAddress7Vpd, mmSshServerHostKeyFingerprint=mmSshServerHostKeyFingerprint, activateNetworkUpdates=activateNetworkUpdates, powerPolicyInformation=powerPolicyInformation, bladeVRM1Volt=bladeVRM1Volt, chassisFanHardwareVpdProductId=chassisFanHardwareVpdProductId, componentVoltagesLowWarningThreshold=componentVoltagesLowWarningThreshold, bladePlus2pt5VoltHighWarning=bladePlus2pt5VoltHighWarning, componentPowerName=componentPowerName, componentIPv6Config=componentIPv6Config, pmControllerVPDEntry=pmControllerVPDEntry, warnFan=warnFan, bladeHardwareVpdManufDate=bladeHardwareVpdManufDate, chassisResponseVersion=chassisResponseVersion, rbsBladeAdministration=rbsBladeAdministration, standbyExtEthernetInterface=standbyExtEthernetInterface, configurationBladeId=configurationBladeId, powerRestartIndex=powerRestartIndex, componentUniqueIDsIndex=componentUniqueIDsIndex, bladeExpCardVpdProductId=bladeExpCardVpdProductId, bladePlus1pt5VoltLowWarning=bladePlus1pt5VoltLowWarning, ledBladePowerState=ledBladePowerState, groupRBSroleIndex=groupRBSroleIndex, groupRBSSwitch9=groupRBSSwitch9, fuelGaugePowerDomainNumber=fuelGaugePowerDomainNumber, ntpConfig=ntpConfig, componentServiceDataStatusDetails=componentServiceDataStatusDetails, activityLogTable=activityLogTable, bladeExpCardVpdUuid=bladeExpCardVpdUuid, readAuditLogNumber=readAuditLogNumber, bladeSensor1VoltHighWarning=bladeSensor1VoltHighWarning, switchCurrentNwCfg=switchCurrentNwCfg, mmSshServerConfig=mmSshServerConfig, componentPowerDetailsTopologyPath=componentPowerDetailsTopologyPath, bladeSensor21VoltLowWarning=bladeSensor21VoltLowWarning, internalTemp=internalTemp, tcpApplicationConfig=tcpApplicationConfig, sshPortAssignment=sshPortAssignment, rbsSwitch10=rbsSwitch10, ldapServer1PortNumber=ldapServer1PortNumber, componentIOCompatibilityIOMPower=componentIOCompatibilityIOMPower, bladeSysMgmtProcVpdExists=bladeSysMgmtProcVpdExists, extEthernetInterfaceFloatingIPAddress=extEthernetInterfaceFloatingIPAddress, networkChangeNotification=networkChangeNotification, smThreePortCfgDataRate=smThreePortCfgDataRate, smMainAppVpdExists=smMainAppVpdExists, bladeHealthSummaryEventID=bladeHealthSummaryEventID, bladeDiagsVPDTable=bladeDiagsVPDTable, vlanCMMEntry=vlanCMMEntry, ntpAuthEnable=ntpAuthEnable, switchPowerTrendingSampleId=switchPowerTrendingSampleId, changePasswordFirstAccess=changePasswordFirstAccess, hotAirRecircStatusName=hotAirRecircStatusName, switchPowerTrendingSampleMin=switchPowerTrendingSampleMin, rbistUpdateTime=rbistUpdateTime, smTwoPortCfgAvailSpeeds=smTwoPortCfgAvailSpeeds, spEthOverUSBInterfaceBladeExists=spEthOverUSBInterfaceBladeExists, bladeManagementCardVpdHardwareRevisionString=bladeManagementCardVpdHardwareRevisionString, bladeDaughterCard4MACAddress6Vpd=bladeDaughterCard4MACAddress6Vpd, securityPolicyStatusComponentType=securityPolicyStatusComponentType, cinStatusTable=cinStatusTable, componentFirmwareFilename=componentFirmwareFilename, componentMACAddressTopologyPath=componentMACAddressTopologyPath, remoteAccessIdEntryPwdCompliant=remoteAccessIdEntryPwdCompliant, firmwareUpdateStart=firmwareUpdateStart, smIPv6AddressDefaultRoute=smIPv6AddressDefaultRoute, standbyDhcpSubnetMask=standbyDhcpSubnetMask, mmSshServerHostKeyGenerateProgress=mmSshServerHostKeyGenerateProgress, componentInventoryEntry=componentInventoryEntry, bladeAndExpCardWwnGuidVpdIndex=bladeAndExpCardWwnGuidVpdIndex, restartSPImmediately=restartSPImmediately, dnsServerIPAddress3=dnsServerIPAddress3, chassisFanHardwareVpdHardwareRevision=chassisFanHardwareVpdHardwareRevision, cmeChassisFru=cmeChassisFru, commandModePortAssignment=commandModePortAssignment, readAuditLogTable=readAuditLogTable, mmSshClientAuthPubKeyFileName=mmSshClientAuthPubKeyFileName, bladeManagementCardVpdMachineType=bladeManagementCardVpdMachineType, rearLEDCardThermalTrendingTemperatureAvg=rearLEDCardThermalTrendingTemperatureAvg, smFirmwareAnalysisTable=smFirmwareAnalysisTable, bootSequenceInfoMaxBootDevices=bootSequenceInfoMaxBootDevices, nodeFirmwareAnalysisMachineTypeModel=nodeFirmwareAnalysisMachineTypeModel, bistExternalI2CDevices=bistExternalI2CDevices, temperatureSensor7Warning=temperatureSensor7Warning, rbsSwitch4=rbsSwitch4, temperatureCPU4HardShutdown=temperatureCPU4HardShutdown, componentSolDestinationMAC=componentSolDestinationMAC, groupRBSBlade1=groupRBSBlade1, componentInventoryAssetID=componentInventoryAssetID, standbyHostName=standbyHostName, smFirmwareInformation=smFirmwareInformation, componentStatusName=componentStatusName, standbyDhcpTertiaryDNSServer=standbyDhcpTertiaryDNSServer, readEventLogAuxMessage=readEventLogAuxMessage, componentFirmwareComponentDescription=componentFirmwareComponentDescription, ledBladeIdentify=ledBladeIdentify, smThreePortCfgCableLength=smThreePortCfgCableLength, bladeDaughterCard4MACAddress2Vpd=bladeDaughterCard4MACAddress2Vpd, smHardwareVpdWwnGuidType=smHardwareVpdWwnGuidType, bladeIPv6AddressIndex=bladeIPv6AddressIndex, bladeBiosVPDEntry=bladeBiosVPDEntry, componentFirmwareType=componentFirmwareType, bladePlus3pt3Volt=bladePlus3pt3Volt, componentTimeTable=componentTimeTable, componentVoltagesSensorIndex=componentVoltagesSensorIndex, cmeIpv4Status=cmeIpv4Status, hotAirRecircMonitoring=hotAirRecircMonitoring, pd1BladePrimarySlot=pd1BladePrimarySlot, bladePowerTrendingSampleTable=bladePowerTrendingSampleTable, groupIdsTable=groupIdsTable, bladeHardwareVpdTable=bladeHardwareVpdTable, uplinkCheckDelay=uplinkCheckDelay, complexPasswordRules=complexPasswordRules, temperatureCPU3=temperatureCPU3, switchPowerTrendingSampleTimeStamp=switchPowerTrendingSampleTimeStamp, componentHealthSummaryDescription=componentHealthSummaryDescription, extEthernetInterfaceType=extEthernetInterfaceType, pmControllerVpdRevision=pmControllerVpdRevision, componentInventoryManufactureIDNum=componentInventoryManufactureIDNum, smPowerRestartIndex=smPowerRestartIndex, rbsSwitch9=rbsSwitch9, chassisHardwareRevisionString=chassisHardwareRevisionString, componentInventorySubManufactureID=componentInventorySubManufactureID, standbyDhcpHostName=standbyDhcpHostName, componentSolIpAddr=componentSolIpAddr, extEthernetInterfaceGatewayIPAddress=extEthernetInterfaceGatewayIPAddress, bladeDaughterCard1MACAddress7Vpd=bladeDaughterCard1MACAddress7Vpd, vlanCMMIPv4SubnetRouteMask1=vlanCMMIPv4SubnetRouteMask1, httpProxyEnable=httpProxyEnable, configurationBladeName=configurationBladeName, componentInventoryProductName=componentInventoryProductName, ibmAgents=ibmAgents, powerPolicyActivate=powerPolicyActivate, spEthOverUSBInterfaceEnable=spEthOverUSBInterfaceEnable, bladeSysMgmtProcVPDTable=bladeSysMgmtProcVPDTable, componentHealthSummaryEntry=componentHealthSummaryEntry, powerModuleHealth=powerModuleHealth, smCurrentSubnetMask=smCurrentSubnetMask, bladeDetailsEffectiveClockRate=bladeDetailsEffectiveClockRate, bladeHSDaughterCard1MACAddress1Vpd=bladeHSDaughterCard1MACAddress1Vpd, bladeDaughterCard4MACAddress8Vpd=bladeDaughterCard4MACAddress8Vpd, componentInventoryDescription=componentInventoryDescription, rbsSupervisor=rbsSupervisor, bladeDetailsMaximumClockRate=bladeDetailsMaximumClockRate, mmPresent=mmPresent, cryptographyModeDetailsEntry=cryptographyModeDetailsEntry, componentInventoryTable=componentInventoryTable, componentIOCompatibilityEntry=componentIOCompatibilityEntry, fileSize=fileSize, passwordExpirationPeriod=passwordExpirationPeriod, bladeSensor21Volt=bladeSensor21Volt, chassisCoolingZoneStatus=chassisCoolingZoneStatus, componentFirmwareLevelStatus=componentFirmwareLevelStatus, bladeIPv6AddressEntryIndex=bladeIPv6AddressEntryIndex, bladeWidth=bladeWidth, componentSolConsoleLoginStart=componentSolConsoleLoginStart, bladeBayDataEntry=bladeBayDataEntry, dnsServerIPv6Address3=dnsServerIPv6Address3, smThreePortCfgAvailSpeeds=smThreePortCfgAvailSpeeds, mmStatusIndex=mmStatusIndex, componentLevelActivityVpdManufacturingId=componentLevelActivityVpdManufacturingId, temperatureSensor8WarningReset=temperatureSensor8WarningReset, bladePowerTrendingSampleMin=bladePowerTrendingSampleMin, generalRemoteCfg=generalRemoteCfg, powerOnOffBlade=powerOnOffBlade, bootDeviceOrder=bootDeviceOrder, bladeAndExpCardWwnGuidVpd3=bladeAndExpCardWwnGuidVpd3, bladeServiceDataTable=bladeServiceDataTable, groupIdsEntry=groupIdsEntry, extEthernetInterfaceIPv6StaticIPConfigEnabled=extEthernetInterfaceIPv6StaticIPConfigEnabled, componentLEDsDetailsTable=componentLEDsDetailsTable, powerPolicyEntry=powerPolicyEntry, monitorLogStateEvents=monitorLogStateEvents, nodeConnectivityEntry=nodeConnectivityEntry, ldapGroupFilter=ldapGroupFilter, bladeSysMgmtProcVpdId=bladeSysMgmtProcVpdId, dhcpHostName=dhcpHostName, nodeConnectivityStatus=nodeConnectivityStatus, snmpUserProfileEntryViewType=snmpUserProfileEntryViewType, logicalUplinkCheckDelayInSecs=logicalUplinkCheckDelayInSecs, bladeSensor25VoltHighWarning=bladeSensor25VoltHighWarning, bladeDetailsPcapGuaranteedMin=bladeDetailsPcapGuaranteedMin, componentIPv6Address=componentIPv6Address, solBladeConsoleLoginEnd=solBladeConsoleLoginEnd, mmSshClientAuthRemoteAccessIdIndex=mmSshClientAuthRemoteAccessIdIndex, chassisPowerTrendingSampleTable=chassisPowerTrendingSampleTable, standbyEthernetInterfaceStatelessAutoConfigAddressesIndex=standbyEthernetInterfaceStatelessAutoConfigAddressesIndex, componentPowerAction=componentPowerAction, extEthernetInterfaceStatelessAutoConfigAddressesIndex=extEthernetInterfaceStatelessAutoConfigAddressesIndex, chassisFruNumber=chassisFruNumber, remoteAlertIdEntryStatus=remoteAlertIdEntryStatus, mmHardwareVpdHardwareRevision=mmHardwareVpdHardwareRevision, bistChassisFansMUXBFunctional=bistChassisFansMUXBFunctional, componentConfigurationPowerOnRestartDelay=componentConfigurationPowerOnRestartDelay, backupRestore=backupRestore, smHardwareVpdWidth=smHardwareVpdWidth, componentVoltagesTable=componentVoltagesTable, spClockTimezoneCaption=spClockTimezoneCaption, bladeExpCardVpdMachineType=bladeExpCardVpdMachineType, scalableComplexTable=scalableComplexTable, systemHealthSummaryEntry=systemHealthSummaryEntry, mmMainApplVpdBuildId=mmMainApplVpdBuildId, nodeFirmwareAnalysisTable=nodeFirmwareAnalysisTable, snmpCommunityEntryCommunityIpAddress2=snmpCommunityEntryCommunityIpAddress2, componentTimeTopologyPath=componentTimeTopologyPath, altEmailAddress=altEmailAddress, snmpSystemAgentTrapsDisable=snmpSystemAgentTrapsDisable, tftpEnable=tftpEnable, ftpPortAssignment=ftpPortAssignment, bladeSensor6Temp=bladeSensor6Temp, smThreePortCfgMedia=smThreePortCfgMedia, temperatureThresholdIndex=temperatureThresholdIndex, downloadMMServiceDataStatus=downloadMMServiceDataStatus, rbsChassis=rbsChassis, bladeSensor30VoltLowWarning=bladeSensor30VoltLowWarning, vlanCMMVlanId=vlanCMMVlanId, rearLEDCardThermalTrendingTimeStamp=rearLEDCardThermalTrendingTimeStamp, leds=leds, fanPackState=fanPackState, componentInventoryManufactureDate=componentInventoryManufactureDate, componentTemperaturesSensorIndex=componentTemperaturesSensorIndex, vlanCMMIPv6SubnetRoutePrefixLen3=vlanCMMIPv6SubnetRoutePrefixLen3, commandModeEnable=commandModeEnable, smNewIPInfoEntry=smNewIPInfoEntry, dnsPriority=dnsPriority, standbyExtEthernetInterfaceGatewayIPAddress=standbyExtEthernetInterfaceGatewayIPAddress, bladeManagementCardVpdClei=bladeManagementCardVpdClei, smHardwareVpdManufDate=smHardwareVpdManufDate, smDHCPv6ConfigEnabled=smDHCPv6ConfigEnabled, componentServiceDataStatus=componentServiceDataStatus, bladeManagementCardVpdFruNumber=bladeManagementCardVpdFruNumber, componentServiceResetCmd=componentServiceResetCmd, chassisFanSpeed=chassisFanSpeed, ldapServer1NameOrIPAddress=ldapServer1NameOrIPAddress, smIPv6AddressEntryIndex=smIPv6AddressEntryIndex, bladeSensor28VoltHighWarning=bladeSensor28VoltHighWarning, temperatureSensor1Warning=temperatureSensor1Warning, smIPv6StaticIndex=smIPv6StaticIndex, pd1ModuleAllocatedPowerMax=pd1ModuleAllocatedPowerMax, smPowerRestartEntry=smPowerRestartEntry, cinEntry=cinEntry, componentConfigurationTopologyPath=componentConfigurationTopologyPath, bladeSensor24VoltLowWarning=bladeSensor24VoltLowWarning, bladeMACAddress2Vpd=bladeMACAddress2Vpd, smIPv6ConfigEnabled=smIPv6ConfigEnabled, smOnePortCfgIndex=smOnePortCfgIndex)
mibBuilder.exportSymbols("CME-MIB", mmHealthState=mmHealthState, postalCode=postalCode, mmSshClientAuthPubKeyFileFormat=mmSshClientAuthPubKeyFileFormat, smFirmwareAnalysisFirmwareType=smFirmwareAnalysisFirmwareType, smOnePortCfgTable=smOnePortCfgTable, bladeSensor23Volt=bladeSensor23Volt, standbyFirmwareUpdateStatus=standbyFirmwareUpdateStatus, ftpDataPortAssignment=ftpDataPortAssignment, vlanCMMTagging=vlanCMMTagging, vlanCMMIPv6SubnetRoutePrefixLen2=vlanCMMIPv6SubnetRoutePrefixLen2, portParity=portParity, smOnePortCfgDataRate=smOnePortCfgDataRate, smIPv6ConfigIndex=smIPv6ConfigIndex, rbsBladeConfiguration=rbsBladeConfiguration, componentLevelActivityVpdBayNumber=componentLevelActivityVpdBayNumber, cryptographyModeDetailsIndex=cryptographyModeDetailsIndex, standbyDhcpIPAddress=standbyDhcpIPAddress, chassisFanHardwareVpdUuid=chassisFanHardwareVpdUuid, groupRBSChassisConfiguration=groupRBSChassisConfiguration, systemHealthSummaryDateTime=systemHealthSummaryDateTime, pmHardwareVpdBayNumber=pmHardwareVpdBayNumber, smNewSubnetMask=smNewSubnetMask, chassisFanHardwareVpdBayNumber=chassisFanHardwareVpdBayNumber, vlanCMMTableCacheTimeout=vlanCMMTableCacheTimeout, policyLocalPowerControlEnable=policyLocalPowerControlEnable, pd1ModuleStatus=pd1ModuleStatus, chassisFanDetails=chassisFanDetails, smBootRomVpdId=smBootRomVpdId, temperatureSensor3Warning=temperatureSensor3Warning, rbsSwitch5=rbsSwitch5, componentTimeNTPFrequency=componentTimeNTPFrequency, bistChassisFansFunctional=bistChassisFansFunctional, temperatureDASD1HardShutdown=temperatureDASD1HardShutdown, remoteAlertIdEntryIndex=remoteAlertIdEntryIndex, componentUniqueIDsTopologyPath=componentUniqueIDsTopologyPath, bladeHardwareVpdManufacturingId=bladeHardwareVpdManufacturingId, mmSshClientAuthPubKeySize=mmSshClientAuthPubKeySize, standbyDhcpDHCPServer=standbyDhcpDHCPServer, solBladeTable=solBladeTable, chassisFanSpeedRPM=chassisFanSpeedRPM, smPowerServiceResetCmd=smPowerServiceResetCmd, bladeDaughterCard5MACAddress2Vpd=bladeDaughterCard5MACAddress2Vpd, reloadVpdData=reloadVpdData, bladeConnectionType4=bladeConnectionType4, fanPackEntry=fanPackEntry, smStackingModeInfo=smStackingModeInfo, smHardwareVpd=smHardwareVpd, componentLEDsDetailsComponentType=componentLEDsDetailsComponentType, solExitToCliKeySeq=solExitToCliKeySeq, mmHardwareVpdManufacturingIDNumber=mmHardwareVpdManufacturingIDNumber, mmSshClientAuthPubKeyAction=mmSshClientAuthPubKeyAction, cmeRemoteChassisEntry=cmeRemoteChassisEntry, restartBladeSMP=restartBladeSMP, bladeIPv6ConfigStatelessEnabled=bladeIPv6ConfigStatelessEnabled, bladeBiosVpdDate=bladeBiosVpdDate, cinStatusIndex=cinStatusIndex, bladeDetailsIndex=bladeDetailsIndex, temperatureSensor2HardShutdown=temperatureSensor2HardShutdown, componentFirmwareReleaseDate=componentFirmwareReleaseDate, syslogCollectorEnable=syslogCollectorEnable, componentLEDsTableCacheTimeout=componentLEDsTableCacheTimeout, componentVoltagesComponentName=componentVoltagesComponentName, bladeSysMgmtProcVpdName=bladeSysMgmtProcVpdName, smHardwareVpdManufacturingIDNumber=smHardwareVpdManufacturingIDNumber, pmFirmwareVpd=pmFirmwareVpd, bladeDaughterCard2MACAddress7Vpd=bladeDaughterCard2MACAddress7Vpd, pd1ModuleAllocatedPowerMin=pd1ModuleAllocatedPowerMin, temperatureBladePowerState=temperatureBladePowerState, bladePolicyLocalPowerControlEnable=bladePolicyLocalPowerControlEnable, smCfgCtrlEnableDisable=smCfgCtrlEnableDisable, groupRBSSwitch5=groupRBSSwitch5, bladeSensor5Temp=bladeSensor5Temp, bladeSensor18VoltHighWarning=bladeSensor18VoltHighWarning, rearLEDCardThermalTrendingTemperatureMax=rearLEDCardThermalTrendingTemperatureMax, extEthernetInterfaceIPv6Config=extEthernetInterfaceIPv6Config, componentIPv4ConfigIPAddr=componentIPv4ConfigIPAddr, bladeSensor6VoltHighWarning=bladeSensor6VoltHighWarning, solConfiguration=solConfiguration, smOnePortCfgVendorName=smOnePortCfgVendorName, inactivityAlertPeriod=inactivityAlertPeriod, rmAllCallHomeExclusionEvent=rmAllCallHomeExclusionEvent, bladeDaughterVpdSerialNumber=bladeDaughterVpdSerialNumber, bayData=bayData, phoneNumberExt=phoneNumberExt, pd1Index=pd1Index, smFirmwareAnalysisEntry=smFirmwareAnalysisEntry, dhcpSubnetMask=dhcpSubnetMask, smNewIPInfoExists=smNewIPInfoExists, chassisFanHardwareVpdHardwareRevisionString=chassisFanHardwareVpdHardwareRevisionString, smFirmwareInfoImageIndex=smFirmwareInfoImageIndex, groupRBSroleTable=groupRBSroleTable, backupRestoreLogPush=backupRestoreLogPush, contactInformation=contactInformation, bladeId=bladeId, cmeChassisUser=cmeChassisUser, componentIPv4ConfigTopologyPath=componentIPv4ConfigTopologyPath, systemPower=systemPower, fuelGaugeIndex=fuelGaugeIndex, ntpIpAddressHostname=ntpIpAddressHostname, smPingEntry=smPingEntry, standbyExtEthernetInterfaceDataRate=standbyExtEthernetInterfaceDataRate, componentMACAddressEntry=componentMACAddressEntry, mmSshServerHostKeyTable=mmSshServerHostKeyTable, bladeSensor25VoltLowWarning=bladeSensor25VoltLowWarning, solAccumulateTimeout=solAccumulateTimeout, snmpAgentPortAssignment=snmpAgentPortAssignment, rearLEDCardHardwareVpdUuid=rearLEDCardHardwareVpdUuid, snmpUserProfileEntryIndex=snmpUserProfileEntryIndex, powerModuleHealthTable=powerModuleHealthTable, serviceDataBladeName=serviceDataBladeName, smBootRomVpdSwitchSubType=smBootRomVpdSwitchSubType, bayDataBladeName=bayDataBladeName, chassisCoolingZoneEntry=chassisCoolingZoneEntry, smPingIndex=smPingIndex, smThreePortCfgLinkSetting=smThreePortCfgLinkSetting, componentServiceResetName=componentServiceResetName, EntryStatus=EntryStatus, bladeSensor16Volt=bladeSensor16Volt, bladePowerTrendingSampleIndex=bladePowerTrendingSampleIndex, bladeSensor15Volt=bladeSensor15Volt, firmwareUpdateFileName=firmwareUpdateFileName, bladeIPv6ConfigPortIndex=bladeIPv6ConfigPortIndex, bladeDaughterVpdSubManufacturerId=bladeDaughterVpdSubManufacturerId, chassisNoOfMMsSupported=chassisNoOfMMsSupported, bladeHardwareVpdUuid=bladeHardwareVpdUuid, bladeDetailsEntry=bladeDetailsEntry, componentConfigurationTableCacheTimeout=componentConfigurationTableCacheTimeout, cfmThermalTrendingCurrentCFM=cfmThermalTrendingCurrentCFM, bladeSensor13VoltLowWarning=bladeSensor13VoltLowWarning, smThreePortCfgWidth=smThreePortCfgWidth, ntpUpdateClock=ntpUpdateClock, standbyDhcpPrimaryDNSServer=standbyDhcpPrimaryDNSServer, smPowerServiceResetEntry=smPowerServiceResetEntry, bladeSensor9VoltLowWarning=bladeSensor9VoltLowWarning, componentInventoryProcessorL1ICache=componentInventoryProcessorL1ICache, fuelGaugePowerInUsed=fuelGaugePowerInUsed, smFirmwareInfoModIndex=smFirmwareInfoModIndex, rbsSwitch7=rbsSwitch7, pmHardwareVpdPartNumber=pmHardwareVpdPartNumber, componentPowerDetailsPowerSaverMode=componentPowerDetailsPowerSaverMode, smFourPortCfgType=smFourPortCfgType, groupRBSscopeIndex=groupRBSscopeIndex, fuelGauge=fuelGauge, bladeIPv6AddressType=bladeIPv6AddressType, chassisDiscovery=chassisDiscovery, componentTimeNTPEnable=componentTimeNTPEnable, smCurrentIPInfoIndex=smCurrentIPInfoIndex, componentIPv6AddressTopologyPath=componentIPv6AddressTopologyPath, bladeNetworkConfiguration=bladeNetworkConfiguration, bladeServerExpansion=bladeServerExpansion, eventLog=eventLog, pmHardwareVpdManufacturingId=pmHardwareVpdManufacturingId, solBladeConsoleUserId=solBladeConsoleUserId, serviceAdvisorEnable=serviceAdvisorEnable, cmeMacAddress=cmeMacAddress, faultLED=faultLED, componentPowerDetailsEntry=componentPowerDetailsEntry, bladeManagementCardVpdManufDate=bladeManagementCardVpdManufDate, componentInventoryPartNumber=componentInventoryPartNumber, componentConfigurationEntry=componentConfigurationEntry, chassisFanPowerTrendingSampleTable=chassisFanPowerTrendingSampleTable, systemStorage=systemStorage, minimumPasswordReuseCycle=minimumPasswordReuseCycle, switchPowerTrendingSwitchId=switchPowerTrendingSwitchId, nodeFirmwareAnalysisRevisionLevel=nodeFirmwareAnalysisRevisionLevel, vlanCMMIPv4SubnetRouteMask3=vlanCMMIPv4SubnetRouteMask3, critIO=critIO, componentDriveDescription=componentDriveDescription, chassisPowerTrendingSampleEntry=chassisPowerTrendingSampleEntry, bladeIPv6Address=bladeIPv6Address, scalableComplexIdentifier=scalableComplexIdentifier, temperatureSensor4WarningReset=temperatureSensor4WarningReset, licenseKeyIndex=licenseKeyIndex, restartBladeInvokeDiags=restartBladeInvokeDiags, chassisFanHardwareVpdManufacturingId=chassisFanHardwareVpdManufacturingId, powerPolicyMaxPowerLimit=powerPolicyMaxPowerLimit, ldapServer4PortNumber=ldapServer4PortNumber, smReset=smReset, powerRestartBladePowerState=powerRestartBladePowerState, downloadMMServiceDataFileCreateAndDownload=downloadMMServiceDataFileCreateAndDownload, smFirmwareInfoTable=smFirmwareInfoTable, voltageBladeExists=voltageBladeExists, chassisLicenseKeyValidation=chassisLicenseKeyValidation, chassisTotalDCPowerAvailable=chassisTotalDCPowerAvailable, standbyDhcpSecondaryDNSServer=standbyDhcpSecondaryDNSServer, bladeDiagsVpdIndex=bladeDiagsVpdIndex, switchPowerTrendingSampleTable=switchPowerTrendingSampleTable, ldapForestName=ldapForestName, powerDomain1Table=powerDomain1Table, componentInventoryReady=componentInventoryReady, secureCommandModeEnable=secureCommandModeEnable, networkInterfaces=networkInterfaces, bladeConfigurationTable=bladeConfigurationTable, bladeSensor20Volt=bladeSensor20Volt, moduleInformation=moduleInformation, spClockTimezoneDaylightStart=spClockTimezoneDaylightStart, bistPowerModulesFunctional=bistPowerModulesFunctional, standbyExtEthernetInterfaceDhcpEnabled=standbyExtEthernetInterfaceDhcpEnabled, pd1ModuleAllocatedPowerCurrent=pd1ModuleAllocatedPowerCurrent, switchDetails=switchDetails, bladeSensor12VoltLowWarning=bladeSensor12VoltLowWarning, bladeDaughterVpdHardwareRevisionString=bladeDaughterVpdHardwareRevisionString, cfmThermalTrendingEntry=cfmThermalTrendingEntry, rbistLocalI2CBus=rbistLocalI2CBus, componentInventoryProcessorExtClock=componentInventoryProcessorExtClock, mmUsers=mmUsers, bladeAndExpCardWwnGuidVpd6=bladeAndExpCardWwnGuidVpd6, mmSshClientAuthPubKeyFingerprint=mmSshClientAuthPubKeyFingerprint, componentSystemStatusEntry=componentSystemStatusEntry, componentHealthSummaryTableCacheTimeout=componentHealthSummaryTableCacheTimeout, chassisFanPowerTrendingId=chassisFanPowerTrendingId, bladeIPv4ConfigIndex=bladeIPv4ConfigIndex, componentBayDataStatus=componentBayDataStatus, powerRestartBladeId=powerRestartBladeId, smPowerServiceResetSwitchId=smPowerServiceResetSwitchId, rbsBlade3=rbsBlade3, mmSshClientAuthPubKeyUnused=mmSshClientAuthPubKeyUnused, componentEthOverUSBInterfaceEntry=componentEthOverUSBInterfaceEntry, chassisFlags=chassisFlags, dhcpGatewayIPAddress=dhcpGatewayIPAddress, componentTemperaturesWarningResetThreshold=componentTemperaturesWarningResetThreshold, logicalUplinkCheckEnabled=logicalUplinkCheckEnabled, fuelGaugeTotalPower=fuelGaugeTotalPower, ledBladeHealthState=ledBladeHealthState, bladeDetails=bladeDetails, chassisUUID=chassisUUID, smNewIPConfigMethod=smNewIPConfigMethod, smOnePortCfgLabel=smOnePortCfgLabel, bladeIPv6ConfigEntry=bladeIPv6ConfigEntry, groupRBSOperator=groupRBSOperator, mmHardwareVpdUuid=mmHardwareVpdUuid, temperatureSensor2Warning=temperatureSensor2Warning, resetSPConfigAndRestartSaveLogs=resetSPConfigAndRestartSaveLogs, componentTemperaturesEntry=componentTemperaturesEntry, groupRBSSwitch6=groupRBSSwitch6, bladeSensor9Volt=bladeSensor9Volt, smIPv6AddressIndex=smIPv6AddressIndex, bladeDaughterCard3MACAddress1Vpd=bladeDaughterCard3MACAddress1Vpd, configurationIndex=configurationIndex, smFourPortCfgDataRate=smFourPortCfgDataRate, extEthernetInterfaceIPv6Enabled=extEthernetInterfaceIPv6Enabled, componentStatusHealthState=componentStatusHealthState, componentPowerDetailsMaxPowerConfig=componentPowerDetailsMaxPowerConfig, chassisManufDate=chassisManufDate, componentIPv4ConfigVlanId=componentIPv4ConfigVlanId, snmpUserProfileEntryUserId=snmpUserProfileEntryUserId, cinEnable=cinEnable, componentStatusInventoryReady=componentStatusInventoryReady, ldapServer2NameOrIPAddress=ldapServer2NameOrIPAddress, bladeServiceData=bladeServiceData, firmwareUpdateStatus=firmwareUpdateStatus, smPowerRestartId=smPowerRestartId, smHardwareVpdFruSerial=smHardwareVpdFruSerial, chassisFanIndex=chassisFanIndex)
mibBuilder.exportSymbols("CME-MIB", readEventLogAuxTable=readEventLogAuxTable, bladeSensor30Volt=bladeSensor30Volt, componentIOCompatibilityIOMBay=componentIOCompatibilityIOMBay, bladeDaughterVpdCardType=bladeDaughterVpdCardType, chassisFansInstalled=chassisFansInstalled, smFourPortCfgIndex=smFourPortCfgIndex, bladeIPv6AddressDefaultRoute=bladeIPv6AddressDefaultRoute, smMainApp3VpdRevisionNumber=smMainApp3VpdRevisionNumber, bladeDaughterVpdFruSerial=bladeDaughterVpdFruSerial, rbistPowerModulesInstalled=rbistPowerModulesInstalled, componentInventory=componentInventory, temperatureSensor3HardShutdown=temperatureSensor3HardShutdown, componentHealthEventIndex=componentHealthEventIndex, bayDataIndex=bayDataIndex, licenseKeyTimestamp=licenseKeyTimestamp, inactivityAlertDisablePeriod=inactivityAlertDisablePeriod, pd1PowerTrendingSampleEntry=pd1PowerTrendingSampleEntry, remoteAlertsNonCrit=remoteAlertsNonCrit, componentLEDsDetailsLocation=componentLEDsDetailsLocation, componentIPv6ConfigTableCacheTimeout=componentIPv6ConfigTableCacheTimeout, policyControlBladePowerState=policyControlBladePowerState, componentUniqueIDsName=componentUniqueIDsName, componentVoltagesTableCacheTimeout=componentVoltagesTableCacheTimeout, dnsServerIPv6Address2=dnsServerIPv6Address2, bladeSensor14Volt=bladeSensor14Volt, componentLEDsDetailsTopologyPath=componentLEDsDetailsTopologyPath, fileIndex=fileIndex, tftpPortAssignment=tftpPortAssignment, bladeIPv4ConfigMACAddr=bladeIPv4ConfigMACAddr, bladeExpCardVpdCardTypeInfo=bladeExpCardVpdCardTypeInfo, bladeDaughterCard2MACAddress1Vpd=bladeDaughterCard2MACAddress1Vpd, bladeSensor21VoltHighWarning=bladeSensor21VoltHighWarning, bladeAndExpCardWwnGuidVpd8=bladeAndExpCardWwnGuidVpd8, readAuditLogMessage=readAuditLogMessage, bladeExpCardVpdIndex=bladeExpCardVpdIndex, standbyExtEthernetInterfaceIPv6=standbyExtEthernetInterfaceIPv6, bladeManagementCardVpdMachineModel=bladeManagementCardVpdMachineModel, nodeFirmwareAnalysisTopology=nodeFirmwareAnalysisTopology, bladeSensor26VoltLowWarning=bladeSensor26VoltLowWarning, configurationBladePowerState=configurationBladePowerState, securityPolicyStatusBayId=securityPolicyStatusBayId, vlanGlobalState=vlanGlobalState, bladeDaughterCard2MACAddress2Vpd=bladeDaughterCard2MACAddress2Vpd, componentStatusBootCountPowerOnTimeSecs=componentStatusBootCountPowerOnTimeSecs, groupIndex=groupIndex, cmeIpv6Addresses=cmeIpv6Addresses, solBladeName=solBladeName, chassisVpdMachineModel=chassisVpdMachineModel, critPower=critPower, standbyEthernetInterfaceStatelessAutoConfigAddresses=standbyEthernetInterfaceStatelessAutoConfigAddresses, bladeHealthState=bladeHealthState, bladeHSDaughterCard1MACAddress5Vpd=bladeHSDaughterCard1MACAddress5Vpd, componentInventoryProcessorDataWidth=componentInventoryProcessorDataWidth, securityPolicyStatusSummary=securityPolicyStatusSummary, smTwoPortCfgCompatibility=smTwoPortCfgCompatibility, groupRBSSwitch8=groupRBSSwitch8, smNewIPInfoIndex=smNewIPInfoIndex, snmpUserProfileEntry=snmpUserProfileEntry, serviceDataDumpInitiate=serviceDataDumpInitiate, chassisBayDevicesInstalled=chassisBayDevicesInstalled, systemHealthSummaryTable=systemHealthSummaryTable, switchPowerTrendingSampleAve=switchPowerTrendingSampleAve, smTwoPortCfgSpeedSetting=smTwoPortCfgSpeedSetting, smPingAddressExecute=smPingAddressExecute, vlanCMMSOLAccess=vlanCMMSOLAccess, scalableComplexNodeHealthState=scalableComplexNodeHealthState, callHomeExclusionEvents=callHomeExclusionEvents, ledChassisFanId=ledChassisFanId, bladeAndExpCardWwnGuidVpdTable=bladeAndExpCardWwnGuidVpdTable, componentInventoryInstance=componentInventoryInstance, bladeManagementCardVpdPartNumber=bladeManagementCardVpdPartNumber, bladeDaughterCard1MACAddress1Vpd=bladeDaughterCard1MACAddress1Vpd, fileLastUpdate=fileLastUpdate, extEthernetInterfaceDHCPv6SecondaryDNSServer=extEthernetInterfaceDHCPv6SecondaryDNSServer, temperatureThresholdBladeId=temperatureThresholdBladeId, componentInventoryProcessorCores=componentInventoryProcessorCores, address=address, readAuditLogEntry=readAuditLogEntry, standbyDhcpGatewayIPAddress=standbyDhcpGatewayIPAddress, readEventLogString=readEventLogString, smFourPortCfgProtocol=smFourPortCfgProtocol, temperatureDASD1=temperatureDASD1, licenseKeyDescription=licenseKeyDescription, chassisTotalThermalOutput=chassisTotalThermalOutput, serialPortCfg=serialPortCfg, bladeSensor5Volt=bladeSensor5Volt, activityLogs=activityLogs, identifyLED=identifyLED, componentSolRetryInterval=componentSolRetryInterval, powerModuleIndex=powerModuleIndex, componentEthOverUSBInterfaceEnable=componentEthOverUSBInterfaceEnable, smHardwareVpdTable=smHardwareVpdTable, remoteAccessRBSscopeTable=remoteAccessRBSscopeTable, bladeDaughterCard5MACAddress7Vpd=bladeDaughterCard5MACAddress7Vpd, bladeExpCardVpdFruNumber=bladeExpCardVpdFruNumber, groupRBSChassisLogManagement=groupRBSChassisLogManagement, bladeMACAddressVpdIndex=bladeMACAddressVpdIndex, licenseKeyInfoTable=licenseKeyInfoTable, bistRearLEDCardCommunicating=bistRearLEDCardCommunicating, bladeSensor18VoltLowWarning=bladeSensor18VoltLowWarning, chassisTotalPowerInUsed=chassisTotalPowerInUsed, bladeDaughterCard3MACAddress7Vpd=bladeDaughterCard3MACAddress7Vpd, ledBladeComponentType=ledBladeComponentType, passiveAirFilterReplaceDate=passiveAirFilterReplaceDate, bladePowerServiceResetEntry=bladePowerServiceResetEntry, bladePolicyControlTable=bladePolicyControlTable, voltageThresholdBladeId=voltageThresholdBladeId, altPhoneNumberExt=altPhoneNumberExt, componentUniqueIDsTable=componentUniqueIDsTable, ntpLastUpdate=ntpLastUpdate, switchModThreePortCfg=switchModThreePortCfg, bladeDaughterCard3MACAddress3Vpd=bladeDaughterCard3MACAddress3Vpd, rearLEDCardThermalTrendingEntry=rearLEDCardThermalTrendingEntry, cmeChassisLocation=cmeChassisLocation, bladeSysMgmtProcVpdIndex=bladeSysMgmtProcVpdIndex, bladeSensor27VoltLowWarning=bladeSensor27VoltLowWarning, remoteAlerts=remoteAlerts, componentHealthSummaryDateTime=componentHealthSummaryDateTime, currentlyLoggedInEntryUserId=currentlyLoggedInEntryUserId, pmHardwareVpdFruNumber=pmHardwareVpdFruNumber, chassisFans=chassisFans, mmMainApplVpdTable=mmMainApplVpdTable, componentInventoryMachineSerial=componentInventoryMachineSerial, smIOCompatibilityStatus=smIOCompatibilityStatus, pmHardwareVpdManufacturingIDNumber=pmHardwareVpdManufacturingIDNumber, smHardwareVpdManufacturingId=smHardwareVpdManufacturingId, ldapClientCfg=ldapClientCfg, bladeDetailsTable=bladeDetailsTable, cmeRemoteChassisIndex=cmeRemoteChassisIndex, bladeIPv6AddressPrefixLen=bladeIPv6AddressPrefixLen, rbistSwitchModulesInstalled=rbistSwitchModulesInstalled, chassisFPsInstalled=chassisFPsInstalled, snmpv1SystemAgentEnable=snmpv1SystemAgentEnable, chassisFruSerial=chassisFruSerial, bladeExpCardVpdManufacturingId=bladeExpCardVpdManufacturingId, pd1ModuleState=pd1ModuleState, mmHardwareVpdEntry=mmHardwareVpdEntry, ledChassisFanError=ledChassisFanError, mmHardwareVpdSubManufacturerId=mmHardwareVpdSubManufacturerId, smIPv6StaticAddressDefaultRoute=smIPv6StaticAddressDefaultRoute, bladeExpCardVpdBayNumber=bladeExpCardVpdBayNumber, extEthernetInterfaceDHCPv6DomainName=extEthernetInterfaceDHCPv6DomainName, rbsBlade6=rbsBlade6, spClockTimezoneDaylightName=spClockTimezoneDaylightName, componentIPv6AddressEntryIndex=componentIPv6AddressEntryIndex, systemHealthSummaryAuxData=systemHealthSummaryAuxData, remoteAlertIdEntrySelectiveAlert=remoteAlertIdEntrySelectiveAlert, bladeSystemStatusTable=bladeSystemStatusTable, cmeSlot=cmeSlot, maxLoginFailures=maxLoginFailures, groupRBSChassisAdministration=groupRBSChassisAdministration, smIOCompatibilityId=smIOCompatibilityId, chassisNoOfSMsSupported=chassisNoOfSMsSupported, chassisFanPowerTrendingSampleMax=chassisFanPowerTrendingSampleMax, solBladeIpAddr=solBladeIpAddr, logicalUplinkFailoverPolicy=logicalUplinkFailoverPolicy, temperatureCPU2HardShutdown=temperatureCPU2HardShutdown, bladeSensor17Volt=bladeSensor17Volt, bladeInventoryReady=bladeInventoryReady, switchPowerTrendingSampleEntry=switchPowerTrendingSampleEntry, bladeHSDaughterCard1MACAddress2Vpd=bladeHSDaughterCard1MACAddress2Vpd, fuelGaugeStatus=fuelGaugeStatus, standbyEthernetInterfaceIPv6StaticIPAddress=standbyEthernetInterfaceIPv6StaticIPAddress, chassisPowerTrending=chassisPowerTrending, groupRBSBlade5=groupRBSBlade5, bootDeviceIndex=bootDeviceIndex, componentIPv4ConfigEntry=componentIPv4ConfigEntry, bladeLEDsDetailsTable=bladeLEDsDetailsTable, componentPowerDetailsStaticCap=componentPowerDetailsStaticCap, ddnsStatus=ddnsStatus, uplinkCheckEnabled=uplinkCheckEnabled, rbistExternalI2CDevices=rbistExternalI2CDevices, bladeMACAddressVpdEntry=bladeMACAddressVpdEntry, chassisInternalNetwork=chassisInternalNetwork, bladeTempThresholdSensorCapability=bladeTempThresholdSensorCapability, smTwoPortCfgLabel=smTwoPortCfgLabel, temperatureSensor6HardShutdown=temperatureSensor6HardShutdown, bladePlus1pt5Volt=bladePlus1pt5Volt, componentPowerEnableSMSBootMenu=componentPowerEnableSMSBootMenu, securityPolicyStatusTable=securityPolicyStatusTable, rbsBlade1=rbsBlade1, bladeLEDsDetailsEntry=bladeLEDsDetailsEntry, smOnePortCfgSpeedSetting=smOnePortCfgSpeedSetting, bladeSensor17VoltHighWarning=bladeSensor17VoltHighWarning, bladeHSDaughterCard1MACAddress6Vpd=bladeHSDaughterCard1MACAddress6Vpd, bladeExpCardVpdPartNumber=bladeExpCardVpdPartNumber, bladeDaughterCard3MACAddress2Vpd=bladeDaughterCard3MACAddress2Vpd, componentLevelActivityVpdFruNumber=componentLevelActivityVpdFruNumber, managementModule=managementModule, spClockTimezoneDescription=spClockTimezoneDescription, chassisUHeight=chassisUHeight, cipherStrength=cipherStrength, rbistInternalEthernetSwitch=rbistInternalEthernetSwitch, componentDriveTable=componentDriveTable, bladeSystemStatusEntry=bladeSystemStatusEntry, componentDriveTopologyPath=componentDriveTopologyPath, pd1ModuleThrottle=pd1ModuleThrottle, bladeDiagsVpdDate=bladeDiagsVpdDate, vlanCMMIPv6AddressPrefixLen=vlanCMMIPv6AddressPrefixLen, passiveAirFilterMonthFreq=passiveAirFilterMonthFreq, componentConfigurationLocalPowerControlEnable=componentConfigurationLocalPowerControlEnable, chassisFanPowerTrending=chassisFanPowerTrending, bladeSensor29VoltHighWarning=bladeSensor29VoltHighWarning, rmCallHomeExclusionEvent=rmCallHomeExclusionEvent, smThreePortCfgEntry=smThreePortCfgEntry, chassisCoolingZone=chassisCoolingZone, bladeExpCardVpdManufDate=bladeExpCardVpdManufDate, smOnePortCfgProtocol=smOnePortCfgProtocol, bladeDaughterCard5MACAddress3Vpd=bladeDaughterCard5MACAddress3Vpd, readSystemLogAttribute=readSystemLogAttribute, bladeAndExpCardWwnGuidVpdBayNumber=bladeAndExpCardWwnGuidVpdBayNumber, fileManagement=fileManagement, switchPortCfg=switchPortCfg, smThreePortCfgLinkState=smThreePortCfgLinkState, componentInventoryGlobalID=componentInventoryGlobalID, componentIPv4ConfigTableCacheTimeout=componentIPv4ConfigTableCacheTimeout, bladeBiosVpdId=bladeBiosVpdId, bayDataBladeExists=bayDataBladeExists, bladeDaughterCard3MACAddress6Vpd=bladeDaughterCard3MACAddress6Vpd, temperatureDASD1WarningReset=temperatureDASD1WarningReset, cryptographyModeComponentId=cryptographyModeComponentId, cinDelete=cinDelete, bladeDaughterCard2MACAddress5Vpd=bladeDaughterCard2MACAddress5Vpd, bladeSensor4Volt=bladeSensor4Volt, bladeBiosVpdIndex=bladeBiosVpdIndex, bladeCenterSnmpMIB=bladeCenterSnmpMIB, bladeSideCardMACAddress5Vpd=bladeSideCardMACAddress5Vpd, systemHealthSummaryDescription=systemHealthSummaryDescription, componentLevelActivityVpdIndex=componentLevelActivityVpdIndex, smNewGateway=smNewGateway, componentLEDsDetailsLabel=componentLEDsDetailsLabel, bladeDetailsPcapMax=bladeDetailsPcapMax, bootSequenceInfoTopologyIndex=bootSequenceInfoTopologyIndex, bladeSensor17VoltLowWarning=bladeSensor17VoltLowWarning, bladeSensor8VoltLowWarning=bladeSensor8VoltLowWarning, mmMainApplVpdFilename=mmMainApplVpdFilename, bladeServerExpansion2=bladeServerExpansion2, restartReset=restartReset, bladeDetailsPowerSaverMode=bladeDetailsPowerSaverMode, voltageThresholdIndex=voltageThresholdIndex, telnetInactivityTimeout=telnetInactivityTimeout, smCurrentIPInfoPowerState=smCurrentIPInfoPowerState, smOnePortCfgMedia=smOnePortCfgMedia, cmeIpv4AddressesFloat=cmeIpv4AddressesFloat, bladeManagementCardVpdUuid=bladeManagementCardVpdUuid, smOnePortCfgWidth=smOnePortCfgWidth, pmControllerVpdIndex=pmControllerVpdIndex, rbsBlade14=rbsBlade14, smPingTable=smPingTable, systemHealthSummaryIndex=systemHealthSummaryIndex, componentFirmwareRole=componentFirmwareRole, httpProxyConfig=httpProxyConfig, standbyEthernetInterfaceDHCPv6IPAddress=standbyEthernetInterfaceDHCPv6IPAddress, smNewIPInfoPowerState=smNewIPInfoPowerState)
mibBuilder.exportSymbols("CME-MIB", bistOtherMMCommunicating=bistOtherMMCommunicating, bladeSensor26Volt=bladeSensor26Volt, componentServiceDataDumpRetrieve=componentServiceDataDumpRetrieve, bootSequenceInfoTable=bootSequenceInfoTable, snmpUserProfileEntryPrivPassword=snmpUserProfileEntryPrivPassword, bladeSensor29VoltLowWarning=bladeSensor29VoltLowWarning, chassisLicenseKeyUsageLimit=chassisLicenseKeyUsageLimit, rearLEDCardThermalTrendingIndex=rearLEDCardThermalTrendingIndex, bladeSideCardMACAddress3Vpd=bladeSideCardMACAddress3Vpd, cryptographyCipherComponentTable=cryptographyCipherComponentTable, componentUniqueIDsType=componentUniqueIDsType, mmSshClientAuthPubKeyIndex=mmSshClientAuthPubKeyIndex, smPMState=smPMState, temperatureBladeExists=temperatureBladeExists, smNewIPInfoId=smNewIPInfoId, city=city, dhcpSecondaryDNSServer=dhcpSecondaryDNSServer, fuelGaugeEntry=fuelGaugeEntry, pmHardwareVpdFruSerial=pmHardwareVpdFruSerial, ibm=ibm, bladeConnectionType3=bladeConnectionType3, extEthernetInterfaceIPv6StaticIPDefaultRoute=extEthernetInterfaceIPv6StaticIPDefaultRoute, pd1PowerTrendingSampleTimeStamp=pd1PowerTrendingSampleTimeStamp, chassisFansTable=chassisFansTable, switchModuleConfig=switchModuleConfig, bladePlus1pt25Volt=bladePlus1pt25Volt, groupRBSBlade2=groupRBSBlade2, bladeBootCountPowerOnTimeTable=bladeBootCountPowerOnTimeTable, componentBayDataTopologyPath=componentBayDataTopologyPath, bladeDaughterCard2MACAddress3Vpd=bladeDaughterCard2MACAddress3Vpd, monitors=monitors, snmpAgentConfig=snmpAgentConfig, chassisVpdMachineType=chassisVpdMachineType, bladeDaughterVpdClei=bladeDaughterVpdClei, ldapAuthCfg=ldapAuthCfg, solBladeRetryInterval=solBladeRetryInterval, bladeDaughterVpdManufacturingId=bladeDaughterVpdManufacturingId, smMainApp3VpdBuildId=smMainApp3VpdBuildId, bladeDaughterCard1MACAddress8Vpd=bladeDaughterCard1MACAddress8Vpd, spClockDateAndTimeSetting=spClockDateAndTimeSetting, dnsServerIPAddress1=dnsServerIPAddress1, bladeHealthSummarySeverity=bladeHealthSummarySeverity, bladeHealthSummaryDateTime=bladeHealthSummaryDateTime, extEthernetInterfaceIPv6Type=extEthernetInterfaceIPv6Type, cmeType=cmeType, componentHealthSummaryEventID=componentHealthSummaryEventID, chassisFanControllerVpdId=chassisFanControllerVpdId, temperature=temperature, smThreePortCfgCableType=smThreePortCfgCableType, temperatureSensor4HardShutdown=temperatureSensor4HardShutdown, remoteAccessConfig=remoteAccessConfig, componentIPv6ConfigStatic=componentIPv6ConfigStatic, cinIpv6Address=cinIpv6Address, smMainAppVpdIndex=smMainAppVpdIndex, remoteAccessRBSscopeEntry=remoteAccessRBSscopeEntry, reloadAllVpdData=reloadAllVpdData, componentFirmwareBuildID=componentFirmwareBuildID, componentSolTableCacheTimeout=componentSolTableCacheTimeout, rbistRearLEDCardCommunicating=rbistRearLEDCardCommunicating, bladeSensor10Volt=bladeSensor10Volt, bladeSensor4VoltHighWarning=bladeSensor4VoltHighWarning, secureCommandModePortAssignment=secureCommandModePortAssignment, smTwoPortCfgProtocol=smTwoPortCfgProtocol, switchPowerTrendingPeriod=switchPowerTrendingPeriod, smBootRomVpdIndex=smBootRomVpdIndex, securityPolicyStatusIndex=securityPolicyStatusIndex, componentInventoryMachineTypeModel=componentInventoryMachineTypeModel, roleId=roleId, chassisConfiguration=chassisConfiguration, groupRBSChassisAccountManagement=groupRBSChassisAccountManagement, smIPAddress=smIPAddress, componentPowerTopologyPath=componentPowerTopologyPath, rbsBladeOperator=rbsBladeOperator, firmwareActiveImage=firmwareActiveImage, bistSecondaryMainAppFlashImage=bistSecondaryMainAppFlashImage, bladeFirmwareVpd=bladeFirmwareVpd, smNewIPInfoTable=smNewIPInfoTable, componentPowerEntry=componentPowerEntry, smCurrentGateway=smCurrentGateway, rbistSwitchModulesCommunicating=rbistSwitchModulesCommunicating, ledSMState=ledSMState, groupProfiles=groupProfiles, smFourPortCfgCableLength=smFourPortCfgCableLength, smIOCompatibilityTargetTopologyPath=smIOCompatibilityTargetTopologyPath, bladeSensor6VoltLowWarning=bladeSensor6VoltLowWarning, powerDomain1Entry=powerDomain1Entry, bladeVoltageThresholdsTable=bladeVoltageThresholdsTable, solCharSendThreshold=solCharSendThreshold, bladeSensor8VoltHighWarning=bladeSensor8VoltHighWarning, componentSolTable=componentSolTable, bladeBootCountPowerOnTime=bladeBootCountPowerOnTime, rbsSwitchModuleConfiguration=rbsSwitchModuleConfiguration, componentIPv4ConfigPhysicalLinkStatus=componentIPv4ConfigPhysicalLinkStatus, bladeTemperaturesTable=bladeTemperaturesTable, httpProxyUserName=httpProxyUserName, bladeDaughterCard2MACAddress6Vpd=bladeDaughterCard2MACAddress6Vpd, clearAuditLog=clearAuditLog, mmSshClientAuthPubKeyType=mmSshClientAuthPubKeyType, pmHardwareVpdIndex=pmHardwareVpdIndex, bladeStatusIndex=bladeStatusIndex, smFourPortCfgLabel=smFourPortCfgLabel, bladePowerServiceResetBladeId=bladePowerServiceResetBladeId, bladeHardwareVpdHardwareRevision=bladeHardwareVpdHardwareRevision, bladeSensor22Volt=bladeSensor22Volt, smPostResultsAvailable=smPostResultsAvailable, componentInventoryProcessorL3Cache=componentInventoryProcessorL3Cache, componentConfigurationActiveBootMode=componentConfigurationActiveBootMode, bladeIPv6AddressPortIndex=bladeIPv6AddressPortIndex, bootDeviceId=bootDeviceId, bladeSensor2Temp=bladeSensor2Temp, bladeSensor18Volt=bladeSensor18Volt, componentDriveEntry=componentDriveEntry, readSystemLogSequenceNum=readSystemLogSequenceNum, groupRBSBlade6=groupRBSBlade6, smIPv6AddressEntry=smIPv6AddressEntry, serviceDataBladeExists=serviceDataBladeExists, bladeDiagsVpdName=bladeDiagsVpdName, readEventLogAuxSequenceNum=readEventLogAuxSequenceNum, bladeVoltagesTable=bladeVoltagesTable, switchIPv6Config=switchIPv6Config, cmeSystemStatus=cmeSystemStatus, componentInventoryProcessorFamily=componentInventoryProcessorFamily, snmpUserProfileEntryContextName=snmpUserProfileEntryContextName, bladeConnectionType5=bladeConnectionType5, bladeExpCardVpdMachineModel=bladeExpCardVpdMachineModel, bladeLEDs=bladeLEDs, smIOCompatibility=smIOCompatibility, componentIPv4ConfigPhysicalLinkState=componentIPv4ConfigPhysicalLinkState, extEthernetInterfaceDuplexSetting=extEthernetInterfaceDuplexSetting, spClockTimezoneStandardCaption=spClockTimezoneStandardCaption, bistEthernetPort1=bistEthernetPort1, ledSMLocation=ledSMLocation, temperatureThresholdBladePowerState=temperatureThresholdBladePowerState, smIOCompatibilityTable=smIOCompatibilityTable, restartBladeInvokeDiagsFromDefaultBootList=restartBladeInvokeDiagsFromDefaultBootList, bladeSensor6Volt=bladeSensor6Volt, bistRtc=bistRtc, rearLEDCardHardwareVpdHardwareRevision=rearLEDCardHardwareVpdHardwareRevision, bladeBootCountPowerOnTimeEntry=bladeBootCountPowerOnTimeEntry, smTwoPortCfgType=smTwoPortCfgType, chassisPowerTrendingSampleIndex=chassisPowerTrendingSampleIndex, temperatureSensor9WarningReset=temperatureSensor9WarningReset, bladeSysMgmtProcVpdPowerState=bladeSysMgmtProcVpdPowerState, componentNetworkConfiguration=componentNetworkConfiguration, bladeDaughterVpdFruNumber=bladeDaughterVpdFruNumber, spClockTimezoneEntry=spClockTimezoneEntry, attachmentsToEmailAlerts=attachmentsToEmailAlerts, bladeAndExpCardWwnGuidVpd7=bladeAndExpCardWwnGuidVpd7, bladeTemperaturesEntry=bladeTemperaturesEntry, smMainAppVpdSwitchSubType=smMainAppVpdSwitchSubType, advancedFailover=advancedFailover, componentIPv6ConfigPortIndex=componentIPv6ConfigPortIndex, bladeBiosVpdPowerState=bladeBiosVpdPowerState, componentInventoryProcessorType=componentInventoryProcessorType, remoteAccessIdsEntry=remoteAccessIdsEntry, switchModuleControlId=switchModuleControlId, backupRestoreURI=backupRestoreURI, bladeVlanId=bladeVlanId, bayDataBladeId=bayDataBladeId, smOnePortCfgLinkSetting=smOnePortCfgLinkSetting, cmeIpv6Status=cmeIpv6Status, bootCountPowerOnTimeBladeIndex=bootCountPowerOnTimeBladeIndex, bladeSensor11Volt=bladeSensor11Volt, bistBladesInstalled=bistBladesInstalled, mmFirmwareVpd=mmFirmwareVpd, mmMainApplVpdEntry=mmMainApplVpdEntry, httpProxyPassword=httpProxyPassword, groupRBSSwitch1=groupRBSSwitch1, smFirmwareAnalysisProductName=smFirmwareAnalysisProductName, bladeIPv4ConfigGatewayAddr=bladeIPv4ConfigGatewayAddr, warnChassis=warnChassis, httpsPortAssignment=httpsPortAssignment, smHealthState=smHealthState, sslClientEnable=sslClientEnable, cmeChassisType=cmeChassisType, bladeBayDataTable=bladeBayDataTable, spEthOverUSBInterfaceEntry=spEthOverUSBInterfaceEntry, stcm=stcm, bladeHardwareVpdIndex=bladeHardwareVpdIndex, rbsSwitch8=rbsSwitch8, pmHardwareVpdProductId=pmHardwareVpdProductId, tcpPortAssignmentCfg=tcpPortAssignmentCfg, configurationBladeAutoPowerOn=configurationBladeAutoPowerOn, remoteAccessIdEntryIPMIProvisioned=remoteAccessIdEntryIPMIProvisioned, componentHealthSummaryName=componentHealthSummaryName, componentStatusPowerState=componentStatusPowerState, componentBayDataTableCacheTimeout=componentBayDataTableCacheTimeout, dnsServerIPAddress2=dnsServerIPAddress2, bladeExpCardVpdHardwareRevisionString=bladeExpCardVpdHardwareRevisionString, smTwoPortCfgSpeedStatus=smTwoPortCfgSpeedStatus, componentInventoryManufacture=componentInventoryManufacture, bladeSensor14VoltLowWarning=bladeSensor14VoltLowWarning, scalableComplexNodePowerState=scalableComplexNodePowerState, componentConfigurationName=componentConfigurationName, groupRBSBlade3=groupRBSBlade3, bladeDiagsVpdPowerState=bladeDiagsVpdPowerState, smFourPortCfgAvailSpeeds=smFourPortCfgAvailSpeeds, temperatureCPU1Warning=temperatureCPU1Warning, mmMainApplVpdIndex=mmMainApplVpdIndex, fuelGaugeRemainingPower=fuelGaugeRemainingPower, ldapLoginPermissionAttribute=ldapLoginPermissionAttribute, cmeIpv4Protocols=cmeIpv4Protocols, componentSolEnable=componentSolEnable, chassisFanControllerVPDTable=chassisFanControllerVPDTable, cmeFru=cmeFru, rbsEntryStatus=rbsEntryStatus, securityPolicyStatusDetails=securityPolicyStatusDetails, readEnhancedEventLogNumber=readEnhancedEventLogNumber, bladeSensor22VoltLowWarning=bladeSensor22VoltLowWarning, componentIPv4ConfigName=componentIPv4ConfigName, extEthernetInterfaceIPv6AutoIPConfigEnabled=extEthernetInterfaceIPv6AutoIPConfigEnabled, bistInternalEthernetSwitch=bistInternalEthernetSwitch, mmStatusEntry=mmStatusEntry, userAuthenticationMethod=userAuthenticationMethod, bladeDaughterCard5MACAddress1Vpd=bladeDaughterCard5MACAddress1Vpd, clearEventLog=clearEventLog, chassisLicenseKeyFeatureType=chassisLicenseKeyFeatureType, httpProxyPort=httpProxyPort, mmHardwareVpdProductId=mmHardwareVpdProductId, groupRBSBlade7=groupRBSBlade7, chassisNoOfChassisFansSupported=chassisNoOfChassisFansSupported, bladeDaughterCard2MACAddress8Vpd=bladeDaughterCard2MACAddress8Vpd, bladeTemperatureThresholdsEntry=bladeTemperatureThresholdsEntry, remoteAlertIdEntryTextDescription=remoteAlertIdEntryTextDescription, groupId=groupId, componentPower=componentPower, hotAirRecircStatusIndex=hotAirRecircStatusIndex, bladePlus12VoltLowWarning=bladePlus12VoltLowWarning, bladeDaughterVpdProductId=bladeDaughterVpdProductId, netfinitySupportProcessorAgent=netfinitySupportProcessorAgent, systemHealthStat=systemHealthStat, downloadMMServiceDataCancelDownload=downloadMMServiceDataCancelDownload, bladePowerServiceResetTable=bladePowerServiceResetTable, pmControllerVpdId=pmControllerVpdId, bladePowerTrendingSampleId=bladePowerTrendingSampleId, componentInventoryProcessorL2Cache=componentInventoryProcessorL2Cache, mmMainApplVpdBuildDate=mmMainApplVpdBuildDate, chassisNoOfRearLEDCardsSupported=chassisNoOfRearLEDCardsSupported, smFirmwareAnalysisReleaseDate=smFirmwareAnalysisReleaseDate, componentServiceDataTableCacheTimeout=componentServiceDataTableCacheTimeout, snmpCommunityEntryCommunityViewType=snmpCommunityEntryCommunityViewType, chassisCoolingZoneTable=chassisCoolingZoneTable, rbistChassisFansFunctional=rbistChassisFansFunctional, groupRBSSwitch4=groupRBSSwitch4, cryptographyModeDetailsTable=cryptographyModeDetailsTable, smtpConfig=smtpConfig, bladeExpCardVpdManufacturingIDNumber=bladeExpCardVpdManufacturingIDNumber, lockoutPeriod=lockoutPeriod, snmpCommunityEntry=snmpCommunityEntry, extEthernetInterfaceStatelessAutoConfigAddressesTable=extEthernetInterfaceStatelessAutoConfigAddressesTable, smPingAddress=smPingAddress, bladeDaughterCard1MACAddress3Vpd=bladeDaughterCard1MACAddress3Vpd, smTwoPortCfgLinkState=smTwoPortCfgLinkState, snmpSystemLocation=snmpSystemLocation)
mibBuilder.exportSymbols("CME-MIB", extEthernetInterfaceDHCPv6PrimaryDNSServer=extEthernetInterfaceDHCPv6PrimaryDNSServer, autoFTPCallMode=autoFTPCallMode, chassisLicenseKeyEntry=chassisLicenseKeyEntry, bladeSensor11VoltLowWarning=bladeSensor11VoltLowWarning, smBootRomVpdRevisionNumber=smBootRomVpdRevisionNumber, cfmThermalTrendingMaxCFM=cfmThermalTrendingMaxCFM, smFirmwareAnalysisFirmwareVersion=smFirmwareAnalysisFirmwareVersion, mmHardwareVpdIndex=mmHardwareVpdIndex, smResetToDefault=smResetToDefault, componentServiceDataDumpInitiate=componentServiceDataDumpInitiate, downloadMMServiceData=downloadMMServiceData, bladeServiceDataEntry=bladeServiceDataEntry, syslogCollectorHostnameOrIpAddress=syslogCollectorHostnameOrIpAddress, bladeSensor2Volt=bladeSensor2Volt, rbsBlade13=rbsBlade13, bladeSysMgmtProcVpdRevision=bladeSysMgmtProcVpdRevision, bladeDaughterCard3MACAddress5Vpd=bladeDaughterCard3MACAddress5Vpd, chassisName=chassisName, ldapClientAuthenticationDN=ldapClientAuthenticationDN, voltageThresholdBladeExists=voltageThresholdBladeExists, componentMonitors=componentMonitors, remoteAccessRBSroleEntry=remoteAccessRBSroleEntry, componentIPv4ConfigPortLabel=componentIPv4ConfigPortLabel, temperatureCPU2=temperatureCPU2, componentServiceDataDumpInProgress=componentServiceDataDumpInProgress, telnetPortAssignment=telnetPortAssignment, serviceDataDumpCapabilityMask=serviceDataDumpCapabilityMask, smFourPortCfgCableType=smFourPortCfgCableType, smTwoPortCfgMedia=smTwoPortCfgMedia, bladeManagementCardVpdProductId=bladeManagementCardVpdProductId, bladeSensor22VoltHighWarning=bladeSensor22VoltHighWarning, bladeManagementCardVpdBayNumber=bladeManagementCardVpdBayNumber, commandModeInactivityTimeout=commandModeInactivityTimeout, groupRBSroleEntry=groupRBSroleEntry, smIOCompatibilityModulePower=smIOCompatibilityModulePower, temperatureSensor1WarningReset=temperatureSensor1WarningReset, cimEnable=cimEnable, bladePowerTrendingSampleTopologyId=bladePowerTrendingSampleTopologyId, bladeSensor27VoltHighWarning=bladeSensor27VoltHighWarning, remoteAlertRetryDelay=remoteAlertRetryDelay, componentConfigurationWakeOnLanControlEnable=componentConfigurationWakeOnLanControlEnable, componentIPv6AddressPortIndex=componentIPv6AddressPortIndex, bladeDiagsVpdId=bladeDiagsVpdId, hotAirRecircStatusExceeded=hotAirRecircStatusExceeded, nodeConnectivityIndex=nodeConnectivityIndex, phoneNumber=phoneNumber, portStopBits=portStopBits, pd1PowerTrendingSampleIndex=pd1PowerTrendingSampleIndex, temperatureSensor4Warning=temperatureSensor4Warning, fuelGaugePowerManagementPolicySetting=fuelGaugePowerManagementPolicySetting, standbyEthernetInterfaceStatelessAutoConfigAddressesTable=standbyEthernetInterfaceStatelessAutoConfigAddressesTable, cfmThermalTrendingTimeStamp=cfmThermalTrendingTimeStamp, fanPackFanCount=fanPackFanCount, ledComponentTopologyPath=ledComponentTopologyPath, pmHardwareVpdTable=pmHardwareVpdTable, vlanCMMName=vlanCMMName, ledChassisFanIndex=ledChassisFanIndex, componentLevelActivityVpdModuleName=componentLevelActivityVpdModuleName, bladeManagementCardVpdManufacturingIDNumber=bladeManagementCardVpdManufacturingIDNumber, componentLevelActivityVpdTopologyPath=componentLevelActivityVpdTopologyPath, policyControlBladeExists=policyControlBladeExists, mmSshClientAuthPubKeyAcceptFrom=mmSshClientAuthPubKeyAcceptFrom, spClockTimezoneStandardDaylightOffsetMinutes=spClockTimezoneStandardDaylightOffsetMinutes, standbyExtEthernetInterfaceSubnetMask=standbyExtEthernetInterfaceSubnetMask, smBootRomVpdBuildDate=smBootRomVpdBuildDate, nodeFirmwareAnalysisEntry=nodeFirmwareAnalysisEntry, componentIOCompatibilityFabricOnComponent=componentIOCompatibilityFabricOnComponent, bistChassisFansMUXAInstalled=bistChassisFansMUXAInstalled, componentIPv6AddressTable=componentIPv6AddressTable, bladePowerManagementPolicy=bladePowerManagementPolicy, bladeIPv4ConfigDHCPEnable=bladeIPv4ConfigDHCPEnable, syslogTestPacket=syslogTestPacket, smBootRomVpdBuildId=smBootRomVpdBuildId, rbsChassisLogManagement=rbsChassisLogManagement, mmSshServerHostKeyEntry=mmSshServerHostKeyEntry, fanPackLEDsEntry=fanPackLEDsEntry, switchModule=switchModule, rearLEDCardHardwareVpdFruNumber=rearLEDCardHardwareVpdFruNumber, bladeBiosVpdBuildId=bladeBiosVpdBuildId, smMainApp2VpdBuildDate=smMainApp2VpdBuildDate, chassisFanPowerTrendingSampleId=chassisFanPowerTrendingSampleId, componentInventoryProcessorL1DCache=componentInventoryProcessorL1DCache, bladeHealthSummaryDescription=bladeHealthSummaryDescription, temperatureThresholdBladeName=temperatureThresholdBladeName, componentTemperaturesTopologyPath=componentTemperaturesTopologyPath, extEthernetInterfaceDHCPv6Config=extEthernetInterfaceDHCPv6Config, smFourPortCfgEntry=smFourPortCfgEntry, componentPowerDetailsTableCacheTimeout=componentPowerDetailsTableCacheTimeout, securityPolicySetting=securityPolicySetting, bladeName=bladeName, spIdentification=spIdentification, smMACAddress=smMACAddress, bladeSensor16VoltLowWarning=bladeSensor16VoltLowWarning, switchModOnePortCfg=switchModOnePortCfg, smIPv6AddressPrefixLen=smIPv6AddressPrefixLen, componentDriveTableCacheTimeout=componentDriveTableCacheTimeout, solEnable=solEnable, syslogConfig=syslogConfig, smtpServerNameOrIPAddress=smtpServerNameOrIPAddress, bladePlus1pt25VoltHighWarning=bladePlus1pt25VoltHighWarning, bootCountPowerOnTimeBladeId=bootCountPowerOnTimeBladeId, standbyEthernetInterfaceIPv6LocalAddress=standbyEthernetInterfaceIPv6LocalAddress, groupRBSSwitchModuleOperator=groupRBSSwitchModuleOperator, bladeExpCardVpdBladeBayNumber=bladeExpCardVpdBladeBayNumber, firmwareInformation=firmwareInformation, cmeRemoteChassisTable=cmeRemoteChassisTable, cinId=cinId, smIPv6ConfigStatelessEnabled=smIPv6ConfigStatelessEnabled, smIOCompatibilityEntry=smIOCompatibilityEntry, bladePowerTrending=bladePowerTrending, bladeAndExpCardWwnGuidVpd4=bladeAndExpCardWwnGuidVpd4, standbyExtEthernetInterfaceType=standbyExtEthernetInterfaceType, smFourPortCfgLinkState=smFourPortCfgLinkState, voltageThresholdBladePowerState=voltageThresholdBladePowerState, spClockTimezoneName=spClockTimezoneName, domainName=domainName, cmeSystemName=cmeSystemName, rearLEDCardHardwareVpdFruSerial=rearLEDCardHardwareVpdFruSerial, componentTemperaturesSensorLabel=componentTemperaturesSensorLabel, smBootRomVpdSwitchType=smBootRomVpdSwitchType, dnsEnabled=dnsEnabled, vlanCMMEntryStatus=vlanCMMEntryStatus, bladePowerRestartTable=bladePowerRestartTable, chassisFanControllerVpdRevision=chassisFanControllerVpdRevision, snmpCommunityEntryCommunityName=snmpCommunityEntryCommunityName, componentSolConsoleUserId=componentSolConsoleUserId, bladeSensor28Volt=bladeSensor28Volt, chassisHardwareRevision=chassisHardwareRevision, extEthernetInterface=extEthernetInterface, bistPowerModulesInstalled=bistPowerModulesInstalled, smOnePortCfgCompatibility=smOnePortCfgCompatibility, chassisFanHardwareVpdEntry=chassisFanHardwareVpdEntry, temperatureSensor6Warning=temperatureSensor6Warning, temperatureSensor1HardShutdown=temperatureSensor1HardShutdown, systemLog75PctFull=systemLog75PctFull, ledFanPackExists=ledFanPackExists, groupRBSBlade9=groupRBSBlade9, bladeSensor2VoltHighWarning=bladeSensor2VoltHighWarning, groupRBSBlade10=groupRBSBlade10, bladeSysMgmtProcVPDEntry=bladeSysMgmtProcVPDEntry, ldapUIDsearchAttribute=ldapUIDsearchAttribute, bladeIOCompatibility=bladeIOCompatibility, bladeSensor3Temp=bladeSensor3Temp, bladeDiagsVpdLevelStatus=bladeDiagsVpdLevelStatus, powerPolicyPowerDomainNumber=powerPolicyPowerDomainNumber, ldapRBSModelCfg=ldapRBSModelCfg, chassisFanHardwareVpdTable=chassisFanHardwareVpdTable, dhcpTertiaryDNSServer=dhcpTertiaryDNSServer, extEthernetInterfaceStatelessAutoConfigAddressesEntry=extEthernetInterfaceStatelessAutoConfigAddressesEntry, restartBladeNMI=restartBladeNMI, componentServiceDataEntry=componentServiceDataEntry, generateTestAlert=generateTestAlert, chassisFanFirmwareVpd=chassisFanFirmwareVpd, cmeIpv4Addresses=cmeIpv4Addresses, componentHealthSummaryTable=componentHealthSummaryTable, chassisPartNumber=chassisPartNumber, logicalUplinkCheckDelay=logicalUplinkCheckDelay, bistRearLEDCardInstalled=bistRearLEDCardInstalled, switchOverRedundantMM=switchOverRedundantMM, snmpUserProfileEntryIpAddress=snmpUserProfileEntryIpAddress, smThreePortCfgProtocol=smThreePortCfgProtocol, activityLogEntry=activityLogEntry, bistChassisFansInstalled=bistChassisFansInstalled, bladeHSDaughterCard1MACAddress4Vpd=bladeHSDaughterCard1MACAddress4Vpd, spEthOverUSBInterfaceTable=spEthOverUSBInterfaceTable, smHardwareVpdBayNumber=smHardwareVpdBayNumber, componentLEDsEntry=componentLEDsEntry, componentPowerDetailsTable=componentPowerDetailsTable, componentFirmwareEntry=componentFirmwareEntry, ldapServer2PortNumber=ldapServer2PortNumber, smPowerOnRestartDelay=smPowerOnRestartDelay, chassisSubtype=chassisSubtype, bladeManagementCardVpdManufacturingId=bladeManagementCardVpdManufacturingId, bladeSensor11VoltHighWarning=bladeSensor11VoltHighWarning, bladeSensor20VoltLowWarning=bladeSensor20VoltLowWarning, smLEDs=smLEDs, temperatureSensor7WarningReset=temperatureSensor7WarningReset, scaling=scaling, componentPowerDetailsPcapMin=componentPowerDetailsPcapMin, pd1ModuleCPUDutyCycles=pd1ModuleCPUDutyCycles, snmpUserProfileEntryPrivProt=snmpUserProfileEntryPrivProt, bladeManagementCardVpdTable=bladeManagementCardVpdTable, bladeHardwareVpdMachineType=bladeHardwareVpdMachineType, smOnePortCfgEntry=smOnePortCfgEntry, smThreePortCfgSpeedStatus=smThreePortCfgSpeedStatus, remoteAlertIdEntryIpOrHostAddress=remoteAlertIdEntryIpOrHostAddress, componentIPv6AddressPrefixLen=componentIPv6AddressPrefixLen, spClockTimezoneDaylightDay=spClockTimezoneDaylightDay, vlanCMMIPv6Address=vlanCMMIPv6Address, pd1ModuleName=pd1ModuleName, bladeIPv6Config=bladeIPv6Config, critFan=critFan, chassisTopology=chassisTopology, mmSshClientAuthPubKeyEntry=mmSshClientAuthPubKeyEntry, smMainAppVpdTable=smMainAppVpdTable, componentStatusBootCountPowerOnTimeBoots=componentStatusBootCountPowerOnTimeBoots, componentIOCompatibilityTopologyPath=componentIOCompatibilityTopologyPath, mmSshServerHostKeyIndex=mmSshServerHostKeyIndex, voltageBladeName=voltageBladeName, bladeAndExpCardWwnGuidVpdBladeBayNumber=bladeAndExpCardWwnGuidVpdBladeBayNumber, bladePowerTrendingSampleEntry=bladePowerTrendingSampleEntry, smCurrentIPInfoExists=smCurrentIPInfoExists, componentStatusTopologyPath=componentStatusTopologyPath, readEventLogAuxEntry=readEventLogAuxEntry, chassisSMsInstalled=chassisSMsInstalled, fileDetailsTable=fileDetailsTable, componentIPv4ConfigDHCPEnable=componentIPv4ConfigDHCPEnable, chassisFanHardwareVpdManufacturingIDNumber=chassisFanHardwareVpdManufacturingIDNumber, scalableComplexNodeName=scalableComplexNodeName, rbsOperator=rbsOperator, fanPackAverageSpeedRPM=fanPackAverageSpeedRPM, chassisRack=chassisRack, bladeDaughterCard4MACAddress1Vpd=bladeDaughterCard4MACAddress1Vpd, bladeSensor7Volt=bladeSensor7Volt, componentFirmwareImageStatus=componentFirmwareImageStatus, componentDHCPv6ConfigEnabled=componentDHCPv6ConfigEnabled, chassisNoOfRearLEDCardsInstalled=chassisNoOfRearLEDCardsInstalled, smHardwareVpdEntry=smHardwareVpdEntry, componentIPv6AddressDefaultRoute=componentIPv6AddressDefaultRoute, bladeSensor4VoltLowWarning=bladeSensor4VoltLowWarning, componentFirmwareTypeID=componentFirmwareTypeID, nodeFirmwareAnalysisBuildId=nodeFirmwareAnalysisBuildId, powerModuleDetails=powerModuleDetails, standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen=standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen, bladeExpCardVpdEntry=bladeExpCardVpdEntry, smHardwareVpdHardwareRevision=smHardwareVpdHardwareRevision, cryptographyModeDetailsDescription=cryptographyModeDetailsDescription, bladeSensorTempCapability=bladeSensorTempCapability, readSystemLogEntry=readSystemLogEntry, componentIPv6ConfigStatelessEnabled=componentIPv6ConfigStatelessEnabled, bladeHardwareVpdEntry=bladeHardwareVpdEntry, bladeIPv4ConfigEntry=bladeIPv4ConfigEntry, componentLEDsTable=componentLEDsTable, fanPackControllerState=fanPackControllerState, chassisFanPowerTrendingSampleAve=chassisFanPowerTrendingSampleAve, rbistRearLEDCardInstalled=rbistRearLEDCardInstalled, critChassis=critChassis, componentInventorySpeed=componentInventorySpeed, temperatureCPU4WarningReset=temperatureCPU4WarningReset, smFirmwareVpd=smFirmwareVpd, nodeFirmwareAnalysisDeviceName=nodeFirmwareAnalysisDeviceName, cinDefExists=cinDefExists, bladeSensor2VoltLowWarning=bladeSensor2VoltLowWarning, componentSolRetryCount=componentSolRetryCount, bladeDaughterCard1MACAddress6Vpd=bladeDaughterCard1MACAddress6Vpd, temperatureCPU1WarningReset=temperatureCPU1WarningReset, groupRBSBlade4=groupRBSBlade4, smOnePortCfgSpeedStatus=smOnePortCfgSpeedStatus, extEthernetInterfaceIPv6StaticIPAddress=extEthernetInterfaceIPv6StaticIPAddress, remoteAccessIdEntryPassword=remoteAccessIdEntryPassword, standbyExtEthernetInterfaceIPAddress=standbyExtEthernetInterfaceIPAddress, firmwareUpdateTarget=firmwareUpdateTarget, componentFirmwarePendingReleaseDate=componentFirmwarePendingReleaseDate, firmwareUpdateServer=firmwareUpdateServer)
mibBuilder.exportSymbols("CME-MIB", rbistPowerModulesFunctional=rbistPowerModulesFunctional, telnetEnable=telnetEnable, pd1PowerTrendingSampleTable=pd1PowerTrendingSampleTable, smOnePortCfgLinkState=smOnePortCfgLinkState, pd1ModuleMeasuredOrStatic=pd1ModuleMeasuredOrStatic, critBlade=critBlade, cinsSupported=cinsSupported, temperatureCPU4Warning=temperatureCPU4Warning, bladeHardwareVpdFruSerial=bladeHardwareVpdFruSerial, rbsChassisAccountManagement=rbsChassisAccountManagement, componentEthOverUSBInterfaceTableCacheTimeout=componentEthOverUSBInterfaceTableCacheTimeout, bootCountPowerOnTimeBoots=bootCountPowerOnTimeBoots, bladeSensor7VoltHighWarning=bladeSensor7VoltHighWarning, chassisFanHardwareVpdSubManufacturerId=chassisFanHardwareVpdSubManufacturerId, chassisSecuritySettings=chassisSecuritySettings, inventoryManagementActivityVpdTable=inventoryManagementActivityVpdTable, hostName=hostName, currentDirectory=currentDirectory, chassisType=chassisType, cryptographySummary=cryptographySummary, snmpTrapsPortAssignment=snmpTrapsPortAssignment, dhcpIPAddress=dhcpIPAddress, smHardwareVpdHardwareRevisionString=smHardwareVpdHardwareRevisionString, temperatureDASD1Warning=temperatureDASD1Warning, bladeSideCardMACAddress1Vpd=bladeSideCardMACAddress1Vpd, snmp=snmp, ledBladeName=ledBladeName, systemIO=systemIO, remoteAccessIdEntryPwdExp=remoteAccessIdEntryPwdExp, chassisRoom=chassisRoom, rearLEDCardHardwareVpdClei=rearLEDCardHardwareVpdClei, chassisFanHardwareVpdFruNumber=chassisFanHardwareVpdFruNumber, bladeHardwareVpdProductId=bladeHardwareVpdProductId, temperatureSensor9HardShutdown=temperatureSensor9HardShutdown, nodeConnectivityTable=nodeConnectivityTable, tcpPortsRestoreDefault=tcpPortsRestoreDefault, standbyDhcpEthernetInterface=standbyDhcpEthernetInterface, temperatureCPU3Warning=temperatureCPU3Warning, bladeSensor10VoltLowWarning=bladeSensor10VoltLowWarning, bladeDiagsVpdRevision=bladeDiagsVpdRevision, bistOtherMMInstalled=bistOtherMMInstalled, bladePlus3pt3VoltHighWarning=bladePlus3pt3VoltHighWarning, fuelGaugeTable=fuelGaugeTable, cmeIpv6AddressesFloat=cmeIpv6AddressesFloat, cmeChassisFruList=cmeChassisFruList, policyWakeOnLanControlEnable=policyWakeOnLanControlEnable, ledComponentCheckLog=ledComponentCheckLog, chassisFanControllerVpdExists=chassisFanControllerVpdExists, standbyExtEthernetInterfaceHostName=standbyExtEthernetInterfaceHostName, systemHealthSummarySeverity=systemHealthSummarySeverity, bladeSideCardMACAddress8Vpd=bladeSideCardMACAddress8Vpd, temperatureCPU3HardShutdown=temperatureCPU3HardShutdown, bladeDaughterCard5MACAddress5Vpd=bladeDaughterCard5MACAddress5Vpd, bladePowerTrendingBladeId=bladePowerTrendingBladeId, rbistOtherMMCommunicating=rbistOtherMMCommunicating, scalableComplexTopologyPath=scalableComplexTopologyPath, powerPolicyIndex=powerPolicyIndex, componentVoltagesHighWarningThreshold=componentVoltagesHighWarningThreshold, ledBladeBayNumber=ledBladeBayNumber, spClockTimezoneDaylightEnd=spClockTimezoneDaylightEnd, configureSP=configureSP, bistChassisFansMUXAFunctional=bistChassisFansMUXAFunctional, pmControllerVPDTable=pmControllerVPDTable, syslogCollectorPort=syslogCollectorPort, scopeIndex=scopeIndex, bladeSensor29Volt=bladeSensor29Volt, rearLEDCardHardwareVpd=rearLEDCardHardwareVpd, standbyEthernetInterfaceDHCPv6DomainName=standbyEthernetInterfaceDHCPv6DomainName, vlanCMMIPv6SubnetRoute1=vlanCMMIPv6SubnetRoute1, bladeHardwareVpdClei=bladeHardwareVpdClei, bladeSensor5VoltHighWarning=bladeSensor5VoltHighWarning, bootSequenceInfoBootSequence=bootSequenceInfoBootSequence, componentInventoryProcessorThreads=componentInventoryProcessorThreads, ledComponentFault=ledComponentFault, bladeDetailsMaxPowerConfig=bladeDetailsMaxPowerConfig, spClockTimezoneIndex=spClockTimezoneIndex, ledBladeFault=ledBladeFault, acceptLicenseAgreement=acceptLicenseAgreement, pmHardwareVpdHardwareRevisionString=pmHardwareVpdHardwareRevisionString, cinIndex=cinIndex, warnStorage=warnStorage, smPingAddressEntryIndex=smPingAddressEntryIndex, componentInventoryFRUNumber=componentInventoryFRUNumber, readEnhancedEventLogTable=readEnhancedEventLogTable, bladeDaughterCard2MACAddress4Vpd=bladeDaughterCard2MACAddress4Vpd, ledBladeLabel=ledBladeLabel, rearLEDCardHardwareVpdProductId=rearLEDCardHardwareVpdProductId, ntpUpdateFrequency=ntpUpdateFrequency, contactName=contactName, smOnePortCfgCableType=smOnePortCfgCableType, chassisFanControllerVPDEntry=chassisFanControllerVPDEntry, chassisLowestU=chassisLowestU, remoteAccessIdEntryState=remoteAccessIdEntryState, smThreePortCfgTable=smThreePortCfgTable, componentTimeEntry=componentTimeEntry, chassisFanControllerVpdIndex=chassisFanControllerVpdIndex, licenseKeyInfoEntry=licenseKeyInfoEntry, snmpUserProfileTable=snmpUserProfileTable, groupRBSSwitch3=groupRBSSwitch3, processorBlade=processorBlade, smMainAppVpdId=smMainAppVpdId, rbsChassisConfiguration=rbsChassisConfiguration, chassisManufacturingIDNumber=chassisManufacturingIDNumber, ledBladeId=ledBladeId, smMainApp1VpdRevisionNumber=smMainApp1VpdRevisionNumber, smFourPortCfgWidth=smFourPortCfgWidth, rbistLogicalNetworkLink=rbistLogicalNetworkLink, nodeConnectivityName=nodeConnectivityName, smRestartAndRunExtDiag=smRestartAndRunExtDiag, smIPv6ConfigTable=smIPv6ConfigTable, autoFTPCallUserID=autoFTPCallUserID, pmHardwareVpdEntry=pmHardwareVpdEntry, snmpCommunityEntryIndex=snmpCommunityEntryIndex, chassisPowerService=chassisPowerService, groupRBSBladeRemotePresence=groupRBSBladeRemotePresence, extEthernetInterfaceIPv6AutoIPConfig=extEthernetInterfaceIPv6AutoIPConfig, dnsServerIPv6Address1=dnsServerIPv6Address1, smFourPortCfgCompatibility=smFourPortCfgCompatibility, componentPowerDetailsDynamicPowerFavorPerformanceOverPower=componentPowerDetailsDynamicPowerFavorPerformanceOverPower, bistLocalI2CBus=bistLocalI2CBus, remoteAccessIdEntryUserId=remoteAccessIdEntryUserId, componentLevelActivityVpdTimestamp=componentLevelActivityVpdTimestamp, temperatureCPU2WarningReset=temperatureCPU2WarningReset, componentServiceDataTopologyPath=componentServiceDataTopologyPath, componentLevelActivityVpdAction=componentLevelActivityVpdAction, cryptographyMode=cryptographyMode, componentServiceResetTopologyPath=componentServiceResetTopologyPath, bladeExpCardVpdSubManufacturerId=bladeExpCardVpdSubManufacturerId, rearLEDCardThermalTrendingTemperatureMin=rearLEDCardThermalTrendingTemperatureMin, ledFanPackId=ledFanPackId, smPowerServiceResetIndex=smPowerServiceResetIndex, bladePowerEnableSMSBootMenu=bladePowerEnableSMSBootMenu, componentServiceReset=componentServiceReset, smtpEmailDomain=smtpEmailDomain, mmHardwareVpd=mmHardwareVpd, portBaud=portBaud, rbsBlade8=rbsBlade8, extEthernetInterfaceMTU=extEthernetInterfaceMTU, standbyEthernetInterfaceStatelessAutoConfigAddressesEntry=standbyEthernetInterfaceStatelessAutoConfigAddressesEntry, componentPowerDetailsPcapGuaranteedMin=componentPowerDetailsPcapGuaranteedMin, solBladeSessionStatus=solBladeSessionStatus, ldapClientAuthenticationPassword=ldapClientAuthenticationPassword, powerModuleState=powerModuleState, bladeDaughterCard5MACAddress4Vpd=bladeDaughterCard5MACAddress4Vpd, groupRBSscopeEntry=groupRBSscopeEntry, configurationBladePendingBootMode=configurationBladePendingBootMode, componentSolBytesSent=componentSolBytesSent, spClockTimezoneId=spClockTimezoneId, extEthernetInterfaceSubnetMask=extEthernetInterfaceSubnetMask, warnBlade=warnBlade, dhcpPrimaryDNSServer=dhcpPrimaryDNSServer, groupRBSSwitch7=groupRBSSwitch7, ldapServer4NameOrIPAddress=ldapServer4NameOrIPAddress, smControlEntry=smControlEntry, bladePlus1pt5VoltHighWarning=bladePlus1pt5VoltHighWarning, rbsSwitch6=rbsSwitch6, smIPv6StaticConfigTable=smIPv6StaticConfigTable, bladeIPv4ConfigPortIndex=bladeIPv4ConfigPortIndex, smThreePortCfgVendorName=smThreePortCfgVendorName, smTwoPortCfgEntry=smTwoPortCfgEntry, componentVoltagesEntry=componentVoltagesEntry, cryptographyCipherComponentIndex=cryptographyCipherComponentIndex, chassisFanLEDs=chassisFanLEDs, bladeDaughterVpdMachineType=bladeDaughterVpdMachineType, bladeSensor12Volt=bladeSensor12Volt, componentMACAddressName=componentMACAddressName, bistPrimaryKernel=bistPrimaryKernel, resetSPConfigAndRestart=resetSPConfigAndRestart, extEthernetInterfaceDHCPv6TertiaryDNSServer=extEthernetInterfaceDHCPv6TertiaryDNSServer, bladeSensor1Volt=bladeSensor1Volt, standbyDhcpDomainName=standbyDhcpDomainName, ledBladeIndex=ledBladeIndex, temperatureCPU1=temperatureCPU1, warnPower=warnPower, cryptographyCipherComponentEntry=cryptographyCipherComponentEntry, bladeDHCPv6ConfigEnabled=bladeDHCPv6ConfigEnabled, componentFirmware=componentFirmware, bayDataBladeStatus=bayDataBladeStatus, snmpCommunityEntryCommunityIpAddress3=snmpCommunityEntryCommunityIpAddress3, readCallHomeExclusionEventIndex=readCallHomeExclusionEventIndex, autoFTPCallAddr=autoFTPCallAddr, smPowerServiceResetTable=smPowerServiceResetTable, readSystemLogMessage=readSystemLogMessage, chassisRearLEDCardInstalled=chassisRearLEDCardInstalled, remoteAlertRetryCount=remoteAlertRetryCount, bladeIPv6ConfigStatic=bladeIPv6ConfigStatic, componentServiceDataDumpCapabilityMask=componentServiceDataDumpCapabilityMask, groupRBSscopeTable=groupRBSscopeTable, fuelGaugePowerModules=fuelGaugePowerModules, ehiThermalTrendingTimeStamp=ehiThermalTrendingTimeStamp, rbistChassisFansMUXBInstalled=rbistChassisFansMUXBInstalled, groupRBSscopeId=groupRBSscopeId, switchModTwoPortCfg=switchModTwoPortCfg, solBladeConfig=solBladeConfig, backupRestoreLogURI=backupRestoreLogURI, checkLogLED=checkLogLED, vlanCMMTable=vlanCMMTable, componentStatusIOCompatibility=componentStatusIOCompatibility, hotAirRecircStatusEntry=hotAirRecircStatusEntry, pd1PowerTrendingPeriod=pd1PowerTrendingPeriod, logicalUplinkIPv6Destination=logicalUplinkIPv6Destination, restartBladeClearNVRAM=restartBladeClearNVRAM, extEthernetInterfaceIPv6StaticIPAddressPrefixLen=extEthernetInterfaceIPv6StaticIPAddressPrefixLen, componentTemperaturesTableCacheTimeout=componentTemperaturesTableCacheTimeout, mmHardwareVpdPartNumber=mmHardwareVpdPartNumber, smOnePortCfgType=smOnePortCfgType, cinTable=cinTable, componentIPv4ConfigPortIndex=componentIPv4ConfigPortIndex, readEventLogAuxNumber=readEventLogAuxNumber, bootDeviceActive=bootDeviceActive, cmeUuid=cmeUuid, smTwoPortCfgDataRate=smTwoPortCfgDataRate, rbsBlade5=rbsBlade5, bladeHardwareVpdPartNumber=bladeHardwareVpdPartNumber, chassisFansEntry=chassisFansEntry, systemBlade=systemBlade, componentFirmwareIndex=componentFirmwareIndex, bladeHardwareVpdSerialNumber=bladeHardwareVpdSerialNumber, bladeExpCardVpdHighSpeed=bladeExpCardVpdHighSpeed, componentIPv6AddressType=componentIPv6AddressType, trackingIP=trackingIP, extEthernetInterfaceLAA=extEthernetInterfaceLAA, snmpv3SystemAgentEnable=snmpv3SystemAgentEnable, smIPv6StaticAddressPrefixLen=smIPv6StaticAddressPrefixLen, cryptographyCipherComponentId=cryptographyCipherComponentId, bladeDaughterCard4MACAddress4Vpd=bladeDaughterCard4MACAddress4Vpd, fuelGaugeAllocatedPower=fuelGaugeAllocatedPower, firmwareUpdate=firmwareUpdate, bladeHealthSummaryEntry=bladeHealthSummaryEntry, bladeSensor24Volt=bladeSensor24Volt, smLEDsEntry=smLEDsEntry, componentFirmwareTable=componentFirmwareTable, ledBladeExists=ledBladeExists, componentTimeName=componentTimeName, vlanCMMIPv4Gateway=vlanCMMIPv4Gateway, bladeConfiguration=bladeConfiguration, bootSequenceInfoEntry=bootSequenceInfoEntry, bladeHSDaughterCard1MACAddress7Vpd=bladeHSDaughterCard1MACAddress7Vpd, cryptographyModeDetailsType=cryptographyModeDetailsType, snmpSystemContact=snmpSystemContact, smIPv6StaticAddress=smIPv6StaticAddress, spClockTimezoneDaylightStandardDayOfWeek=spClockTimezoneDaylightStandardDayOfWeek, componentVoltagesSensorValue=componentVoltagesSensorValue, bladeSensor3VoltHighWarning=bladeSensor3VoltHighWarning, bladeSensor1Temp=bladeSensor1Temp, spTxtId=spTxtId, componentEthOverUSBInterfaceName=componentEthOverUSBInterfaceName, componentSolEntry=componentSolEntry, defaultAdminPasswordExpired=defaultAdminPasswordExpired, fanPackLEDsTable=fanPackLEDsTable, bladeSensor5VoltLowWarning=bladeSensor5VoltLowWarning, bladeSensor23VoltLowWarning=bladeSensor23VoltLowWarning, ldapDomainName=ldapDomainName, componentIPv6ConfigTable=componentIPv6ConfigTable)
mibBuilder.exportSymbols("CME-MIB", componentStatusWidth=componentStatusWidth, readSystemLogTable=readSystemLogTable, powerPolicyEstimatedUtilization=powerPolicyEstimatedUtilization, componentLEDsDetailsTableCacheTimeout=componentLEDsDetailsTableCacheTimeout, extEthernetInterfaceIPv6LinkLocalAddress=extEthernetInterfaceIPv6LinkLocalAddress, remoteAlertIdsTable=remoteAlertIdsTable, extEthernetInterfaceStatelessAutoConfigAddresses=extEthernetInterfaceStatelessAutoConfigAddresses, vlanCMMIPv4Mask=vlanCMMIPv4Mask, chassisCoolingIndex=chassisCoolingIndex, smPowerServiceResetStatus=smPowerServiceResetStatus, pmHardwareVpdUuid=pmHardwareVpdUuid, chassisActiveMM=chassisActiveMM, snmpCommunityEntryCommunityIpAddress1=snmpCommunityEntryCommunityIpAddress1, bladeDaughterVpdPartNumber=bladeDaughterVpdPartNumber, chassisManufacturingId=chassisManufacturingId, cryptographyModeComponentTable=cryptographyModeComponentTable, bladeSensor9Temp=bladeSensor9Temp, bistLastUpdate=bistLastUpdate, extEthernetInterfaceIPv6StatelessAutoConfig=extEthernetInterfaceIPv6StatelessAutoConfig, serviceDataDumpInProgress=serviceDataDumpInProgress, componentPowerState=componentPowerState, componentFirmwareTableCacheTimeout=componentFirmwareTableCacheTimeout, smIOCompatibilityIndex=smIOCompatibilityIndex, serviceDataBladeId=serviceDataBladeId, minimumDiffCharsPassword=minimumDiffCharsPassword, bladePowerTrendingSampleAve=bladePowerTrendingSampleAve, fanPack=fanPack, bladeDaughterCard1MACAddress5Vpd=bladeDaughterCard1MACAddress5Vpd, extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen=extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen, smSwitchWidth=smSwitchWidth, componentVoltagesSensorLabel=componentVoltagesSensorLabel, vlanCMMIPv4SubnetRoute2=vlanCMMIPv4SubnetRoute2, componentMACAddressIndex=componentMACAddressIndex, bladeHSDaughterCard1MACAddress8Vpd=bladeHSDaughterCard1MACAddress8Vpd, fileName=fileName, spClockTimezoneDaylightCaption=spClockTimezoneDaylightCaption, bladeIPv6AddressTable=bladeIPv6AddressTable, standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen=standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen, temperatureBladeName=temperatureBladeName, passwordChangeInterval=passwordChangeInterval, chassisVpd=chassisVpd, componentConfigurationPendingBootMode=componentConfigurationPendingBootMode, remoteAccessIdEntryPermgroups=remoteAccessIdEntryPermgroups, chassisFanPowerTrendingSampleIndex=chassisFanPowerTrendingSampleIndex, cmeChassisRackId=cmeChassisRackId, bladeLEDsEntry=bladeLEDsEntry, bladeSensor24VoltHighWarning=bladeSensor24VoltHighWarning, groupRBSSupervisor=groupRBSSupervisor, vlanCMMIPv4Address=vlanCMMIPv4Address, bladeSensorVoltCapability=bladeSensorVoltCapability, bladePowerTrendingTopologyPath=bladePowerTrendingTopologyPath, bladeExpCardVpdFruSerial=bladeExpCardVpdFruSerial, smStackingModeState=smStackingModeState, mmHardwareVpdClei=mmHardwareVpdClei, bladeSensor13VoltHighWarning=bladeSensor13VoltHighWarning, componentIPv6ConfigEntry=componentIPv6ConfigEntry, hotAirRecircStatusSensorLabel=hotAirRecircStatusSensorLabel, standbyEthernetInterfaceIPv6StaticIPDefaultRoute=standbyEthernetInterfaceIPv6StaticIPDefaultRoute, chassisNoOfBayDevicesSupported=chassisNoOfBayDevicesSupported, spClockTimezoneDaylightStandardInMinutes=spClockTimezoneDaylightStandardInMinutes, chassisFanPowerTrendingSampleMin=chassisFanPowerTrendingSampleMin, smFourPortCfgVendorName=smFourPortCfgVendorName, groupRBSSwitchModuleConfiguration=groupRBSSwitchModuleConfiguration, bladePowerState=bladePowerState, bladeSensor1VoltLowWarning=bladeSensor1VoltLowWarning, systemInventory=systemInventory, restartBlade=restartBlade, componentTimeTableCacheTimeout=componentTimeTableCacheTimeout, groupRBSSwitch2=groupRBSSwitch2, snmpAgentUserProfileConfig=snmpAgentUserProfileConfig, bladePlus5VoltHighWarning=bladePlus5VoltHighWarning, spClockTimezoneDaylightStandardMonth=spClockTimezoneDaylightStandardMonth, componentInventoryHardwareRevision=componentInventoryHardwareRevision, componentMACAddress=componentMACAddress, mmSshServerHostKeyType=mmSshServerHostKeyType, smTwoPortCfgTable=smTwoPortCfgTable, smIPv6AddressTable=smIPv6AddressTable, voltageBladeId=voltageBladeId, bladeHealthSummaryBladeId=bladeHealthSummaryBladeId, snmpCommunityTable=snmpCommunityTable, pmHardwareVpdClei=pmHardwareVpdClei, solBladeConsoleLoginFrom=solBladeConsoleLoginFrom, fileTopology=fileTopology, readSystemLogNumber=readSystemLogNumber, ehiThermalTrendingEntry=ehiThermalTrendingEntry, smHardwareVpdPartNumber=smHardwareVpdPartNumber, bladePlus12VoltHighWarning=bladePlus12VoltHighWarning, componentSolBytesReceived=componentSolBytesReceived, bladeDetailsId=bladeDetailsId, smTwoPortCfgVendorName=smTwoPortCfgVendorName, bladeIPv4ConfigVlanId=bladeIPv4ConfigVlanId, bladeSensor3Volt=bladeSensor3Volt, solBladeDestinationMAC=solBladeDestinationMAC, vlanCMMIPv4SubnetRoute3=vlanCMMIPv4SubnetRoute3, ftpEnable=ftpEnable, systemHealth=systemHealth, bladePowerRestart=bladePowerRestart, componentFirmwareComponentInstance=componentFirmwareComponentInstance, systemHealthSummaryEventID=systemHealthSummaryEventID, bistLogicalNetworkLink=bistLogicalNetworkLink, smBootRomVpdEntry=smBootRomVpdEntry, temperatureCPU4=temperatureCPU4, userInterfaces=userInterfaces, smIOCompatibilityModuleFabricType=smIOCompatibilityModuleFabricType, componentServiceData=componentServiceData, currentlyLoggedInEntry=currentlyLoggedInEntry, powerRestartBladeName=powerRestartBladeName, rearLEDCardHardwareVpdSubManufacturerId=rearLEDCardHardwareVpdSubManufacturerId, restartBladeToSMSBootMenu=restartBladeToSMSBootMenu, temperatureSensor8HardShutdown=temperatureSensor8HardShutdown, bladeSensor23VoltHighWarning=bladeSensor23VoltHighWarning, smNewIPConfigEnableDisable=smNewIPConfigEnableDisable, ntpAuthEntry=ntpAuthEntry, rbsBladeRemotePresence=rbsBladeRemotePresence, switchModuleControl=switchModuleControl, chassisLicenseKeyStatus=chassisLicenseKeyStatus, spClock=spClock, rbistChassisFansMUXBFunctional=rbistChassisFansMUXBFunctional, componentPowerTableCacheTimeout=componentPowerTableCacheTimeout, nodeFirmwareAnalysisReleaseDate=nodeFirmwareAnalysisReleaseDate, powerPolicyPwrSupplyFailureLimit=powerPolicyPwrSupplyFailureLimit, nodeFirmwareAnalysisFirmwareType=nodeFirmwareAnalysisFirmwareType, smFourPortCfgSpeedStatus=smFourPortCfgSpeedStatus, smIPv6StaticConfigEntry=smIPv6StaticConfigEntry, components=components, groupRBSBladeOperator=groupRBSBladeOperator, bladeHardwareVpdBayNumber=bladeHardwareVpdBayNumber, bladeDaughterCard3MACAddress8Vpd=bladeDaughterCard3MACAddress8Vpd, smThreePortCfgType=smThreePortCfgType, ehiThermalTrendingMaxEHI=ehiThermalTrendingMaxEHI, smHardwareVpdSubManufacturerId=smHardwareVpdSubManufacturerId, componentEthOverUSBInterfaceTopologyPath=componentEthOverUSBInterfaceTopologyPath, componentIPv4ConfigGatewayAddr=componentIPv4ConfigGatewayAddr, componentSolConsoleLoginFrom=componentSolConsoleLoginFrom, policyControlBladeName=policyControlBladeName, componentConfiguration=componentConfiguration, smFourPortCfgTable=smFourPortCfgTable, bootDeviceLabel=bootDeviceLabel, pmHardwareVpdHardwareRevision=pmHardwareVpdHardwareRevision, sslServerEnable=sslServerEnable, bladeHardwareVpdSubManufacturerId=bladeHardwareVpdSubManufacturerId, smThreePortCfgLabel=smThreePortCfgLabel, syslogCollectorEntry=syslogCollectorEntry, uplinkCheckConfig=uplinkCheckConfig, chassisFanHardwareVpdClei=chassisFanHardwareVpdClei, temperatureSensor3WarningReset=temperatureSensor3WarningReset, remoteAlertIdEntryNotificationType=remoteAlertIdEntryNotificationType, bladeHighSpeedConnectionType=bladeHighSpeedConnectionType, cmeChassisMidPid=cmeChassisMidPid, solBladeIpAddr6=solBladeIpAddr6, rbistOtherMMInstalled=rbistOtherMMInstalled, currentlyLoggedInEntryAccMethod=currentlyLoggedInEntryAccMethod, chassisFanHardwareVpdPartNumber=chassisFanHardwareVpdPartNumber, cmeSerial=cmeSerial, componentBayDataName=componentBayDataName, bladeDaughterCard4MACAddress5Vpd=bladeDaughterCard4MACAddress5Vpd, spClockTimezoneStandardOffsetMinutes=spClockTimezoneStandardOffsetMinutes, ledFanPackError=ledFanPackError, componentSolConsoleLoginEnd=componentSolConsoleLoginEnd, bladeSPEthOverUSBInterface=bladeSPEthOverUSBInterface, readEventLogTable=readEventLogTable, chassisSerialNumber=chassisSerialNumber, bladeDetailsDynamicPowerFavorPerformanceOverPower=bladeDetailsDynamicPowerFavorPerformanceOverPower, extEthernetInterfaceIPv6LocalAddress=extEthernetInterfaceIPv6LocalAddress, smHardwareVpdWwnGuid=smHardwareVpdWwnGuid, rbistLastUpdatePrimary=rbistLastUpdatePrimary, componentLevelActivityVpdSerialNumber=componentLevelActivityVpdSerialNumber, bladeSensor4Temp=bladeSensor4Temp, rbsSwitch2=rbsSwitch2, switchPowerTrendingSampleIndex=switchPowerTrendingSampleIndex, policyControlBladeHealthState=policyControlBladeHealthState, accountSecurityManagement=accountSecurityManagement, smTwoPortCfgCableLength=smTwoPortCfgCableLength, extEthernetInterfaceDHCPv6IPAddress=extEthernetInterfaceDHCPv6IPAddress, bladeDaughterVpdManufDate=bladeDaughterVpdManufDate, extEthernetInterfaceDHCPv6Enabled=extEthernetInterfaceDHCPv6Enabled, spStatus=spStatus, cmmCentralManagerIPMISNMPv3=cmmCentralManagerIPMISNMPv3, vlanCMMIPv6Gateway=vlanCMMIPv6Gateway, chassisFanState=chassisFanState, bladeDaughterCard3MACAddress4Vpd=bladeDaughterCard3MACAddress4Vpd, cfmThermalTrendingIndex=cfmThermalTrendingIndex, chassisThermalTrendingPeriod=chassisThermalTrendingPeriod, bladeSideCardMACAddress6Vpd=bladeSideCardMACAddress6Vpd, groupEntryStatus=groupEntryStatus, groupRBSBladeConfiguration=groupRBSBladeConfiguration, componentBayDataTable=componentBayDataTable, licenseKeyStatus=licenseKeyStatus, bladeMACAddress1Vpd=bladeMACAddress1Vpd, chassisFanHardwareVpd=chassisFanHardwareVpd, passiveAirFilter=passiveAirFilter, mmSshClientAuthPubKeyComment=mmSshClientAuthPubKeyComment, critStorage=critStorage, switchPowerTrendingSampleMax=switchPowerTrendingSampleMax, bladeIPv4ConfigTable=bladeIPv4ConfigTable, smFirmwareInfoImageName=smFirmwareInfoImageName, solBladeBytesReceived=solBladeBytesReceived, reloadHwVpdData=reloadHwVpdData, rbsBlade10=rbsBlade10, bladeDaughterCard5MACAddress8Vpd=bladeDaughterCard5MACAddress8Vpd, bladeManagementCardVpdEntry=bladeManagementCardVpdEntry, remoteAlertsCrit=remoteAlertsCrit, switchPowerTrending=switchPowerTrending, chassisPowerTrendingPeriod=chassisPowerTrendingPeriod, vlanConfigure=vlanConfigure, voltageBladePowerState=voltageBladePowerState, securitySettings=securitySettings, mmHardwareVpdManufDate=mmHardwareVpdManufDate, mmStatusTable=mmStatusTable, componentIPv6AddressName=componentIPv6AddressName, cryptographyModeComponentEntry=cryptographyModeComponentEntry, fanPackExists=fanPackExists, bistPhysicalNetworkLink=bistPhysicalNetworkLink, solBladeRetryCount=solBladeRetryCount, bootDeviceUserLabel=bootDeviceUserLabel, standbyExtEthernetInterfaceDuplexSetting=standbyExtEthernetInterfaceDuplexSetting, smCurrentIPAddr=smCurrentIPAddr, bladeAndExpCardWwnGuidVpd2=bladeAndExpCardWwnGuidVpd2, componentPowerDetailsMaximumClockRate=componentPowerDetailsMaximumClockRate, remoteAccessIdEntryMaxSessions=remoteAccessIdEntryMaxSessions, bladeManagementCardVpdHardwareRevision=bladeManagementCardVpdHardwareRevision, switchModFourPortCfg=switchModFourPortCfg, vlanCMMIndex=vlanCMMIndex, ehiThermalTrendingMinEHI=ehiThermalTrendingMinEHI, componentInventoryProductVersion=componentInventoryProductVersion, backupRestorePassword=backupRestorePassword, bladeDaughterVpdHardwareRevision=bladeDaughterVpdHardwareRevision, chassisFanPowerTrendingPeriod=chassisFanPowerTrendingPeriod, temperatureCPU1HardShutdown=temperatureCPU1HardShutdown, remoteAlertIds=remoteAlertIds, smTwoPortCfgLinkSetting=smTwoPortCfgLinkSetting, chassisFanLEDsEntry=chassisFanLEDsEntry, cryptography=cryptography, mmSshClientAuthPubKeyEntryStatus=mmSshClientAuthPubKeyEntryStatus, physicalUplinkCheckDelayInSecs=physicalUplinkCheckDelayInSecs, rbsBlade12=rbsBlade12, mmHardwareVpdHardwareRevisionString=mmHardwareVpdHardwareRevisionString, bladeSensor25Volt=bladeSensor25Volt, bootInfoTopologyIndex=bootInfoTopologyIndex, mmHardwareVpdBayNumber=mmHardwareVpdBayNumber, bladePlus5VoltLowWarning=bladePlus5VoltLowWarning, remoteAccessIdEntryLastLogin=remoteAccessIdEntryLastLogin, bladeHardwareVpdMachineModel=bladeHardwareVpdMachineModel, bladeBiosVpdRevision=bladeBiosVpdRevision, componentSolTopologyPath=componentSolTopologyPath, standbyExtEthernetInterfaceLAA=standbyExtEthernetInterfaceLAA, ledBladeLocation=ledBladeLocation, smRestartAndRunStdDiag=smRestartAndRunStdDiag, temperatureCPU2Warning=temperatureCPU2Warning, configurationBladePowerOnRestartDelay=configurationBladePowerOnRestartDelay, bladeSensor10VoltHighWarning=bladeSensor10VoltHighWarning, policyControlIndex=policyControlIndex, readCallHomeExclusionEventEntry=readCallHomeExclusionEventEntry, rbsSwitch1=rbsSwitch1)
mibBuilder.exportSymbols("CME-MIB", fuelGaugeInformation=fuelGaugeInformation, autoCallHomeSetup=autoCallHomeSetup, bladeSensor3VoltLowWarning=bladeSensor3VoltLowWarning, componentIOCompatibilityTable=componentIOCompatibilityTable, mmSshClientAuthPubKeyTftpServer=mmSshClientAuthPubKeyTftpServer, cinStatusString=cinStatusString, serviceSupportCenter=serviceSupportCenter, bladePlus1pt25VoltLowWarning=bladePlus1pt25VoltLowWarning, bistBootRomFlashImage=bistBootRomFlashImage, groupRBSBlade8=groupRBSBlade8, voltageIndex=voltageIndex, smMainApp1VpdBuildId=smMainApp1VpdBuildId, componentServiceDataTable=componentServiceDataTable, bladeHardwareVpdHardwareRevisionString=bladeHardwareVpdHardwareRevisionString, solResetBladeKeySeq=solResetBladeKeySeq, rbsChassisAdministration=rbsChassisAdministration, bladeVoltThresholdSensorCapability=bladeVoltThresholdSensorCapability, bladeSensor15VoltHighWarning=bladeSensor15VoltHighWarning, smTwoPortCfgCableType=smTwoPortCfgCableType, groupRBSSwitch10=groupRBSSwitch10, addCallHomeExclusionEvent=addCallHomeExclusionEvent, bistSwitchModulesCommunicating=bistSwitchModulesCommunicating, cmeChassisId=cmeChassisId, bladeHardwareVpdFruNumber=bladeHardwareVpdFruNumber, bladeBiosVpdExists=bladeBiosVpdExists, componentTemperaturesWarningThreshold=componentTemperaturesWarningThreshold, componentBayDataEntry=componentBayDataEntry, temperatureSensor5HardShutdown=temperatureSensor5HardShutdown, chassisMMsInstalled=chassisMMsInstalled, componentMACAddressTable=componentMACAddressTable, bladeMACAddressVpdTable=bladeMACAddressVpdTable, componentSolCapability=componentSolCapability, componentSolIpAddr6=componentSolIpAddr6, cinStatusEntry=cinStatusEntry, vlanCommitState=vlanCommitState, smMainAppVpdSwitchType=smMainAppVpdSwitchType, smPMCtrlEnableDisable=smPMCtrlEnableDisable, licenseKeyInfo=licenseKeyInfo, bladeExpCardVpdClei=bladeExpCardVpdClei, cmeChassisRoomId=cmeChassisRoomId, accountSecurityLevel=accountSecurityLevel, rbistChassisFansInstalled=rbistChassisFansInstalled, chassisSubManufacturerId=chassisSubManufacturerId, standbyDomainName=standbyDomainName, componentInventoryTableCacheTimeout=componentInventoryTableCacheTimeout, cryptographicCipher=cryptographicCipher, temperatureThresholdBladeExists=temperatureThresholdBladeExists, serviceDataDumpRetrieve=serviceDataDumpRetrieve, remoteAccessIdEntryDormant=remoteAccessIdEntryDormant, rearLEDCardTempMax=rearLEDCardTempMax, componentFirmwareRevisionMinor=componentFirmwareRevisionMinor, bladeIPv6ConfigEnabled=bladeIPv6ConfigEnabled, bladePowerTrendingSampleTimeStamp=bladePowerTrendingSampleTimeStamp, bladePlus5Volt=bladePlus5Volt, chassisLicenseKeyIndex=chassisLicenseKeyIndex, bladeMACAddress5Vpd=bladeMACAddress5Vpd, standbyEthernetInterfaceIPv6StaticIPConfig=standbyEthernetInterfaceIPv6StaticIPConfig, smIPv6AddressType=smIPv6AddressType, mmMainApplVpdName=mmMainApplVpdName, warnIO=warnIO, smBootRomVpdExists=smBootRomVpdExists, smPostResultsValue=smPostResultsValue, extEthernetInterfaceIPv6LinkFloatingAddress=extEthernetInterfaceIPv6LinkFloatingAddress, pd1ModulePowerCapabilities=pd1ModulePowerCapabilities, dhcpEthernetInterface=dhcpEthernetInterface, vlanCMMIPv4SubnetRoute1=vlanCMMIPv4SubnetRoute1, acousticMode=acousticMode, componentPowerDetailsRuntimeCap=componentPowerDetailsRuntimeCap, smHardwareVpdUuid=smHardwareVpdUuid, ledComponentName=ledComponentName, componentFirmwareRevision=componentFirmwareRevision, bladePowerServiceResetStatus=bladePowerServiceResetStatus, rbsBlade4=rbsBlade4, syslogCollectorIndex=syslogCollectorIndex, smBootRomVpdTable=smBootRomVpdTable, rearLEDCardHardwareVpdManufDate=rearLEDCardHardwareVpdManufDate, standbyEthernetInterfaceIPv6LinkLocalAddress=standbyEthernetInterfaceIPv6LinkLocalAddress, componentInventoryProcessorVoltage=componentInventoryProcessorVoltage, bayDataBladePowerState=bayDataBladePowerState, componentConfigurationAutoPowerOn=componentConfigurationAutoPowerOn, bladeHardwareVpd=bladeHardwareVpd, altPhoneNumber=altPhoneNumber, remoteAccessIdEntryLoggedIn=remoteAccessIdEntryLoggedIn, bladePowerServiceResetCmd=bladePowerServiceResetCmd, groupRBSBlade13=groupRBSBlade13, dnsConfig=dnsConfig, systemRemoteLogin=systemRemoteLogin, firmwareImageNumber=firmwareImageNumber, powerModuleExists=powerModuleExists, bladeConnectionType2=bladeConnectionType2, componentIOCompatibilityIOMFabricType=componentIOCompatibilityIOMFabricType, rbistBladesCommunicating=rbistBladesCommunicating, policyControlBladeId=policyControlBladeId, cryptographyModeComponentIndex=cryptographyModeComponentIndex, bladePlus3pt3VoltLowWarning=bladePlus3pt3VoltLowWarning, chassisFanPowerTrendingSampleEntry=chassisFanPowerTrendingSampleEntry, rbsBlade9=rbsBlade9, spEthOverUSBInterfaceBladeId=spEthOverUSBInterfaceBladeId, smMainApp2VpdRevisionNumber=smMainApp2VpdRevisionNumber, bladeBiosVpdName=bladeBiosVpdName, bootDeviceInfoEntry=bootDeviceInfoEntry, smOnePortCfgAvailSpeeds=smOnePortCfgAvailSpeeds, chassisThermalTrending=chassisThermalTrending, cinIpAddress=cinIpAddress, solRetryInterval=solRetryInterval, syslogSevFilterLevel=syslogSevFilterLevel, extEthernetInterfaceBIA=extEthernetInterfaceBIA, chassisNoOfFPsSupported=chassisNoOfFPsSupported, groupRBSroleId=groupRBSroleId, configurationBladeExists=configurationBladeExists, bladeHealthSummaryIndex=bladeHealthSummaryIndex, componentInventorySize=componentInventorySize, ldapGroupSearchAttribute=ldapGroupSearchAttribute, rbistChassisFansMUXAFunctional=rbistChassisFansMUXAFunctional, solBladeEntry=solBladeEntry, componentBayData=componentBayData, airFilter=airFilter, licenseKeyLicenseID=licenseKeyLicenseID, sshEnable=sshEnable, pd1BayNumber=pd1BayNumber, powerManagementPolicy=powerManagementPolicy, currentlyLoggedInTable=currentlyLoggedInTable, bladeSensor12VoltHighWarning=bladeSensor12VoltHighWarning, solRetry=solRetry, bistSwitchModulesInstalled=bistSwitchModulesInstalled, vlanCMMIPv4SubnetRouteMask2=vlanCMMIPv4SubnetRouteMask2, readEnhancedEventLogMessage=readEnhancedEventLogMessage, smMainApp1VpdBuildDate=smMainApp1VpdBuildDate, smHardwareVpdFruNumber=smHardwareVpdFruNumber, chassisLicenseKeyLicenseID=chassisLicenseKeyLicenseID, temperatureSensor8Warning=temperatureSensor8Warning, bootDeviceInfoTable=bootDeviceInfoTable, componentServiceResetTableCacheTimeout=componentServiceResetTableCacheTimeout, bladeSensor8Temp=bladeSensor8Temp, bladeDaughterCard5MACAddress6Vpd=bladeDaughterCard5MACAddress6Vpd, errorLogs=errorLogs, componentFirmwareRevisionMajor=componentFirmwareRevisionMajor, chassisFanPowerTrendingSampleTimeStamp=chassisFanPowerTrendingSampleTimeStamp, solBladeBytesSent=solBladeBytesSent, rbsSwitch3=rbsSwitch3, componentPowerDetailsPcapMax=componentPowerDetailsPcapMax, readAuditLogSequenceNum=readAuditLogSequenceNum, smHardwareVpdClei=smHardwareVpdClei, remoteAccessIdEntryAction=remoteAccessIdEntryAction, bladeDaughterCard1MACAddress4Vpd=bladeDaughterCard1MACAddress4Vpd, mmSshServerHostKeyGenerate=mmSshServerHostKeyGenerate, chassisFanControllerState=chassisFanControllerState, chassisLicenseKeyFeature=chassisLicenseKeyFeature, scopeId=scopeId, bladeHealthSummaryTable=bladeHealthSummaryTable, bladeHardwareVpdManufacturingIDNumber=bladeHardwareVpdManufacturingIDNumber, mmHardwareVpdManufacturingId=mmHardwareVpdManufacturingId, bladeSensor19Volt=bladeSensor19Volt, bladePlus2pt5VoltLowWarning=bladePlus2pt5VoltLowWarning, componentPowerDetailsEffectiveClockRate=componentPowerDetailsEffectiveClockRate, smCurrentIPInfoEntry=smCurrentIPInfoEntry, pmControllerVpdExists=pmControllerVpdExists, solBladeIndex=solBladeIndex, chassisLicenseKeySystem=chassisLicenseKeySystem, bladeAndExpCardWwnGuidVpd5=bladeAndExpCardWwnGuidVpd5, ledSMLabel=ledSMLabel, solBladeConsoleLoginStart=solBladeConsoleLoginStart, snmpUserProfileEntryAuthProt=snmpUserProfileEntryAuthProt, bladeExpCardVpdSerialNumber=bladeExpCardVpdSerialNumber, authenticationLoggingTimeout=authenticationLoggingTimeout, bladeRemotePowerEnable=bladeRemotePowerEnable, componentHealthTopologyPath=componentHealthTopologyPath, bladeExpCardVpdTable=bladeExpCardVpdTable, standbyEthernetInterfaceDHCPv6Config=standbyEthernetInterfaceDHCPv6Config, scalableComplexEntry=scalableComplexEntry, fileDetailsEntry=fileDetailsEntry, bistSecondaryKernel=bistSecondaryKernel, rearLEDCardTempMin=rearLEDCardTempMin, frontPanelLEDs=frontPanelLEDs, bootCountPowerOnTimeSecs=bootCountPowerOnTimeSecs, logicalUplinkDestination=logicalUplinkDestination, bladeBiosVpdLevelStatus=bladeBiosVpdLevelStatus, bladeManagementCardVpdIndex=bladeManagementCardVpdIndex, fanPackTable=fanPackTable, standbyExtEthernetInterfaceMTU=standbyExtEthernetInterfaceMTU, bladeDaughterVpdUuid=bladeDaughterVpdUuid, spEthOverUSBInterfaceBladeName=spEthOverUSBInterfaceBladeName, smIPv6ConfigEntry=smIPv6ConfigEntry, componentStatusWakeOnLanEnable=componentStatusWakeOnLanEnable, configurationBladeActiveBootMode=configurationBladeActiveBootMode, componentUniqueIDsTableCacheTimeout=componentUniqueIDsTableCacheTimeout, chassisNoOfPMsSupported=chassisNoOfPMsSupported, bladeIPv4ConfigPhysicalLinkState=bladeIPv4ConfigPhysicalLinkState, temperatureIndex=temperatureIndex, monitorTemp=monitorTemp, extEthernetInterfaceIPAddress=extEthernetInterfaceIPAddress, rearLEDCardHardwareVpdHardwareRevisionString=rearLEDCardHardwareVpdHardwareRevisionString, componentPowerDetailsName=componentPowerDetailsName, powerPolicyName=powerPolicyName, componentIOCompatibilityStatus=componentIOCompatibilityStatus, bladeDetailsPcapMin=bladeDetailsPcapMin, smCurrentIPInfoId=smCurrentIPInfoId, smIPv6ConfigStatic=smIPv6ConfigStatic, powerDomain1=powerDomain1, readEnhancedEventLogEntry=readEnhancedEventLogEntry, slpPortAssignment=slpPortAssignment, rearLEDCardTempAvg=rearLEDCardTempAvg, extEthernetInterfaceDHCPv6Server=extEthernetInterfaceDHCPv6Server, spClockTimezoneDaylightStandardDay=spClockTimezoneDaylightStandardDay, emailAddress=emailAddress, systemPWRDO=systemPWRDO, activityLogIndex=activityLogIndex, smLEDsTable=smLEDsTable, bladeDiagsVPDEntry=bladeDiagsVPDEntry, cimPortAssignment=cimPortAssignment, bladeSensor30VoltHighWarning=bladeSensor30VoltHighWarning, reloadFwVpdData=reloadFwVpdData, bladePowerRestartEntry=bladePowerRestartEntry, smTwoPortCfgIndex=smTwoPortCfgIndex, componentInventoryIdentifier=componentInventoryIdentifier, smOnePortCfgCableLength=smOnePortCfgCableLength, cinStatus=cinStatus, ftpTimeout=ftpTimeout, powerDomain1PowerTrending=powerDomain1PowerTrending, bladeIPv6ConfigTable=bladeIPv6ConfigTable, ldapUseDNSOrPreConfiguredServers=ldapUseDNSOrPreConfiguredServers, rbsSwitchModuleAdministration=rbsSwitchModuleAdministration, componentSystemStatusTableCacheTimeout=componentSystemStatusTableCacheTimeout, bladeSensor15VoltLowWarning=bladeSensor15VoltLowWarning, chassisFanLEDsTable=chassisFanLEDsTable, powerRestartBladeHealthState=powerRestartBladeHealthState, smFirmwareInfoEntry=smFirmwareInfoEntry, chassisLicenseKeyTable=chassisLicenseKeyTable, bladeConfigurationEntry=bladeConfigurationEntry, groupRBSChassisOperator=groupRBSChassisOperator, smHardwareVpdProductId=smHardwareVpdProductId, groupRole=groupRole, componentTemperaturesComponentName=componentTemperaturesComponentName, bladePowerServiceResetIndex=bladePowerServiceResetIndex, bladeAndExpCardWwnGuidVpdEntry=bladeAndExpCardWwnGuidVpdEntry, componentFirmwarePendingBuildID=componentFirmwarePendingBuildID, bladeIPv4ConfigIPAddr=bladeIPv4ConfigIPAddr, componentSolName=componentSolName, temperatureSensor7HardShutdown=temperatureSensor7HardShutdown, extEthernetInterfaceDhcpEnabled=extEthernetInterfaceDhcpEnabled, vlanCommitTimeout=vlanCommitTimeout, mmPrimary=mmPrimary, rearLEDCardHardwareVpdManufacturingId=rearLEDCardHardwareVpdManufacturingId, componentServiceResetEntry=componentServiceResetEntry, componentLEDsDetailsState=componentLEDsDetailsState, componentSystemStatusTable=componentSystemStatusTable, bladeVoltageThresholdsEntry=bladeVoltageThresholdsEntry, bladeSensor20VoltHighWarning=bladeSensor20VoltHighWarning, readEnhancedEventLogAttribute=readEnhancedEventLogAttribute, remoteAlertIdsEntry=remoteAlertIdsEntry, pd1PowerTrendingSampleAve=pd1PowerTrendingSampleAve, readEventLogIndex=readEventLogIndex, spClockTimezoneCmmOffset=spClockTimezoneCmmOffset, licenseKeyOtherInfo=licenseKeyOtherInfo)
mibBuilder.exportSymbols("CME-MIB", bladeIPv6ConfigIndex=bladeIPv6ConfigIndex, mmSshClientAuth=mmSshClientAuth, chassisLicenseKeyDescription=chassisLicenseKeyDescription, serviceAdvisor=serviceAdvisor, powerModuleHealthEntry=powerModuleHealthEntry, bladeSensor16VoltHighWarning=bladeSensor16VoltHighWarning, pmHardwareVpdSubManufacturerId=pmHardwareVpdSubManufacturerId, componentInventoryAssetTag=componentInventoryAssetTag, vlanCMMState=vlanCMMState, mmSshClientAuthPubKeyUserId=mmSshClientAuthPubKeyUserId, vlanCMMIPv6SubnetRoute2=vlanCMMIPv6SubnetRoute2, bladeIPv4ConfigSubnetMask=bladeIPv4ConfigSubnetMask, serviceDataIndex=serviceDataIndex, autoFTPCallPassword=autoFTPCallPassword, bladeIPv6AddressEntry=bladeIPv6AddressEntry, componentIPv6ConfigEnabled=componentIPv6ConfigEnabled, smControlIndex=smControlIndex, componentInventoryMemoryType=componentInventoryMemoryType, mmHardwareVpdFruSerial=mmHardwareVpdFruSerial, bladeExists=bladeExists, smIOCompatibilityModuleBay=smIOCompatibilityModuleBay, mmSshClientAuthPubKeyTable=mmSshClientAuthPubKeyTable, readEventLogEntry=readEventLogEntry, activityLogString=activityLogString, ledComponentIdentity=ledComponentIdentity, ledBladeCheckLog=ledBladeCheckLog, vlanCMMIPv6SubnetRoutePrefixLen1=vlanCMMIPv6SubnetRoutePrefixLen1, vlanCMMIPv6SubnetRoute3=vlanCMMIPv6SubnetRoute3, users=users, chassisClei=chassisClei, smSwitchExists=smSwitchExists, switchModuleMemDiagEnableDisable=switchModuleMemDiagEnableDisable, bladeManagementCardVpdFruSerial=bladeManagementCardVpdFruSerial, switchNewNwCfg=switchNewNwCfg, service=service, remoteAccessIdsTable=remoteAccessIdsTable, bladePlus12Volt=bladePlus12Volt, rbsChassisOperator=rbsChassisOperator, bladePolicy=bladePolicy, dhcpDHCPServer=dhcpDHCPServer, autoFTPCallPort=autoFTPCallPort, chassisLicenseKeyTimeLimit=chassisLicenseKeyTimeLimit, componentIPv4ConfigTable=componentIPv4ConfigTable, bladeSensor7Temp=bladeSensor7Temp, smPowerRestartTable=smPowerRestartTable, bladeAndExpCardWwnGuidVpd1=bladeAndExpCardWwnGuidVpd1, bladeMACAddress7Vpd=bladeMACAddress7Vpd, chassisFanId=chassisFanId, mmMainApplVpdRevisonNumber=mmMainApplVpdRevisonNumber, ledIndex=ledIndex, temperatureSensor9Warning=temperatureSensor9Warning, bootDevicePresence=bootDevicePresence, bladeManagementCardVpdSerialNumber=bladeManagementCardVpdSerialNumber, ldapBindingMethod=ldapBindingMethod, groupRBSSwitchModuleAdministration=groupRBSSwitchModuleAdministration, bladeSysMgmtProcVpdBuildId=bladeSysMgmtProcVpdBuildId, slpAddrType=slpAddrType, voltageThresholdBladeName=voltageThresholdBladeName, componentTemperaturesTable=componentTemperaturesTable, bladeAndExpCardWwnGuidVpdName=bladeAndExpCardWwnGuidVpdName, bladeSysMgmtProcVpdLevelStatus=bladeSysMgmtProcVpdLevelStatus, inventoryManagementActivityVpdEntry=inventoryManagementActivityVpdEntry, smHardwareVpdIndex=smHardwareVpdIndex, bladeIPv4ConfigPortLabel=bladeIPv4ConfigPortLabel, bladeDiagsVpdExists=bladeDiagsVpdExists, autoFTPSetup=autoFTPSetup, bladeMACAddress3Vpd=bladeMACAddress3Vpd)
