#
# PySNMP MIB module OMNI-gx2oa100bd-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2oa100bd-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
gx2OA100BD, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2OA100BD")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemOperState, trapNetworkElemAlarmStatus, trapNetworkElemModelNumber, trapChangedValueInteger, trapChangedObjectId, trapIdentifier, trapPerceivedSeverity, trapText, trapNETrapLastTrapTimeStamp, trapChangedValueDisplayString, trapNetworkElemAvailStatus, trapNetworkElemSerialNum, trapNetworkElemAdminState = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState", "trapNetworkElemAlarmStatus", "trapNetworkElemModelNumber", "trapChangedValueInteger", "trapChangedObjectId", "trapIdentifier", "trapPerceivedSeverity", "trapText", "trapNETrapLastTrapTimeStamp", "trapChangedValueDisplayString", "trapNetworkElemAvailStatus", "trapNetworkElemSerialNum", "trapNetworkElemAdminState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, ObjectIdentity, TimeTicks, IpAddress, Counter64, MibIdentifier, NotificationType, ModuleIdentity, NotificationType, Bits, Integer32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "ObjectIdentity", "TimeTicks", "IpAddress", "Counter64", "MibIdentifier", "NotificationType", "ModuleIdentity", "NotificationType", "Bits", "Integer32", "iso", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2OA100BDDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 1))
gx2OA100BDAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2), )
if mibBuilder.loadTexts: gx2OA100BDAnalogTable.setStatus('mandatory')
gx2OA100BDAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDAnalogTableIndex"))
if mibBuilder.loadTexts: gx2OA100BDAnalogEntry.setStatus('mandatory')
gx2OA100BDDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3), )
if mibBuilder.loadTexts: gx2OA100BDDigitalTable.setStatus('mandatory')
gx2OA100BDDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDDigitalTableIndex"))
if mibBuilder.loadTexts: gx2OA100BDDigitalEntry.setStatus('mandatory')
gx2OA100BDStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4), )
if mibBuilder.loadTexts: gx2OA100BDStatusTable.setStatus('mandatory')
gx2OA100BDStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDStatusTableIndex"))
if mibBuilder.loadTexts: gx2OA100BDStatusEntry.setStatus('mandatory')
gx2OA100BDFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5), )
if mibBuilder.loadTexts: gx2OA100BDFactoryTable.setStatus('mandatory')
gx2OA100BDFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDFactoryTableIndex"))
if mibBuilder.loadTexts: gx2OA100BDFactoryEntry.setStatus('mandatory')
gx2OA100BDHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6), )
if mibBuilder.loadTexts: gx2OA100BDHoldTimeTable.setStatus('mandatory')
gx2OA100BDHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6, 5), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDHoldTimeTableIndex"), (0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2OA100BDHoldTimeEntry.setStatus('mandatory')
gx2OA100BDAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDAnalogTableIndex.setStatus('mandatory')
oa100bdlabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelModTemp.setStatus('optional')
oa100bduomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomModTemp.setStatus('optional')
oa100bdmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighModTemp.setStatus('mandatory')
oa100bdmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowModTemp.setStatus('mandatory')
oa100bdminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighModTemp.setStatus('mandatory')
oa100bdminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowModTemp.setStatus('mandatory')
oa100bdcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueModTemp.setStatus('mandatory')
oa100bdstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagModTemp.setStatus('mandatory')
oa100bdminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueModTemp.setStatus('mandatory')
oa100bdmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueModTemp.setStatus('mandatory')
oa100bdalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateModTemp.setStatus('mandatory')
oa100bdlabelOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOptInPower.setStatus('optional')
oa100bduomOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomOptInPower.setStatus('optional')
oa100bdmajorHighOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighOptInPower.setStatus('mandatory')
oa100bdmajorLowOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowOptInPower.setStatus('mandatory')
oa100bdminorHighOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighOptInPower.setStatus('mandatory')
oa100bdminorLowOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowOptInPower.setStatus('mandatory')
oa100bdcurrentValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueOptInPower.setStatus('mandatory')
oa100bdstateFlagOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagOptInPower.setStatus('mandatory')
oa100bdminValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueOptInPower.setStatus('mandatory')
oa100bdmaxValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueOptInPower.setStatus('mandatory')
oa100bdalarmStateOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateOptInPower.setStatus('mandatory')
oa100bdlabelOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOptOutPower.setStatus('optional')
oa100bduomOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomOptOutPower.setStatus('optional')
oa100bdmajorHighOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighOptOutPower.setStatus('mandatory')
oa100bdmajorLowOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowOptOutPower.setStatus('mandatory')
oa100bdminorHighOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighOptOutPower.setStatus('mandatory')
oa100bdminorLowOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowOptOutPower.setStatus('mandatory')
oa100bdcurrentValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueOptOutPower.setStatus('mandatory')
oa100bdstateFlagOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagOptOutPower.setStatus('mandatory')
oa100bdminValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueOptOutPower.setStatus('mandatory')
oa100bdmaxValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueOptOutPower.setStatus('mandatory')
oa100bdalarmStateOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateOptOutPower.setStatus('mandatory')
oa100bdlabelMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainTECTemp.setStatus('optional')
oa100bduomMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomMainTECTemp.setStatus('optional')
oa100bdmajorHighMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighMainTECTemp.setStatus('mandatory')
oa100bdmajorLowMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowMainTECTemp.setStatus('mandatory')
oa100bdminorHighMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighMainTECTemp.setStatus('mandatory')
oa100bdminorLowMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowMainTECTemp.setStatus('mandatory')
oa100bdcurrentValueMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueMainTECTemp.setStatus('mandatory')
oa100bdstateFlagMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagMainTECTemp.setStatus('mandatory')
oa100bdminValueMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueMainTECTemp.setStatus('mandatory')
oa100bdmaxValueMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueMainTECTemp.setStatus('mandatory')
oa100bdalarmStateMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateMainTECTemp.setStatus('mandatory')
oa100bdlabelMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainLaserPower.setStatus('optional')
oa100bduomMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomMainLaserPower.setStatus('optional')
oa100bdmajorHighMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighMainLaserPower.setStatus('mandatory')
oa100bdmajorLowMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowMainLaserPower.setStatus('mandatory')
oa100bdminorHighMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighMainLaserPower.setStatus('mandatory')
oa100bdminorLowMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowMainLaserPower.setStatus('mandatory')
oa100bdcurrentValueMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueMainLaserPower.setStatus('mandatory')
oa100bdstateFlagMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagMainLaserPower.setStatus('mandatory')
oa100bdminValueMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueMainLaserPower.setStatus('mandatory')
oa100bdmaxValueMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueMainLaserPower.setStatus('mandatory')
oa100bdalarmStateMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateMainLaserPower.setStatus('mandatory')
oa100bdlabelAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxTECTemp.setStatus('optional')
oa100bduomAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomAuxTECTemp.setStatus('optional')
oa100bdmajorHighAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighAuxTECTemp.setStatus('mandatory')
oa100bdmajorLowAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowAuxTECTemp.setStatus('mandatory')
oa100bdminorHighAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighAuxTECTemp.setStatus('mandatory')
oa100bdminorLowAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowAuxTECTemp.setStatus('mandatory')
oa100bdcurrentValueAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueAuxTECTemp.setStatus('mandatory')
oa100bdstateFlagAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagAuxTECTemp.setStatus('mandatory')
oa100bdminValueAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueAuxTECTemp.setStatus('mandatory')
oa100bdmaxValueAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueAuxTECTemp.setStatus('mandatory')
oa100bdalarmStateAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateAuxTECTemp.setStatus('mandatory')
oa100bdlabelAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxLaserPower.setStatus('optional')
oa100bduomAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomAuxLaserPower.setStatus('optional')
oa100bdmajorHighAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighAuxLaserPower.setStatus('mandatory')
oa100bdmajorLowAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowAuxLaserPower.setStatus('mandatory')
oa100bdminorHighAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighAuxLaserPower.setStatus('mandatory')
oa100bdminorLowAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowAuxLaserPower.setStatus('mandatory')
oa100bdcurrentValueAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueAuxLaserPower.setStatus('mandatory')
oa100bdstateFlagAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagAuxLaserPower.setStatus('mandatory')
oa100bdminValueAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueAuxLaserPower.setStatus('mandatory')
oa100bdmaxValueAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueAuxLaserPower.setStatus('mandatory')
oa100bdalarmStateAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateAuxLaserPower.setStatus('mandatory')
oa100bdlabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelFanCurrent.setStatus('optional')
oa100bduomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomFanCurrent.setStatus('optional')
oa100bdmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighFanCurrent.setStatus('mandatory')
oa100bdmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowFanCurrent.setStatus('mandatory')
oa100bdminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighFanCurrent.setStatus('mandatory')
oa100bdminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowFanCurrent.setStatus('mandatory')
oa100bdcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueFanCurrent.setStatus('mandatory')
oa100bdstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagFanCurrent.setStatus('mandatory')
oa100bdminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueFanCurrent.setStatus('mandatory')
oa100bdmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueFanCurrent.setStatus('mandatory')
oa100bdalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateFanCurrent.setStatus('mandatory')
oa100bdlabelOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOPSetting.setStatus('optional')
oa100bduomOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomOPSetting.setStatus('optional')
oa100bdmajorHighOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighOPSetting.setStatus('mandatory')
oa100bdmajorLowOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowOPSetting.setStatus('mandatory')
oa100bdminorHighOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighOPSetting.setStatus('mandatory')
oa100bdminorLowOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowOPSetting.setStatus('mandatory')
oa100bdcurrentValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 96), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdcurrentValueOPSetting.setStatus('mandatory')
oa100bdstateFlagOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagOPSetting.setStatus('mandatory')
oa100bdminValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueOPSetting.setStatus('mandatory')
oa100bdmaxValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueOPSetting.setStatus('mandatory')
oa100bdalarmStateOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateOPSetting.setStatus('mandatory')
oa100bdlabelLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelLPSetting.setStatus('optional')
oa100bduomLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomLPSetting.setStatus('optional')
oa100bdmajorHighLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighLPSetting.setStatus('mandatory')
oa100bdmajorLowLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowLPSetting.setStatus('mandatory')
oa100bdminorHighLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighLPSetting.setStatus('mandatory')
oa100bdminorLowLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowLPSetting.setStatus('mandatory')
oa100bdcurrentValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 107), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdcurrentValueLPSetting.setStatus('mandatory')
oa100bdstateFlagLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagLPSetting.setStatus('mandatory')
oa100bdminValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueLPSetting.setStatus('mandatory')
oa100bdmaxValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueLPSetting.setStatus('mandatory')
oa100bdalarmStateLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateLPSetting.setStatus('mandatory')
oa100bdlabelCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelCGSetting.setStatus('optional')
oa100bduomCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomCGSetting.setStatus('optional')
oa100bdmajorHighCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 114), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighCGSetting.setStatus('mandatory')
oa100bdmajorLowCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 115), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowCGSetting.setStatus('mandatory')
oa100bdminorHighCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 116), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighCGSetting.setStatus('mandatory')
oa100bdminorLowCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 117), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowCGSetting.setStatus('mandatory')
oa100bdcurrentValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 118), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdcurrentValueCGSetting.setStatus('mandatory')
oa100bdstateFlagCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagCGSetting.setStatus('mandatory')
oa100bdminValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 120), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueCGSetting.setStatus('mandatory')
oa100bdmaxValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 121), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueCGSetting.setStatus('mandatory')
oa100bdalarmStateCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateCGSetting.setStatus('mandatory')
oa100bdlabelOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 123), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOptThreshold.setStatus('optional')
oa100bduomOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomOptThreshold.setStatus('optional')
oa100bdmajorHighOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 125), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighOptThreshold.setStatus('mandatory')
oa100bdmajorLowOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 126), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowOptThreshold.setStatus('mandatory')
oa100bdminorHighOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 127), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighOptThreshold.setStatus('mandatory')
oa100bdminorLowOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 128), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowOptThreshold.setStatus('mandatory')
oa100bdcurrentValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 129), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdcurrentValueOptThreshold.setStatus('mandatory')
oa100bdstateFlagOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagOptThreshold.setStatus('mandatory')
oa100bdminValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 131), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueOptThreshold.setStatus('mandatory')
oa100bdmaxValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 132), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueOptThreshold.setStatus('mandatory')
oa100bdalarmStateOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateOptThreshold.setStatus('mandatory')
gx2OA100BDDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDDigitalTableIndex.setStatus('mandatory')
oa100bdlabelModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelModeSetting.setStatus('optional')
oa100bdenumModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdenumModeSetting.setStatus('optional')
oa100bdvalueModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("power-out-preset", 1), ("power-out-set", 2), ("laser-power-preset", 3), ("laser-power-set", 4), ("constant-gain-preset", 5), ("constant-gain-set", 6), ("invalid-mode", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdvalueModeSetting.setStatus('mandatory')
oa100bdstateFlagModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagModeSetting.setStatus('mandatory')
oa100bdlabelModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelModuleState.setStatus('optional')
oa100bdenumModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdenumModuleState.setStatus('optional')
oa100bdvalueModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdvalueModuleState.setStatus('mandatory')
oa100bdstateFlagModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagModuleState.setStatus('mandatory')
oa100bdlabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelFactoryDefault.setStatus('optional')
oa100bdenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdenumFactoryDefault.setStatus('optional')
oa100bdvalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdvalueFactoryDefault.setStatus('mandatory')
oa100bdstateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagFactoryDefault.setStatus('mandatory')
gx2OA100BDStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDStatusTableIndex.setStatus('mandatory')
oa100bdlabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelBoot.setStatus('optional')
oa100bdvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueBoot.setStatus('mandatory')
oa100bdstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagBoot.setStatus('mandatory')
oa100bdlabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelFlash.setStatus('optional')
oa100bdvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueFlash.setStatus('mandatory')
oa100bdstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagFlash.setStatus('mandatory')
oa100bdlabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelFactoryDataCRC.setStatus('optional')
oa100bdvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueFactoryDataCRC.setStatus('mandatory')
oa100bdstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagFactoryDataCRC.setStatus('mandatory')
oa100bdlabelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAlarmDataCRC.setStatus('optional')
oa100bdvalueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueAlarmDataCRC.setStatus('mandatory')
oa100bdstateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagAlarmDataCRC.setStatus('mandatory')
oa100bdlabelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelCalibrationDataCRC.setStatus('optional')
oa100bdvalueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueCalibrationDataCRC.setStatus('mandatory')
oa100bdstateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagCalibrationDataCRC.setStatus('mandatory')
oa100bdlabelOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOptInShutdown.setStatus('optional')
oa100bdvalueOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueOptInShutdown.setStatus('mandatory')
oa100bdstateflagOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagOptInShutdown.setStatus('mandatory')
oa100bdlabelMainTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainTECTempShutdown.setStatus('optional')
oa100bdvalueMainTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueMainTECTempShutdown.setStatus('mandatory')
oa100bdstateflagMainTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagMainTECTempShutdown.setStatus('mandatory')
oa100bdlabelAuxTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxTECTempShutdown.setStatus('optional')
oa100bdvalueAuxTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueAuxTECTempShutdown.setStatus('mandatory')
oa100bdstateflagAuxTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagAuxTECTempShutdown.setStatus('mandatory')
oa100bdlabelPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelPowerFail.setStatus('optional')
oa100bdvaluePowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvaluePowerFail.setStatus('mandatory')
oa100bdstateflagPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagPowerFail.setStatus('mandatory')
oa100bdlabelKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelKeySwitch.setStatus('optional')
oa100bdvalueKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueKeySwitch.setStatus('mandatory')
oa100bdstateflagKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagKeySwitch.setStatus('mandatory')
oa100bdlabelMainLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainLaserCurrShutdown.setStatus('optional')
oa100bdvalueMainLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueMainLaserCurrShutdown.setStatus('mandatory')
oa100bdstateflagMainLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagMainLaserCurrShutdown.setStatus('mandatory')
oa100bdlabelAuxLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxLaserCurrShutdown.setStatus('optional')
oa100bdvalueAuxLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueAuxLaserCurrShutdown.setStatus('mandatory')
oa100bdstateflagAuxLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagAuxLaserCurrShutdown.setStatus('mandatory')
oa100bdlabelMainLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainLaserPowShutdown.setStatus('optional')
oa100bdvalueMainLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueMainLaserPowShutdown.setStatus('mandatory')
oa100bdstateflagMainLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagMainLaserPowShutdown.setStatus('mandatory')
oa100bdlabelAuxLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxLaserPowShutdown.setStatus('optional')
oa100bdvalueAuxLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueAuxLaserPowShutdown.setStatus('mandatory')
oa100bdstateflagAuxLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagAuxLaserPowShutdown.setStatus('mandatory')
oa100bdlabelADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelADCStatus.setStatus('optional')
oa100bdvalueADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueADCStatus.setStatus('mandatory')
oa100bdstateflagADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagADCStatus.setStatus('mandatory')
oa100bdlabelConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelConstGainStatus.setStatus('optional')
oa100bdvalueConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueConstGainStatus.setStatus('mandatory')
oa100bdstateflagConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagConstGainStatus.setStatus('mandatory')
oa100bdlabelHardwareErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelHardwareErrorStatus.setStatus('optional')
oa100bdvalueHardwareErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueHardwareErrorStatus.setStatus('mandatory')
oa100bdstateflagHardwareErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagHardwareErrorStatus.setStatus('mandatory')
oa100bdlabelStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelStandbyStatus.setStatus('optional')
oa100bdvalueStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueStandbyStatus.setStatus('mandatory')
oa100bdstateflagStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagStandbyStatus.setStatus('mandatory')
gx2OA100BDFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDFactoryTableIndex.setStatus('mandatory')
oa100bdbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdbootControlByte.setStatus('mandatory')
oa100bdbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdbootStatusByte.setStatus('mandatory')
oa100bdbank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdbank0CRC.setStatus('mandatory')
oa100bdbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdbank1CRC.setStatus('mandatory')
oa100bdprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdprgEEPROMByte.setStatus('mandatory')
oa100bdfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdfactoryCRC.setStatus('mandatory')
oa100bdcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarmdata", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcalculateCRC.setStatus('obsolete')
oa100bdhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdhourMeter.setStatus('mandatory')
oa100bdflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdflashPrgCntA.setStatus('mandatory')
oa100bdflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdflashPrgCntB.setStatus('mandatory')
oa100bdfwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdfwRev0.setStatus('mandatory')
oa100bdfwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdfwRev1.setStatus('mandatory')
gx2OA100BDHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDHoldTimeTableIndex.setStatus('mandatory')
gx2OA100BDHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDHoldTimeSpecIndex.setStatus('mandatory')
gx2OA100BDHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2OA100BDHoldTimeData.setStatus('mandatory')
trapOA100BDConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDOpticalInPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDOpticalOutPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDMainTECTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDMainLaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDAuxTECTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDAuxLaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDStandbyMode = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDOptInShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDMainTECTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDAuxTECTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDKeySwitch = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDMainLasCurrShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDAuxLasCurrShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDMainLasPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDAuxLasPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDInvalidMode = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDBoot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDBoot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDCalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,28)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDFacCalFloatAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,29)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDOptInThreshAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,30)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDGainErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,31)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapOA100BDHardwareErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,32)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2oa100bd-MIB", oa100bdstateflagAuxLaserPowShutdown=oa100bdstateflagAuxLaserPowShutdown, oa100bdvalueAuxLaserPowShutdown=oa100bdvalueAuxLaserPowShutdown, oa100bdstateflagADCStatus=oa100bdstateflagADCStatus, oa100bdfactoryCRC=oa100bdfactoryCRC, oa100bdlabelStandbyStatus=oa100bdlabelStandbyStatus, oa100bdmajorHighOptInPower=oa100bdmajorHighOptInPower, oa100bdstateflagMainTECTempShutdown=oa100bdstateflagMainTECTempShutdown, oa100bdmaxValueModTemp=oa100bdmaxValueModTemp, oa100bdlabelMainTECTemp=oa100bdlabelMainTECTemp, oa100bdmajorHighMainLaserPower=oa100bdmajorHighMainLaserPower, oa100bdcurrentValueAuxTECTemp=oa100bdcurrentValueAuxTECTemp, trapOA100BDInvalidMode=trapOA100BDInvalidMode, oa100bdmajorHighModTemp=oa100bdmajorHighModTemp, oa100bdminorHighFanCurrent=oa100bdminorHighFanCurrent, oa100bdcurrentValueFanCurrent=oa100bdcurrentValueFanCurrent, trapOA100BDHardwareErrorAlarm=trapOA100BDHardwareErrorAlarm, oa100bdlabelFactoryDefault=oa100bdlabelFactoryDefault, oa100bdalarmStateModTemp=oa100bdalarmStateModTemp, oa100bdstateflagStandbyStatus=oa100bdstateflagStandbyStatus, oa100bdmajorLowCGSetting=oa100bdmajorLowCGSetting, oa100bdmajorLowMainLaserPower=oa100bdmajorLowMainLaserPower, oa100bdvalueADCStatus=oa100bdvalueADCStatus, oa100bdmaxValueOPSetting=oa100bdmaxValueOPSetting, oa100bdcurrentValueCGSetting=oa100bdcurrentValueCGSetting, oa100bdlabelPowerFail=oa100bdlabelPowerFail, trapOA100BDKeySwitch=trapOA100BDKeySwitch, gx2OA100BDStatusTableIndex=gx2OA100BDStatusTableIndex, oa100bdmaxValueMainTECTemp=oa100bdmaxValueMainTECTemp, oa100bdminValueAuxLaserPower=oa100bdminValueAuxLaserPower, oa100bdvalueHardwareErrorStatus=oa100bdvalueHardwareErrorStatus, oa100bdlabelAuxTECTempShutdown=oa100bdlabelAuxTECTempShutdown, oa100bdlabelBoot=oa100bdlabelBoot, oa100bduomOptOutPower=oa100bduomOptOutPower, oa100bdstateFlagModeSetting=oa100bdstateFlagModeSetting, oa100bdvalueConstGainStatus=oa100bdvalueConstGainStatus, trapOA100BDMainLasCurrShutdown=trapOA100BDMainLasCurrShutdown, trapOA100BDBoot1Alarm=trapOA100BDBoot1Alarm, oa100bdlabelOptInShutdown=oa100bdlabelOptInShutdown, oa100bdcurrentValueOptInPower=oa100bdcurrentValueOptInPower, oa100bdcurrentValueMainLaserPower=oa100bdcurrentValueMainLaserPower, oa100bdmajorLowOPSetting=oa100bdmajorLowOPSetting, oa100bdminorLowLPSetting=oa100bdminorLowLPSetting, oa100bdstateFlagCGSetting=oa100bdstateFlagCGSetting, oa100bdstateFlagOptInPower=oa100bdstateFlagOptInPower, oa100bdminValueAuxTECTemp=oa100bdminValueAuxTECTemp, oa100bdalarmStateAuxLaserPower=oa100bdalarmStateAuxLaserPower, oa100bdlabelModuleState=oa100bdlabelModuleState, oa100bdlabelOPSetting=oa100bdlabelOPSetting, oa100bdminorLowOptThreshold=oa100bdminorLowOptThreshold, oa100bdvalueFactoryDefault=oa100bdvalueFactoryDefault, trapOA100BDOptInShutdown=trapOA100BDOptInShutdown, oa100bdminorLowOptOutPower=oa100bdminorLowOptOutPower, oa100bdmajorLowMainTECTemp=oa100bdmajorLowMainTECTemp, gx2OA100BDDigitalTable=gx2OA100BDDigitalTable, oa100bdlabelFactoryDataCRC=oa100bdlabelFactoryDataCRC, oa100bdcurrentValueAuxLaserPower=oa100bdcurrentValueAuxLaserPower, oa100bdprgEEPROMByte=oa100bdprgEEPROMByte, oa100bdbank0CRC=oa100bdbank0CRC, oa100bdminValueCGSetting=oa100bdminValueCGSetting, trapOA100BDModuleTemperatureAlarm=trapOA100BDModuleTemperatureAlarm, oa100bdhourMeter=oa100bdhourMeter, gx2OA100BDHoldTimeData=gx2OA100BDHoldTimeData, oa100bdminorLowAuxLaserPower=oa100bdminorLowAuxLaserPower, oa100bdvalueMainLaserPowShutdown=oa100bdvalueMainLaserPowShutdown, trapOA100BDAuxLasCurrShutdown=trapOA100BDAuxLasCurrShutdown, oa100bdminorHighMainTECTemp=oa100bdminorHighMainTECTemp, oa100bdenumFactoryDefault=oa100bdenumFactoryDefault, gx2OA100BDHoldTimeEntry=gx2OA100BDHoldTimeEntry, oa100bdstateFlagOptOutPower=oa100bdstateFlagOptOutPower, oa100bdstateFlagAuxLaserPower=oa100bdstateFlagAuxLaserPower, trapOA100BDMainTECTemperatureAlarm=trapOA100BDMainTECTemperatureAlarm, trapOA100BDResetFacDefault=trapOA100BDResetFacDefault, oa100bduomOptThreshold=oa100bduomOptThreshold, gx2OA100BDHoldTimeTable=gx2OA100BDHoldTimeTable, oa100bdstateFlagOPSetting=oa100bdstateFlagOPSetting, oa100bdminorHighOptThreshold=oa100bdminorHighOptThreshold, trapOA100BDGainErrorAlarm=trapOA100BDGainErrorAlarm, oa100bduomAuxTECTemp=oa100bduomAuxTECTemp, oa100bdminorHighOptInPower=oa100bdminorHighOptInPower, trapOA100BDStandbyMode=trapOA100BDStandbyMode, oa100bdmaxValueMainLaserPower=oa100bdmaxValueMainLaserPower, oa100bdminorHighOptOutPower=oa100bdminorHighOptOutPower, oa100bdmaxValueFanCurrent=oa100bdmaxValueFanCurrent, oa100bdminorLowMainLaserPower=oa100bdminorLowMainLaserPower, oa100bdstateFlagLPSetting=oa100bdstateFlagLPSetting, trapOA100BDCalDataCRCAlarm=trapOA100BDCalDataCRCAlarm, oa100bdlabelModTemp=oa100bdlabelModTemp, oa100bdmajorLowOptInPower=oa100bdmajorLowOptInPower, oa100bdcurrentValueOPSetting=oa100bdcurrentValueOPSetting, oa100bdlabelFlash=oa100bdlabelFlash, oa100bdalarmStateLPSetting=oa100bdalarmStateLPSetting, oa100bdenumModeSetting=oa100bdenumModeSetting, oa100bdfwRev0=oa100bdfwRev0, oa100bdvalueModuleState=oa100bdvalueModuleState, oa100bdflashPrgCntB=oa100bdflashPrgCntB, gx2OA100BDAnalogEntry=gx2OA100BDAnalogEntry, oa100bdenumModuleState=oa100bdenumModuleState, oa100bdmajorHighOPSetting=oa100bdmajorHighOPSetting, oa100bdmajorLowFanCurrent=oa100bdmajorLowFanCurrent, oa100bdalarmStateOptThreshold=oa100bdalarmStateOptThreshold, trapOA100BDMainTECTempShutdown=trapOA100BDMainTECTempShutdown, oa100bdalarmStateFanCurrent=oa100bdalarmStateFanCurrent, oa100bdminorHighOPSetting=oa100bdminorHighOPSetting, oa100bdstateflagFactoryDataCRC=oa100bdstateflagFactoryDataCRC, oa100bdminValueModTemp=oa100bdminValueModTemp, Float=Float, trapOA100BDOpticalInPowerAlarm=trapOA100BDOpticalInPowerAlarm, oa100bdmajorLowModTemp=oa100bdmajorLowModTemp, oa100bdmajorHighAuxLaserPower=oa100bdmajorHighAuxLaserPower, oa100bdlabelModeSetting=oa100bdlabelModeSetting, oa100bdlabelMainLaserPowShutdown=oa100bdlabelMainLaserPowShutdown, oa100bdvalueAuxLaserCurrShutdown=oa100bdvalueAuxLaserCurrShutdown, trapOA100BDAlarmDataCRCAlarm=trapOA100BDAlarmDataCRCAlarm, oa100bdlabelOptInPower=oa100bdlabelOptInPower, gx2OA100BDFactoryEntry=gx2OA100BDFactoryEntry, oa100bdstateFlagModTemp=oa100bdstateFlagModTemp, oa100bdalarmStateAuxTECTemp=oa100bdalarmStateAuxTECTemp, oa100bdlabelAuxLaserPowShutdown=oa100bdlabelAuxLaserPowShutdown, oa100bdminorLowFanCurrent=oa100bdminorLowFanCurrent, oa100bdstateFlagFanCurrent=oa100bdstateFlagFanCurrent, oa100bduomMainTECTemp=oa100bduomMainTECTemp, oa100bdminorLowOPSetting=oa100bdminorLowOPSetting, trapOA100BDAuxTECTempShutdown=trapOA100BDAuxTECTempShutdown, oa100bdmajorHighCGSetting=oa100bdmajorHighCGSetting, oa100bdstateflagAuxTECTempShutdown=oa100bdstateflagAuxTECTempShutdown, oa100bdminValueMainLaserPower=oa100bdminValueMainLaserPower, oa100bdstateflagKeySwitch=oa100bdstateflagKeySwitch, trapOA100BDMainLasPowerShutdown=trapOA100BDMainLasPowerShutdown, oa100bdcurrentValueModTemp=oa100bdcurrentValueModTemp, oa100bdstateflagCalibrationDataCRC=oa100bdstateflagCalibrationDataCRC, oa100bdminorLowCGSetting=oa100bdminorLowCGSetting, oa100bdstateFlagMainLaserPower=oa100bdstateFlagMainLaserPower, trapOA100BDConfigChangeInteger=trapOA100BDConfigChangeInteger, trapOA100BDFactoryDataCRCAlarm=trapOA100BDFactoryDataCRCAlarm, oa100bdcalculateCRC=oa100bdcalculateCRC, oa100bdbank1CRC=oa100bdbank1CRC, oa100bdstateFlagAuxTECTemp=oa100bdstateFlagAuxTECTemp, oa100bdvalueModeSetting=oa100bdvalueModeSetting, oa100bdvalueFlash=oa100bdvalueFlash, oa100bdmaxValueOptInPower=oa100bdmaxValueOptInPower, oa100bdbootControlByte=oa100bdbootControlByte, gx2OA100BDStatusEntry=gx2OA100BDStatusEntry, trapOA100BDFlashAlarm=trapOA100BDFlashAlarm, oa100bdmaxValueAuxLaserPower=oa100bdmaxValueAuxLaserPower, trapOA100BDFacCalFloatAlarm=trapOA100BDFacCalFloatAlarm, oa100bdminValueOptOutPower=oa100bdminValueOptOutPower, oa100bdminValueFanCurrent=oa100bdminValueFanCurrent, oa100bdalarmStateOPSetting=oa100bdalarmStateOPSetting, gx2OA100BDStatusTable=gx2OA100BDStatusTable, oa100bdmaxValueLPSetting=oa100bdmaxValueLPSetting, oa100bduomLPSetting=oa100bduomLPSetting, oa100bdstateflagMainLaserCurrShutdown=oa100bdstateflagMainLaserCurrShutdown, oa100bdminorHighAuxLaserPower=oa100bdminorHighAuxLaserPower, oa100bdvalueMainTECTempShutdown=oa100bdvalueMainTECTempShutdown, oa100bdlabelAuxLaserPower=oa100bdlabelAuxLaserPower, oa100bdvalueMainLaserCurrShutdown=oa100bdvalueMainLaserCurrShutdown, oa100bdmajorHighMainTECTemp=oa100bdmajorHighMainTECTemp, oa100bdcurrentValueOptThreshold=oa100bdcurrentValueOptThreshold, trapOA100BDMainLaserPowerAlarm=trapOA100BDMainLaserPowerAlarm, oa100bdlabelMainTECTempShutdown=oa100bdlabelMainTECTempShutdown, oa100bdmaxValueAuxTECTemp=oa100bdmaxValueAuxTECTemp, oa100bdvalueAlarmDataCRC=oa100bdvalueAlarmDataCRC, gx2OA100BDDescriptor=gx2OA100BDDescriptor, oa100bdlabelLPSetting=oa100bdlabelLPSetting, oa100bdcurrentValueLPSetting=oa100bdcurrentValueLPSetting, oa100bdvalueKeySwitch=oa100bdvalueKeySwitch, oa100bdstateflagBoot=oa100bdstateflagBoot, oa100bdlabelOptThreshold=oa100bdlabelOptThreshold, oa100bdminorHighAuxTECTemp=oa100bdminorHighAuxTECTemp, oa100bdminValueOPSetting=oa100bdminValueOPSetting, oa100bdminValueMainTECTemp=oa100bdminValueMainTECTemp, oa100bduomModTemp=oa100bduomModTemp, oa100bdvalueAuxTECTempShutdown=oa100bdvalueAuxTECTempShutdown, oa100bdminValueOptInPower=oa100bdminValueOptInPower, oa100bdminValueOptThreshold=oa100bdminValueOptThreshold, oa100bdalarmStateMainTECTemp=oa100bdalarmStateMainTECTemp, oa100bdminorHighModTemp=oa100bdminorHighModTemp, oa100bdalarmStateMainLaserPower=oa100bdalarmStateMainLaserPower, oa100bduomFanCurrent=oa100bduomFanCurrent, oa100bdstateflagConstGainStatus=oa100bdstateflagConstGainStatus, oa100bdfwRev1=oa100bdfwRev1, oa100bdvalueStandbyStatus=oa100bdvalueStandbyStatus, oa100bdstateflagAuxLaserCurrShutdown=oa100bdstateflagAuxLaserCurrShutdown, oa100bdmajorLowLPSetting=oa100bdmajorLowLPSetting, oa100bduomCGSetting=oa100bduomCGSetting, gx2OA100BDFactoryTable=gx2OA100BDFactoryTable, oa100bdminorLowModTemp=oa100bdminorLowModTemp, oa100bduomAuxLaserPower=oa100bduomAuxLaserPower, oa100bdvaluePowerFail=oa100bdvaluePowerFail, oa100bdminorLowAuxTECTemp=oa100bdminorLowAuxTECTemp, oa100bdlabelAuxLaserCurrShutdown=oa100bdlabelAuxLaserCurrShutdown, oa100bdlabelOptOutPower=oa100bdlabelOptOutPower, gx2OA100BDHoldTimeSpecIndex=gx2OA100BDHoldTimeSpecIndex, oa100bdstateFlagModuleState=oa100bdstateFlagModuleState, oa100bdlabelMainLaserCurrShutdown=oa100bdlabelMainLaserCurrShutdown, oa100bdstateflagAlarmDataCRC=oa100bdstateflagAlarmDataCRC, oa100bdlabelCalibrationDataCRC=oa100bdlabelCalibrationDataCRC, trapOA100BDPowerFail=trapOA100BDPowerFail, oa100bdlabelADCStatus=oa100bdlabelADCStatus, trapOA100BDAuxLaserPowerAlarm=trapOA100BDAuxLaserPowerAlarm, trapOA100BDFanCurrentAlarm=trapOA100BDFanCurrentAlarm, oa100bdvalueCalibrationDataCRC=oa100bdvalueCalibrationDataCRC, oa100bdvalueBoot=oa100bdvalueBoot, oa100bdlabelAlarmDataCRC=oa100bdlabelAlarmDataCRC, oa100bdmajorHighAuxTECTemp=oa100bdmajorHighAuxTECTemp, trapOA100BDBoot0Alarm=trapOA100BDBoot0Alarm, gx2OA100BDFactoryTableIndex=gx2OA100BDFactoryTableIndex, oa100bdflashPrgCntA=oa100bdflashPrgCntA, oa100bdstateFlagMainTECTemp=oa100bdstateFlagMainTECTemp, oa100bdstateFlagOptThreshold=oa100bdstateFlagOptThreshold, oa100bdlabelAuxTECTemp=oa100bdlabelAuxTECTemp, oa100bdstateflagMainLaserPowShutdown=oa100bdstateflagMainLaserPowShutdown, oa100bdcurrentValueMainTECTemp=oa100bdcurrentValueMainTECTemp, oa100bduomMainLaserPower=oa100bduomMainLaserPower, oa100bdalarmStateCGSetting=oa100bdalarmStateCGSetting, gx2OA100BDHoldTimeTableIndex=gx2OA100BDHoldTimeTableIndex, oa100bdalarmStateOptInPower=oa100bdalarmStateOptInPower, oa100bdlabelConstGainStatus=oa100bdlabelConstGainStatus, trapOA100BDConfigChangeDisplayString=trapOA100BDConfigChangeDisplayString, oa100bdminValueLPSetting=oa100bdminValueLPSetting, trapOA100BDOpticalOutPowerAlarm=trapOA100BDOpticalOutPowerAlarm, oa100bdcurrentValueOptOutPower=oa100bdcurrentValueOptOutPower, oa100bdminorHighCGSetting=oa100bdminorHighCGSetting, gx2OA100BDDigitalEntry=gx2OA100BDDigitalEntry, gx2OA100BDAnalogTableIndex=gx2OA100BDAnalogTableIndex, oa100bdstateflagOptInShutdown=oa100bdstateflagOptInShutdown, oa100bdmajorLowOptOutPower=oa100bdmajorLowOptOutPower, oa100bdmaxValueCGSetting=oa100bdmaxValueCGSetting, trapOA100BDAuxLasPowerShutdown=trapOA100BDAuxLasPowerShutdown, trapOA100BDAuxTECTemperatureAlarm=trapOA100BDAuxTECTemperatureAlarm, oa100bdstateflagPowerFail=oa100bdstateflagPowerFail, oa100bdlabelKeySwitch=oa100bdlabelKeySwitch, gx2OA100BDAnalogTable=gx2OA100BDAnalogTable, oa100bdbootStatusByte=oa100bdbootStatusByte, oa100bdalarmStateOptOutPower=oa100bdalarmStateOptOutPower, oa100bdmajorHighFanCurrent=oa100bdmajorHighFanCurrent, oa100bdmajorLowAuxLaserPower=oa100bdmajorLowAuxLaserPower, oa100bdmajorHighOptOutPower=oa100bdmajorHighOptOutPower, oa100bdmajorLowAuxTECTemp=oa100bdmajorLowAuxTECTemp, oa100bdlabelCGSetting=oa100bdlabelCGSetting, oa100bdmaxValueOptThreshold=oa100bdmaxValueOptThreshold, oa100bduomOPSetting=oa100bduomOPSetting, oa100bdmaxValueOptOutPower=oa100bdmaxValueOptOutPower, oa100bdminorLowMainTECTemp=oa100bdminorLowMainTECTemp, oa100bdmajorHighLPSetting=oa100bdmajorHighLPSetting, oa100bdminorHighLPSetting=oa100bdminorHighLPSetting, oa100bdmajorHighOptThreshold=oa100bdmajorHighOptThreshold, oa100bdminorHighMainLaserPower=oa100bdminorHighMainLaserPower, oa100bduomOptInPower=oa100bduomOptInPower, trapOA100BDOptInThreshAlarm=trapOA100BDOptInThreshAlarm, gx2OA100BDDigitalTableIndex=gx2OA100BDDigitalTableIndex, oa100bdlabelHardwareErrorStatus=oa100bdlabelHardwareErrorStatus, oa100bdvalueOptInShutdown=oa100bdvalueOptInShutdown, oa100bdlabelFanCurrent=oa100bdlabelFanCurrent)
mibBuilder.exportSymbols("OMNI-gx2oa100bd-MIB", oa100bdvalueFactoryDataCRC=oa100bdvalueFactoryDataCRC, oa100bdlabelMainLaserPower=oa100bdlabelMainLaserPower, oa100bdstateFlagFactoryDefault=oa100bdstateFlagFactoryDefault, oa100bdstateflagHardwareErrorStatus=oa100bdstateflagHardwareErrorStatus, oa100bdstateflagFlash=oa100bdstateflagFlash, oa100bdminorLowOptInPower=oa100bdminorLowOptInPower, oa100bdmajorLowOptThreshold=oa100bdmajorLowOptThreshold)
