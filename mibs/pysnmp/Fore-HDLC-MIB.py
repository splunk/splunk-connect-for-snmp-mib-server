#
# PySNMP MIB module Fore-HDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-HDLC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
trapLogIndex, = mibBuilder.importSymbols("Fore-TrapLog-MIB", "trapLogIndex")
ifName, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, Counter32, iso, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Counter64, Unsigned32, NotificationType, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Counter32", "iso", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Counter64", "Unsigned32", "NotificationType", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreHdlcIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20))
foreHdlcIfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1), )
if mibBuilder.loadTexts: foreHdlcIfTable.setStatus('current')
foreHdlcIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreHdlcIfEntry.setStatus('current')
foreHdlcIfPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreHdlcIfPayloadType.setStatus('current')
foreHdlcIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreHdlcIfAdminStatus.setStatus('current')
foreHdlcIfFcsWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32))).clone(namedValues=NamedValues(("fcs16", 16), ("fcs32", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreHdlcIfFcsWidth.setStatus('current')
foreHdlcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2), )
if mibBuilder.loadTexts: foreHdlcStatsTable.setStatus('current')
foreHdlcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreHdlcStatsEntry.setStatus('current')
foreHdlcIfTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfTxPackets.setStatus('current')
foreHdlcIfTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfTxOctets.setStatus('current')
foreHdlcIfRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfRxPackets.setStatus('current')
foreHdlcIfRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfRxOctets.setStatus('current')
foreHdlcIfChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfChecksumErrors.setStatus('current')
foreHdlcIfLossOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfLossOfFrame.setStatus('current')
foreHdlcLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreHdlcLOFDetected.setStatus('current')
foreHdlcLOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreHdlcLOFCleared.setStatus('current')
mibBuilder.exportSymbols("Fore-HDLC-MIB", foreHdlcIfTxPackets=foreHdlcIfTxPackets, foreHdlcStatsTable=foreHdlcStatsTable, foreHdlcIfTable=foreHdlcIfTable, foreHdlcIfAdminStatus=foreHdlcIfAdminStatus, foreHdlcIfChecksumErrors=foreHdlcIfChecksumErrors, foreHdlcLOFCleared=foreHdlcLOFCleared, foreHdlcStatsEntry=foreHdlcStatsEntry, foreHdlcIfLossOfFrame=foreHdlcIfLossOfFrame, foreHdlcIfEntry=foreHdlcIfEntry, foreHdlcIfGroup=foreHdlcIfGroup, foreHdlcIfFcsWidth=foreHdlcIfFcsWidth, foreHdlcIfTxOctets=foreHdlcIfTxOctets, foreHdlcIfRxPackets=foreHdlcIfRxPackets, foreHdlcLOFDetected=foreHdlcLOFDetected, foreHdlcIfPayloadType=foreHdlcIfPayloadType, foreHdlcIfRxOctets=foreHdlcIfRxOctets)
