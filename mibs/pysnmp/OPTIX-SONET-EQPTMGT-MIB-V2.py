#
# PySNMP MIB module OPTIX-SONET-EQPTMGT-MIB-V2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPTIX-SONET-EQPTMGT-MIB-V2
# Produced by pysmi-0.3.4 at Mon Apr 29 20:26:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
optixProvisionSonet, = mibBuilder.importSymbols("OPTIX-OID-MIB", "optixProvisionSonet")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Unsigned32, NotificationType, ModuleIdentity, Bits, Counter32, IpAddress, Counter64, ObjectIdentity, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "NotificationType", "ModuleIdentity", "Bits", "Counter32", "IpAddress", "Counter64", "ObjectIdentity", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
optixsonetEqptMgt = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3))
if mibBuilder.loadTexts: optixsonetEqptMgt.setLastUpdated('200605232006Z')
if mibBuilder.loadTexts: optixsonetEqptMgt.setOrganization('Your organization')
class IntfType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 10, 12, 13, 17, 65, 100, 254))
    namedValues = NamedValues(("ds1-asyn-vt1", 1), ("ds3-asyn-sts1", 10), ("ec", 12), ("ds3-tmux-ds1", 13), ("ds3-srv-ds1", 17), ("uas", 65), ("mix", 100), ("invalid", 254))

optixsonetCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1), )
if mibBuilder.loadTexts: optixsonetCardInfoTable.setStatus('current')
optixsonetCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1), ).setIndexNames((0, "OPTIX-SONET-EQPTMGT-MIB-V2", "cardIndexSlotId"), (0, "OPTIX-SONET-EQPTMGT-MIB-V2", "cardIndexSfpId"))
if mibBuilder.loadTexts: optixsonetCardInfoEntry.setStatus('current')
cardIndexSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIndexSlotId.setStatus('current')
cardIndexSfpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIndexSfpId.setStatus('current')
cardProvisionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProvisionType.setStatus('current')
cardPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPhysicalType.setStatus('current')
cardInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 5), IntfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInterfaceType.setStatus('current')
cardBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBandwidth.setStatus('current')
cardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerialNum.setStatus('current')
cardCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCLEICode.setStatus('current')
cardPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPartNum.setStatus('current')
cardDOM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDOM.setStatus('current')
cardPCBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPCBVersion.setStatus('current')
cardSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSWVersion.setStatus('current')
cardFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFPGAVersion.setStatus('current')
cardEPLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardEPLDVersion.setStatus('current')
cardBIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBIOSVersion.setStatus('current')
cardMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMAC.setStatus('current')
cardPSTState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPSTState.setStatus('current')
cardSSTState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSSTState.setStatus('current')
cardTPSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTPSPriority.setStatus('current')
cardSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("stateDNR", 1), ("stateWTR", 2), ("stateMAN", 3), ("stateAUTOSW", 4), ("stateFRCD", 5), ("stateLOCK", 6), ("stateINVALID", 254), ("stateIDLE", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwitchState.setStatus('current')
cardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDescription.setStatus('current')
optixsonetEqptMgtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2))
optixsonetEqptMgtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2, 1))
currentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2, 1, 1)).setObjects(("OPTIX-SONET-EQPTMGT-MIB-V2", "cardIndexSlotId"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardIndexSfpId"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardProvisionType"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardPhysicalType"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardInterfaceType"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardBandwidth"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardSerialNum"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardCLEICode"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardPartNum"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardDOM"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardPCBVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardSWVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardFPGAVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardEPLDVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardBIOSVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardMAC"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardPSTState"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardSSTState"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardTPSPriority"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardSwitchState"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentObjectGroup = currentObjectGroup.setStatus('current')
optixsonetEqptMgtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2, 2))
basicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2, 2, 1)).setObjects(("OPTIX-SONET-EQPTMGT-MIB-V2", "currentObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
mibBuilder.exportSymbols("OPTIX-SONET-EQPTMGT-MIB-V2", cardTPSPriority=cardTPSPriority, cardIndexSlotId=cardIndexSlotId, cardDOM=cardDOM, cardEPLDVersion=cardEPLDVersion, cardSerialNum=cardSerialNum, cardInterfaceType=cardInterfaceType, cardDescription=cardDescription, optixsonetEqptMgtGroups=optixsonetEqptMgtGroups, cardSSTState=cardSSTState, basicCompliance=basicCompliance, optixsonetCardInfoTable=optixsonetCardInfoTable, cardBandwidth=cardBandwidth, cardSWVersion=cardSWVersion, cardMAC=cardMAC, cardPSTState=cardPSTState, PYSNMP_MODULE_ID=optixsonetEqptMgt, cardPhysicalType=cardPhysicalType, optixsonetEqptMgt=optixsonetEqptMgt, cardPartNum=cardPartNum, cardBIOSVersion=cardBIOSVersion, cardFPGAVersion=cardFPGAVersion, cardPCBVersion=cardPCBVersion, currentObjectGroup=currentObjectGroup, cardSwitchState=cardSwitchState, optixsonetCardInfoEntry=optixsonetCardInfoEntry, cardCLEICode=cardCLEICode, cardProvisionType=cardProvisionType, optixsonetEqptMgtConformance=optixsonetEqptMgtConformance, cardIndexSfpId=cardIndexSfpId, IntfType=IntfType, optixsonetEqptMgtCompliances=optixsonetEqptMgtCompliances)
