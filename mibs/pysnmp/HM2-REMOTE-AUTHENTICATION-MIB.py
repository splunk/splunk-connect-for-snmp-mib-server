#
# PySNMP MIB module HM2-REMOTE-AUTHENTICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-REMOTE-AUTHENTICATION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
Hm2TlsVersions, Hm2TlsCipherSuites = mibBuilder.importSymbols("HM2-MGMTACCESS-MIB", "Hm2TlsVersions", "Hm2TlsCipherSuites")
hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmEnabledStatus")
Hm2UserAccessRoles, = mibBuilder.importSymbols("HM2-USERMGMT-MIB", "Hm2UserAccessRoles")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, ModuleIdentity, iso, Gauge32, Unsigned32, NotificationType, IpAddress, Integer32, Counter32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "ModuleIdentity", "iso", "Gauge32", "Unsigned32", "NotificationType", "IpAddress", "Integer32", "Counter32", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hm2RemoteAuthMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 26))
hm2RemoteAuthMib.setRevisions(('2014-03-06 00:00',))
if mibBuilder.loadTexts: hm2RemoteAuthMib.setLastUpdated('201403060000Z')
if mibBuilder.loadTexts: hm2RemoteAuthMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2RemoteAuthMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 0))
hm2RemoteAuthMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 1))
hm2RemoteAuthMibSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 3))
hm2LdapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1))
hm2LdapConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10))
hm2LdapMappingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20))
hm2LdapClientAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientAdminState.setStatus('current')
hm2LdapClientCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientCacheTimeout.setStatus('current')
hm2LdapClientServerBaseDN = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerBaseDN.setStatus('current')
hm2LdapClientServerSearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('userPrincipalName')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerSearchAttribute.setStatus('current')
hm2LdapClientServerBindUser = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerBindUser.setStatus('current')
hm2LdapClientServerBindUserPasswd = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerBindUserPasswd.setStatus('current')
hm2LdapClientServerDefaultDomain = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerDefaultDomain.setStatus('current')
hm2LdapClientTlsVersions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 8), Hm2TlsVersions().clone(namedValues=NamedValues(("tlsv1-0", 0), ("tlsv1-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientTlsVersions.setStatus('current')
hm2LdapClientTlsCipherSuites = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 9), Hm2TlsCipherSuites().clone(namedValues=NamedValues(("tls-dhe-rsa-with-aes-128-cbc-sha", 2), ("tls-ecdhe-rsa-with-aes-128-cbc-sha", 4), ("tls-ecdhe-rsa-with-aes-128-gcm-sha256", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientTlsCipherSuites.setStatus('current')
hm2LdapClientServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20), )
if mibBuilder.loadTexts: hm2LdapClientServerAddrTable.setStatus('current')
hm2LdapClientServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1), ).setIndexNames((0, "HM2-REMOTE-AUTHENTICATION-MIB", "hm2LdapClientServerIndex"))
if mibBuilder.loadTexts: hm2LdapClientServerAddrEntry.setStatus('current')
hm2LdapClientServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LdapClientServerIndex.setStatus('current')
hm2LdapClientServerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerDescr.setStatus('current')
hm2LdapClientServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerAddrType.setStatus('current')
hm2LdapClientServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerAddr.setStatus('current')
hm2LdapClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 5), InetPortNumber().clone(389)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerPort.setStatus('current')
hm2LdapClientServerSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ssl", 2), ("startTLS", 3))).clone('startTLS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerSecurity.setStatus('current')
hm2LdapClientServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("unreachable", 2), ("other", 3))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LdapClientServerStatus.setStatus('current')
hm2LdapClientServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerRowStatus.setStatus('current')
hm2LdapRoleMatchingPolicy = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highest", 1), ("first", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapRoleMatchingPolicy.setStatus('current')
hm2LdapRoleMappingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10), )
if mibBuilder.loadTexts: hm2LdapRoleMappingTable.setStatus('current')
hm2LdapRoleMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1), ).setIndexNames((0, "HM2-REMOTE-AUTHENTICATION-MIB", "hm2LdapRoleMappingIndex"))
if mibBuilder.loadTexts: hm2LdapRoleMappingEntry.setStatus('current')
hm2LdapRoleMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LdapRoleMappingIndex.setStatus('current')
hm2LdapRoleMappingAccessRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 2), Hm2UserAccessRoles()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapRoleMappingAccessRole.setStatus('current')
hm2LdapRoleMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attribute", 1), ("group", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapRoleMappingType.setStatus('current')
hm2LdapRoleMappingParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapRoleMappingParameter.setStatus('current')
hm2LdapRoleMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapRoleMappingRowStatus.setStatus('current')
hm2LdapSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 3, 1))
hm2LdapSESDuplicateIPorHost = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 26, 3, 1, 1))
if mibBuilder.loadTexts: hm2LdapSESDuplicateIPorHost.setStatus('current')
hm2LdapConfigStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 26, 0, 1)).setObjects(("HM2-REMOTE-AUTHENTICATION-MIB", "hm2LdapClientServerIndex"), ("HM2-REMOTE-AUTHENTICATION-MIB", "hm2LdapClientServerStatus"))
if mibBuilder.loadTexts: hm2LdapConfigStatusTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-REMOTE-AUTHENTICATION-MIB", hm2LdapRoleMappingEntry=hm2LdapRoleMappingEntry, hm2LdapClientServerBaseDN=hm2LdapClientServerBaseDN, hm2LdapClientTlsVersions=hm2LdapClientTlsVersions, hm2LdapSESGroup=hm2LdapSESGroup, hm2LdapRoleMappingAccessRole=hm2LdapRoleMappingAccessRole, hm2RemoteAuthMibNotifications=hm2RemoteAuthMibNotifications, hm2LdapClientServerAddrTable=hm2LdapClientServerAddrTable, PYSNMP_MODULE_ID=hm2RemoteAuthMib, hm2LdapMappingGroup=hm2LdapMappingGroup, hm2LdapClientServerSearchAttribute=hm2LdapClientServerSearchAttribute, hm2LdapRoleMappingIndex=hm2LdapRoleMappingIndex, hm2RemoteAuthMibObjects=hm2RemoteAuthMibObjects, hm2RemoteAuthMibSNMPExtensionGroup=hm2RemoteAuthMibSNMPExtensionGroup, hm2LdapClientServerAddrEntry=hm2LdapClientServerAddrEntry, hm2LdapClientServerDescr=hm2LdapClientServerDescr, hm2LdapClientServerDefaultDomain=hm2LdapClientServerDefaultDomain, hm2LdapRoleMatchingPolicy=hm2LdapRoleMatchingPolicy, hm2LdapRoleMappingTable=hm2LdapRoleMappingTable, hm2LdapClientAdminState=hm2LdapClientAdminState, hm2LdapClientServerAddrType=hm2LdapClientServerAddrType, hm2LdapClientCacheTimeout=hm2LdapClientCacheTimeout, hm2LdapClientServerRowStatus=hm2LdapClientServerRowStatus, hm2LdapRoleMappingType=hm2LdapRoleMappingType, hm2LdapClientTlsCipherSuites=hm2LdapClientTlsCipherSuites, hm2LdapSESDuplicateIPorHost=hm2LdapSESDuplicateIPorHost, hm2LdapClientServerAddr=hm2LdapClientServerAddr, hm2LdapGroup=hm2LdapGroup, hm2LdapClientServerBindUser=hm2LdapClientServerBindUser, hm2LdapConfigGroup=hm2LdapConfigGroup, hm2LdapRoleMappingRowStatus=hm2LdapRoleMappingRowStatus, hm2LdapConfigStatusTrap=hm2LdapConfigStatusTrap, hm2LdapClientServerStatus=hm2LdapClientServerStatus, hm2LdapClientServerIndex=hm2LdapClientServerIndex, hm2LdapClientServerPort=hm2LdapClientServerPort, hm2LdapClientServerBindUserPasswd=hm2LdapClientServerBindUserPasswd, hm2LdapRoleMappingParameter=hm2LdapRoleMappingParameter, hm2RemoteAuthMib=hm2RemoteAuthMib, hm2LdapClientServerSecurity=hm2LdapClientServerSecurity)
