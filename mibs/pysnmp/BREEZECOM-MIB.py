#
# PySNMP MIB module BREEZECOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BREEZECOM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:23:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, ModuleIdentity, ObjectIdentity, TimeTicks, MibIdentifier, Unsigned32, Integer32, Gauge32, NotificationType, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Unsigned32", "Integer32", "Gauge32", "NotificationType", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

breezecom = MibIdentifier((1, 3, 6, 1, 4, 1, 710))
breezecomPrvRev = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3))
breezecomOID = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4))
breezecomAP10 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4, 1))
breezecomWB10 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4, 2))
breezecomSA10 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4, 3))
breezecomSA40 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4, 4))
brznetmib = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2))
brzSys = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 1))
sysCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1))
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSetDefaults.setStatus('mandatory')
sysResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResetCounters.setStatus('mandatory')
sysTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapEnable.setStatus('mandatory')
sysTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapCounter.setStatus('mandatory')
sysCarrierSense = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCarrierSense.setStatus('mandatory')
sysDeltaCarrierSense = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDeltaCarrierSense.setStatus('mandatory')
sysPartialDefaults = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPartialDefaults.setStatus('mandatory')
sysRunFromNonActiveCode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRunFromNonActiveCode.setStatus('mandatory')
accessRights = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10))
sysNoiseFloor = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNoiseFloor.setStatus('mandatory')
sysExternalAmplifier = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExternalAmplifier.setStatus('mandatory')
sysDisplayAccessRights = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("user", 0), ("installer", 1), ("authorized-technician", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDisplayAccessRights.setStatus('mandatory')
sysChangeRightsToUSER = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unchanged", 0), ("change", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysChangeRightsToUSER.setStatus('mandatory')
sysChangeRightsToINSTALLER = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysChangeRightsToINSTALLER.setStatus('mandatory')
sysChangeRightsToTECHNICIAN = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysChangeRightsToTECHNICIAN.setStatus('mandatory')
sysChangeInstallerPassword = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysChangeInstallerPassword.setStatus('mandatory')
sysParams = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2))
brzHWMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzHWMacAddress.setStatus('mandatory')
brzApplTunneling = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ipx", 0), ("both", 1), ("none", 2), ("apple-talk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzApplTunneling.setStatus('mandatory')
brzPositiveBrg = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("reject-unknown", 1), ("forward-unknown", 2), ("intelligent", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPositiveBrg.setStatus('mandatory')
brzIpFilter = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzIpFilter.setStatus('mandatory')
brzTranslationMode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzTranslationMode.setStatus('mandatory')
brzWIXSupport = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWIXSupport.setStatus('mandatory')
brzWlanNetID = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanNetID.setStatus('mandatory')
brzAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzAuthenticationType.setStatus('mandatory')
brzWlanRTNetID = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzWlanRTNetID.setStatus('mandatory')
brzApRedundancySupport = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzApRedundancySupport.setStatus('mandatory')
brzWlanRelayUnicast = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanRelayUnicast.setStatus('mandatory')
brzWlanRelayBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanRelayBroadcast.setStatus('mandatory')
brzApRedundancyLimit = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzApRedundancyLimit.setStatus('mandatory')
brzStaNumForLargeCW = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzStaNumForLargeCW.setStatus('mandatory')
brzPowerMngMode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPowerMngMode.setStatus('mandatory')
brzACKDelayed = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzACKDelayed.setStatus('mandatory')
brzDTIMPperiod = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzDTIMPperiod.setStatus('mandatory')
brzPowerMngBitTestMode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPowerMngBitTestMode.setStatus('mandatory')
brzBeaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzBeaconInterval.setStatus('mandatory')
brzPowerSaveSupport = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enabled-with-pm-bit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPowerSaveSupport.setStatus('mandatory')
brzWlanAssocAge = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanAssocAge.setStatus('mandatory')
brzEnableVoice = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzEnableVoice.setStatus('mandatory')
brzNonActiveCodeState = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzNonActiveCodeState.setStatus('mandatory')
brzDisplayNonActiveCodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzDisplayNonActiveCodeVersion.setStatus('mandatory')
brzIntelligentBridgingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzIntelligentBridgingPeriod.setStatus('mandatory')
ipParams = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 2))
trapHostsTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1), )
if mibBuilder.loadTexts: trapHostsTable.setStatus('mandatory')
trapHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1, 1), ).setIndexNames((0, "BREEZECOM-MIB", "trapHostsIndex"))
if mibBuilder.loadTexts: trapHostsEntry.setStatus('mandatory')
trapHostsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapHostsIndex.setStatus('mandatory')
trapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPaddress.setStatus('mandatory')
trapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('mandatory')
ipAddr = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr.setStatus('mandatory')
maskIP = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maskIP.setStatus('mandatory')
readCommunity = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readCommunity.setStatus('mandatory')
writeCommunity = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeCommunity.setStatus('mandatory')
gatewayIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPaddr.setStatus('mandatory')
brzIPStack = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzIPStack.setStatus('mandatory')
brzWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3))
brzWlanParams = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1))
brzMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzMaxRate.setStatus('mandatory')
brzMobilLvl = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzMobilLvl.setStatus('mandatory')
brzAvrgRssi = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzAvrgRssi.setStatus('mandatory')
brzWlanProtocol = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanProtocol.setStatus('mandatory')
brzWlanTrapThreashold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanTrapThreashold.setStatus('mandatory')
brzWlanQuality = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("excellent", 1), ("good", 2), ("medium", 3), ("bad", 4), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzWlanQuality.setStatus('mandatory')
knownAPsTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7), )
if mibBuilder.loadTexts: knownAPsTable.setStatus('mandatory')
knownAPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1), ).setIndexNames((0, "BREEZECOM-MIB", "knownAPsIndex"))
if mibBuilder.loadTexts: knownAPsEntry.setStatus('mandatory')
knownAPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsIndex.setStatus('mandatory')
knownAPsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: knownAPsValue.setStatus('mandatory')
knownAPsQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("poor", 1), ("good", 2), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsQuality.setStatus('mandatory')
knownAPsAvrgRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsAvrgRssi.setStatus('mandatory')
knownAPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: knownAPsStatus.setStatus('mandatory')
knownAPsLoadStations = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsLoadStations.setStatus('mandatory')
knownAPsGoodBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsGoodBeacons.setStatus('mandatory')
knownAPsTotalBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsTotalBeacons.setStatus('mandatory')
knownAPsAvrgDbm = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsAvrgDbm.setStatus('mandatory')
brzLastBeacon = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzLastBeacon.setStatus('mandatory')
brzBadBeacons = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzBadBeacons.setStatus('mandatory')
brzLoadStations = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzLoadStations.setStatus('mandatory')
brzAvrgDBm = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzAvrgDBm.setStatus('mandatory')
brzAP = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2))
bssInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1))
bssNumOfStations = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfStations.setStatus('mandatory')
bssNumOfStationsPeak = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfStationsPeak.setStatus('mandatory')
bssCollectPerStationInfo = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bssCollectPerStationInfo.setStatus('mandatory')
bssNumOfBeaconSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfBeaconSent.setStatus('mandatory')
bssNumOfBeaconLost = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfBeaconLost.setStatus('mandatory')
bssNumOfStationsAuthenticated = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfStationsAuthenticated.setStatus('mandatory')
bssNumOfStationsAuthenticatedPeak = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfStationsAuthenticatedPeak.setStatus('mandatory')
bssApAdb = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2))
adbTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1), )
if mibBuilder.loadTexts: adbTable.setStatus('mandatory')
adbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1), ).setIndexNames((0, "BREEZECOM-MIB", "stAddress"))
if mibBuilder.loadTexts: adbEntry.setStatus('mandatory')
stAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stAddress.setStatus('mandatory')
stCFMode = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stCFMode.setStatus('mandatory')
stMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stMaxRate.setStatus('mandatory')
stCurTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stCurTxRate.setStatus('mandatory')
stRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRssi.setStatus('mandatory')
stPMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("power-saved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stPMMode.setStatus('mandatory')
stTxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxFragments.setStatus('mandatory')
stTxFragments1M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxFragments1M.setStatus('mandatory')
stTxFragments2M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxFragments2M.setStatus('mandatory')
stTxFragments3M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxFragments3M.setStatus('mandatory')
stTxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxRetry.setStatus('mandatory')
stTxDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxDroppedPackets.setStatus('mandatory')
stRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRxFragments.setStatus('mandatory')
stWlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("poor", 1), ("good", 2), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stWlanStatus.setStatus('mandatory')
stResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stResetCounters.setStatus('mandatory')
stType = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sa-10", 1), ("wb-10", 2), ("sa-40", 3), ("sa-pc", 4), ("breeze-new", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stType.setStatus('mandatory')
stTxRetryPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxRetryPercent.setStatus('mandatory')
stReTxFragments1M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stReTxFragments1M.setStatus('mandatory')
stReTxFragments2M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stReTxFragments2M.setStatus('mandatory')
stReTxFragments3M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stReTxFragments3M.setStatus('mandatory')
stDbm = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stDbm.setStatus('mandatory')
brzSTA = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3))
brzCurrentAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzCurrentAPMacAddress.setStatus('mandatory')
brzLastAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzLastAPMacAddress.setStatus('mandatory')
brzPreferredAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPreferredAPMacAddress.setStatus('mandatory')
brzRoamToAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzRoamToAPMacAddress.setStatus('mandatory')
brzCFMode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzCFMode.setStatus('mandatory')
brzTx1MBitRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTx1MBitRate.setStatus('mandatory')
brzTx2MBitRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTx2MBitRate.setStatus('mandatory')
brzTx3MBitRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTx3MBitRate.setStatus('mandatory')
brzTotalRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTotalRetx.setStatus('mandatory')
brzRoamParams = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4))
brzRoamDecisionWin = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzRoamDecisionWin.setStatus('mandatory')
brzRoamDecisionNumerator = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzRoamDecisionNumerator.setStatus('mandatory')
brzRoamDecisionRSSIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzRoamDecisionRSSIThreshold.setStatus('mandatory')
brzJoinDecisionRSSIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzJoinDecisionRSSIThreshold.setStatus('mandatory')
brzNeighboringBeacons = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzNeighboringBeacons.setStatus('mandatory')
brzNumberOfProbeResponses = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzNumberOfProbeResponses.setStatus('mandatory')
brzNumberOfBeaconsForDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzNumberOfBeaconsForDisconnect.setStatus('mandatory')
brzMaxNumberOfScanning = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzMaxNumberOfScanning.setStatus('mandatory')
brzNeighboringBeaconRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzNeighboringBeaconRate.setStatus('mandatory')
brzCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4))
brzDSCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1))
brzRxFromDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxFromDS.setStatus('mandatory')
brzRxBadFromDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxBadFromDS.setStatus('mandatory')
brzRxOctetsFromDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxOctetsFromDS.setStatus('mandatory')
brzTxToDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxToDS.setStatus('mandatory')
brzMissedFrames = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzMissedFrames.setStatus('mandatory')
brzTxOctetsToDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxOctetsToDS.setStatus('mandatory')
brzRxOctetsForwardToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxOctetsForwardToWlan.setStatus('mandatory')
brzRxForwardToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxForwardToWlan.setStatus('mandatory')
brzWlanCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2))
brzTxWlanCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1))
brzTxPacketsToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxPacketsToWlan.setStatus('mandatory')
brzTxMSDUToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxMSDUToWlan.setStatus('mandatory')
brzDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzDiscarded.setStatus('mandatory')
brzTxFragToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxFragToWlan.setStatus('mandatory')
brzRetryOnWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRetryOnWlan.setStatus('mandatory')
brzFailedCountOnWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzFailedCountOnWlan.setStatus('mandatory')
brzRetryOnWlanPercent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRetryOnWlanPercent.setStatus('mandatory')
brzRetryTxDataToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRetryTxDataToWlan.setStatus('mandatory')
brzRetryTxDataToWlanPercent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRetryTxDataToWlanPercent.setStatus('mandatory')
brzTotalTxPacketsToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTotalTxPacketsToWlan.setStatus('mandatory')
brzTxErrTransmitions = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15))
brzTxErrorAckTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorAckTimeOut.setStatus('mandatory')
brzTxErrorAckCRC = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorAckCRC.setStatus('mandatory')
brzTxErrorNoTimeUntilHop = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorNoTimeUntilHop.setStatus('mandatory')
brzTxErrorUnderRunAndCTS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorUnderRunAndCTS.setStatus('mandatory')
brzTxErrorAbort = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorAbort.setStatus('mandatory')
brzTxErrorFrameReceived = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorFrameReceived.setStatus('mandatory')
brzRxWlanCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2))
brzRxPacketsFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxPacketsFromWlan.setStatus('mandatory')
brzRxMSDUFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxMSDUFromWlan.setStatus('mandatory')
brzRxFragFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxFragFromWlan.setStatus('mandatory')
brzRxBadFragFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxBadFragFromWlan.setStatus('mandatory')
brzRxDuplicateFragFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxDuplicateFragFromWlan.setStatus('mandatory')
freqStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6), )
if mibBuilder.loadTexts: freqStatisticsTable.setStatus('mandatory')
freqStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6, 1), ).setIndexNames((0, "BREEZECOM-MIB", "freqStatisticsIndex"))
if mibBuilder.loadTexts: freqStatisticsEntry.setStatus('mandatory')
freqStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freqStatisticsIndex.setStatus('mandatory')
freqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freqNo.setStatus('mandatory')
freqTotalReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freqTotalReceived.setStatus('mandatory')
brzRoamCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 3))
brzNumOfReassocRequests = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzNumOfReassocRequests.setStatus('mandatory')
brzMngCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4))
brzMngAP = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1))
probeResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeResponseSent.setStatus('mandatory')
probeResponseLost = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeResponseLost.setStatus('mandatory')
probeResponseSentRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeResponseSentRetx.setStatus('mandatory')
probeRequestRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeRequestRecive.setStatus('mandatory')
assocResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocResponseSent.setStatus('mandatory')
assocResponseLost = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocResponseLost.setStatus('mandatory')
assocResponseSentRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocResponseSentRetx.setStatus('mandatory')
assocRequestRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocRequestRecive.setStatus('mandatory')
reAssocRequestRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reAssocRequestRecive.setStatus('mandatory')
brzMngSAWB = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2))
probRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probRequestSent.setStatus('mandatory')
probResponceRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probResponceRecive.setStatus('mandatory')
authRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authRequestSent.setStatus('mandatory')
authRequestSentRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authRequestSentRetx.setStatus('mandatory')
authResponceRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authResponceRecive.setStatus('mandatory')
assocRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocRequestSent.setStatus('mandatory')
assocRequestSentRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocRequestSentRetx.setStatus('mandatory')
assocResponceRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocResponceRecive.setStatus('mandatory')
brzPSCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5))
pSFreeEntries = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSFreeEntries.setStatus('mandatory')
pSInternallydiscarded = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSInternallydiscarded.setStatus('mandatory')
pSstations = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSstations.setStatus('mandatory')
pSPowerSavingAged = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSPowerSavingAged.setStatus('mandatory')
powreStationsTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5), )
if mibBuilder.loadTexts: powreStationsTable.setStatus('mandatory')
powreStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1), ).setIndexNames((0, "BREEZECOM-MIB", "powerSaveIndex"))
if mibBuilder.loadTexts: powreStationsEntry.setStatus('mandatory')
powerSaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveIndex.setStatus('mandatory')
powerSaveStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveStationID.setStatus('mandatory')
powerSaveBuffered = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveBuffered.setStatus('mandatory')
powerSaveAged = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveAged.setStatus('mandatory')
powerSaveSent = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveSent.setStatus('mandatory')
powerSaveQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveQueueFull.setStatus('mandatory')
brzTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 5))
brzTrapAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapAPMacAddr.setStatus('mandatory')
brzTrapSTAMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapSTAMacAddr.setStatus('mandatory')
brzTrapMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapMacAddress.setStatus('mandatory')
brzTrapRssiQuality = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapRssiQuality.setStatus('mandatory')
brzTrapLastRssiQuality = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapLastRssiQuality.setStatus('mandatory')
brzTrapIndex = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapIndex.setStatus('mandatory')
brzTrapText = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapText.setStatus('mandatory')
brzTrapToggle = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapToggle.setStatus('mandatory')
brzTrapSTAType = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sa10", 1), ("wb10", 2), ("sa40", 3), ("sa-pc", 4), ("breeze-new", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapSTAType.setStatus('mandatory')
brzAProamingIn = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,1)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"), ("BREEZECOM-MIB", "brzTrapSTAType"))
brzAPassociated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,2)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"))
brzAPdisassociated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,3)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"))
brzAPaging = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,4)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"))
brzAProamedOut = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,5)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"))
brzAPWlanStatusap = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,7)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
brzWlanStatusOfStation = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,8)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
brzGeneralAP = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,9)).setObjects(("BREEZECOM-MIB", "brzTrapIndex"), ("BREEZECOM-MIB", "brzTrapText"))
brzWBassociated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 2) + (0,6)).setObjects(("BREEZECOM-MIB", "brzLastAPMacAddress"), ("BREEZECOM-MIB", "brzTrapAPMacAddr"), ("BREEZECOM-MIB", "brzTrapLastRssiQuality"), ("BREEZECOM-MIB", "brzTrapRssiQuality"))
brzWBWlanStatus = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 2) + (0,7)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
brzGeneralWB = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 2) + (0,9)).setObjects(("BREEZECOM-MIB", "brzTrapIndex"), ("BREEZECOM-MIB", "brzTrapText"))
brzSTAassociated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 3) + (0,6)).setObjects(("BREEZECOM-MIB", "brzLastAPMacAddress"), ("BREEZECOM-MIB", "brzTrapAPMacAddr"), ("BREEZECOM-MIB", "brzTrapLastRssiQuality"), ("BREEZECOM-MIB", "brzTrapRssiQuality"))
brzSTAWlanStatus = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 3) + (0,7)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
brzGeneralSTA = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 3) + (0,9)).setObjects(("BREEZECOM-MIB", "brzTrapIndex"), ("BREEZECOM-MIB", "brzTrapText"))
brzSA40associated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 4) + (0,6)).setObjects(("BREEZECOM-MIB", "brzLastAPMacAddress"), ("BREEZECOM-MIB", "brzTrapAPMacAddr"), ("BREEZECOM-MIB", "brzTrapLastRssiQuality"), ("BREEZECOM-MIB", "brzTrapRssiQuality"))
brzSA40WlanStatus = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 4) + (0,7)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
brzGeneralSA40 = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 4) + (0,9)).setObjects(("BREEZECOM-MIB", "brzTrapIndex"), ("BREEZECOM-MIB", "brzTrapText"))
brzdot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6))
dot11smt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1))
dot11DefaultWEPKeys = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3))
dot11DefaultWEPKey1 = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DefaultWEPKey1.setStatus('mandatory')
dot11DefaultWEPKey2 = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DefaultWEPKey2.setStatus('mandatory')
dot11DefaultWEPKey3 = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DefaultWEPKey3.setStatus('mandatory')
dot11DefaultWEPKey4 = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DefaultWEPKey4.setStatus('mandatory')
dot11PrivacyGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6))
dot11Preauthentication = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Preauthentication.setStatus('mandatory')
dot11PrivacyOptionImplemented = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PrivacyOptionImplemented.setStatus('mandatory')
dot11PrivacyInvoke = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PrivacyInvoke.setStatus('mandatory')
dot11WEPDefaultKeyID = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WEPDefaultKeyID.setStatus('mandatory')
dot11mac = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2))
dot11OperationGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1))
dot11MaxMulticastRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MaxMulticastRate.setStatus('mandatory')
dot11DwellTime = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DwellTime.setStatus('mandatory')
dot11RTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RTSThreshold.setStatus('mandatory')
dot11ShortRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortRetryLimit.setStatus('mandatory')
dot11DwellRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DwellRetryLimit.setStatus('mandatory')
dot11FragmentationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FragmentationThreshold.setStatus('mandatory')
dot11ShortRetryLimitForVoice = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortRetryLimitForVoice.setStatus('mandatory')
dot11DwellRetryLimitForVoice = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DwellRetryLimitForVoice.setStatus('mandatory')
dot11res = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3))
dot11resAttribute = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8))
dot11ResourceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2))
dot11CurrentStationStatus = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CurrentStationStatus.setStatus('mandatory')
dot11TotalNumberOfAssocSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TotalNumberOfAssocSinceLastReset.setStatus('mandatory')
dot11manufacturerName = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerName.setStatus('mandatory')
dot11manufacturerProductName = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerProductName.setStatus('mandatory')
dot11manufacturerProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerProductVersion.setStatus('mandatory')
dot11phy = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4))
dot11PhyOperationGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 1))
dot11CurrentRegDomain = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 48, 49, 50, 55, 56, 64, 65, 72, 73, 96))).clone(namedValues=NamedValues(("ethairnet", 0), ("usa", 16), ("canada", 32), ("europe", 48), ("spain", 49), ("france", 50), ("europe-dd", 55), ("netherlands", 56), ("japan", 64), ("korea", 65), ("israel", 72), ("australia", 73), ("proprietary", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentRegDomain.setStatus('mandatory')
dot11PhyAntennaGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 3))
dot11CurrentTxAntenna = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentTxAntenna.setStatus('mandatory')
dot11PhyTxPwrGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 4))
dot11CurrentTxPwrLvl = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentTxPwrLvl.setStatus('mandatory')
dot11PhyFHSSGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 5))
dot11CurrentDwellTime = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentDwellTime.setStatus('mandatory')
dot11CurrentSet = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentSet.setStatus('mandatory')
dot11CurrentPattern = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentPattern.setStatus('mandatory')
dot11MultySupport = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 5))
dot11MultyRateSupport = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MultyRateSupport.setStatus('mandatory')
dot11MultyRateDecisionWindow = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MultyRateDecisionWindow.setStatus('mandatory')
dot11Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 6))
dot11WaitforAssociationAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("use-mine", 0), ("get-from-ethernet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WaitforAssociationAddress.setStatus('mandatory')
dot11JapanCallSign = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11JapanCallSign.setStatus('mandatory')
mibBuilder.exportSymbols("BREEZECOM-MIB", dot11MultySupport=dot11MultySupport, brzRxPacketsFromWlan=brzRxPacketsFromWlan, brzAP=brzAP, stAddress=stAddress, brzTranslationMode=brzTranslationMode, dot11manufacturerProductVersion=dot11manufacturerProductVersion, powreStationsEntry=powreStationsEntry, stCFMode=stCFMode, dot11DwellRetryLimitForVoice=dot11DwellRetryLimitForVoice, freqNo=freqNo, brzTxOctetsToDS=brzTxOctetsToDS, bssNumOfStationsAuthenticated=bssNumOfStationsAuthenticated, brzSTAassociated=brzSTAassociated, dot11FragmentationThreshold=dot11FragmentationThreshold, brzTrapAPMacAddr=brzTrapAPMacAddr, brzRoamToAPMacAddress=brzRoamToAPMacAddress, breezecom=breezecom, freqStatisticsEntry=freqStatisticsEntry, dot11mac=dot11mac, trapHostsTable=trapHostsTable, brzStaNumForLargeCW=brzStaNumForLargeCW, dot11resAttribute=dot11resAttribute, brzPowerMngMode=brzPowerMngMode, dot11res=dot11res, dot11PhyFHSSGrp=dot11PhyFHSSGrp, brzWBWlanStatus=brzWBWlanStatus, bssNumOfBeaconSent=bssNumOfBeaconSent, accessRights=accessRights, brzTxMSDUToWlan=brzTxMSDUToWlan, pSPowerSavingAged=pSPowerSavingAged, powerSaveStationID=powerSaveStationID, sysCmd=sysCmd, brzDisplayNonActiveCodeVersion=brzDisplayNonActiveCodeVersion, sysNoiseFloor=sysNoiseFloor, maskIP=maskIP, freqStatisticsIndex=freqStatisticsIndex, brzNonActiveCodeState=brzNonActiveCodeState, bssApAdb=bssApAdb, brzRetryTxDataToWlanPercent=brzRetryTxDataToWlanPercent, stTxFragments=stTxFragments, brzRetryOnWlanPercent=brzRetryOnWlanPercent, powerSaveAged=powerSaveAged, sysResetCounters=sysResetCounters, dot11PrivacyOptionImplemented=dot11PrivacyOptionImplemented, brzNeighboringBeaconRate=brzNeighboringBeaconRate, adbTable=adbTable, stTxFragments3M=stTxFragments3M, dot11MaxMulticastRate=dot11MaxMulticastRate, brzLastAPMacAddress=brzLastAPMacAddress, stTxDroppedPackets=stTxDroppedPackets, breezecomAP10=breezecomAP10, stRssi=stRssi, powerSaveIndex=powerSaveIndex, knownAPsValue=knownAPsValue, dot11DefaultWEPKey3=dot11DefaultWEPKey3, stTxFragments1M=stTxFragments1M, breezecomOID=breezecomOID, knownAPsAvrgDbm=knownAPsAvrgDbm, brzTx1MBitRate=brzTx1MBitRate, brzAuthenticationType=brzAuthenticationType, trapIPaddress=trapIPaddress, brzLoadStations=brzLoadStations, brzNumOfReassocRequests=brzNumOfReassocRequests, stRxFragments=stRxFragments, stReTxFragments2M=stReTxFragments2M, brzTrapText=brzTrapText, brzAPassociated=brzAPassociated, brzTrapToggle=brzTrapToggle, dot11PhyTxPwrGrp=dot11PhyTxPwrGrp, brzTxErrTransmitions=brzTxErrTransmitions, brzNumberOfProbeResponses=brzNumberOfProbeResponses, brzApRedundancyLimit=brzApRedundancyLimit, brzBadBeacons=brzBadBeacons, brzRoamParams=brzRoamParams, brzAvrgRssi=brzAvrgRssi, assocRequestSentRetx=assocRequestSentRetx, sysDeltaCarrierSense=sysDeltaCarrierSense, sysParams=sysParams, stDbm=stDbm, brzRxOctetsFromDS=brzRxOctetsFromDS, brzDiscarded=brzDiscarded, stWlanStatus=stWlanStatus, dot11PhyOperationGrp=dot11PhyOperationGrp, brzdot11=brzdot11, dot11PhyAntennaGrp=dot11PhyAntennaGrp, brzApRedundancySupport=brzApRedundancySupport, powerSaveQueueFull=powerSaveQueueFull, breezecomSA10=breezecomSA10, brzHWMacAddress=brzHWMacAddress, dot11DefaultWEPKey1=dot11DefaultWEPKey1, brzIntelligentBridgingPeriod=brzIntelligentBridgingPeriod, brzMaxRate=brzMaxRate, assocRequestRecive=assocRequestRecive, assocResponceRecive=assocResponceRecive, adbEntry=adbEntry, knownAPsLoadStations=knownAPsLoadStations, stType=stType, brzRxFragFromWlan=brzRxFragFromWlan, powreStationsTable=powreStationsTable, dot11smt=dot11smt, brzMngSAWB=brzMngSAWB, brzCFMode=brzCFMode, bssCollectPerStationInfo=bssCollectPerStationInfo, brzTxToDS=brzTxToDS, MacAddress=MacAddress, reAssocRequestRecive=reAssocRequestRecive, brzApplTunneling=brzApplTunneling, trapHostsIndex=trapHostsIndex, brzTxWlanCnt=brzTxWlanCnt, brzTxPacketsToWlan=brzTxPacketsToWlan, brzTrapMacAddress=brzTrapMacAddress, brzTx2MBitRate=brzTx2MBitRate, brzMissedFrames=brzMissedFrames, brzSA40associated=brzSA40associated, dot11MultyRateSupport=dot11MultyRateSupport, dot11DefaultWEPKey2=dot11DefaultWEPKey2, assocResponseSentRetx=assocResponseSentRetx, brzRoamCnt=brzRoamCnt, brzWlanCnt=brzWlanCnt, brzWlanNetID=brzWlanNetID, dot11CurrentPattern=dot11CurrentPattern, brzWlanRelayUnicast=brzWlanRelayUnicast, sysTrapEnable=sysTrapEnable, brzWlanParams=brzWlanParams, brzNumberOfBeaconsForDisconnect=brzNumberOfBeaconsForDisconnect, brzTotalTxPacketsToWlan=brzTotalTxPacketsToWlan, brzRxBadFragFromWlan=brzRxBadFragFromWlan, dot11RTSThreshold=dot11RTSThreshold, dot11manufacturerName=dot11manufacturerName, brzMaxNumberOfScanning=brzMaxNumberOfScanning, brzWlanRTNetID=brzWlanRTNetID, brzGeneralSA40=brzGeneralSA40, sysSetDefaults=sysSetDefaults, writeCommunity=writeCommunity, brzRxMSDUFromWlan=brzRxMSDUFromWlan, dot11CurrentTxAntenna=dot11CurrentTxAntenna, probeResponseLost=probeResponseLost, sysTrapCounter=sysTrapCounter, brzMngCnt=brzMngCnt, brzGeneralWB=brzGeneralWB, brzSys=brzSys, readCommunity=readCommunity, brzWlanProtocol=brzWlanProtocol, brzFailedCountOnWlan=brzFailedCountOnWlan, dot11CurrentStationStatus=dot11CurrentStationStatus, brzWIXSupport=brzWIXSupport, brzTotalRetx=brzTotalRetx, brzAProamedOut=brzAProamedOut, brzBeaconInterval=brzBeaconInterval, stPMMode=stPMMode, brzRoamDecisionNumerator=brzRoamDecisionNumerator, breezecomSA40=breezecomSA40, bssNumOfStations=bssNumOfStations, knownAPsAvrgRssi=knownAPsAvrgRssi, sysChangeInstallerPassword=sysChangeInstallerPassword, pSInternallydiscarded=pSInternallydiscarded, bssNumOfStationsPeak=bssNumOfStationsPeak, dot11CurrentSet=dot11CurrentSet, brzTxErrorFrameReceived=brzTxErrorFrameReceived, assocResponseSent=assocResponseSent, brzEnableVoice=brzEnableVoice, brzTrapRssiQuality=brzTrapRssiQuality, brzWlanAssocAge=brzWlanAssocAge, ipParams=ipParams, dot11manufacturerProductName=dot11manufacturerProductName, dot11TotalNumberOfAssocSinceLastReset=dot11TotalNumberOfAssocSinceLastReset, dot11Maintenance=dot11Maintenance, sysReset=sysReset, brzTx3MBitRate=brzTx3MBitRate, freqStatisticsTable=freqStatisticsTable, dot11phy=dot11phy, knownAPsGoodBeacons=knownAPsGoodBeacons, brzWBassociated=brzWBassociated, dot11PrivacyGrp=dot11PrivacyGrp, brzWlanStatusOfStation=brzWlanStatusOfStation, brzGeneralAP=brzGeneralAP, pSFreeEntries=pSFreeEntries, brzAPWlanStatusap=brzAPWlanStatusap, brzDTIMPperiod=brzDTIMPperiod, dot11ResourceInfo=dot11ResourceInfo, brzWlanRelayBroadcast=brzWlanRelayBroadcast, brzTrapSTAMacAddr=brzTrapSTAMacAddr, brzRxForwardToWlan=brzRxForwardToWlan, authResponceRecive=authResponceRecive, knownAPsQuality=knownAPsQuality, brzRxFromDS=brzRxFromDS, brzPreferredAPMacAddress=brzPreferredAPMacAddress, dot11WEPDefaultKeyID=dot11WEPDefaultKeyID, brzCnt=brzCnt, breezecomPrvRev=breezecomPrvRev, sysExternalAmplifier=sysExternalAmplifier, dot11DefaultWEPKeys=dot11DefaultWEPKeys, dot11JapanCallSign=dot11JapanCallSign, trapHostsEntry=trapHostsEntry, powerSaveBuffered=powerSaveBuffered, dot11WaitforAssociationAddress=dot11WaitforAssociationAddress, probeResponseSent=probeResponseSent, dot11MultyRateDecisionWindow=dot11MultyRateDecisionWindow, dot11CurrentRegDomain=dot11CurrentRegDomain, brzACKDelayed=brzACKDelayed, probRequestSent=probRequestSent, freqTotalReceived=freqTotalReceived, brzTrapSTAType=brzTrapSTAType, brzIPStack=brzIPStack, brzTxErrorNoTimeUntilHop=brzTxErrorNoTimeUntilHop, brzMngAP=brzMngAP, knownAPsStatus=knownAPsStatus, bssNumOfStationsAuthenticatedPeak=bssNumOfStationsAuthenticatedPeak, brzRoamDecisionWin=brzRoamDecisionWin, sysChangeRightsToUSER=sysChangeRightsToUSER, brzMobilLvl=brzMobilLvl, brzRxDuplicateFragFromWlan=brzRxDuplicateFragFromWlan, brzPowerMngBitTestMode=brzPowerMngBitTestMode, sysCarrierSense=sysCarrierSense, brzTrapIndex=brzTrapIndex, brzAPaging=brzAPaging, assocResponseLost=assocResponseLost, sysDisplayAccessRights=sysDisplayAccessRights, knownAPsTotalBeacons=knownAPsTotalBeacons, bssNumOfBeaconLost=bssNumOfBeaconLost, brznetmib=brznetmib, stResetCounters=stResetCounters, powerSaveSent=powerSaveSent, stTxRetry=stTxRetry, brzRetryOnWlan=brzRetryOnWlan, brzWlanTrapThreashold=brzWlanTrapThreashold, stReTxFragments3M=stReTxFragments3M, brzSA40WlanStatus=brzSA40WlanStatus, stReTxFragments1M=stReTxFragments1M, brzSTA=brzSTA, dot11ShortRetryLimit=dot11ShortRetryLimit, probeResponseSentRetx=probeResponseSentRetx, dot11CurrentDwellTime=dot11CurrentDwellTime, dot11DwellTime=dot11DwellTime, brzPositiveBrg=brzPositiveBrg, brzTxErrorAbort=brzTxErrorAbort, brzTrapLastRssiQuality=brzTrapLastRssiQuality, breezecomWB10=breezecomWB10, brzRoamDecisionRSSIThreshold=brzRoamDecisionRSSIThreshold, brzAProamingIn=brzAProamingIn, brzSTAWlanStatus=brzSTAWlanStatus, sysRunFromNonActiveCode=sysRunFromNonActiveCode, dot11PrivacyInvoke=dot11PrivacyInvoke, brzCurrentAPMacAddress=brzCurrentAPMacAddress, brzTxErrorAckTimeOut=brzTxErrorAckTimeOut, pSstations=pSstations, knownAPsTable=knownAPsTable, brzRxBadFromDS=brzRxBadFromDS, ipAddr=ipAddr, stCurTxRate=stCurTxRate, probResponceRecive=probResponceRecive, stTxRetryPercent=stTxRetryPercent, brzAvrgDBm=brzAvrgDBm, brzJoinDecisionRSSIThreshold=brzJoinDecisionRSSIThreshold)
mibBuilder.exportSymbols("BREEZECOM-MIB", brzTxErrorUnderRunAndCTS=brzTxErrorUnderRunAndCTS, authRequestSentRetx=authRequestSentRetx, brzTraps=brzTraps, gatewayIPaddr=gatewayIPaddr, dot11DwellRetryLimit=dot11DwellRetryLimit, brzRxOctetsForwardToWlan=brzRxOctetsForwardToWlan, brzDSCnt=brzDSCnt, dot11Preauthentication=dot11Preauthentication, dot11CurrentTxPwrLvl=dot11CurrentTxPwrLvl, sysChangeRightsToTECHNICIAN=sysChangeRightsToTECHNICIAN, stTxFragments2M=stTxFragments2M, brzWlan=brzWlan, trapCommunity=trapCommunity, brzNeighboringBeacons=brzNeighboringBeacons, dot11ShortRetryLimitForVoice=dot11ShortRetryLimitForVoice, brzWlanQuality=brzWlanQuality, bssInfo=bssInfo, probeRequestRecive=probeRequestRecive, brzTxErrorAckCRC=brzTxErrorAckCRC, brzTxFragToWlan=brzTxFragToWlan, brzRetryTxDataToWlan=brzRetryTxDataToWlan, brzPSCnt=brzPSCnt, dot11DefaultWEPKey4=dot11DefaultWEPKey4, dot11OperationGrp=dot11OperationGrp, brzLastBeacon=brzLastBeacon, stMaxRate=stMaxRate, assocRequestSent=assocRequestSent, knownAPsIndex=knownAPsIndex, brzPowerSaveSupport=brzPowerSaveSupport, sysPartialDefaults=sysPartialDefaults, knownAPsEntry=knownAPsEntry, authRequestSent=authRequestSent, brzAPdisassociated=brzAPdisassociated, brzIpFilter=brzIpFilter, brzGeneralSTA=brzGeneralSTA, sysChangeRightsToINSTALLER=sysChangeRightsToINSTALLER, brzRxWlanCnt=brzRxWlanCnt)
