#
# PySNMP MIB module NETWORK-ALCHEMY-CLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETWORK-ALCHEMY-CLUSTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:11:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
netalModules, cryptoCluster, netalTraps = mibBuilder.importSymbols("NETAL-SMI", "netalModules", "cryptoCluster", "netalTraps")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, IpAddress, Unsigned32, NotificationType, MibIdentifier, Counter64, Counter32, TimeTicks, Bits, Gauge32, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "IpAddress", "Unsigned32", "NotificationType", "MibIdentifier", "Counter64", "Counter32", "TimeTicks", "Bits", "Gauge32", "iso", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
networkAlchemyClusterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2972, 5, 2))
networkAlchemyClusterMIB.setRevisions(('2000-10-25 00:00',))
if mibBuilder.loadTexts: networkAlchemyClusterMIB.setLastUpdated('200010250000Z')
if mibBuilder.loadTexts: networkAlchemyClusterMIB.setOrganization('Network Alchemy, Inc.')
clusterInfoName = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterInfoName.setStatus('current')
clusterMemberInfoNumMembers = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberInfoNumMembers.setStatus('current')
clusterAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2972, 2, 1, 3), )
if mibBuilder.loadTexts: clusterAddrTable.setStatus('current')
clusterAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2972, 2, 1, 3, 1), ).setIndexNames((0, "NETWORK-ALCHEMY-CLUSTER-MIB", "clusterAddrIndex"))
if mibBuilder.loadTexts: clusterAddrEntry.setStatus('current')
clusterAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAddrIndex.setStatus('current')
clusterInfoAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterInfoAddrs.setStatus('current')
clusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4), )
if mibBuilder.loadTexts: clusterMemberTable.setStatus('current')
clusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1), ).setIndexNames((0, "NETWORK-ALCHEMY-CLUSTER-MIB", "clusterMemberIndex"))
if mibBuilder.loadTexts: clusterMemberEntry.setStatus('current')
clusterMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberIndex.setStatus('current')
clusterMemberPrimaryIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberPrimaryIPAddr.setStatus('current')
clusterMemberWorkload = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberWorkload.setStatus('current')
clusterMemberMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberMaster.setStatus('current')
clusterMemberSecondaryIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2972, 2, 1, 5), )
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrTable.setStatus('current')
clusterMemberSecondaryIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2972, 2, 1, 5, 1), ).setIndexNames((0, "NETWORK-ALCHEMY-CLUSTER-MIB", "clusterMemberIndex"), (0, "NETWORK-ALCHEMY-CLUSTER-MIB", "clusterMemberSecondaryIPAddrIndex"))
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrEntry.setStatus('current')
clusterMemberSecondaryIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddr.setStatus('current')
clusterMemberSecondaryIPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrIndex.setStatus('current')
netalTrap0 = NotificationType((1, 3, 6, 1, 4, 1, 2972, 6, 0))
if mibBuilder.loadTexts: netalTrap0.setStatus('current')
clusterMemberJoin = NotificationType((1, 3, 6, 1, 4, 1, 2972, 6, 0, 1))
if mibBuilder.loadTexts: clusterMemberJoin.setStatus('current')
clusterMemberLeft = NotificationType((1, 3, 6, 1, 4, 1, 2972, 6, 0, 2))
if mibBuilder.loadTexts: clusterMemberLeft.setStatus('current')
clusterMemberBecameMaster = NotificationType((1, 3, 6, 1, 4, 1, 2972, 6, 0, 3))
if mibBuilder.loadTexts: clusterMemberBecameMaster.setStatus('current')
mibBuilder.exportSymbols("NETWORK-ALCHEMY-CLUSTER-MIB", clusterMemberLeft=clusterMemberLeft, clusterMemberInfoNumMembers=clusterMemberInfoNumMembers, networkAlchemyClusterMIB=networkAlchemyClusterMIB, clusterMemberIndex=clusterMemberIndex, clusterMemberSecondaryIPAddrEntry=clusterMemberSecondaryIPAddrEntry, clusterAddrIndex=clusterAddrIndex, clusterMemberSecondaryIPAddr=clusterMemberSecondaryIPAddr, clusterMemberSecondaryIPAddrTable=clusterMemberSecondaryIPAddrTable, clusterInfoAddrs=clusterInfoAddrs, clusterAddrTable=clusterAddrTable, clusterMemberBecameMaster=clusterMemberBecameMaster, clusterMemberEntry=clusterMemberEntry, clusterAddrEntry=clusterAddrEntry, clusterMemberSecondaryIPAddrIndex=clusterMemberSecondaryIPAddrIndex, clusterInfoName=clusterInfoName, clusterMemberJoin=clusterMemberJoin, netalTrap0=netalTrap0, clusterMemberPrimaryIPAddr=clusterMemberPrimaryIPAddr, clusterMemberTable=clusterMemberTable, PYSNMP_MODULE_ID=networkAlchemyClusterMIB, clusterMemberMaster=clusterMemberMaster, clusterMemberWorkload=clusterMemberWorkload)
