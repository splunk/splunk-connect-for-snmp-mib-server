#
# PySNMP MIB module GANDALF-ENTERPRISE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GANDALF-ENTERPRISE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:04:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, NotificationType, ObjectIdentity, Unsigned32, ModuleIdentity, MibIdentifier, Gauge32, iso, Counter64, IpAddress, enterprises, Integer32, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "NotificationType", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "MibIdentifier", "Gauge32", "iso", "Counter64", "IpAddress", "enterprises", "Integer32", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
gandalf = MibIdentifier((1, 3, 6, 1, 4, 1, 64))
gandalf_hub = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 1)).setLabel("gandalf-hub")
gandalf_bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 2)).setLabel("gandalf-bridge")
gandalf_generic = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 3)).setLabel("gandalf-generic")
gandalf_2590 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 4)).setLabel("gandalf-2590")
gandalf_wanNode = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 5)).setLabel("gandalf-wanNode")
gandalf_products = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6)).setLabel("gandalf-products")
gandalf_nms = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 7)).setLabel("gandalf-nms")
gandalf_wanProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 8)).setLabel("gandalf-wanProxy")
gandalf_rlanisdn = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 9)).setLabel("gandalf-rlanisdn")
gandalf_termserver = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 10)).setLabel("gandalf-termserver")
gandalf_router = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11)).setLabel("gandalf-router")
gandalf_experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 12)).setLabel("gandalf-experimental")
hmBasicCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 1, 1))
hmSelfTestCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 1, 2))
hmPerfMonCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 1, 3))
hmAddrTrackCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 1, 4))
bridgeConfigObject = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 2, 1))
bridgeTpObject = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 2, 2))
bridgeStpObject = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 2, 3))
bridgeStaticObject = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 2, 4))
wanPhysicalObject = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 2, 5))
ieee8023Object = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 2, 6))
gandalfLog = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 3, 1))
snmpAdminCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 3, 2))
gProd_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 1)).setLabel("gProd-wan")
gProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 1, 1))
g2300 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 1, 2))
g2050 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 1, 3))
gProd_hub = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 2)).setLabel("gProd-hub")
ecm1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 2, 1))
rsc9000 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 2, 3))
gProd_bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3)).setLabel("gProd-bridge")
lanline5220L = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3, 2))
xbr6202 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3, 3))
lanline5220e = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3, 4))
lanline5225i = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3, 5))
lanline5240i = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3, 6))
xbr6204 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3, 7))
lanline5221 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3, 8))
lanline5242 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 3, 9))
gProd_gateway = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 4)).setLabel("gProd-gateway")
wgm2590_hub = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 4, 1)).setLabel("wgm2590-hub")
wgm2590_standalone = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 4, 2)).setLabel("wgm2590-standalone")
gProd_termserver = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 5)).setLabel("gProd-termserver")
gts1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 5, 1))
gtsplus = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 5, 2))
gProd_router = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 6)).setLabel("gProd-router")
lanline5250i = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 6, 5))
lanline5250L = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 6, 7))
lanline5242er = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 6, 8))
lanline5250fr = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 6, 9))
xpressway5250isdn_typ1 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 6, 10)).setLabel("xpressway5250isdn-typ1")
xpressway5250isdn_typ2 = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 6, 6, 11)).setLabel("xpressway5250isdn-typ2")
hubBasicID = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubBasicID.setStatus('mandatory')
hubCardCapacity = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubCardCapacity.setStatus('mandatory')
hubCardMap = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubCardMap.setStatus('mandatory')
hubNumOfRelays = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubNumOfRelays.setStatus('mandatory')
hubRelayActive = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubRelayActive.setStatus('mandatory')
hubResourceType = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubResourceType.setStatus('mandatory')
hubStandardRevision = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubStandardRevision.setStatus('mandatory')
hubIEEE8023LmeOptions = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubIEEE8023LmeOptions.setStatus('mandatory')
hubManID = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubManID.setStatus('mandatory')
hubManProductID = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubManProductID.setStatus('mandatory')
hubManProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubManProductVersion.setStatus('mandatory')
hubManTelephoneNum = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(33, 33)).setFixedLength(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubManTelephoneNum.setStatus('mandatory')
hubName = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubName.setStatus('mandatory')
hubIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubIPaddress.setStatus('mandatory')
hubEEpromRev = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubEEpromRev.setStatus('mandatory')
hubSecureMode = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubSecureMode.setStatus('mandatory')
hmBasicCardTable = MibTable((1, 3, 6, 1, 4, 1, 64, 1, 1, 17), )
if mibBuilder.loadTexts: hmBasicCardTable.setStatus('mandatory')
hmBasicCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "gCardID"))
if mibBuilder.loadTexts: hmBasicCardEntry.setStatus('mandatory')
gCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gCardID.setStatus('mandatory')
gCardNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gCardNumberOfPorts.setStatus('mandatory')
gCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gCardName.setStatus('mandatory')
gCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gCardType.setStatus('mandatory')
gCardRingNumberA = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ring1", 1), ("ring2", 2), ("ring3", 3), ("ring4", 4), ("standalone", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gCardRingNumberA.setStatus('mandatory')
gCardRingNumberB = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ring1", 1), ("ring2", 2), ("ring3", 3), ("ring4", 4), ("standalone", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gCardRingNumberB.setStatus('mandatory')
gCardIbmModeA = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonIbmMode", 1), ("ibmMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gCardIbmModeA.setStatus('mandatory')
gCardIbmModeB = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibmMode", 1), ("nonIbmMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gCardIbmModeB.setStatus('mandatory')
gCardRingSpeedA = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16, 255))).clone(namedValues=NamedValues(("fourMbps", 4), ("sixteenMbps", 16), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gCardRingSpeedA.setStatus('mandatory')
gCardRingSpeedB = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16, 255))).clone(namedValues=NamedValues(("fourMbps", 4), ("sixteenMbps", 16), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gCardRingSpeedB.setStatus('mandatory')
hmBasicPortTable = MibTable((1, 3, 6, 1, 4, 1, 64, 1, 1, 18), )
if mibBuilder.loadTexts: hmBasicPortTable.setStatus('mandatory')
hmBasicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "gCardBasicID"), (0, "GANDALF-ENTERPRISE-MIB", "gPortID"))
if mibBuilder.loadTexts: hmBasicPortEntry.setStatus('mandatory')
gCardBasicID = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gCardBasicID.setStatus('mandatory')
gPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortID.setStatus('mandatory')
gPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("aui", 1), ("bnc", 2), ("rj45", 3), ("rj71", 4), ("thin", 5), ("st", 6), ("fsma", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortType.setStatus('mandatory')
gPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gPortAdminState.setStatus('mandatory')
gPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("nonAutoPartitioned", 2), ("autoPartitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortAutoPartitionState.setStatus('mandatory')
gPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gPortName.setStatus('mandatory')
gPortEffectiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("masterReady", 3), ("masterActive", 4), ("masterFaulty", 5), ("masterDisabled", 6), ("standbyReady", 7), ("standbyActive", 8), ("standbyFaulty", 9), ("standbyDisabled", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortEffectiveState.setStatus('mandatory')
gPortConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonRedundant", 1), ("master", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortConfiguration.setStatus('mandatory')
gPortRedundantPort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gPortRedundantPort.setStatus('mandatory')
gPortRedundantCard = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gPortRedundantCard.setStatus('mandatory')
gPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortLinkStatus.setStatus('mandatory')
hubSelfTestID = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubSelfTestID.setStatus('mandatory')
hubTimeSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubTimeSinceReset.setStatus('mandatory')
hubResetTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubResetTimeStamp.setStatus('mandatory')
hubHealthState = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubHealthState.setStatus('mandatory')
hubHealthText = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubHealthText.setStatus('mandatory')
hubHealthData = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubHealthData.setStatus('mandatory')
hubSystemResetting = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notResetting", 1), ("resetting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubSystemResetting.setStatus('mandatory')
hubResetting = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notResetting", 1), ("resetting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubResetting.setStatus('mandatory')
hubExecutingSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSelfTesting", 1), ("selfTesting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubExecutingSelfTest.setStatus('mandatory')
hubResetAction = MibScalar((1, 3, 6, 1, 4, 1, 64, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noreset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubResetAction.setStatus('mandatory')
hmPerfMonRelayTable = MibTable((1, 3, 6, 1, 4, 1, 64, 1, 3, 1), )
if mibBuilder.loadTexts: hmPerfMonRelayTable.setStatus('mandatory')
hmPerfMonRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 1, 3, 1, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "relayPerfID"))
if mibBuilder.loadTexts: hmPerfMonRelayEntry.setStatus('mandatory')
relayPerfID = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayPerfID.setStatus('mandatory')
relayTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayTotalCollisions.setStatus('mandatory')
hmPerfMonPortTable = MibTable((1, 3, 6, 1, 4, 1, 64, 1, 3, 2), )
if mibBuilder.loadTexts: hmPerfMonPortTable.setStatus('mandatory')
hmPerfMonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "gCardPerfID"), (0, "GANDALF-ENTERPRISE-MIB", "gPortPerfID"))
if mibBuilder.loadTexts: hmPerfMonPortEntry.setStatus('mandatory')
gCardPerfID = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gCardPerfID.setStatus('mandatory')
gPortPerfID = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortPerfID.setStatus('mandatory')
gPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortReadableFrames.setStatus('mandatory')
gPortReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortReadableOctets.setStatus('mandatory')
gPortPygmys = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortPygmys.setStatus('mandatory')
gPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortRunts.setStatus('mandatory')
gPortFrameCheckSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortFrameCheckSeqErrs.setStatus('mandatory')
gPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortAlignmentErrors.setStatus('mandatory')
gPortFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortFramesTooLong.setStatus('mandatory')
gPortAutoPartitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortAutoPartitionCount.setStatus('mandatory')
gPortLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortLateCollisions.setStatus('mandatory')
gPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortCollisions.setStatus('mandatory')
gPortAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortAlarms.setStatus('mandatory')
gPortMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortMulticastFrames.setStatus('mandatory')
gPortBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortBroadcastFrames.setStatus('mandatory')
hmAddrTrackPortTable = MibTable((1, 3, 6, 1, 4, 1, 64, 1, 4, 1), )
if mibBuilder.loadTexts: hmAddrTrackPortTable.setStatus('mandatory')
hmAddrTrackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 1, 4, 1, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "gCardAddrID"), (0, "GANDALF-ENTERPRISE-MIB", "gPortAddrID"))
if mibBuilder.loadTexts: hmAddrTrackPortEntry.setStatus('mandatory')
gCardAddrID = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gCardAddrID.setStatus('mandatory')
gPortAddrID = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortAddrID.setStatus('mandatory')
gPortLastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortLastSourceAddress.setStatus('mandatory')
gPortSourceAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gPortSourceAddrChanges.setStatus('mandatory')
bridgeBaseAddress = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBaseAddress.setStatus('mandatory')
bridgeNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeNumPorts.setStatus('mandatory')
bridgeType = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeType.setStatus('mandatory')
bridgeNumOfInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeNumOfInterfaces.setStatus('mandatory')
bridgePowerUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePowerUpStatus.setStatus('mandatory')
bridgeIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeIpAddr.setStatus('mandatory')
bridgeManID = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeManID.setStatus('mandatory')
bridgeManProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeManProductVersion.setStatus('mandatory')
bridgeEEpromRev = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEEpromRev.setStatus('mandatory')
bridgeSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeSerialNum.setStatus('mandatory')
bridgeHubChassis = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeHubChassis.setStatus('mandatory')
filterDatabaseSize = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterDatabaseSize.setStatus('mandatory')
numberOfDynamicEntries = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfDynamicEntries.setStatus('mandatory')
numberOfStaticEntries = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfStaticEntries.setStatus('mandatory')
agingState = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agingState.setStatus('mandatory')
agingTime = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agingTime.setStatus('mandatory')
learningState = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: learningState.setStatus('mandatory')
protocolFilterState = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolFilterState.setStatus('mandatory')
broadcastForwardingState = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastForwardingState.setStatus('mandatory')
multicastForwardingState = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastForwardingState.setStatus('mandatory')
bridgeTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 64, 2, 2, 10), )
if mibBuilder.loadTexts: bridgeTpFdbTable.setStatus('mandatory')
bridgeTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 2, 2, 10, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "bridgeDot1dTpFdbAddress"))
if mibBuilder.loadTexts: bridgeTpFdbEntry.setStatus('mandatory')
bridgeDot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 2, 10, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dTpFdbAddress.setStatus('mandatory')
bridgeDot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dTpFdbPort.setStatus('mandatory')
bridgeDot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dTpFdbStatus.setStatus('mandatory')
bridgeLogicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 64, 2, 2, 11), )
if mibBuilder.loadTexts: bridgeLogicalPortTable.setStatus('deprecated')
bridgeLogicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 2, 2, 11, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "bridgeDot1dTpPort"))
if mibBuilder.loadTexts: bridgeLogicalPortEntry.setStatus('deprecated')
bridgeDot1dTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dTpPort.setStatus('deprecated')
bridgeDot1dTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dTpPortMaxInfo.setStatus('deprecated')
bridgeDot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dTpPortInFrames.setStatus('deprecated')
bridgeDot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 2, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dTpPortOutFrames.setStatus('deprecated')
bridgeDot1dTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 2, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dTpPortInDiscards.setStatus('deprecated')
bridgeDot1dStpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpProtocolSpecification.setStatus('deprecated')
bridgeDot1dStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPriority.setStatus('deprecated')
bridgeDot1dStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpTimeSinceTopologyChange.setStatus('deprecated')
bridgeDot1dStpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpTopChanges.setStatus('deprecated')
bridgeDot1dStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpDesignatedRoot.setStatus('deprecated')
bridgeDot1dStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpRootCost.setStatus('deprecated')
bridgeDot1dStpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpRootPort.setStatus('deprecated')
bridgeDot1dStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpMaxAge.setStatus('deprecated')
bridgeDot1dStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpHelloTime.setStatus('deprecated')
bridgeDot1dStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpHoldTime.setStatus('deprecated')
bridgeDot1dStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpForwardDelay.setStatus('deprecated')
bridgeDot1dStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpBridgeMaxAge.setStatus('deprecated')
bridgeDot1dStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpBridgeHelloTime.setStatus('deprecated')
bridgeDot1dStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 64, 2, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpBridgeForwardDelay.setStatus('deprecated')
bridgeStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 64, 2, 3, 15), )
if mibBuilder.loadTexts: bridgeStpPortTable.setStatus('deprecated')
bridgeStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "bridgeDot1dStpPort"))
if mibBuilder.loadTexts: bridgeStpPortEntry.setStatus('deprecated')
bridgeDot1dStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPort.setStatus('deprecated')
bridgeDot1dStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortPriority.setStatus('deprecated')
bridgeDot1dStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortState.setStatus('deprecated')
bridgeDot1dStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortEnable.setStatus('deprecated')
bridgeDot1dStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortPathCost.setStatus('deprecated')
bridgeDot1dStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortDesignatedRoot.setStatus('deprecated')
bridgeDot1dStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortDesignatedCost.setStatus('deprecated')
bridgeDot1dStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortDesignatedBridge.setStatus('deprecated')
bridgeDot1dStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortDesignatedPort.setStatus('deprecated')
bridgeDot1dStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 3, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStpPortForwardTransitions.setStatus('deprecated')
bridgeStaticTable = MibTable((1, 3, 6, 1, 4, 1, 64, 2, 4, 1), )
if mibBuilder.loadTexts: bridgeStaticTable.setStatus('deprecated')
bridgeStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 2, 4, 1, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "bridgeDot1dStaticAddress"))
if mibBuilder.loadTexts: bridgeStaticEntry.setStatus('deprecated')
bridgeDot1dStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStaticAddress.setStatus('deprecated')
bridgeDot1dStaticReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStaticReceivePort.setStatus('deprecated')
bridgeDot1dStaticAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStaticAllowedToGoTo.setStatus('deprecated')
bridgeDot1dStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDot1dStaticStatus.setStatus('deprecated')
bridgeProtFiltTable = MibTable((1, 3, 6, 1, 4, 1, 64, 2, 4, 2), )
if mibBuilder.loadTexts: bridgeProtFiltTable.setStatus('mandatory')
bridgeProtFiltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 2, 4, 2, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "brProtFiltIndex"))
if mibBuilder.loadTexts: bridgeProtFiltEntry.setStatus('mandatory')
brProtFiltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProtFiltIndex.setStatus('mandatory')
brProtFiltName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProtFiltName.setStatus('mandatory')
brProtFiltId = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProtFiltId.setStatus('mandatory')
brProtFiltPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProtFiltPortMap.setStatus('mandatory')
bridgeProtPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 64, 2, 4, 3), )
if mibBuilder.loadTexts: bridgeProtPriorityTable.setStatus('mandatory')
bridgeProtPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 2, 4, 3, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "brProtPriorityIndex"))
if mibBuilder.loadTexts: bridgeProtPriorityEntry.setStatus('mandatory')
brProtPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProtPriorityIndex.setStatus('mandatory')
brProtPriorityName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProtPriorityName.setStatus('mandatory')
brProtPriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProtPriorityId.setStatus('mandatory')
brProtPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brProtPriorityLevel.setStatus('mandatory')
wanPhysTable = MibTable((1, 3, 6, 1, 4, 1, 64, 2, 5, 1), )
if mibBuilder.loadTexts: wanPhysTable.setStatus('mandatory')
wanPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "wanPhysPortId"))
if mibBuilder.loadTexts: wanPhysEntry.setStatus('mandatory')
wanPhysPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPhysPortId.setStatus('mandatory')
wanPhysPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPhysPortName.setStatus('mandatory')
wanPhysLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPhysLogicalPort.setStatus('mandatory')
wanPhysDcdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPhysDcdLevel.setStatus('mandatory')
wanPhysLinkLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPhysLinkLevel.setStatus('mandatory')
wanTxLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanTxLinkUtilization.setStatus('mandatory')
wanRxLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanRxLinkUtilization.setStatus('mandatory')
wanPhysFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanPhysFrameErrors.setStatus('mandatory')
wanCompressionState = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanCompressionState.setStatus('mandatory')
wanCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanCompressionRatio.setStatus('mandatory')
ieeeIfTable = MibTable((1, 3, 6, 1, 4, 1, 64, 2, 6, 1), )
if mibBuilder.loadTexts: ieeeIfTable.setStatus('mandatory')
ieeeIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "ieeeIfIndex"))
if mibBuilder.loadTexts: ieeeIfEntry.setStatus('mandatory')
ieeeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeIfIndex.setStatus('mandatory')
ieeeFrmsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeFrmsTxOk.setStatus('mandatory')
ieeeSingleCollFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeSingleCollFrms.setStatus('mandatory')
ieeeMultipleCollFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeMultipleCollFrms.setStatus('mandatory')
ieeeOctetsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeOctetsTxOk.setStatus('mandatory')
ieeeDefTx = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeDefTx.setStatus('mandatory')
ieeeMcastFrmsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeMcastFrmsTxOk.setStatus('mandatory')
ieeeBcastFrmsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeBcastFrmsTxOk.setStatus('mandatory')
ieeeLateColls = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeLateColls.setStatus('mandatory')
ieeeExcessColls = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeExcessColls.setStatus('mandatory')
ieeeIntlMacTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeIntlMacTxError.setStatus('mandatory')
ieeeCsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeCsErrors.setStatus('mandatory')
ieeeExcessDef = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeExcessDef.setStatus('mandatory')
ieeeFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeFrmsRxOk.setStatus('mandatory')
ieeeOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeOctetsRxOk.setStatus('mandatory')
ieeeMcastFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeMcastFrmsRxOk.setStatus('mandatory')
ieeeBcastFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeBcastFrmsRxOk.setStatus('mandatory')
ieeeTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeTooLongErrors.setStatus('mandatory')
ieeeAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeAlignErrors.setStatus('mandatory')
ieeeFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeFcsErrors.setStatus('mandatory')
ieeeIrLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeIrLengthErrors.setStatus('mandatory')
ieeeOorLengthFields = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeOorLengthFields.setStatus('mandatory')
ieeeIntlMacRcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeIntlMacRcvErrors.setStatus('mandatory')
ieeeInitMac = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initialize", 1), ("uninitialize", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeInitMac.setStatus('mandatory')
ieeePromRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeePromRxStatus.setStatus('mandatory')
ieeeMacSubLayerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeMacSubLayerStatus.setStatus('mandatory')
ieeeTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeTxStatus.setStatus('mandatory')
ieeeMcastRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeMcastRxStatus.setStatus('mandatory')
ieeeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeMacAddress.setStatus('mandatory')
ieeeSqeTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 2, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieeeSqeTestErrors.setStatus('mandatory')
ganEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 64, 3, 1, 1), )
if mibBuilder.loadTexts: ganEventLogTable.setStatus('mandatory')
ganEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 3, 1, 1, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "ganEventLogIndex"))
if mibBuilder.loadTexts: ganEventLogEntry.setStatus('mandatory')
ganEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ganEventLogIndex.setStatus('mandatory')
ganEventLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ganEventLogDate.setStatus('mandatory')
ganEventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ganEventLogTime.setStatus('mandatory')
ganEventLogEventNum = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ganEventLogEventNum.setStatus('deprecated')
ganEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("cleared", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ganEventLogSeverity.setStatus('mandatory')
ganEventLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ganEventLogDescription.setStatus('mandatory')
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 64, 3, 2, 1), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('mandatory')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 3, 2, 1, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "snmpCommunityIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('mandatory')
snmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityIndex.setStatus('mandatory')
snmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityName.setStatus('mandatory')
snmpCommunityIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityIpAddr.setStatus('mandatory')
snmpCommunityPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityPriv.setStatus('mandatory')
snmpTrapCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 64, 3, 2, 2), )
if mibBuilder.loadTexts: snmpTrapCommunityTable.setStatus('mandatory')
snmpTrapCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 3, 2, 2, 1), ).setIndexNames((0, "GANDALF-ENTERPRISE-MIB", "snmpTrapCommunityIndex"))
if mibBuilder.loadTexts: snmpTrapCommunityEntry.setStatus('mandatory')
snmpTrapCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapCommunityIndex.setStatus('mandatory')
snmpTrapCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapCommunityName.setStatus('mandatory')
snmpTrapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapIpAddr.setStatus('mandatory')
snmpTrapRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapRemotePort.setStatus('mandatory')
snmpTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 64, 3, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDescription.setStatus('mandatory')
gCardInstalled = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,100))
gCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,101))
gCardMismatch = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,102))
gCardMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,103))
gPortThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,104))
gNvramFault = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,105))
gFiltDatabaseFull = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,106))
gPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,107))
gLogThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,108))
gLinkMismatch = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,109))
gLinkMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,110))
gNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,111))
gTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,112))
gPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,113))
mibBuilder.exportSymbols("GANDALF-ENTERPRISE-MIB", gTopologyChange=gTopologyChange, gProd_router=gProd_router, bridgeDot1dStpPortPathCost=bridgeDot1dStpPortPathCost, hubCardMap=hubCardMap, bridgeManProductVersion=bridgeManProductVersion, lanline5242=lanline5242, bridgeDot1dStaticReceivePort=bridgeDot1dStaticReceivePort, ieeeCsErrors=ieeeCsErrors, xbr6204=xbr6204, hubResetting=hubResetting, hubStandardRevision=hubStandardRevision, multicastForwardingState=multicastForwardingState, wanPhysPortId=wanPhysPortId, bridgeDot1dStpDesignatedRoot=bridgeDot1dStpDesignatedRoot, gCardMismatchCleared=gCardMismatchCleared, bridgeDot1dTpPortMaxInfo=bridgeDot1dTpPortMaxInfo, lanline5250L=lanline5250L, learningState=learningState, bridgeDot1dStpPortDesignatedCost=bridgeDot1dStpPortDesignatedCost, ieeeAlignErrors=ieeeAlignErrors, gts1000=gts1000, wanCompressionState=wanCompressionState, brProtFiltPortMap=brProtFiltPortMap, hmPerfMonCapability=hmPerfMonCapability, bridgeStaticObject=bridgeStaticObject, broadcastForwardingState=broadcastForwardingState, gLinkMismatch=gLinkMismatch, gPortReadableFrames=gPortReadableFrames, snmpCommunityName=snmpCommunityName, gProxy=gProxy, bridgeProtFiltTable=bridgeProtFiltTable, snmpCommunityEntry=snmpCommunityEntry, gandalf_hub=gandalf_hub, wgm2590_standalone=wgm2590_standalone, ieeeIfIndex=ieeeIfIndex, bridgeEEpromRev=bridgeEEpromRev, bridgeDot1dStpPortDesignatedPort=bridgeDot1dStpPortDesignatedPort, hubResetAction=hubResetAction, bridgeTpFdbEntry=bridgeTpFdbEntry, gCardRingNumberA=gCardRingNumberA, gandalf_wanNode=gandalf_wanNode, gPortBroadcastFrames=gPortBroadcastFrames, brProtPriorityLevel=brProtPriorityLevel, wanPhysEntry=wanPhysEntry, gCardRingNumberB=gCardRingNumberB, snmpTrapCommunityTable=snmpTrapCommunityTable, hmAddrTrackPortTable=hmAddrTrackPortTable, hubSelfTestID=hubSelfTestID, bridgeNumOfInterfaces=bridgeNumOfInterfaces, bridgeDot1dStpTimeSinceTopologyChange=bridgeDot1dStpTimeSinceTopologyChange, xpressway5250isdn_typ1=xpressway5250isdn_typ1, hmBasicPortTable=hmBasicPortTable, ieeeSingleCollFrms=ieeeSingleCollFrms, bridgeBaseAddress=bridgeBaseAddress, snmpTrapCommunityName=snmpTrapCommunityName, gandalf_experimental=gandalf_experimental, gProd_hub=gProd_hub, ecm1000=ecm1000, hubCardCapacity=hubCardCapacity, gPortCollisions=gPortCollisions, hmSelfTestCapability=hmSelfTestCapability, gPortFrameCheckSeqErrs=gPortFrameCheckSeqErrs, bridgeIpAddr=bridgeIpAddr, hmAddrTrackCapability=hmAddrTrackCapability, brProtPriorityId=brProtPriorityId, ieeeOorLengthFields=ieeeOorLengthFields, hubName=hubName, gCardRingSpeedA=gCardRingSpeedA, wgm2590_hub=wgm2590_hub, hubRelayActive=hubRelayActive, hmBasicPortEntry=hmBasicPortEntry, gPortLastSourceAddress=gPortLastSourceAddress, gandalf_router=gandalf_router, bridgeDot1dStpRootPort=bridgeDot1dStpRootPort, hubExecutingSelfTest=hubExecutingSelfTest, wanCompressionRatio=wanCompressionRatio, ganEventLogIndex=ganEventLogIndex, wanPhysDcdLevel=wanPhysDcdLevel, gLogThresholdExceeded=gLogThresholdExceeded, bridgeDot1dStaticAddress=bridgeDot1dStaticAddress, ganEventLogSeverity=ganEventLogSeverity, bridgeDot1dTpPortInFrames=bridgeDot1dTpPortInFrames, ganEventLogTable=ganEventLogTable, gandalf=gandalf, ieeeMultipleCollFrms=ieeeMultipleCollFrms, ganEventLogEntry=ganEventLogEntry, ieeeMacAddress=ieeeMacAddress, lanline5221=lanline5221, hubHealthData=hubHealthData, wanPhysLinkLevel=wanPhysLinkLevel, ieeeMcastFrmsTxOk=ieeeMcastFrmsTxOk, snmpCommunityIndex=snmpCommunityIndex, bridgeDot1dStpPortDesignatedRoot=bridgeDot1dStpPortDesignatedRoot, bridgeDot1dTpFdbStatus=bridgeDot1dTpFdbStatus, hmAddrTrackPortEntry=hmAddrTrackPortEntry, gPortID=gPortID, gPortConfiguration=gPortConfiguration, agingTime=agingTime, gCardIbmModeA=gCardIbmModeA, gCardBasicID=gCardBasicID, bridgeDot1dStaticStatus=bridgeDot1dStaticStatus, gPortFailure=gPortFailure, gPortAlarms=gPortAlarms, lanline5220L=lanline5220L, brProtFiltName=brProtFiltName, ieeeOctetsRxOk=ieeeOctetsRxOk, ieeeMcastFrmsRxOk=ieeeMcastFrmsRxOk, bridgeDot1dStpBridgeHelloTime=bridgeDot1dStpBridgeHelloTime, ieeeIntlMacRcvErrors=ieeeIntlMacRcvErrors, lanline5240i=lanline5240i, ieee8023Object=ieee8023Object, gProd_bridge=gProd_bridge, gFiltDatabaseFull=gFiltDatabaseFull, hubManProductID=hubManProductID, bridgeDot1dTpFdbPort=bridgeDot1dTpFdbPort, bridgeDot1dStpRootCost=bridgeDot1dStpRootCost, ieeeSqeTestErrors=ieeeSqeTestErrors, snmpTrapRemotePort=snmpTrapRemotePort, relayTotalCollisions=relayTotalCollisions, agingState=agingState, ieeeIfEntry=ieeeIfEntry, gandalf_bridge=gandalf_bridge, ieeeOctetsTxOk=ieeeOctetsTxOk, ieeeBcastFrmsRxOk=ieeeBcastFrmsRxOk, lanline5250i=lanline5250i, gPortSourceAddrChanges=gPortSourceAddrChanges, gProd_gateway=gProd_gateway, snmpAdminCapability=snmpAdminCapability, gProd_wan=gProd_wan, snmpCommunityIpAddr=snmpCommunityIpAddr, snmpTrapIpAddr=snmpTrapIpAddr, gCardInstalled=gCardInstalled, ganEventLogEventNum=ganEventLogEventNum, gandalf_rlanisdn=gandalf_rlanisdn, hubManProductVersion=hubManProductVersion, xpressway5250isdn_typ2=xpressway5250isdn_typ2, bridgeDot1dStpPortForwardTransitions=bridgeDot1dStpPortForwardTransitions, gCardPerfID=gCardPerfID, ieeeMcastRxStatus=ieeeMcastRxStatus, lanline5250fr=lanline5250fr, gCardID=gCardID, gandalf_2590=gandalf_2590, gPortName=gPortName, bridgeProtPriorityTable=bridgeProtPriorityTable, gCardIbmModeB=gCardIbmModeB, gNewRoot=gNewRoot, gProd_termserver=gProd_termserver, gCardNumberOfPorts=gCardNumberOfPorts, ieeeFcsErrors=ieeeFcsErrors, bridgeDot1dStpProtocolSpecification=bridgeDot1dStpProtocolSpecification, hubHealthText=hubHealthText, hubIPaddress=hubIPaddress, gPortPygmys=gPortPygmys, gandalfLog=gandalfLog, gPortAutoPartitionCount=gPortAutoPartitionCount, hubNumOfRelays=hubNumOfRelays, bridgeProtPriorityEntry=bridgeProtPriorityEntry, g2050=g2050, bridgeStaticTable=bridgeStaticTable, hmPerfMonPortTable=hmPerfMonPortTable, bridgeDot1dStpPort=bridgeDot1dStpPort, brProtFiltIndex=brProtFiltIndex, bridgeDot1dTpPortInDiscards=bridgeDot1dTpPortInDiscards, ieeeExcessDef=ieeeExcessDef, bridgeType=bridgeType, ieeeIfTable=ieeeIfTable, gCardMismatch=gCardMismatch, wanPhysTable=wanPhysTable, ieeeBcastFrmsTxOk=ieeeBcastFrmsTxOk, hubIEEE8023LmeOptions=hubIEEE8023LmeOptions, bridgeNumPorts=bridgeNumPorts, bridgeDot1dTpPort=bridgeDot1dTpPort, gPortAlignmentErrors=gPortAlignmentErrors, gCardName=gCardName, hubResetTimeStamp=hubResetTimeStamp, brProtPriorityName=brProtPriorityName, bridgeManID=bridgeManID, bridgeStpPortTable=bridgeStpPortTable, gPortThresholdExceeded=gPortThresholdExceeded, hubEEpromRev=hubEEpromRev, gPortRedundantPort=gPortRedundantPort, wanTxLinkUtilization=wanTxLinkUtilization, ieeeMacSubLayerStatus=ieeeMacSubLayerStatus, gandalf_products=gandalf_products, ganEventLogDate=ganEventLogDate, ieeeFrmsRxOk=ieeeFrmsRxOk, ganEventLogTime=ganEventLogTime, snmpTrapDescription=snmpTrapDescription, snmpTrapCommunityIndex=snmpTrapCommunityIndex, ieeeIrLengthErrors=ieeeIrLengthErrors, bridgeDot1dStpHoldTime=bridgeDot1dStpHoldTime, bridgeSerialNum=bridgeSerialNum, hmPerfMonPortEntry=hmPerfMonPortEntry, relayPerfID=relayPerfID, wanPhysicalObject=wanPhysicalObject, brProtPriorityIndex=brProtPriorityIndex, bridgeLogicalPortTable=bridgeLogicalPortTable, gtsplus=gtsplus, bridgeDot1dTpPortOutFrames=bridgeDot1dTpPortOutFrames, gPortEffectiveState=gPortEffectiveState, ieeeExcessColls=ieeeExcessColls, ieeeInitMac=ieeeInitMac, gCardRemoved=gCardRemoved, gPortReadableOctets=gPortReadableOctets, gPortAddrID=gPortAddrID, lanline5220e=lanline5220e, gCardAddrID=gCardAddrID, bridgeDot1dTpFdbAddress=bridgeDot1dTpFdbAddress, bridgeDot1dStpTopChanges=bridgeDot1dStpTopChanges, hubHealthState=hubHealthState, bridgeProtFiltEntry=bridgeProtFiltEntry, bridgeStpObject=bridgeStpObject, bridgeDot1dStpPortState=bridgeDot1dStpPortState, ieeeTooLongErrors=ieeeTooLongErrors, brProtFiltId=brProtFiltId, gandalf_wanProxy=gandalf_wanProxy, bridgeStpPortEntry=bridgeStpPortEntry, hubManTelephoneNum=hubManTelephoneNum, filterDatabaseSize=filterDatabaseSize, bridgeDot1dStpPortDesignatedBridge=bridgeDot1dStpPortDesignatedBridge, gandalf_termserver=gandalf_termserver, hubResourceType=hubResourceType, gCardRingSpeedB=gCardRingSpeedB, gNvramFault=gNvramFault, bridgeDot1dStaticAllowedToGoTo=bridgeDot1dStaticAllowedToGoTo, hubSystemResetting=hubSystemResetting, lanline5242er=lanline5242er, ieeeTxStatus=ieeeTxStatus, gLinkMismatchCleared=gLinkMismatchCleared, gPortMulticastFrames=gPortMulticastFrames, hmPerfMonRelayTable=hmPerfMonRelayTable, protocolFilterState=protocolFilterState, bridgeDot1dStpBridgeMaxAge=bridgeDot1dStpBridgeMaxAge, ieeeFrmsTxOk=ieeeFrmsTxOk, wanPhysPortName=wanPhysPortName, ganEventLogDescription=ganEventLogDescription, hmBasicCardEntry=hmBasicCardEntry, hubManID=hubManID, snmpCommunityPriv=snmpCommunityPriv, gPortLateCollisions=gPortLateCollisions, gPortLinkStatus=gPortLinkStatus, numberOfStaticEntries=numberOfStaticEntries, hmPerfMonRelayEntry=hmPerfMonRelayEntry, bridgeDot1dStpForwardDelay=bridgeDot1dStpForwardDelay, ieeeDefTx=ieeeDefTx, gPowerSupplyFailed=gPowerSupplyFailed, lanline5225i=lanline5225i, bridgeDot1dStpPortPriority=bridgeDot1dStpPortPriority, wanPhysLogicalPort=wanPhysLogicalPort, bridgeTpObject=bridgeTpObject, bridgeDot1dStpMaxAge=bridgeDot1dStpMaxAge, wanRxLinkUtilization=wanRxLinkUtilization, gPortFramesTooLong=gPortFramesTooLong, gPortType=gPortType)
mibBuilder.exportSymbols("GANDALF-ENTERPRISE-MIB", hmBasicCapability=hmBasicCapability, bridgeDot1dStpHelloTime=bridgeDot1dStpHelloTime, gCardType=gCardType, gandalf_nms=gandalf_nms, gPortRunts=gPortRunts, rsc9000=rsc9000, ieeeLateColls=ieeeLateColls, gPortAutoPartitionState=gPortAutoPartitionState, bridgeHubChassis=bridgeHubChassis, gandalf_generic=gandalf_generic, bridgeTpFdbTable=bridgeTpFdbTable, bridgeStaticEntry=bridgeStaticEntry, wanPhysFrameErrors=wanPhysFrameErrors, gPortPerfID=gPortPerfID, numberOfDynamicEntries=numberOfDynamicEntries, xbr6202=xbr6202, bridgeDot1dStpPriority=bridgeDot1dStpPriority, bridgePowerUpStatus=bridgePowerUpStatus, hubTimeSinceReset=hubTimeSinceReset, g2300=g2300, snmpTrapCommunityEntry=snmpTrapCommunityEntry, hmBasicCardTable=hmBasicCardTable, hubBasicID=hubBasicID, bridgeDot1dStpBridgeForwardDelay=bridgeDot1dStpBridgeForwardDelay, bridgeConfigObject=bridgeConfigObject, ieeeIntlMacTxError=ieeeIntlMacTxError, ieeePromRxStatus=ieeePromRxStatus, bridgeLogicalPortEntry=bridgeLogicalPortEntry, hubSecureMode=hubSecureMode, bridgeDot1dStpPortEnable=bridgeDot1dStpPortEnable, gPortRedundantCard=gPortRedundantCard, gPortAdminState=gPortAdminState, snmpCommunityTable=snmpCommunityTable)
