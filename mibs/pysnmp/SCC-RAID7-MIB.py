#
# PySNMP MIB module SCC-RAID7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCC-RAID7-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
raid7mib, = mibBuilder.importSymbols("SCC-ENTERPRISE-MIB", "raid7mib")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, NotificationType, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, IpAddress, iso, ObjectIdentity, TimeTicks, Bits, Gauge32, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "IpAddress", "iso", "ObjectIdentity", "TimeTicks", "Bits", "Gauge32", "Unsigned32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
raid7Sys = MibIdentifier((1, 3, 6, 1, 4, 1, 1386, 2, 1, 1))
raid7Memory = MibIdentifier((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2))
raid7Host = MibIdentifier((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3))
raid7Drive = MibIdentifier((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4))
raid7Env = MibIdentifier((1, 3, 6, 1, 4, 1, 1386, 2, 1, 5))
raid7SysVersion = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7SysVersion.setStatus('mandatory')
raid7TotalMem = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7TotalMem.setStatus('mandatory')
raid7GoodMem = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7GoodMem.setStatus('mandatory')
raid7MemAvail = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7MemAvail.setStatus('mandatory')
raid7CacheHitPercent = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7CacheHitPercent.setStatus('mandatory')
raid7BlockTable = MibTable((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2, 5), )
if mibBuilder.loadTexts: raid7BlockTable.setStatus('mandatory')
raid7BlockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2, 5, 1), ).setIndexNames((0, "SCC-RAID7-MIB", "raid7BlockSize"))
if mibBuilder.loadTexts: raid7BlockEntry.setStatus('mandatory')
raid7BlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7BlockSize.setStatus('mandatory')
raid7NumBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7NumBlocks.setStatus('mandatory')
raid7NumHostChannels = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7NumHostChannels.setStatus('mandatory')
raid7ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 2), )
if mibBuilder.loadTexts: raid7ChannelTable.setStatus('mandatory')
raid7ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 2, 1), ).setIndexNames((0, "SCC-RAID7-MIB", "raid7ChannelNumber"))
if mibBuilder.loadTexts: raid7ChannelEntry.setStatus('mandatory')
raid7ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7ChannelNumber.setStatus('mandatory')
raid7ChannelTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7ChannelTransferRate.setStatus('mandatory')
raid7ChannelTransactionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7ChannelTransactionRate.setStatus('mandatory')
raid7ChannelErrorMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7ChannelErrorMsgs.setStatus('mandatory')
raid7ChannelLastKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 11, 14))).clone(namedValues=NamedValues(("noSense", 0), ("recoveredError", 1), ("notReady", 2), ("mediumError", 3), ("hardwareError", 4), ("illegalRequest", 5), ("unitAttention", 6), ("abortedCommand", 11), ("miscompare", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7ChannelLastKey.setStatus('mandatory')
raid7ChannelLastSense = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 8, 12, 17, 23, 24, 26, 27, 28, 29, 32, 33, 34, 36, 37, 38, 41, 47, 49, 61, 64, 67, 68, 69, 70, 72, 73))).clone(namedValues=NamedValues(("noAddSense", 0), ("noIndexSectSignal", 1), ("noSeekComplete", 2), ("writeFault", 3), ("driveNotReady", 4), ("communicationFailure", 8), ("writeError", 12), ("readError", 17), ("retries", 23), ("retriesAndECC", 24), ("listLengthError", 26), ("syncError", 27), ("defectListNotFound", 28), ("verifyMiscompare", 29), ("invalidCommand", 32), ("invalidBlockAddress", 33), ("illegalFunction", 34), ("invalidFieldCDB", 36), ("invalidLUN", 37), ("invalidField", 38), ("resetCondition", 41), ("initClearQ", 47), ("mediaFormat", 49), ("invalidIdentify", 61), ("diagnosticFailure", 64), ("messageRejectError", 67), ("internalFailure", 68), ("selectFailure", 69), ("parityError", 70), ("initiatorDetectedError", 72), ("illegalMessage", 73)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7ChannelLastSense.setStatus('mandatory')
raid7NumDrives = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7NumDrives.setStatus('mandatory')
raid7NumDataDrives = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7NumDataDrives.setStatus('mandatory')
raid7NumParityDrives = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7NumParityDrives.setStatus('mandatory')
raid7NumStandbyDrives = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7NumStandbyDrives.setStatus('mandatory')
raid7NumFailedDrives = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7NumFailedDrives.setStatus('mandatory')
raid7DriveTable = MibTable((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6), )
if mibBuilder.loadTexts: raid7DriveTable.setStatus('mandatory')
raid7DriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6, 1), ).setIndexNames((0, "SCC-RAID7-MIB", "raid7DriveNumber"))
if mibBuilder.loadTexts: raid7DriveEntry.setStatus('mandatory')
raid7DriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7DriveNumber.setStatus('mandatory')
raid7DriveState = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("data", 1), ("parity", 2), ("standby", 3), ("rebuilding", 4), ("reformatting", 5), ("failed", 6), ("dataAndParity", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7DriveState.setStatus('mandatory')
raid7DriveActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7DriveActivity.setStatus('mandatory')
raid7DriveWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7DriveWrites.setStatus('mandatory')
raid7DriveReads = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7DriveReads.setStatus('mandatory')
raid7DriveTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7DriveTimeOuts.setStatus('mandatory')
raid7DriveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1386, 2, 1, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7DriveErrors.setStatus('mandatory')
raid7DriveUp = NotificationType((1, 3, 6, 1, 4, 1, 1386, 2, 1) + (0,1)).setObjects(("SCC-RAID7-MIB", "raid7DriveNumber"), ("SCC-RAID7-MIB", "raid7DriveState"))
raid7DriveDown = NotificationType((1, 3, 6, 1, 4, 1, 1386, 2, 1) + (0,2)).setObjects(("SCC-RAID7-MIB", "raid7DriveNumber"), ("SCC-RAID7-MIB", "raid7DriveState"))
raid7EnvironmentStatus = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7EnvironmentStatus.setStatus('mandatory')
raid7EnvironmentFailure = NotificationType((1, 3, 6, 1, 4, 1, 1386, 2, 1) + (0,3)).setObjects(("SCC-RAID7-MIB", "raid7EnvironmentStatus"))
mibBuilder.exportSymbols("SCC-RAID7-MIB", raid7BlockSize=raid7BlockSize, raid7DriveWrites=raid7DriveWrites, raid7DriveDown=raid7DriveDown, raid7DriveErrors=raid7DriveErrors, raid7EnvironmentStatus=raid7EnvironmentStatus, raid7Env=raid7Env, raid7NumDataDrives=raid7NumDataDrives, raid7DriveReads=raid7DriveReads, raid7DriveEntry=raid7DriveEntry, raid7ChannelTransactionRate=raid7ChannelTransactionRate, raid7ChannelTransferRate=raid7ChannelTransferRate, raid7ChannelLastKey=raid7ChannelLastKey, raid7ChannelTable=raid7ChannelTable, raid7Sys=raid7Sys, raid7ChannelEntry=raid7ChannelEntry, raid7SysVersion=raid7SysVersion, raid7NumFailedDrives=raid7NumFailedDrives, raid7DriveState=raid7DriveState, raid7DriveTable=raid7DriveTable, raid7DriveActivity=raid7DriveActivity, raid7BlockEntry=raid7BlockEntry, raid7DriveTimeOuts=raid7DriveTimeOuts, raid7GoodMem=raid7GoodMem, raid7NumParityDrives=raid7NumParityDrives, raid7DriveNumber=raid7DriveNumber, raid7NumHostChannels=raid7NumHostChannels, raid7EnvironmentFailure=raid7EnvironmentFailure, raid7TotalMem=raid7TotalMem, raid7MemAvail=raid7MemAvail, raid7BlockTable=raid7BlockTable, raid7CacheHitPercent=raid7CacheHitPercent, raid7NumStandbyDrives=raid7NumStandbyDrives, raid7Memory=raid7Memory, raid7Drive=raid7Drive, raid7ChannelLastSense=raid7ChannelLastSense, raid7DriveUp=raid7DriveUp, raid7ChannelErrorMsgs=raid7ChannelErrorMsgs, raid7Host=raid7Host, raid7NumBlocks=raid7NumBlocks, raid7ChannelNumber=raid7ChannelNumber, raid7NumDrives=raid7NumDrives)
