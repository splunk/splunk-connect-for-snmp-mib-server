#
# PySNMP MIB module CISCO-SWITCH-CEF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-CEF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:56:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Unsigned32, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Integer32, Counter32, NotificationType, ModuleIdentity, ObjectIdentity, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Integer32", "Counter32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoSwitchCefMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 790))
ciscoSwitchCefMIB.setRevisions(('2011-12-15 00:00',))
if mibBuilder.loadTexts: ciscoSwitchCefMIB.setLastUpdated('201112150000Z')
if mibBuilder.loadTexts: ciscoSwitchCefMIB.setOrganization('Cisco Systems, Inc.')
ciscoSwitchCefMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 0))
ciscoSwitchCefMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 1))
ciscoSwitchCefMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 2))
cscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1))
cscSwitchCefStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1), )
if mibBuilder.loadTexts: cscSwitchCefStatsTable.setStatus('current')
cscSwitchCefStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cscSwitchCefStatsEntry.setStatus('current')
cscIpv4NonVrfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv4NonVrfRoutes.setStatus('current')
cscIpv4VrfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv4VrfRoutes.setStatus('current')
cscIpv4MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv4MulticastRoutes.setStatus('current')
cscIpv4UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv4UnicastRoutes.setStatus('current')
cscIpv6GlobalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6GlobalRoutes.setStatus('current')
cscIpv6NonVrfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6NonVrfRoutes.setStatus('current')
cscIpv6VrfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6VrfRoutes.setStatus('current')
cscIpv6LinkLocalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6LinkLocalRoutes.setStatus('current')
cscIpv6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6MulticastRoutes.setStatus('current')
cscIpv6UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscIpv6UnicastRoutes.setStatus('current')
cscMplsRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscMplsRoutes.setStatus('current')
cscMplsVpnRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscMplsVpnRoutes.setStatus('current')
cscEomL2Routes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscEomL2Routes.setStatus('current')
cscEomIpv4MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscEomIpv4MulticastRoutes.setStatus('current')
cscEomIpv6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscEomIpv6MulticastRoutes.setStatus('current')
cscTotalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 790, 1, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscTotalRoutes.setStatus('current')
cscSwitchCefMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 1))
cscSwitchCefMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2))
cscSwitchCefMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 1, 1)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscSwitchCefIpv4StatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscSwitchCefIpv6StatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscTotalStatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscSwitchCefIpv6GlobalStatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscSwitchCefIpv6LinkLocalGroup"), ("CISCO-SWITCH-CEF-MIB", "cscSwitchCefEomL2Group"), ("CISCO-SWITCH-CEF-MIB", "cscMplsStatsGroup"), ("CISCO-SWITCH-CEF-MIB", "cscMplsStatsGroupExt"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefMIBCompliance = cscSwitchCefMIBCompliance.setStatus('current')
cscSwitchCefIpv4StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 1)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscIpv4NonVrfRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv4VrfRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv4MulticastRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv4UnicastRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefIpv4StatsGroup = cscSwitchCefIpv4StatsGroup.setStatus('current')
cscSwitchCefIpv6StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 2)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscIpv6NonVrfRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv6VrfRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv6MulticastRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscIpv6UnicastRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefIpv6StatsGroup = cscSwitchCefIpv6StatsGroup.setStatus('current')
cscSwitchCefIpv6GlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 3)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscIpv6GlobalRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefIpv6GlobalStatsGroup = cscSwitchCefIpv6GlobalStatsGroup.setStatus('current')
cscSwitchCefIpv6LinkLocalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 4)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscIpv6LinkLocalRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefIpv6LinkLocalGroup = cscSwitchCefIpv6LinkLocalGroup.setStatus('current')
cscSwitchCefEomL2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 5)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscEomL2Routes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscSwitchCefEomL2Group = cscSwitchCefEomL2Group.setStatus('current')
cscMplsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 6)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscMplsRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscMplsStatsGroup = cscMplsStatsGroup.setStatus('current')
cscMplsStatsGroupExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 7)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscMplsVpnRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscEomIpv4MulticastRoutes"), ("CISCO-SWITCH-CEF-MIB", "cscEomIpv6MulticastRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscMplsStatsGroupExt = cscMplsStatsGroupExt.setStatus('current')
cscTotalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 790, 2, 2, 8)).setObjects(("CISCO-SWITCH-CEF-MIB", "cscTotalRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscTotalStatsGroup = cscTotalStatsGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-SWITCH-CEF-MIB", cscIpv6UnicastRoutes=cscIpv6UnicastRoutes, cscEomIpv6MulticastRoutes=cscEomIpv6MulticastRoutes, cscIpv4UnicastRoutes=cscIpv4UnicastRoutes, cscTotalStatsGroup=cscTotalStatsGroup, cscSwitchCefMIBCompliances=cscSwitchCefMIBCompliances, cscTotalRoutes=cscTotalRoutes, cscSwitchCefMIBGroups=cscSwitchCefMIBGroups, ciscoSwitchCefMIBObjects=ciscoSwitchCefMIBObjects, cscSwitchCefStatsTable=cscSwitchCefStatsTable, cscIpv6VrfRoutes=cscIpv6VrfRoutes, cscMplsStatsGroupExt=cscMplsStatsGroupExt, cscSwitchCefMIBCompliance=cscSwitchCefMIBCompliance, cscSwitchCefIpv6GlobalStatsGroup=cscSwitchCefIpv6GlobalStatsGroup, cscIpv6MulticastRoutes=cscIpv6MulticastRoutes, cscIpv4MulticastRoutes=cscIpv4MulticastRoutes, cscEomIpv4MulticastRoutes=cscEomIpv4MulticastRoutes, ciscoSwitchCefMIB=ciscoSwitchCefMIB, cscStats=cscStats, cscIpv4VrfRoutes=cscIpv4VrfRoutes, cscMplsVpnRoutes=cscMplsVpnRoutes, cscEomL2Routes=cscEomL2Routes, cscIpv6GlobalRoutes=cscIpv6GlobalRoutes, ciscoSwitchCefMIBNotifs=ciscoSwitchCefMIBNotifs, cscIpv6LinkLocalRoutes=cscIpv6LinkLocalRoutes, PYSNMP_MODULE_ID=ciscoSwitchCefMIB, cscSwitchCefIpv6StatsGroup=cscSwitchCefIpv6StatsGroup, cscSwitchCefStatsEntry=cscSwitchCefStatsEntry, cscIpv4NonVrfRoutes=cscIpv4NonVrfRoutes, cscIpv6NonVrfRoutes=cscIpv6NonVrfRoutes, cscMplsStatsGroup=cscMplsStatsGroup, cscSwitchCefEomL2Group=cscSwitchCefEomL2Group, ciscoSwitchCefMIBConform=ciscoSwitchCefMIBConform, cscSwitchCefIpv4StatsGroup=cscSwitchCefIpv4StatsGroup, cscSwitchCefIpv6LinkLocalGroup=cscSwitchCefIpv6LinkLocalGroup, cscMplsRoutes=cscMplsRoutes)
