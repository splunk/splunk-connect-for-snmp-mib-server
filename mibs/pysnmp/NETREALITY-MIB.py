#
# PySNMP MIB module NETREALITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETREALITY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
DLCI, Index = mibBuilder.importSymbols("RFC1315-MIB", "DLCI", "Index")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, Counter32, Integer32, Counter64, NotificationType, ObjectIdentity, IpAddress, Bits, NotificationType, Gauge32, ModuleIdentity, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises", "Counter32", "Integer32", "Counter64", "NotificationType", "ObjectIdentity", "IpAddress", "Bits", "NotificationType", "Gauge32", "ModuleIdentity", "iso", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netreality = MibIdentifier((1, 3, 6, 1, 4, 1, 2382))
nrGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 1))
nrProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 2))
nrFr = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3))
nrInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 1))
nrFrame_relay = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 2)).setLabel("nrFrame-relay")
nrRmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 3))
nrNlMatrix = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1))
nrNlHost = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2))
nrBulk = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 4))
nrtCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1))
nrShortTermData = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2))
nrLongTermData = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3))
nrManagers = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 1, 1))
nrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 1, 2))
nrTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 1, 3))
nrTrapHostsTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 1, 1, 1), )
if mibBuilder.loadTexts: nrTrapHostsTable.setStatus('mandatory')
nrTrapHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 1, 1, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrTrapIPaddress"))
if mibBuilder.loadTexts: nrTrapHostsEntry.setStatus('mandatory')
nrTrapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 1, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrTrapIPaddress.setStatus('mandatory')
nrTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 1, 1, 1, 1, 2), Integer32().clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrTrapPort.setStatus('mandatory')
nrSysReset = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrSysReset.setStatus('mandatory')
nrSysSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("set", 2), ("in-process", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrSysSetDefaults.setStatus('mandatory')
nrSysTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrSysTrapCounter.setStatus('mandatory')
nrSysEventReset = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("reset", 2), ("in-process", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrSysEventReset.setStatus('mandatory')
nrSysSerial = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrSysSerial.setStatus('mandatory')
nrWanwise = MibIdentifier((1, 3, 6, 1, 4, 1, 2382, 2, 1))
nrIfTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1), )
if mibBuilder.loadTexts: nrIfTable.setStatus('mandatory')
nrIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrIfIndex"))
if mibBuilder.loadTexts: nrIfEntry.setStatus('mandatory')
nrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfIndex.setStatus('mandatory')
nrIfInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfInUtilization.setStatus('mandatory')
nrIfOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfOutUtilization.setStatus('mandatory')
nrIfInErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfInErrRatio.setStatus('mandatory')
nrIfOutErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfOutErrRatio.setStatus('mandatory')
nrIfPhysConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfPhysConnType.setStatus('mandatory')
nrIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("v35", 2), ("v35db", 3), ("eia530-rs449", 4), ("x21-x24", 5), ("rs232", 6), ("t1", 7), ("e1", 8), ("hssi", 9), ("frame-relay", 10), ("frame-relay-cisco", 11), ("ppp", 12), ("hdlc-cisco", 13), ("ppp-bay", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfType.setStatus('mandatory')
nrIfOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("monitor", 2), ("shaper", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfOperMode.setStatus('mandatory')
nrIfGroupNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrIfGroupNm.setStatus('mandatory')
nrFrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2), )
if mibBuilder.loadTexts: nrFrCircuitTable.setStatus('mandatory')
nrFrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrFrCircuitIfIndex"), (0, "NETREALITY-MIB", "nrFrCircuitDlci"))
if mibBuilder.loadTexts: nrFrCircuitEntry.setStatus('mandatory')
nrFrCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitIfIndex.setStatus('mandatory')
nrFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitDlci.setStatus('mandatory')
nrFrCircuitInCIRUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitInCIRUtilization.setStatus('mandatory')
nrFrCircuitOutCIRUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitOutCIRUtilization.setStatus('mandatory')
nrFrCircuitInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitInDiscard.setStatus('mandatory')
nrFrCircuitOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitOutDiscard.setStatus('mandatory')
nrFrCircuitEchoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrFrCircuitEchoAddress.setStatus('mandatory')
nrFrCircuitEchoProto = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("icmp", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrFrCircuitEchoProto.setStatus('mandatory')
nrFrCircuitEchoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrFrCircuitEchoStatus.setStatus('mandatory')
nrFrCircuitLastResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrFrCircuitLastResponseTime.setStatus('mandatory')
nrNlMatrixTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1), )
if mibBuilder.loadTexts: nrNlMatrixTable.setStatus('mandatory')
nrNlMatrixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrNlMatrixifNumber"), (0, "NETREALITY-MIB", "nrNlMatrixDlciNumber"), (0, "NETREALITY-MIB", "nrNlMatrixProtocol"), (0, "NETREALITY-MIB", "nrNlMatrixAddress1"), (0, "NETREALITY-MIB", "nrNlMatrixAddress2"))
if mibBuilder.loadTexts: nrNlMatrixEntry.setStatus('mandatory')
nrNlMatrixifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixifNumber.setStatus('mandatory')
nrNlMatrixDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixDlciNumber.setStatus('mandatory')
nrNlMatrixProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixProtocol.setStatus('mandatory')
nrNlMatrixAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixAddress1.setStatus('mandatory')
nrNlMatrixAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlMatrixAddress2.setStatus('mandatory')
nrNl1to2UfromCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNl1to2UfromCIR.setStatus('mandatory')
nrNlHostTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1), )
if mibBuilder.loadTexts: nrNlHostTable.setStatus('mandatory')
nrNlHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrNlHostifNumber"), (0, "NETREALITY-MIB", "nrNlHostDlciNumber"), (0, "NETREALITY-MIB", "nrNlMatrixProtocol"), (0, "NETREALITY-MIB", "nrNlHostAddress"))
if mibBuilder.loadTexts: nrNlHostEntry.setStatus('mandatory')
nrNlHostifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostifNumber.setStatus('mandatory')
nrNlHostDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostDlciNumber.setStatus('mandatory')
nrNlHostProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostProtocol.setStatus('mandatory')
nrNlHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostAddress.setStatus('mandatory')
nrNlHostUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrNlHostUtilization.setStatus('mandatory')
nrtCtrlLtermInterval = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 3600)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrtCtrlLtermInterval.setStatus('mandatory')
nrtCtrlLtermBucketsGrant = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlLtermBucketsGrant.setStatus('mandatory')
nrtCtrlLtermLast = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlLtermLast.setStatus('mandatory')
nrtCtrlLtermTime = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlLtermTime.setStatus('mandatory')
nrtCtrlStermInterval = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nrtCtrlStermInterval.setStatus('mandatory')
nrtCtrlStermBucketsGrant = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlStermBucketsGrant.setStatus('mandatory')
nrtCtrlStermLast = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlStermLast.setStatus('mandatory')
nrtCtrlStermTime = MibScalar((1, 3, 6, 1, 4, 1, 2382, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtCtrlStermTime.setStatus('mandatory')
nrShortTermDataTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1), )
if mibBuilder.loadTexts: nrShortTermDataTable.setStatus('mandatory')
nrShortTermDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrShortTermBucketIndex"), (0, "NETREALITY-MIB", "nrShortTermDataIndex"))
if mibBuilder.loadTexts: nrShortTermDataEntry.setStatus('mandatory')
nrShortTermBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrShortTermBucketIndex.setStatus('mandatory')
nrShortTermDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrShortTermDataIndex.setStatus('mandatory')
nrShortTermDataData = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrShortTermDataData.setStatus('mandatory')
nrLongTermDataTable = MibTable((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1), )
if mibBuilder.loadTexts: nrLongTermDataTable.setStatus('mandatory')
nrLongTermDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1, 1), ).setIndexNames((0, "NETREALITY-MIB", "nrLongTermBucketIndex"), (0, "NETREALITY-MIB", "nrLongTermDataIndex"))
if mibBuilder.loadTexts: nrLongTermDataEntry.setStatus('mandatory')
nrLongTermBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrLongTermBucketIndex.setStatus('mandatory')
nrLongTermDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrLongTermDataIndex.setStatus('mandatory')
nrLongTermDataData = MibTableColumn((1, 3, 6, 1, 4, 1, 2382, 3, 4, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrLongTermDataData.setStatus('mandatory')
nrTrapRSType = MibScalar((1, 3, 6, 1, 4, 1, 2382, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("memory", 1), ("ethernet", 2), ("wanadapter", 3), ("flash", 4), ("com1", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrTrapRSType.setStatus('mandatory')
nrShortResources = NotificationType((1, 3, 6, 1, 4, 1, 2382) + (0,1)).setObjects(("NETREALITY-MIB", "nrTrapRSType"))
nrDiagnosticFailure = NotificationType((1, 3, 6, 1, 4, 1, 2382) + (0,2)).setObjects(("NETREALITY-MIB", "nrTrapRSType"))
nrDLCIRemove = NotificationType((1, 3, 6, 1, 4, 1, 2382) + (0,3)).setObjects(("NETREALITY-MIB", "nrFrCircuitIfIndex"), ("NETREALITY-MIB", "nrFrCircuitDlci"))
mibBuilder.exportSymbols("NETREALITY-MIB", nrIfOutUtilization=nrIfOutUtilization, nrtCtrlLtermBucketsGrant=nrtCtrlLtermBucketsGrant, nrFrCircuitInCIRUtilization=nrFrCircuitInCIRUtilization, nrIfGroupNm=nrIfGroupNm, nrNlMatrixTable=nrNlMatrixTable, nrtCtrlStermBucketsGrant=nrtCtrlStermBucketsGrant, nrtCtrlStermLast=nrtCtrlStermLast, nrNlHostTable=nrNlHostTable, nrFrCircuitIfIndex=nrFrCircuitIfIndex, nrTrapPort=nrTrapPort, nrtCtrlStermInterval=nrtCtrlStermInterval, nrIfEntry=nrIfEntry, nrIfOperMode=nrIfOperMode, nrLongTermData=nrLongTermData, nrShortTermBucketIndex=nrShortTermBucketIndex, nrSysSetDefaults=nrSysSetDefaults, nrShortTermDataIndex=nrShortTermDataIndex, nrTrapInfo=nrTrapInfo, nrNlHostProtocol=nrNlHostProtocol, nrNlMatrixAddress2=nrNlMatrixAddress2, nrBulk=nrBulk, nrFrCircuitEchoProto=nrFrCircuitEchoProto, nrShortTermDataEntry=nrShortTermDataEntry, nrSysSerial=nrSysSerial, nrNlMatrixProtocol=nrNlMatrixProtocol, nrNlHostAddress=nrNlHostAddress, nrtCtrl=nrtCtrl, nrNlHostUtilization=nrNlHostUtilization, nrNlMatrixDlciNumber=nrNlMatrixDlciNumber, nrNlHostDlciNumber=nrNlHostDlciNumber, nrTrapHostsTable=nrTrapHostsTable, nrtCtrlStermTime=nrtCtrlStermTime, nrManagers=nrManagers, nrWanwise=nrWanwise, nrIfInUtilization=nrIfInUtilization, nrRmon=nrRmon, nrNlMatrix=nrNlMatrix, nrLongTermDataIndex=nrLongTermDataIndex, nrFrame_relay=nrFrame_relay, nrFr=nrFr, nrNl1to2UfromCIR=nrNl1to2UfromCIR, nrtCtrlLtermInterval=nrtCtrlLtermInterval, nrNlHost=nrNlHost, nrIfTable=nrIfTable, nrFrCircuitLastResponseTime=nrFrCircuitLastResponseTime, nrDLCIRemove=nrDLCIRemove, nrNlMatrixAddress1=nrNlMatrixAddress1, netreality=netreality, nrFrCircuitEchoAddress=nrFrCircuitEchoAddress, nrNlHostifNumber=nrNlHostifNumber, nrShortTermData=nrShortTermData, nrShortResources=nrShortResources, nrTrapIPaddress=nrTrapIPaddress, nrLongTermBucketIndex=nrLongTermBucketIndex, nrLongTermDataData=nrLongTermDataData, nrIfInErrRatio=nrIfInErrRatio, nrFrCircuitEchoStatus=nrFrCircuitEchoStatus, nrTrapHostsEntry=nrTrapHostsEntry, nrtCtrlLtermLast=nrtCtrlLtermLast, nrSystem=nrSystem, nrSysEventReset=nrSysEventReset, nrIfIndex=nrIfIndex, nrSysTrapCounter=nrSysTrapCounter, nrIfPhysConnType=nrIfPhysConnType, nrNlMatrixEntry=nrNlMatrixEntry, nrTrapRSType=nrTrapRSType, nrFrCircuitOutCIRUtilization=nrFrCircuitOutCIRUtilization, nrProducts=nrProducts, nrLongTermDataTable=nrLongTermDataTable, nrIfType=nrIfType, nrFrCircuitDlci=nrFrCircuitDlci, nrFrCircuitEntry=nrFrCircuitEntry, nrFrCircuitOutDiscard=nrFrCircuitOutDiscard, nrIfOutErrRatio=nrIfOutErrRatio, nrLongTermDataEntry=nrLongTermDataEntry, nrNlHostEntry=nrNlHostEntry, nrtCtrlLtermTime=nrtCtrlLtermTime, nrFrCircuitTable=nrFrCircuitTable, nrSysReset=nrSysReset, nrShortTermDataData=nrShortTermDataData, nrFrCircuitInDiscard=nrFrCircuitInDiscard, nrNlMatrixifNumber=nrNlMatrixifNumber, nrGeneral=nrGeneral, nrShortTermDataTable=nrShortTermDataTable, nrDiagnosticFailure=nrDiagnosticFailure, nrInterface=nrInterface)
