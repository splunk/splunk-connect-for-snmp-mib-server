#
# PySNMP MIB module ANNEX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANNEX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:06:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, enterprises, Bits, ModuleIdentity, Integer32, Gauge32, MibIdentifier, NotificationType, Counter64, Counter32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "enterprises", "Bits", "ModuleIdentity", "Integer32", "Gauge32", "MibIdentifier", "NotificationType", "Counter64", "Counter32", "ObjectIdentity", "iso")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
xylogics = MibIdentifier((1, 3, 6, 1, 4, 1, 15))
prod = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1))
prodannex = MibScalar((1, 3, 6, 1, 4, 1, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodannex.setStatus('mandatory')
annex = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2))
hw = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 1))
sw = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 2))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 3))
parallelport = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 4))
annexconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 5))
annexcmds = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 6))
hwType = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 42, 52, 55))).clone(namedValues=NamedValues(("err", 1), ("annexII", 16), ("annex3", 42), ("microannex", 52), ("microels", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwType.setStatus('mandatory')
hwRev = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRev.setStatus('mandatory')
romRev = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: romRev.setStatus('mandatory')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
memorySize = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySize.setStatus('mandatory')
swType = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 17, 42, 43, 52, 53, 55))).clone(namedValues=NamedValues(("err", 1), ("annexIImx", 16), ("annexIIux", 17), ("annex3ux", 42), ("annex3mx", 43), ("microannexux", 52), ("microannexmx", 53), ("microels", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swType.setStatus('mandatory')
swRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRevMajor.setStatus('mandatory')
swRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRevMinor.setStatus('mandatory')
swBuild = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBuild.setStatus('mandatory')
imageName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageName.setStatus('mandatory')
bootHost = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootHost.setStatus('mandatory')
defaultDomain = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultDomain.setStatus('mandatory')
currentDate = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDate.setStatus('mandatory')
usableMemory = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usableMemory.setStatus('mandatory')
freeMemory = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemory.setStatus('mandatory')
minFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minFreeMemory.setStatus('mandatory')
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('mandatory')
maxProcs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxProcs.setStatus('mandatory')
mostProcs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mostProcs.setStatus('mandatory')
activeProcs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeProcs.setStatus('mandatory')
cpuIRescheds = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIRescheds.setStatus('mandatory')
cpuTRescheds = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTRescheds.setStatus('mandatory')
contextISwtchs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextISwtchs.setStatus('mandatory')
contextTSwtchs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextTSwtchs.setStatus('mandatory')
cpuIActivates = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIActivates.setStatus('mandatory')
cpuTActivates = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTActivates.setStatus('mandatory')
maxCallouts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCallouts.setStatus('mandatory')
leastCallouts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leastCallouts.setStatus('mandatory')
freeCallouts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeCallouts.setStatus('mandatory')
totalPorts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPorts.setStatus('mandatory')
totalInChars = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalInChars.setStatus('mandatory')
totalOutChars = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOutChars.setStatus('mandatory')
totalParityErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalParityErrs.setStatus('mandatory')
totalOverrunErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOverrunErrs.setStatus('mandatory')
totalFramingErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFramingErrs.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 3, 7), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1), ).setIndexNames((0, "ANNEX-MIB", "anxpPortIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
anxpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpPortIndex.setStatus('mandatory')
anxpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cli", 1), ("slave", 2), ("adaptive", 3), ("unused", 4), ("slip", 5), ("dedicated", 6), ("ppp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMode.setStatus('mandatory')
anxpCtrlLines = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("dcddtr", 2), ("ctsrts", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCtrlLines.setStatus('mandatory')
anxpBidirModem = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBidirModem.setStatus('mandatory')
anxpAllowBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAllowBcast.setStatus('mandatory')
anxpBcastDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBcastDirection.setStatus('mandatory')
anxpInputStartChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputStartChar.setStatus('mandatory')
anxpInputStopChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputStopChar.setStatus('mandatory')
anxpOutputStartChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputStartChar.setStatus('mandatory')
anxpOutputStopChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputStopChar.setStatus('mandatory')
anxpIxanyFlowCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpIxanyFlowCtl.setStatus('mandatory')
anxpLongBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLongBreak.setStatus('mandatory')
anxpShortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpShortBreak.setStatus('mandatory')
anxpForwardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpForwardTimer.setStatus('mandatory')
anxpForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpForwardCount.setStatus('mandatory')
anxpImask7Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpImask7Bits.setStatus('mandatory')
anxpAttnChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAttnChar.setStatus('mandatory')
anxpInputBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputBufSize.setStatus('mandatory')
anxpInputIsActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputIsActivity.setStatus('mandatory')
anxpOutputIsActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputIsActivity.setStatus('mandatory')
anxpInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInactivityTimer.setStatus('mandatory')
anxpResetIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpResetIdleTimer.setStatus('mandatory')
anxpCliInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliInactivity.setStatus('mandatory')
anxpCliSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliSecurity.setStatus('mandatory')
anxpConnectSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpConnectSecurity.setStatus('mandatory')
anxpPortServerSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPortServerSecurity.setStatus('mandatory')
anxpPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPortPassword.setStatus('mandatory')
anxpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpUserName.setStatus('mandatory')
anxpDedicatedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDedicatedAddr.setStatus('mandatory')
anxpDedicatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDedicatedPort.setStatus('mandatory')
anxpPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPrompt.setStatus('mandatory')
anxpTermVar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTermVar.setStatus('mandatory')
anxpNewLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNewLineTerm.setStatus('mandatory')
anxpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEcho.setStatus('mandatory')
anxpMapToLower = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMapToLower.setStatus('mandatory')
anxpMapToUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMapToUpper.setStatus('mandatory')
anxpHardwareTabs = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpHardwareTabs.setStatus('mandatory')
anxpCharErase = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCharErase.setStatus('mandatory')
anxpLineErase = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLineErase.setStatus('mandatory')
anxpEraseChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseChar.setStatus('mandatory')
anxpEraseWord = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseWord.setStatus('mandatory')
anxpEraseLine = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseLine.setStatus('mandatory')
anxpRedisplayLine = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpRedisplayLine.setStatus('mandatory')
anxpToggleOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpToggleOutput.setStatus('mandatory')
anxpTelnetEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTelnetEscape.setStatus('mandatory')
anxpNeedDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNeedDsr.setStatus('mandatory')
anxpTelnetCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTelnetCRLF.setStatus('mandatory')
anxpLatbEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpLatbEnable.setStatus('mandatory')
anxpSlipSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpSlipSecure.setStatus('mandatory')
anxpNetLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetLocalAddr.setStatus('mandatory')
anxpNetRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 51), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetRemoteAddr.setStatus('mandatory')
anxpSlipSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 52), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipSubnetMask.setStatus('mandatory')
anxpSlipLoadDumpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 53), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipLoadDumpHost.setStatus('mandatory')
anxpNetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetMetric.setStatus('mandatory')
anxpSlipAllowDump = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipAllowDump.setStatus('mandatory')
anxpSlipDoCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipDoCompression.setStatus('mandatory')
anxpSlipAllowCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipAllowCompression.setStatus('mandatory')
anxpSlipMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("large", 1), ("small", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipMtuSize.setStatus('mandatory')
anxpSlipNoIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipNoIcmp.setStatus('mandatory')
anxpSlipTos = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipTos.setStatus('mandatory')
anxpPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppMru.setStatus('mandatory')
anxpPppAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppAcm.setStatus('mandatory')
anxpPppSecurityProto = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppSecurityProto.setStatus('mandatory')
anxpPppUserRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppUserRemote.setStatus('mandatory')
anxpPppPasswdRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppPasswdRemote.setStatus('mandatory')
anxpLatAuthGroupVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLatAuthGroupVal.setStatus('mandatory')
anxpPppDialupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppDialupAddr.setStatus('mandatory')
anxpBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBanner.setStatus('mandatory')
anxpPsHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPsHistory.setStatus('mandatory')
anxpLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLocation.setStatus('mandatory')
anxpType = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dialin", 1), ("hardwired", 2), ("terminal", 3), ("modem", 4), ("printer", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpType.setStatus('mandatory')
anxpCliImask7 = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliImask7.setStatus('mandatory')
anxpParaPorts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpParaPorts.setStatus('mandatory')
anxpParaPortTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 4, 2), )
if mibBuilder.loadTexts: anxpParaPortTable.setStatus('mandatory')
anxpParaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1), ).setIndexNames((0, "ANNEX-MIB", "anxpParaPortIndex"))
if mibBuilder.loadTexts: anxpParaPortEntry.setStatus('mandatory')
anxpParaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpParaPortIndex.setStatus('mandatory')
anxpParaPortHardwareTabs = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortHardwareTabs.setStatus('mandatory')
anxpParaPortMapToUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortMapToUpper.setStatus('mandatory')
anxpParaPortPrinterWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 132))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortPrinterWidth.setStatus('mandatory')
anxpParaPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centronics", 1), ("dataproducts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortInterface.setStatus('mandatory')
anxpParaPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high-speed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortSpeed.setStatus('mandatory')
anxInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxInetAddr.setStatus('mandatory')
anxPrefLoadAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxPrefLoadAddr.setStatus('mandatory')
anxPrefDumpAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxPrefDumpAddr.setStatus('mandatory')
anxLoadDumpGateway = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLoadDumpGateway.setStatus('mandatory')
anxLoadDumpSeq = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLoadDumpSeq.setStatus('mandatory')
anxLoadBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLoadBcast.setStatus('mandatory')
anxServerCap = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxServerCap.setStatus('mandatory')
anxTimeBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTimeBcast.setStatus('mandatory')
anxBcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxBcastAddr.setStatus('mandatory')
anxSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSubnetMask.setStatus('mandatory')
anxAuthAgent = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxAuthAgent.setStatus('mandatory')
anxMaxVcli = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxMaxVcli.setStatus('mandatory')
anxIpEncapType = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee802", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxIpEncapType.setStatus('mandatory')
anxNameServer1Type = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ien116", 2), ("dns", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServer1Type.setStatus('mandatory')
anxNameServer1Addr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServer1Addr.setStatus('mandatory')
anxNameServer2Type = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ien116", 2), ("dns", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServer2Type.setStatus('mandatory')
anxNameServer2Addr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServer2Addr.setStatus('mandatory')
anxNameServerBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServerBcast.setStatus('mandatory')
anxRwhod = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxRwhod.setStatus('mandatory')
anxMinUniqueHostNames = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxMinUniqueHostNames.setStatus('mandatory')
anxHostTableSize = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 251))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxHostTableSize.setStatus('mandatory')
anxRouted = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxRouted.setStatus('mandatory')
anxEnableSecurity = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxEnableSecurity.setStatus('mandatory')
anxPassword = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxPassword.setStatus('mandatory')
anxSecurServer1Addr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSecurServer1Addr.setStatus('mandatory')
anxSecurServer2Addr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSecurServer2Addr.setStatus('mandatory')
anxNetTurnAround = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNetTurnAround.setStatus('mandatory')
anxSecurBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSecurBcast.setStatus('mandatory')
anxVcliSecurity = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxVcliSecurity.setStatus('mandatory')
anxVcliPassword = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxVcliPassword.setStatus('mandatory')
anxAcpKey = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxAcpKey.setStatus('mandatory')
anxSysLogMask = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSysLogMask.setStatus('mandatory')
anxSysLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("loglocal0", 17), ("loglocal1", 18), ("loglocal2", 19), ("loglocal3", 20), ("loglocal4", 21), ("loglocal5", 22), ("loglocal6", 23), ("loglocal7", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSysLogFacility.setStatus('mandatory')
anxSysLogHost = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSysLogHost.setStatus('mandatory')
anxCliPrompt = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxCliPrompt.setStatus('mandatory')
anxMotdFile = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxMotdFile.setStatus('mandatory')
anxTftpDirName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTftpDirName.setStatus('mandatory')
anxTftpDumpName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTftpDumpName.setStatus('mandatory')
anxTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTimeZone.setStatus('mandatory')
anxDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("us", 1), ("australian", 2), ("westeuropean", 3), ("mideuropean", 4), ("easteuropean", 5), ("canadian", 6), ("british", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxDaylightSavings.setStatus('mandatory')
anxLatKey = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatKey.setStatus('mandatory')
anxCircuitTimer = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxCircuitTimer.setStatus('mandatory')
anxFacilityNum = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxFacilityNum.setStatus('mandatory')
anxLatGroupVal = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatGroupVal.setStatus('mandatory')
anxKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxKeepAliveTimer.setStatus('mandatory')
anxReXmitLimit = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxReXmitLimit.setStatus('mandatory')
anxServerName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxServerName.setStatus('mandatory')
anxServiceLimit = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxServiceLimit.setStatus('mandatory')
anxConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxConfigFile.setStatus('mandatory')
anxLatVcliGroupVal = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatVcliGroupVal.setStatus('mandatory')
anxLatQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatQueueMax.setStatus('mandatory')
anxLatLocation = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatLocation.setStatus('mandatory')
anxDisabledModules = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxDisabledModules.setStatus('mandatory')
anxSysLogPort = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSysLogPort.setStatus('mandatory')
anxcBoot = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediate", 1), ("delayed", 2), ("dumpboot", 3), ("diagnosticboot", 4), ("abortschedule", 5), ("quiet", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBoot.setStatus('mandatory')
anxcBootImage = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBootImage.setStatus('mandatory')
anxcBootTime = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBootTime.setStatus('mandatory')
anxcBootMsg = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBootMsg.setStatus('mandatory')
anxcReset = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("all", 1), ("macros", 2), ("motd", 3), ("nameserver", 4), ("security", 5), ("printerport", 6), ("serialports", 7), ("virtualports", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcReset.setStatus('mandatory')
anxcBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("serial", 2), ("virtual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBcast.setStatus('mandatory')
anxcBcastMsg = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBcastMsg.setStatus('mandatory')
mibBuilder.exportSymbols("ANNEX-MIB", anxpNetMetric=anxpNetMetric, anxpPppSecurityProto=anxpPppSecurityProto, anxServerCap=anxServerCap, anxpCliSecurity=anxpCliSecurity, anxBcastAddr=anxBcastAddr, anxpPppUserRemote=anxpPppUserRemote, anxAcpKey=anxAcpKey, anxpMode=anxpMode, anxpResetIdleTimer=anxpResetIdleTimer, anxpInputBufSize=anxpInputBufSize, anxpLineErase=anxpLineErase, xylogics=xylogics, anxpPppPasswdRemote=anxpPppPasswdRemote, anxpCliImask7=anxpCliImask7, anxInetAddr=anxInetAddr, usableMemory=usableMemory, totalOverrunErrs=totalOverrunErrs, anxpHardwareTabs=anxpHardwareTabs, anxHostTableSize=anxHostTableSize, anxpOutputIsActivity=anxpOutputIsActivity, defaultDomain=defaultDomain, anxDisabledModules=anxDisabledModules, anxcReset=anxcReset, anxpEraseChar=anxpEraseChar, anxSysLogFacility=anxSysLogFacility, anxpSlipSecure=anxpSlipSecure, anxpPsHistory=anxpPsHistory, anxPrefLoadAddr=anxPrefLoadAddr, swType=swType, anxcBootImage=anxcBootImage, anxpParaPortInterface=anxpParaPortInterface, prodannex=prodannex, anxSecurServer2Addr=anxSecurServer2Addr, anxTimeBcast=anxTimeBcast, anxcBoot=anxcBoot, anxMotdFile=anxMotdFile, anxpNeedDsr=anxpNeedDsr, anxpParaPortPrinterWidth=anxpParaPortPrinterWidth, anxpAttnChar=anxpAttnChar, anxSysLogHost=anxSysLogHost, anxNameServerBcast=anxNameServerBcast, anxRwhod=anxRwhod, anxMaxVcli=anxMaxVcli, anxSubnetMask=anxSubnetMask, totalPorts=totalPorts, anxpLatAuthGroupVal=anxpLatAuthGroupVal, anxConfigFile=anxConfigFile, anxDaylightSavings=anxDaylightSavings, anxpMapToUpper=anxpMapToUpper, anxpTermVar=anxpTermVar, anxpNetLocalAddr=anxpNetLocalAddr, anxTftpDumpName=anxTftpDumpName, anxpNetRemoteAddr=anxpNetRemoteAddr, anxCircuitTimer=anxCircuitTimer, anxpCtrlLines=anxpCtrlLines, swRevMajor=swRevMajor, currentDate=currentDate, anxLatVcliGroupVal=anxLatVcliGroupVal, anxMinUniqueHostNames=anxMinUniqueHostNames, cpuTActivates=cpuTActivates, totalOutChars=totalOutChars, anxpParaPortMapToUpper=anxpParaPortMapToUpper, anxSecurServer1Addr=anxSecurServer1Addr, anxcBcast=anxcBcast, anxLoadDumpGateway=anxLoadDumpGateway, anxNameServer2Type=anxNameServer2Type, contextTSwtchs=contextTSwtchs, anxNameServer2Addr=anxNameServer2Addr, mostProcs=mostProcs, swBuild=swBuild, totalParityErrs=totalParityErrs, anxpConnectSecurity=anxpConnectSecurity, anxpMapToLower=anxpMapToLower, memorySize=memorySize, anxpParaPortEntry=anxpParaPortEntry, anxpSlipAllowDump=anxpSlipAllowDump, anxpEraseLine=anxpEraseLine, anxpDedicatedPort=anxpDedicatedPort, anxLatGroupVal=anxLatGroupVal, anxpBidirModem=anxpBidirModem, hwRev=hwRev, anxpBanner=anxpBanner, annex=annex, annexcmds=annexcmds, totalInChars=totalInChars, anxpSlipLoadDumpHost=anxpSlipLoadDumpHost, anxpSlipMtuSize=anxpSlipMtuSize, anxpToggleOutput=anxpToggleOutput, anxpIxanyFlowCtl=anxpIxanyFlowCtl, anxKeepAliveTimer=anxKeepAliveTimer, anxpPppAcm=anxpPppAcm, anxpParaPortHardwareTabs=anxpParaPortHardwareTabs, anxcBootTime=anxcBootTime, anxpLatbEnable=anxpLatbEnable, portEntry=portEntry, anxSecurBcast=anxSecurBcast, anxpInputIsActivity=anxpInputIsActivity, anxLatQueueMax=anxLatQueueMax, imageName=imageName, anxpEcho=anxpEcho, anxpPppDialupAddr=anxpPppDialupAddr, prod=prod, anxpAllowBcast=anxpAllowBcast, anxTimeZone=anxTimeZone, freeMemory=freeMemory, anxpSlipAllowCompression=anxpSlipAllowCompression, anxpDedicatedAddr=anxpDedicatedAddr, anxpCharErase=anxpCharErase, anxpParaPorts=anxpParaPorts, anxEnableSecurity=anxEnableSecurity, anxLoadBcast=anxLoadBcast, anxLoadDumpSeq=anxLoadDumpSeq, parallelport=parallelport, activeProcs=activeProcs, maxProcs=maxProcs, anxpLongBreak=anxpLongBreak, anxpRedisplayLine=anxpRedisplayLine, anxpPppMru=anxpPppMru, anxLatLocation=anxLatLocation, minFreeMemory=minFreeMemory, annexconfig=annexconfig, anxAuthAgent=anxAuthAgent, anxpSlipNoIcmp=anxpSlipNoIcmp, serialNumber=serialNumber, anxFacilityNum=anxFacilityNum, anxpShortBreak=anxpShortBreak, anxPrefDumpAddr=anxPrefDumpAddr, anxReXmitLimit=anxReXmitLimit, anxRouted=anxRouted, anxIpEncapType=anxIpEncapType, anxpTelnetEscape=anxpTelnetEscape, freeCallouts=freeCallouts, anxServerName=anxServerName, anxNameServer1Type=anxNameServer1Type, anxServiceLimit=anxServiceLimit, anxSysLogPort=anxSysLogPort, anxpImask7Bits=anxpImask7Bits, anxcBootMsg=anxcBootMsg, bootHost=bootHost, anxpTelnetCRLF=anxpTelnetCRLF, anxTftpDirName=anxTftpDirName, totalFramingErrs=totalFramingErrs, anxpNewLineTerm=anxpNewLineTerm, anxpSlipSubnetMask=anxpSlipSubnetMask, cpuIActivates=cpuIActivates, anxpEraseWord=anxpEraseWord, anxVcliPassword=anxVcliPassword, leastCallouts=leastCallouts, anxpInputStartChar=anxpInputStartChar, contextISwtchs=contextISwtchs, anxpOutputStartChar=anxpOutputStartChar, anxpSlipTos=anxpSlipTos, maxCallouts=maxCallouts, anxpParaPortSpeed=anxpParaPortSpeed, anxNetTurnAround=anxNetTurnAround, anxLatKey=anxLatKey, anxpType=anxpType, anxPassword=anxPassword, anxpBcastDirection=anxpBcastDirection, anxpInactivityTimer=anxpInactivityTimer, hwType=hwType, anxpParaPortIndex=anxpParaPortIndex, anxpForwardCount=anxpForwardCount, anxVcliSecurity=anxVcliSecurity, anxpForwardTimer=anxpForwardTimer, anxpCliInactivity=anxpCliInactivity, sw=sw, anxpPrompt=anxpPrompt, cpuTRescheds=cpuTRescheds, anxpLocation=anxpLocation, anxpPortIndex=anxpPortIndex, anxpOutputStopChar=anxpOutputStopChar, romRev=romRev, swRevMinor=swRevMinor, anxCliPrompt=anxCliPrompt, anxpSlipDoCompression=anxpSlipDoCompression, anxpUserName=anxpUserName, anxpParaPortTable=anxpParaPortTable, hw=hw, anxpInputStopChar=anxpInputStopChar, anxpPortPassword=anxpPortPassword, anxcBcastMsg=anxcBcastMsg, portTable=portTable, anxNameServer1Addr=anxNameServer1Addr, ports=ports, cpuIRescheds=cpuIRescheds, anxSysLogMask=anxSysLogMask, cpuUtilization=cpuUtilization, anxpPortServerSecurity=anxpPortServerSecurity)
