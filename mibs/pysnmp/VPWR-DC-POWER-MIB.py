#
# PySNMP MIB module VPWR-DC-POWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VPWR-DC-POWER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:28:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
ModuleIdentity, TimeTicks, ObjectIdentity, Integer32, Bits, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, iso, Gauge32, MibIdentifier, Unsigned32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Integer32", "Bits", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "iso", "Gauge32", "MibIdentifier", "Unsigned32", "enterprises")
TestAndIncr, TextualConvention, TimeStamp, TimeInterval, DisplayString, AutonomousType = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "TextualConvention", "TimeStamp", "TimeInterval", "DisplayString", "AutonomousType")
valereDcPowerMgt = ModuleIdentity((1, 3, 6, 1, 4, 1, 13858))
if mibBuilder.loadTexts: valereDcPowerMgt.setLastUpdated('0302080000Z')
if mibBuilder.loadTexts: valereDcPowerMgt.setOrganization('Valere Power Inc.')
class PositiveInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

vpwrDcPowerProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 1))
vpwrDcPowerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2))
vpwrDcPowerRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3))
vpwrDcPowerLvd = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4))
vpwrDcPowerTest = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 5))
vpwrDcPowerModuleIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 6))
vpwrDcPowerBatteryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7))
vpwrDcPowerAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 8))
vpwrDcPowerSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 9))
vpwrDcPowerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 10))
vpwrDcPowerTrapsMsgString = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 11))
vpwrSystemIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 1))
vpwrSystemConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 2))
vpwrSystemParameterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 3))
vpwrLvdConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 1))
vpwrLvdAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 2))
vpwrLvdTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 3))
vpwrRectifierConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 1))
vpwrRectifierAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 2))
vpwrRectifierTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 3))
vpwrBatteryTempGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 1))
vpwrIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentManufacturer.setStatus('current')
vpwrIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentModel.setStatus('current')
vpwrIdentControllerVersion = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentControllerVersion.setStatus('current')
vpwrIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentAgentSoftwareVersion.setStatus('current')
vpwrIdentName = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrIdentName.setStatus('current')
vpwrSystemIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6), )
if mibBuilder.loadTexts: vpwrSystemIdentTable.setStatus('current')
vpwrSystemIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "vpwrShelfIndex"), (0, "VPWR-DC-POWER-MIB", "vpwrModuleIndex"))
if mibBuilder.loadTexts: vpwrSystemIdentEntry.setStatus('current')
vpwrShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrShelfIndex.setStatus('current')
vpwrModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 2), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleIndex.setStatus('current')
vpwrModuleOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOID.setStatus('current')
vpwrModuleParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleParameter.setStatus('current')
vpwrModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("moduleStatusOK", 0), ("moduleStatusAlarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOperStatus.setStatus('current')
vpwrModuleCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleCapacity.setStatus('current')
vpwrSystemTempCompensation = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tempCompDisabled", 0), ("tempCompEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompensation.setStatus('current')
vpwrSystemTempCompStartTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 60))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompStartTemperature.setStatus('current')
vpwrSystemTempCompStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 3), Integer32()).setUnits(' vpwrSystemTempCompStopVoltage *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompStopVoltage.setStatus('current')
vpwrSystemTempCompensationSlope = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits(' milli-Volts per degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompensationSlope.setStatus('current')
vpwrSystemThermalSenseType = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemThermalSenseType.setStatus('current')
vpwrSystemHVAlarmSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 6), Integer32()).setUnits(' vpwrSystemHVAlarmSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemHVAlarmSetpoint.setStatus('current')
vpwrSystemBDAlarmSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 7), Integer32()).setUnits(' vpwrSystemBDAlarmSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemBDAlarmSetpoint.setStatus('current')
vpwrSystemInternalTempLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 8), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemInternalTempLThreshold.setStatus('current')
vpwrSystemInternalTempUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 9), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemInternalTempUThreshold.setStatus('current')
vpwrSystemShelfCapacity = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemShelfCapacity.setStatus('current')
vpwrSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 2), Integer32()).setUnits(' vpwrSystemVoltage *.01 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemVoltage.setStatus('current')
vpwrSystemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 3), Integer32()).setUnits(' Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemCurrent.setStatus('current')
vpwrSystemControllerState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("systemControllerStateUnknown", 0), ("systemControllerStateNormal", 1), ("systemControllerStateChange", 2), ("systemControllerStateAlarm", 3), ("systemControllerStateMenu", 4), ("systemControllerStateIrActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemControllerState.setStatus('current')
vpwrSystemInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemInternalTemperature.setStatus('current')
vpwrSystemTempCompensationState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("systemTempCompInactive", 0), ("systemTempCompActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemTempCompensationState.setStatus('current')
vpwrSystemType = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sysType48V", 0), ("sysType24V", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemType.setStatus('current')
vpwrLvdWarningSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 1), Integer32()).setUnits(' vpwrLvdWarningSetpoint * .01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdWarningSetpoint.setStatus('current')
vpwrLvdDisconnectSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 2), Integer32()).setUnits(' vpwrLvdDisconnectSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdDisconnectSetpoint.setStatus('current')
vpwrLvdReconnectSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 3), Integer32()).setUnits(' vpwrLvdReconnectSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdReconnectSetpoint.setStatus('current')
vpwrLvdReconnectDelayTimer = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 240))).setUnits(' Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdReconnectDelayTimer.setStatus('current')
vpwrRectifierFVSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 1), Integer32()).setUnits(' vpwrRectifierFVSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierFVSetpoint.setStatus('current')
vpwrRectifierHVSDSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 2), Integer32()).setUnits(' vpwrRectifierHVSDSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierHVSDSetpoint.setStatus('current')
vpwrBatteryTempTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1), )
if mibBuilder.loadTexts: vpwrBatteryTempTable.setStatus('current')
vpwrBatteryTempTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "vpwrBatteryTempIndex"))
if mibBuilder.loadTexts: vpwrBatteryTempTableEntry.setStatus('current')
vpwrBatteryTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBatteryTempIndex.setStatus('current')
vpwrBatteryTempName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempName.setStatus('current')
vpwrBatteryTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBatteryTemp.setStatus('current')
vpwrBatteryTempLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 2), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempLThreshold.setStatus('current')
vpwrBatteryTempUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempUThreshold.setStatus('current')
vpwrAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmsPresent.setStatus('current')
vpwrAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 2), )
if mibBuilder.loadTexts: vpwrAlarmTable.setStatus('current')
vpwrAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "vpwrShelfIndex"), (0, "VPWR-DC-POWER-MIB", "vpwrModuleIndex"), (0, "VPWR-DC-POWER-MIB", "vpwrAlarmIndex"))
if mibBuilder.loadTexts: vpwrAlarmEntry.setStatus('current')
vpwrAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmIndex.setStatus('current')
vpwrAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmDescr.setStatus('current')
vpwrAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmTime.setStatus('current')
sysAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 4), )
if mibBuilder.loadTexts: sysAlarmConfigTable.setStatus('current')
sysAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "sysAlarmIndex"))
if mibBuilder.loadTexts: sysAlarmConfigEntry.setStatus('current')
sysAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmIndex.setStatus('current')
sysAlarmDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmDefaultName.setStatus('current')
sysAlarmCustomName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmCustomName.setStatus('current')
sysAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("major", 1), ("minor", 2), ("majorAndMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmSeverity.setStatus('current')
sysAlarmToRelayMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmToRelayMapping.setStatus('current')
sysAlarmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmOperStatus.setStatus('current')
vpwrTrapTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 9, 1), )
if mibBuilder.loadTexts: vpwrTrapTable.setStatus('current')
vpwrTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "vpwrTrapIpIndex"))
if mibBuilder.loadTexts: vpwrTrapTableEntry.setStatus('current')
vpwrTrapIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrTrapIpIndex.setStatus('current')
vpwrTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapIpAddress.setStatus('current')
vpwrTrapCriticality = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapCriticality.setStatus('current')
vpwrReadCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrReadCommunityString.setStatus('current')
vpwrWriteCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrWriteCommunityString.setStatus('current')
vpwrTrapCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapCommunityString.setStatus('current')
vpwrTrapPowerMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,1)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapPowerMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,2)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapACFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,3)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapHVAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,4)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapHVSDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,5)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapBDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,6)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapLVDWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,7)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapLVDOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,8)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapDistAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,9)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapAuxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,10)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSystemRedundancyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,11)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapIShareAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,12)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapModuleFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,13)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapMultipleModuleFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,14)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapModuleCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,15)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSystemOverTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,16)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapSystemOK = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,17)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,18)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"), ("VPWR-DC-POWER-MIB", "vpwrShelfIndex"), ("VPWR-DC-POWER-MIB", "vpwrModuleIndex"))
vpwrTrapModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,19)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"), ("VPWR-DC-POWER-MIB", "vpwrShelfIndex"), ("VPWR-DC-POWER-MIB", "vpwrModuleIndex"))
vpwrTrapThermalCompActive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,20)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapThermalCompInactive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,21)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapInternalTempAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,22)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapInternalTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,23)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapBatteryTempAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,24)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrTrapBatteryTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,25)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
vpwrLvdAlarmContactorOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 1))
if mibBuilder.loadTexts: vpwrLvdAlarmContactorOpen.setStatus('current')
vpwrLvdAlarmCBOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 2))
if mibBuilder.loadTexts: vpwrLvdAlarmCBOpen.setStatus('current')
vpwrTrapLvdFuseOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 3))
if mibBuilder.loadTexts: vpwrTrapLvdFuseOpen.setStatus('current')
vpwrLvdAlarmWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 4))
if mibBuilder.loadTexts: vpwrLvdAlarmWarning.setStatus('current')
vpwrRectAlarmDCFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 1))
if mibBuilder.loadTexts: vpwrRectAlarmDCFail.setStatus('current')
vpwrRectAlarmBoostFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 2))
if mibBuilder.loadTexts: vpwrRectAlarmBoostFail.setStatus('current')
vpwrRectAlarmACFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 3))
if mibBuilder.loadTexts: vpwrRectAlarmACFail.setStatus('current')
vpwrRectAlarmHVSD = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 4))
if mibBuilder.loadTexts: vpwrRectAlarmHVSD.setStatus('current')
vpwrRectAlarmFanFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 5))
if mibBuilder.loadTexts: vpwrRectAlarmFanFail.setStatus('current')
vpwrRectAlarmAmbTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 6))
if mibBuilder.loadTexts: vpwrRectAlarmAmbTemp.setStatus('current')
vpwrRectAlarmIntTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 7))
if mibBuilder.loadTexts: vpwrRectAlarmIntTemp.setStatus('current')
vpwrRectAlarmIShare = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 8))
if mibBuilder.loadTexts: vpwrRectAlarmIShare.setStatus('current')
vpwrRectAlarmUV = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 9))
if mibBuilder.loadTexts: vpwrRectAlarmUV.setStatus('current')
vpwrRectAlarmLowVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 10))
if mibBuilder.loadTexts: vpwrRectAlarmLowVoltage.setStatus('current')
vpwrRectAlarmReserved = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 11))
if mibBuilder.loadTexts: vpwrRectAlarmReserved.setStatus('current')
vpwrRectAlarmDCEnable = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 12))
if mibBuilder.loadTexts: vpwrRectAlarmDCEnable.setStatus('current')
vpwrRectAlarmRemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 13))
if mibBuilder.loadTexts: vpwrRectAlarmRemoteShutdown.setStatus('current')
vpwrRectAlarmModDisableShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 14))
if mibBuilder.loadTexts: vpwrRectAlarmModDisableShutdown.setStatus('current')
vpwrRectAlarmShortPinShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 15))
if mibBuilder.loadTexts: vpwrRectAlarmShortPinShutdown.setStatus('current')
vpwrRectAlarmBoostComm = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 16))
if mibBuilder.loadTexts: vpwrRectAlarmBoostComm.setStatus('current')
vpwrTrapsMsgString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: vpwrTrapsMsgString.setStatus('current')
mibBuilder.exportSymbols("VPWR-DC-POWER-MIB", NonNegativeInteger=NonNegativeInteger, vpwrRectifierFVSetpoint=vpwrRectifierFVSetpoint, vpwrTrapSystemOverTemperatureAlarm=vpwrTrapSystemOverTemperatureAlarm, vpwrTrapThermalCompInactive=vpwrTrapThermalCompInactive, vpwrIdentManufacturer=vpwrIdentManufacturer, vpwrAlarmsPresent=vpwrAlarmsPresent, vpwrTrapModuleRemoved=vpwrTrapModuleRemoved, vpwrLvdReconnectSetpoint=vpwrLvdReconnectSetpoint, vpwrRectifierAlarmGroup=vpwrRectifierAlarmGroup, vpwrTrapIShareAlarm=vpwrTrapIShareAlarm, vpwrTrapSystemRedundancyAlarm=vpwrTrapSystemRedundancyAlarm, vpwrDcPowerTest=vpwrDcPowerTest, vpwrTrapModuleFailAlarm=vpwrTrapModuleFailAlarm, vpwrTrapTableEntry=vpwrTrapTableEntry, vpwrDcPowerProducts=vpwrDcPowerProducts, vpwrSystemInternalTemperature=vpwrSystemInternalTemperature, vpwrAlarmDescr=vpwrAlarmDescr, vpwrTrapHVSDAlarm=vpwrTrapHVSDAlarm, vpwrSystemTempCompStartTemperature=vpwrSystemTempCompStartTemperature, vpwrTrapBatteryTempAlarmCleared=vpwrTrapBatteryTempAlarmCleared, vpwrTrapDistAlarm=vpwrTrapDistAlarm, vpwrTrapIpIndex=vpwrTrapIpIndex, vpwrDcPowerTrapsMsgString=vpwrDcPowerTrapsMsgString, vpwrAlarmTable=vpwrAlarmTable, vpwrRectifierTestGroup=vpwrRectifierTestGroup, vpwrShelfIndex=vpwrShelfIndex, vpwrModuleOID=vpwrModuleOID, vpwrSystemTempCompensationState=vpwrSystemTempCompensationState, vpwrBatteryTempUThreshold=vpwrBatteryTempUThreshold, vpwrTrapBatteryTempAlarmSet=vpwrTrapBatteryTempAlarmSet, vpwrTrapsMsgString=vpwrTrapsMsgString, vpwrBatteryTempName=vpwrBatteryTempName, vpwrRectAlarmDCFail=vpwrRectAlarmDCFail, vpwrSystemInternalTempUThreshold=vpwrSystemInternalTempUThreshold, vpwrBatteryTempTable=vpwrBatteryTempTable, vpwrTrapInternalTempAlarmSet=vpwrTrapInternalTempAlarmSet, vpwrTrapPowerMajorAlarm=vpwrTrapPowerMajorAlarm, vpwrTrapCriticality=vpwrTrapCriticality, vpwrIdentAgentSoftwareVersion=vpwrIdentAgentSoftwareVersion, sysAlarmToRelayMapping=sysAlarmToRelayMapping, vpwrReadCommunityString=vpwrReadCommunityString, vpwrRectAlarmBoostComm=vpwrRectAlarmBoostComm, vpwrSystemType=vpwrSystemType, vpwrDcPowerTraps=vpwrDcPowerTraps, vpwrModuleOperStatus=vpwrModuleOperStatus, vpwrBatteryTempLThreshold=vpwrBatteryTempLThreshold, vpwrTrapLVDOpenAlarm=vpwrTrapLVDOpenAlarm, vpwrSystemIdentEntry=vpwrSystemIdentEntry, vpwrDcPowerLvd=vpwrDcPowerLvd, vpwrLvdConfigGroup=vpwrLvdConfigGroup, sysAlarmIndex=sysAlarmIndex, sysAlarmDefaultName=sysAlarmDefaultName, vpwrIdentModel=vpwrIdentModel, vpwrAlarmIndex=vpwrAlarmIndex, vpwrSystemTempCompensation=vpwrSystemTempCompensation, PYSNMP_MODULE_ID=valereDcPowerMgt, vpwrTrapHVAlarm=vpwrTrapHVAlarm, sysAlarmSeverity=sysAlarmSeverity, vpwrTrapMultipleModuleFailAlarm=vpwrTrapMultipleModuleFailAlarm, vpwrTrapLvdFuseOpen=vpwrTrapLvdFuseOpen, vpwrAlarmTime=vpwrAlarmTime, vpwrDcPowerBatteryGroup=vpwrDcPowerBatteryGroup, vpwrRectAlarmModDisableShutdown=vpwrRectAlarmModDisableShutdown, sysAlarmCustomName=sysAlarmCustomName, vpwrSystemInternalTempLThreshold=vpwrSystemInternalTempLThreshold, vpwrRectAlarmReserved=vpwrRectAlarmReserved, PositiveInteger=PositiveInteger, vpwrRectAlarmShortPinShutdown=vpwrRectAlarmShortPinShutdown, vpwrDcPowerModuleIdent=vpwrDcPowerModuleIdent, vpwrTrapCommunityString=vpwrTrapCommunityString, vpwrRectifierConfigGroup=vpwrRectifierConfigGroup, vpwrTrapIpAddress=vpwrTrapIpAddress, vpwrLvdReconnectDelayTimer=vpwrLvdReconnectDelayTimer, vpwrDcPowerSnmpConfig=vpwrDcPowerSnmpConfig, vpwrTrapInternalTempAlarmCleared=vpwrTrapInternalTempAlarmCleared, vpwrTrapAuxAlarm=vpwrTrapAuxAlarm, vpwrIdentControllerVersion=vpwrIdentControllerVersion, vpwrTrapLVDWarningAlarm=vpwrTrapLVDWarningAlarm, vpwrRectAlarmHVSD=vpwrRectAlarmHVSD, vpwrRectAlarmAmbTemp=vpwrRectAlarmAmbTemp, vpwrSystemParameterGroup=vpwrSystemParameterGroup, sysAlarmConfigTable=sysAlarmConfigTable, vpwrTrapPowerMinorAlarm=vpwrTrapPowerMinorAlarm, vpwrTrapSystemOK=vpwrTrapSystemOK, vpwrTrapBDAlarm=vpwrTrapBDAlarm, vpwrModuleIndex=vpwrModuleIndex, vpwrRectAlarmBoostFail=vpwrRectAlarmBoostFail, vpwrSystemIdentGroup=vpwrSystemIdentGroup, vpwrTrapACFAlarm=vpwrTrapACFAlarm, vpwrSystemCurrent=vpwrSystemCurrent, vpwrBatteryTempTableEntry=vpwrBatteryTempTableEntry, vpwrRectAlarmUV=vpwrRectAlarmUV, vpwrRectAlarmIShare=vpwrRectAlarmIShare, vpwrAlarmEntry=vpwrAlarmEntry, vpwrModuleCapacity=vpwrModuleCapacity, vpwrBatteryTemp=vpwrBatteryTemp, vpwrTrapModuleCommAlarm=vpwrTrapModuleCommAlarm, vpwrRectAlarmFanFail=vpwrRectAlarmFanFail, vpwrLvdAlarmGroup=vpwrLvdAlarmGroup, vpwrTrapModuleInserted=vpwrTrapModuleInserted, vpwrTrapTable=vpwrTrapTable, vpwrTrapThermalCompActive=vpwrTrapThermalCompActive, vpwrLvdTestGroup=vpwrLvdTestGroup, sysAlarmConfigEntry=sysAlarmConfigEntry, sysAlarmOperStatus=sysAlarmOperStatus, vpwrDcPowerRectifier=vpwrDcPowerRectifier, vpwrRectAlarmRemoteShutdown=vpwrRectAlarmRemoteShutdown, vpwrDcPowerSystem=vpwrDcPowerSystem, vpwrSystemThermalSenseType=vpwrSystemThermalSenseType, valereDcPowerMgt=valereDcPowerMgt, vpwrLvdAlarmWarning=vpwrLvdAlarmWarning, vpwrRectAlarmIntTemp=vpwrRectAlarmIntTemp, vpwrSystemConfigGroup=vpwrSystemConfigGroup, vpwrSystemHVAlarmSetpoint=vpwrSystemHVAlarmSetpoint, vpwrLvdAlarmContactorOpen=vpwrLvdAlarmContactorOpen, vpwrWriteCommunityString=vpwrWriteCommunityString, vpwrRectifierHVSDSetpoint=vpwrRectifierHVSDSetpoint, vpwrIdentName=vpwrIdentName, vpwrRectAlarmLowVoltage=vpwrRectAlarmLowVoltage, vpwrLvdDisconnectSetpoint=vpwrLvdDisconnectSetpoint, vpwrSystemBDAlarmSetpoint=vpwrSystemBDAlarmSetpoint, vpwrRectAlarmACFail=vpwrRectAlarmACFail, vpwrSystemTempCompensationSlope=vpwrSystemTempCompensationSlope, vpwrSystemShelfCapacity=vpwrSystemShelfCapacity, vpwrLvdWarningSetpoint=vpwrLvdWarningSetpoint, vpwrRectAlarmDCEnable=vpwrRectAlarmDCEnable, vpwrSystemVoltage=vpwrSystemVoltage, vpwrSystemTempCompStopVoltage=vpwrSystemTempCompStopVoltage, vpwrSystemControllerState=vpwrSystemControllerState, vpwrDcPowerAlarmGroup=vpwrDcPowerAlarmGroup, vpwrBatteryTempIndex=vpwrBatteryTempIndex, vpwrBatteryTempGroup=vpwrBatteryTempGroup, vpwrSystemIdentTable=vpwrSystemIdentTable, vpwrModuleParameter=vpwrModuleParameter, vpwrLvdAlarmCBOpen=vpwrLvdAlarmCBOpen)
