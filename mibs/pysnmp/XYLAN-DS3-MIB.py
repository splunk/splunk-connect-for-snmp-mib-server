#
# PySNMP MIB module XYLAN-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-DS3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, NotificationType, Gauge32, ObjectIdentity, Counter32, TimeTicks, Bits, IpAddress, transmission = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "NotificationType", "Gauge32", "ObjectIdentity", "Counter32", "TimeTicks", "Bits", "IpAddress", "transmission")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanPportArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanPportArch")
dsx3Port = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 11, 2))
dsx3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1), )
if mibBuilder.loadTexts: dsx3PortConfigTable.setStatus('mandatory')
dsx3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1), ).setIndexNames((0, "XYLAN-DS3-MIB", "dsx3PortConfigSlotIndex"), (0, "XYLAN-DS3-MIB", "dsx3PortConfigPortIndex"))
if mibBuilder.loadTexts: dsx3PortConfigEntry.setStatus('mandatory')
dsx3PortConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigSlotIndex.setStatus('mandatory')
dsx3PortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigPortIndex.setStatus('mandatory')
dsx3PortConfigIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigIfType.setStatus('mandatory')
dsx3PortConfigTcSubLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plcp", 2), ("adm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigTcSubLayer.setStatus('mandatory')
dsx3PortConfigPlcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigPlcpStatus.setStatus('mandatory')
dsx3PortConfigFEAC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("dsx3NoFEAC", 1), ("dsx3DS3EquipmentFailure", 2), ("dsx3DS3LOS", 3), ("dsx3DS3OutofFrame", 4), ("dsx3DS3AISreceived", 5), ("dsx3DS3IDLEreceived", 6), ("dsx3DS3NonServiceAffectingEquipFailure", 7), ("dsx3CommonEquipmentFailure", 8), ("dsx3DS3LoopbackReceived", 9), ("dsx3DS1ServiceAffectingEquipmentFailure", 10), ("dsx3DS1NonServiceAffectingEquipFailure", 11), ("dsx3SingleDS1LOS", 12), ("dsx3MultipleDS1sLOS", 13), ("dsx3UnknownCode", 14), ("dsx3UnsupportedCode", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigFEAC.setStatus('mandatory')
dsx3PortConfigNatUse = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("zero", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigNatUse.setStatus('mandatory')
dsx3PortConfigRxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown-or-not-applicable", 1), ("unequipped", 2), ("atm", 3), ("equipped-non-specific", 4), ("sdh-tu-12s", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigRxPayloadType.setStatus('mandatory')
dsx3PortConfigTimeMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("zero", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigTimeMarker.setStatus('mandatory')
dsx3PortConfigTxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unequipped", 1), ("atm", 2), ("equipped-non-specific", 3), ("sdh-tu-12s", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigTxPayloadType.setStatus('mandatory')
dsx3PortConfigExpectedPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unequipped", 1), ("atm", 2), ("equipped-non-specific", 3), ("sdh-tu-12s", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigExpectedPayloadType.setStatus('mandatory')
dsx3PortConfigTxTrailTraceID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigTxTrailTraceID.setStatus('mandatory')
dsx3PortConfigRxTrailTraceID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigRxTrailTraceID.setStatus('mandatory')
dsx3PortConfigExpectedTrailTraceID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigExpectedTrailTraceID.setStatus('mandatory')
dsx3PortConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2097151))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortConfigLineStatus.setStatus('mandatory')
dsx3PortConfigPlScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortConfigPlScramble.setStatus('mandatory')
dsx3PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2), )
if mibBuilder.loadTexts: dsx3PortStatsTable.setStatus('mandatory')
dsx3PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1), ).setIndexNames((0, "XYLAN-DS3-MIB", "dsx3PortStatsSlotIndex"), (0, "XYLAN-DS3-MIB", "dsx3PortStatsPortIndex"))
if mibBuilder.loadTexts: dsx3PortStatsEntry.setStatus('mandatory')
dsx3PortStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsSlotIndex.setStatus('mandatory')
dsx3PortStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPortIndex.setStatus('mandatory')
dsx3PortStatsLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsLossOfSignal.setStatus('mandatory')
dsx3PortStatsOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsOutOfFrame.setStatus('mandatory')
dsx3PortStatsAISEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsAISEvent.setStatus('mandatory')
dsx3PortStatsRedAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsRedAlarmEvent.setStatus('mandatory')
dsx3PortStatsFarEndReceiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsFarEndReceiveError.setStatus('mandatory')
dsx3PortStatsFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsFarEndBlkError.setStatus('mandatory')
dsx3PortStatsLineCodeVioEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsLineCodeVioEvent.setStatus('mandatory')
dsx3PortStatsFramingBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsFramingBitError.setStatus('mandatory')
dsx3PortStatsChangeOfFrameAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsChangeOfFrameAlign.setStatus('mandatory')
dsx3PortStatsParityBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsParityBitError.setStatus('mandatory')
dsx3PortStatsPathParityBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPathParityBitError.setStatus('mandatory')
dsx3PortStatsPlcpLossOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpLossOfFrame.setStatus('mandatory')
dsx3PortStatsPlcpOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpOutOfFrame.setStatus('mandatory')
dsx3PortStatsPlcpYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpYellowAlarm.setStatus('mandatory')
dsx3PortStatsPlcpFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpFarEndBlkError.setStatus('mandatory')
dsx3PortStatsPlcpFramingError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpFramingError.setStatus('mandatory')
dsx3PortStatsPlcpBIPError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPlcpBIPError.setStatus('mandatory')
dsx3PortStatsPayloadTypeMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsPayloadTypeMismatchError.setStatus('mandatory')
dsx3PortStatsUnequippedError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsUnequippedError.setStatus('mandatory')
dsx3PortStatsTrailTraceIDMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortStatsTrailTraceIDMismatchError.setStatus('mandatory')
dsx3PortIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3), )
if mibBuilder.loadTexts: dsx3PortIntervalTable.setStatus('mandatory')
dsx3PortIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1), ).setIndexNames((0, "XYLAN-DS3-MIB", "dsx3PortIntervalSlotIndex"), (0, "XYLAN-DS3-MIB", "dsx3PortIntervalPortIndex"))
if mibBuilder.loadTexts: dsx3PortIntervalEntry.setStatus('mandatory')
dsx3PortIntervalSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalSlotIndex.setStatus('mandatory')
dsx3PortIntervalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPortIndex.setStatus('mandatory')
dsx3PortIntervalClear = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearRequest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PortIntervalClear.setStatus('mandatory')
dsx3PortIntervalLastClear = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalLastClear.setStatus('mandatory')
dsx3PortIntervalLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalLossOfSignal.setStatus('mandatory')
dsx3PortIntervalOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalOutOfFrame.setStatus('mandatory')
dsx3PortIntervalAISEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalAISEvent.setStatus('mandatory')
dsx3PortIntervalRedAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalRedAlarmEvent.setStatus('mandatory')
dsx3PortIntervalFarEndReceiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalFarEndReceiveError.setStatus('mandatory')
dsx3PortIntervalFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalFarEndBlkError.setStatus('mandatory')
dsx3PortIntervalLineCodeVioEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalLineCodeVioEvent.setStatus('mandatory')
dsx3PortIntervalFramingBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalFramingBitError.setStatus('mandatory')
dsx3PortIntervalChangeOfFrameAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalChangeOfFrameAlign.setStatus('mandatory')
dsx3PortIntervalParityBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalParityBitError.setStatus('mandatory')
dsx3PortIntervalPathParityBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPathParityBitError.setStatus('mandatory')
dsx3PortIntervalPlcpLossOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpLossOfFrame.setStatus('mandatory')
dsx3PortIntervalPlcpOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpOutOfFrame.setStatus('mandatory')
dsx3PortIntervalPlcpYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpYellowAlarm.setStatus('mandatory')
dsx3PortIntervalPlcpFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpFarEndBlkError.setStatus('mandatory')
dsx3PortIntervalPlcpFramingError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpFramingError.setStatus('mandatory')
dsx3PortIntervalPlcpBIPError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPlcpBIPError.setStatus('mandatory')
dsx3PortIntervalPayloadTypeMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalPayloadTypeMismatchError.setStatus('mandatory')
dsx3PortIntervalUnequippedError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalUnequippedError.setStatus('mandatory')
dsx3PortIntervalTrailTraceIDMismatchError = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PortIntervalTrailTraceIDMismatchError.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-DS3-MIB", dsx3PortConfigTcSubLayer=dsx3PortConfigTcSubLayer, dsx3PortStatsTrailTraceIDMismatchError=dsx3PortStatsTrailTraceIDMismatchError, dsx3PortIntervalEntry=dsx3PortIntervalEntry, dsx3PortStatsFramingBitError=dsx3PortStatsFramingBitError, dsx3PortConfigTimeMarker=dsx3PortConfigTimeMarker, dsx3PortStatsRedAlarmEvent=dsx3PortStatsRedAlarmEvent, dsx3PortStatsChangeOfFrameAlign=dsx3PortStatsChangeOfFrameAlign, dsx3PortIntervalOutOfFrame=dsx3PortIntervalOutOfFrame, dsx3PortStatsParityBitError=dsx3PortStatsParityBitError, dsx3PortStatsLineCodeVioEvent=dsx3PortStatsLineCodeVioEvent, dsx3PortStatsUnequippedError=dsx3PortStatsUnequippedError, dsx3PortConfigTxPayloadType=dsx3PortConfigTxPayloadType, dsx3PortIntervalAISEvent=dsx3PortIntervalAISEvent, dsx3PortIntervalUnequippedError=dsx3PortIntervalUnequippedError, dsx3PortIntervalSlotIndex=dsx3PortIntervalSlotIndex, dsx3PortConfigPortIndex=dsx3PortConfigPortIndex, dsx3PortConfigEntry=dsx3PortConfigEntry, dsx3PortIntervalLossOfSignal=dsx3PortIntervalLossOfSignal, dsx3PortIntervalFarEndReceiveError=dsx3PortIntervalFarEndReceiveError, dsx3PortIntervalLineCodeVioEvent=dsx3PortIntervalLineCodeVioEvent, dsx3PortStatsPlcpYellowAlarm=dsx3PortStatsPlcpYellowAlarm, dsx3PortStatsPortIndex=dsx3PortStatsPortIndex, dsx3PortStatsPlcpFramingError=dsx3PortStatsPlcpFramingError, dsx3PortIntervalPlcpFramingError=dsx3PortIntervalPlcpFramingError, dsx3PortConfigRxTrailTraceID=dsx3PortConfigRxTrailTraceID, dsx3PortConfigIfType=dsx3PortConfigIfType, dsx3PortStatsFarEndReceiveError=dsx3PortStatsFarEndReceiveError, dsx3PortIntervalFarEndBlkError=dsx3PortIntervalFarEndBlkError, dsx3PortConfigExpectedTrailTraceID=dsx3PortConfigExpectedTrailTraceID, dsx3PortIntervalTrailTraceIDMismatchError=dsx3PortIntervalTrailTraceIDMismatchError, dsx3PortStatsOutOfFrame=dsx3PortStatsOutOfFrame, dsx3Port=dsx3Port, dsx3PortIntervalPlcpBIPError=dsx3PortIntervalPlcpBIPError, dsx3PortStatsTable=dsx3PortStatsTable, dsx3PortIntervalPayloadTypeMismatchError=dsx3PortIntervalPayloadTypeMismatchError, dsx3PortIntervalPlcpLossOfFrame=dsx3PortIntervalPlcpLossOfFrame, dsx3PortConfigNatUse=dsx3PortConfigNatUse, dsx3PortIntervalPlcpOutOfFrame=dsx3PortIntervalPlcpOutOfFrame, dsx3PortStatsSlotIndex=dsx3PortStatsSlotIndex, dsx3PortConfigExpectedPayloadType=dsx3PortConfigExpectedPayloadType, dsx3PortIntervalParityBitError=dsx3PortIntervalParityBitError, dsx3PortConfigLineStatus=dsx3PortConfigLineStatus, dsx3PortIntervalTable=dsx3PortIntervalTable, dsx3PortStatsFarEndBlkError=dsx3PortStatsFarEndBlkError, dsx3PortStatsPathParityBitError=dsx3PortStatsPathParityBitError, dsx3PortIntervalChangeOfFrameAlign=dsx3PortIntervalChangeOfFrameAlign, dsx3PortStatsEntry=dsx3PortStatsEntry, dsx3PortConfigPlcpStatus=dsx3PortConfigPlcpStatus, dsx3PortConfigSlotIndex=dsx3PortConfigSlotIndex, dsx3PortConfigRxPayloadType=dsx3PortConfigRxPayloadType, dsx3PortConfigPlScramble=dsx3PortConfigPlScramble, dsx3PortStatsAISEvent=dsx3PortStatsAISEvent, dsx3PortStatsPlcpLossOfFrame=dsx3PortStatsPlcpLossOfFrame, dsx3PortIntervalPlcpYellowAlarm=dsx3PortIntervalPlcpYellowAlarm, dsx3PortIntervalPathParityBitError=dsx3PortIntervalPathParityBitError, dsx3PortStatsPlcpOutOfFrame=dsx3PortStatsPlcpOutOfFrame, dsx3PortStatsPayloadTypeMismatchError=dsx3PortStatsPayloadTypeMismatchError, dsx3PortStatsLossOfSignal=dsx3PortStatsLossOfSignal, dsx3PortIntervalLastClear=dsx3PortIntervalLastClear, dsx3PortIntervalClear=dsx3PortIntervalClear, dsx3PortConfigFEAC=dsx3PortConfigFEAC, dsx3PortStatsPlcpBIPError=dsx3PortStatsPlcpBIPError, dsx3PortStatsPlcpFarEndBlkError=dsx3PortStatsPlcpFarEndBlkError, dsx3PortIntervalPortIndex=dsx3PortIntervalPortIndex, dsx3PortIntervalRedAlarmEvent=dsx3PortIntervalRedAlarmEvent, dsx3PortConfigTxTrailTraceID=dsx3PortConfigTxTrailTraceID, dsx3PortIntervalPlcpFarEndBlkError=dsx3PortIntervalPlcpFarEndBlkError, dsx3PortConfigTable=dsx3PortConfigTable, dsx3PortIntervalFramingBitError=dsx3PortIntervalFramingBitError)
