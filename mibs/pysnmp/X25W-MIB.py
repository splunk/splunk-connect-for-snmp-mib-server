#
# PySNMP MIB module X25W-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/X25W-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, iso, ObjectIdentity, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, ModuleIdentity, MibIdentifier, NotificationType, Integer32, IpAddress, enterprises, experimental = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "iso", "ObjectIdentity", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "ModuleIdentity", "MibIdentifier", "NotificationType", "Integer32", "IpAddress", "enterprises", "experimental")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
x25w = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8))
x25wanAdmn = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8, 1))
x25wanAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1), )
if mibBuilder.loadTexts: x25wanAdmnTable.setStatus('mandatory')
x25wanAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1), ).setIndexNames((0, "X25W-MIB", "x25wanAdmnIndex"))
if mibBuilder.loadTexts: x25wanAdmnEntry.setStatus('mandatory')
x25wanAdmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanAdmnIndex.setStatus('mandatory')
x25wanAdmnType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnType.setStatus('mandatory')
x25wanAdmnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 393216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnSpeed.setStatus('mandatory')
x25wanAdmnLinkAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsr", 1), ("dcd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnLinkAvailable.setStatus('mandatory')
x25wanAdmnClockSouce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dceRxTx", 1), ("dceRxOnly", 2), ("brgRxTx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnClockSouce.setStatus('mandatory')
x25wanAdmnMaxFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 519))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnMaxFrmSize.setStatus('mandatory')
x25wanOper = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8, 2))
x25wanOperTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1), )
if mibBuilder.loadTexts: x25wanOperTable.setStatus('mandatory')
x25wanOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1), ).setIndexNames((0, "X25W-MIB", "x25wanOperIndex"))
if mibBuilder.loadTexts: x25wanOperEntry.setStatus('mandatory')
x25wanOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperIndex.setStatus('mandatory')
x25wanOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperType.setStatus('mandatory')
x25wanOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 393216))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperSpeed.setStatus('mandatory')
x25wanOperLinkAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsr", 1), ("dcd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperLinkAvailable.setStatus('mandatory')
x25wanOperClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dceRxTx", 1), ("dceRxOnly", 2), ("brgRxTx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperClockSource.setStatus('mandatory')
x25wanOperMaxFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 519))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperMaxFrmSize.setStatus('mandatory')
x25wanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8, 3))
x25wanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1), )
if mibBuilder.loadTexts: x25wanStatsTable.setStatus('mandatory')
x25wanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1), ).setIndexNames((0, "X25W-MIB", "x25wanStatsIndex"))
if mibBuilder.loadTexts: x25wanStatsEntry.setStatus('mandatory')
x25wanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsIndex.setStatus('mandatory')
x25wanStatsGoodFramesTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsGoodFramesTxs.setStatus('mandatory')
x25wanStatsGoodFramesRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsGoodFramesRxs.setStatus('mandatory')
x25wanStatsTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsTxUnderruns.setStatus('mandatory')
x25wanStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxOverruns.setStatus('mandatory')
x25wanStatsRxCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxCrcErrs.setStatus('mandatory')
x25wanStatsRxFrameNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxFrameNoBufs.setStatus('mandatory')
x25wanStatsUnrecoveredRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsUnrecoveredRxs.setStatus('mandatory')
x25wanStatsRxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxOverflows.setStatus('mandatory')
x25wanStatsRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxAborts.setStatus('mandatory')
x25wanStatsRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxTooLongs.setStatus('mandatory')
x25wanStatsTxTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsTxTooShorts.setStatus('mandatory')
x25wanStatsRxTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxTooShorts.setStatus('mandatory')
x25wanStatsTxBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsTxBadPackets.setStatus('mandatory')
x25wanStatsTxRingQFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsTxRingQFulls.setStatus('mandatory')
x25wanStatsRxRingQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxRingQSize.setStatus('mandatory')
x25wanStatsDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsDSR.setStatus('mandatory')
x25wanStatsCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsCTS.setStatus('mandatory')
x25wanStatsDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsDCD.setStatus('mandatory')
x25wanTrapEna = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8, 4))
x25wanTrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1), )
if mibBuilder.loadTexts: x25wanTrapEnaTable.setStatus('mandatory')
x25wanTrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1, 1), ).setIndexNames((0, "X25W-MIB", "x25wanTrapEnaIndex"))
if mibBuilder.loadTexts: x25wanTrapEnaEntry.setStatus('mandatory')
x25wanTrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanTrapEnaIndex.setStatus('mandatory')
x25wanTrapEnaOutOfSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanTrapEnaOutOfSvc.setStatus('mandatory')
x25wanTrapEnaLinkActive = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanTrapEnaLinkActive.setStatus('mandatory')
mibBuilder.exportSymbols("X25W-MIB", x25wanStatsDCD=x25wanStatsDCD, x25wanAdmnLinkAvailable=x25wanAdmnLinkAvailable, x25wanOperLinkAvailable=x25wanOperLinkAvailable, x25wanStatsRxTooLongs=x25wanStatsRxTooLongs, x25wanOperClockSource=x25wanOperClockSource, x25wanOperSpeed=x25wanOperSpeed, x25wanStatsRxAborts=x25wanStatsRxAborts, x25w=x25w, x25wanStatsGoodFramesRxs=x25wanStatsGoodFramesRxs, x25wanAdmnSpeed=x25wanAdmnSpeed, x25wanStatsRxOverflows=x25wanStatsRxOverflows, x25wanAdmnIndex=x25wanAdmnIndex, x25wanTrapEna=x25wanTrapEna, x25wanAdmnClockSouce=x25wanAdmnClockSouce, x25wanStatsEntry=x25wanStatsEntry, x25wanStatsTxRingQFulls=x25wanStatsTxRingQFulls, x25wanStatsRxCrcErrs=x25wanStatsRxCrcErrs, x25wanStats=x25wanStats, x25wanOperEntry=x25wanOperEntry, x25wanStatsTxTooShorts=x25wanStatsTxTooShorts, x25wanStatsGoodFramesTxs=x25wanStatsGoodFramesTxs, x25wanStatsTxUnderruns=x25wanStatsTxUnderruns, x25wanOperType=x25wanOperType, x25wanStatsRxOverruns=x25wanStatsRxOverruns, x25wanTrapEnaOutOfSvc=x25wanTrapEnaOutOfSvc, x25wanStatsRxTooShorts=x25wanStatsRxTooShorts, x25wanStatsTable=x25wanStatsTable, x25wanAdmnTable=x25wanAdmnTable, nas=nas, x25wanTrapEnaIndex=x25wanTrapEnaIndex, x25wanOperTable=x25wanOperTable, x25wanStatsRxRingQSize=x25wanStatsRxRingQSize, x25wanStatsDSR=x25wanStatsDSR, x25wanStatsUnrecoveredRxs=x25wanStatsUnrecoveredRxs, x25wanTrapEnaLinkActive=x25wanTrapEnaLinkActive, x25wanStatsTxBadPackets=x25wanStatsTxBadPackets, usr=usr, x25wanAdmnType=x25wanAdmnType, x25wanStatsIndex=x25wanStatsIndex, x25wanAdmn=x25wanAdmn, x25wanTrapEnaTable=x25wanTrapEnaTable, x25wanStatsRxFrameNoBufs=x25wanStatsRxFrameNoBufs, x25wanOperIndex=x25wanOperIndex, x25wanAdmnEntry=x25wanAdmnEntry, x25wanAdmnMaxFrmSize=x25wanAdmnMaxFrmSize, x25wanTrapEnaEntry=x25wanTrapEnaEntry, x25wanOperMaxFrmSize=x25wanOperMaxFrmSize, x25wanOper=x25wanOper, x25wanStatsCTS=x25wanStatsCTS)
