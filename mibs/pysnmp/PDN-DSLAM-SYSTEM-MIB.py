#
# PySNMP MIB module PDN-DSLAM-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-DSLAM-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:29:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_dslam, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-dslam")
SwitchState, IdslClockMode = mibBuilder.importSymbols("PDN-TC", "SwitchState", "IdslClockMode")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysObjectID, = mibBuilder.importSymbols("SNMPv2-MIB", "sysObjectID")
MibIdentifier, Counter64, Integer32, NotificationType, ModuleIdentity, Counter32, Bits, IpAddress, NotificationType, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "Integer32", "NotificationType", "ModuleIdentity", "Counter32", "Bits", "IpAddress", "NotificationType", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ObjectIdentity")
TAddress, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "TextualConvention", "DisplayString", "RowStatus")
sysDevDslamMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1))
sysDevDslamMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2))
sysDevStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1))
sysDevConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2))
loginHistTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 1), )
if mibBuilder.loadTexts: loginHistTable.setStatus('mandatory')
loginHistTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 1, 1), ).setIndexNames((0, "PDN-DSLAM-SYSTEM-MIB", "loginUserId"), (0, "PDN-DSLAM-SYSTEM-MIB", "loginTime"))
if mibBuilder.loadTexts: loginHistTableEntry.setStatus('mandatory')
loginUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginUserId.setStatus('mandatory')
loginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginTime.setStatus('mandatory')
loginAccessApp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ftp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginAccessApp.setStatus('mandatory')
loginAccessHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginAccessHost.setStatus('mandatory')
loginUserPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("administrator", 1), ("operator", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginUserPriv.setStatus('mandatory')
loginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginStatus.setStatus('mandatory')
loginFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 2), )
if mibBuilder.loadTexts: loginFailureCountTable.setStatus('mandatory')
loginFailureCountTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 2, 1), ).setIndexNames((0, "PDN-DSLAM-SYSTEM-MIB", "loginFailureAccessApp"))
if mibBuilder.loadTexts: loginFailureCountTableEntry.setStatus('mandatory')
loginFailureAccessApp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ftp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginFailureAccessApp.setStatus('mandatory')
loginFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginFailureCount.setStatus('mandatory')
enablePowerSourceFailureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePowerSourceFailureAlarm.setStatus('mandatory')
devIfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 2), )
if mibBuilder.loadTexts: devIfTable.setStatus('mandatory')
devIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: devIfTableEntry.setStatus('mandatory')
devPacketDiscardPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("mrrp", 2), ("lrrp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devPacketDiscardPolicy.setStatus('mandatory')
devLinkIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devLinkIntegrity.setStatus('mandatory')
communityTrapAddressInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 3), )
if mibBuilder.loadTexts: communityTrapAddressInfoTable.setStatus('mandatory')
communityTrapAddressInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 3, 1), ).setIndexNames((0, "PDN-DSLAM-SYSTEM-MIB", "trapCommunityName"), (0, "PDN-DSLAM-SYSTEM-MIB", "trapDestAndPort"))
if mibBuilder.loadTexts: communityTrapAddressInfoTableEntry.setStatus('mandatory')
trapCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCommunityName.setStatus('mandatory')
trapDestAndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 3, 1, 2), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDestAndPort.setStatus('mandatory')
trapsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsEnable.setStatus('mandatory')
trapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapRowStatus.setStatus('mandatory')
entCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 4), )
if mibBuilder.loadTexts: entCommunityTable.setStatus('mandatory')
entCommunityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 4, 1), ).setIndexNames((0, "PDN-DSLAM-SYSTEM-MIB", "entCommunityName"))
if mibBuilder.loadTexts: entCommunityTableEntry.setStatus('mandatory')
entCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entCommunityName.setStatus('mandatory')
entCommunityType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCommunityType.setStatus('mandatory')
entCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entCommunityRowStatus.setStatus('mandatory')
sysDevUserAccountTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 5), )
if mibBuilder.loadTexts: sysDevUserAccountTable.setStatus('mandatory')
sysDevUserAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 5, 1), ).setIndexNames((0, "PDN-DSLAM-SYSTEM-MIB", "sysDevUserAccountUserId"))
if mibBuilder.loadTexts: sysDevUserAccountEntry.setStatus('mandatory')
sysDevUserAccountUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDevUserAccountUserId.setStatus('mandatory')
sysDevUserAccountPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operator", 1), ("administrator", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDevUserAccountPrivilege.setStatus('mandatory')
sysDevUserAccountUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDevUserAccountUserPassword.setStatus('mandatory')
sysDevUserAccountAccessPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDevUserAccountAccessPartition.setStatus('mandatory')
sysDevUserAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDevUserAccountRowStatus.setStatus('mandatory')
sysDevIDSLConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 6), )
if mibBuilder.loadTexts: sysDevIDSLConfigTable.setStatus('mandatory')
sysDevIDSLConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: sysDevIDSLConfigEntry.setStatus('mandatory')
sysDevIDSLConfigPrimaryNetClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 6, 1, 1), IdslClockMode().clone('triState')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDevIDSLConfigPrimaryNetClockMode.setStatus('mandatory')
sysDevIDSLConfigSecondaryNetClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 6, 1, 2), IdslClockMode().clone('triState')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDevIDSLConfigSecondaryNetClockMode.setStatus('mandatory')
sysDevDslamSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 7))
sysDevSyslogFtpServerXferStatsEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 7, 1), SwitchState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDevSyslogFtpServerXferStatsEnable.setStatus('mandatory')
sysDevSyslogTftpServerXferStatsEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 1, 2, 7, 2), SwitchState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDevSyslogTftpServerXferStatsEnable.setStatus('mandatory')
cCN = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,7)).setObjects(("IF-MIB", "ifIndex"))
authenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,8)).setObjects(("PDN-DSLAM-SYSTEM-MIB", "loginFailureAccessApp"), ("PDN-DSLAM-SYSTEM-MIB", "loginFailureCount"))
fanModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,9))
fanModuleOperational = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,109))
powerSourceAFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,10))
powerSourceAOperational = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,110))
slotPollFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,11)).setObjects(("ENTITY-MIB", "entPhysicalIndex"))
newCardDetected = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,111)).setObjects(("ENTITY-MIB", "entPhysicalIndex"))
ethernetJabber = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,12)).setObjects(("IF-MIB", "ifIndex"))
ethernetJabberClear = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,112)).setObjects(("IF-MIB", "ifIndex"))
ethernetJumbos = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,13)).setObjects(("IF-MIB", "ifIndex"))
ethernetRunts = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,14)).setObjects(("IF-MIB", "ifIndex"))
powerSourceBFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,17))
powerSourceBOperational = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,117))
nonIpConservativeCardDetected = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,18)).setObjects(("ENTITY-MIB", "entPhysicalIndex"))
nonSupportedMCC = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,20)).setObjects(("SNMPv2-MIB", "sysObjectID"))
nonSupportedChassis = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 24, 2) + (0,21)).setObjects(("SNMPv2-MIB", "sysObjectID"))
mibBuilder.exportSymbols("PDN-DSLAM-SYSTEM-MIB", loginFailureCountTableEntry=loginFailureCountTableEntry, ethernetRunts=ethernetRunts, devIfTable=devIfTable, ethernetJabberClear=ethernetJabberClear, sysDevIDSLConfigEntry=sysDevIDSLConfigEntry, loginFailureCountTable=loginFailureCountTable, sysDevDslamSyslog=sysDevDslamSyslog, sysDevSyslogTftpServerXferStatsEnable=sysDevSyslogTftpServerXferStatsEnable, newCardDetected=newCardDetected, sysDevUserAccountAccessPartition=sysDevUserAccountAccessPartition, loginAccessApp=loginAccessApp, fanModuleOperational=fanModuleOperational, sysDevDslamMIBObjects=sysDevDslamMIBObjects, powerSourceBOperational=powerSourceBOperational, sysDevConfig=sysDevConfig, trapRowStatus=trapRowStatus, nonSupportedChassis=nonSupportedChassis, sysDevDslamMIBTraps=sysDevDslamMIBTraps, devLinkIntegrity=devLinkIntegrity, trapDestAndPort=trapDestAndPort, entCommunityTableEntry=entCommunityTableEntry, ethernetJumbos=ethernetJumbos, powerSourceAOperational=powerSourceAOperational, sysDevStats=sysDevStats, nonSupportedMCC=nonSupportedMCC, loginUserId=loginUserId, trapCommunityName=trapCommunityName, communityTrapAddressInfoTableEntry=communityTrapAddressInfoTableEntry, loginAccessHost=loginAccessHost, loginHistTable=loginHistTable, sysDevUserAccountTable=sysDevUserAccountTable, powerSourceBFailure=powerSourceBFailure, sysDevUserAccountUserId=sysDevUserAccountUserId, loginFailureCount=loginFailureCount, sysDevIDSLConfigSecondaryNetClockMode=sysDevIDSLConfigSecondaryNetClockMode, loginFailureAccessApp=loginFailureAccessApp, loginStatus=loginStatus, sysDevIDSLConfigTable=sysDevIDSLConfigTable, entCommunityRowStatus=entCommunityRowStatus, loginTime=loginTime, entCommunityName=entCommunityName, trapsEnable=trapsEnable, sysDevUserAccountRowStatus=sysDevUserAccountRowStatus, sysDevUserAccountUserPassword=sysDevUserAccountUserPassword, entCommunityTable=entCommunityTable, sysDevSyslogFtpServerXferStatsEnable=sysDevSyslogFtpServerXferStatsEnable, loginUserPriv=loginUserPriv, cCN=cCN, sysDevIDSLConfigPrimaryNetClockMode=sysDevIDSLConfigPrimaryNetClockMode, loginHistTableEntry=loginHistTableEntry, enablePowerSourceFailureAlarm=enablePowerSourceFailureAlarm, communityTrapAddressInfoTable=communityTrapAddressInfoTable, entCommunityType=entCommunityType, devIfTableEntry=devIfTableEntry, slotPollFailure=slotPollFailure, fanModuleFailure=fanModuleFailure, sysDevUserAccountEntry=sysDevUserAccountEntry, authenticationFailure=authenticationFailure, powerSourceAFailure=powerSourceAFailure, sysDevUserAccountPrivilege=sysDevUserAccountPrivilege, ethernetJabber=ethernetJabber, nonIpConservativeCardDetected=nonIpConservativeCardDetected, devPacketDiscardPolicy=devPacketDiscardPolicy)
