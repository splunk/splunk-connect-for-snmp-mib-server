#
# PySNMP MIB module Baytech-MIB-401-4 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Baytech-MIB-401-4
# Produced by pysmi-0.3.4 at Mon Apr 29 17:25:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, IpAddress, Counter64, Gauge32, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, NotificationType, TimeTicks, ModuleIdentity, ObjectIdentity, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "IpAddress", "Counter64", "Gauge32", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "NotificationType", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
baytech = MibIdentifier((1, 3, 6, 1, 4, 1, 4779))
btadevices = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1))
mtrapargs = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 3))
sBTAIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 1))
sBTANetworkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 2))
sBTAModules = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 3))
sBTAControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 4))
sBTAFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 5))
sBTAEnvironmental = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 6))
sBTAIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAIdentFirmwareRev.setStatus('mandatory')
sBTAIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAIdentSerialNumber.setStatus('mandatory')
sBTAIdentUnitName = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAIdentUnitName.setStatus('mandatory')
sBTANetworkConfigBootpEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigBootpEnable.setStatus('mandatory')
sBTANetworkConfigDHCPEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigDHCPEnable.setStatus('mandatory')
sBTANetworkConfigSSHEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigSSHEnable.setStatus('mandatory')
sBTANetworkConfigTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigTelnetEnable.setStatus('mandatory')
sBTANetworkConfigActivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigActivityTimeout.setStatus('mandatory')
sBTANetworkConfigDirectConnEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigDirectConnEnable.setStatus('mandatory')
sBTANetworkConfigSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 2, 8))
sBTANetworkConfigRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 2, 9))
sBTANetworkConfigWEB = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 2, 10))
sBTANetworkConfigSNMPReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigSNMPReadOnlyCommunity.setStatus('mandatory')
sBTANetworkConfigSNMPReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigSNMPReadWriteCommunity.setStatus('mandatory')
sBTANetworkConfigSNMPNumTrapReceivers = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTANetworkConfigSNMPNumTrapReceivers.setStatus('mandatory')
sBTANetworkConfigSNMPTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 2, 8, 4), )
if mibBuilder.loadTexts: sBTANetworkConfigSNMPTrapReceiverTable.setStatus('mandatory')
sBTANetworkConfigSNMPTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 2, 8, 4, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "trapIndex"))
if mibBuilder.loadTexts: sBTANetworkConfigSNMPTrapReceiverEntry.setStatus('mandatory')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 2, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
receiverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 2, 8, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverAddress.setStatus('mandatory')
sBTANetworkConfigRadiusEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigRadiusEnable.setStatus('mandatory')
sBTANetworkConfigRadiusPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigRadiusPrimaryServer.setStatus('mandatory')
sBTANetworkConfigRadiusSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigRadiusSecondaryServer.setStatus('mandatory')
sBTANetworkConfigRadiusLocalLogin = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigRadiusLocalLogin.setStatus('mandatory')
sBTANetworkConfigWebEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigWebEnable.setStatus('mandatory')
sBTANetworkConfigWebSecureEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigWebSecureEnable.setStatus('mandatory')
sBTANetworkConfigWebLoginEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigWebLoginEnable.setStatus('mandatory')
sBTANetworkConfigWebActivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 2, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTANetworkConfigWebActivityTimeout.setStatus('mandatory')
sBTAModulesNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesNumberOfModules.setStatus('mandatory')
sBTAModulesModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesModulesInstalled.setStatus('mandatory')
sBTAModulesResetModulesCmd = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesResetModulesCmd.setStatus('deprecated')
sBTAModulesNumberOfIntelligentModules = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesNumberOfIntelligentModules.setStatus('mandatory')
sBTAModulesRPC = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5))
sBTAModulesSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 3, 6))
sBTAModulesModem = MibIdentifier((1, 3, 6, 1, 4, 1, 4779, 1, 3, 7))
sBTAModulesNumberOfRPCModules = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesNumberOfRPCModules.setStatus('mandatory')
sBTAModulesRPCTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2), )
if mibBuilder.loadTexts: sBTAModulesRPCTable.setStatus('mandatory')
sBTAModulesRPCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sBTAModulesRPCIndex"))
if mibBuilder.loadTexts: sBTAModulesRPCEntry.setStatus('mandatory')
sBTAModulesRPCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCIndex.setStatus('mandatory')
sBTAModulesRPCName = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCName.setStatus('mandatory')
sBTAModulesRPCFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCFirmwareVersion.setStatus('mandatory')
sBTAModulesRPCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCCurrent.setStatus('mandatory')
sBTAModulesRPCMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCMaxCurrent.setStatus('mandatory')
sBTAModulesRPCVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCVoltage.setStatus('mandatory')
sBTAModulesRPCPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCPower.setStatus('mandatory')
sBTAModulesRPCTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCTemperature.setStatus('mandatory')
sBTAModulesRPCRebootTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCRebootTimeout.setStatus('mandatory')
sBTAModulesRPCAllOutletsCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("reboot", 2), ("lockon", 3), ("lockoff", 4), ("unlock", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCAllOutletsCmd.setStatus('mandatory')
sBTAModulesRPCAllOutletsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCAllOutletsStatus.setStatus('mandatory')
sBTAModulesRPCCurrentAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCCurrentAlarmThreshold.setStatus('mandatory')
sBTAModulesRPCOverVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCOverVoltageThreshold.setStatus('mandatory')
sBTAModulesRPCUnderVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCUnderVoltageThreshold.setStatus('mandatory')
sBTAModulesRPCNumberOfOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCNumberOfOutlets.setStatus('mandatory')
sBTAModulesRPCCircuitBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCCircuitBreaker.setStatus('mandatory')
sBTAModulesRPCOverTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCOverTempThreshold.setStatus('mandatory')
sBTAModulesRPCUnitVA = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCUnitVA.setStatus('mandatory')
sBTAModulesRPCNumberOfBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCNumberOfBreakers.setStatus('mandatory')
sBTAModulesRPCLowCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCLowCurrentThreshold.setStatus('mandatory')
sBTAModulesRPCVoltageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCVoltageSource.setStatus('mandatory')
sBTAModulesRPCSourceSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCSourceSwitchCount.setStatus('mandatory')
sBTAModulesRPCNumberOfSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCNumberOfSensors.setStatus('mandatory')
sBTAModulesRPCType = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCType.setStatus('mandatory')
sBTAModulesRPCOutletTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 3), )
if mibBuilder.loadTexts: sBTAModulesRPCOutletTable.setStatus('mandatory')
sBTAModulesRPCOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 3, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sBTAModulesRPCOutletModuleIndex"), (0, "Baytech-MIB-401-4", "sBTAModulesRPCOutletIndex"))
if mibBuilder.loadTexts: sBTAModulesRPCOutletEntry.setStatus('mandatory')
sBTAModulesRPCOutletModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCOutletModuleIndex.setStatus('mandatory')
sBTAModulesRPCOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCOutletIndex.setStatus('mandatory')
sBTAModulesRPCOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("reboot", 2), ("lockon", 3), ("lockoff", 4), ("unlock", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCOutletState.setStatus('mandatory')
sBTAModulesRPCOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCOutletName.setStatus('mandatory')
sBTAModulesRPCGroupCmd = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCGroupCmd.setStatus('mandatory')
sBTAModulesRPCCurrentGroupsCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 8), )
if mibBuilder.loadTexts: sBTAModulesRPCCurrentGroupsCurrentTable.setStatus('mandatory')
sBTAModulesRPCCurrentGroupsCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 8, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "groupCurrentIndex"))
if mibBuilder.loadTexts: sBTAModulesRPCCurrentGroupsCurrentEntry.setStatus('mandatory')
groupCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCurrentIndex.setStatus('mandatory')
groupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCurrent.setStatus('mandatory')
rpcGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpcGroup.setStatus('mandatory')
warningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warningThreshold.setStatus('mandatory')
emergencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emergencyThreshold.setStatus('mandatory')
sBTAModulesRPCBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9), )
if mibBuilder.loadTexts: sBTAModulesRPCBreakersTable.setStatus('mandatory')
sBTAModulesRPCBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sBTAModulesRPCBreakersModulesIndex"), (0, "Baytech-MIB-401-4", "sBTAModulesRPCBreakersBreakersIndex"))
if mibBuilder.loadTexts: sBTAModulesRPCBreakersEntry.setStatus('mandatory')
sBTAModulesRPCBreakersModulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersModulesIndex.setStatus('mandatory')
sBTAModulesRPCBreakersBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersBreakersIndex.setStatus('mandatory')
sBTAModulesRPCBreakersCircuitBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersCircuitBreaker.setStatus('mandatory')
sBTAModulesRPCBreakersCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersCurrent.setStatus('mandatory')
sBTAModulesRPCBreakersMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersMaxCurrent.setStatus('mandatory')
sBTAModulesRPCBreakersVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersVoltage.setStatus('mandatory')
sBTAModulesRPCBreakersPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersPower.setStatus('mandatory')
sBTAModulesRPCBreakersVA = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersVA.setStatus('mandatory')
sBTAModulesRPCBreakersCurrentAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCBreakersCurrentAlarmThreshold.setStatus('mandatory')
sBTAControlResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noreset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAControlResetUnit.setStatus('mandatory')
sBTAControlResetModules = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noreset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAControlResetModules.setStatus('mandatory')
sBTAControlNumOfLoggedUsers = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAControlNumOfLoggedUsers.setStatus('mandatory')
sBTAControlUserTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4), )
if mibBuilder.loadTexts: sBTAControlUserTable.setStatus('mandatory')
sBTAControlUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sBTAControlUserIndex"))
if mibBuilder.loadTexts: sBTAControlUserEntry.setStatus('mandatory')
sBTAControlUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAControlUserIndex.setStatus('mandatory')
sBTAControlUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAControlUserName.setStatus('mandatory')
sBTAControlUserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAControlUserAddress.setStatus('mandatory')
sBTAControlUserConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("serialport", 0), ("telnet", 1), ("ssh", 2), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAControlUserConnection.setStatus('mandatory')
sBTAControlUserConnModule = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAControlUserConnModule.setStatus('mandatory')
sBTAControlUserConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAControlUserConnPort.setStatus('mandatory')
sBTAControlUserTerminateUser = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("terminate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAControlUserTerminateUser.setStatus('mandatory')
sBTAFileTransferEnableUpgradeFTPFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enableUpgradeFileTransferDownloadViaFTP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAFileTransferEnableUpgradeFTPFileTransfer.setStatus('mandatory')
mtrapargsInteger = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger.setStatus('mandatory')
mtrapargsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsIpAddress.setStatus('mandatory')
mtrapargsString = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString.setStatus('mandatory')
mtrapargsGauge = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsGauge.setStatus('mandatory')
mtrapargsTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsTimeTicks.setStatus('mandatory')
sBTAModuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModuleIndex.setStatus('mandatory')
sBTAOutletIndex = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAOutletIndex.setStatus('mandatory')
sBTAPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAPortIndex.setStatus('mandatory')
sBTAVoltageSource = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAVoltageSource.setStatus('mandatory')
sBTASourceSwitchCount = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTASourceSwitchCount.setStatus('mandatory')
sBTASensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTASensorIndex.setStatus('mandatory')
sBTABreakerIndex = MibScalar((1, 3, 6, 1, 4, 1, 4779, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTABreakerIndex.setStatus('mandatory')
sBTAModulesRPCModPortTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5), )
if mibBuilder.loadTexts: sBTAModulesRPCModPortTable.setStatus('mandatory')
sBTAModulesRPCModPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sRPCModuleIndex"), (0, "Baytech-MIB-401-4", "sRPCPortIndex"))
if mibBuilder.loadTexts: sBTAModulesRPCModPortEntry.setStatus('mandatory')
sRPCModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCModuleIndex.setStatus('mandatory')
sRPCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCPortIndex.setStatus('mandatory')
sRPCType = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCType.setStatus('mandatory')
sRPCName = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCName.setStatus('mandatory')
sRPCFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCFirmwareVersion.setStatus('mandatory')
sRPCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCCurrent.setStatus('mandatory')
sRPCMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCMaxCurrent.setStatus('mandatory')
sRPCVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCVoltage.setStatus('mandatory')
sRPCPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCPower.setStatus('mandatory')
sRPCTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCTemperature.setStatus('mandatory')
sRPCRebootTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCRebootTimeout.setStatus('mandatory')
sRPCAllOutletsCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("reboot", 2), ("lockon", 3), ("lockoff", 4), ("unlock", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCAllOutletsCmd.setStatus('mandatory')
sRPCAllOutletsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCAllOutletsStatus.setStatus('mandatory')
sRPCCurrentAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCCurrentAlarmThreshold.setStatus('mandatory')
sRPCOverVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCOverVoltageThreshold.setStatus('mandatory')
sRPCUnderVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCUnderVoltageThreshold.setStatus('mandatory')
sRPCNumberOfOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCNumberOfOutlets.setStatus('mandatory')
sRPCCircuitBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCCircuitBreaker.setStatus('mandatory')
sRPCOverTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCOverTempThreshold.setStatus('mandatory')
sRPCUnitVA = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCUnitVA.setStatus('mandatory')
sRPCNumberOfBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCNumberOfBreakers.setStatus('mandatory')
sRPCLowCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCLowCurrentThreshold.setStatus('mandatory')
sRPCVoltageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCVoltageSource.setStatus('mandatory')
sRPCSourceSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCSourceSwitchCount.setStatus('mandatory')
sRPCNumberOfSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCNumberOfSensors.setStatus('mandatory')
sBTAModulesRPCModPortOutletTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 6), )
if mibBuilder.loadTexts: sBTAModulesRPCModPortOutletTable.setStatus('mandatory')
sBTAModulesRPCModPortOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 6, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sRPCOutletModuleIndex"), (0, "Baytech-MIB-401-4", "sRPCOutletPortIndex"), (0, "Baytech-MIB-401-4", "sRPCOutletIndex"))
if mibBuilder.loadTexts: sBTAModulesRPCModPortOutletEntry.setStatus('mandatory')
sRPCOutletModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCOutletModuleIndex.setStatus('mandatory')
sRPCOutletPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCOutletPortIndex.setStatus('mandatory')
sRPCOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCOutletIndex.setStatus('mandatory')
sRPCOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("reboot", 2), ("lockon", 3), ("lockoff", 4), ("unlock", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCOutletState.setStatus('mandatory')
sRPCOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCOutletName.setStatus('mandatory')
sBTAModulesRPCModPortGroupCmd = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesRPCModPortGroupCmd.setStatus('mandatory')
sRPCModPortBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10), )
if mibBuilder.loadTexts: sRPCModPortBreakersTable.setStatus('mandatory')
sRPCModPortBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sRPCBreakersModIndex"), (0, "Baytech-MIB-401-4", "sRPCBreakersPortIndex"), (0, "Baytech-MIB-401-4", "sRPCBreakersBreakersIndex"))
if mibBuilder.loadTexts: sRPCModPortBreakersEntry.setStatus('mandatory')
sRPCBreakersModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersModIndex.setStatus('mandatory')
sRPCBreakersPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersPortIndex.setStatus('mandatory')
sRPCBreakersBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersBreakersIndex.setStatus('mandatory')
sRPCBreakersCircuitBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersCircuitBreaker.setStatus('mandatory')
sRPCBreakersCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersCurrent.setStatus('mandatory')
sRPCBreakersMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersMaxCurrent.setStatus('mandatory')
sRPCBreakersVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersVoltage.setStatus('mandatory')
sRPCBreakersPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersPower.setStatus('mandatory')
sRPCBreakersVA = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCBreakersVA.setStatus('mandatory')
sRPCBreakersCurrentAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 3, 5, 10, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCBreakersCurrentAlarmThreshold.setStatus('mandatory')
sBTAModulesEnvironmentalObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1), )
if mibBuilder.loadTexts: sBTAModulesEnvironmentalObjectsTable.setStatus('mandatory')
sBTAModulesEnvironmentalObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sBTAModulesEnvironmentalModulesIndex"), (0, "Baytech-MIB-401-4", "sBTAModulesEnvironmentalSensorsIndex"))
if mibBuilder.loadTexts: sBTAModulesEnvironmentalObjectsEntry.setStatus('mandatory')
sBTAModulesEnvironmentalModulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalModulesIndex.setStatus('mandatory')
sBTAModulesEnvironmentalSensorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalSensorsIndex.setStatus('mandatory')
sBTAModulesEnvironmentalType = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalType.setStatus('mandatory')
sBTAModulesEnvironmentalName = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalName.setStatus('mandatory')
sBTAModulesEnvironmentalMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalMeasurement.setStatus('mandatory')
sBTAModulesEnvironmentalHiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalHiThreshold.setStatus('mandatory')
sBTAModulesEnvironmentalLoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalLoThreshold.setStatus('mandatory')
sBTAModulesEnvironmentalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalMax.setStatus('mandatory')
sBTAModulesEnvironmentalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalMin.setStatus('mandatory')
sBTAModulesEnvironmentalHiThresholdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalHiThresholdEn.setStatus('mandatory')
sBTAModulesEnvironmentalLoThresholdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalLoThresholdEn.setStatus('mandatory')
sBTAModulesEnvironmentalStateTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAModulesEnvironmentalStateTrapEn.setStatus('mandatory')
sRPCEnvironmentalObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2), )
if mibBuilder.loadTexts: sRPCEnvironmentalObjectsTable.setStatus('mandatory')
sRPCEnvironmentalObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1), ).setIndexNames((0, "Baytech-MIB-401-4", "sBTAEnvironmentalModuleIndex"), (0, "Baytech-MIB-401-4", "sBTAEnvironmentalPortIndex"), (0, "Baytech-MIB-401-4", "sBTAEnvironmentalSensorsIndex"))
if mibBuilder.loadTexts: sRPCEnvironmentalObjectsEntry.setStatus('mandatory')
sRPCEnvironmentalModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCEnvironmentalModuleIndex.setStatus('mandatory')
sRPCEnvironmentalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCEnvironmentalPortIndex.setStatus('mandatory')
sRPCEnvironmentalSensorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCEnvironmentalSensorsIndex.setStatus('mandatory')
sRPCEnvironmentalType = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCEnvironmentalType.setStatus('mandatory')
sRPCEnvironmentalName = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCEnvironmentalName.setStatus('mandatory')
sRPCEnvironmentalMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sRPCEnvironmentalMeasurement.setStatus('mandatory')
sRPCEnvironmentalHiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCEnvironmentalHiThreshold.setStatus('mandatory')
sRPCEnvironmentalLoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCEnvironmentalLoThreshold.setStatus('mandatory')
sRPCEnvironmentalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCEnvironmentalMax.setStatus('mandatory')
sRPCEnvironmentalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCEnvironmentalMin.setStatus('mandatory')
sRPCEnvironmentalHiThresholdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCEnvironmentalHiThresholdEn.setStatus('mandatory')
sRPCEnvironmentalLoThresholdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCEnvironmentalLoThresholdEn.setStatus('mandatory')
sRPCEnvironmentalStateTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 4779, 1, 6, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sRPCEnvironmentalStateTrapEn.setStatus('mandatory')
sBTAEnvironmentalAllTemperatureSensorsHiThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAEnvironmentalAllTemperatureSensorsHiThreshold.setStatus('mandatory')
sBTAEnvironmentalAllTemperatureSensorsLoThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAEnvironmentalAllTemperatureSensorsLoThreshold.setStatus('mandatory')
sBTAEnvironmentalAllTemperatureSensorsHiThresholdTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAEnvironmentalAllTemperatureSensorsHiThresholdTrapEnable.setStatus('mandatory')
sBTAEnvironmentalAllTemperatureSensorsLoThresholdTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAEnvironmentalAllTemperatureSensorsLoThresholdTrapEnable.setStatus('mandatory')
sBTAEnvironmentalAllSensorsStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4779, 1, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sBTAEnvironmentalAllSensorsStateTrapEnable.setStatus('mandatory')
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,1)).setObjects(("Baytech-MIB-401-4", "mtrapargsTimeTicks"))
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,2)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
outletOn = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,3)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTAOutletIndex"))
outletOff = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,4)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTAOutletIndex"))
outletReboot = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,5)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTAOutletIndex"))
outletLocked = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,6)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTAOutletIndex"))
outletUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,7)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTAOutletIndex"))
configChangeSNMP = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,8))
configChangeOutlet = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,9)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTAOutletIndex"))
accessViolationConsole = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,10)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
accessViolationNetwork = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,11)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
userPasswordChange = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,12)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,13)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
userLoggedIn = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,14)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
temperatureThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,15)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
temperatureThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,16)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
currentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,17)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
currentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,18)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
resetModulesEvent = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,19)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
resetModulesComplete = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,20)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
errorExecutingSNMPCommand = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,21)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
fileTransferComplete = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,22))
userTerminated = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,23)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
voltageOverThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,24)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
voltageOverThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,25)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
voltageUnderThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,26)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
voltageUnderThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,27)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
circuitBreakerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,28)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
rpcFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,29)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,30)).setObjects(("Baytech-MIB-401-4", "mtrapargsString"))
warningThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,31)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
warningThresholdViolationClear = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,32)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
emergencyThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,33)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
emergencyThresholdViolationClear = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,34)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
circuitBreakerAlarmClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,35)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
currentUnderThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,36)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
currentUnderThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,37)).setObjects(("Baytech-MIB-401-4", "mtrapargsInteger"))
voltageSourceChangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,38)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTAVoltageSource"), ("Baytech-MIB-401-4", "sBTASourceSwitchCount"))
sensorTempThreshHiAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,39)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTASensorIndex"))
sensorTempThreshHiAlarmClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,40)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTASensorIndex"))
sensorTempThreshLoAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,41)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTASensorIndex"))
sensorTempThreshLoAlarmClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,42)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTASensorIndex"))
sensorStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,43)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTASensorIndex"))
configChangeSensor = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,44)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTASensorIndex"))
sensorTypeChange = NotificationType((1, 3, 6, 1, 4, 1, 4779) + (0,45)).setObjects(("Baytech-MIB-401-4", "sBTAModuleIndex"), ("Baytech-MIB-401-4", "sBTASensorIndex"))
mibBuilder.exportSymbols("Baytech-MIB-401-4", trapIndex=trapIndex, sBTAFileTransferEnableUpgradeFTPFileTransfer=sBTAFileTransferEnableUpgradeFTPFileTransfer, sRPCEnvironmentalType=sRPCEnvironmentalType, sBTAModulesModulesInstalled=sBTAModulesModulesInstalled, sBTAControlUserAddress=sBTAControlUserAddress, sBTAModulesRPCFirmwareVersion=sBTAModulesRPCFirmwareVersion, sBTANetworkConfigRadius=sBTANetworkConfigRadius, sBTAIdentUnitName=sBTAIdentUnitName, sRPCRebootTimeout=sRPCRebootTimeout, warningThresholdViolation=warningThresholdViolation, configChangeOutlet=configChangeOutlet, sBTAModulesRPCUnderVoltageThreshold=sBTAModulesRPCUnderVoltageThreshold, sBTAModulesRPCCurrent=sBTAModulesRPCCurrent, sBTAModulesRPCCurrentGroupsCurrentEntry=sBTAModulesRPCCurrentGroupsCurrentEntry, sBTAModulesRPCPower=sBTAModulesRPCPower, sBTAModulesEnvironmentalMax=sBTAModulesEnvironmentalMax, sBTAModulesRPCVoltage=sBTAModulesRPCVoltage, sBTANetworkConfigSNMPTrapReceiverTable=sBTANetworkConfigSNMPTrapReceiverTable, sBTANetworkConfigSNMPReadWriteCommunity=sBTANetworkConfigSNMPReadWriteCommunity, currentThresholdViolation=currentThresholdViolation, sBTAModulesRPCModPortTable=sBTAModulesRPCModPortTable, sensorTempThreshHiAlarmClearedTrap=sensorTempThreshHiAlarmClearedTrap, sBTAModulesRPCModPortOutletEntry=sBTAModulesRPCModPortOutletEntry, sRPCBreakersVA=sRPCBreakersVA, sRPCSourceSwitchCount=sRPCSourceSwitchCount, sBTAModulesRPCIndex=sBTAModulesRPCIndex, sRPCEnvironmentalHiThresholdEn=sRPCEnvironmentalHiThresholdEn, sBTAModulesRPCTemperature=sBTAModulesRPCTemperature, sBTASourceSwitchCount=sBTASourceSwitchCount, sBTAModulesEnvironmentalModulesIndex=sBTAModulesEnvironmentalModulesIndex, sBTAModulesRPCOutletIndex=sBTAModulesRPCOutletIndex, sBTAEnvironmentalAllTemperatureSensorsHiThresholdTrapEnable=sBTAEnvironmentalAllTemperatureSensorsHiThresholdTrapEnable, sBTAEnvironmentalAllTemperatureSensorsLoThresholdTrapEnable=sBTAEnvironmentalAllTemperatureSensorsLoThresholdTrapEnable, sBTAModulesRPCBreakersMaxCurrent=sBTAModulesRPCBreakersMaxCurrent, circuitBreakerAlarmClearTrap=circuitBreakerAlarmClearTrap, sRPCAllOutletsStatus=sRPCAllOutletsStatus, sBTAModulesRPCName=sBTAModulesRPCName, mtrapargsString=mtrapargsString, emergencyThresholdViolation=emergencyThresholdViolation, sBTAIdent=sBTAIdent, sRPCOverTempThreshold=sRPCOverTempThreshold, sBTAModulesRPCBreakersModulesIndex=sBTAModulesRPCBreakersModulesIndex, sBTAModulesSerial=sBTAModulesSerial, userLoggedIn=userLoggedIn, sRPCLowCurrentThreshold=sRPCLowCurrentThreshold, sRPCOutletName=sRPCOutletName, sBTAOutletIndex=sBTAOutletIndex, sRPCOutletIndex=sRPCOutletIndex, sBTAModulesRPCOverTempThreshold=sBTAModulesRPCOverTempThreshold, communicationLost=communicationLost, userAdded=userAdded, configChangeSensor=configChangeSensor, sBTAControlUserTable=sBTAControlUserTable, sBTANetworkConfigBootpEnable=sBTANetworkConfigBootpEnable, sBTANetworkConfigSSHEnable=sBTANetworkConfigSSHEnable, sBTAModulesRPCBreakersCircuitBreaker=sBTAModulesRPCBreakersCircuitBreaker, sBTAControlResetModules=sBTAControlResetModules, sRPCPower=sRPCPower, sBTAModulesEnvironmentalName=sBTAModulesEnvironmentalName, sBTAModulesEnvironmentalLoThreshold=sBTAModulesEnvironmentalLoThreshold, sBTAControlUserName=sBTAControlUserName, sBTAEnvironmentalAllTemperatureSensorsLoThreshold=sBTAEnvironmentalAllTemperatureSensorsLoThreshold, sRPCCurrent=sRPCCurrent, warningThresholdViolationClear=warningThresholdViolationClear, sBTAModulesNumberOfModules=sBTAModulesNumberOfModules, sBTAIdentFirmwareRev=sBTAIdentFirmwareRev, sBTAModulesRPCAllOutletsCmd=sBTAModulesRPCAllOutletsCmd, sBTAModulesRPCAllOutletsStatus=sBTAModulesRPCAllOutletsStatus, rpcGroup=rpcGroup, rpcFailureAlarm=rpcFailureAlarm, sBTAModulesEnvironmentalObjectsEntry=sBTAModulesEnvironmentalObjectsEntry, sRPCOutletPortIndex=sRPCOutletPortIndex, sBTAModulesRPCOutletState=sBTAModulesRPCOutletState, sBTAModulesEnvironmentalHiThreshold=sBTAModulesEnvironmentalHiThreshold, sBTAModuleIndex=sBTAModuleIndex, userTerminated=userTerminated, sBTANetworkConfigRadiusPrimaryServer=sBTANetworkConfigRadiusPrimaryServer, sRPCBreakersCurrentAlarmThreshold=sRPCBreakersCurrentAlarmThreshold, sRPCVoltageSource=sRPCVoltageSource, emergencyThreshold=emergencyThreshold, sBTAModulesEnvironmentalStateTrapEn=sBTAModulesEnvironmentalStateTrapEn, currentUnderThresholdViolation=currentUnderThresholdViolation, sBTAModulesRPCLowCurrentThreshold=sBTAModulesRPCLowCurrentThreshold, sBTANetworkConfigDHCPEnable=sBTANetworkConfigDHCPEnable, mtrapargs=mtrapargs, sBTANetworkConfigSNMPReadOnlyCommunity=sBTANetworkConfigSNMPReadOnlyCommunity, sBTAModulesRPCNumberOfSensors=sBTAModulesRPCNumberOfSensors, sBTAEnvironmental=sBTAEnvironmental, sBTAModulesResetModulesCmd=sBTAModulesResetModulesCmd, groupCurrentIndex=groupCurrentIndex, sRPCEnvironmentalPortIndex=sRPCEnvironmentalPortIndex, sBTAModulesRPCModPortEntry=sBTAModulesRPCModPortEntry, sRPCEnvironmentalName=sRPCEnvironmentalName, voltageSourceChangeAlarm=voltageSourceChangeAlarm, sRPCOverVoltageThreshold=sRPCOverVoltageThreshold, sRPCUnderVoltageThreshold=sRPCUnderVoltageThreshold, warningThreshold=warningThreshold, sBTAControlUserTerminateUser=sBTAControlUserTerminateUser, sRPCName=sRPCName, sRPCOutletState=sRPCOutletState, sRPCBreakersMaxCurrent=sRPCBreakersMaxCurrent, sBTAControlNumOfLoggedUsers=sBTAControlNumOfLoggedUsers, sBTAModulesRPCBreakersPower=sBTAModulesRPCBreakersPower, sRPCEnvironmentalMeasurement=sRPCEnvironmentalMeasurement, sRPCTemperature=sRPCTemperature, currentUnderThresholdViolationCleared=currentUnderThresholdViolationCleared, sBTAModulesRPCTable=sBTAModulesRPCTable, mtrapargsIpAddress=mtrapargsIpAddress, sRPCBreakersModIndex=sRPCBreakersModIndex, temperatureThresholdViolationCleared=temperatureThresholdViolationCleared, sBTAModulesRPC=sBTAModulesRPC, sBTAModules=sBTAModules, sBTAModulesNumberOfIntelligentModules=sBTAModulesNumberOfIntelligentModules, sBTAModulesRPCBreakersCurrentAlarmThreshold=sBTAModulesRPCBreakersCurrentAlarmThreshold, sRPCEnvironmentalLoThresholdEn=sRPCEnvironmentalLoThresholdEn, sBTAModulesRPCRebootTimeout=sBTAModulesRPCRebootTimeout, sBTAModulesRPCEntry=sBTAModulesRPCEntry, sRPCNumberOfBreakers=sRPCNumberOfBreakers, sBTANetworkConfigSNMPNumTrapReceivers=sBTANetworkConfigSNMPNumTrapReceivers, sRPCPortIndex=sRPCPortIndex, sBTAControlUserEntry=sBTAControlUserEntry, sRPCUnitVA=sRPCUnitVA, sensorTypeChange=sensorTypeChange, sRPCVoltage=sRPCVoltage, voltageOverThresholdViolationCleared=voltageOverThresholdViolationCleared, sBTAFileTransfer=sBTAFileTransfer, sBTANetworkConfigRadiusEnable=sBTANetworkConfigRadiusEnable, sBTANetworkConfigWebActivityTimeout=sBTANetworkConfigWebActivityTimeout, sBTAEnvironmentalAllSensorsStateTrapEnable=sBTAEnvironmentalAllSensorsStateTrapEnable, errorExecutingSNMPCommand=errorExecutingSNMPCommand, sRPCModPortBreakersTable=sRPCModPortBreakersTable, mtrapargsGauge=mtrapargsGauge, resetModulesEvent=resetModulesEvent, sBTAModulesRPCSourceSwitchCount=sBTAModulesRPCSourceSwitchCount, sBTAModulesRPCBreakersEntry=sBTAModulesRPCBreakersEntry, sBTAEnvironmentalAllTemperatureSensorsHiThreshold=sBTAEnvironmentalAllTemperatureSensorsHiThreshold, circuitBreakerAlarm=circuitBreakerAlarm, btadevices=btadevices, voltageOverThresholdViolation=voltageOverThresholdViolation, sBTAModulesRPCModPortGroupCmd=sBTAModulesRPCModPortGroupCmd, sRPCEnvironmentalObjectsEntry=sRPCEnvironmentalObjectsEntry, userPasswordChange=userPasswordChange, sBTANetworkConfig=sBTANetworkConfig, sBTASensorIndex=sBTASensorIndex, sBTAPortIndex=sBTAPortIndex, sensorStateChangeTrap=sensorStateChangeTrap, sBTAModulesEnvironmentalHiThresholdEn=sBTAModulesEnvironmentalHiThresholdEn, sRPCEnvironmentalObjectsTable=sRPCEnvironmentalObjectsTable, sRPCEnvironmentalSensorsIndex=sRPCEnvironmentalSensorsIndex, sensorTempThreshHiAlarmTrap=sensorTempThreshHiAlarmTrap, sBTANetworkConfigRadiusLocalLogin=sBTANetworkConfigRadiusLocalLogin, userDeleted=userDeleted, sRPCBreakersCircuitBreaker=sRPCBreakersCircuitBreaker, sBTAControlResetUnit=sBTAControlResetUnit, sBTAControlUserConnection=sBTAControlUserConnection, sRPCBreakersBreakersIndex=sRPCBreakersBreakersIndex, sBTAModulesRPCBreakersVA=sBTAModulesRPCBreakersVA, sBTAModulesRPCBreakersVoltage=sBTAModulesRPCBreakersVoltage, sBTAModulesRPCType=sBTAModulesRPCType, sBTAControlUserConnModule=sBTAControlUserConnModule, sBTANetworkConfigWEB=sBTANetworkConfigWEB, sBTAModulesEnvironmentalSensorsIndex=sBTAModulesEnvironmentalSensorsIndex, outletReboot=outletReboot, sBTAModulesRPCOutletModuleIndex=sBTAModulesRPCOutletModuleIndex, temperatureThresholdViolation=temperatureThresholdViolation, sRPCEnvironmentalHiThreshold=sRPCEnvironmentalHiThreshold, sRPCCircuitBreaker=sRPCCircuitBreaker, sRPCBreakersPortIndex=sRPCBreakersPortIndex, baytech=baytech, sBTAVoltageSource=sBTAVoltageSource, sBTAModulesRPCModPortOutletTable=sBTAModulesRPCModPortOutletTable, voltageUnderThresholdViolation=voltageUnderThresholdViolation, sBTAModulesRPCOutletName=sBTAModulesRPCOutletName, sRPCCurrentAlarmThreshold=sRPCCurrentAlarmThreshold, sBTAModulesEnvironmentalMin=sBTAModulesEnvironmentalMin, communicationEstablished=communicationEstablished, sBTAModulesNumberOfRPCModules=sBTAModulesNumberOfRPCModules, voltageUnderThresholdViolationCleared=voltageUnderThresholdViolationCleared, groupCurrent=groupCurrent, sensorTempThreshLoAlarmClearedTrap=sensorTempThreshLoAlarmClearedTrap, sBTAControl=sBTAControl, sBTANetworkConfigSNMP=sBTANetworkConfigSNMP, mtrapargsInteger=mtrapargsInteger, sRPCFirmwareVersion=sRPCFirmwareVersion, sRPCAllOutletsCmd=sRPCAllOutletsCmd, sRPCEnvironmentalMax=sRPCEnvironmentalMax, sRPCBreakersPower=sRPCBreakersPower, sBTAModulesRPCCurrentAlarmThreshold=sBTAModulesRPCCurrentAlarmThreshold, sRPCBreakersCurrent=sRPCBreakersCurrent, sBTAModulesRPCOutletEntry=sBTAModulesRPCOutletEntry, sBTANetworkConfigRadiusSecondaryServer=sBTANetworkConfigRadiusSecondaryServer, sBTAModulesRPCUnitVA=sBTAModulesRPCUnitVA, sBTANetworkConfigDirectConnEnable=sBTANetworkConfigDirectConnEnable, sBTABreakerIndex=sBTABreakerIndex, sBTANetworkConfigActivityTimeout=sBTANetworkConfigActivityTimeout, sBTANetworkConfigSNMPTrapReceiverEntry=sBTANetworkConfigSNMPTrapReceiverEntry, receiverAddress=receiverAddress, outletUnlocked=outletUnlocked, sBTANetworkConfigWebSecureEnable=sBTANetworkConfigWebSecureEnable, sBTAControlUserIndex=sBTAControlUserIndex, sRPCModuleIndex=sRPCModuleIndex, sBTAModulesEnvironmentalType=sBTAModulesEnvironmentalType, mtrapargsTimeTicks=mtrapargsTimeTicks, outletOff=outletOff, emergencyThresholdViolationClear=emergencyThresholdViolationClear, currentThresholdViolationCleared=currentThresholdViolationCleared, sBTAModulesEnvironmentalLoThresholdEn=sBTAModulesEnvironmentalLoThresholdEn, sBTANetworkConfigTelnetEnable=sBTANetworkConfigTelnetEnable, fileTransferComplete=fileTransferComplete, sBTAModulesRPCNumberOfBreakers=sBTAModulesRPCNumberOfBreakers, sBTAModulesEnvironmentalObjectsTable=sBTAModulesEnvironmentalObjectsTable, outletLocked=outletLocked, sBTANetworkConfigWebEnable=sBTANetworkConfigWebEnable, sRPCEnvironmentalLoThreshold=sRPCEnvironmentalLoThreshold, sRPCEnvironmentalMin=sRPCEnvironmentalMin, sRPCOutletModuleIndex=sRPCOutletModuleIndex, resetModulesComplete=resetModulesComplete, sBTAModulesRPCMaxCurrent=sBTAModulesRPCMaxCurrent, sBTAModulesRPCCircuitBreaker=sBTAModulesRPCCircuitBreaker, sBTAModulesRPCVoltageSource=sBTAModulesRPCVoltageSource, sBTAControlUserConnPort=sBTAControlUserConnPort, sBTAModulesRPCBreakersCurrent=sBTAModulesRPCBreakersCurrent, sRPCBreakersVoltage=sRPCBreakersVoltage, sBTAModulesRPCNumberOfOutlets=sBTAModulesRPCNumberOfOutlets, sBTAModulesRPCBreakersTable=sBTAModulesRPCBreakersTable, sRPCNumberOfOutlets=sRPCNumberOfOutlets, sRPCEnvironmentalModuleIndex=sRPCEnvironmentalModuleIndex, sRPCEnvironmentalStateTrapEn=sRPCEnvironmentalStateTrapEn, configChangeSNMP=configChangeSNMP, accessViolationConsole=accessViolationConsole, sBTAModulesEnvironmentalMeasurement=sBTAModulesEnvironmentalMeasurement, sBTAModulesRPCBreakersBreakersIndex=sBTAModulesRPCBreakersBreakersIndex, sBTAModulesRPCOverVoltageThreshold=sBTAModulesRPCOverVoltageThreshold, sRPCModPortBreakersEntry=sRPCModPortBreakersEntry, sRPCType=sRPCType, sBTAModulesModem=sBTAModulesModem, sBTAModulesRPCGroupCmd=sBTAModulesRPCGroupCmd, outletOn=outletOn, sRPCMaxCurrent=sRPCMaxCurrent, sBTANetworkConfigWebLoginEnable=sBTANetworkConfigWebLoginEnable, sBTAModulesRPCOutletTable=sBTAModulesRPCOutletTable, sRPCNumberOfSensors=sRPCNumberOfSensors, accessViolationNetwork=accessViolationNetwork, sBTAModulesRPCCurrentGroupsCurrentTable=sBTAModulesRPCCurrentGroupsCurrentTable, sensorTempThreshLoAlarmTrap=sensorTempThreshLoAlarmTrap, sBTAIdentSerialNumber=sBTAIdentSerialNumber)
