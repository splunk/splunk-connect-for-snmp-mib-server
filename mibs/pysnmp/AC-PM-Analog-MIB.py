#
# PySNMP MIB module AC-PM-Analog-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PM-Analog-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:54:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
acPerformance, acRegistrations, audioCodes, acProducts, acGeneric, acBoardMibs = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acPerformance", "acRegistrations", "audioCodes", "acProducts", "acGeneric", "acBoardMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, Integer32, Bits, MibIdentifier, IpAddress, iso, Gauge32, enterprises, TimeTicks, ModuleIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "Integer32", "Bits", "MibIdentifier", "IpAddress", "iso", "Gauge32", "enterprises", "TimeTicks", "ModuleIdentity", "Unsigned32", "NotificationType")
TAddress, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "DisplayString", "TextualConvention", "DateAndTime")
acPMAnalog = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 10, 9))
if mibBuilder.loadTexts: acPMAnalog.setLastUpdated('200611-01926Z')
if mibBuilder.loadTexts: acPMAnalog.setOrganization('AudioCodes Ltd')
acPMAnalogConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 9, 1))
acPMAnalogConfigurationPeriodLength = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 894780))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAnalogConfigurationPeriodLength.setStatus('current')
acPMAnalogConfigurationResetTotalCounters = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCountersDone", 1), ("resetTotalCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAnalogConfigurationResetTotalCounters.setStatus('current')
acPMAnalogUtilsAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 9, 1, 31))
acPMAnalogUtilsAttributesOffHookChannelsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 9, 1, 31, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAnalogUtilsAttributesOffHookChannelsHighThreshold.setStatus('current')
acPMAnalogUtilsAttributesOffHookChannelsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 9, 1, 31, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAnalogUtilsAttributesOffHookChannelsLowThreshold.setStatus('current')
acPMAnalogData = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2))
acPMAnalogDataAcPMAnalogTimeFromStartOfInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAnalogDataAcPMAnalogTimeFromStartOfInterval.setStatus('current')
acPMAnalogUtils = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31))
acPMOffHookChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21), )
if mibBuilder.loadTexts: acPMOffHookChannelsTable.setStatus('current')
acPMOffHookChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1), ).setIndexNames((0, "AC-PM-Analog-MIB", "acPMOffHookChannelsInterval"))
if mibBuilder.loadTexts: acPMOffHookChannelsEntry.setStatus('current')
acPMOffHookChannelsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMOffHookChannelsInterval.setStatus('current')
acPMOffHookChannelsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsVal.setStatus('current')
acPMOffHookChannelsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsAverage.setStatus('current')
acPMOffHookChannelsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsMax.setStatus('current')
acPMOffHookChannelsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsMin.setStatus('current')
acPMOffHookChannelsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsVolume.setStatus('current')
acPMOffHookChannelsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsTimeBelowLowThreshold.setStatus('current')
acPMOffHookChannelsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsTimeBetweenThresholds.setStatus('current')
acPMOffHookChannelsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsTimeAboveHighThreshold.setStatus('current')
acPMOffHookChannelsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 9, 2, 31, 21, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMOffHookChannelsFullDayAverage.setStatus('current')
mibBuilder.exportSymbols("AC-PM-Analog-MIB", acPMOffHookChannelsTimeBelowLowThreshold=acPMOffHookChannelsTimeBelowLowThreshold, acPMOffHookChannelsTable=acPMOffHookChannelsTable, acPMAnalogUtils=acPMAnalogUtils, acPMOffHookChannelsMax=acPMOffHookChannelsMax, acPMOffHookChannelsInterval=acPMOffHookChannelsInterval, acPMOffHookChannelsVal=acPMOffHookChannelsVal, acPMAnalogUtilsAttributesOffHookChannelsLowThreshold=acPMAnalogUtilsAttributesOffHookChannelsLowThreshold, acPMOffHookChannelsTimeBetweenThresholds=acPMOffHookChannelsTimeBetweenThresholds, acPMAnalogDataAcPMAnalogTimeFromStartOfInterval=acPMAnalogDataAcPMAnalogTimeFromStartOfInterval, acPMAnalogConfiguration=acPMAnalogConfiguration, acPMOffHookChannelsMin=acPMOffHookChannelsMin, acPMAnalogConfigurationPeriodLength=acPMAnalogConfigurationPeriodLength, acPMAnalogData=acPMAnalogData, acPMAnalogConfigurationResetTotalCounters=acPMAnalogConfigurationResetTotalCounters, acPMAnalogUtilsAttributesOffHookChannelsHighThreshold=acPMAnalogUtilsAttributesOffHookChannelsHighThreshold, acPMOffHookChannelsVolume=acPMOffHookChannelsVolume, acPMOffHookChannelsEntry=acPMOffHookChannelsEntry, acPMAnalog=acPMAnalog, PYSNMP_MODULE_ID=acPMAnalog, acPMAnalogUtilsAttributes=acPMAnalogUtilsAttributes, acPMOffHookChannelsAverage=acPMOffHookChannelsAverage, acPMOffHookChannelsFullDayAverage=acPMOffHookChannelsFullDayAverage, acPMOffHookChannelsTimeAboveHighThreshold=acPMOffHookChannelsTimeAboveHighThreshold)
