#
# PySNMP MIB module CHIPENET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPENET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Bits, Gauge32, iso, IpAddress, ObjectIdentity, MibIdentifier, Counter32, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Gauge32", "iso", "IpAddress", "ObjectIdentity", "MibIdentifier", "Counter32", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "enterprises", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
olEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1), )
if mibBuilder.loadTexts: olEnetStatsTable.setStatus('mandatory')
olEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1), ).setIndexNames((0, "CHIPENET-MIB", "olEnetStatsNetID"))
if mibBuilder.loadTexts: olEnetStatsEntry.setStatus('mandatory')
olEnetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsNetID.setStatus('mandatory')
olEnetStatsFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFramesRcvdOks.setStatus('mandatory')
olEnetStatsOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsOctetsRcvdOks.setStatus('mandatory')
olEnetStatsMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsMcastRcvdOks.setStatus('mandatory')
olEnetStatsBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsBcastRcvdOks.setStatus('mandatory')
olEnetStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFrameTooLongs.setStatus('mandatory')
olEnetStatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsAlignmentErrors.setStatus('mandatory')
olEnetStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFCSErrors.setStatus('mandatory')
olEnetStatsRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsRunts.setStatus('mandatory')
olEnetStatsLocalColls = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsLocalColls.setStatus('mandatory')
olEnetStatsModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2), )
if mibBuilder.loadTexts: olEnetStatsModTable.setStatus('mandatory')
olEnetStatsModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1), ).setIndexNames((0, "CHIPENET-MIB", "olEnetStatsModNetID"), (0, "CHIPENET-MIB", "olEnetStatsModSlotIndex"))
if mibBuilder.loadTexts: olEnetStatsModEntry.setStatus('mandatory')
olEnetStatsModNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModNetID.setStatus('mandatory')
olEnetStatsModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModSlotIndex.setStatus('mandatory')
olEnetStatsModFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFramesRcvdOks.setStatus('mandatory')
olEnetStatsModOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModOctetsRcvdOks.setStatus('mandatory')
olEnetStatsModMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModMcastRcvdOks.setStatus('mandatory')
olEnetStatsModBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModBcastRcvdOks.setStatus('mandatory')
olEnetStatsModFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFrameTooLongs.setStatus('mandatory')
olEnetStatsModAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModAlignmentErrors.setStatus('mandatory')
olEnetStatsModFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFCSErrors.setStatus('mandatory')
olEnetStatsModRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModRunts.setStatus('mandatory')
olEnetStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3), )
if mibBuilder.loadTexts: olEnetStatsPortTable.setStatus('mandatory')
olEnetStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1), ).setIndexNames((0, "CHIPENET-MIB", "olEnetStatsPortSlotIndex"), (0, "CHIPENET-MIB", "olEnetStatsPortIndex"))
if mibBuilder.loadTexts: olEnetStatsPortEntry.setStatus('mandatory')
olEnetStatsPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortNetID.setStatus('mandatory')
olEnetStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortSlotIndex.setStatus('mandatory')
olEnetStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortIndex.setStatus('mandatory')
olEnetStatsPortFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFramesRcvdOks.setStatus('mandatory')
olEnetStatsPortOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortOctetsRcvdOks.setStatus('mandatory')
olEnetStatsPortMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortMcastRcvdOks.setStatus('mandatory')
olEnetStatsPortBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortBcastRcvdOks.setStatus('mandatory')
olEnetStatsPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFrameTooLongs.setStatus('mandatory')
olEnetStatsPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortAlignmentErrors.setStatus('mandatory')
olEnetStatsPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFCSErrors.setStatus('mandatory')
olEnetStatsPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortRunts.setStatus('mandatory')
olEnetStatsPortSrcAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortSrcAddrChanges.setStatus('mandatory')
olEnetStatsPortLastSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortLastSrcAddr.setStatus('mandatory')
olEnetStatsPortLastErrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortLastErrAddr.setStatus('mandatory')
olEnetMapTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4), )
if mibBuilder.loadTexts: olEnetMapTable.setStatus('mandatory')
olEnetMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1), ).setIndexNames((0, "CHIPENET-MIB", "olEnetMapNetID"), (0, "CHIPENET-MIB", "olEnetMapAddress"))
if mibBuilder.loadTexts: olEnetMapEntry.setStatus('mandatory')
olEnetMapNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapNetID.setStatus('mandatory')
olEnetMapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapAddress.setStatus('mandatory')
olEnetMapSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapSlotIndex.setStatus('mandatory')
olEnetMapPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapPortIndex.setStatus('mandatory')
olEnetMapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapFrames.setStatus('mandatory')
olEnetMapOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapOctets.setStatus('mandatory')
olEnetMapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapTime.setStatus('mandatory')
mibBuilder.exportSymbols("CHIPENET-MIB", olEnetStatsRunts=olEnetStatsRunts, olEnetStatsPortFrameTooLongs=olEnetStatsPortFrameTooLongs, ol5208MTP=ol5208MTP, ol51nnMAUIM=ol51nnMAUIM, olEnetStatsModSlotIndex=olEnetStatsModSlotIndex, olEnetStatsModFrameTooLongs=olEnetStatsModFrameTooLongs, portGroup=portGroup, alarmGroup=alarmGroup, ol50nnMCTL=ol50nnMCTL, ol52nnBTT=ol52nnBTT, ol51nnMMGT=ol51nnMMGT, olThreshControl=olThreshControl, fmm=fmm, ol51nnMFBP=ol51nnMFBP, ol51nnMFL=ol51nnMFL, chipExperiment=chipExperiment, chipDownload=chipDownload, chipTFTP=chipTFTP, chipProducts=chipProducts, olEnetStatsPortTable=olEnetStatsPortTable, olEnetMapPortIndex=olEnetMapPortIndex, olTRnet=olTRnet, ol51nnMAUIF=ol51nnMAUIF, ol51nnMFB=ol51nnMFB, olEnetStatsAlignmentErrors=olEnetStatsAlignmentErrors, ol53nnMFBMIC=ol53nnMFBMIC, dot1dBridge=dot1dBridge, olNets=olNets, chipmib02=chipmib02, ol53nnMSTP=ol53nnMSTP, ol51nnMTPPL=ol51nnMTPPL, olEnetMapTable=olEnetMapTable, olEnetStatsModFramesRcvdOks=olEnetStatsModFramesRcvdOks, ol52nnMTP=ol52nnMTP, olEnetStatsMcastRcvdOks=olEnetStatsMcastRcvdOks, ol50nnMHCTL=ol50nnMHCTL, olEnetMapEntry=olEnetMapEntry, olEnetStatsTable=olEnetStatsTable, olEnetStatsEntry=olEnetStatsEntry, olEnv=olEnv, workGroupHub=workGroupHub, online=online, olEnetStatsPortNetID=olEnetStatsPortNetID, ol51nnMTP=ol51nnMTP, hubGroup=hubGroup, olEnetStatsModOctetsRcvdOks=olEnetStatsModOctetsRcvdOks, olEnetStatsLocalColls=olEnetStatsLocalColls, softwareGroup=softwareGroup, ol52nnMMGT=ol52nnMMGT, ol51nnMBNC=ol51nnMBNC, chipExpTokenRing=chipExpTokenRing, emm=emm, olEnetMapAddress=olEnetMapAddress, olEnetStatsFCSErrors=olEnetStatsFCSErrors, ol53nnMMGT=ol53nnMMGT, chipBridge=chipBridge, chipGen=chipGen, olAlarm=olAlarm, ol50nnMRCTL=ol50nnMRCTL, olEnetMapOctets=olEnetMapOctets, olSpecMods=olSpecMods, hardwareGroup=hardwareGroup, ol51nnMTS=ol51nnMTS, ol53nnMFIBST=ol53nnMFIBST, ol51nnMUTP=ol51nnMUTP, olEnetStatsFrameTooLongs=olEnetStatsFrameTooLongs, olEnetStatsPortSlotIndex=olEnetStatsPortSlotIndex, olThresh=olThresh, olEnetStatsPortOctetsRcvdOks=olEnetStatsPortOctetsRcvdOks, olModules=olModules, ol51nnMTPCL=ol51nnMTPCL, olEnetStatsPortLastSrcAddr=olEnetStatsPortLastSrcAddr, focus1=focus1, chipcom=chipcom, ol51nnMFP=ol51nnMFP, olEnet=olEnet, ol51nnRES=ol51nnRES, hubSysGroup=hubSysGroup, olEnetMapFrames=olEnetMapFrames, ol51nnBEE=ol51nnBEE, trmm=trmm, olEnetStatsNetID=olEnetStatsNetID, olEnetStatsModFCSErrors=olEnetStatsModFCSErrors, midnight=midnight, olEnetStatsModMcastRcvdOks=olEnetStatsModMcastRcvdOks, olEnetStatsModTable=olEnetStatsModTable, ol51nnREE=ol51nnREE, olEnetMapSlotIndex=olEnetMapSlotIndex, chipTTY=chipTTY, chipEcho=chipEcho, olEnetStatsPortAlignmentErrors=olEnetStatsPortAlignmentErrors, olEnetMapNetID=olEnetMapNetID, ol51nnIx=ol51nnIx, olEnetStatsBcastRcvdOks=olEnetStatsBcastRcvdOks, olEnetStatsPortFCSErrors=olEnetStatsPortFCSErrors, olEnetStatsPortEntry=olEnetStatsPortEntry, olEnetMapTime=olEnetMapTime, olEnetStatsPortRunts=olEnetStatsPortRunts, olEnetStatsFramesRcvdOks=olEnetStatsFramesRcvdOks, olEnetStatsModNetID=olEnetStatsModNetID, olEnetStatsPortLastErrAddr=olEnetStatsPortLastErrAddr, dot5=dot5, oebm=oebm, ol52nnMFR=ol52nnMFR, olEnetStatsPortMcastRcvdOks=olEnetStatsPortMcastRcvdOks, oeim=oeim, olEnetStatsModRunts=olEnetStatsModRunts, olEnetStatsPortIndex=olEnetStatsPortIndex, olEnetStatsOctetsRcvdOks=olEnetStatsOctetsRcvdOks, olEnetStatsPortFramesRcvdOks=olEnetStatsPortFramesRcvdOks, olEnetStatsModBcastRcvdOks=olEnetStatsModBcastRcvdOks, olEnetStatsModEntry=olEnetStatsModEntry, olGroups=olGroups, ol51nnMTPL=ol51nnMTPL, boardGroup=boardGroup, ol51nnMFIB=ol51nnMFIB, olEnetStatsModAlignmentErrors=olEnetStatsModAlignmentErrors, olAgents=olAgents, olEnetStatsPortBcastRcvdOks=olEnetStatsPortBcastRcvdOks, olNet=olNet, olEnetStatsPortSrcAddrChanges=olEnetStatsPortSrcAddrChanges, olConc=olConc, olFDDInet=olFDDInet)
