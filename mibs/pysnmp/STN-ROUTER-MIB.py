#
# PySNMP MIB module STN-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-ROUTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, TimeTicks, Integer32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, IpAddress, Bits, Unsigned32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "TimeTicks", "Integer32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "Unsigned32", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
stnNotification, stnSystems = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnNotification", "stnSystems")
stnEngineIndex, stnEngineSlot, stnEngineCpu = mibBuilder.importSymbols("STN-CHASSIS-MIB", "stnEngineIndex", "stnEngineSlot", "stnEngineCpu")
stnRouter = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 7))
if mibBuilder.loadTexts: stnRouter.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnRouter.setOrganization('Spring Tide Networks, Inc.')
stnRouterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1))
stnRouterMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 2))
stnRouterNAT = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5))
stnRouterVEI = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 6))
stnRouterAtmVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 7))
stnRouterVimuxMpls = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 8))
stnRouterVTI = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 9))
class InterfaceConnectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))
    namedValues = NamedValues(("customer", 1), ("provider", 2), ("ppp", 4), ("pppoe", 5), ("home", 6))

class OperationState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unassigned", 1), ("bufpend", 2), ("assignpend", 3), ("assigned", 4), ("unassignbufpend", 5), ("unassignpend", 6), ("failedassign", 7), ("error", 8))

stnRouterTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1), )
if mibBuilder.loadTexts: stnRouterTable.setStatus('current')
stnRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1), ).setIndexNames((0, "STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnRouterEntry.setStatus('current')
stnRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterIndex.setStatus('current')
stnRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("customer", 1), ("provider", 2), ("admin", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterType.setStatus('current')
stnRouterState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 3), OperationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterState.setStatus('current')
stnRouterEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterEngineID.setStatus('current')
stnRouterHomeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterHomeIpAddress.setStatus('current')
stnRouterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterEnabled.setStatus('current')
stnRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterName.setStatus('current')
stnRouterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterUpTime.setStatus('current')
stnRouterActiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterActiveSlot.setStatus('current')
stnRouterActiveCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterActiveCpu.setStatus('current')
stnRouterConfiguredSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterConfiguredSlot.setStatus('current')
stnRouterConfiguredCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterConfiguredCpu.setStatus('current')
stnRouterStandbySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterStandbySlot.setStatus('current')
stnRouterStandbyCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterStandbyCpu.setStatus('current')
stnRouterReassignOnFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterReassignOnFault.setStatus('current')
stnRouterServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterServiceName.setStatus('current')
stnRouterServiceDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterServiceDomain.setStatus('current')
stnRouterDefaultPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRouterDefaultPolicyAction.setStatus('current')
stnSubnetInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2), )
if mibBuilder.loadTexts: stnSubnetInterfaceTable.setStatus('current')
stnSubnetInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1), ).setIndexNames((0, "STN-ROUTER-MIB", "stnSubnetInterfaceIndex"))
if mibBuilder.loadTexts: stnSubnetInterfaceEntry.setStatus('current')
stnSubnetInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceIndex.setStatus('current')
stnSubnetInterfaceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceEnabled.setStatus('current')
stnSubnetInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceAddress.setStatus('current')
stnSubnetInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceMask.setStatus('current')
stnSubnetInterfaceVclid = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceVclid.setStatus('deprecated')
stnSubnetInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 6), InterfaceConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceType.setStatus('current')
stnSubnetInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 7), OperationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceState.setStatus('current')
stnSubnetInterfaceRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceRouterIndex.setStatus('current')
stnSubnetInterfaceLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vcLink", 1), ("vei", 2), ("home", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceLinkType.setStatus('current')
stnSubnetInterfaceLinkInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceLinkInstance.setStatus('current')
stnSubnetInterfaceForcedNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceForcedNextHop.setStatus('current')
stnSubnetInterfaceServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubnetInterfaceServiceName.setStatus('current')
stnPppoeTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3), )
if mibBuilder.loadTexts: stnPppoeTable.setStatus('current')
stnPppoeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1), ).setIndexNames((0, "STN-ROUTER-MIB", "stnPppoeIndex"))
if mibBuilder.loadTexts: stnPppoeEntry.setStatus('current')
stnPppoeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppoeIndex.setStatus('current')
stnPppoeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1, 2), InterfaceConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppoeType.setStatus('current')
stnPppoeState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1, 3), OperationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppoeState.setStatus('current')
stnPppoeVclid = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppoeVclid.setStatus('deprecated')
stnPppoeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppoeIfIndex.setStatus('current')
stnPppoeRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppoeRouterIndex.setStatus('current')
stnPppoeLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vcLink", 1), ("vei", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppoeLinkType.setStatus('current')
stnPppoeLinkInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppoeLinkInstance.setStatus('current')
stnPppTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 4), )
if mibBuilder.loadTexts: stnPppTable.setStatus('current')
stnPppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 4, 1), ).setIndexNames((0, "STN-ROUTER-MIB", "stnPppIndex"))
if mibBuilder.loadTexts: stnPppEntry.setStatus('current')
stnPppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppIndex.setStatus('current')
stnPppType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 4, 1, 2), InterfaceConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppType.setStatus('current')
stnPppState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 4, 1, 3), OperationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppState.setStatus('current')
stnPppVclid = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppVclid.setStatus('current')
stnPppIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 4, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppIfIndex.setStatus('current')
stnPppRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPppRouterIndex.setStatus('current')
stnRouterUp = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 26)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-ROUTER-MIB", "stnRouterState"), ("STN-ROUTER-MIB", "stnRouterName"), ("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"))
if mibBuilder.loadTexts: stnRouterUp.setStatus('current')
stnRouterDown = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 27)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-ROUTER-MIB", "stnRouterState"), ("STN-ROUTER-MIB", "stnRouterName"), ("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"))
if mibBuilder.loadTexts: stnRouterDown.setStatus('current')
stnRouterReassigned = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 28)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-ROUTER-MIB", "stnRouterState"), ("STN-ROUTER-MIB", "stnRouterName"), ("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"))
if mibBuilder.loadTexts: stnRouterReassigned.setStatus('current')
stnRouterReassignFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 29)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-ROUTER-MIB", "stnRouterState"), ("STN-ROUTER-MIB", "stnRouterName"), ("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"))
if mibBuilder.loadTexts: stnRouterReassignFailure.setStatus('current')
stnSubnetIfAssignFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 30)).setObjects(("STN-ROUTER-MIB", "stnSubnetInterfaceIndex"), ("STN-ROUTER-MIB", "stnSubnetInterfaceAddress"), ("STN-ROUTER-MIB", "stnSubnetInterfaceVclid"), ("STN-ROUTER-MIB", "stnSubnetInterfaceState"), ("STN-ROUTER-MIB", "stnSubnetInterfaceRouterIndex"), ("STN-ROUTER-MIB", "stnSubnetInterfaceLinkType"), ("STN-ROUTER-MIB", "stnSubnetInterfaceLinkInstance"))
if mibBuilder.loadTexts: stnSubnetIfAssignFailure.setStatus('current')
stnConfigAuditRouterFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 33)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnConfigAuditRouterFailure.setStatus('current')
stnConfigAuditSubnetIfFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 34)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-ROUTER-MIB", "stnSubnetInterfaceIndex"))
if mibBuilder.loadTexts: stnConfigAuditSubnetIfFailure.setStatus('current')
stnConfigAuditPppoeIfFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 35)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-ROUTER-MIB", "stnPppoeRouterIndex"))
if mibBuilder.loadTexts: stnConfigAuditPppoeIfFailure.setStatus('current')
stnConfigAuditPppIfFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 36)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-ROUTER-MIB", "stnPppRouterIndex"))
if mibBuilder.loadTexts: stnConfigAuditPppIfFailure.setStatus('current')
mibBuilder.exportSymbols("STN-ROUTER-MIB", stnRouterDefaultPolicyAction=stnRouterDefaultPolicyAction, stnRouterActiveCpu=stnRouterActiveCpu, stnSubnetInterfaceLinkInstance=stnSubnetInterfaceLinkInstance, stnRouterEngineID=stnRouterEngineID, stnPppoeLinkInstance=stnPppoeLinkInstance, stnRouterReassigned=stnRouterReassigned, stnPppIfIndex=stnPppIfIndex, stnRouterNAT=stnRouterNAT, stnRouterStandbySlot=stnRouterStandbySlot, stnSubnetInterfaceState=stnSubnetInterfaceState, stnSubnetInterfaceMask=stnSubnetInterfaceMask, stnConfigAuditPppIfFailure=stnConfigAuditPppIfFailure, stnSubnetInterfaceVclid=stnSubnetInterfaceVclid, stnRouterTable=stnRouterTable, stnPppoeVclid=stnPppoeVclid, stnRouterAtmVpn=stnRouterAtmVpn, stnRouterIndex=stnRouterIndex, stnRouterType=stnRouterType, stnPppoeTable=stnPppoeTable, stnRouterReassignOnFault=stnRouterReassignOnFault, stnPppoeIfIndex=stnPppoeIfIndex, stnRouterHomeIpAddress=stnRouterHomeIpAddress, stnRouterState=stnRouterState, stnRouterConfiguredCpu=stnRouterConfiguredCpu, stnRouterName=stnRouterName, stnPppVclid=stnPppVclid, stnRouterServiceDomain=stnRouterServiceDomain, stnPppRouterIndex=stnPppRouterIndex, stnConfigAuditSubnetIfFailure=stnConfigAuditSubnetIfFailure, stnRouterVTI=stnRouterVTI, OperationState=OperationState, stnPppoeEntry=stnPppoeEntry, stnPppTable=stnPppTable, stnSubnetInterfaceType=stnSubnetInterfaceType, stnConfigAuditPppoeIfFailure=stnConfigAuditPppoeIfFailure, stnRouterStandbyCpu=stnRouterStandbyCpu, stnPppoeType=stnPppoeType, stnRouterVEI=stnRouterVEI, stnSubnetInterfaceServiceName=stnSubnetInterfaceServiceName, PYSNMP_MODULE_ID=stnRouter, stnRouterUp=stnRouterUp, stnRouterMibConformance=stnRouterMibConformance, stnPppState=stnPppState, stnRouterEntry=stnRouterEntry, stnRouterDown=stnRouterDown, stnRouterConfiguredSlot=stnRouterConfiguredSlot, stnRouterServiceName=stnRouterServiceName, stnSubnetInterfaceTable=stnSubnetInterfaceTable, stnSubnetInterfaceEnabled=stnSubnetInterfaceEnabled, stnSubnetInterfaceForcedNextHop=stnSubnetInterfaceForcedNextHop, stnPppoeLinkType=stnPppoeLinkType, stnSubnetInterfaceEntry=stnSubnetInterfaceEntry, stnConfigAuditRouterFailure=stnConfigAuditRouterFailure, stnRouterActiveSlot=stnRouterActiveSlot, stnPppoeState=stnPppoeState, stnSubnetInterfaceIndex=stnSubnetInterfaceIndex, stnRouterObjects=stnRouterObjects, stnPppoeRouterIndex=stnPppoeRouterIndex, stnRouterUpTime=stnRouterUpTime, stnRouterReassignFailure=stnRouterReassignFailure, stnSubnetIfAssignFailure=stnSubnetIfAssignFailure, stnPppType=stnPppType, stnSubnetInterfaceRouterIndex=stnSubnetInterfaceRouterIndex, stnRouterVimuxMpls=stnRouterVimuxMpls, stnSubnetInterfaceLinkType=stnSubnetInterfaceLinkType, stnRouter=stnRouter, stnRouterEnabled=stnRouterEnabled, stnPppEntry=stnPppEntry, stnPppIndex=stnPppIndex, stnPppoeIndex=stnPppoeIndex, stnSubnetInterfaceAddress=stnSubnetInterfaceAddress, InterfaceConnectionType=InterfaceConnectionType)
