#
# PySNMP MIB module CPQRACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQRACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Gauge32, ObjectIdentity, NotificationType, TimeTicks, NotificationType, Integer32, Unsigned32, Bits, iso, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "NotificationType", "TimeTicks", "NotificationType", "Integer32", "Unsigned32", "Bits", "iso", "Counter64", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqRackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22))
cpqRackMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 1))
cpqRackComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2))
cpqRackSysObjID = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 3))
cpqRackInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 1))
cpqRackAsset = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 2))
cpqRackEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 3))
cpqRackServer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 4))
cpqRackPower = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 5))
cpqRackNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 6))
cpqRackOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 1, 4))
cpqRackCommonEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1))
cpqRackServerEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2))
cpqRackPowerEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3))
cpqRackServerBlade = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1))
cpqRackServerNetworking = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2))
cpqRackServerTempSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3))
cpqRackPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1))
cpqRackNetConnector = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1))
cpqRackMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackMibRevMajor.setStatus('mandatory')
cpqRackMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackMibRevMinor.setStatus('mandatory')
cpqRackMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackMibCondition.setStatus('mandatory')
cpqRackOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackOsCommonPollFreq.setStatus('mandatory')
cpqRackAssetTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1), )
if mibBuilder.loadTexts: cpqRackAssetTable.setStatus('mandatory')
cpqRackAssetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackAssetIndex"))
if mibBuilder.loadTexts: cpqRackAssetEntry.setStatus('mandatory')
cpqRackAssetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackAssetIndex.setStatus('mandatory')
cpqRackName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackName.setStatus('mandatory')
cpqRackUid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackUid.setStatus('mandatory')
cpqRackSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackSerialNum.setStatus('mandatory')
cpqRackTrapSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackTrapSequenceNum.setStatus('mandatory')
cpqRackHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackHeight.setStatus('mandatory')
cpqRackWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackWidth.setStatus('mandatory')
cpqRackDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackDepth.setStatus('mandatory')
cpqRackCommonEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureTable.setStatus('mandatory')
cpqRackCommonEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureEntry.setStatus('mandatory')
cpqRackCommonEnclosureRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureRack.setStatus('mandatory')
cpqRackCommonEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureIndex.setStatus('mandatory')
cpqRackCommonEnclosureModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureModel.setStatus('mandatory')
cpqRackCommonEnclosureAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureAssetTag.setStatus('mandatory')
cpqRackCommonEnclosurePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosurePartNumber.setStatus('mandatory')
cpqRackCommonEnclosureSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureSparePartNumber.setStatus('mandatory')
cpqRackCommonEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNum.setStatus('mandatory')
cpqRackCommonEnclosureFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFWRev.setStatus('mandatory')
cpqRackCommonEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureName.setStatus('mandatory')
cpqRackCommonEnclosureNeighborNamePrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureNeighborNamePrev.setStatus('mandatory')
cpqRackCommonEnclosureNeighborNameNext = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureNeighborNameNext.setStatus('mandatory')
cpqRackCommonEnclosureHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHeight.setStatus('mandatory')
cpqRackCommonEnclosureWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureWidth.setStatus('mandatory')
cpqRackCommonEnclosureDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureDepth.setStatus('mandatory')
cpqRackCommonEnclosureTrapSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTrapSequenceNum.setStatus('mandatory')
cpqRackCommonEnclosureCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureCondition.setStatus('mandatory')
cpqRackCommonEnclosureHasServerBlades = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasServerBlades.setStatus('mandatory')
cpqRackCommonEnclosureHasPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasPowerSupplies.setStatus('mandatory')
cpqRackCommonEnclosureHasNetConnectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasNetConnectors.setStatus('mandatory')
cpqRackCommonEnclosureHasTempSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasTempSensors.setStatus('mandatory')
cpqRackCommonEnclosureHasFans = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasFans.setStatus('mandatory')
cpqRackCommonEnclosureHasFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasFuses.setStatus('mandatory')
cpqRackCommonEnclosureMgmtUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("ledOn", 3), ("ledOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackCommonEnclosureMgmtUID.setStatus('mandatory')
cpqRackCommonEnclosureSerialNumPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNumPrev.setStatus('mandatory')
cpqRackCommonEnclosureSerialNumNext = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNumNext.setStatus('mandatory')
cpqRackCommonEnclosureAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureAddress.setStatus('mandatory')
cpqRackCommonEnclosureProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductId.setStatus('mandatory')
cpqRackCommonEnclosureProductIdPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductIdPrev.setStatus('mandatory')
cpqRackCommonEnclosureProductIdNext = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductIdNext.setStatus('mandatory')
cpqRackCommonEnclosureUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUID.setStatus('mandatory')
cpqRackCommonEnclosureUUIDPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUIDPrev.setStatus('mandatory')
cpqRackCommonEnclosureUUIDNext = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUIDNext.setStatus('mandatory')
cpqRackCommonEnclosureHasManagers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasManagers.setStatus('mandatory')
cpqRackCommonEnclosureTempTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempTable.setStatus('mandatory')
cpqRackCommonEnclosureTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureTempRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureTempChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureTempSensorIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempEntry.setStatus('mandatory')
cpqRackCommonEnclosureTempRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempRack.setStatus('mandatory')
cpqRackCommonEnclosureTempChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempChassis.setStatus('mandatory')
cpqRackCommonEnclosureTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorIndex.setStatus('mandatory')
cpqRackCommonEnclosureTempSensorEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorEnclosureName.setStatus('mandatory')
cpqRackCommonEnclosureTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempLocation.setStatus('mandatory')
cpqRackCommonEnclosureTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempCurrent.setStatus('mandatory')
cpqRackCommonEnclosureTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempThreshold.setStatus('mandatory')
cpqRackCommonEnclosureTempCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempCondition.setStatus('mandatory')
cpqRackCommonEnclosureTempType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 15))).clone(namedValues=NamedValues(("other", 1), ("blowout", 5), ("caution", 9), ("critical", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempType.setStatus('mandatory')
cpqRackCommonEnclosureTempSensorEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorEnclosureSerialNum.setStatus('mandatory')
cpqRackCommonEnclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanTable.setStatus('mandatory')
cpqRackCommonEnclosureFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureFanRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFanChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFanIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEntry.setStatus('mandatory')
cpqRackCommonEnclosureFanRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRack.setStatus('mandatory')
cpqRackCommonEnclosureFanChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanChassis.setStatus('mandatory')
cpqRackCommonEnclosureFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanIndex.setStatus('mandatory')
cpqRackCommonEnclosureFanEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEnclosureName.setStatus('mandatory')
cpqRackCommonEnclosureFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanLocation.setStatus('mandatory')
cpqRackCommonEnclosureFanPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanPartNumber.setStatus('mandatory')
cpqRackCommonEnclosureFanSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanSparePartNumber.setStatus('mandatory')
cpqRackCommonEnclosureFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanPresent.setStatus('mandatory')
cpqRackCommonEnclosureFanRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRedundant.setStatus('mandatory')
cpqRackCommonEnclosureFanRedundantGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRedundantGroupId.setStatus('mandatory')
cpqRackCommonEnclosureFanCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanCondition.setStatus('mandatory')
cpqRackCommonEnclosureFanEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEnclosureSerialNum.setStatus('mandatory')
cpqRackCommonEnclosureFuseTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseTable.setStatus('mandatory')
cpqRackCommonEnclosureFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureFuseRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFuseChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFuseIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseEntry.setStatus('mandatory')
cpqRackCommonEnclosureFuseRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseRack.setStatus('mandatory')
cpqRackCommonEnclosureFuseChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseChassis.setStatus('mandatory')
cpqRackCommonEnclosureFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseIndex.setStatus('mandatory')
cpqRackCommonEnclosureFuseEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseEnclosureName.setStatus('mandatory')
cpqRackCommonEnclosureFuseLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseLocation.setStatus('mandatory')
cpqRackCommonEnclosureFusePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFusePresent.setStatus('mandatory')
cpqRackCommonEnclosureFuseCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseCondition.setStatus('mandatory')
cpqRackCommonEnclosureFruTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruTable.setStatus('mandatory')
cpqRackCommonEnclosureFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureFruRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFruChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFruIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruEntry.setStatus('mandatory')
cpqRackCommonEnclosureFruRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruRack.setStatus('mandatory')
cpqRackCommonEnclosureFruChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruChassis.setStatus('mandatory')
cpqRackCommonEnclosureFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruIndex.setStatus('mandatory')
cpqRackCommonEnclosureFruEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruEnclosureName.setStatus('mandatory')
cpqRackCommonEnclosureFruDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruDescription.setStatus('mandatory')
cpqRackCommonEnclosureFruLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruLocation.setStatus('mandatory')
cpqRackCommonEnclosureFruAssemblyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruAssemblyPartNumber.setStatus('mandatory')
cpqRackCommonEnclosureFruSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruSparePartNumber.setStatus('mandatory')
cpqRackCommonEnclosureFruAutoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruAutoRev.setStatus('mandatory')
cpqRackCommonEnclosureFruSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruSerialNum.setStatus('mandatory')
cpqRackCommonEnclosureManagerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerTable.setStatus('mandatory')
cpqRackCommonEnclosureManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureManagerRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureManagerChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureManagerIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEntry.setStatus('mandatory')
cpqRackCommonEnclosureManagerRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRack.setStatus('mandatory')
cpqRackCommonEnclosureManagerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerChassis.setStatus('mandatory')
cpqRackCommonEnclosureManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerIndex.setStatus('mandatory')
cpqRackCommonEnclosureManagerEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEnclosureName.setStatus('mandatory')
cpqRackCommonEnclosureManagerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerLocation.setStatus('mandatory')
cpqRackCommonEnclosureManagerPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerPartNumber.setStatus('mandatory')
cpqRackCommonEnclosureManagerSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerSparePartNumber.setStatus('mandatory')
cpqRackCommonEnclosureManagerSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerSerialNum.setStatus('mandatory')
cpqRackCommonEnclosureManagerRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRole.setStatus('mandatory')
cpqRackCommonEnclosureManagerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerPresent.setStatus('mandatory')
cpqRackCommonEnclosureManagerRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRedundant.setStatus('mandatory')
cpqRackCommonEnclosureManagerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerCondition.setStatus('mandatory')
cpqRackCommonEnclosureManagerEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEnclosureSerialNum.setStatus('mandatory')
cpqRackCommonEnclosureManagerUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerUUID.setStatus('mandatory')
cpqRackCommonEnclosureManagerFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerFWRev.setStatus('mandatory')
cpqRackServerEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1), )
if mibBuilder.loadTexts: cpqRackServerEnclosureTable.setStatus('mandatory')
cpqRackServerEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackServerEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackServerEnclosureIndex"))
if mibBuilder.loadTexts: cpqRackServerEnclosureEntry.setStatus('mandatory')
cpqRackServerEnclosureRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureRack.setStatus('mandatory')
cpqRackServerEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureIndex.setStatus('mandatory')
cpqRackServerEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureName.setStatus('mandatory')
cpqRackServerEnclosureMaxNumBlades = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBlades.setStatus('mandatory')
cpqRackServerEnclosureMaxNumBladesX = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBladesX.setStatus('mandatory')
cpqRackServerEnclosureMaxNumBladesY = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBladesY.setStatus('mandatory')
cpqRackPowerEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1), )
if mibBuilder.loadTexts: cpqRackPowerEnclosureTable.setStatus('mandatory')
cpqRackPowerEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackPowerEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackPowerEnclosureIndex"))
if mibBuilder.loadTexts: cpqRackPowerEnclosureEntry.setStatus('mandatory')
cpqRackPowerEnclosureRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureRack.setStatus('mandatory')
cpqRackPowerEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureIndex.setStatus('mandatory')
cpqRackPowerEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureName.setStatus('mandatory')
cpqRackPowerEnclosureMgmtBoardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureMgmtBoardSerialNum.setStatus('mandatory')
cpqRackPowerEnclosureRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureRedundant.setStatus('mandatory')
cpqRackPowerEnclosureLoadBalanced = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notLoadBalanced", 2), ("loadBalanced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureLoadBalanced.setStatus('mandatory')
cpqRackPowerEnclosureInputPwrType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("singlePhase", 2), ("threePhase", 3), ("directCurrent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureInputPwrType.setStatus('mandatory')
cpqRackPowerEnclosurePwrFeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosurePwrFeedMax.setStatus('mandatory')
cpqRackPowerEnclosureCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureCondition.setStatus('mandatory')
cpqRackPowerEnclosureBladeAutopoweron = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackPowerEnclosureBladeAutopoweron.setStatus('optional')
cpqRackServerBladeTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1), )
if mibBuilder.loadTexts: cpqRackServerBladeTable.setStatus('mandatory')
cpqRackServerBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackServerBladeRack"), (0, "CPQRACK-MIB", "cpqRackServerBladeChassis"), (0, "CPQRACK-MIB", "cpqRackServerBladeIndex"))
if mibBuilder.loadTexts: cpqRackServerBladeEntry.setStatus('mandatory')
cpqRackServerBladeRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeRack.setStatus('mandatory')
cpqRackServerBladeChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeChassis.setStatus('mandatory')
cpqRackServerBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeIndex.setStatus('mandatory')
cpqRackServerBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeName.setStatus('mandatory')
cpqRackServerBladeEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeEnclosureName.setStatus('mandatory')
cpqRackServerBladePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePartNumber.setStatus('mandatory')
cpqRackServerBladeSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSparePartNumber.setStatus('mandatory')
cpqRackServerBladePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePosition.setStatus('mandatory')
cpqRackServerBladeHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeHeight.setStatus('mandatory')
cpqRackServerBladeWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeWidth.setStatus('mandatory')
cpqRackServerBladeDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeDepth.setStatus('mandatory')
cpqRackServerBladePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePresent.setStatus('mandatory')
cpqRackServerBladeHasFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeHasFuses.setStatus('mandatory')
cpqRackServerBladeEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeEnclosureSerialNum.setStatus('mandatory')
cpqRackServerBladeSlotsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsed.setStatus('mandatory')
cpqRackServerBladeSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSerialNum.setStatus('mandatory')
cpqRackServerBladeProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeProductId.setStatus('mandatory')
cpqRackServerBladeUid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeUid.setStatus('mandatory')
cpqRackServerBladeSlotsUsedX = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsedX.setStatus('mandatory')
cpqRackServerBladeSlotsUsedY = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsedY.setStatus('mandatory')
cpqRackServerBladeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeStatus.setStatus('optional')
cpqRackServerBladeFaultMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeFaultMajor.setStatus('optional')
cpqRackServerBladeFaultMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeFaultMinor.setStatus('optional')
cpqRackServerBladeFaultDiagnosticString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeFaultDiagnosticString.setStatus('optional')
cpqRackServerBladePowered = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3), ("powerStagedOff", 4), ("reboot", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackServerBladePowered.setStatus('optional')
cpqRackServerBladeUIDState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("ledOn", 3), ("ledOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackServerBladeUIDState.setStatus('optional')
cpqRackServerBladeSystemBIOSRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSystemBIOSRevision.setStatus('optional')
cpqRackServerBladeSystemBIOSFlashingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("flashing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSystemBIOSFlashingStatus.setStatus('optional')
cpqRackServerBladeHasManagementDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeHasManagementDevice.setStatus('optional')
cpqRackServerBladeManagementDeviceFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeManagementDeviceFirmwareRevision.setStatus('optional')
cpqRackServerBladeManagementDeviceFirmwareFlashingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("flashing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeManagementDeviceFirmwareFlashingStatus.setStatus('optional')
cpqRackServerBladeDiagnosticAdaptorPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeDiagnosticAdaptorPresence.setStatus('optional')
cpqRackServerBladeASREnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeASREnabled.setStatus('optional')
cpqRackServerBladeFrontIOBlankingModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeFrontIOBlankingModeStatus.setStatus('optional')
cpqRackServerBladePOSTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("completed", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePOSTStatus.setStatus('optional')
cpqRackServerBladePXEBootModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePXEBootModeStatus.setStatus('optional')
cpqRackServerBladePendingBootOrderChange = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("firstPXE", 3), ("firstHDD", 4), ("firstRBSU", 5), ("oncePXE", 6), ("onceHDD", 7), ("onceRBSU", 8), ("alwaysPXE", 9), ("alwaysHDD", 10), ("alwaysRBSU", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackServerBladePendingBootOrderChange.setStatus('optional')
cpqRackServerNetworkingTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1), )
if mibBuilder.loadTexts: cpqRackServerNetworkingTable.setStatus('optional')
cpqRackServerNetworkingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackServerNetworkingRack"), (0, "CPQRACK-MIB", "cpqRackServerNetworkingChassis"), (0, "CPQRACK-MIB", "cpqRackServerNetworkingIndex"))
if mibBuilder.loadTexts: cpqRackServerNetworkingEntry.setStatus('optional')
cpqRackServerNetworkingRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingRack.setStatus('optional')
cpqRackServerNetworkingChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingChassis.setStatus('mandatory')
cpqRackServerNetworkingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingIndex.setStatus('optional')
cpqRackServerNetworkingName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingName.setStatus('optional')
cpqRackServerNetworkingEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingEnclosureName.setStatus('optional')
cpqRackServerNetworkingEthernetInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingEthernetInterfaces.setStatus('optional')
cpqRackServerNetworkingEthernetMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingEthernetMACAddress.setStatus('optional')
cpqRackServerTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1), )
if mibBuilder.loadTexts: cpqRackServerTempSensorTable.setStatus('optional')
cpqRackServerTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackServerTempSensorRack"), (0, "CPQRACK-MIB", "cpqRackServerTempSensorChassis"), (0, "CPQRACK-MIB", "cpqRackServerTempSensorIndex"))
if mibBuilder.loadTexts: cpqRackServerTempSensorEntry.setStatus('optional')
cpqRackServerTempSensorRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorRack.setStatus('optional')
cpqRackServerTempSensorChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorChassis.setStatus('optional')
cpqRackServerTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorIndex.setStatus('optional')
cpqRackServerTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorName.setStatus('optional')
cpqRackServerTempSensorEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorEnclosureName.setStatus('optional')
cpqRackServerTempSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorCount.setStatus('optional')
cpqRackServerTempSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorLocation.setStatus('optional')
cpqRackServerTempSensorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorCurrent.setStatus('optional')
cpqRackServerTempSensorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorThreshold.setStatus('optional')
cpqRackServerTempSensorCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorCondition.setStatus('optional')
cpqRackServerTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 15))).clone(namedValues=NamedValues(("other", 1), ("blowout", 5), ("caution", 9), ("critical", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorType.setStatus('optional')
cpqRackPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1), )
if mibBuilder.loadTexts: cpqRackPowerSupplyTable.setStatus('mandatory')
cpqRackPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackPowerSupplyRack"), (0, "CPQRACK-MIB", "cpqRackPowerSupplyChassis"), (0, "CPQRACK-MIB", "cpqRackPowerSupplyIndex"))
if mibBuilder.loadTexts: cpqRackPowerSupplyEntry.setStatus('mandatory')
cpqRackPowerSupplyRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyRack.setStatus('mandatory')
cpqRackPowerSupplyChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyChassis.setStatus('mandatory')
cpqRackPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyIndex.setStatus('mandatory')
cpqRackPowerSupplyEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyEnclosureName.setStatus('mandatory')
cpqRackPowerSupplySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplySerialNum.setStatus('mandatory')
cpqRackPowerSupplyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyPartNumber.setStatus('mandatory')
cpqRackPowerSupplySparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplySparePartNumber.setStatus('mandatory')
cpqRackPowerSupplyFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyFWRev.setStatus('mandatory')
cpqRackPowerSupplyMaxPwrOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyMaxPwrOutput.setStatus('mandatory')
cpqRackPowerSupplyCurPwrOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyCurPwrOutput.setStatus('mandatory')
cpqRackPowerSupplyPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyPosition.setStatus('mandatory')
cpqRackPowerSupplyIntakeTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyIntakeTemp.setStatus('mandatory')
cpqRackPowerSupplyExhaustTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyExhaustTemp.setStatus('mandatory')
cpqRackPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noError", 1), ("generalFailure", 2), ("bistFailure", 3), ("fanFailure", 4), ("tempFailure", 5), ("interlockOpen", 6), ("epromFailed", 7), ("vrefFailed", 8), ("dacFailed", 9), ("ramTestFailed", 10), ("voltageChannelFailed", 11), ("orringdiodeFailed", 12), ("brownOut", 13), ("giveupOnStartup", 14), ("nvramInvalid", 15), ("calibrationTableInvalid", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyStatus.setStatus('mandatory')
cpqRackPowerSupplyInputLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noError", 1), ("lineOverVoltage", 2), ("lineUnderVoltage", 3), ("lineHit", 4), ("brownOut", 5), ("linePowerLoss", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyInputLineStatus.setStatus('mandatory')
cpqRackPowerSupplyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyPresent.setStatus('mandatory')
cpqRackPowerSupplyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyCondition.setStatus('mandatory')
cpqRackPowerSupplyEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyEnclosureSerialNum.setStatus('mandatory')
cpqRackNetConnectorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1), )
if mibBuilder.loadTexts: cpqRackNetConnectorTable.setStatus('mandatory')
cpqRackNetConnectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackNetConnectorRack"), (0, "CPQRACK-MIB", "cpqRackNetConnectorChassis"), (0, "CPQRACK-MIB", "cpqRackNetConnectorIndex"))
if mibBuilder.loadTexts: cpqRackNetConnectorEntry.setStatus('mandatory')
cpqRackNetConnectorRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorRack.setStatus('mandatory')
cpqRackNetConnectorChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorChassis.setStatus('mandatory')
cpqRackNetConnectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorIndex.setStatus('mandatory')
cpqRackNetConnectorEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorEnclosureName.setStatus('mandatory')
cpqRackNetConnectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorName.setStatus('mandatory')
cpqRackNetConnectorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorModel.setStatus('mandatory')
cpqRackNetConnectorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorSerialNum.setStatus('mandatory')
cpqRackNetConnectorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorPartNumber.setStatus('mandatory')
cpqRackNetConnectorSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorSparePartNumber.setStatus('mandatory')
cpqRackNetConnectorFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorFWRev.setStatus('mandatory')
cpqRackNetConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorType.setStatus('mandatory')
cpqRackNetConnectorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorLocation.setStatus('mandatory')
cpqRackNetConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorPresent.setStatus('mandatory')
cpqRackNetConnectorHasFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorHasFuses.setStatus('mandatory')
cpqRackNetConnectorEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorEnclosureSerialNum.setStatus('mandatory')
cpqRackNetConnectorTechnologyType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorTechnologyType.setStatus('mandatory')
cpqRackNetConnectorDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noconnect", 1), ("network", 2), ("fibrechannel", 3), ("sas", 4), ("inifiband", 5), ("pciexpress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorDeviceType.setStatus('mandatory')
cpqRackSystemObjectIdentification = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackSystemObjectIdentification.setStatus('mandatory')
cpqRackNameChanged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackSerialNum"), ("CPQRACK-MIB", "cpqRackTrapSequenceNum"))
cpqRackEnclosureNameChanged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureModel"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureModel"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureModel"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureTempFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTempLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureTempDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTempLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureTempOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTempLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureFanOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureFanInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerSupplyInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerSubsystemNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerSubsystemLineVoltageProblem = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplyInputLineStatus"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerSubsystemOverloadCondition = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerShedAutoShutdown = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerPowerOnFailedNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerPowerOnFailedNotEnoughPower = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerPowerOnFailedEnclosureNotFound = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22024)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerPowerOnFailedPowerChassisNotFound = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerPowerOnManualOverride = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackFuseOpen = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22027)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFuseLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22028)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22029)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerChassisNotLoadBalanced = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22030)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerChassisDcPowerProblem = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22031)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerChassisAcFacilityPowerExceeded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22032)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerUnknownPowerConsumption = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22033)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerChassisLoadBalancingWireMissing = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22034)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerChassisTooManyPowerChassis = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22035)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackPowerChassisConfigError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22036)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureManagerDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22037)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureManagerOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22038)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureManagerRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22039)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackEnclosureManagerInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22040)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackManagerPrimaryRole = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22041)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeEKeyingFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22042)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeEKeyingOK = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22043)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackNetConnectorRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22044)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackNetConnectorInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22045)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackNetConnectorFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22046)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackNetConnectorDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22047)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackNetConnectorOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22048)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeToLowPower = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22049)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeRemoved2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22050)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeInserted2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22051)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeStatusRepaired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22052)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladeProductId"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeStatusDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22053)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladeProductId"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeFaultMajor"), ("CPQRACK-MIB", "cpqRackServerBladeFaultMinor"), ("CPQRACK-MIB", "cpqRackServerBladeFaultDiagnosticString"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22054)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladeProductId"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeFaultMajor"), ("CPQRACK-MIB", "cpqRackServerBladeFaultMinor"), ("CPQRACK-MIB", "cpqRackServerBladeFaultDiagnosticString"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeGrpCapTimeout = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22055)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeUnexpectedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22056)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeMangementControllerFirmwareUpdating = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22057)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeManagementDeviceFirmwareFlashingStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeMangementControllerFirmwareUpdateComplete = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22058)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeManagementDeviceFirmwareFlashingStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeSystemBIOSFirmwareUpdating = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22059)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeSystemBIOSFlashingStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeSystemBIOSFirmwareUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22060)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeSystemBIOSFlashingStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeFrontIOBlankingActive = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22061)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeFrontIOBlankingModeStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeRemoteFrontIOBlankingInactive = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22062)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeFrontIOBlankingModeStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeDiagnosticAdaptorInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22063)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeDiagnosticAdaptorPresence"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeDiagnosticAdaptorRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22064)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeDiagnosticAdaptorPresence"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeEnteredPXEBootMode = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22065)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePXEBootModeStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeExitedPXEBootMode = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22066)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePXEBootModeStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladeWarmReset = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22067)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePOSTStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladePOSTCompleted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22068)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePOSTStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladePoweredOn = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22069)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePowered"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
cpqRackServerBladePoweredOff = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22070)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePowered"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
mibBuilder.exportSymbols("CPQRACK-MIB", cpqRackCommonEnclosureFanTable=cpqRackCommonEnclosureFanTable, cpqRackCommonEnclosureUUIDPrev=cpqRackCommonEnclosureUUIDPrev, cpqRackServerNetworkingEnclosureName=cpqRackServerNetworkingEnclosureName, cpqRackCommonEnclosureTempLocation=cpqRackCommonEnclosureTempLocation, cpqRackCommonEnclosureFanRack=cpqRackCommonEnclosureFanRack, cpqRackNetConnectorSerialNum=cpqRackNetConnectorSerialNum, cpqRackServerEnclosureTable=cpqRackServerEnclosureTable, cpqRackServerNetworkingEthernetMACAddress=cpqRackServerNetworkingEthernetMACAddress, cpqRackServerBladeProductId=cpqRackServerBladeProductId, cpqRackPowerEnclosureTable=cpqRackPowerEnclosureTable, cpqRackCommonEnclosureManagerEnclosureSerialNum=cpqRackCommonEnclosureManagerEnclosureSerialNum, cpqRackCommonEnclosureFruSparePartNumber=cpqRackCommonEnclosureFruSparePartNumber, cpqRackServerBladeASREnabled=cpqRackServerBladeASREnabled, cpqRackServerBladeStatus=cpqRackServerBladeStatus, cpqRackPowerChassisAcFacilityPowerExceeded=cpqRackPowerChassisAcFacilityPowerExceeded, cpqRackPowerSupplyMaxPwrOutput=cpqRackPowerSupplyMaxPwrOutput, cpqRackPowerEnclosureRedundant=cpqRackPowerEnclosureRedundant, cpqRackCommonEnclosureWidth=cpqRackCommonEnclosureWidth, cpqRackCommonEnclosureHasManagers=cpqRackCommonEnclosureHasManagers, cpqRackPowerEnclosureEntry=cpqRackPowerEnclosureEntry, cpqRackPowerSupplyFailed=cpqRackPowerSupplyFailed, cpqRackServerTempSensorEnclosureName=cpqRackServerTempSensorEnclosureName, cpqRackServerPowerOnManualOverride=cpqRackServerPowerOnManualOverride, cpqRackServerTempSensorCount=cpqRackServerTempSensorCount, cpqRackServerBladeDiagnosticAdaptorRemoved=cpqRackServerBladeDiagnosticAdaptorRemoved, cpqRackServerBladePoweredOn=cpqRackServerBladePoweredOn, cpqRackPowerSupplyOk=cpqRackPowerSupplyOk, cpqRackNetConnectorRemoved=cpqRackNetConnectorRemoved, cpqRackPowerEnclosureInputPwrType=cpqRackPowerEnclosureInputPwrType, cpqRackCommonEnclosureAddress=cpqRackCommonEnclosureAddress, cpqRackCommonEnclosureFWRev=cpqRackCommonEnclosureFWRev, cpqRackServerTempSensorTable=cpqRackServerTempSensorTable, cpqRackServerBladeEnteredPXEBootMode=cpqRackServerBladeEnteredPXEBootMode, cpqRackCommonEnclosureManagerPresent=cpqRackCommonEnclosureManagerPresent, cpqRackNetConnectorInserted=cpqRackNetConnectorInserted, cpqRackServerBladeMangementControllerFirmwareUpdateComplete=cpqRackServerBladeMangementControllerFirmwareUpdateComplete, cpqRackCommonEnclosureFruIndex=cpqRackCommonEnclosureFruIndex, cpqRackPowerSubsystemNotRedundant=cpqRackPowerSubsystemNotRedundant, cpqRackEnclosureTempOk=cpqRackEnclosureTempOk, cpqRackMibRevMajor=cpqRackMibRevMajor, cpqRackCommonEnclosureTempSensorEnclosureName=cpqRackCommonEnclosureTempSensorEnclosureName, cpqRackCommonEnclosureManagerLocation=cpqRackCommonEnclosureManagerLocation, cpqRackServerTempSensorThreshold=cpqRackServerTempSensorThreshold, cpqRackCommonEnclosureFuseTable=cpqRackCommonEnclosureFuseTable, cpqRackServerTempSensorCurrent=cpqRackServerTempSensorCurrent, cpqRackNetConnectorIndex=cpqRackNetConnectorIndex, cpqRackPowerSupply=cpqRackPowerSupply, cpqRackCommonEnclosureTable=cpqRackCommonEnclosureTable, cpqRackServerEnclosureRack=cpqRackServerEnclosureRack, cpqRackServerEnclosureMaxNumBladesY=cpqRackServerEnclosureMaxNumBladesY, cpqRackServerPowerOnFailedNotEnoughPower=cpqRackServerPowerOnFailedNotEnoughPower, cpqRackCommonEnclosureProductIdPrev=cpqRackCommonEnclosureProductIdPrev, cpqRackSysObjID=cpqRackSysObjID, cpqRackPowerSupplySparePartNumber=cpqRackPowerSupplySparePartNumber, cpqRackCommonEnclosureFruChassis=cpqRackCommonEnclosureFruChassis, cpqRackServerBladeUid=cpqRackServerBladeUid, cpqRackCommonEnclosureName=cpqRackCommonEnclosureName, cpqRackCommonEnclosureMgmtUID=cpqRackCommonEnclosureMgmtUID, cpqRackCommonEnclosureHeight=cpqRackCommonEnclosureHeight, cpqRackNameChanged=cpqRackNameChanged, cpqRackCommonEnclosureManagerRedundant=cpqRackCommonEnclosureManagerRedundant, cpqRackServerBladeStatusRepaired=cpqRackServerBladeStatusRepaired, cpqRackServerTempSensorRack=cpqRackServerTempSensorRack, cpqRackNetConnectorOk=cpqRackNetConnectorOk, cpqRackPowerChassisLoadBalancingWireMissing=cpqRackPowerChassisLoadBalancingWireMissing, cpqRackPowerEnclosurePwrFeedMax=cpqRackPowerEnclosurePwrFeedMax, cpqRackPowerUnknownPowerConsumption=cpqRackPowerUnknownPowerConsumption, cpqRackEnclosureInserted=cpqRackEnclosureInserted, cpqRackPowerChassisTooManyPowerChassis=cpqRackPowerChassisTooManyPowerChassis, cpqRackMibRevMinor=cpqRackMibRevMinor, cpqRackCommonEnclosure=cpqRackCommonEnclosure, cpqRackCommonEnclosureEntry=cpqRackCommonEnclosureEntry, cpqRackPowerSupplyEnclosureName=cpqRackPowerSupplyEnclosureName, cpqRackNetwork=cpqRackNetwork, cpqRackEnclosureManagerOk=cpqRackEnclosureManagerOk, cpqRackServerBladeIndex=cpqRackServerBladeIndex, cpqRackNetConnectorPartNumber=cpqRackNetConnectorPartNumber, cpqRackServerBladePXEBootModeStatus=cpqRackServerBladePXEBootModeStatus, cpqRackServerBladeWarmReset=cpqRackServerBladeWarmReset, cpqRackAssetEntry=cpqRackAssetEntry, cpqRackCommonEnclosureFruLocation=cpqRackCommonEnclosureFruLocation, cpqRackServerBladeEnclosureSerialNum=cpqRackServerBladeEnclosureSerialNum, cpqRackServerBladeExitedPXEBootMode=cpqRackServerBladeExitedPXEBootMode, cpqRackCommonEnclosureUUIDNext=cpqRackCommonEnclosureUUIDNext, cpqRackServerBlade=cpqRackServerBlade, cpqRackServerBladeHasManagementDevice=cpqRackServerBladeHasManagementDevice, cpqRackServerEnclosureName=cpqRackServerEnclosureName, cpqRackMibRev=cpqRackMibRev, cpqRackServerBladeHasFuses=cpqRackServerBladeHasFuses, cpqRackServerEnclosureEntry=cpqRackServerEnclosureEntry, cpqRackCommonEnclosureManagerSerialNum=cpqRackCommonEnclosureManagerSerialNum, cpqRackAsset=cpqRackAsset, cpqRackCommonEnclosureManagerTable=cpqRackCommonEnclosureManagerTable, cpqRackServerTempSensorName=cpqRackServerTempSensorName, cpqRackCommonEnclosureFusePresent=cpqRackCommonEnclosureFusePresent, cpqRackServerNetworkingIndex=cpqRackServerNetworkingIndex, cpqRackPowerSupplySerialNum=cpqRackPowerSupplySerialNum, cpqRackCommonEnclosureTempSensorEnclosureSerialNum=cpqRackCommonEnclosureTempSensorEnclosureSerialNum, cpqRackServerBladeFaultMajor=cpqRackServerBladeFaultMajor, cpqRackServerBladeDiagnosticAdaptorInserted=cpqRackServerBladeDiagnosticAdaptorInserted, cpqRackComponent=cpqRackComponent, cpqRackPowerSupplyInserted=cpqRackPowerSupplyInserted, cpqRackCommonEnclosureNeighborNameNext=cpqRackCommonEnclosureNeighborNameNext, cpqRackServerBladeEKeyingFailed=cpqRackServerBladeEKeyingFailed, cpqRackServerBladeStatusDegraded=cpqRackServerBladeStatusDegraded, cpqRackPowerSupplyTable=cpqRackPowerSupplyTable, cpqRackServerBladePosition=cpqRackServerBladePosition, cpqRackServerBladeInserted2=cpqRackServerBladeInserted2, cpqRackCommonEnclosureManagerRole=cpqRackCommonEnclosureManagerRole, cpqRackPowerSupplyRack=cpqRackPowerSupplyRack, cpqRackCommonEnclosureCondition=cpqRackCommonEnclosureCondition, cpqRackNetConnectorDegraded=cpqRackNetConnectorDegraded, cpqRackMibCondition=cpqRackMibCondition, cpqRackNetConnectorSparePartNumber=cpqRackNetConnectorSparePartNumber, cpqRackEnclosureFanFailed=cpqRackEnclosureFanFailed, cpqRackCommonEnclosureFuseRack=cpqRackCommonEnclosureFuseRack, cpqRackServerBladePOSTStatus=cpqRackServerBladePOSTStatus, cpqRackServerNetworkingTable=cpqRackServerNetworkingTable, cpqRackPowerSupplyEntry=cpqRackPowerSupplyEntry, cpqRackServerBladeEKeyingOK=cpqRackServerBladeEKeyingOK, cpqRackPowerChassisConfigError=cpqRackPowerChassisConfigError, cpqRackNetConnectorFailed=cpqRackNetConnectorFailed, cpqRackServerTempSensorLocation=cpqRackServerTempSensorLocation, cpqRackServerBladeTable=cpqRackServerBladeTable, cpqRackNetConnectorPresent=cpqRackNetConnectorPresent, cpqRackCommonEnclosureFanRedundantGroupId=cpqRackCommonEnclosureFanRedundantGroupId, cpqRackServerBladePOSTCompleted=cpqRackServerBladePOSTCompleted, cpqRackServerNetworkingEthernetInterfaces=cpqRackServerNetworkingEthernetInterfaces, cpqRackServerBladeWidth=cpqRackServerBladeWidth, cpqRackCommonEnclosureTempCurrent=cpqRackCommonEnclosureTempCurrent, cpqRackServerBladeSystemBIOSRevision=cpqRackServerBladeSystemBIOSRevision, cpqRackPowerEnclosureRack=cpqRackPowerEnclosureRack, cpqRackPowerEnclosure=cpqRackPowerEnclosure, cpqRackCommonEnclosureTrapSequenceNum=cpqRackCommonEnclosureTrapSequenceNum, cpqRackEnclosure=cpqRackEnclosure, cpqRackPowerSupplyExhaustTemp=cpqRackPowerSupplyExhaustTemp, cpqRackServerEnclosureMaxNumBladesX=cpqRackServerEnclosureMaxNumBladesX, cpqRackCommonEnclosureFruRack=cpqRackCommonEnclosureFruRack, cpqRackPowerEnclosureIndex=cpqRackPowerEnclosureIndex, cpqRackServerBladeStatusCritical=cpqRackServerBladeStatusCritical, cpqRackCommonEnclosureFanEnclosureSerialNum=cpqRackCommonEnclosureFanEnclosureSerialNum, cpqRackCommonEnclosureTempRack=cpqRackCommonEnclosureTempRack, cpqRackServerBladeSlotsUsedX=cpqRackServerBladeSlotsUsedX, cpqRackPowerSupplyIntakeTemp=cpqRackPowerSupplyIntakeTemp, cpqRackServerBladeFrontIOBlankingModeStatus=cpqRackServerBladeFrontIOBlankingModeStatus, cpqRackPowerSupplyEnclosureSerialNum=cpqRackPowerSupplyEnclosureSerialNum, cpqRackCommonEnclosureFruDescription=cpqRackCommonEnclosureFruDescription, cpqRackEnclosureRemoved=cpqRackEnclosureRemoved, cpqRackEnclosureFanOk=cpqRackEnclosureFanOk, cpqRackCommonEnclosureHasFans=cpqRackCommonEnclosureHasFans, cpqRackNetConnectorDeviceType=cpqRackNetConnectorDeviceType, cpqRackCommonEnclosureModel=cpqRackCommonEnclosureModel, cpqRackWidth=cpqRackWidth, cpqRackPowerShedAutoShutdown=cpqRackPowerShedAutoShutdown, cpqRackCommonEnclosureTempType=cpqRackCommonEnclosureTempType, cpqRackCommonEnclosureManagerEntry=cpqRackCommonEnclosureManagerEntry, cpqRackPowerSubsystemLineVoltageProblem=cpqRackPowerSubsystemLineVoltageProblem, cpqRackEnclosureFanDegraded=cpqRackEnclosureFanDegraded, cpqRackCommonEnclosureFruSerialNum=cpqRackCommonEnclosureFruSerialNum, cpqRackCommonEnclosureHasFuses=cpqRackCommonEnclosureHasFuses, cpqRackCommonEnclosureSparePartNumber=cpqRackCommonEnclosureSparePartNumber, cpqRackCommonEnclosureFuseEntry=cpqRackCommonEnclosureFuseEntry, cpqRackEnclosureManagerDegraded=cpqRackEnclosureManagerDegraded, cpqRackServerTempSensorChassis=cpqRackServerTempSensorChassis, cpqRackCommonEnclosureFanIndex=cpqRackCommonEnclosureFanIndex, cpqRackServerBladeSystemBIOSFirmwareUpdateCompleted=cpqRackServerBladeSystemBIOSFirmwareUpdateCompleted, cpqRackCommonEnclosureFanRedundant=cpqRackCommonEnclosureFanRedundant, cpqRackCommonEnclosureManagerFWRev=cpqRackCommonEnclosureManagerFWRev, cpqRackServerBladeRemoved2=cpqRackServerBladeRemoved2, cpqRackCommonEnclosureFruAutoRev=cpqRackCommonEnclosureFruAutoRev, cpqRackCommonEnclosureFuseIndex=cpqRackCommonEnclosureFuseIndex, cpqRackServerBladeRack=cpqRackServerBladeRack, cpqRackNetConnectorChassis=cpqRackNetConnectorChassis, cpqRackServerBladeName=cpqRackServerBladeName, cpqRackServerBladeRemoved=cpqRackServerBladeRemoved, cpqRackServerBladeRemoteFrontIOBlankingInactive=cpqRackServerBladeRemoteFrontIOBlankingInactive, cpqRackServerNetworking=cpqRackServerNetworking, cpqRackCommonEnclosureSerialNumPrev=cpqRackCommonEnclosureSerialNumPrev, cpqRackAssetTable=cpqRackAssetTable, cpqRackNetConnectorLocation=cpqRackNetConnectorLocation, cpqRackEnclosureFanRemoved=cpqRackEnclosureFanRemoved, cpqRackPowerEnclosureMgmtBoardSerialNum=cpqRackPowerEnclosureMgmtBoardSerialNum, cpqRackServerBladePartNumber=cpqRackServerBladePartNumber, cpqRackPowerSupplyDegraded=cpqRackPowerSupplyDegraded, cpqRackPowerSupplyRemoved=cpqRackPowerSupplyRemoved, cpqRackServerEnclosureMaxNumBlades=cpqRackServerEnclosureMaxNumBlades, cpqRackCommonEnclosureFruEnclosureName=cpqRackCommonEnclosureFruEnclosureName, cpqRackPowerEnclosureLoadBalanced=cpqRackPowerEnclosureLoadBalanced, cpqRackServerBladePresent=cpqRackServerBladePresent, cpqRackNetConnectorEntry=cpqRackNetConnectorEntry, cpqRackServerBladeEnclosureName=cpqRackServerBladeEnclosureName, cpqRackServerBladeFrontIOBlankingActive=cpqRackServerBladeFrontIOBlankingActive, cpqRackCommonEnclosureIndex=cpqRackCommonEnclosureIndex, cpqRackCommonEnclosureFanSparePartNumber=cpqRackCommonEnclosureFanSparePartNumber, cpqRackCommonEnclosureFruAssemblyPartNumber=cpqRackCommonEnclosureFruAssemblyPartNumber, cpqRackServerBladeEntry=cpqRackServerBladeEntry, cpqRackCommonEnclosureManagerCondition=cpqRackCommonEnclosureManagerCondition, cpqRackCommonEnclosureFanLocation=cpqRackCommonEnclosureFanLocation, cpqRackCommonEnclosureTempChassis=cpqRackCommonEnclosureTempChassis, cpqRackInterface=cpqRackInterface, cpqRackServerEnclosure=cpqRackServerEnclosure, cpqRackEnclosureTempDegraded=cpqRackEnclosureTempDegraded, cpqRackPower=cpqRackPower, cpqRackPowerChassisDcPowerProblem=cpqRackPowerChassisDcPowerProblem, cpqRackCommonEnclosureFruTable=cpqRackCommonEnclosureFruTable, cpqRackCommonEnclosureProductIdNext=cpqRackCommonEnclosureProductIdNext, cpqRackCommonEnclosureFuseChassis=cpqRackCommonEnclosureFuseChassis, cpqRackServerBladePendingBootOrderChange=cpqRackServerBladePendingBootOrderChange, cpqRackServerBladeDepth=cpqRackServerBladeDepth, cpqRackCommonEnclosureTempTable=cpqRackCommonEnclosureTempTable, cpqRackManagerPrimaryRole=cpqRackManagerPrimaryRole, cpqRackCommonEnclosureAssetTag=cpqRackCommonEnclosureAssetTag, cpqRackPowerSupplyPartNumber=cpqRackPowerSupplyPartNumber, cpqRackServerBladeManagementDeviceFirmwareRevision=cpqRackServerBladeManagementDeviceFirmwareRevision, cpqRackPowerEnclosureBladeAutopoweron=cpqRackPowerEnclosureBladeAutopoweron, cpqRackOsCommonPollFreq=cpqRackOsCommonPollFreq, cpqRackCommonEnclosureManagerEnclosureName=cpqRackCommonEnclosureManagerEnclosureName, cpqRackServerTempSensorIndex=cpqRackServerTempSensorIndex, cpqRackCommonEnclosureSerialNum=cpqRackCommonEnclosureSerialNum, cpqRackServerBladeSystemBIOSFlashingStatus=cpqRackServerBladeSystemBIOSFlashingStatus, cpqRackNetConnector=cpqRackNetConnector, cpqRackFuseOpen=cpqRackFuseOpen, cpqRackServerTempSensorCondition=cpqRackServerTempSensorCondition, cpqRackPowerSupplyFWRev=cpqRackPowerSupplyFWRev, cpqRackNetConnectorModel=cpqRackNetConnectorModel, cpqRackCommonEnclosureManagerSparePartNumber=cpqRackCommonEnclosureManagerSparePartNumber, cpqRackInfo=cpqRackInfo, cpqRackServer=cpqRackServer, cpqRackCommonEnclosureFuseCondition=cpqRackCommonEnclosureFuseCondition, cpqRackPowerSupplyStatus=cpqRackPowerSupplyStatus, cpqRackServerNetworkingEntry=cpqRackServerNetworkingEntry, cpqRackEnclosureManagerInserted=cpqRackEnclosureManagerInserted, cpqRackPowerSupplyChassis=cpqRackPowerSupplyChassis, cpqRackServerPowerOnFailedEnclosureNotFound=cpqRackServerPowerOnFailedEnclosureNotFound, cpqRackCommonEnclosureTempSensorIndex=cpqRackCommonEnclosureTempSensorIndex, cpqRackPowerSupplyCondition=cpqRackPowerSupplyCondition, cpqRackCommonEnclosureUUID=cpqRackCommonEnclosureUUID, cpqRackCommonEnclosureRack=cpqRackCommonEnclosureRack, cpqRackServerBladeToLowPower=cpqRackServerBladeToLowPower, cpqRackCommonEnclosureTempCondition=cpqRackCommonEnclosureTempCondition, cpqRackCommonEnclosureNeighborNamePrev=cpqRackCommonEnclosureNeighborNamePrev, cpqRackNetConnectorFWRev=cpqRackNetConnectorFWRev, cpqRackServerBladeManagementDeviceFirmwareFlashingStatus=cpqRackServerBladeManagementDeviceFirmwareFlashingStatus, cpqRackHeight=cpqRackHeight, cpqRackAssetIndex=cpqRackAssetIndex, cpqRackCommonEnclosureSerialNumNext=cpqRackCommonEnclosureSerialNumNext, cpqRackServerNetworkingName=cpqRackServerNetworkingName, cpqRackPowerSupplyCurPwrOutput=cpqRackPowerSupplyCurPwrOutput, cpqRackUid=cpqRackUid, cpqRackServerPowerOnFailedPowerChassisNotFound=cpqRackServerPowerOnFailedPowerChassisNotFound, cpqRackServerBladeChassis=cpqRackServerBladeChassis, cpqRackServerEnclosureIndex=cpqRackServerEnclosureIndex, cpqRackNetConnectorHasFuses=cpqRackNetConnectorHasFuses, cpqRackCommonEnclosureFanChassis=cpqRackCommonEnclosureFanChassis)
mibBuilder.exportSymbols("CPQRACK-MIB", cpqRackDepth=cpqRackDepth, cpqRackServerBladePoweredOff=cpqRackServerBladePoweredOff, cpqRackServerBladeSlotsUsedY=cpqRackServerBladeSlotsUsedY, cpqRackServerBladeUnexpectedShutdown=cpqRackServerBladeUnexpectedShutdown, cpqRackCommonEnclosureFanPresent=cpqRackCommonEnclosureFanPresent, cpqRackServerBladeHeight=cpqRackServerBladeHeight, cpqRackServerBladeUIDState=cpqRackServerBladeUIDState, cpqRackNetConnectorRack=cpqRackNetConnectorRack, cpqRackEnclosureManagerRemoved=cpqRackEnclosureManagerRemoved, cpqRackServerBladeInserted=cpqRackServerBladeInserted, cpqRackServerBladeDiagnosticAdaptorPresence=cpqRackServerBladeDiagnosticAdaptorPresence, cpqRackServerBladeMangementControllerFirmwareUpdating=cpqRackServerBladeMangementControllerFirmwareUpdating, cpqRackPowerSupplyPresent=cpqRackPowerSupplyPresent, cpqRackCommonEnclosureManagerChassis=cpqRackCommonEnclosureManagerChassis, cpqRackCommonEnclosureTempEntry=cpqRackCommonEnclosureTempEntry, cpqRackCommonEnclosureHasServerBlades=cpqRackCommonEnclosureHasServerBlades, cpqRackOsCommon=cpqRackOsCommon, cpqRackCommonEnclosureManagerPartNumber=cpqRackCommonEnclosureManagerPartNumber, cpqRackPowerChassisNotLoadBalanced=cpqRackPowerChassisNotLoadBalanced, cpqRackCommonEnclosureFuseLocation=cpqRackCommonEnclosureFuseLocation, cpqRackCommonEnclosureHasPowerSupplies=cpqRackCommonEnclosureHasPowerSupplies, cpqRackServerPowerOnFailedNotRedundant=cpqRackServerPowerOnFailedNotRedundant, cpqRackServerBladeSlotsUsed=cpqRackServerBladeSlotsUsed, cpqRackEnclosureFanInserted=cpqRackEnclosureFanInserted, cpqRackCommonEnclosureDepth=cpqRackCommonEnclosureDepth, cpqRackServerTempSensorEntry=cpqRackServerTempSensorEntry, cpqRackPowerSupplyInputLineStatus=cpqRackPowerSupplyInputLineStatus, cpqRackServerBladeGrpCapTimeout=cpqRackServerBladeGrpCapTimeout, cpqRackCommonEnclosureManagerUUID=cpqRackCommonEnclosureManagerUUID, cpqRackCommonEnclosureHasTempSensors=cpqRackCommonEnclosureHasTempSensors, cpqRackCommonEnclosureHasNetConnectors=cpqRackCommonEnclosureHasNetConnectors, cpqRackServerBladeSparePartNumber=cpqRackServerBladeSparePartNumber, cpqRackServerNetworkingRack=cpqRackServerNetworkingRack, cpqRackNetConnectorName=cpqRackNetConnectorName, cpqRackCommonEnclosureManagerIndex=cpqRackCommonEnclosureManagerIndex, cpqRackNetConnectorTable=cpqRackNetConnectorTable, cpqRackCommonEnclosureFuseEnclosureName=cpqRackCommonEnclosureFuseEnclosureName, cpqRackPowerEnclosureName=cpqRackPowerEnclosureName, cpqRackEnclosureTempFailed=cpqRackEnclosureTempFailed, cpqRackCommonEnclosureProductId=cpqRackCommonEnclosureProductId, cpqRackCommonEnclosureFanEntry=cpqRackCommonEnclosureFanEntry, cpqRackCommonEnclosureFanEnclosureName=cpqRackCommonEnclosureFanEnclosureName, cpqRackTrapSequenceNum=cpqRackTrapSequenceNum, cpqRackCommonEnclosureTempThreshold=cpqRackCommonEnclosureTempThreshold, cpqRackNetConnectorType=cpqRackNetConnectorType, cpqRackServerBladeFaultMinor=cpqRackServerBladeFaultMinor, cpqRackCommonEnclosurePartNumber=cpqRackCommonEnclosurePartNumber, cpqRackCommonEnclosureFruEntry=cpqRackCommonEnclosureFruEntry, cpqRackSerialNum=cpqRackSerialNum, cpqRackNetConnectorEnclosureSerialNum=cpqRackNetConnectorEnclosureSerialNum, cpqRackEnclosureNameChanged=cpqRackEnclosureNameChanged, cpqRackPowerEnclosureCondition=cpqRackPowerEnclosureCondition, cpqRackNetConnectorEnclosureName=cpqRackNetConnectorEnclosureName, cpqRackServerNetworkingChassis=cpqRackServerNetworkingChassis, cpqRackCommonEnclosureFanCondition=cpqRackCommonEnclosureFanCondition, cpqRackServerBladeFaultDiagnosticString=cpqRackServerBladeFaultDiagnosticString, cpqRackName=cpqRackName, cpqRackCommonEnclosureFanPartNumber=cpqRackCommonEnclosureFanPartNumber, cpqRackNetConnectorTechnologyType=cpqRackNetConnectorTechnologyType, cpqRackServerBladePowered=cpqRackServerBladePowered, cpqRackServerTempSensor=cpqRackServerTempSensor, cpqRackPowerSupplyPosition=cpqRackPowerSupplyPosition, cpqRackPowerSubsystemOverloadCondition=cpqRackPowerSubsystemOverloadCondition, cpqRackCommonEnclosureManagerRack=cpqRackCommonEnclosureManagerRack, cpqRackServerBladeSerialNum=cpqRackServerBladeSerialNum, cpqRackServerBladeSystemBIOSFirmwareUpdating=cpqRackServerBladeSystemBIOSFirmwareUpdating, cpqRackServerTempSensorType=cpqRackServerTempSensorType, cpqRackPowerSupplyIndex=cpqRackPowerSupplyIndex, cpqRackSystemObjectIdentification=cpqRackSystemObjectIdentification)
