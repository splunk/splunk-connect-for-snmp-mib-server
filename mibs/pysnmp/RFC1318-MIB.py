#
# PySNMP MIB module RFC1318-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1318-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:48:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, Gauge32, iso, ObjectIdentity, transmission, Unsigned32, TimeTicks, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Gauge32", "iso", "ObjectIdentity", "transmission", "Unsigned32", "TimeTicks", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Counter64", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
para = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 34))
paraNumber = MibScalar((1, 3, 6, 1, 2, 1, 10, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraNumber.setStatus('mandatory')
paraPortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 34, 2), )
if mibBuilder.loadTexts: paraPortTable.setStatus('mandatory')
paraPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 34, 2, 1), ).setIndexNames((0, "RFC1318-MIB", "paraPortIndex"))
if mibBuilder.loadTexts: paraPortEntry.setStatus('mandatory')
paraPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraPortIndex.setStatus('mandatory')
paraPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("centronics", 2), ("dataproducts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraPortType.setStatus('mandatory')
paraPortInSigNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraPortInSigNumber.setStatus('mandatory')
paraPortOutSigNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraPortOutSigNumber.setStatus('mandatory')
paraInSigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 34, 3), )
if mibBuilder.loadTexts: paraInSigTable.setStatus('mandatory')
paraInSigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 34, 3, 1), ).setIndexNames((0, "RFC1318-MIB", "paraInSigPortIndex"), (0, "RFC1318-MIB", "paraInSigName"))
if mibBuilder.loadTexts: paraInSigEntry.setStatus('mandatory')
paraInSigPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraInSigPortIndex.setStatus('mandatory')
paraInSigName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("power", 1), ("online", 2), ("busy", 3), ("paperout", 4), ("fault", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraInSigName.setStatus('mandatory')
paraInSigState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraInSigState.setStatus('mandatory')
paraInSigChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraInSigChanges.setStatus('mandatory')
paraOutSigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 34, 4), )
if mibBuilder.loadTexts: paraOutSigTable.setStatus('mandatory')
paraOutSigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 34, 4, 1), ).setIndexNames((0, "RFC1318-MIB", "paraOutSigPortIndex"), (0, "RFC1318-MIB", "paraOutSigName"))
if mibBuilder.loadTexts: paraOutSigEntry.setStatus('mandatory')
paraOutSigPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraOutSigPortIndex.setStatus('mandatory')
paraOutSigName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("power", 1), ("online", 2), ("busy", 3), ("paperout", 4), ("fault", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraOutSigName.setStatus('mandatory')
paraOutSigState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraOutSigState.setStatus('mandatory')
paraOutSigChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 34, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paraOutSigChanges.setStatus('mandatory')
mibBuilder.exportSymbols("RFC1318-MIB", paraOutSigTable=paraOutSigTable, paraNumber=paraNumber, paraInSigEntry=paraInSigEntry, paraInSigChanges=paraInSigChanges, paraPortTable=paraPortTable, paraPortInSigNumber=paraPortInSigNumber, paraInSigPortIndex=paraInSigPortIndex, paraInSigState=paraInSigState, paraPortOutSigNumber=paraPortOutSigNumber, paraOutSigState=paraOutSigState, paraPortType=paraPortType, paraOutSigChanges=paraOutSigChanges, paraPortIndex=paraPortIndex, para=para, paraOutSigPortIndex=paraOutSigPortIndex, paraPortEntry=paraPortEntry, paraOutSigName=paraOutSigName, paraOutSigEntry=paraOutSigEntry, paraInSigName=paraInSigName, paraInSigTable=paraInSigTable)
