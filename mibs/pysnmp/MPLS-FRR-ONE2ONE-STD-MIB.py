#
# PySNMP MIB module MPLS-FRR-ONE2ONE-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-FRR-ONE2ONE-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:04:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
mplsFrrGeneralScalarGroup, mplsFrrGeneralTunnelARHopGroup, mplsFrrGeneralConstraintsGroup = mibBuilder.importSymbols("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralScalarGroup", "mplsFrrGeneralTunnelARHopGroup", "mplsFrrGeneralConstraintsGroup")
MplsLsrIdentifier, MplsTunnelIndex, MplsTunnelInstanceIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLsrIdentifier", "MplsTunnelIndex", "MplsTunnelInstanceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, IpAddress, ModuleIdentity, Bits, Gauge32, Counter64, NotificationType, MibIdentifier, TimeTicks, Unsigned32, Integer32, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "IpAddress", "ModuleIdentity", "Bits", "Gauge32", "Counter64", "NotificationType", "MibIdentifier", "TimeTicks", "Unsigned32", "Integer32", "iso", "Counter32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
mplsFrrOne2OneMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 203))
mplsFrrOne2OneMIB.setRevisions(('2011-11-03 00:00',))
if mibBuilder.loadTexts: mplsFrrOne2OneMIB.setLastUpdated('201111030000Z')
if mibBuilder.loadTexts: mplsFrrOne2OneMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
mplsFrrOne2OneObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 203, 1))
mplsFrrOne2OneConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 203, 2))
mplsFrrIncomingDetourLSPs = MibScalar((1, 3, 6, 1, 2, 1, 203, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrIncomingDetourLSPs.setStatus('current')
mplsFrrOutgoingDetourLSPs = MibScalar((1, 3, 6, 1, 2, 1, 203, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOutgoingDetourLSPs.setStatus('current')
mplsFrrOne2OneDetourOriginating = MibScalar((1, 3, 6, 1, 2, 1, 203, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OneDetourOriginating.setStatus('current')
mplsFrrActiveProtectedLSPs = MibScalar((1, 3, 6, 1, 2, 1, 203, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrActiveProtectedLSPs.setStatus('current')
mplsFrrOne2OnePlrTable = MibTable((1, 3, 6, 1, 2, 1, 203, 1, 5), )
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTable.setStatus('current')
mplsFrrOne2OnePlrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 203, 1, 5, 1), ).setIndexNames((0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelIndex"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelDetourInstance"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelIngressLSRId"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelEgressLSRId"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrId"))
if mibBuilder.loadTexts: mplsFrrOne2OnePlrEntry.setStatus('current')
mplsFrrOne2OnePlrTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelIndex.setStatus('current')
mplsFrrOne2OnePlrTunnelDetourInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelDetourInstance.setStatus('current')
mplsFrrOne2OnePlrTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 3), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelIngressLSRId.setStatus('current')
mplsFrrOne2OnePlrTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 4), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelEgressLSRId.setStatus('current')
mplsFrrOne2OnePlrId = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 5), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrId.setStatus('current')
mplsFrrOne2OnePlrSenderAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 6), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsFrrOne2OnePlrSenderAddrType.setStatus('current')
mplsFrrOne2OnePlrSenderAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsFrrOne2OnePlrSenderAddr.setStatus('current')
mplsFrrOne2OnePlrAvoidNodeAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 8), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OnePlrAvoidNodeAddrType.setStatus('current')
mplsFrrOne2OnePlrAvoidNodeAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OnePlrAvoidNodeAddr.setStatus('current')
mplsFrrOne2OneDetourTable = MibTable((1, 3, 6, 1, 2, 1, 203, 1, 6), )
if mibBuilder.loadTexts: mplsFrrOne2OneDetourTable.setStatus('current')
mplsFrrOne2OneDetourEntry = MibTableRow((1, 3, 6, 1, 2, 1, 203, 1, 6, 1), ).setIndexNames((0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelIndex"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelDetourInstance"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelIngressLSRId"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelEgressLSRId"))
if mibBuilder.loadTexts: mplsFrrOne2OneDetourEntry.setStatus('current')
mplsFrrOne2OneDetourActive = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OneDetourActive.setStatus('current')
mplsFrrOne2OneDetourMergedStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notMerged", 1), ("mergedWithProtectedTunnel", 2), ("mergedWithDetour", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OneDetourMergedStatus.setStatus('current')
mplsFrrOne2OneDetourMergedDetourInst = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 6, 1, 3), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OneDetourMergedDetourInst.setStatus('current')
mplsFrrOne2OneCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 203, 2, 1))
mplsFrrOne2OneGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 203, 2, 2))
mplsFrrOne2OneModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 203, 2, 1, 1)).setObjects(("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralScalarGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneScalarsGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePLRDetourGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OneModuleFullCompliance = mplsFrrOne2OneModuleFullCompliance.setStatus('current')
mplsFrrOne2OneModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 203, 2, 1, 2)).setObjects(("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneScalarsGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePLRDetourGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OneModuleReadOnlyCompliance = mplsFrrOne2OneModuleReadOnlyCompliance.setStatus('current')
mplsFrrOne2OneScalarsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 203, 2, 2, 1)).setObjects(("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrIncomingDetourLSPs"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOutgoingDetourLSPs"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneDetourOriginating"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrActiveProtectedLSPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OneScalarsGroup = mplsFrrOne2OneScalarsGroup.setStatus('current')
mplsFrrOne2OnePLRDetourGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 203, 2, 2, 2)).setObjects(("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneDetourActive"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneDetourMergedStatus"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneDetourMergedDetourInst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OnePLRDetourGroup = mplsFrrOne2OnePLRDetourGroup.setStatus('current')
mplsFrrOne2OnePlrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 203, 2, 2, 3)).setObjects(("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrSenderAddrType"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrSenderAddr"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrAvoidNodeAddrType"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrAvoidNodeAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OnePlrGroup = mplsFrrOne2OnePlrGroup.setStatus('current')
mibBuilder.exportSymbols("MPLS-FRR-ONE2ONE-STD-MIB", mplsFrrOne2OnePlrTunnelEgressLSRId=mplsFrrOne2OnePlrTunnelEgressLSRId, mplsFrrOne2OneScalarsGroup=mplsFrrOne2OneScalarsGroup, mplsFrrOne2OnePlrSenderAddr=mplsFrrOne2OnePlrSenderAddr, mplsFrrOne2OneModuleReadOnlyCompliance=mplsFrrOne2OneModuleReadOnlyCompliance, mplsFrrActiveProtectedLSPs=mplsFrrActiveProtectedLSPs, mplsFrrOne2OneDetourMergedStatus=mplsFrrOne2OneDetourMergedStatus, mplsFrrOne2OnePlrTable=mplsFrrOne2OnePlrTable, mplsFrrOne2OnePlrSenderAddrType=mplsFrrOne2OnePlrSenderAddrType, mplsFrrOne2OneDetourTable=mplsFrrOne2OneDetourTable, mplsFrrOne2OneGroups=mplsFrrOne2OneGroups, mplsFrrOne2OnePLRDetourGroup=mplsFrrOne2OnePLRDetourGroup, mplsFrrOne2OneModuleFullCompliance=mplsFrrOne2OneModuleFullCompliance, mplsFrrOne2OnePlrTunnelIndex=mplsFrrOne2OnePlrTunnelIndex, mplsFrrOne2OnePlrAvoidNodeAddr=mplsFrrOne2OnePlrAvoidNodeAddr, mplsFrrOne2OneDetourActive=mplsFrrOne2OneDetourActive, mplsFrrOne2OneObjects=mplsFrrOne2OneObjects, mplsFrrOne2OneCompliances=mplsFrrOne2OneCompliances, mplsFrrOne2OnePlrTunnelIngressLSRId=mplsFrrOne2OnePlrTunnelIngressLSRId, mplsFrrIncomingDetourLSPs=mplsFrrIncomingDetourLSPs, PYSNMP_MODULE_ID=mplsFrrOne2OneMIB, mplsFrrOne2OnePlrGroup=mplsFrrOne2OnePlrGroup, mplsFrrOne2OnePlrAvoidNodeAddrType=mplsFrrOne2OnePlrAvoidNodeAddrType, mplsFrrOne2OneDetourEntry=mplsFrrOne2OneDetourEntry, mplsFrrOutgoingDetourLSPs=mplsFrrOutgoingDetourLSPs, mplsFrrOne2OnePlrEntry=mplsFrrOne2OnePlrEntry, mplsFrrOne2OnePlrId=mplsFrrOne2OnePlrId, mplsFrrOne2OnePlrTunnelDetourInstance=mplsFrrOne2OnePlrTunnelDetourInstance, mplsFrrOne2OneDetourOriginating=mplsFrrOne2OneDetourOriginating, mplsFrrOne2OneMIB=mplsFrrOne2OneMIB, mplsFrrOne2OneConformance=mplsFrrOne2OneConformance, mplsFrrOne2OneDetourMergedDetourInst=mplsFrrOne2OneDetourMergedDetourInst)
