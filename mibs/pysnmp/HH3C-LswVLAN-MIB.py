#
# PySNMP MIB module HH3C-LswVLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LswVLAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
PortList, hh3cifVLANTrunkStatusEntry = mibBuilder.importSymbols("HH3C-LswINF-MIB", "PortList", "hh3cifVLANTrunkStatusEntry")
hh3clswCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3clswCommon")
ifEntry, = mibBuilder.importSymbols("IF-MIB", "ifEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, NotificationType, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Unsigned32, Gauge32, IpAddress, TimeTicks, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "NotificationType", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Unsigned32", "Gauge32", "IpAddress", "TimeTicks", "MibIdentifier", "Integer32")
DisplayString, TruthValue, TimeInterval, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeInterval", "RowStatus", "TextualConvention")
hh3cLswVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2))
if mibBuilder.loadTexts: hh3cLswVlan.setLastUpdated('200112261452Z')
if mibBuilder.loadTexts: hh3cLswVlan.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cVlanIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

hh3cLswVlanMngObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1))
if mibBuilder.loadTexts: hh3cLswVlanMngObject.setStatus('current')
hh3cdot1qVlanMIBTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cdot1qVlanMIBTable.setStatus('current')
hh3cdot1qVlanMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1), ).setIndexNames((0, "HH3C-LswVLAN-MIB", "hh3cdot1qVlanIndex"))
if mibBuilder.loadTexts: hh3cdot1qVlanMIBEntry.setStatus('current')
hh3cdot1qVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 1), Hh3cVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanIndex.setStatus('current')
hh3cdot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanName.setStatus('current')
hh3cdot1qVlanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanPorts.setStatus('current')
hh3cdot1qVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("superVlan", 1), ("common-vlan", 2), ("sub-vlan", 3), ("isolate-user-vlan", 4), ("secondary-vlan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanType.setStatus('current')
hh3cdot1qVlanMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanMacFilter.setStatus('current')
hh3cdot1qVlanMcastUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanMcastUnknownProtos.setStatus('current')
hh3cExistInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cExistInterface.setStatus('current')
hh3cVlanInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVlanInterfaceIndex.setStatus('current')
hh3cdot1qVlanMacLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanMacLearn.setStatus('current')
hh3cdot1qVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanStatus.setStatus('current')
hh3cdot1qVlanCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanCreationTime.setStatus('current')
hh3cdot1qVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanPriority.setStatus('current')
hh3cdot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdot1qVlanRowStatus.setStatus('current')
hh3cdot1qVlanBroadcastSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanBroadcastSuppression.setStatus('current')
hh3cdot1qVlanBcastSuppressionPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 148800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanBcastSuppressionPPS.setStatus('current')
hh3cdot1qVlanMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanMulticast.setStatus('current')
hh3cdot1qVlanTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 17), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanTaggedPorts.setStatus('current')
hh3cdot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 18), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanUntaggedPorts.setStatus('current')
hh3cdot1qVlanPortIndexs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 1, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanPortIndexs.setStatus('current')
hh3cVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cVlanInterfaceTable.setStatus('current')
hh3cVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1), ).setIndexNames((0, "HH3C-LswVLAN-MIB", "hh3cVlanInterfaceID"))
if mibBuilder.loadTexts: hh3cVlanInterfaceEntry.setStatus('current')
hh3cVlanInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVlanInterfaceID.setStatus('current')
hh3cdot1qVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 2), Hh3cVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanID.setStatus('current')
hh3cdot1qVlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanIpAddress.setStatus('current')
hh3cdot1qVlanIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanIpAddressMask.setStatus('current')
hh3cVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVlanInterfaceAdminStatus.setStatus('current')
hh3cVlanInterfaceFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet-ii", 1), ("ethernet-snap", 2), ("ethernet-8022", 3), ("ethernet-8023", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVlanInterfaceFrameType.setStatus('current')
hh3cInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cInterfaceRowStatus.setStatus('current')
hh3cVlanInterfaceIpMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("assigned-ip", 1), ("dhcp-ip", 2), ("bootp-ip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVlanInterfaceIpMethod.setStatus('current')
hh3cVlanInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVlanInterfaceIfIndex.setStatus('current')
hh3cifIsolateMappingTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 4), )
if mibBuilder.loadTexts: hh3cifIsolateMappingTable.setStatus('current')
hh3cifIsolateMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 4, 1), ).setIndexNames((0, "HH3C-LswVLAN-MIB", "hh3cifIsolatePrimaryVlanID"))
if mibBuilder.loadTexts: hh3cifIsolateMappingEntry.setStatus('current')
hh3cifIsolatePrimaryVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 4, 1, 1), Hh3cVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifIsolatePrimaryVlanID.setStatus('current')
hh3cifIsolateSecondaryVlanlistLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifIsolateSecondaryVlanlistLow.setStatus('current')
hh3cifIsolateSecondaryVlanlistHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifIsolateSecondaryVlanlistHigh.setStatus('current')
hh3cVlanInterfaceAddrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 5), )
if mibBuilder.loadTexts: hh3cVlanInterfaceAddrTable.setStatus('current')
hh3cVlanInterfaceAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 5, 1), ).setIndexNames((0, "HH3C-LswVLAN-MIB", "hh3cVlanInterfaceIpIfIndex"), (0, "HH3C-LswVLAN-MIB", "hh3cVlanInterfaceIpAddr"))
if mibBuilder.loadTexts: hh3cVlanInterfaceAddrEntry.setStatus('current')
hh3cVlanInterfaceIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVlanInterfaceIpIfIndex.setStatus('current')
hh3cVlanInterfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVlanInterfaceIpAddr.setStatus('current')
hh3cVlanInterfaceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVlanInterfaceIpMask.setStatus('current')
hh3cVlanInterfaceIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("sub", 2), ("cluster", 3), ("vrrp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVlanInterfaceIpType.setStatus('current')
hh3cVlanInterfaceIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVlanInterfaceIpRowStatus.setStatus('current')
hh3cDot1qVlanBatchMIBTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 6), )
if mibBuilder.loadTexts: hh3cDot1qVlanBatchMIBTable.setStatus('current')
hh3cDot1qVlanBatchMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 6, 1), ).setIndexNames((0, "HH3C-LswVLAN-MIB", "hh3cdot1qVlanBatchOperIndex"))
if mibBuilder.loadTexts: hh3cDot1qVlanBatchMIBEntry.setStatus('current')
hh3cdot1qVlanBatchOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanBatchOperIndex.setStatus('current')
hh3cdot1qVlanBatchStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 6, 1, 2), Hh3cVlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanBatchStartIndex.setStatus('current')
hh3cdot1qVlanBatchEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 6, 1, 3), Hh3cVlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qVlanBatchEndIndex.setStatus('current')
hh3cdot1qVlanBatchOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("opInprogress", 1), ("opfailure", 2), ("opsuccess", 3), ("opsuccesspartial", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qVlanBatchOperStatus.setStatus('current')
hh3cdot1qVlanBatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdot1qVlanBatchRowStatus.setStatus('current')
hh3cdot1qVlanBatchSetOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdot1qVlanBatchSetOperate.setStatus('current')
hh3cifSuperVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 7), )
if mibBuilder.loadTexts: hh3cifSuperVlanMappingTable.setStatus('current')
hh3cifSuperVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 7, 1), ).setIndexNames((0, "HH3C-LswVLAN-MIB", "hh3cifSuperVlanID"))
if mibBuilder.loadTexts: hh3cifSuperVlanMappingEntry.setStatus('current')
hh3cifSuperVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 7, 1, 1), Hh3cVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cifSuperVlanID.setStatus('current')
hh3cifSubVlanlistLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifSubVlanlistLow.setStatus('current')
hh3cifSubVlanlistHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cifSubVlanlistHigh.setStatus('current')
hh3cLswVlanProtoObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2))
if mibBuilder.loadTexts: hh3cLswVlanProtoObject.setStatus('current')
hh3cVLANMibGarpLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 14), TimeInterval().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVLANMibGarpLeaveAllTime.setStatus('current')
hh3cvLANMibSwitchCountTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 15), )
if mibBuilder.loadTexts: hh3cvLANMibSwitchCountTable.setStatus('current')
hh3cvLANMibSwitchCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 15, 1), )
hh3cifVLANTrunkStatusEntry.registerAugmentions(("HH3C-LswVLAN-MIB", "hh3cvLANMibSwitchCountEntry"))
hh3cvLANMibSwitchCountEntry.setIndexNames(*hh3cifVLANTrunkStatusEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cvLANMibSwitchCountEntry.setStatus('current')
hh3cVLANMibSwitchGMRPRXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVLANMibSwitchGMRPRXPkt.setStatus('current')
hh3cVLANMibSwitchGVRPRXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVLANMibSwitchGVRPRXPkt.setStatus('current')
hh3cVLANMibSwitchGMRPTXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVLANMibSwitchGMRPTXPkt.setStatus('current')
hh3cVLANMibSwitchGVRPTXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVLANMibSwitchGVRPTXPkt.setStatus('current')
hh3cVLANMibSwitchDiscardedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVLANMibSwitchDiscardedPkt.setStatus('current')
hh3cVLANMibSwitchGarpStatClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVLANMibSwitchGarpStatClear.setStatus('current')
hh3cvLANMibHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 16), )
if mibBuilder.loadTexts: hh3cvLANMibHoldTimeTable.setStatus('current')
hh3cvLANMibHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 16, 1), )
ifEntry.registerAugmentions(("HH3C-LswVLAN-MIB", "hh3cvLANMibHoldTimeEntry"))
hh3cvLANMibHoldTimeEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cvLANMibHoldTimeEntry.setStatus('current')
hh3cVLANMibHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 2, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 32765)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVLANMibHoldTime.setStatus('current')
mibBuilder.exportSymbols("HH3C-LswVLAN-MIB", hh3cifSuperVlanID=hh3cifSuperVlanID, Hh3cVlanIndex=Hh3cVlanIndex, hh3cVlanInterfaceIndex=hh3cVlanInterfaceIndex, hh3cDot1qVlanBatchMIBTable=hh3cDot1qVlanBatchMIBTable, hh3cifIsolateMappingEntry=hh3cifIsolateMappingEntry, hh3cvLANMibHoldTimeEntry=hh3cvLANMibHoldTimeEntry, hh3cVlanInterfaceIpType=hh3cVlanInterfaceIpType, hh3cdot1qVlanBatchOperStatus=hh3cdot1qVlanBatchOperStatus, hh3cvLANMibSwitchCountEntry=hh3cvLANMibSwitchCountEntry, hh3cvLANMibSwitchCountTable=hh3cvLANMibSwitchCountTable, hh3cifSuperVlanMappingTable=hh3cifSuperVlanMappingTable, hh3cVLANMibSwitchGMRPRXPkt=hh3cVLANMibSwitchGMRPRXPkt, hh3cdot1qVlanType=hh3cdot1qVlanType, hh3cdot1qVlanMulticast=hh3cdot1qVlanMulticast, hh3cifSuperVlanMappingEntry=hh3cifSuperVlanMappingEntry, hh3cdot1qVlanRowStatus=hh3cdot1qVlanRowStatus, hh3cLswVlanMngObject=hh3cLswVlanMngObject, hh3cdot1qVlanIndex=hh3cdot1qVlanIndex, hh3cVLANMibSwitchGVRPTXPkt=hh3cVLANMibSwitchGVRPTXPkt, hh3cdot1qVlanMIBEntry=hh3cdot1qVlanMIBEntry, hh3cifIsolateSecondaryVlanlistHigh=hh3cifIsolateSecondaryVlanlistHigh, hh3cVlanInterfaceIpMethod=hh3cVlanInterfaceIpMethod, hh3cdot1qVlanUntaggedPorts=hh3cdot1qVlanUntaggedPorts, hh3cVlanInterfaceIfIndex=hh3cVlanInterfaceIfIndex, hh3cifIsolatePrimaryVlanID=hh3cifIsolatePrimaryVlanID, hh3cVlanInterfaceIpMask=hh3cVlanInterfaceIpMask, hh3cdot1qVlanTaggedPorts=hh3cdot1qVlanTaggedPorts, hh3cdot1qVlanMacLearn=hh3cdot1qVlanMacLearn, hh3cDot1qVlanBatchMIBEntry=hh3cDot1qVlanBatchMIBEntry, hh3cVLANMibHoldTime=hh3cVLANMibHoldTime, PYSNMP_MODULE_ID=hh3cLswVlan, hh3cdot1qVlanMacFilter=hh3cdot1qVlanMacFilter, hh3cVlanInterfaceEntry=hh3cVlanInterfaceEntry, hh3cVlanInterfaceAdminStatus=hh3cVlanInterfaceAdminStatus, hh3cdot1qVlanBatchSetOperate=hh3cdot1qVlanBatchSetOperate, hh3cVlanInterfaceIpAddr=hh3cVlanInterfaceIpAddr, hh3cdot1qVlanCreationTime=hh3cdot1qVlanCreationTime, hh3cdot1qVlanBatchEndIndex=hh3cdot1qVlanBatchEndIndex, hh3cifSubVlanlistLow=hh3cifSubVlanlistLow, hh3cdot1qVlanBroadcastSuppression=hh3cdot1qVlanBroadcastSuppression, hh3cVLANMibSwitchGVRPRXPkt=hh3cVLANMibSwitchGVRPRXPkt, hh3cVLANMibSwitchGarpStatClear=hh3cVLANMibSwitchGarpStatClear, hh3cInterfaceRowStatus=hh3cInterfaceRowStatus, hh3cdot1qVlanBatchRowStatus=hh3cdot1qVlanBatchRowStatus, hh3cdot1qVlanPriority=hh3cdot1qVlanPriority, hh3cdot1qVlanMIBTable=hh3cdot1qVlanMIBTable, hh3cVlanInterfaceFrameType=hh3cVlanInterfaceFrameType, hh3cVlanInterfaceID=hh3cVlanInterfaceID, hh3cdot1qVlanIpAddressMask=hh3cdot1qVlanIpAddressMask, hh3cdot1qVlanMcastUnknownProtos=hh3cdot1qVlanMcastUnknownProtos, hh3cvLANMibHoldTimeTable=hh3cvLANMibHoldTimeTable, hh3cifSubVlanlistHigh=hh3cifSubVlanlistHigh, hh3cVlanInterfaceIpRowStatus=hh3cVlanInterfaceIpRowStatus, hh3cLswVlanProtoObject=hh3cLswVlanProtoObject, hh3cLswVlan=hh3cLswVlan, hh3cVLANMibSwitchGMRPTXPkt=hh3cVLANMibSwitchGMRPTXPkt, hh3cdot1qVlanBcastSuppressionPPS=hh3cdot1qVlanBcastSuppressionPPS, hh3cdot1qVlanID=hh3cdot1qVlanID, hh3cVLANMibSwitchDiscardedPkt=hh3cVLANMibSwitchDiscardedPkt, hh3cVlanInterfaceAddrTable=hh3cVlanInterfaceAddrTable, hh3cdot1qVlanBatchOperIndex=hh3cdot1qVlanBatchOperIndex, hh3cifIsolateMappingTable=hh3cifIsolateMappingTable, hh3cVlanInterfaceIpIfIndex=hh3cVlanInterfaceIpIfIndex, hh3cVLANMibGarpLeaveAllTime=hh3cVLANMibGarpLeaveAllTime, hh3cdot1qVlanName=hh3cdot1qVlanName, hh3cExistInterface=hh3cExistInterface, hh3cdot1qVlanStatus=hh3cdot1qVlanStatus, hh3cdot1qVlanIpAddress=hh3cdot1qVlanIpAddress, hh3cVlanInterfaceAddrEntry=hh3cVlanInterfaceAddrEntry, hh3cdot1qVlanPortIndexs=hh3cdot1qVlanPortIndexs, hh3cdot1qVlanBatchStartIndex=hh3cdot1qVlanBatchStartIndex, hh3cVlanInterfaceTable=hh3cVlanInterfaceTable, hh3cifIsolateSecondaryVlanlistLow=hh3cifIsolateSecondaryVlanlistLow, hh3cdot1qVlanPorts=hh3cdot1qVlanPorts)
