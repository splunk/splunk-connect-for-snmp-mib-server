#
# PySNMP MIB module MRD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:05:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, Counter64, Gauge32, NotificationType, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks, Unsigned32, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Counter64", "Gauge32", "NotificationType", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Unsigned32", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanMrouted, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanMrouted")
mrdMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1))
mrdMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1))
class DisplayString(OctetString):
    pass

mrdGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 1))
mrdVersion = MibScalar((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdVersion.setStatus('mandatory')
mrdCachedRouteResTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdCachedRouteResTime.setStatus('mandatory')
mrdPruneFlag = MibScalar((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pruningrouter", 1), ("non-pruningrouter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdPruneFlag.setStatus('mandatory')
mrdConfigUpdate = MibScalar((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configUpdate", 1), ("noConfigUpdate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdConfigUpdate.setStatus('mandatory')
mrdEnableDisable = MibScalar((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doEnable", 1), ("doDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdEnableDisable.setStatus('mandatory')
mrdIntfBoundaryTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 2), )
if mibBuilder.loadTexts: mrdIntfBoundaryTable.setStatus('mandatory')
mrdIntfBoundaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 2, 1), ).setIndexNames((0, "MRD-MIB", "mrdIntfPhyIntAddr"), (0, "MRD-MIB", "mrdIntfScopedAddress"))
if mibBuilder.loadTexts: mrdIntfBoundaryEntry.setStatus('mandatory')
mrdIntfPhyIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIntfPhyIntAddr.setStatus('mandatory')
mrdIntfScopedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIntfScopedAddress.setStatus('mandatory')
mrdIntfBoundMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIntfBoundMaskLength.setStatus('mandatory')
mrdIntfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIntfAdminState.setStatus('mandatory')
mrdTunBoundaryTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: mrdTunBoundaryTable.setStatus('mandatory')
mrdTunBoundaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "MRD-MIB", "mrdTunLocalAddress"), (0, "MRD-MIB", "mrdTunRemoteAddress"), (0, "MRD-MIB", "mrdTunScopedAddress"))
if mibBuilder.loadTexts: mrdTunBoundaryEntry.setStatus('mandatory')
mrdTunLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunLocalAddress.setStatus('mandatory')
mrdTunRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunRemoteAddress.setStatus('mandatory')
mrdTunScopedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunScopedAddress.setStatus('mandatory')
mrdTunBoundMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunBoundMaskLength.setStatus('mandatory')
mrdTunAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunAdminState.setStatus('mandatory')
mrdAltNetTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 4), )
if mibBuilder.loadTexts: mrdAltNetTable.setStatus('mandatory')
mrdAltNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 4, 1), ).setIndexNames((0, "MRD-MIB", "mrdAltNetAddr"), (0, "MRD-MIB", "mrdNetworkAddress"))
if mibBuilder.loadTexts: mrdAltNetEntry.setStatus('mandatory')
mrdAltNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdAltNetAddr.setStatus('mandatory')
mrdNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdNetworkAddress.setStatus('mandatory')
mrdANetMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdANetMaskLength.setStatus('mandatory')
mrdANetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdANetAdminState.setStatus('mandatory')
mrdInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5), )
if mibBuilder.loadTexts: mrdInterfaceTable.setStatus('mandatory')
mrdInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1), ).setIndexNames((0, "MRD-MIB", "mrdIFAddress"))
if mibBuilder.loadTexts: mrdInterfaceEntry.setStatus('mandatory')
mrdIFAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIFAddress.setStatus('mandatory')
mrdIFEnabledFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIFEnabledFlag.setStatus('mandatory')
mrdIFMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIFMetric.setStatus('mandatory')
mrdIFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIFThreshold.setStatus('mandatory')
mrdIFRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIFRateLimit.setStatus('mandatory')
mrdIFBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdIFBoundary.setStatus('mandatory')
mrdIFAlternateNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdIFAlternateNetwork.setStatus('mandatory')
mrdIFAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdIFAdminState.setStatus('mandatory')
mrdTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6), )
if mibBuilder.loadTexts: mrdTunnelTable.setStatus('mandatory')
mrdTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6, 1), ).setIndexNames((0, "MRD-MIB", "mrdLocalAddress"), (0, "MRD-MIB", "mrdRemoteAddress"))
if mibBuilder.loadTexts: mrdTunnelEntry.setStatus('mandatory')
mrdLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdLocalAddress.setStatus('mandatory')
mrdRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdRemoteAddress.setStatus('mandatory')
mrdTunnelMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunnelMetric.setStatus('mandatory')
mrdTunnelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunnelThreshold.setStatus('mandatory')
mrdTunnelRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunnelRateLimit.setStatus('mandatory')
mrdTunnelBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelBoundary.setStatus('mandatory')
mrdTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrdTunnelAdminState.setStatus('mandatory')
mrdGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7), )
if mibBuilder.loadTexts: mrdGroupTable.setStatus('mandatory')
mrdGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1), ).setIndexNames((0, "MRD-MIB", "mrdGroupID"), (0, "MRD-MIB", "mrdGroupVlanMask"), (0, "MRD-MIB", "mrdGroupSrcIP"))
if mibBuilder.loadTexts: mrdGroupEntry.setStatus('mandatory')
mrdGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupID.setStatus('mandatory')
mrdGroupVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupVlanMask.setStatus('mandatory')
mrdGroupSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupSrcIP.setStatus('mandatory')
mrdGroupSrcIPNet = MibScalar((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupSrcIPNet.setStatus('mandatory')
mrdGroupSrcNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupSrcNetMask.setStatus('mandatory')
mrdGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupMetric.setStatus('mandatory')
mrdGroupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupThreshold.setStatus('mandatory')
mrdGroupRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupRate.setStatus('mandatory')
mrdGroupPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupPacketsIn.setStatus('mandatory')
mrdGroupPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupPacketsOut.setStatus('mandatory')
mrdGroupOneWayFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isOneWay", 1), ("isNotOneWay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupOneWayFlg.setStatus('mandatory')
mrdGroupDownFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isDown", 1), ("isNotDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupDownFlg.setStatus('mandatory')
mrdGroupDisabledFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isDisabled", 1), ("isNotDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupDisabledFlg.setStatus('mandatory')
mrdGroupQuerierFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isQuerier", 1), ("isNotQuerier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupQuerierFlg.setStatus('mandatory')
mrdGroupSrcRteFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isSourceRouted", 1), ("isNotSourceRouted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupSrcRteFlg.setStatus('mandatory')
mrdGroupLeafFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isLeaf", 1), ("isNotLeaf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupLeafFlg.setStatus('mandatory')
mrdGroupIgmpv1Flg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isIgmpV1", 1), ("isNotIgmpV1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupIgmpv1Flg.setStatus('mandatory')
mrdTunnelListTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8), )
if mibBuilder.loadTexts: mrdTunnelListTable.setStatus('mandatory')
mrdTunnelListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1), ).setIndexNames((0, "MRD-MIB", "mrdTunnelListGrpID"), (0, "MRD-MIB", "mrdTunnelListVlanMask"), (0, "MRD-MIB", "mrdTunnelListSrcIP"), (0, "MRD-MIB", "mrdTunnelListDstIP"))
if mibBuilder.loadTexts: mrdTunnelListEntry.setStatus('mandatory')
mrdTunnelListGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListGrpID.setStatus('mandatory')
mrdTunnelListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListVlanMask.setStatus('mandatory')
mrdTunnelListSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListSrcIP.setStatus('mandatory')
mrdTunnelListDstIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListDstIP.setStatus('mandatory')
mrdTunnelListMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListMetric.setStatus('mandatory')
mrdTunnelListThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListThreshold.setStatus('mandatory')
mrdTunnelListRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListRate.setStatus('mandatory')
mrdTunnelListPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListPacketsIn.setStatus('mandatory')
mrdTunnelListPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListPacketsOut.setStatus('mandatory')
mrdTunnelListOneWayFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isOneWay", 1), ("isNotOneWay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListOneWayFlg.setStatus('mandatory')
mrdTunnelListDownFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isDown", 1), ("isNotDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListDownFlg.setStatus('mandatory')
mrdTunnelListDisabledFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isDisabled", 1), ("isNotDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListDisabledFlg.setStatus('mandatory')
mrdTunnelListQuerierFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isQuerier", 1), ("isNotQuerier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListQuerierFlg.setStatus('mandatory')
mrdTunnelListSrcRteFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isSourceRouted", 1), ("isNotSourceRouted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListSrcRteFlg.setStatus('mandatory')
mrdTunnelListLeafFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isLeaf", 1), ("isNotLeaf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListLeafFlg.setStatus('mandatory')
mrdTunnelListIgmpv1Flg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isIgmpV1", 1), ("isNotIgmpV1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdTunnelListIgmpv1Flg.setStatus('mandatory')
mrdPeerTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9), )
if mibBuilder.loadTexts: mrdPeerTable.setStatus('mandatory')
mrdPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1), ).setIndexNames((0, "MRD-MIB", "mrdPeerGrpID"), (0, "MRD-MIB", "mrdPeerVlanMask"), (0, "MRD-MIB", "mrdPeerSrcIP"), (0, "MRD-MIB", "mrdPeerPeerIP"))
if mibBuilder.loadTexts: mrdPeerEntry.setStatus('mandatory')
mrdPeerGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerGrpID.setStatus('mandatory')
mrdPeerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerVlanMask.setStatus('mandatory')
mrdPeerSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerSrcIP.setStatus('mandatory')
mrdPeerPeerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerPeerIP.setStatus('mandatory')
mrdPeerMajorLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerMajorLevel.setStatus('mandatory')
mrdPeerMinorLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerMinorLevel.setStatus('mandatory')
mrdPeerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerTimer.setStatus('mandatory')
mrdPeerFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerFlags.setStatus('mandatory')
mrdPeerLeafFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isALeaf", 1), ("isNotALeaf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerLeafFlag.setStatus('mandatory')
mrdPeerPruneFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isAPruningRouter", 1), ("isNotAPruningRouter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerPruneFlag.setStatus('mandatory')
mrdPeerGenIdFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isIncludingGenID", 1), ("isNotIncludingGenID", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerGenIdFlag.setStatus('mandatory')
mrdPeerMtraceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isSupportingMtrace", 1), ("isNotSupportingMtrace", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPeerMtraceFlag.setStatus('mandatory')
mrdAltNetList = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 10), )
if mibBuilder.loadTexts: mrdAltNetList.setStatus('mandatory')
mrdAltNetListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 10, 1), ).setIndexNames((0, "MRD-MIB", "mrdAltNetListGrpID"), (0, "MRD-MIB", "mrdAltNetListVlanMask"), (0, "MRD-MIB", "mrdAltNetListSrcIP"), (0, "MRD-MIB", "mrdAltNetListAltNetIP"))
if mibBuilder.loadTexts: mrdAltNetListEntry.setStatus('mandatory')
mrdAltNetListGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdAltNetListGrpID.setStatus('mandatory')
mrdAltNetListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdAltNetListVlanMask.setStatus('mandatory')
mrdAltNetListSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdAltNetListSrcIP.setStatus('mandatory')
mrdAltNetListAltNetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdAltNetListAltNetIP.setStatus('mandatory')
mrdAltNetListAltNetNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdAltNetListAltNetNetMask.setStatus('mandatory')
mrdBoundaryList = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 11), )
if mibBuilder.loadTexts: mrdBoundaryList.setStatus('mandatory')
mrdBoundaryListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 11, 1), ).setIndexNames((0, "MRD-MIB", "mrdBoundaryListGrpID"), (0, "MRD-MIB", "mrdBoundaryListVlanMask"), (0, "MRD-MIB", "mrdBoundaryListSrcIP"), (0, "MRD-MIB", "mrdBoundaryListBoundaryIP"))
if mibBuilder.loadTexts: mrdBoundaryListEntry.setStatus('mandatory')
mrdBoundaryListGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdBoundaryListGrpID.setStatus('mandatory')
mrdBoundaryListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdBoundaryListVlanMask.setStatus('mandatory')
mrdBoundaryListSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdBoundaryListSrcIP.setStatus('mandatory')
mrdBoundaryListBoundaryIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdBoundaryListBoundaryIP.setStatus('mandatory')
mrdBoundaryListBoundaryNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 11, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdBoundaryListBoundaryNetMask.setStatus('mandatory')
mrdGroupMemTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 12), )
if mibBuilder.loadTexts: mrdGroupMemTable.setStatus('mandatory')
mrdGroupMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 12, 1), ).setIndexNames((0, "MRD-MIB", "mrdGroupMemGrpID"), (0, "MRD-MIB", "mrdGroupMemVlanMask"), (0, "MRD-MIB", "mrdGroupMemSrcIP"), (0, "MRD-MIB", "mrdGroupMemIP"))
if mibBuilder.loadTexts: mrdGroupMemEntry.setStatus('mandatory')
mrdGroupMemGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupMemGrpID.setStatus('mandatory')
mrdGroupMemVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupMemVlanMask.setStatus('mandatory')
mrdGroupMemSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupMemSrcIP.setStatus('mandatory')
mrdGroupMemIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupMemIP.setStatus('mandatory')
mrdGroupMemTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdGroupMemTimer.setStatus('mandatory')
mrdForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 13), )
if mibBuilder.loadTexts: mrdForwardingTable.setStatus('mandatory')
mrdForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 13, 1), ).setIndexNames((0, "MRD-MIB", "mrdForwardingSrcIP"), (0, "MRD-MIB", "mrdForwardingDstIP"), (0, "MRD-MIB", "mrdForwardingGrpID"), (0, "MRD-MIB", "mrdForwardingVlanMask"))
if mibBuilder.loadTexts: mrdForwardingEntry.setStatus('mandatory')
mrdForwardingSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdForwardingSrcIP.setStatus('mandatory')
mrdForwardingDstIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdForwardingDstIP.setStatus('mandatory')
mrdForwardingGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdForwardingGrpID.setStatus('mandatory')
mrdForwardingVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdForwardingVlanMask.setStatus('mandatory')
mrdForwardingSrcGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdForwardingSrcGrpID.setStatus('mandatory')
mrdForwardingSrcVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdForwardingSrcVlanMask.setStatus('mandatory')
mrdPruneTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 14), )
if mibBuilder.loadTexts: mrdPruneTable.setStatus('mandatory')
mrdPruneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 14, 1), ).setIndexNames((0, "MRD-MIB", "mrdPruneDstGroup"), (0, "MRD-MIB", "mrdPrunePruningRouter"))
if mibBuilder.loadTexts: mrdPruneEntry.setStatus('mandatory')
mrdPruneDstGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPruneDstGroup.setStatus('mandatory')
mrdPrunePruningRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPrunePruningRouter.setStatus('mandatory')
mrdPruneGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPruneGrpID.setStatus('mandatory')
mrdPruneVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPruneVlanMask.setStatus('mandatory')
mrdPruneTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdPruneTimer.setStatus('mandatory')
mrdRouteTable = MibTable((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15), )
if mibBuilder.loadTexts: mrdRouteTable.setStatus('mandatory')
mrdRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1), ).setIndexNames((0, "MRD-MIB", "mrdRouteOriginIP"), (0, "MRD-MIB", "mrdRouteGatewayIP"), (0, "MRD-MIB", "mrdRouteGrpID"), (0, "MRD-MIB", "mrdRouteVlanMask"), (0, "MRD-MIB", "mrdRouteTunFlag"))
if mibBuilder.loadTexts: mrdRouteEntry.setStatus('mandatory')
mrdRouteOriginIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteOriginIP.setStatus('mandatory')
mrdRouteOriginMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteOriginMask.setStatus('mandatory')
mrdRouteGatewayIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteGatewayIP.setStatus('mandatory')
mrdRouteGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteGrpID.setStatus('mandatory')
mrdRouteVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteVlanMask.setStatus('mandatory')
mrdRouteLeafFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isLeaf", 1), ("isNotLeaf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteLeafFlag.setStatus('mandatory')
mrdRouteTunFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isTunnel", 1), ("isNotTunnel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteTunFlag.setStatus('mandatory')
mrdRouteSrcGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteSrcGrpID.setStatus('mandatory')
mrdRouteSrcVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteSrcVlanMask.setStatus('mandatory')
mrdRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteMetric.setStatus('mandatory')
mrdRouteTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 3, 2, 3, 1, 1, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrdRouteTimer.setStatus('mandatory')
mibBuilder.exportSymbols("MRD-MIB", mrdBoundaryListBoundaryIP=mrdBoundaryListBoundaryIP, mrdVersion=mrdVersion, mrdRouteLeafFlag=mrdRouteLeafFlag, mrdTunnelListThreshold=mrdTunnelListThreshold, mrdTunnelBoundary=mrdTunnelBoundary, mrdGeneralGroup=mrdGeneralGroup, mrdTunnelListDownFlg=mrdTunnelListDownFlg, mrdTunnelThreshold=mrdTunnelThreshold, mrdTunnelRateLimit=mrdTunnelRateLimit, mrdGroupOneWayFlg=mrdGroupOneWayFlg, mrdPeerPeerIP=mrdPeerPeerIP, mrdRouteEntry=mrdRouteEntry, mrdGroupMemGrpID=mrdGroupMemGrpID, mrdGroupMetric=mrdGroupMetric, mrdTunnelListPacketsIn=mrdTunnelListPacketsIn, mrdTunScopedAddress=mrdTunScopedAddress, mrdPruneGrpID=mrdPruneGrpID, mrdIFThreshold=mrdIFThreshold, mrdPruneTable=mrdPruneTable, mrdRouteOriginMask=mrdRouteOriginMask, mrdPeerVlanMask=mrdPeerVlanMask, mrdPrunePruningRouter=mrdPrunePruningRouter, mrdIntfBoundaryTable=mrdIntfBoundaryTable, mrdPeerTimer=mrdPeerTimer, mrdGroupSrcIPNet=mrdGroupSrcIPNet, mrdPeerTable=mrdPeerTable, mrdPeerMinorLevel=mrdPeerMinorLevel, mrdIntfBoundaryEntry=mrdIntfBoundaryEntry, mrdForwardingEntry=mrdForwardingEntry, mrdAltNetListGrpID=mrdAltNetListGrpID, mrdGroupMemTable=mrdGroupMemTable, mrdGroupThreshold=mrdGroupThreshold, mrdIFRateLimit=mrdIFRateLimit, mrdPeerLeafFlag=mrdPeerLeafFlag, mrdPruneEntry=mrdPruneEntry, mrdTunBoundaryEntry=mrdTunBoundaryEntry, mrdTunnelListRate=mrdTunnelListRate, mrdPeerSrcIP=mrdPeerSrcIP, mrdTunBoundaryTable=mrdTunBoundaryTable, mrdRouteGrpID=mrdRouteGrpID, mrdRouteSrcGrpID=mrdRouteSrcGrpID, mrdIFEnabledFlag=mrdIFEnabledFlag, mrdForwardingSrcVlanMask=mrdForwardingSrcVlanMask, mrdAltNetEntry=mrdAltNetEntry, mrdBoundaryList=mrdBoundaryList, mrdMIB=mrdMIB, mrdPeerMtraceFlag=mrdPeerMtraceFlag, mrdIntfPhyIntAddr=mrdIntfPhyIntAddr, mrdPruneFlag=mrdPruneFlag, mrdAltNetListEntry=mrdAltNetListEntry, mrdGroupMemTimer=mrdGroupMemTimer, mrdRouteMetric=mrdRouteMetric, mrdAltNetTable=mrdAltNetTable, mrdGroupIgmpv1Flg=mrdGroupIgmpv1Flg, mrdAltNetListAltNetIP=mrdAltNetListAltNetIP, mrdPruneTimer=mrdPruneTimer, mrdGroupTable=mrdGroupTable, mrdBoundaryListVlanMask=mrdBoundaryListVlanMask, mrdRouteVlanMask=mrdRouteVlanMask, mrdANetMaskLength=mrdANetMaskLength, mrdGroupVlanMask=mrdGroupVlanMask, mrdInterfaceTable=mrdInterfaceTable, mrdBoundaryListEntry=mrdBoundaryListEntry, mrdTunnelListSrcIP=mrdTunnelListSrcIP, mrdIntfAdminState=mrdIntfAdminState, mrdPeerMajorLevel=mrdPeerMajorLevel, mrdGroupPacketsIn=mrdGroupPacketsIn, mrdGroupMemVlanMask=mrdGroupMemVlanMask, mrdMIBObjects=mrdMIBObjects, mrdTunnelTable=mrdTunnelTable, mrdGroupID=mrdGroupID, mrdGroupPacketsOut=mrdGroupPacketsOut, mrdAltNetListSrcIP=mrdAltNetListSrcIP, mrdGroupSrcRteFlg=mrdGroupSrcRteFlg, mrdAltNetListAltNetNetMask=mrdAltNetListAltNetNetMask, mrdIFAddress=mrdIFAddress, mrdPeerGrpID=mrdPeerGrpID, mrdTunRemoteAddress=mrdTunRemoteAddress, mrdTunAdminState=mrdTunAdminState, mrdTunnelListGrpID=mrdTunnelListGrpID, mrdANetAdminState=mrdANetAdminState, mrdGroupEntry=mrdGroupEntry, mrdRemoteAddress=mrdRemoteAddress, mrdTunnelEntry=mrdTunnelEntry, mrdBoundaryListBoundaryNetMask=mrdBoundaryListBoundaryNetMask, mrdRouteTunFlag=mrdRouteTunFlag, mrdPeerGenIdFlag=mrdPeerGenIdFlag, mrdGroupMemSrcIP=mrdGroupMemSrcIP, mrdForwardingGrpID=mrdForwardingGrpID, mrdTunnelListSrcRteFlg=mrdTunnelListSrcRteFlg, mrdTunnelListDisabledFlg=mrdTunnelListDisabledFlg, mrdTunLocalAddress=mrdTunLocalAddress, mrdRouteOriginIP=mrdRouteOriginIP, mrdTunnelListIgmpv1Flg=mrdTunnelListIgmpv1Flg, mrdRouteTable=mrdRouteTable, mrdGroupLeafFlg=mrdGroupLeafFlg, mrdGroupMemIP=mrdGroupMemIP, mrdRouteSrcVlanMask=mrdRouteSrcVlanMask, mrdEnableDisable=mrdEnableDisable, DisplayString=DisplayString, mrdTunnelListEntry=mrdTunnelListEntry, mrdGroupSrcIP=mrdGroupSrcIP, mrdGroupDownFlg=mrdGroupDownFlg, mrdAltNetListVlanMask=mrdAltNetListVlanMask, mrdIntfBoundMaskLength=mrdIntfBoundMaskLength, mrdTunnelListLeafFlg=mrdTunnelListLeafFlg, mrdAltNetList=mrdAltNetList, mrdForwardingTable=mrdForwardingTable, mrdRouteGatewayIP=mrdRouteGatewayIP, mrdTunnelListTable=mrdTunnelListTable, mrdPeerFlags=mrdPeerFlags, mrdTunnelListOneWayFlg=mrdTunnelListOneWayFlg, mrdGroupRate=mrdGroupRate, mrdIntfScopedAddress=mrdIntfScopedAddress, mrdGroupSrcNetMask=mrdGroupSrcNetMask, mrdTunnelListVlanMask=mrdTunnelListVlanMask, mrdInterfaceEntry=mrdInterfaceEntry, mrdGroupDisabledFlg=mrdGroupDisabledFlg, mrdRouteTimer=mrdRouteTimer, mrdBoundaryListSrcIP=mrdBoundaryListSrcIP, mrdConfigUpdate=mrdConfigUpdate, mrdTunBoundMaskLength=mrdTunBoundMaskLength, mrdIFAdminState=mrdIFAdminState, mrdBoundaryListGrpID=mrdBoundaryListGrpID, mrdPeerEntry=mrdPeerEntry, mrdTunnelListPacketsOut=mrdTunnelListPacketsOut, mrdPruneVlanMask=mrdPruneVlanMask, mrdTunnelMetric=mrdTunnelMetric, mrdPeerPruneFlag=mrdPeerPruneFlag, mrdIFMetric=mrdIFMetric, mrdGroupMemEntry=mrdGroupMemEntry, mrdNetworkAddress=mrdNetworkAddress, mrdCachedRouteResTime=mrdCachedRouteResTime, mrdPruneDstGroup=mrdPruneDstGroup, mrdAltNetAddr=mrdAltNetAddr, mrdIFAlternateNetwork=mrdIFAlternateNetwork, mrdTunnelListQuerierFlg=mrdTunnelListQuerierFlg, mrdIFBoundary=mrdIFBoundary, mrdGroupQuerierFlg=mrdGroupQuerierFlg, mrdTunnelListMetric=mrdTunnelListMetric, mrdLocalAddress=mrdLocalAddress, mrdTunnelAdminState=mrdTunnelAdminState, mrdForwardingSrcIP=mrdForwardingSrcIP, mrdForwardingVlanMask=mrdForwardingVlanMask, mrdForwardingDstIP=mrdForwardingDstIP, mrdForwardingSrcGrpID=mrdForwardingSrcGrpID, mrdTunnelListDstIP=mrdTunnelListDstIP)
