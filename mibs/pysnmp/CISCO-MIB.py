#
# PySNMP MIB module CISCO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:50:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ipAdEntAddr, = mibBuilder.importSymbols("IP-MIB", "ipAdEntAddr")
ipRouteDest, = mibBuilder.importSymbols("RFC1213-MIB", "ipRouteDest")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, Gauge32, Unsigned32, MibIdentifier, TimeTicks, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Integer32, Bits, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "Gauge32", "Unsigned32", "MibIdentifier", "TimeTicks", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Integer32", "Bits", "iso", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tcpConnRemAddress, tcpConnLocalPort, tcpConnLocalAddress, tcpConnRemPort = mibBuilder.importSymbols("TCP-MIB", "tcpConnRemAddress", "tcpConnLocalPort", "tcpConnLocalAddress", "tcpConnRemPort")
cisco = MibIdentifier((1, 3, 6, 1, 4, 1, 9))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1))
local = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2))
temporary = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3))
gateway_server = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 1)).setLabel("gateway-server")
terminal_server = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 2)).setLabel("terminal-server")
trouter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 3))
protocol_translator = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 4)).setLabel("protocol-translator")
igs_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 5)).setLabel("igs-sysID")
c3000_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 6)).setLabel("c3000-sysID")
c4000_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 7)).setLabel("c4000-sysID")
c7000_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 8)).setLabel("c7000-sysID")
cs_500_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 9)).setLabel("cs-500-sysID")
c2000_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 10)).setLabel("c2000-sysID")
agsplus_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 11)).setLabel("agsplus-sysID")
c7010_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 12)).setLabel("c7010-sysID")
c2500_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 13)).setLabel("c2500-sysID")
c4500_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 14)).setLabel("c4500-sysID")
lsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 1))
linterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 2))
lat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 3))
lip = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 4))
licmp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 5))
ltcp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 6))
ludp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 7))
legp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 8))
lts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 9))
lflash = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 10))
tmpdecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 1))
tmpxns = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 2))
tmpappletalk = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 3))
tmpnovell = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 4))
tmpvines = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 5))
tmpchassis = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 6))
romId = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romId.setStatus('mandatory')
whyReload = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whyReload.setStatus('mandatory')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
authAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authAddr.setStatus('mandatory')
bootHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootHost.setStatus('mandatory')
ping = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ping.setStatus('mandatory')
freeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMem.setStatus('mandatory')
bufferElFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElFree.setStatus('mandatory')
bufferElMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElMax.setStatus('mandatory')
bufferElHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElHit.setStatus('mandatory')
bufferElMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElMiss.setStatus('mandatory')
bufferElCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElCreate.setStatus('mandatory')
bufferSmSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmSize.setStatus('mandatory')
bufferSmTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmTotal.setStatus('mandatory')
bufferSmFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmFree.setStatus('mandatory')
bufferSmMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmMax.setStatus('mandatory')
bufferSmHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmHit.setStatus('mandatory')
bufferSmMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmMiss.setStatus('mandatory')
bufferSmTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmTrim.setStatus('mandatory')
bufferSmCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmCreate.setStatus('mandatory')
bufferMdSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdSize.setStatus('mandatory')
bufferMdTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdTotal.setStatus('mandatory')
bufferMdFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdFree.setStatus('mandatory')
bufferMdMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdMax.setStatus('mandatory')
bufferMdHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdHit.setStatus('mandatory')
bufferMdMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdMiss.setStatus('mandatory')
bufferMdTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdTrim.setStatus('mandatory')
bufferMdCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdCreate.setStatus('mandatory')
bufferBgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgSize.setStatus('mandatory')
bufferBgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgTotal.setStatus('mandatory')
bufferBgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgFree.setStatus('mandatory')
bufferBgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgMax.setStatus('mandatory')
bufferBgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgHit.setStatus('mandatory')
bufferBgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgMiss.setStatus('mandatory')
bufferBgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgTrim.setStatus('mandatory')
bufferBgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgCreate.setStatus('mandatory')
bufferLgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgSize.setStatus('mandatory')
bufferLgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgTotal.setStatus('mandatory')
bufferLgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgFree.setStatus('mandatory')
bufferLgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgMax.setStatus('mandatory')
bufferLgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgHit.setStatus('mandatory')
bufferLgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgMiss.setStatus('mandatory')
bufferLgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgTrim.setStatus('mandatory')
bufferLgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgCreate.setStatus('mandatory')
bufferFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferFail.setStatus('mandatory')
bufferNoMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferNoMem.setStatus('mandatory')
netConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 48), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigAddr.setStatus('mandatory')
netConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigName.setStatus('mandatory')
netConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 50), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: netConfigSet.setStatus('mandatory')
hostConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 51), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigAddr.setStatus('mandatory')
hostConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigName.setStatus('mandatory')
hostConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 53), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: hostConfigSet.setStatus('mandatory')
writeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 54), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeMem.setStatus('mandatory')
writeNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 55), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeNet.setStatus('mandatory')
busyPer = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyPer.setStatus('mandatory')
avgBusy1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBusy1.setStatus('mandatory')
avgBusy5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBusy5.setStatus('mandatory')
idleCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleCount.setStatus('mandatory')
idleWired = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleWired.setStatus('mandatory')
ciscoContactInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoContactInfo.setStatus('mandatory')
bufferHgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgSize.setStatus('mandatory')
bufferHgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgTotal.setStatus('mandatory')
bufferHgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgFree.setStatus('mandatory')
bufferHgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgMax.setStatus('mandatory')
bufferHgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgHit.setStatus('mandatory')
bufferHgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgMiss.setStatus('mandatory')
bufferHgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgTrim.setStatus('mandatory')
bufferHgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgCreate.setStatus('mandatory')
netConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigProto.setStatus('mandatory')
hostConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigProto.setStatus('mandatory')
sysConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 72), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigAddr.setStatus('mandatory')
sysConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigName.setStatus('mandatory')
sysConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigProto.setStatus('mandatory')
sysClearARP = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 75), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysClearARP.setStatus('mandatory')
sysClearInt = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 76), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysClearInt.setStatus('mandatory')
envPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPresent.setStatus('mandatory')
envTestPt1Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1Descr.setStatus('mandatory')
envTestPt1Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1Measure.setStatus('mandatory')
envTestPt2Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2Descr.setStatus('mandatory')
envTestPt2Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2Measure.setStatus('mandatory')
envTestPt3Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 82), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3Descr.setStatus('mandatory')
envTestPt3Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3Measure.setStatus('mandatory')
envTestPt4Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4Descr.setStatus('mandatory')
envTestPt4Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4Measure.setStatus('mandatory')
envTestPt5Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5Descr.setStatus('mandatory')
envTestPt5Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5Measure.setStatus('mandatory')
envTestPt6Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6Descr.setStatus('mandatory')
envTestPt6Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6Measure.setStatus('mandatory')
envTestPt1MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1MarginVal.setStatus('mandatory')
envTestPt2MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2MarginVal.setStatus('mandatory')
envTestPt3MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3MarginPercent.setStatus('mandatory')
envTestPt4MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4MarginPercent.setStatus('mandatory')
envTestPt5MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5MarginPercent.setStatus('mandatory')
envTestPt6MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6MarginPercent.setStatus('mandatory')
envTestPt1last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1last.setStatus('mandatory')
envTestPt2last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2last.setStatus('mandatory')
envTestPt3last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3last.setStatus('mandatory')
envTestPt4last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4last.setStatus('mandatory')
envTestPt5last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5last.setStatus('mandatory')
envTestPt6last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6last.setStatus('mandatory')
envTestPt1warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1warn.setStatus('mandatory')
envTestPt2warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2warn.setStatus('mandatory')
envTestPt3warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3warn.setStatus('mandatory')
envTestPt4warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4warn.setStatus('mandatory')
envTestPt5warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5warn.setStatus('mandatory')
envTestPt6warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6warn.setStatus('mandatory')
envFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFirmVersion.setStatus('mandatory')
envTechnicianID = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 109), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTechnicianID.setStatus('mandatory')
envType = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envType.setStatus('mandatory')
envBurnDate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 111), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envBurnDate.setStatus('mandatory')
envSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 112), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envSerialNumber.setStatus('mandatory')
lifTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 2, 1), )
if mibBuilder.loadTexts: lifTable.setStatus('mandatory')
lifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lifEntry.setStatus('mandatory')
locIfHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfHardType.setStatus('mandatory')
locIfLineProt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLineProt.setStatus('mandatory')
locIfLastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastIn.setStatus('mandatory')
locIfLastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastOut.setStatus('mandatory')
locIfLastOutHang = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastOutHang.setStatus('mandatory')
locIfInBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInBitsSec.setStatus('mandatory')
locIfInPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInPktsSec.setStatus('mandatory')
locIfOutBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutBitsSec.setStatus('mandatory')
locIfOutPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutPktsSec.setStatus('mandatory')
locIfInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInRunts.setStatus('mandatory')
locIfInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInGiants.setStatus('mandatory')
locIfInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInCRC.setStatus('mandatory')
locIfInFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInFrame.setStatus('mandatory')
locIfInOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInOverrun.setStatus('mandatory')
locIfInIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInIgnored.setStatus('mandatory')
locIfInAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInAbort.setStatus('mandatory')
locIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfResets.setStatus('mandatory')
locIfRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfRestarts.setStatus('mandatory')
locIfKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfKeep.setStatus('mandatory')
locIfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfReason.setStatus('mandatory')
locIfCarTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfCarTrans.setStatus('mandatory')
locIfReliab = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfReliab.setStatus('mandatory')
locIfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfDelay.setStatus('mandatory')
locIfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLoad.setStatus('mandatory')
locIfCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfCollisions.setStatus('mandatory')
locIfInputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInputQueueDrops.setStatus('mandatory')
locIfOutputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutputQueueDrops.setStatus('mandatory')
locIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locIfDescr.setStatus('mandatory')
locIfSlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowInPkts.setStatus('mandatory')
locIfSlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowOutPkts.setStatus('mandatory')
locIfSlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowInOctets.setStatus('mandatory')
locIfSlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowOutOctets.setStatus('mandatory')
locIfFastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastInPkts.setStatus('mandatory')
locIfFastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastOutPkts.setStatus('mandatory')
locIfFastInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastInOctets.setStatus('mandatory')
locIfFastOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastOutOctets.setStatus('mandatory')
locIfotherInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherInPkts.setStatus('mandatory')
locIfotherOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherOutPkts.setStatus('mandatory')
locIfotherInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherInOctets.setStatus('mandatory')
locIfotherOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherOutOctets.setStatus('mandatory')
locIfipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipInPkts.setStatus('mandatory')
locIfipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipOutPkts.setStatus('mandatory')
locIfipInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipInOctets.setStatus('mandatory')
locIfipOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipOutOctets.setStatus('mandatory')
locIfdecnetInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetInPkts.setStatus('mandatory')
locIfdecnetOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetOutPkts.setStatus('mandatory')
locIfdecnetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetInOctets.setStatus('mandatory')
locIfdecnetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetOutOctets.setStatus('mandatory')
locIfxnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsInPkts.setStatus('mandatory')
locIfxnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsOutPkts.setStatus('mandatory')
locIfxnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsInOctets.setStatus('mandatory')
locIfxnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsOutOctets.setStatus('mandatory')
locIfclnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsInPkts.setStatus('mandatory')
locIfclnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsOutPkts.setStatus('mandatory')
locIfclnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsInOctets.setStatus('mandatory')
locIfclnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsOutOctets.setStatus('mandatory')
locIfappletalkInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkInPkts.setStatus('mandatory')
locIfappletalkOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkOutPkts.setStatus('mandatory')
locIfappletalkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkInOctets.setStatus('mandatory')
locIfappletalkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkOutOctets.setStatus('mandatory')
locIfnovellInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellInPkts.setStatus('mandatory')
locIfnovellOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellOutPkts.setStatus('mandatory')
locIfnovellInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellInOctets.setStatus('mandatory')
locIfnovellOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellOutOctets.setStatus('mandatory')
locIfapolloInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloInPkts.setStatus('mandatory')
locIfapolloOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloOutPkts.setStatus('mandatory')
locIfapolloInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloInOctets.setStatus('mandatory')
locIfapolloOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloOutOctets.setStatus('mandatory')
locIfvinesInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesInPkts.setStatus('mandatory')
locIfvinesOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesOutPkts.setStatus('mandatory')
locIfvinesInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesInOctets.setStatus('mandatory')
locIfvinesOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesOutOctets.setStatus('mandatory')
locIfbridgedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedInPkts.setStatus('mandatory')
locIfbridgedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedOutPkts.setStatus('mandatory')
locIfbridgedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedInOctets.setStatus('mandatory')
locIfbridgedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedOutOctets.setStatus('mandatory')
locIfsrbInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbInPkts.setStatus('mandatory')
locIfsrbOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbOutPkts.setStatus('mandatory')
locIfsrbInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbInOctets.setStatus('mandatory')
locIfsrbOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbOutOctets.setStatus('mandatory')
locIfchaosInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosInPkts.setStatus('mandatory')
locIfchaosOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosOutPkts.setStatus('mandatory')
locIfchaosInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosInOctets.setStatus('mandatory')
locIfchaosOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosOutOctets.setStatus('mandatory')
locIfpupInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupInPkts.setStatus('mandatory')
locIfpupOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupOutPkts.setStatus('mandatory')
locIfpupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupInOctets.setStatus('mandatory')
locIfpupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupOutOctets.setStatus('mandatory')
locIfmopInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopInPkts.setStatus('mandatory')
locIfmopOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopOutPkts.setStatus('mandatory')
locIfmopInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopInOctets.setStatus('mandatory')
locIfmopOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopOutOctets.setStatus('mandatory')
locIflanmanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanInPkts.setStatus('mandatory')
locIflanmanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanOutPkts.setStatus('mandatory')
locIflanmanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanInOctets.setStatus('mandatory')
locIflanmanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanOutOctets.setStatus('mandatory')
locIfstunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunInPkts.setStatus('mandatory')
locIfstunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunOutPkts.setStatus('mandatory')
locIfstunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunInOctets.setStatus('mandatory')
locIfstunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunOutOctets.setStatus('mandatory')
locIfspanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanInPkts.setStatus('mandatory')
locIfspanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanOutPkts.setStatus('mandatory')
locIfspanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanInOctets.setStatus('mandatory')
locIfspanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanOutOctets.setStatus('mandatory')
locIfarpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpInPkts.setStatus('mandatory')
locIfarpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpOutPkts.setStatus('mandatory')
locIfarpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpInOctets.setStatus('mandatory')
locIfarpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpOutOctets.setStatus('mandatory')
locIfprobeInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeInPkts.setStatus('mandatory')
locIfprobeOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeOutPkts.setStatus('mandatory')
locIfprobeInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeInOctets.setStatus('mandatory')
locIfprobeOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeOutOctets.setStatus('mandatory')
locIfDribbleInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfDribbleInputs.setStatus('mandatory')
lfsipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 2, 2), )
if mibBuilder.loadTexts: lfsipTable.setStatus('mandatory')
lFSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1), ).setIndexNames((0, "CISCO-MIB", "locIfFSIPIndex"))
if mibBuilder.loadTexts: lFSIPEntry.setStatus('mandatory')
locIfFSIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPIndex.setStatus('mandatory')
locIfFSIPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPtype.setStatus('mandatory')
locIfFSIPrts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPrts.setStatus('mandatory')
locIfFSIPcts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPcts.setStatus('mandatory')
locIfFSIPdtr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdtr.setStatus('mandatory')
locIfFSIPdcd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdcd.setStatus('mandatory')
locIfFSIPdsr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdsr.setStatus('mandatory')
lipAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 1), )
if mibBuilder.loadTexts: lipAddrTable.setStatus('mandatory')
lipAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1), ).setIndexNames((0, "IP-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: lipAddrEntry.setStatus('mandatory')
locIPHow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPHow.setStatus('mandatory')
locIPWho = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPWho.setStatus('mandatory')
locIPHelper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPHelper.setStatus('mandatory')
locIPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPSecurity.setStatus('mandatory')
locIPRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPRedirects.setStatus('mandatory')
locIPUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPUnreach.setStatus('mandatory')
lipRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 2), )
if mibBuilder.loadTexts: lipRoutingTable.setStatus('mandatory')
lipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1), ).setIndexNames((0, "RFC1213-MIB", "ipRouteDest"))
if mibBuilder.loadTexts: lipRouteEntry.setStatus('mandatory')
locRtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtMask.setStatus('mandatory')
locRtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtCount.setStatus('mandatory')
locRtUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtUses.setStatus('mandatory')
actThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actThresh.setStatus('mandatory')
actLostPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actLostPkts.setStatus('mandatory')
actLostByts = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actLostByts.setStatus('mandatory')
lipAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 7), )
if mibBuilder.loadTexts: lipAccountingTable.setStatus('mandatory')
lipAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1), ).setIndexNames((0, "CISCO-MIB", "actSrc"), (0, "CISCO-MIB", "actDst"))
if mibBuilder.loadTexts: lipAccountEntry.setStatus('mandatory')
actSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actSrc.setStatus('mandatory')
actDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDst.setStatus('mandatory')
actPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actPkts.setStatus('mandatory')
actByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actByts.setStatus('mandatory')
actAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAge.setStatus('mandatory')
lipCkAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 9), )
if mibBuilder.loadTexts: lipCkAccountingTable.setStatus('mandatory')
lipCkAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1), ).setIndexNames((0, "CISCO-MIB", "ckactSrc"), (0, "CISCO-MIB", "ckactDst"))
if mibBuilder.loadTexts: lipCkAccountEntry.setStatus('mandatory')
ckactSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactSrc.setStatus('mandatory')
ckactDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactDst.setStatus('mandatory')
ckactPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactPkts.setStatus('mandatory')
ckactByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactByts.setStatus('mandatory')
ckactAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactAge.setStatus('mandatory')
actCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actCheckPoint.setStatus('mandatory')
ipNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNoaccess.setStatus('mandatory')
ltcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 6, 1), )
if mibBuilder.loadTexts: ltcpConnTable.setStatus('mandatory')
ltcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1), ).setIndexNames((0, "TCP-MIB", "tcpConnLocalAddress"), (0, "TCP-MIB", "tcpConnLocalPort"), (0, "TCP-MIB", "tcpConnRemAddress"), (0, "TCP-MIB", "tcpConnRemPort"))
if mibBuilder.loadTexts: ltcpConnEntry.setStatus('mandatory')
loctcpConnInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnInBytes.setStatus('mandatory')
loctcpConnOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnOutBytes.setStatus('mandatory')
loctcpConnInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnInPkts.setStatus('mandatory')
loctcpConnOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnOutPkts.setStatus('mandatory')
loctcpConnElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnElapsed.setStatus('mandatory')
tsLines = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLines.setStatus('mandatory')
ltsLineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 9, 2), )
if mibBuilder.loadTexts: ltsLineTable.setStatus('mandatory')
ltsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1), ).setIndexNames((0, "CISCO-MIB", "tsLineNum"))
if mibBuilder.loadTexts: ltsLineEntry.setStatus('mandatory')
tsLineActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineActive.setStatus('mandatory')
tsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("console", 2), ("terminal", 3), ("line-printer", 4), ("virtual-terminal", 5), ("auxiliary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineType.setStatus('mandatory')
tsLineAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineAutobaud.setStatus('mandatory')
tsLineSpeedin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSpeedin.setStatus('mandatory')
tsLineSpeedout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSpeedout.setStatus('mandatory')
tsLineFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("software-input", 3), ("software-output", 4), ("software-both", 5), ("hardware-input", 6), ("hardware-output", 7), ("hardware-both", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineFlow.setStatus('mandatory')
tsLineModem = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("call-in", 3), ("call-out", 4), ("cts-required", 5), ("ri-is-cd", 6), ("inout", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineModem.setStatus('mandatory')
tsLineLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineLoc.setStatus('mandatory')
tsLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineTerm.setStatus('mandatory')
tsLineScrlen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineScrlen.setStatus('mandatory')
tsLineScrwid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineScrwid.setStatus('mandatory')
tsLineEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineEsc.setStatus('mandatory')
tsLineTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineTmo.setStatus('mandatory')
tsLineSestmo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSestmo.setStatus('mandatory')
tsLineRotary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineRotary.setStatus('mandatory')
tsLineUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineUses.setStatus('mandatory')
tsLineNses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineNses.setStatus('mandatory')
tsLineUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineUser.setStatus('mandatory')
tsLineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineNoise.setStatus('mandatory')
tsLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 20), Integer32())
if mibBuilder.loadTexts: tsLineNum.setStatus('mandatory')
ltsLineSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 9, 3), )
if mibBuilder.loadTexts: ltsLineSessionTable.setStatus('mandatory')
ltsLineSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1), ).setIndexNames((0, "CISCO-MIB", "tslineSesLine"), (0, "CISCO-MIB", "tslineSesSession"))
if mibBuilder.loadTexts: ltsLineSessionEntry.setStatus('mandatory')
tslineSesType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("pad", 2), ("stream", 3), ("rlogin", 4), ("telnet", 5), ("tcp", 6), ("lat", 7), ("mop", 8), ("slip", 9), ("xremote", 10), ("rshell", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesType.setStatus('mandatory')
tslineSesDir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesDir.setStatus('mandatory')
tslineSesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesAddr.setStatus('mandatory')
tslineSesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesName.setStatus('mandatory')
tslineSesCur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesCur.setStatus('mandatory')
tslineSesIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesIdle.setStatus('mandatory')
tslineSesLine = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 7), Integer32())
if mibBuilder.loadTexts: tslineSesLine.setStatus('mandatory')
tslineSesSession = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 8), Integer32())
if mibBuilder.loadTexts: tslineSesSession.setStatus('mandatory')
tsMsgTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgTtyLine.setStatus('mandatory')
tsMsgIntervaltim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgIntervaltim.setStatus('mandatory')
tsMsgDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgDuration.setStatus('mandatory')
tsMsgText = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgText.setStatus('mandatory')
tsMsgTmpBanner = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("additive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgTmpBanner.setStatus('mandatory')
tsMsgSend = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nothing", 1), ("reload", 2), ("messagedone", 3), ("abort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgSend.setStatus('mandatory')
flashSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashSize.setStatus('mandatory')
flashFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFree.setStatus('mandatory')
flashController = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashController.setStatus('mandatory')
flashCard = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCard.setStatus('mandatory')
flashVPP = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashVPP.setStatus('mandatory')
flashErase = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: flashErase.setStatus('mandatory')
flashEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEraseTime.setStatus('mandatory')
flashEraseStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEraseStatus.setStatus('mandatory')
flashToNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 9), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: flashToNet.setStatus('mandatory')
flashToNetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashToNetTime.setStatus('mandatory')
flashToNetStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashToNetStatus.setStatus('mandatory')
netToFlash = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 12), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: netToFlash.setStatus('mandatory')
netToFlashTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netToFlashTime.setStatus('mandatory')
netToFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netToFlashStatus.setStatus('mandatory')
flashStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashStatus.setStatus('mandatory')
flashEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEntries.setStatus('mandatory')
lflashFileDirTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 10, 17), )
if mibBuilder.loadTexts: lflashFileDirTable.setStatus('mandatory')
lflashFileDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1), ).setIndexNames((0, "CISCO-MIB", "flashEntries"))
if mibBuilder.loadTexts: lflashFileDirEntry.setStatus('mandatory')
flashDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirName.setStatus('mandatory')
flashDirSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirSize.setStatus('mandatory')
flashDirStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("deleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirStatus.setStatus('mandatory')
dnForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnForward.setStatus('mandatory')
dnReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnReceived.setStatus('mandatory')
dnFormaterr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnFormaterr.setStatus('mandatory')
dnNotgateway = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotgateway.setStatus('mandatory')
dnNotimp = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotimp.setStatus('mandatory')
dnHellos = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHellos.setStatus('mandatory')
dnBadhello = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBadhello.setStatus('mandatory')
dnNotlong = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotlong.setStatus('mandatory')
dnDatas = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnDatas.setStatus('mandatory')
dnBigaddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBigaddr.setStatus('mandatory')
dnNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoroute.setStatus('mandatory')
dnNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoencap.setStatus('mandatory')
dnLevel1s = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel1s.setStatus('mandatory')
dnBadlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBadlevel1.setStatus('mandatory')
dnToomanyhops = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnToomanyhops.setStatus('mandatory')
dnHellosent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHellosent.setStatus('mandatory')
dnLevel1sent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel1sent.setStatus('mandatory')
dnNomemory = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNomemory.setStatus('mandatory')
dnOtherhello = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherhello.setStatus('mandatory')
dnOtherlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherlevel1.setStatus('mandatory')
dnLevel2s = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel2s.setStatus('mandatory')
dnLevel2sent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel2sent.setStatus('mandatory')
dnNovector = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNovector.setStatus('mandatory')
dnOtherlevel2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherlevel2.setStatus('mandatory')
dnNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoaccess.setStatus('mandatory')
dnAreaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 26), )
if mibBuilder.loadTexts: dnAreaTable.setStatus('mandatory')
dnAreaTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1), ).setIndexNames((0, "CISCO-MIB", "dnArea"))
if mibBuilder.loadTexts: dnAreaTableEntry.setStatus('mandatory')
dnArea = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnArea.setStatus('mandatory')
dnACost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnACost.setStatus('mandatory')
dnAHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAHop.setStatus('mandatory')
dnAIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAIfIndex.setStatus('mandatory')
dnANextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnANextHop.setStatus('mandatory')
dnAAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAAge.setStatus('mandatory')
dnAPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAPrio.setStatus('mandatory')
dnHostTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 27), )
if mibBuilder.loadTexts: dnHostTable.setStatus('mandatory')
dnHostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1), ).setIndexNames((0, "CISCO-MIB", "dnHIdx1"), (0, "CISCO-MIB", "dnHIdx2"))
if mibBuilder.loadTexts: dnHostTableEntry.setStatus('mandatory')
dnHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHost.setStatus('mandatory')
dnHCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHCost.setStatus('mandatory')
dnHHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHHop.setStatus('mandatory')
dnHIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHIfIndex.setStatus('mandatory')
dnHNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHNextHop.setStatus('mandatory')
dnHAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHAge.setStatus('mandatory')
dnHPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHPrio.setStatus('mandatory')
dnHIdx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 8), Integer32())
if mibBuilder.loadTexts: dnHIdx1.setStatus('mandatory')
dnHIdx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 9), Integer32())
if mibBuilder.loadTexts: dnHIdx2.setStatus('mandatory')
dnIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 28), )
if mibBuilder.loadTexts: dnIfTable.setStatus('mandatory')
dnIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dnIfTableEntry.setStatus('mandatory')
dnIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnIfCost.setStatus('mandatory')
xnsInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsInput.setStatus('mandatory')
xnsLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsLocal.setStatus('mandatory')
xnsBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsBcastin.setStatus('mandatory')
xnsForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsForward.setStatus('mandatory')
xnsBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsBcastout.setStatus('mandatory')
xnsErrin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsErrin.setStatus('mandatory')
xnsErrout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsErrout.setStatus('mandatory')
xnsFormerr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsFormerr.setStatus('mandatory')
xnsChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsChksum.setStatus('mandatory')
xnsNotgate = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsNotgate.setStatus('mandatory')
xnsHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsHopcnt.setStatus('mandatory')
xnsNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsNoroute.setStatus('mandatory')
xnsNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsNoencap.setStatus('mandatory')
xnsOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsOutput.setStatus('mandatory')
xnsInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsInmult.setStatus('mandatory')
xnsUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsUnknown.setStatus('mandatory')
xnsFwdbrd = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsFwdbrd.setStatus('mandatory')
xnsEchoreqin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsEchoreqin.setStatus('mandatory')
xnsEchoreqout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsEchoreqout.setStatus('mandatory')
xnsEchorepin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsEchorepin.setStatus('mandatory')
xnsEchorepout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsEchorepout.setStatus('mandatory')
atInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atInput.setStatus('mandatory')
atLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atLocal.setStatus('mandatory')
atBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBcastin.setStatus('mandatory')
atForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atForward.setStatus('mandatory')
atBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBcastout.setStatus('mandatory')
atChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atChksum.setStatus('mandatory')
atNotgate = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNotgate.setStatus('mandatory')
atHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atHopcnt.setStatus('mandatory')
atNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoaccess.setStatus('mandatory')
atNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoroute.setStatus('mandatory')
atNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoencap.setStatus('mandatory')
atOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atOutput.setStatus('mandatory')
atInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atInmult.setStatus('mandatory')
atRtmpin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRtmpin.setStatus('mandatory')
atRtmpout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRtmpout.setStatus('mandatory')
atNbpin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNbpin.setStatus('mandatory')
atNbpout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNbpout.setStatus('mandatory')
atAtp = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAtp.setStatus('mandatory')
atZipin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atZipin.setStatus('mandatory')
atZipout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atZipout.setStatus('mandatory')
atEcho = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEcho.setStatus('mandatory')
atEchoill = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEchoill.setStatus('mandatory')
atDdpshort = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdpshort.setStatus('mandatory')
atDdplong = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdplong.setStatus('mandatory')
atDdpbad = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdpbad.setStatus('mandatory')
atNobuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNobuffer.setStatus('mandatory')
atArpreq = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpreq.setStatus('mandatory')
atArpreply = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpreply.setStatus('mandatory')
atArpprobe = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpprobe.setStatus('mandatory')
atUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atUnknown.setStatus('mandatory')
novellInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellInput.setStatus('mandatory')
novellBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellBcastin.setStatus('mandatory')
novellForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellForward.setStatus('mandatory')
novellBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellBcastout.setStatus('mandatory')
novellFormerr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellFormerr.setStatus('mandatory')
novellChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellChksum.setStatus('mandatory')
novellHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellHopcnt.setStatus('mandatory')
novellNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellNoroute.setStatus('mandatory')
novellNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellNoencap.setStatus('mandatory')
novellOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellOutput.setStatus('mandatory')
novellInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellInmult.setStatus('mandatory')
novellLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellLocal.setStatus('mandatory')
novellUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellUnknown.setStatus('mandatory')
novellSapreqin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapreqin.setStatus('mandatory')
novellSapresin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapresin.setStatus('mandatory')
novellSapout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapout.setStatus('mandatory')
novellSapreply = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapreply.setStatus('mandatory')
ipxActThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActThresh.setStatus('mandatory')
ipxActLostPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActLostPkts.setStatus('mandatory')
ipxActLostByts = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActLostByts.setStatus('mandatory')
lipxAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 4, 21), )
if mibBuilder.loadTexts: lipxAccountingTable.setStatus('mandatory')
lipxAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1), ).setIndexNames((0, "CISCO-MIB", "ipxActSrc"), (0, "CISCO-MIB", "ipxActDst"))
if mibBuilder.loadTexts: lipxAccountingEntry.setStatus('mandatory')
ipxActSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActSrc.setStatus('mandatory')
ipxActDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActDst.setStatus('mandatory')
ipxActPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActPkts.setStatus('mandatory')
ipxActByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActByts.setStatus('mandatory')
ipxActAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActAge.setStatus('mandatory')
lipxCkAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 4, 23), )
if mibBuilder.loadTexts: lipxCkAccountingTable.setStatus('mandatory')
lipxCkAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1), ).setIndexNames((0, "CISCO-MIB", "ipxCkactSrc"), (0, "CISCO-MIB", "ipxCkactDst"))
if mibBuilder.loadTexts: lipxCkAccountingEntry.setStatus('mandatory')
ipxCkactSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactSrc.setStatus('mandatory')
ipxCkactDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactDst.setStatus('mandatory')
ipxCkactPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactPkts.setStatus('mandatory')
ipxCkactByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactByts.setStatus('mandatory')
ipxCkactAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactAge.setStatus('mandatory')
ipxActCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxActCheckPoint.setStatus('mandatory')
vinesInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesInput.setStatus('mandatory')
vinesOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesOutput.setStatus('mandatory')
vinesLocaldest = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesLocaldest.setStatus('mandatory')
vinesForwarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesForwarded.setStatus('mandatory')
vinesBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesBcastin.setStatus('mandatory')
vinesBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesBcastout.setStatus('mandatory')
vinesBcastfwd = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesBcastfwd.setStatus('mandatory')
vinesNotlan = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNotlan.setStatus('mandatory')
vinesNotgt4800 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNotgt4800.setStatus('mandatory')
vinesNocharges = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNocharges.setStatus('mandatory')
vinesFormaterror = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesFormaterror.setStatus('mandatory')
vinesCksumerr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesCksumerr.setStatus('mandatory')
vinesHopcount = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesHopcount.setStatus('mandatory')
vinesNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNoroute.setStatus('mandatory')
vinesEncapsfailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesEncapsfailed.setStatus('mandatory')
vinesUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesUnknown.setStatus('mandatory')
vinesIcpIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIcpIn.setStatus('mandatory')
vinesIcpOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIcpOut.setStatus('mandatory')
vinesMetricOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesMetricOut.setStatus('mandatory')
vinesMacEchoIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesMacEchoIn.setStatus('mandatory')
vinesMacEchoOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesMacEchoOut.setStatus('mandatory')
vinesEchoIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesEchoIn.setStatus('mandatory')
vinesEchoOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesEchoOut.setStatus('mandatory')
vinesProxyCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesProxyCnt.setStatus('mandatory')
vinesProxyReplyCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesProxyReplyCnt.setStatus('mandatory')
vinesNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNet.setStatus('mandatory')
vinesSubNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesSubNet.setStatus('mandatory')
vinesClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesClient.setStatus('mandatory')
tmpvinesIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 5, 29), )
if mibBuilder.loadTexts: tmpvinesIfTable.setStatus('mandatory')
tmpvinesIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tmpvinesIfTableEntry.setStatus('mandatory')
vinesIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfMetric.setStatus('mandatory')
vinesIfEnctype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfEnctype.setStatus('mandatory')
vinesIfAccesslist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfAccesslist.setStatus('mandatory')
vinesIfPropagate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfPropagate.setStatus('mandatory')
vinesIfArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfArpEnabled.setStatus('mandatory')
vinesIfServerless = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfServerless.setStatus('mandatory')
vinesIfServerlessBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfServerlessBcast.setStatus('mandatory')
vinesIfRedirectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRedirectInterval.setStatus('mandatory')
vinesIfSplitDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfSplitDisabled.setStatus('mandatory')
vinesIfLineup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfLineup.setStatus('mandatory')
vinesIfFastokay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfFastokay.setStatus('mandatory')
vinesIfRouteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRouteCache.setStatus('mandatory')
vinesIfIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfIns.setStatus('mandatory')
vinesIfOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfOuts.setStatus('mandatory')
vinesIfInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfInBytes.setStatus('mandatory')
vinesIfOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfOutBytes.setStatus('mandatory')
vinesIfRxNotEnabledCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxNotEnabledCnt.setStatus('mandatory')
vinesIfRxFormatErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxFormatErrorCnt.setStatus('mandatory')
vinesIfRxLocalDestCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxLocalDestCnt.setStatus('mandatory')
vinesIfRxBcastinCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxBcastinCnt.setStatus('mandatory')
vinesIfRxForwardedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxForwardedCnt.setStatus('mandatory')
vinesIfRxNoRouteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxNoRouteCnt.setStatus('mandatory')
vinesIfRxZeroHopCountCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxZeroHopCountCnt.setStatus('mandatory')
vinesIfRxChecksumErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxChecksumErrorCnt.setStatus('mandatory')
vinesIfRxArp0Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArp0Cnt.setStatus('mandatory')
vinesIfRxArp1Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArp1Cnt.setStatus('mandatory')
vinesIfRxArp2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArp2Cnt.setStatus('mandatory')
vinesIfRxArp3Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArp3Cnt.setStatus('mandatory')
vinesIfRxArpIllegalCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArpIllegalCnt.setStatus('mandatory')
vinesIfRxIcpErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIcpErrorCnt.setStatus('mandatory')
vinesIfRxIcpMetricCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIcpMetricCnt.setStatus('mandatory')
vinesIfRxIcpIllegalCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIcpIllegalCnt.setStatus('mandatory')
vinesIfRxIpcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIpcCnt.setStatus('mandatory')
vinesIfRxRtp0Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp0Cnt.setStatus('mandatory')
vinesIfRxRtp1Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp1Cnt.setStatus('mandatory')
vinesIfRxRtp2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp2Cnt.setStatus('mandatory')
vinesIfRxRtp3Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp3Cnt.setStatus('mandatory')
vinesIfRxRtp4Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp4Cnt.setStatus('mandatory')
vinesIfRxRtp5Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp5Cnt.setStatus('mandatory')
vinesIfRxRtp6Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp6Cnt.setStatus('mandatory')
vinesIfRxRtpIllegalCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtpIllegalCnt.setStatus('mandatory')
vinesIfRxSppCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxSppCnt.setStatus('mandatory')
vinesIfRxIpUnknownCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIpUnknownCnt.setStatus('mandatory')
vinesIfRxIpcUnknownCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIpcUnknownCnt.setStatus('mandatory')
vinesIfRxBcastHelperedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxBcastHelperedCnt.setStatus('mandatory')
vinesIfRxBcastForwardedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxBcastForwardedCnt.setStatus('mandatory')
vinesIfRxBcastDuplicateCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxBcastDuplicateCnt.setStatus('mandatory')
vinesIfRxEchoCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxEchoCnt.setStatus('mandatory')
vinesIfRxMacEchoCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxMacEchoCnt.setStatus('mandatory')
vinesIfRxProxyReplyCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxProxyReplyCnt.setStatus('mandatory')
vinesIfTxUnicastCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxUnicastCnt.setStatus('mandatory')
vinesIfTxBcastCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxBcastCnt.setStatus('mandatory')
vinesIfTxForwardedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxForwardedCnt.setStatus('mandatory')
vinesIfTxFailedEncapsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxFailedEncapsCnt.setStatus('mandatory')
vinesIfTxFailedAccessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxFailedAccessCnt.setStatus('mandatory')
vinesIfTxFailedDownCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxFailedDownCnt.setStatus('mandatory')
vinesIfTxNotBcastToSourceCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxNotBcastToSourceCnt.setStatus('mandatory')
vinesIfTxNotBcastNotlanCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxNotBcastNotlanCnt.setStatus('mandatory')
vinesIfTxNotBcastNotgt4800Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxNotBcastNotgt4800Cnt.setStatus('mandatory')
vinesIfTxNotBcastPpchargeCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxNotBcastPpchargeCnt.setStatus('mandatory')
vinesIfTxBcastForwardedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxBcastForwardedCnt.setStatus('mandatory')
vinesIfTxBcastHelperedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxBcastHelperedCnt.setStatus('mandatory')
vinesIfTxArp0Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxArp0Cnt.setStatus('mandatory')
vinesIfTxArp1Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxArp1Cnt.setStatus('mandatory')
vinesIfTxArp2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxArp2Cnt.setStatus('mandatory')
vinesIfTxArp3Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxArp3Cnt.setStatus('mandatory')
vinesIfTxIcpErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxIcpErrorCnt.setStatus('mandatory')
vinesIfTxIcpMetricCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxIcpMetricCnt.setStatus('mandatory')
vinesIfTxIpcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxIpcCnt.setStatus('mandatory')
vinesIfTxRtp0Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp0Cnt.setStatus('mandatory')
vinesIfTxRtp1Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp1Cnt.setStatus('mandatory')
vinesIfTxRtp2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp2Cnt.setStatus('mandatory')
vinesIfTxRtp3Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp3Cnt.setStatus('mandatory')
vinesIfTxRtp4Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp4Cnt.setStatus('mandatory')
vinesIfTxRtp5Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp5Cnt.setStatus('mandatory')
vinesIfTxRtp6Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp6Cnt.setStatus('mandatory')
vinesIfTxSppCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxSppCnt.setStatus('mandatory')
vinesIfTxEchoCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxEchoCnt.setStatus('mandatory')
vinesIfTxMacEchoCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxMacEchoCnt.setStatus('mandatory')
vinesIfTxProxyCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxProxyCnt.setStatus('mandatory')
vinesIfInputRouterFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfInputRouterFilter.setStatus('mandatory')
vinesIfInputNetworkFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfInputNetworkFilter.setStatus('mandatory')
vinesIfOutputNetworkFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfOutputNetworkFilter.setStatus('mandatory')
chassisType = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("multibus", 2), ("agsplus", 3), ("igs", 4), ("c2000", 5), ("c3000", 6), ("c4000", 7), ("c7000", 8), ("cs-500", 9), ("c7010", 10), ("c2500", 11), ("c4500", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
chassisVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisVersion.setStatus('mandatory')
chassisId = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisId.setStatus('mandatory')
romVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romVersion.setStatus('mandatory')
romSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romSysVersion.setStatus('mandatory')
processorRam = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorRam.setStatus('mandatory')
nvRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRAMSize.setStatus('mandatory')
nvRAMUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRAMUsed.setStatus('mandatory')
configRegister = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRegister.setStatus('mandatory')
configRegNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRegNext.setStatus('mandatory')
cardTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 6, 11), )
if mibBuilder.loadTexts: cardTable.setStatus('mandatory')
cardTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1), ).setIndexNames((0, "CISCO-MIB", "cardIndex"))
if mibBuilder.loadTexts: cardTableEntry.setStatus('mandatory')
cardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIndex.setStatus('mandatory')
cardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 20, 21, 22, 23, 24, 40, 41, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 84, 100, 101, 110, 111, 112, 113, 114, 115, 116, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209))).clone(namedValues=NamedValues(("unknown", 1), ("csc1", 2), ("csc2", 3), ("csc3", 4), ("csc4", 5), ("rp", 6), ("csc-m", 20), ("csc-mt", 21), ("csc-mc", 22), ("csc-mcplus", 23), ("csc-envm", 24), ("csc-16", 40), ("csc-p", 41), ("csc-a", 50), ("csc-e1", 51), ("csc-e2", 52), ("csc-y", 53), ("csc-s", 54), ("csc-t", 55), ("sci4s", 56), ("sci2s2t", 57), ("sci4t", 58), ("mci1t", 59), ("mci2t", 60), ("mci1s", 61), ("mci1s1t", 62), ("mci2s", 63), ("mci1e", 64), ("mci1e1t", 65), ("mci1e2t", 66), ("mci1e1s", 67), ("mci1e1s1t", 68), ("mci1e2s", 69), ("mci2e", 70), ("mci2e1t", 71), ("mci2e2t", 72), ("mci2e1s", 73), ("mci2e1s1t", 74), ("mci2e2s", 75), ("csc-r", 80), ("csc-r16", 81), ("csc-r16m", 82), ("csc-1r", 83), ("csc-2r", 84), ("csc-cctl1", 100), ("csc-cctl2", 101), ("csc-mec2", 110), ("csc-mec4", 111), ("csc-mec6", 112), ("csc-fci", 113), ("csc-fcit", 114), ("csc-hsci", 115), ("csc-ctr", 116), ("sp", 150), ("eip", 151), ("fip", 152), ("hip", 153), ("sip", 154), ("trip", 155), ("fsip", 156), ("aip", 157), ("mip", 158), ("ssp", 159), ("npm-4000-fddi-sas", 200), ("npm-4000-fddi-das", 201), ("npm-4000-1e", 202), ("npm-4000-1r", 203), ("npm-4000-2s", 204), ("npm-4000-2e1", 205), ("npm-4000-2e", 206), ("npm-4000-2r1", 207), ("npm-4000-2r", 208), ("npm-4000-4t", 209)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardType.setStatus('mandatory')
cardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDescr.setStatus('mandatory')
cardSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerial.setStatus('mandatory')
cardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardHwVersion.setStatus('mandatory')
cardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwVersion.setStatus('mandatory')
cardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSlotNumber.setStatus('mandatory')
chassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlots.setStatus('mandatory')
mibBuilder.exportSymbols("CISCO-MIB", locIfLastOut=locIfLastOut, locIfxnsOutPkts=locIfxnsOutPkts, dnNotlong=dnNotlong, atZipout=atZipout, dnOtherhello=dnOtherhello, tsLineScrlen=tsLineScrlen, envTestPt6last=envTestPt6last, dnHostTableEntry=dnHostTableEntry, envSerialNumber=envSerialNumber, dnLevel2s=dnLevel2s, dnAHop=dnAHop, novellInput=novellInput, bootHost=bootHost, xnsFormerr=xnsFormerr, locIfappletalkOutOctets=locIfappletalkOutOctets, locIfOutBitsSec=locIfOutBitsSec, bufferElMiss=bufferElMiss, tslineSesDir=tslineSesDir, vinesIfRxArpIllegalCnt=vinesIfRxArpIllegalCnt, locIfSlowInOctets=locIfSlowInOctets, locIfchaosOutOctets=locIfchaosOutOctets, vinesIfOutputNetworkFilter=vinesIfOutputNetworkFilter, dnNoroute=dnNoroute, envTestPt4Descr=envTestPt4Descr, bufferFail=bufferFail, bufferLgFree=bufferLgFree, locIfsrbOutPkts=locIfsrbOutPkts, xnsErrout=xnsErrout, vinesIfRxArp2Cnt=vinesIfRxArp2Cnt, vinesIfRouteCache=vinesIfRouteCache, envTestPt2Descr=envTestPt2Descr, locIfFastInOctets=locIfFastInOctets, agsplus_sysID=agsplus_sysID, tsLineSestmo=tsLineSestmo, locIfspanInOctets=locIfspanInOctets, envType=envType, vinesIfTxFailedEncapsCnt=vinesIfTxFailedEncapsCnt, locIfstunInPkts=locIfstunInPkts, vinesIfTxBcastForwardedCnt=vinesIfTxBcastForwardedCnt, novellBcastin=novellBcastin, envTestPt6MarginPercent=envTestPt6MarginPercent, vinesIfTxIcpMetricCnt=vinesIfTxIcpMetricCnt, locIfInFrame=locIfInFrame, flashController=flashController, xnsBcastout=xnsBcastout, cardHwVersion=cardHwVersion, bufferLgTrim=bufferLgTrim, vinesIfTxFailedAccessCnt=vinesIfTxFailedAccessCnt, vinesIfRxArp0Cnt=vinesIfRxArp0Cnt, vinesIfRxRtp6Cnt=vinesIfRxRtp6Cnt, lipxAccountingEntry=lipxAccountingEntry, lfsipTable=lfsipTable, locIfFSIPdsr=locIfFSIPdsr, tsLineAutobaud=tsLineAutobaud, novellNoroute=novellNoroute, dnForward=dnForward, flashDirName=flashDirName, locIfprobeOutPkts=locIfprobeOutPkts, bufferMdCreate=bufferMdCreate, bufferSmMax=bufferSmMax, novellNoencap=novellNoencap, vinesNotgt4800=vinesNotgt4800, loctcpConnElapsed=loctcpConnElapsed, lip=lip, vinesCksumerr=vinesCksumerr, tmpchassis=tmpchassis, vinesIfTxFailedDownCnt=vinesIfTxFailedDownCnt, locIfLastOutHang=locIfLastOutHang, actDst=actDst, atForward=atForward, cisco=cisco, nvRAMSize=nvRAMSize, tsMsgIntervaltim=tsMsgIntervaltim, whyReload=whyReload, dnOtherlevel2=dnOtherlevel2, authAddr=authAddr, igs_sysID=igs_sysID, locIfInPktsSec=locIfInPktsSec, novellInmult=novellInmult, vinesMetricOut=vinesMetricOut, vinesFormaterror=vinesFormaterror, envTestPt4MarginPercent=envTestPt4MarginPercent, vinesMacEchoOut=vinesMacEchoOut, products=products, flashVPP=flashVPP, bufferHgMiss=bufferHgMiss, locIfmopInPkts=locIfmopInPkts, ipxActLostPkts=ipxActLostPkts, vinesHopcount=vinesHopcount, vinesNoroute=vinesNoroute, xnsNoroute=xnsNoroute, dnFormaterr=dnFormaterr, locIfstunOutPkts=locIfstunOutPkts, dnHNextHop=dnHNextHop, dnHHop=dnHHop, locIfpupOutOctets=locIfpupOutOctets, bufferNoMem=bufferNoMem, dnIfTable=dnIfTable, local=local, vinesIfTxIpcCnt=vinesIfTxIpcCnt, tslineSesType=tslineSesType, flashErase=flashErase, c2500_sysID=c2500_sysID, ckactByts=ckactByts, dnHellos=dnHellos, atEchoill=atEchoill, locIfmopInOctets=locIfmopInOctets, xnsEchorepin=xnsEchorepin, vinesIcpIn=vinesIcpIn, dnHAge=dnHAge, vinesIfTxArp3Cnt=vinesIfTxArp3Cnt, lifTable=lifTable, cardSlotNumber=cardSlotNumber, ipxActLostByts=ipxActLostByts, hostName=hostName, locIPWho=locIPWho, tsLineNum=tsLineNum, envTestPt2warn=envTestPt2warn, vinesIfTxRtp0Cnt=vinesIfTxRtp0Cnt, locIfsrbInPkts=locIfsrbInPkts, vinesIfMetric=vinesIfMetric, atDdplong=atDdplong, locIfFSIPtype=locIfFSIPtype, locIfnovellOutOctets=locIfnovellOutOctets, vinesIfAccesslist=vinesIfAccesslist, vinesNotlan=vinesNotlan, dnNotimp=dnNotimp, tmpxns=tmpxns, vinesIfRxSppCnt=vinesIfRxSppCnt, lsystem=lsystem, linterfaces=linterfaces, flashStatus=flashStatus, locIfstunInOctets=locIfstunInOctets, atLocal=atLocal, ping=ping, dnHIdx1=dnHIdx1, vinesIfRxRtpIllegalCnt=vinesIfRxRtpIllegalCnt, vinesIfRxBcastDuplicateCnt=vinesIfRxBcastDuplicateCnt, chassisVersion=chassisVersion, atArpreply=atArpreply, locIfspanInPkts=locIfspanInPkts, flashEraseTime=flashEraseTime, loctcpConnOutBytes=loctcpConnOutBytes, locIfRestarts=locIfRestarts, tsLineTmo=tsLineTmo, envTestPt3Descr=envTestPt3Descr, envTestPt4last=envTestPt4last, locIfpupInOctets=locIfpupInOctets, atInmult=atInmult, locIfpupOutPkts=locIfpupOutPkts, protocol_translator=protocol_translator, licmp=licmp, envTestPt4warn=envTestPt4warn, vinesIfRxIcpIllegalCnt=vinesIfRxIcpIllegalCnt, locIfxnsInPkts=locIfxnsInPkts, loctcpConnInBytes=loctcpConnInBytes, ipxActCheckPoint=ipxActCheckPoint, actThresh=actThresh, locIfInRunts=locIfInRunts, envTestPt5Descr=envTestPt5Descr, tsLineNoise=tsLineNoise, bufferSmHit=bufferSmHit, bufferHgSize=bufferHgSize, lipRouteEntry=lipRouteEntry, locIfpupInPkts=locIfpupInPkts, locIfFSIPcts=locIfFSIPcts, locIfLineProt=locIfLineProt, bufferBgTrim=bufferBgTrim, lflash=lflash, bufferLgMiss=bufferLgMiss, lFSIPEntry=lFSIPEntry, tsLineSpeedout=tsLineSpeedout, vinesIfTxRtp1Cnt=vinesIfTxRtp1Cnt, tslineSesCur=tslineSesCur, ltcp=ltcp, envTechnicianID=envTechnicianID, xnsBcastin=xnsBcastin, locIfapolloOutOctets=locIfapolloOutOctets, dnIfCost=dnIfCost, atNbpout=atNbpout, vinesIfRxNotEnabledCnt=vinesIfRxNotEnabledCnt, vinesIfRxForwardedCnt=vinesIfRxForwardedCnt, locIfchaosInPkts=locIfchaosInPkts, envFirmVersion=envFirmVersion, locIfotherInPkts=locIfotherInPkts, locIfbridgedOutOctets=locIfbridgedOutOctets, bufferBgMax=bufferBgMax, atNoaccess=atNoaccess, dnLevel2sent=dnLevel2sent, netConfigProto=netConfigProto, vinesProxyCnt=vinesProxyCnt, vinesIfTxProxyCnt=vinesIfTxProxyCnt, tmpvinesIfTable=tmpvinesIfTable, tslineSesLine=tslineSesLine, locIfipOutOctets=locIfipOutOctets, vinesBcastin=vinesBcastin, vinesIfRxIcpMetricCnt=vinesIfRxIcpMetricCnt, vinesIfEnctype=vinesIfEnctype, locIfprobeInPkts=locIfprobeInPkts, envTestPt2last=envTestPt2last, locIfclnsOutPkts=locIfclnsOutPkts, flashEntries=flashEntries, c4500_sysID=c4500_sysID, dnAreaTableEntry=dnAreaTableEntry, dnAAge=dnAAge, novellSapresin=novellSapresin, locIfprobeOutOctets=locIfprobeOutOctets, vinesIfTxBcastHelperedCnt=vinesIfTxBcastHelperedCnt, locIfdecnetOutPkts=locIfdecnetOutPkts, c7010_sysID=c7010_sysID, vinesIfRxNoRouteCnt=vinesIfRxNoRouteCnt, vinesIfTxRtp5Cnt=vinesIfTxRtp5Cnt, vinesIfRxBcastinCnt=vinesIfRxBcastinCnt, bufferMdMax=bufferMdMax, bufferMdSize=bufferMdSize, flashCard=flashCard, flashDirStatus=flashDirStatus, novellForward=novellForward, xnsNoencap=xnsNoencap, vinesBcastout=vinesBcastout, locIfCarTrans=locIfCarTrans, dnACost=dnACost, tsLineScrwid=tsLineScrwid, envTestPt1Measure=envTestPt1Measure, locIfKeep=locIfKeep, dnNotgateway=dnNotgateway, ckactDst=ckactDst, locIfInCRC=locIfInCRC, tsMsgDuration=tsMsgDuration, atRtmpin=atRtmpin, dnHCost=dnHCost, vinesIfTxRtp3Cnt=vinesIfTxRtp3Cnt, vinesIfTxArp2Cnt=vinesIfTxArp2Cnt, vinesInput=vinesInput, locIfotherOutPkts=locIfotherOutPkts, trouter=trouter, locIfmopOutPkts=locIfmopOutPkts, locIfnovellOutPkts=locIfnovellOutPkts, tsLines=tsLines, novellSapreply=novellSapreply, lipxCkAccountingEntry=lipxCkAccountingEntry, lipAddrEntry=lipAddrEntry, atArpprobe=atArpprobe, hostConfigAddr=hostConfigAddr, locIfHardType=locIfHardType, locIfInputQueueDrops=locIfInputQueueDrops, xnsUnknown=xnsUnknown, envTestPt1MarginVal=envTestPt1MarginVal, sysClearARP=sysClearARP, ipxActAge=ipxActAge, vinesIfTxArp1Cnt=vinesIfTxArp1Cnt, chassisType=chassisType, c3000_sysID=c3000_sysID, netToFlashStatus=netToFlashStatus)
mibBuilder.exportSymbols("CISCO-MIB", ipxCkactSrc=ipxCkactSrc, vinesUnknown=vinesUnknown, tsMsgTmpBanner=tsMsgTmpBanner, xnsInput=xnsInput, bufferElHit=bufferElHit, locIfInAbort=locIfInAbort, atBcastout=atBcastout, dnHPrio=dnHPrio, vinesIfRxRtp2Cnt=vinesIfRxRtp2Cnt, dnLevel1s=dnLevel1s, locIfFastOutOctets=locIfFastOutOctets, locIfclnsOutOctets=locIfclnsOutOctets, xnsErrin=xnsErrin, locIfarpOutPkts=locIfarpOutPkts, tslineSesSession=tslineSesSession, vinesIcpOut=vinesIcpOut, tslineSesIdle=tslineSesIdle, locIfxnsOutOctets=locIfxnsOutOctets, actLostByts=actLostByts, vinesIfRxZeroHopCountCnt=vinesIfRxZeroHopCountCnt, vinesIfRxLocalDestCnt=vinesIfRxLocalDestCnt, nvRAMUsed=nvRAMUsed, locIfDelay=locIfDelay, bufferHgFree=bufferHgFree, bufferMdMiss=bufferMdMiss, c2000_sysID=c2000_sysID, dnHellosent=dnHellosent, atZipin=atZipin, locIfclnsInPkts=locIfclnsInPkts, chassisSlots=chassisSlots, bufferHgHit=bufferHgHit, cs_500_sysID=cs_500_sysID, flashToNetStatus=flashToNetStatus, vinesSubNet=vinesSubNet, busyPer=busyPer, tmpnovell=tmpnovell, locIfInIgnored=locIfInIgnored, tsLineLoc=tsLineLoc, vinesIfRxIpcUnknownCnt=vinesIfRxIpcUnknownCnt, vinesIfRxMacEchoCnt=vinesIfRxMacEchoCnt, dnHIdx2=dnHIdx2, dnNomemory=dnNomemory, locIfdecnetInOctets=locIfdecnetInOctets, dnHostTable=dnHostTable, novellHopcnt=novellHopcnt, actByts=actByts, atOutput=atOutput, locIfFSIPdcd=locIfFSIPdcd, vinesIfRxFormatErrorCnt=vinesIfRxFormatErrorCnt, idleWired=idleWired, envTestPt5MarginPercent=envTestPt5MarginPercent, dnAIfIndex=dnAIfIndex, atRtmpout=atRtmpout, bufferHgTrim=bufferHgTrim, envTestPt6Measure=envTestPt6Measure, locIfapolloInPkts=locIfapolloInPkts, locIfOutPktsSec=locIfOutPktsSec, vinesIfRxRtp3Cnt=vinesIfRxRtp3Cnt, locIflanmanInOctets=locIflanmanInOctets, flashToNet=flashToNet, bufferLgMax=bufferLgMax, novellOutput=novellOutput, lipCkAccountEntry=lipCkAccountEntry, domainName=domainName, tmpdecnet=tmpdecnet, locIfSlowInPkts=locIfSlowInPkts, writeNet=writeNet, vinesIfServerlessBcast=vinesIfServerlessBcast, sysConfigProto=sysConfigProto, vinesIfTxRtp4Cnt=vinesIfTxRtp4Cnt, locRtUses=locRtUses, locRtCount=locRtCount, vinesIfRxIpcCnt=vinesIfRxIpcCnt, cardIndex=cardIndex, avgBusy5=avgBusy5, locIfOutputQueueDrops=locIfOutputQueueDrops, atInput=atInput, sysConfigName=sysConfigName, sysClearInt=sysClearInt, vinesProxyReplyCnt=vinesProxyReplyCnt, vinesIfTxUnicastCnt=vinesIfTxUnicastCnt, dnNovector=dnNovector, locIfFastOutPkts=locIfFastOutPkts, ludp=ludp, locIfxnsInOctets=locIfxnsInOctets, atDdpbad=atDdpbad, bufferMdFree=bufferMdFree, tslineSesName=tslineSesName, locIfLastIn=locIfLastIn, tmpvines=tmpvines, novellUnknown=novellUnknown, locIfDribbleInputs=locIfDribbleInputs, tsLineRotary=tsLineRotary, temporary=temporary, dnBigaddr=dnBigaddr, tsLineUses=tsLineUses, tsMsgTtyLine=tsMsgTtyLine, bufferBgCreate=bufferBgCreate, lflashFileDirEntry=lflashFileDirEntry, vinesBcastfwd=vinesBcastfwd, bufferLgTotal=bufferLgTotal, bufferMdHit=bufferMdHit, novellBcastout=novellBcastout, vinesIfTxNotBcastToSourceCnt=vinesIfTxNotBcastToSourceCnt, bufferHgCreate=bufferHgCreate, vinesIfSplitDisabled=vinesIfSplitDisabled, vinesIfLineup=vinesIfLineup, vinesOutput=vinesOutput, vinesIfOuts=vinesIfOuts, locIfFSIPIndex=locIfFSIPIndex, lipAddrTable=lipAddrTable, xnsEchoreqout=xnsEchoreqout, vinesNet=vinesNet, vinesForwarded=vinesForwarded, ipxCkactByts=ipxCkactByts, atUnknown=atUnknown, ipxActPkts=ipxActPkts, lflashFileDirTable=lflashFileDirTable, locIfchaosInOctets=locIfchaosInOctets, locIfvinesInOctets=locIfvinesInOctets, novellFormerr=novellFormerr, vinesIfTxMacEchoCnt=vinesIfTxMacEchoCnt, envTestPt4Measure=envTestPt4Measure, locIfsrbInOctets=locIfsrbInOctets, vinesIfTxRtp2Cnt=vinesIfTxRtp2Cnt, novellSapout=novellSapout, locIfCollisions=locIfCollisions, locIfnovellInPkts=locIfnovellInPkts, atBcastin=atBcastin, tsLineModem=tsLineModem, locIfappletalkOutPkts=locIfappletalkOutPkts, romId=romId, lipxCkAccountingTable=lipxCkAccountingTable, actPkts=actPkts, xnsEchorepout=xnsEchorepout, envTestPt1warn=envTestPt1warn, envTestPt3Measure=envTestPt3Measure, tsLineSpeedin=tsLineSpeedin, ciscoContactInfo=ciscoContactInfo, envTestPt5Measure=envTestPt5Measure, ckactAge=ckactAge, romVersion=romVersion, lat=lat, vinesIfTxSppCnt=vinesIfTxSppCnt, dnBadhello=dnBadhello, flashToNetTime=flashToNetTime, envTestPt5warn=envTestPt5warn, locIfchaosOutPkts=locIfchaosOutPkts, envTestPt1last=envTestPt1last, envTestPt2MarginVal=envTestPt2MarginVal, locIfstunOutOctets=locIfstunOutOctets, tsMsgText=tsMsgText, novellLocal=novellLocal, vinesMacEchoIn=vinesMacEchoIn, bufferLgHit=bufferLgHit, locIfclnsInOctets=locIfclnsInOctets, locIPHelper=locIPHelper, tsLineNses=tsLineNses, netConfigName=netConfigName, locIfarpOutOctets=locIfarpOutOctets, atAtp=atAtp, atNoroute=atNoroute, cardSerial=cardSerial, locIfappletalkInOctets=locIfappletalkInOctets, legp=legp, bufferElFree=bufferElFree, dnNoaccess=dnNoaccess, vinesIfRxChecksumErrorCnt=vinesIfRxChecksumErrorCnt, locIfapolloInOctets=locIfapolloInOctets, locIfotherOutOctets=locIfotherOutOctets, vinesIfTxRtp6Cnt=vinesIfTxRtp6Cnt, locIfipInPkts=locIfipInPkts, bufferElMax=bufferElMax, bufferSmCreate=bufferSmCreate, bufferSmTrim=bufferSmTrim, hostConfigName=hostConfigName, xnsChksum=xnsChksum, tsLineType=tsLineType, locIPHow=locIPHow, loctcpConnInPkts=loctcpConnInPkts, vinesIfFastokay=vinesIfFastokay, vinesIfTxNotBcastNotlanCnt=vinesIfTxNotBcastNotlanCnt, locIfvinesInPkts=locIfvinesInPkts, locIPSecurity=locIPSecurity, locIfmopOutOctets=locIfmopOutOctets, hostConfigProto=hostConfigProto, c4000_sysID=c4000_sysID, ipNoaccess=ipNoaccess, vinesIfTxNotBcastPpchargeCnt=vinesIfTxNotBcastPpchargeCnt, cardDescr=cardDescr, xnsHopcnt=xnsHopcnt, actLostPkts=actLostPkts, freeMem=freeMem, bufferHgMax=bufferHgMax, atEcho=atEcho, bufferSmTotal=bufferSmTotal, envTestPt5last=envTestPt5last, dnLevel1sent=dnLevel1sent, atNotgate=atNotgate, vinesIfRxBcastForwardedCnt=vinesIfRxBcastForwardedCnt, tmpappletalk=tmpappletalk, vinesIfTxNotBcastNotgt4800Cnt=vinesIfTxNotBcastNotgt4800Cnt, ckactSrc=ckactSrc, tmpvinesIfTableEntry=tmpvinesIfTableEntry, novellSapreqin=novellSapreqin, romSysVersion=romSysVersion, ipxCkactPkts=ipxCkactPkts, tsMsgSend=tsMsgSend, locIfipInOctets=locIfipInOctets, locIfReason=locIfReason, tsLineActive=tsLineActive, tsLineFlow=tsLineFlow, locIfLoad=locIfLoad, flashFree=flashFree, vinesIfIns=vinesIfIns, atNoencap=atNoencap, locIfspanOutOctets=locIfspanOutOctets, ipxActSrc=ipxActSrc, locIfInBitsSec=locIfInBitsSec, xnsForward=xnsForward, c7000_sysID=c7000_sysID, vinesIfTxForwardedCnt=vinesIfTxForwardedCnt, xnsEchoreqin=xnsEchoreqin, envTestPt1Descr=envTestPt1Descr, locIfarpInPkts=locIfarpInPkts, gateway_server=gateway_server, cardTableEntry=cardTableEntry, terminal_server=terminal_server, dnAPrio=dnAPrio, cardType=cardType, lipxAccountingTable=lipxAccountingTable, lts=lts, actSrc=actSrc, locIfprobeInOctets=locIfprobeInOctets, processorRam=processorRam, dnArea=dnArea, envTestPt6Descr=envTestPt6Descr, dnNoencap=dnNoencap, locIfSlowOutPkts=locIfSlowOutPkts, bufferSmSize=bufferSmSize, bufferBgMiss=bufferBgMiss, vinesIfRxIcpErrorCnt=vinesIfRxIcpErrorCnt, vinesIfServerless=vinesIfServerless, vinesIfInBytes=vinesIfInBytes, envTestPt6warn=envTestPt6warn, bufferMdTotal=bufferMdTotal, lipRoutingTable=lipRoutingTable, ipxActDst=ipxActDst, locIfInOverrun=locIfInOverrun, locIPRedirects=locIPRedirects, dnHost=dnHost, dnToomanyhops=dnToomanyhops, dnReceived=dnReceived, locRtMask=locRtMask)
mibBuilder.exportSymbols("CISCO-MIB", bufferMdTrim=bufferMdTrim, sysConfigAddr=sysConfigAddr, locIfInGiants=locIfInGiants, ltsLineTable=ltsLineTable, novellChksum=novellChksum, locIfFastInPkts=locIfFastInPkts, locIfipOutPkts=locIfipOutPkts, atArpreq=atArpreq, vinesIfRxEchoCnt=vinesIfRxEchoCnt, locIfbridgedInPkts=locIfbridgedInPkts, tslineSesAddr=tslineSesAddr, xnsLocal=xnsLocal, actAge=actAge, ltsLineSessionTable=ltsLineSessionTable, vinesIfRxArp3Cnt=vinesIfRxArp3Cnt, locIfReliab=locIfReliab, ipxActByts=ipxActByts, dnHIfIndex=dnHIfIndex, flashEraseStatus=flashEraseStatus, vinesClient=vinesClient, netToFlash=netToFlash, idleCount=idleCount, locIfdecnetOutOctets=locIfdecnetOutOctets, locIfotherInOctets=locIfotherInOctets, ltcpConnEntry=ltcpConnEntry, vinesIfTxIcpErrorCnt=vinesIfTxIcpErrorCnt, vinesIfInputNetworkFilter=vinesIfInputNetworkFilter, dnOtherlevel1=dnOtherlevel1, ipxActThresh=ipxActThresh, dnBadlevel1=dnBadlevel1, ltcpConnTable=ltcpConnTable, vinesNocharges=vinesNocharges, vinesEchoOut=vinesEchoOut, lipAccountingTable=lipAccountingTable, ltsLineSessionEntry=ltsLineSessionEntry, locIfspanOutPkts=locIfspanOutPkts, dnAreaTable=dnAreaTable, atDdpshort=atDdpshort, netToFlashTime=netToFlashTime, vinesEchoIn=vinesEchoIn, locIfapolloOutPkts=locIfapolloOutPkts, bufferBgSize=bufferBgSize, bufferLgSize=bufferLgSize, locIfDescr=locIfDescr, ckactPkts=ckactPkts, dnDatas=dnDatas, actCheckPoint=actCheckPoint, locIfvinesOutOctets=locIfvinesOutOctets, vinesIfRxRtp0Cnt=vinesIfRxRtp0Cnt, vinesIfRxArp1Cnt=vinesIfRxArp1Cnt, bufferBgTotal=bufferBgTotal, loctcpConnOutPkts=loctcpConnOutPkts, vinesIfRedirectInterval=vinesIfRedirectInterval, locIfSlowOutOctets=locIfSlowOutOctets, vinesIfTxBcastCnt=vinesIfTxBcastCnt, envPresent=envPresent, locIfbridgedInOctets=locIfbridgedInOctets, bufferSmFree=bufferSmFree, ipxCkactDst=ipxCkactDst, bufferBgFree=bufferBgFree, chassisId=chassisId, configRegister=configRegister, locIfappletalkInPkts=locIfappletalkInPkts, xnsOutput=xnsOutput, xnsFwdbrd=xnsFwdbrd, configRegNext=configRegNext, lipCkAccountingTable=lipCkAccountingTable, envTestPt2Measure=envTestPt2Measure, bufferLgCreate=bufferLgCreate, ltsLineEntry=ltsLineEntry, vinesIfTxArp0Cnt=vinesIfTxArp0Cnt, netConfigAddr=netConfigAddr, locIfFSIPrts=locIfFSIPrts, cardTable=cardTable, locIfvinesOutPkts=locIfvinesOutPkts, locIfResets=locIfResets, locIPUnreach=locIPUnreach, vinesIfOutBytes=vinesIfOutBytes, atChksum=atChksum, atNbpin=atNbpin, vinesIfRxBcastHelperedCnt=vinesIfRxBcastHelperedCnt, dnANextHop=dnANextHop, vinesIfRxIpUnknownCnt=vinesIfRxIpUnknownCnt, tsLineEsc=tsLineEsc, bufferElCreate=bufferElCreate, locIfsrbOutOctets=locIfsrbOutOctets, tsLineUser=tsLineUser, vinesIfRxRtp5Cnt=vinesIfRxRtp5Cnt, flashSize=flashSize, xnsInmult=xnsInmult, locIfbridgedOutPkts=locIfbridgedOutPkts, tsLineTerm=tsLineTerm, locIflanmanOutOctets=locIflanmanOutOctets, writeMem=writeMem, locIfdecnetInPkts=locIfdecnetInPkts, locIflanmanOutPkts=locIflanmanOutPkts, vinesIfInputRouterFilter=vinesIfInputRouterFilter, atHopcnt=atHopcnt, envTestPt3warn=envTestPt3warn, netConfigSet=netConfigSet, vinesIfRxProxyReplyCnt=vinesIfRxProxyReplyCnt, bufferHgTotal=bufferHgTotal, vinesLocaldest=vinesLocaldest, dnIfTableEntry=dnIfTableEntry, vinesIfRxRtp1Cnt=vinesIfRxRtp1Cnt, bufferSmMiss=bufferSmMiss, flashDirSize=flashDirSize, ipxCkactAge=ipxCkactAge, locIfarpInOctets=locIfarpInOctets, locIfnovellInOctets=locIfnovellInOctets, vinesIfPropagate=vinesIfPropagate, xnsNotgate=xnsNotgate, vinesIfTxEchoCnt=vinesIfTxEchoCnt, hostConfigSet=hostConfigSet, lipAccountEntry=lipAccountEntry, cardSwVersion=cardSwVersion, atNobuffer=atNobuffer, envTestPt3last=envTestPt3last, avgBusy1=avgBusy1, vinesIfRxRtp4Cnt=vinesIfRxRtp4Cnt, vinesIfArpEnabled=vinesIfArpEnabled, vinesEncapsfailed=vinesEncapsfailed, bufferBgHit=bufferBgHit, locIflanmanInPkts=locIflanmanInPkts, envTestPt3MarginPercent=envTestPt3MarginPercent, envBurnDate=envBurnDate, lifEntry=lifEntry, locIfFSIPdtr=locIfFSIPdtr)
