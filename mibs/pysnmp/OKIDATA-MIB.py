#
# PySNMP MIB module OKIDATA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OKIDATA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, ObjectIdentity, TimeTicks, NotificationType, MibIdentifier, Gauge32, mib_2, Counter64, IpAddress, enterprises, NotificationType, private, ModuleIdentity, iso, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "ObjectIdentity", "TimeTicks", "NotificationType", "MibIdentifier", "Gauge32", "mib-2", "Counter64", "IpAddress", "enterprises", "NotificationType", "private", "ModuleIdentity", "iso", "Counter32", "Unsigned32")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
okidata = MibIdentifier((1, 3, 6, 1, 4, 1, 2001))
peripheral = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1))
printer = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1))
printserver = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2))
nip = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1))
inkjet = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 2))
fax = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 3))
mfp = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 4))
sidm = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 5))
niptype1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1))
niptype2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 2))
cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1))
stat = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2))
cfg2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11))
usage = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100))
cfg2General = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1))
cfg2JobControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 2))
cfg2PaperHandling = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3))
cfg2PrintProcessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4))
cfg2HostInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 5))
cfg2LocalResources = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6))
cfg2Emulation = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 7))
cfg2Test = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 8))
cfg2Menu = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 9))
usagePrinterUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1))
usageTray = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2))
usageToner = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3))
usageDrum = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4))
usageBelt = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5))
usageFuser = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6))
usageOil = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 7))
usageWasteToner = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 8))
psVendor = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 100))
okips = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1))
commands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2))
okipsSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3))
okipsSNMPCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 2))
okipsSNMPTrapMasks = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6))
driver = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4))
tokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5))
printServers = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6))
psGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 1))
psOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2))
psProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3))
genProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15))
outputCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2))
outputConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3))
outputJobLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6))
trCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 2))
trConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3))
tcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1))
netware = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2))
vines = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3))
lanManager = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 4))
eTalk = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5))
tcpipCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 3))
tcpipConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4))
tcpipStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 5))
nwCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 3))
nwConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4))
nwStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 5))
bvCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3))
bvConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4))
bvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5))
eTalkCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 3))
eTalkConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4))
eTalkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 5))
cfgPersonality = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPersonality.setStatus('optional')
cfgManualFeed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgManualFeed.setStatus('optional')
cfgOkiPaperFeed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPaperFeed.setStatus('optional')
cfgOkiAutoTraySwitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiAutoTraySwitch.setStatus('optional')
cfgOkiPriorityTray = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPriorityTray.setStatus('optional')
cfgPaper = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPaper.setStatus('optional')
cfgOkiCustomPaperWidth = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiCustomPaperWidth.setStatus('optional')
cfgOkiCustomPaperLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiCustomPaperLength.setStatus('optional')
cfgInTray2Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray2Size.setStatus('optional')
cfgInTray3Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray3Size.setStatus('optional')
cfgInTray5Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray5Size.setStatus('optional')
cfgInTray1Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray1Size.setStatus('optional')
cfgInTray4Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray4Size.setStatus('optional')
cfgOkiMediaInTray2 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray2.setStatus('optional')
cfgOkiMediaInTray3 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray3.setStatus('optional')
cfgOkiMediaInTray5 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray5.setStatus('optional')
cfgOkiMediaInTray1 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 150), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray1.setStatus('optional')
cfgOkiMediaInTray4 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 160), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray4.setStatus('optional')
cfgOkiPaperSizeCheck = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 170), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPaperSizeCheck.setStatus('optional')
cfgMptray = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 180), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgMptray.setStatus('optional')
cfgIntray1 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 190), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgIntray1.setStatus('optional')
cfgIntray2 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 200), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgIntray2.setStatus('optional')
cfgIntray3 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 210), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgIntray3.setStatus('optional')
cfgCopies = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 220), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgCopies.setStatus('optional')
cfgDuplex = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 230), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDuplex.setStatus('optional')
cfgBinding = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 240), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgBinding.setStatus('optional')
cfgPclFontSource = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 250), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclFontSource.setStatus('optional')
cfgPclFontNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 260), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclFontNumber.setStatus('optional')
cfgPclPitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 270), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclPitch.setStatus('optional')
cfgPclPtSize = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 280), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclPtSize.setStatus('optional')
cfgPclSymSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 290), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclSymSet.setStatus('optional')
cfgPclOkiA4PrintWidth = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 300), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclOkiA4PrintWidth.setStatus('optional')
cfgPclOkiWhitePageSkip = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 310), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclOkiWhitePageSkip.setStatus('optional')
cfgPclOkiCrFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 320), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclOkiCrFunction.setStatus('optional')
cfgPclOkiLfFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 330), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclOkiLfFunction.setStatus('optional')
cfgIbmpprCharacterPitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 340), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprCharacterPitch.setStatus('optional')
cfgIbmpprFontCondense = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 350), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprFontCondense.setStatus('optional')
cfgIbmpprCharacterSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 360), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprCharacterSet.setStatus('optional')
cfgIbmpprSymbolSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 370), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprSymbolSet.setStatus('optional')
cfgIbmpprLetterOStyle = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 380), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLetterOStyle.setStatus('optional')
cfgIbmpprLinePitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 390), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLinePitch.setStatus('optional')
cfgIbmpprWhitePageSkip = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 400), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprWhitePageSkip.setStatus('optional')
cfgIbmpprCrFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 410), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprCrFunction.setStatus('optional')
cfgIbmpprLfFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 420), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLfFunction.setStatus('optional')
cfgIbmpprLineLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 430), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLineLength.setStatus('optional')
cfgIbmpprFormLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 440), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprFormLength.setStatus('optional')
cfgIbmpprTofPosition = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 450), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprTofPosition.setStatus('optional')
cfgIbmpprLeftMargine = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 460), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLeftMargine.setStatus('optional')
cfgEpsonfxCharacterPitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 470), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxCharacterPitch.setStatus('optional')
cfgEpsonfxCharacterSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 480), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxCharacterSet.setStatus('optional')
cfgEpsonfxSymbolSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 490), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxSymbolSet.setStatus('optional')
cfgEpsonfxLetterOStyle = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 500), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxLetterOStyle.setStatus('optional')
cfgEpsonfxLinePitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 510), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxLinePitch.setStatus('optional')
cfgEpsonfxWhitePageSkip = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 520), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxWhitePageSkip.setStatus('optional')
cfgEpsonfxCrFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 530), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxCrFunction.setStatus('optional')
cfgEpsonfxLineLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 540), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxLineLength.setStatus('optional')
cfgEpsonfxFormLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 550), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxFormLength.setStatus('optional')
cfgEpsonfxTofPosition = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 560), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxTofPosition.setStatus('optional')
cfgEpsonfxLeftMargine = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 570), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxLeftMargine.setStatus('optional')
cfgHiperwOkiDensity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 580), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgHiperwOkiDensity.setStatus('optional')
cfgHiperwOkiFirstbit = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 590), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgHiperwOkiFirstbit.setStatus('optional')
cfgHiperwOkiReverse = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 600), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgHiperwOkiReverse.setStatus('optional')
cfgHiperwPrintSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 610), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgHiperwPrintSpeed.setStatus('optional')
cfgEscpKanjiFont = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 611), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpKanjiFont.setStatus('optional')
cfgEscpAnkFont = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 612), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpAnkFont.setStatus('optional')
cfgEscpCharacterSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 613), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpCharacterSet.setStatus('optional')
cfgEscpZeroCharacter = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 614), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpZeroCharacter.setStatus('optional')
cfgEscpZoom = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 615), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpZoom.setStatus('optional')
cfgEscpTofPosition = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 616), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpTofPosition.setStatus('optional')
cfgEscpLineLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 617), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpLineLength.setStatus('optional')
cfgEscpCrFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 618), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpCrFunction.setStatus('optional')
cfgEscpAutoLf = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 619), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpAutoLf.setStatus('optional')
cfgOrientation = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 620), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOrientation.setStatus('optional')
cfgFormLines = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 630), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgFormLines.setStatus('optional')
cfgParallel = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 640), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgParallel.setStatus('optional')
cfgRs232c = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 650), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232c.setStatus('optional')
cfgRs422 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 660), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422.setStatus('optional')
cfgLocalTalk = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 670), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgLocalTalk.setStatus('optional')
cfgNetwork = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 680), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgNetwork.setStatus('optional')
cfgUsb = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 690), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgUsb.setStatus('optional')
cfgResolution = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgResolution.setStatus('optional')
cfgRet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2010), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRet.setStatus('optional')
cfgOkiRasterBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2020), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiRasterBuffer.setStatus('optional')
cfgPageProtect = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2030), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPageProtect.setStatus('optional')
cfgPrintProtect = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2035), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPrintProtect.setStatus('optional')
cfgOkiReceiveBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2040), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgOkiReceiveBuffer.setStatus('optional')
cfgOkiFontProtection = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2050), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgOkiFontProtection.setStatus('optional')
cfgOkiResourceSave = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2060), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgOkiResourceSave.setStatus('optional')
cfgAutoCont = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2070), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAutoCont.setStatus('optional')
cfgOkiAutoEject = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2080), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiAutoEject.setStatus('optional')
cfgManualTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2090), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgManualTimeOut.setStatus('optional')
cfgDensity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDensity.setStatus('optional')
cfgOkiYellowDarkness = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiYellowDarkness.setStatus('optional')
cfgOkiMagentaDarkness = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMagentaDarkness.setStatus('optional')
cfgOkiCyanDarkness = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiCyanDarkness.setStatus('optional')
cfgOkiBlackDarkness = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2104), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiBlackDarkness.setStatus('optional')
cfgOkiPowerSaving = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPowerSaving.setStatus('optional')
cfgOkiQuietMode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2115), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiQuietMode.setStatus('optional')
cfgLowToner = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgLowToner.setStatus('optional')
cfgEconoMode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEconoMode.setStatus('optional')
cfgClearableWarnings = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgClearableWarnings.setStatus('optional')
cfgOkiPrintErrors = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2150), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPrintErrors.setStatus('optional')
cfgParallelSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2160), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgParallelSpeed.setStatus('optional')
cfgBiDirection = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2170), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgBiDirection.setStatus('optional')
cfgOkiIPrime = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2180), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiIPrime.setStatus('optional')
cfgLang = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2190), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgLang.setStatus('optional')
cfgOkiJobSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2195), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiJobSwitch.setStatus('optional')
cfgRs232cBaud = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2200), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cBaud.setStatus('optional')
cfgRs232cDataBits = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2210), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cDataBits.setStatus('optional')
cfgRs232cStopBits = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2215), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cStopBits.setStatus('optional')
cfgRs232cParity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2220), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cParity.setStatus('optional')
cfgRs232cBusyTime = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2230), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cBusyTime.setStatus('optional')
cfgRs232cFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2240), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cFlowControl.setStatus('optional')
cfgRs422Baud = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2300), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422Baud.setStatus('optional')
cfgRs422DataBits = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2310), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422DataBits.setStatus('optional')
cfgRs422StopBits = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2320), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422StopBits.setStatus('optional')
cfgRs422Parity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2330), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422Parity.setStatus('optional')
cfgOkiUser = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiUser.setStatus('optional')
cfgOkiEcp = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiEcp.setStatus('optional')
cfgOkiXAdjust = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3010), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiXAdjust.setStatus('optional')
cfgOkiYAdjust = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3020), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiYAdjust.setStatus('optional')
cfgOkiDuplexAdjust = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3022), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiDuplexAdjust.setStatus('optional')
cfgOkiMediaSourceTray2 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3024), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaSourceTray2.setStatus('optional')
cfgOkiMediaSourceTray3 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3025), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaSourceTray3.setStatus('optional')
cfgOkiMediaSourceFront = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3026), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaSourceFront.setStatus('optional')
cfgPlacePage = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3028), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPlacePage.setStatus('optional')
cfgOkiColorAdjustPrint = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3041), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgOkiColorAdjustPrint.setStatus('optional')
cfgOkiColorAdjustYellow = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3042), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgOkiColorAdjustYellow.setStatus('optional')
cfgOkiColorAdjustMagenta = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3043), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgOkiColorAdjustMagenta.setStatus('optional')
cfgOkiColorAdjustCyan = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3044), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgOkiColorAdjustCyan.setStatus('optional')
cfgOkiJamRecovery = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3142), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiJamRecovery.setStatus('optional')
cfgFirmCpuVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3160), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgFirmCpuVersion.setStatus('optional')
cfgEngineFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3170), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgEngineFirmVersion.setStatus('optional')
cfgMessageVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3180), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgMessageVersion.setStatus('optional')
cfgPclFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3190), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPclFirmVersion.setStatus('optional')
cfgPclxlFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3200), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPclxlFirmVersion.setStatus('optional')
cfgSidmFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3210), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgSidmFirmVersion.setStatus('optional')
cfgHdFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3220), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHdFirmVersion.setStatus('optional')
cfgPsFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3230), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPsFirmVersion.setStatus('optional')
cfgEmulationTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3500), )
if mibBuilder.loadTexts: cfgEmulationTable.setStatus('optional')
cfgEmulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3500, 1), ).setIndexNames((0, "OKIDATA-MIB", "cfgEmulationIndex"))
if mibBuilder.loadTexts: cfgEmulationEntry.setStatus('optional')
cfgEmulationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3500, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgEmulationIndex.setStatus('optional')
cfgEmulationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3500, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgEmulationName.setStatus('optional')
cfgRamInstalledSize = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3510), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRamInstalledSize.setStatus('optional')
cfgTrayTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3520), )
if mibBuilder.loadTexts: cfgTrayTable.setStatus('optional')
cfgTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3520, 1), )
if mibBuilder.loadTexts: cfgTrayEntry.setStatus('optional')
cfgTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3520, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgTrayIndex.setStatus('optional')
cfgTrayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3520, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgTrayName.setStatus('optional')
cfgPrinterName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3530), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPrinterName.setStatus('optional')
stPjlStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stPjlStatus.setStatus('optional')
stLcdMessage = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stLcdMessage.setStatus('optional')
stOnline = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stOnline.setStatus('optional')
stManualLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stManualLedStatus.setStatus('optional')
stOperatorLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stOperatorLedStatus.setStatus('optional')
stServiceLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stServiceLedStatus.setStatus('optional')
stOnlineLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stOnlineLedStatus.setStatus('optional')
stPsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stPsStatus.setStatus('optional')
cfg2PrinterInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10))
cfg2PrinterConsumption = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20))
cfg2JamRecovery = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 70))
cfg2JamRecoveryCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 70, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2JamRecoveryCurrentValue.setStatus('optional')
cfg2OPPanelLock = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 130))
cfg2OPPanelLockCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 130, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2OPPanelLockCurrentValue.setStatus('optional')
cfg2Controlt = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 160))
cfg2ControltCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 160, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2ControltCurrentValue.setStatus('optional')
cfg2Type1MIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2Type1MIBVersion.setStatus('optional')
cfg2ModelId = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2ModelId.setStatus('optional')
cfg2PrinterVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50))
cfg2PrinterVersion1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 1))
cfg2PrinterVersion2Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 2))
cfg2PrinterVersion3Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 3))
cfg2PrinterVersion4Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 4))
cfg2PrinterVersion5Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 5))
cfg2PrinterVersion6Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 6))
cfg2PrinterVersion7Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 7))
cfg2PrinterVersion8Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 8))
cfg2PrinterVersion9Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 9))
cfg2PrinterVersion10Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 10))
cfg2PrinterVersion1 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion1.setStatus('optional')
cfg2PrinterVersion2 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion2.setStatus('optional')
cfg2PrinterVersion3 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion3.setStatus('optional')
cfg2PrinterVersion4 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion4.setStatus('optional')
cfg2PrinterVersion5 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion5.setStatus('optional')
cfg2PrinterVersion6 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion6.setStatus('optional')
cfg2PrinterVersion7 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion7.setStatus('optional')
cfg2PrinterVersion8 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion8.setStatus('optional')
cfg2PrinterVersion9 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion9.setStatus('optional')
cfg2PrinterVersion10 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion10.setStatus('optional')
cfg2PrinterType = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterType.setStatus('optional')
cfg2PowerSave = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20, 10))
cfg2PowerSaveCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2PowerSaveCurrentValue.setStatus('optional')
cfg2PowerSaveShift = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20, 11))
cfg2PowerSaveShiftCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2PowerSaveShiftCurrentValue.setStatus('optional')
cfg2PHCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 1))
cfg2PHInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2))
cfg2PHOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 3))
cfg2PHDuplex = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4))
cfg2MonoPrintSpeed = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 1, 20))
cfg2MonoPrintSpeedCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 1, 20, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2MonoPrintSpeedCurrentValue.setStatus('optional')
cfg2PriorityTray = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 30))
cfg2PriorityTrayCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 30, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2PriorityTrayCurrentValue.setStatus('optional')
cfg2TrayTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40))
cfg2Tray1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1))
cfg2Tray2Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2))
cfg2Tray3Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3))
cfg2Tray4Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4))
cfg2Tray5Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5))
cfg2Tray6Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6))
cfg2Tray7Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7))
cfg2Tray1PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 1))
cfg2Tray2PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 1))
cfg2Tray3PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 1))
cfg2Tray4PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 1))
cfg2Tray5PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 1))
cfg2Tray6PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 1))
cfg2Tray7PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 1))
cfg2Tray1PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1PaperSizeCurrentValue.setStatus('optional')
cfg2Tray2PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2PaperSizeCurrentValue.setStatus('optional')
cfg2Tray3PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3PaperSizeCurrentValue.setStatus('optional')
cfg2Tray4PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4PaperSizeCurrentValue.setStatus('optional')
cfg2Tray5PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5PaperSizeCurrentValue.setStatus('optional')
cfg2Tray6PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6PaperSizeCurrentValue.setStatus('optional')
cfg2Tray7PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7PaperSizeCurrentValue.setStatus('optional')
cfg2Tray1MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 2))
cfg2Tray2MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 2))
cfg2Tray3MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 2))
cfg2Tray4MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 2))
cfg2Tray5MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 2))
cfg2Tray6MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 2))
cfg2Tray7MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 2))
cfg2Tray1MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1MediaTypeCurrentValue.setStatus('optional')
cfg2Tray2MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2MediaTypeCurrentValue.setStatus('optional')
cfg2Tray3MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3MediaTypeCurrentValue.setStatus('optional')
cfg2Tray4MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4MediaTypeCurrentValue.setStatus('optional')
cfg2Tray5MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5MediaTypeCurrentValue.setStatus('optional')
cfg2Tray6MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6MediaTypeCurrentValue.setStatus('optional')
cfg2Tray7MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7MediaTypeCurrentValue.setStatus('optional')
cfg2Tray1MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 3))
cfg2Tray2MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 3))
cfg2Tray3MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 3))
cfg2Tray4MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 3))
cfg2Tray5MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 3))
cfg2Tray6MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 3))
cfg2Tray7MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 3))
cfg2Tray1MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1MediaWeightCurrentValue.setStatus('optional')
cfg2Tray2MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2MediaWeightCurrentValue.setStatus('optional')
cfg2Tray3MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3MediaWeightCurrentValue.setStatus('optional')
cfg2Tray4MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4MediaWeightCurrentValue.setStatus('optional')
cfg2Tray5MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5MediaWeightCurrentValue.setStatus('optional')
cfg2Tray6MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6MediaWeightCurrentValue.setStatus('optional')
cfg2Tray7MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7MediaWeightCurrentValue.setStatus('optional')
cfg2UnitOfMeasure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 50))
cfg2UnitOfMeasureCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 50, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2UnitOfMeasureCurrentValue.setStatus('optional')
cfg2XDimension = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 60))
cfg2XDimensionCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 60, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2XDimensionCurrentValue.setStatus('optional')
cfg2YDimension = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 70))
cfg2YDimensionCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 70, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2YDimensionCurrentValue.setStatus('optional')
cfg2TrayA3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90))
cfg2Tray1A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 1))
cfg2Tray2A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 2))
cfg2Tray3A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 3))
cfg2Tray4A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 4))
cfg2Tray5A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 5))
cfg2Tray6A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 6))
cfg2Tray7A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 7))
cfg2Tray1A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1A3PaperCurrentValue.setStatus('optional')
cfg2Tray2A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2A3PaperCurrentValue.setStatus('optional')
cfg2Tray3A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3A3PaperCurrentValue.setStatus('optional')
cfg2Tray4A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4A3PaperCurrentValue.setStatus('optional')
cfg2Tray5A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5A3PaperCurrentValue.setStatus('optional')
cfg2Tray6A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6A3PaperCurrentValue.setStatus('optional')
cfg2Tray7A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7A3PaperCurrentValue.setStatus('optional')
cfg2TrayLegal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100))
cfg2Tray1Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 1))
cfg2Tray2Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 2))
cfg2Tray3Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 3))
cfg2Tray4Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 4))
cfg2Tray5Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 5))
cfg2Tray6Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 6))
cfg2Tray7Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 7))
cfg2Tray1Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1Legal14PaperCurrentValue.setStatus('optional')
cfg2Tray2Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2Legal14PaperCurrentValue.setStatus('optional')
cfg2Tray3Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3Legal14PaperCurrentValue.setStatus('optional')
cfg2Tray4Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4Legal14PaperCurrentValue.setStatus('optional')
cfg2Tray5Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5Legal14PaperCurrentValue.setStatus('optional')
cfg2Tray6Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6Legal14PaperCurrentValue.setStatus('optional')
cfg2Tray7Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7Legal14PaperCurrentValue.setStatus('optional')
cfg2TrayA5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110))
cfg2Tray1A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 1))
cfg2Tray2A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 2))
cfg2Tray3A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 3))
cfg2Tray4A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 4))
cfg2Tray5A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 5))
cfg2Tray6A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 6))
cfg2Tray7A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 7))
cfg2Tray1A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1A5A6PaperCurrentValue.setStatus('optional')
cfg2Tray2A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2A5A6PaperCurrentValue.setStatus('optional')
cfg2Tray3A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3A5A6PaperCurrentValue.setStatus('optional')
cfg2Tray4A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4A5A6PaperCurrentValue.setStatus('optional')
cfg2Tray5A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5A5A6PaperCurrentValue.setStatus('optional')
cfg2Tray6A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6A5A6PaperCurrentValue.setStatus('optional')
cfg2Tray7A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7A5A6PaperCurrentValue.setStatus('optional')
cfg2OutputBin = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 3, 10))
cfg2OutputBinCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 3, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2OutputBinCurrentValue.setStatus('optional')
cfg2Duplex = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4, 10))
cfg2DuplexCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2DuplexCurrentValue.setStatus('optional')
cfg2Binding = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4, 20))
cfg2BindingCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4, 20, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2BindingCurrentValue.setStatus('optional')
cfg2PPCColor = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 1))
cfg2PPCDevelopmentControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 2))
cfg2PPCLEDHeadControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 3))
cfg2PPCFusingControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 4))
cfg2PPCPrintPositionControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 5))
cfg2PPCTonerControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 6))
cfg2PPCDrumControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 7))
cfg2AutoRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 1, 30))
cfg2AutoRegistrationCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 1, 30, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2AutoRegistrationCurrentValue.setStatus('optional')
cfg2JobOffset = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 2, 20))
cfg2JobOffsetCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 2, 20, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2JobOffsetCurrentValue.setStatus('optional')
cfg2LRCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1))
cfg2LRMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 2))
cfg2LRHdd = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 3))
cfg2StoragePartitionTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1, 1), )
if mibBuilder.loadTexts: cfg2StoragePartitionTable.setStatus('optional')
cfg2StoragePartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "hrDeviceIndex"), (0, "OKIDATA-MIB", "hrPartitionIndex"))
if mibBuilder.loadTexts: cfg2StoragePartitionEntry.setStatus('optional')
cfg2StoragePartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2StoragePartitionIndex.setStatus('optional')
cfg2StoragePartitionFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2StoragePartitionFree.setStatus('optional')
usagePrinterUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1), )
if mibBuilder.loadTexts: usagePrinterUnitTable.setStatus('optional')
usagePrinterUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usagePrinterUnitIndex"))
if mibBuilder.loadTexts: usagePrinterUnitEntry.setStatus('optional')
usagePrinterUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usagePrinterUnitIndex.setStatus('optional')
usagePrinterUnitCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usagePrinterUnitCounter.setStatus('optional')
usagePrinterUnitCounterLife = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usagePrinterUnitCounterLife.setStatus('optional')
usageTrayTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1), )
if mibBuilder.loadTexts: usageTrayTable.setStatus('optional')
usageTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageTrayIndex"))
if mibBuilder.loadTexts: usageTrayEntry.setStatus('optional')
usageTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTrayIndex.setStatus('optional')
usageTrayMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTrayMaxLevel.setStatus('optional')
usageTrayCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTrayCounter.setStatus('optional')
usageTonerTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1), )
if mibBuilder.loadTexts: usageTonerTable.setStatus('optional')
usageTonerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageTonerIndex"))
if mibBuilder.loadTexts: usageTonerEntry.setStatus('optional')
usageTonerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerIndex.setStatus('optional')
usageTonerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerDescription.setStatus('optional')
usageTonerCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerCurrentLevel.setStatus('optional')
usageTonerMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerMaxLevel.setStatus('optional')
usageTonerLevelUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerLevelUnit.setStatus('optional')
usageDrumTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1), )
if mibBuilder.loadTexts: usageDrumTable.setStatus('optional')
usageDrumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageDrumIndex"))
if mibBuilder.loadTexts: usageDrumEntry.setStatus('optional')
usageDrumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageDrumIndex.setStatus('optional')
usageDrumCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageDrumCurrentLevel.setStatus('optional')
usageDrumMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageDrumMaxLevel.setStatus('optional')
usageBeltTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1), )
if mibBuilder.loadTexts: usageBeltTable.setStatus('optional')
usageBeltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageBeltIndex"))
if mibBuilder.loadTexts: usageBeltEntry.setStatus('optional')
usageBeltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageBeltIndex.setStatus('optional')
usageBeltCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageBeltCurrentLevel.setStatus('optional')
usageBeltMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageBeltMaxLevel.setStatus('optional')
usageFuserTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1), )
if mibBuilder.loadTexts: usageFuserTable.setStatus('optional')
usageFuserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageFuserIndex"))
if mibBuilder.loadTexts: usageFuserEntry.setStatus('optional')
usageFuserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageFuserIndex.setStatus('optional')
usageFuserCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageFuserCurrentLevel.setStatus('optional')
usageFuserMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageFuserMaxLevel.setStatus('optional')
psVendorId = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 100, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVendorId.setStatus('mandatory')
psMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 100, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMibVersion.setStatus('mandatory')
genGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupVersion.setStatus('mandatory')
genMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMIBVersion.setStatus('mandatory')
genProductName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProductName.setStatus('mandatory')
genProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProductNumber.setStatus('mandatory')
genSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genSerialNumber.setStatus('mandatory')
genHWAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: genHWAddress.setStatus('mandatory')
genCableType = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tenbase2", 1), ("tenbaseT", 2), ("aui", 3), ("utp", 4), ("stp", 5), ("fiber100fx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCableType.setStatus('mandatory')
genDateCode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genDateCode.setStatus('mandatory')
genVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genVersion.setStatus('mandatory')
genConfigurationDirty = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genConfigurationDirty.setStatus('mandatory')
genCompanyName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyName.setStatus('mandatory')
genCompanyLoc = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyLoc.setStatus('mandatory')
genCompanyPhone = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyPhone.setStatus('mandatory')
genCompanyTechSupport = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyTechSupport.setStatus('mandatory')
genNumProtocols = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genNumProtocols.setStatus('mandatory')
genProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2), )
if mibBuilder.loadTexts: genProtocolTable.setStatus('mandatory')
genProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2, 1), ).setIndexNames((0, "OKIDATA-MIB", "genProtocolIndex"))
if mibBuilder.loadTexts: genProtocolEntry.setStatus('mandatory')
genProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolIndex.setStatus('mandatory')
genProtocolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolDescr.setStatus('mandatory')
genProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tcp-ip", 1), ("netware", 2), ("vines", 3), ("lanmanger", 4), ("ethertalk", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolID.setStatus('mandatory')
genSysUpTimeString = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genSysUpTimeString.setStatus('mandatory')
cmdGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdGroupVersion.setStatus('mandatory')
cmdReset = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdReset.setStatus('optional')
cmdPrintConfig = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdPrintConfig.setStatus('optional')
cmdRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdRestoreDefaults.setStatus('optional')
snmpGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupVersion.setStatus('mandatory')
snmpRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRestoreDefaults.setStatus('optional')
snmpGetCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGetCommunityName.setStatus('optional')
snmpSetCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSetCommunityName.setStatus('optional')
snmpTrapCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunityName.setStatus('optional')
snmpPrinterTrapMaskUsed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPrinterTrapMaskUsed.setStatus('optional')
snmpPrinter2TrapMaskUsed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPrinter2TrapMaskUsed.setStatus('optional')
snmpTrapMaskTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 3), )
if mibBuilder.loadTexts: snmpTrapMaskTable.setStatus('mandatory')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 3, 1), ).setIndexNames((0, "OKIDATA-MIB", "SNMPTrapMaskIndex"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('mandatory')
snmpTrapMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapMaskIndex.setStatus('mandatory')
snmpTrapMaskString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapMaskString.setStatus('optional')
driverGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverGroupVersion.setStatus('mandatory')
driverRXPackets = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPackets.setStatus('mandatory')
driverTXPackets = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPackets.setStatus('mandatory')
driverRXPacketsUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPacketsUnavailable.setStatus('mandatory')
driverRXPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPacketErrors.setStatus('mandatory')
driverTXPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPacketErrors.setStatus('mandatory')
driverTXPacketRetries = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPacketRetries.setStatus('mandatory')
driverChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverChecksumErrors.setStatus('mandatory')
trGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trGroupVersion.setStatus('mandatory')
trRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trRestoreDefaults.setStatus('optional')
trPriority = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trPriority.setStatus('optional')
trEarlyTokenRelease = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trEarlyTokenRelease.setStatus('optional')
trPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one-k", 1), ("two-k", 2), ("four-k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trPacketSize.setStatus('optional')
trRouting = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("all-None", 2), ("single-All", 3), ("single-None", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trRouting.setStatus('optional')
trLocallyAdminAddr = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trLocallyAdminAddr.setStatus('optional')
psGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psGroupVersion.setStatus('mandatory')
psJetAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psJetAdminEnabled.setStatus('mandatory')
psVerifyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("getvalue", 0), ("serial-configuration", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psVerifyConfiguration.setStatus('optional')
outputGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputGroupVersion.setStatus('mandatory')
outputRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputRestoreDefaults.setStatus('mandatory')
outputCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2, 2), )
if mibBuilder.loadTexts: outputCommandsTable.setStatus('mandatory')
outputCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2, 2, 1), ).setIndexNames((0, "OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputCommandsEntry.setStatus('mandatory')
outputCancelCurrentJob = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputCancelCurrentJob.setStatus('optional')
outputNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputNumPorts.setStatus('mandatory')
outputTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2), )
if mibBuilder.loadTexts: outputTable.setStatus('mandatory')
outputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1), ).setIndexNames((0, "OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputEntry.setStatus('mandatory')
outputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIndex.setStatus('mandatory')
outputName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputName.setStatus('mandatory')
outputStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputStatusString.setStatus('mandatory')
outputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on-Line", 1), ("off-Line", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputStatus.setStatus('mandatory')
outputExtendedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 15))).clone(namedValues=NamedValues(("none", 1), ("no-Printer-Attached", 2), ("toner-Low", 3), ("paper-Out", 4), ("paper-Jam", 5), ("door-Open", 6), ("printer-Error", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputExtendedStatus.setStatus('mandatory')
outputPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("okidata", 2), ("no-Specific-Printer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPrinter.setStatus('optional')
outputLanguageSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("pcl", 2), ("postScript", 3), ("als", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputLanguageSwitching.setStatus('optional')
outputConfigLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("text", 1), ("pcl", 2), ("postScript", 3), ("off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputConfigLanguage.setStatus('mandatory')
outputPCLString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPCLString.setStatus('optional')
outputPSString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPSString.setStatus('optional')
outputSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32758, 32759, 32760, 32761, 32762, 32763, 32764, 32765, 32766, 32767))).clone(namedValues=NamedValues(("serial-infrared", 32758), ("serial-bidirectional", 32759), ("serial-unidirectional", 32760), ("serial-input", 32761), ("parallel-compatibility-no-bidi", 32762), ("ieee-1284-std-nibble-mode", 32763), ("z-Link", 32764), ("internal", 32765), ("ieee-1284-ecp-or-fast-nibble-mode", 32766), ("extendedLink", 32767)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputSetting.setStatus('mandatory')
outputOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-Owner", 1), ("tcpip", 2), ("netware", 3), ("vines", 4), ("lanManager", 5), ("etherTalk", 6), ("config-Page", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputOwner.setStatus('mandatory')
outputBIDIStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputBIDIStatusEnabled.setStatus('optional')
outputPrinterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputPrinterModel.setStatus('optional')
outputPrinterDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputPrinterDisplay.setStatus('optional')
outputCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 524288, 1048576, 2097152, 4194304, 8388608, 33554432, 67108864, 134217728, 536870912, 1073741824))).clone(namedValues=NamedValues(("serial-Uni-Baud-9600", 1), ("serial-Uni-Baud-19200", 2), ("serial-Uni-Baud-38400", 4), ("serial-Uni-Baud-57600", 8), ("serial-Uni-Baud-115200", 16), ("serial-bidi-Baud-9600", 32), ("serial-bidi-Baud-19200", 64), ("serial-bidi-Baud-38400", 128), ("serial-bidi-Baud-57600", 256), ("serial-irin", 524288), ("serial-in", 1048576), ("serial-config-settings", 2097152), ("parallel-compatibility-no-bidi", 4194304), ("ieee-1284-std-nibble-mode", 8388608), ("bidirectional", 33554432), ("serial-Software-Handshake", 67108864), ("serial-Output", 134217728), ("internal", 536870912), ("ieee-1284-ecp-or-fast-nibble-mode", 1073741824)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputCapabilities.setStatus('mandatory')
outputHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-Supported", 1), ("hardware-Software", 2), ("hardware", 3), ("software", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputHandshake.setStatus('optional')
outputProtocolManager = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("protocol-none", 0), ("protocol-compatibility", 1), ("protocol-1284-4", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputProtocolManager.setStatus('optional')
outputDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputDisplayMask.setStatus('mandatory')
outputAvailableTrapsMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputAvailableTrapsMask.setStatus('mandatory')
outputNumLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputNumLogEntries.setStatus('mandatory')
outputJobLogTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 2), )
if mibBuilder.loadTexts: outputJobLogTable.setStatus('mandatory')
outputJobLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 2, 1), ).setIndexNames((0, "OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputJobLogEntry.setStatus('mandatory')
outputJobLogInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputJobLogInformation.setStatus('mandatory')
outputJobLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputJobLogTime.setStatus('mandatory')
outputTotalJobTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 3), )
if mibBuilder.loadTexts: outputTotalJobTable.setStatus('mandatory')
outputTotalJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 3, 1), ).setIndexNames((0, "OKIDATA-MIB", "outputTotalJobIndex"))
if mibBuilder.loadTexts: outputTotalJobEntry.setStatus('mandatory')
outputTotalJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTotalJobIndex.setStatus('mandatory')
outputTotalJobsLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTotalJobsLogged.setStatus('mandatory')
tcpipGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipGroupVersion.setStatus('mandatory')
tcpipEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipEnabled.setStatus('optional')
tcpipRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipRestoreDefaults.setStatus('optional')
tcpipFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipFirmwareUpgrade.setStatus('optional')
tcpipIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipIPAddress.setStatus('optional')
tcpipDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipDefaultGateway.setStatus('optional')
tcpipSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSubnetMask.setStatus('optional')
tcpipUsingNetProtocols = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipUsingNetProtocols.setStatus('optional')
tcpipBootProtocolsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipBootProtocolsEnabled.setStatus('optional')
tcpipIPAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("permanent", 1), ("default", 2), ("rarp", 3), ("bootp", 4), ("dhcp", 5), ("glean", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipIPAddressSource.setStatus('optional')
tcpipIPAddressServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipIPAddressServerAddress.setStatus('optional')
tcpipTimeoutChecking = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTimeoutChecking.setStatus('optional')
tcpipNumTraps = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumTraps.setStatus('mandatory')
tcpipTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10), )
if mibBuilder.loadTexts: tcpipTrapTable.setStatus('mandatory')
tcpipTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1), ).setIndexNames((0, "OKIDATA-MIB", "tcpipTrapIndex"))
if mibBuilder.loadTexts: tcpipTrapEntry.setStatus('mandatory')
tcpipTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipTrapIndex.setStatus('mandatory')
tcpipTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTrapDestination.setStatus('optional')
tcpipPrinter2TrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPrinter2TrapMask.setStatus('optional')
tcpipPrinterTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPrinterTrapMask.setStatus('optional')
tcpipOutputTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipOutputTrapMask.setStatus('optional')
tcpipBanners = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipBanners.setStatus('optional')
tcpipWinsAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWinsAddress.setStatus('optional')
tcpipWinsAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWinsAddressSource.setStatus('optional')
tcpipConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipConfigPassword.setStatus('optional')
tcpipTimeoutCheckingValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTimeoutCheckingValue.setStatus('optional')
tcpipArpInterval = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipArpInterval.setStatus('optional')
tcpipRawPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipRawPortNumber.setStatus('optional')
tcpipNumSecurity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumSecurity.setStatus('mandatory')
tcpipSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19), )
if mibBuilder.loadTexts: tcpipSecurityTable.setStatus('mandatory')
tcpipSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1), ).setIndexNames((0, "OKIDATA-MIB", "tcpipSecurityIndex"))
if mibBuilder.loadTexts: tcpipSecurityEntry.setStatus('mandatory')
tcpipSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipSecurityIndex.setStatus('mandatory')
tcpipSecureStartIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureStartIPAddress.setStatus('optional')
tcpipSecureEndIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureEndIPAddress.setStatus('optional')
tcpipSecurePrinterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecurePrinterMask.setStatus('optional')
tcpipSecureAdminEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureAdminEnabled.setStatus('optional')
tcpipLowBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipLowBandwidth.setStatus('optional')
tcpipNumLogicalPrinters = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumLogicalPrinters.setStatus('mandatory')
tcpipMLPTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22), )
if mibBuilder.loadTexts: tcpipMLPTable.setStatus('mandatory')
tcpipMLPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1), ).setIndexNames((0, "OKIDATA-MIB", "tcpipMLPIndex"))
if mibBuilder.loadTexts: tcpipMLPEntry.setStatus('mandatory')
tcpipMLPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipMLPIndex.setStatus('optional')
tcpipMLPName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPName.setStatus('optional')
tcpipMLPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPort.setStatus('optional')
tcpipMLPTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPTCPPort.setStatus('optional')
tcpipMLPPreString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPreString.setStatus('optional')
tcpipMLPPostString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPostString.setStatus('optional')
tcpipMLPDeleteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPDeleteBytes.setStatus('optional')
tcpipSmtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpServerAddr.setStatus('optional')
tcpipNumSmtpDestinations = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumSmtpDestinations.setStatus('mandatory')
tcpipSmtpTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25), )
if mibBuilder.loadTexts: tcpipSmtpTable.setStatus('mandatory')
tcpipSmtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1), ).setIndexNames((0, "OKIDATA-MIB", "tcpipSmtpIndex"))
if mibBuilder.loadTexts: tcpipSmtpEntry.setStatus('mandatory')
tcpipSmtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipSmtpIndex.setStatus('mandatory')
tcpipSmtpEmailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpEmailAddr.setStatus('optional')
tcpipSmtpProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpProtocolMask.setStatus('optional')
tcpipSmtpPrinterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpPrinterMask.setStatus('optional')
tcpipSmtpOutputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpOutputMask.setStatus('optional')
tcpipWebAdminName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebAdminName.setStatus('optional')
tcpipWebAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebAdminPassword.setStatus('optional')
tcpipWebUserName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUserName.setStatus('optional')
tcpipWebUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUserPassword.setStatus('optional')
tcpipWebHtttpPort = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebHtttpPort.setStatus('optional')
tcpipWebFaqURL = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebFaqURL.setStatus('optional')
tcpipWebUpdateURL = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUpdateURL.setStatus('optional')
tcpipWebCustomLinkName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebCustomLinkName.setStatus('optional')
tcpipWebCustomLinkURL = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebCustomLinkURL.setStatus('optional')
tcpipPOP3ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3ServerAddress.setStatus('optional')
tcpipPOP3PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3PollInterval.setStatus('mandatory')
tcpipPOP3UserName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3UserName.setStatus('optional')
tcpipPOP3Password = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3Password.setStatus('optional')
tcpipDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipDomainName.setStatus('optional')
tcpipCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipCapabilities.setStatus('mandatory')
tcpipError = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipError.setStatus('optional')
tcpipDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipDisplayMask.setStatus('mandatory')
nwGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwGroupVersion.setStatus('mandatory')
nwEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwEnabled.setStatus('optional')
nwRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwRestoreDefaults.setStatus('optional')
nwFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwFirmwareUpgrade.setStatus('optional')
nwFrameFormat = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("ethernet-II", 2), ("ethernet-802-3", 3), ("ethernet-802-2", 4), ("ethernet-Snap", 5), ("token-Ring", 6), ("token-Ring-Snap", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFrameFormat.setStatus('optional')
nwSetFrameFormat = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("auto-Sense", 1), ("forced-Ethernet-II", 2), ("forced-Ethernet-802-3", 3), ("forced-Ethernet-802-2", 4), ("forced-Ethernet-Snap", 5), ("forced-Token-Ring", 6), ("forced-Token-Ring-Snap", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSetFrameFormat.setStatus('optional')
nwMode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("pserver", 2), ("rprinter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwMode.setStatus('optional')
nwPrintServerName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrintServerName.setStatus('optional')
nwPrintServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrintServerPassword.setStatus('optional')
nwQueueScanTime = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwQueueScanTime.setStatus('optional')
nwNetworkNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNetworkNumber.setStatus('optional')
nwMaxFileServers = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMaxFileServers.setStatus('optional')
nwFileServerTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9), )
if mibBuilder.loadTexts: nwFileServerTable.setStatus('optional')
nwFileServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9, 1), ).setIndexNames((0, "OKIDATA-MIB", "nwFileServerIndex"))
if mibBuilder.loadTexts: nwFileServerEntry.setStatus('optional')
nwFileServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileServerIndex.setStatus('optional')
nwFileServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwFileServerName.setStatus('optional')
nwFileServerConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 258, 261, 276, 512, 515, 768, 769, 32767))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("startupInProgress", 3), ("serverReattaching", 4), ("serverNeverAttached", 5), ("pse-UNKNOWN-FILE-SERVER", 258), ("pse-NO-RESPONSE", 261), ("pse-CANT-LOGIN", 276), ("pse-NO-SUCH-QUEUE", 512), ("pse-UNABLE-TO-ATTACH-TO-QUEUE", 515), ("bad-CONNECTION", 768), ("bad-SERVICE-CONNECTION", 769), ("other", 32767)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileServerConnectionStatus.setStatus('optional')
nwPortTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10), )
if mibBuilder.loadTexts: nwPortTable.setStatus('optional')
nwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1), ).setIndexNames((0, "OKIDATA-MIB", "nwPortIndex"))
if mibBuilder.loadTexts: nwPortEntry.setStatus('optional')
nwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPortIndex.setStatus('optional')
nwPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPortStatus.setStatus('optional')
nwPortPrinterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPrinterNumber.setStatus('optional')
nwPortFontDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-No-Power-Sense", 2), ("enabled-Power-Sense", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFontDownload.setStatus('optional')
nwPortPCLQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPCLQueue.setStatus('optional')
nwPortPSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPSQueue.setStatus('optional')
nwPortFormsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFormsOn.setStatus('optional')
nwPortFormNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFormNumber.setStatus('optional')
nwPortNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortNotification.setStatus('optional')
nwNumTraps = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNumTraps.setStatus('mandatory')
nwTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12), )
if mibBuilder.loadTexts: nwTrapTable.setStatus('mandatory')
nwTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1), ).setIndexNames((0, "OKIDATA-MIB", "nwTrapIndex"))
if mibBuilder.loadTexts: nwTrapEntry.setStatus('mandatory')
nwTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwTrapIndex.setStatus('mandatory')
nwTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwTrapDestination.setStatus('optional')
nwTrapDestinationNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwTrapDestinationNet.setStatus('mandatory')
nwPrinter2TrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrinter2TrapMask.setStatus('optional')
nwPrinterTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrinterTrapMask.setStatus('optional')
nwOutputTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwOutputTrapMask.setStatus('optional')
nwNDSPrintServerName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPrintServerName.setStatus('optional')
nwNDSPreferredDSTree = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPreferredDSTree.setStatus('optional')
nwNDSPreferredDSFileServer = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPreferredDSFileServer.setStatus('optional')
nwNDSPacketCheckSumEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPacketCheckSumEnabled.setStatus('optional')
nwNDSPacketSignatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPacketSignatureLevel.setStatus('optional')
nwAvailablePrintModes = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAvailablePrintModes.setStatus('optional')
nwDirectPrintEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDirectPrintEnabled.setStatus('optional')
nwJAConfig = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwJAConfig.setStatus('optional')
nwDisableSAP = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDisableSAP.setStatus('optional')
nwError = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwError.setStatus('optional')
nwDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDisplayMask.setStatus('mandatory')
bvGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvGroupVersion.setStatus('mandatory')
bvEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvEnabled.setStatus('optional')
bvRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvRestoreDefaults.setStatus('optional')
bvFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvFirmwareUpgrade.setStatus('optional')
bvSetSequenceRouting = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic-Routing", 1), ("force-Sequenced-Routing", 2), ("force-Non-Sequenced-Routing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvSetSequenceRouting.setStatus('optional')
bvDisableVPMan = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvDisableVPMan.setStatus('optional')
bvLoginName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvLoginName.setStatus('optional')
bvLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvLoginPassword.setStatus('optional')
bvNumberPrintServices = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvNumberPrintServices.setStatus('optional')
bvPrintServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4), )
if mibBuilder.loadTexts: bvPrintServiceTable.setStatus('optional')
bvPrintServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4, 1), ).setIndexNames((0, "OKIDATA-MIB", "bvPrintServiceIndex"))
if mibBuilder.loadTexts: bvPrintServiceEntry.setStatus('optional')
bvPrintServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPrintServiceIndex.setStatus('optional')
bvPrintServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPrintServiceName.setStatus('optional')
bvPrintServiceRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPrintServiceRouting.setStatus('optional')
bvPnicDescription = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPnicDescription.setStatus('optional')
bvError = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvError.setStatus('optional')
bvRouting = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 32766, 32767))).clone(namedValues=NamedValues(("sequenced-Routing", 1), ("non-Sequenced-Routing", 2), ("unknown-Routing", 32766), ("protocol-Disabled", 32767)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvRouting.setStatus('optional')
bvNumPrintServices = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvNumPrintServices.setStatus('optional')
bvPrintServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4), )
if mibBuilder.loadTexts: bvPrintServiceStatusTable.setStatus('optional')
bvPrintServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1), ).setIndexNames((0, "OKIDATA-MIB", "bvPSStatusIndex"))
if mibBuilder.loadTexts: bvPrintServiceStatusEntry.setStatus('optional')
bvPSStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSStatusIndex.setStatus('optional')
bvPSName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSName.setStatus('optional')
bvPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSStatus.setStatus('optional')
bvPSDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSDestination.setStatus('optional')
bvPrinterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPrinterStatus.setStatus('optional')
bvJobActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobActive.setStatus('optional')
bvJobSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobSource.setStatus('optional')
bvJobTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobTitle.setStatus('optional')
bvJobSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobSize.setStatus('optional')
bvJobNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobNumber.setStatus('optional')
lmGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmGroupVersion.setStatus('mandatory')
lmEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmEnabled.setStatus('optional')
eTalkGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkGroupVersion.setStatus('mandatory')
eTalkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkEnabled.setStatus('optional')
eTalkRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkRestoreDefaults.setStatus('optional')
eTalkNetwork = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNetwork.setStatus('optional')
eTalkNode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNode.setStatus('optional')
eTalkNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNumPorts.setStatus('optional')
eTalkPortTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4), )
if mibBuilder.loadTexts: eTalkPortTable.setStatus('optional')
eTalkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1), ).setIndexNames((0, "OKIDATA-MIB", "eTalkPortIndex"))
if mibBuilder.loadTexts: eTalkPortEntry.setStatus('optional')
eTalkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkPortIndex.setStatus('optional')
eTalkPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkPortEnable.setStatus('optional')
eTalkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkName.setStatus('optional')
eTalkActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkActiveName.setStatus('optional')
eTalkType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkType1.setStatus('optional')
eTalkType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkType2.setStatus('optional')
eTalkZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkZone.setStatus('optional')
eTalkActiveZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkActiveZone.setStatus('optional')
eTalkError = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkError.setStatus('optional')
trapPrinterOnline = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,1)).setObjects(("OKIDATA-MIB", "outputIndex"))
trapPrinterOffline = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,2)).setObjects(("OKIDATA-MIB", "outputIndex"))
trapNoPrinterAttached = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,3)).setObjects(("OKIDATA-MIB", "outputIndex"))
trapPrinterTonerLow = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,4)).setObjects(("OKIDATA-MIB", "outputIndex"))
trapPrinterPaperOut = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,5)).setObjects(("OKIDATA-MIB", "outputIndex"))
trapPrinterPaperJam = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,6)).setObjects(("OKIDATA-MIB", "outputIndex"))
trapPrinterDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,7)).setObjects(("OKIDATA-MIB", "outputIndex"))
trapPrinterError = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,16)).setObjects(("OKIDATA-MIB", "outputIndex"))
mibBuilder.exportSymbols("OKIDATA-MIB", cfgPclFontSource=cfgPclFontSource, nwNetworkNumber=nwNetworkNumber, tcpipWebCustomLinkURL=tcpipWebCustomLinkURL, cfg2PrinterVersion4Table=cfg2PrinterVersion4Table, eTalkNumPorts=eTalkNumPorts, genCableType=genCableType, cfg2Tray7MediaWeight=cfg2Tray7MediaWeight, tcpipError=tcpipError, cfgEscpAnkFont=cfgEscpAnkFont, cfg2PrinterVersion5=cfg2PrinterVersion5, cfg2Tray1A5A6PaperCurrentValue=cfg2Tray1A5A6PaperCurrentValue, outputJobLogTime=outputJobLogTime, bvNumberPrintServices=bvNumberPrintServices, usageDrum=usageDrum, outputLanguageSwitching=outputLanguageSwitching, vines=vines, usageTray=usageTray, cfgPclOkiCrFunction=cfgPclOkiCrFunction, cfg2PrinterVersion4=cfg2PrinterVersion4, cfgManualTimeOut=cfgManualTimeOut, tcpipBootProtocolsEnabled=tcpipBootProtocolsEnabled, cfg2Tray2Legal14Paper=cfg2Tray2Legal14Paper, bvPrintServiceStatusEntry=bvPrintServiceStatusEntry, nwPortFormsOn=nwPortFormsOn, cfgOkiMediaInTray1=cfgOkiMediaInTray1, cfg2Tray4MediaWeightCurrentValue=cfg2Tray4MediaWeightCurrentValue, tcpipMLPDeleteBytes=tcpipMLPDeleteBytes, cfgRs232cBaud=cfgRs232cBaud, usagePrinterUnitCounterLife=usagePrinterUnitCounterLife, cfg2PPCColor=cfg2PPCColor, outputJobLogInformation=outputJobLogInformation, cfg2PrinterVersion2=cfg2PrinterVersion2, cfgOkiMediaSourceTray2=cfgOkiMediaSourceTray2, cfg2Tray7Legal14Paper=cfg2Tray7Legal14Paper, cfgOkiBlackDarkness=cfgOkiBlackDarkness, tcpipConfigure=tcpipConfigure, cfg2LocalResources=cfg2LocalResources, cfgInTray2Size=cfgInTray2Size, cfg2PPCLEDHeadControl=cfg2PPCLEDHeadControl, eTalk=eTalk, eTalkPortIndex=eTalkPortIndex, okipsSNMP=okipsSNMP, cfg2XDimension=cfg2XDimension, cfgRs422DataBits=cfgRs422DataBits, eTalkRestoreDefaults=eTalkRestoreDefaults, outputNumPorts=outputNumPorts, inkjet=inkjet, driverRXPacketErrors=driverRXPacketErrors, cfgIntray1=cfgIntray1, usageFuserEntry=usageFuserEntry, cfg2PrinterVersion10=cfg2PrinterVersion10, okipsSNMPTrapMasks=okipsSNMPTrapMasks, cfgTrayIndex=cfgTrayIndex, nwDisplayMask=nwDisplayMask, cfgBinding=cfgBinding, cfgFormLines=cfgFormLines, tcpipTrapIndex=tcpipTrapIndex, driverTXPacketErrors=driverTXPacketErrors, bvPSStatusIndex=bvPSStatusIndex, psGeneral=psGeneral, cfg2YDimension=cfg2YDimension, cfg2Tray6PaperSizeCurrentValue=cfg2Tray6PaperSizeCurrentValue, cfgSidmFirmVersion=cfgSidmFirmVersion, cfg2YDimensionCurrentValue=cfg2YDimensionCurrentValue, genProtocolTable=genProtocolTable, cfgEscpCharacterSet=cfgEscpCharacterSet, cfgEpsonfxLeftMargine=cfgEpsonfxLeftMargine, genSysUpTimeString=genSysUpTimeString, cfg2Tray2A3PaperCurrentValue=cfg2Tray2A3PaperCurrentValue, cfgLang=cfgLang, stOnlineLedStatus=stOnlineLedStatus, cfg2Tray3MediaWeight=cfg2Tray3MediaWeight, outputJobLogEntry=outputJobLogEntry, nwPrinter2TrapMask=nwPrinter2TrapMask, cfgHiperwOkiFirstbit=cfgHiperwOkiFirstbit, cfgIbmpprCharacterPitch=cfgIbmpprCharacterPitch, cfg2PrinterInformation=cfg2PrinterInformation, tcpipLowBandwidth=tcpipLowBandwidth, cfgTrayEntry=cfgTrayEntry, usagePrinterUnitEntry=usagePrinterUnitEntry, snmpTrapMaskTable=snmpTrapMaskTable, cfg2Tray1MediaTypeCurrentValue=cfg2Tray1MediaTypeCurrentValue, tcpipNumLogicalPrinters=tcpipNumLogicalPrinters, cfgRs232c=cfgRs232c, tcpipGroupVersion=tcpipGroupVersion, snmpTrapEntry=snmpTrapEntry, cfgHiperwPrintSpeed=cfgHiperwPrintSpeed, usageDrumEntry=usageDrumEntry, tcpipMLPTCPPort=tcpipMLPTCPPort, eTalkName=eTalkName, trEarlyTokenRelease=trEarlyTokenRelease, cfgRamInstalledSize=cfgRamInstalledSize, tcpipWebAdminPassword=tcpipWebAdminPassword, nwPrintServerName=nwPrintServerName, cfgHdFirmVersion=cfgHdFirmVersion, cfgIbmpprFontCondense=cfgIbmpprFontCondense, cfgOkiPrintErrors=cfgOkiPrintErrors, snmpTrapMaskString=snmpTrapMaskString, cfg2PrinterVersion10Table=cfg2PrinterVersion10Table, cfg2=cfg2, cfgOkiCustomPaperLength=cfgOkiCustomPaperLength, cfg2JamRecovery=cfg2JamRecovery, cmdPrintConfig=cmdPrintConfig, outputCapabilities=outputCapabilities, nwGroupVersion=nwGroupVersion, trRouting=trRouting, bvPrintServiceStatusTable=bvPrintServiceStatusTable, cfg2Tray1MediaWeightCurrentValue=cfg2Tray1MediaWeightCurrentValue, cfg2PPCDevelopmentControl=cfg2PPCDevelopmentControl, outputTotalJobIndex=outputTotalJobIndex, trapPrinterPaperJam=trapPrinterPaperJam, outputBIDIStatusEnabled=outputBIDIStatusEnabled, tcpipMLPIndex=tcpipMLPIndex, genProtocolIndex=genProtocolIndex, cfg2Tray3MediaTypeCurrentValue=cfg2Tray3MediaTypeCurrentValue, tcpipSmtpOutputMask=tcpipSmtpOutputMask, cfgLocalTalk=cfgLocalTalk, nwPortNotification=nwPortNotification, nwPortPCLQueue=nwPortPCLQueue, cfg2XDimensionCurrentValue=cfg2XDimensionCurrentValue, cfg2Tray1PaperSizeCurrentValue=cfg2Tray1PaperSizeCurrentValue, cfgEconoMode=cfgEconoMode, bvJobSource=bvJobSource, genProtocolEntry=genProtocolEntry, cfg2Tray7A5A6Paper=cfg2Tray7A5A6Paper, cfg2Tray1Legal14Paper=cfg2Tray1Legal14Paper, cfg2PrintProcessControl=cfg2PrintProcessControl, cfg2StoragePartitionIndex=cfg2StoragePartitionIndex, tcpipSecurePrinterMask=tcpipSecurePrinterMask, cfgPclFirmVersion=cfgPclFirmVersion, cfg2Emulation=cfg2Emulation, trapPrinterOffline=trapPrinterOffline, cfgBiDirection=cfgBiDirection, tcpipTrapDestination=tcpipTrapDestination, cfg2Tray4PaperSize=cfg2Tray4PaperSize, cfg2PrinterVersion3Table=cfg2PrinterVersion3Table, cfg2PPCFusingControl=cfg2PPCFusingControl, cfg2PrinterType=cfg2PrinterType, cmdReset=cmdReset, outputRestoreDefaults=outputRestoreDefaults, cfgPageProtect=cfgPageProtect, cfgEscpKanjiFont=cfgEscpKanjiFont, tcpip=tcpip, cfgIntray2=cfgIntray2, tcpipSmtpPrinterMask=tcpipSmtpPrinterMask, driverGroupVersion=driverGroupVersion, eTalkConfigure=eTalkConfigure, tcpipTrapEntry=tcpipTrapEntry, cfg2TrayA5A6Paper=cfg2TrayA5A6Paper, cfgRs232cStopBits=cfgRs232cStopBits, printserver=printserver, nwPortFormNumber=nwPortFormNumber, cfgIbmpprTofPosition=cfgIbmpprTofPosition, tcpipTimeoutChecking=tcpipTimeoutChecking, cfg2BindingCurrentValue=cfg2BindingCurrentValue, usageDrumTable=usageDrumTable, cfg2Tray5Legal14PaperCurrentValue=cfg2Tray5Legal14PaperCurrentValue, tcpipSmtpProtocolMask=tcpipSmtpProtocolMask, tcpipPOP3PollInterval=tcpipPOP3PollInterval, trPriority=trPriority, bvJobNumber=bvJobNumber, bvJobActive=bvJobActive, cfg2Tray6MediaType=cfg2Tray6MediaType, cfg2OPPanelLock=cfg2OPPanelLock, cfg2Tray7Legal14PaperCurrentValue=cfg2Tray7Legal14PaperCurrentValue, genConfigurationDirty=genConfigurationDirty, cfg2Type1MIBVersion=cfg2Type1MIBVersion, outputConfigure=outputConfigure, tcpipSmtpServerAddr=tcpipSmtpServerAddr, nwTrapDestinationNet=nwTrapDestinationNet, cfgEscpTofPosition=cfgEscpTofPosition, outputCancelCurrentJob=outputCancelCurrentJob, tcpipUsingNetProtocols=tcpipUsingNetProtocols, cfg2Tray4PaperSizeCurrentValue=cfg2Tray4PaperSizeCurrentValue, tcpipMLPEntry=tcpipMLPEntry, tcpipConfigPassword=tcpipConfigPassword, cfgIbmpprLeftMargine=cfgIbmpprLeftMargine, cmdGroupVersion=cmdGroupVersion, eTalkZone=eTalkZone, fax=fax, tcpipMLPTable=tcpipMLPTable, nwPortPrinterNumber=nwPortPrinterNumber, bvRouting=bvRouting, cfg2Tray6PaperSize=cfg2Tray6PaperSize, nwFileServerTable=nwFileServerTable, snmpSetCommunityName=snmpSetCommunityName, lmEnabled=lmEnabled, cfg2Tray1PaperSize=cfg2Tray1PaperSize, genProtocolDescr=genProtocolDescr, cmdRestoreDefaults=cmdRestoreDefaults, cfg2Tray4Table=cfg2Tray4Table, cfg2Tray2A5A6PaperCurrentValue=cfg2Tray2A5A6PaperCurrentValue, cfg2Tray4A3Paper=cfg2Tray4A3Paper, cfgRs232cFlowControl=cfgRs232cFlowControl, cfg2Tray5MediaWeight=cfg2Tray5MediaWeight, outputIndex=outputIndex, nwNumTraps=nwNumTraps, nwFirmwareUpgrade=nwFirmwareUpgrade, cfgParallelSpeed=cfgParallelSpeed, cfg2Tray1Table=cfg2Tray1Table, outputName=outputName, bvPrintServiceTable=bvPrintServiceTable, outputGroupVersion=outputGroupVersion, trPacketSize=trPacketSize, usageWasteToner=usageWasteToner, cfgEscpZeroCharacter=cfgEscpZeroCharacter, mfp=mfp, cfgPclOkiLfFunction=cfgPclOkiLfFunction, cfg2Tray7Table=cfg2Tray7Table, cfg2PrinterVersion7Table=cfg2PrinterVersion7Table, nwPortFontDownload=nwPortFontDownload, printer=printer, cfgPrintProtect=cfgPrintProtect, stManualLedStatus=stManualLedStatus, outputJobLogTable=outputJobLogTable, cfgResolution=cfgResolution, genVersion=genVersion, cfg2PHInput=cfg2PHInput, usageDrumIndex=usageDrumIndex, outputTotalJobEntry=outputTotalJobEntry, tcpipNumTraps=tcpipNumTraps, nwStatus=nwStatus, cfgRet=cfgRet, usageTrayIndex=usageTrayIndex, snmpTrapCommunityName=snmpTrapCommunityName, snmpRestoreDefaults=snmpRestoreDefaults, cfg2StoragePartitionTable=cfg2StoragePartitionTable, psJetAdminEnabled=psJetAdminEnabled, cfgEpsonfxTofPosition=cfgEpsonfxTofPosition, cfg2Tray2MediaWeightCurrentValue=cfg2Tray2MediaWeightCurrentValue, psVendorId=psVendorId, tcpipCommands=tcpipCommands, tcpipWebCustomLinkName=tcpipWebCustomLinkName, niptype1=niptype1, cfgClearableWarnings=cfgClearableWarnings, cfgPlacePage=cfgPlacePage, cfg2PrinterVersion1Table=cfg2PrinterVersion1Table, cfg2PowerSave=cfg2PowerSave, cfgOkiCustomPaperWidth=cfgOkiCustomPaperWidth, bvPSStatus=bvPSStatus, niptype2=niptype2, usageTrayMaxLevel=usageTrayMaxLevel, usageTonerEntry=usageTonerEntry, outputStatus=outputStatus, tcpipSecureStartIPAddress=tcpipSecureStartIPAddress, cfg2PriorityTrayCurrentValue=cfg2PriorityTrayCurrentValue, cfgEpsonfxLinePitch=cfgEpsonfxLinePitch, cfg2PHCommon=cfg2PHCommon, tcpipWebUpdateURL=tcpipWebUpdateURL, genProtocolID=genProtocolID, outputPrinterModel=outputPrinterModel, eTalkCommands=eTalkCommands, usageDrumCurrentLevel=usageDrumCurrentLevel, cfg2Tray5A3PaperCurrentValue=cfg2Tray5A3PaperCurrentValue)
mibBuilder.exportSymbols("OKIDATA-MIB", nwTrapEntry=nwTrapEntry, cfg2PrinterVersion9Table=cfg2PrinterVersion9Table, usageFuser=usageFuser, stPjlStatus=stPjlStatus, tokenRing=tokenRing, cfg2ModelId=cfg2ModelId, genProtocols=genProtocols, cfgOkiPowerSaving=cfgOkiPowerSaving, cfgTrayTable=cfgTrayTable, cfg2Tray5A3Paper=cfg2Tray5A3Paper, cfg2PPCPrintPositionControl=cfg2PPCPrintPositionControl, genSerialNumber=genSerialNumber, cfgInTray1Size=cfgInTray1Size, usageTonerMaxLevel=usageTonerMaxLevel, bvPnicDescription=bvPnicDescription, bvStatus=bvStatus, cfgEpsonfxCharacterSet=cfgEpsonfxCharacterSet, nwPrinterTrapMask=nwPrinterTrapMask, usageDrumMaxLevel=usageDrumMaxLevel, genDateCode=genDateCode, tcpipRestoreDefaults=tcpipRestoreDefaults, cfgIbmpprWhitePageSkip=cfgIbmpprWhitePageSkip, psGroupVersion=psGroupVersion, nwPrintServerPassword=nwPrintServerPassword, driverRXPackets=driverRXPackets, cfgCopies=cfgCopies, cfg2PPCTonerControl=cfg2PPCTonerControl, driver=driver, tcpipPOP3UserName=tcpipPOP3UserName, cfg2Tray4Legal14Paper=cfg2Tray4Legal14Paper, nwDisableSAP=nwDisableSAP, cfgEmulationEntry=cfgEmulationEntry, trConfigure=trConfigure, cfgOkiJamRecovery=cfgOkiJamRecovery, tcpipWinsAddress=tcpipWinsAddress, cfg2TrayTable=cfg2TrayTable, cfg2AutoRegistration=cfg2AutoRegistration, tcpipMLPName=tcpipMLPName, tcpipSecurityIndex=tcpipSecurityIndex, cfg2Tray6A5A6PaperCurrentValue=cfg2Tray6A5A6PaperCurrentValue, cfgRs232cDataBits=cfgRs232cDataBits, cfgPclFontNumber=cfgPclFontNumber, tcpipNumSmtpDestinations=tcpipNumSmtpDestinations, outputDisplayMask=outputDisplayMask, cfg2Tray2Legal14PaperCurrentValue=cfg2Tray2Legal14PaperCurrentValue, bvFirmwareUpgrade=bvFirmwareUpgrade, peripheral=peripheral, cfgPersonality=cfgPersonality, cfg2PrinterVersion2Table=cfg2PrinterVersion2Table, bvConfigure=bvConfigure, cfg2PrinterVersion8=cfg2PrinterVersion8, bvCommands=bvCommands, cfgOkiIPrime=cfgOkiIPrime, psVendor=psVendor, cfg2Tray6A3Paper=cfg2Tray6A3Paper, cfg2PrinterVersion7=cfg2PrinterVersion7, cfgOkiYellowDarkness=cfgOkiYellowDarkness, usageTonerLevelUnit=usageTonerLevelUnit, cfg2Test=cfg2Test, cfgRs422Baud=cfgRs422Baud, outputProtocolManager=outputProtocolManager, cfgEscpAutoLf=cfgEscpAutoLf, snmpGetCommunityName=snmpGetCommunityName, tcpipTrapTable=tcpipTrapTable, tcpipWebAdminName=tcpipWebAdminName, cfgIbmpprFormLength=cfgIbmpprFormLength, cfgOkiMediaSourceTray3=cfgOkiMediaSourceTray3, cfgOkiMediaInTray2=cfgOkiMediaInTray2, tcpipTimeoutCheckingValue=tcpipTimeoutCheckingValue, nwNDSPacketCheckSumEnabled=nwNDSPacketCheckSumEnabled, cfg2Tray5PaperSizeCurrentValue=cfg2Tray5PaperSizeCurrentValue, eTalkActiveName=eTalkActiveName, tcpipCapabilities=tcpipCapabilities, cfgOkiAutoTraySwitch=cfgOkiAutoTraySwitch, outputOwner=outputOwner, cfgEmulationIndex=cfgEmulationIndex, cfg2TrayA3Paper=cfg2TrayA3Paper, tcpipBanners=tcpipBanners, cfg2PowerSaveShiftCurrentValue=cfg2PowerSaveShiftCurrentValue, bvLoginPassword=bvLoginPassword, usage=usage, cfgPrinterName=cfgPrinterName, bvPrintServiceIndex=bvPrintServiceIndex, eTalkPortEnable=eTalkPortEnable, cfg2Tray5PaperSize=cfg2Tray5PaperSize, cfg2Tray3MediaWeightCurrentValue=cfg2Tray3MediaWeightCurrentValue, tcpipArpInterval=tcpipArpInterval, cfg2Tray1Legal14PaperCurrentValue=cfg2Tray1Legal14PaperCurrentValue, outputTotalJobTable=outputTotalJobTable, cfg2Tray3PaperSize=cfg2Tray3PaperSize, eTalkPortEntry=eTalkPortEntry, outputConfigLanguage=outputConfigLanguage, cfg2Tray7PaperSize=cfg2Tray7PaperSize, tcpipEnabled=tcpipEnabled, cfgLowToner=cfgLowToner, outputSetting=outputSetting, cfg2Tray6A5A6Paper=cfg2Tray6A5A6Paper, cfg2Tray1A3PaperCurrentValue=cfg2Tray1A3PaperCurrentValue, cfg2UnitOfMeasureCurrentValue=cfg2UnitOfMeasureCurrentValue, cfgOkiPaperFeed=cfgOkiPaperFeed, cfgOrientation=cfgOrientation, nwError=nwError, cfgIbmpprCharacterSet=cfgIbmpprCharacterSet, cfgHiperwOkiDensity=cfgHiperwOkiDensity, outputPCLString=outputPCLString, tcpipPOP3ServerAddress=tcpipPOP3ServerAddress, cfgManualFeed=cfgManualFeed, cfgPaper=cfgPaper, cfgUsb=cfgUsb, nwJAConfig=nwJAConfig, cfg2PowerSaveCurrentValue=cfg2PowerSaveCurrentValue, outputCommandsEntry=outputCommandsEntry, cfg2StoragePartitionEntry=cfg2StoragePartitionEntry, cfgOkiResourceSave=cfgOkiResourceSave, tcpipIPAddress=tcpipIPAddress, cfgIbmpprSymbolSet=cfgIbmpprSymbolSet, cfg2PrinterVersion1=cfg2PrinterVersion1, tcpipMLPPostString=tcpipMLPPostString, outputJobLog=outputJobLog, cfgOkiFontProtection=cfgOkiFontProtection, okips=okips, nwNDSPrintServerName=nwNDSPrintServerName, eTalkType2=eTalkType2, cfg2Tray1MediaWeight=cfg2Tray1MediaWeight, genMIBVersion=genMIBVersion, cfgOkiAutoEject=cfgOkiAutoEject, cfgDuplex=cfgDuplex, cfgParallel=cfgParallel, cfg2Menu=cfg2Menu, cfgPclPitch=cfgPclPitch, cfg2Tray2MediaType=cfg2Tray2MediaType, cfgNetwork=cfgNetwork, usageTrayEntry=usageTrayEntry, cfgIbmpprLfFunction=cfgIbmpprLfFunction, usageFuserTable=usageFuserTable, nwTrapDestination=nwTrapDestination, cfg2OPPanelLockCurrentValue=cfg2OPPanelLockCurrentValue, tcpipDomainName=tcpipDomainName, cfgRs422Parity=cfgRs422Parity, tcpipWebUserPassword=tcpipWebUserPassword, eTalkStatus=eTalkStatus, trapNoPrinterAttached=trapNoPrinterAttached, cfgPclOkiA4PrintWidth=cfgPclOkiA4PrintWidth, tcpipSecureAdminEnabled=tcpipSecureAdminEnabled, cfg2Tray6Legal14PaperCurrentValue=cfg2Tray6Legal14PaperCurrentValue, cfgOkiPriorityTray=cfgOkiPriorityTray, driverTXPacketRetries=driverTXPacketRetries, usageFuserIndex=usageFuserIndex, nwNDSPreferredDSFileServer=nwNDSPreferredDSFileServer, usageToner=usageToner, cfg2Tray7MediaWeightCurrentValue=cfg2Tray7MediaWeightCurrentValue, usageTrayCounter=usageTrayCounter, outputCommandsTable=outputCommandsTable, cfg2Tray3Legal14PaperCurrentValue=cfg2Tray3Legal14PaperCurrentValue, cfg2PrinterConsumption=cfg2PrinterConsumption, outputEntry=outputEntry, cfgOkiMediaInTray3=cfgOkiMediaInTray3, outputPSString=outputPSString, bvPSDestination=bvPSDestination, cfgInTray5Size=cfgInTray5Size, bvDisableVPMan=bvDisableVPMan, nwPortPSQueue=nwPortPSQueue, psOutput=psOutput, genHWAddress=genHWAddress, cfgInTray3Size=cfgInTray3Size, bvRestoreDefaults=bvRestoreDefaults, cfgInTray4Size=cfgInTray4Size, cfg2Tray6MediaWeight=cfg2Tray6MediaWeight, nwFileServerEntry=nwFileServerEntry, outputCommands=outputCommands, cfgOkiJobSwitch=cfgOkiJobSwitch, cfg2Tray2MediaWeight=cfg2Tray2MediaWeight, cfg2Tray5Legal14Paper=cfg2Tray5Legal14Paper, tcpipWebFaqURL=tcpipWebFaqURL, cfgEscpCrFunction=cfgEscpCrFunction, bvPrintServiceRouting=bvPrintServiceRouting, trapPrinterDoorOpen=trapPrinterDoorOpen, cfgRs232cParity=cfgRs232cParity, stOnline=stOnline, cfg2Tray7A5A6PaperCurrentValue=cfg2Tray7A5A6PaperCurrentValue, eTalkError=eTalkError, cfg2Tray2PaperSizeCurrentValue=cfg2Tray2PaperSizeCurrentValue, nwFileServerConnectionStatus=nwFileServerConnectionStatus, cfgEpsonfxLineLength=cfgEpsonfxLineLength, usageTonerIndex=usageTonerIndex, genCompanyPhone=genCompanyPhone, psMibVersion=psMibVersion, cfg2Tray4A5A6PaperCurrentValue=cfg2Tray4A5A6PaperCurrentValue, cfgOkiMediaInTray4=cfgOkiMediaInTray4, cfg2MonoPrintSpeed=cfg2MonoPrintSpeed, cfgPclSymSet=cfgPclSymSet, cfg2OutputBin=cfg2OutputBin, cfg2Binding=cfg2Binding, cfg2Tray6MediaWeightCurrentValue=cfg2Tray6MediaWeightCurrentValue, cfg2Tray7A3Paper=cfg2Tray7A3Paper, nwFileServerIndex=nwFileServerIndex, printServers=printServers, cfg2Tray7PaperSizeCurrentValue=cfg2Tray7PaperSizeCurrentValue, cfgOkiRasterBuffer=cfgOkiRasterBuffer, cfg2Tray6A3PaperCurrentValue=cfg2Tray6A3PaperCurrentValue, bvLoginName=bvLoginName, cfgEmulationTable=cfgEmulationTable, cfg2ControltCurrentValue=cfg2ControltCurrentValue, cfg2JobOffset=cfg2JobOffset, cfg2Controlt=cfg2Controlt, psProtocols=psProtocols, driverTXPackets=driverTXPackets, cfg2Tray2MediaTypeCurrentValue=cfg2Tray2MediaTypeCurrentValue, cfg2Tray3PaperSizeCurrentValue=cfg2Tray3PaperSizeCurrentValue, bvEnabled=bvEnabled, bvPSName=bvPSName, lmGroupVersion=lmGroupVersion, cfg2PrinterVersion3=cfg2PrinterVersion3, trLocallyAdminAddr=trLocallyAdminAddr, cfg2General=cfg2General, netware=netware, tcpipSmtpEntry=tcpipSmtpEntry, cfg2Tray4MediaWeight=cfg2Tray4MediaWeight, stLcdMessage=stLcdMessage, cfg2UnitOfMeasure=cfg2UnitOfMeasure, nwSetFrameFormat=nwSetFrameFormat, cfg2PaperHandling=cfg2PaperHandling, cfg=cfg, trRestoreDefaults=trRestoreDefaults, cfg2OutputBinCurrentValue=cfg2OutputBinCurrentValue, snmpPrinterTrapMaskUsed=snmpPrinterTrapMaskUsed, cfg2PHOutput=cfg2PHOutput, cfgMptray=cfgMptray, tcpipPrinterTrapMask=tcpipPrinterTrapMask, cfgOkiMediaSourceFront=cfgOkiMediaSourceFront, cfg2AutoRegistrationCurrentValue=cfg2AutoRegistrationCurrentValue, nwPortIndex=nwPortIndex, cfg2PrinterVersions=cfg2PrinterVersions, tcpipSecurityTable=tcpipSecurityTable, tcpipSecureEndIPAddress=tcpipSecureEndIPAddress, cfg2JobOffsetCurrentValue=cfg2JobOffsetCurrentValue, snmpPrinter2TrapMaskUsed=snmpPrinter2TrapMaskUsed, usageBeltEntry=usageBeltEntry, cfg2Tray6Table=cfg2Tray6Table, stOperatorLedStatus=stOperatorLedStatus, usageBeltIndex=usageBeltIndex, nwTrapTable=nwTrapTable, usageOil=usageOil, cfg2Tray3A5A6Paper=cfg2Tray3A5A6Paper, cfg2Tray1A3Paper=cfg2Tray1A3Paper, cfg2Tray7A3PaperCurrentValue=cfg2Tray7A3PaperCurrentValue, cfgOkiMagentaDarkness=cfgOkiMagentaDarkness, nwConfigure=nwConfigure, usageTonerTable=usageTonerTable, trGroupVersion=trGroupVersion, cfgOkiQuietMode=cfgOkiQuietMode, cfg2Tray4MediaTypeCurrentValue=cfg2Tray4MediaTypeCurrentValue, tcpipWebHtttpPort=tcpipWebHtttpPort, cfg2Tray5MediaWeightCurrentValue=cfg2Tray5MediaWeightCurrentValue)
mibBuilder.exportSymbols("OKIDATA-MIB", stPsStatus=stPsStatus, cfg2PrinterVersion6=cfg2PrinterVersion6, stServiceLedStatus=stServiceLedStatus, sidm=sidm, cfgPclxlFirmVersion=cfgPclxlFirmVersion, genCompanyLoc=genCompanyLoc, cfg2Tray7MediaType=cfg2Tray7MediaType, tcpipMLPPreString=tcpipMLPPreString, cfg2PPCDrumControl=cfg2PPCDrumControl, cfg2Tray6Legal14Paper=cfg2Tray6Legal14Paper, cfgOkiColorAdjustCyan=cfgOkiColorAdjustCyan, usagePrinterUnitIndex=usagePrinterUnitIndex, cfg2Tray2Table=cfg2Tray2Table, usageTrayTable=usageTrayTable, nwNDSPacketSignatureLevel=nwNDSPacketSignatureLevel, eTalkGroupVersion=eTalkGroupVersion, cfgIbmpprCrFunction=cfgIbmpprCrFunction, bvPrintServiceName=bvPrintServiceName, usagePrinterUnit=usagePrinterUnit, cfg2Tray3A3Paper=cfg2Tray3A3Paper, cfg2DuplexCurrentValue=cfg2DuplexCurrentValue, usageBelt=usageBelt, cfg2LRCommon=cfg2LRCommon, genCompanyName=genCompanyName, cfg2TrayLegal14Paper=cfg2TrayLegal14Paper, nwPortTable=nwPortTable, usageTonerDescription=usageTonerDescription, cfgEscpLineLength=cfgEscpLineLength, cfgOkiUser=cfgOkiUser, nwDirectPrintEnabled=nwDirectPrintEnabled, eTalkEnabled=eTalkEnabled, outputExtendedStatus=outputExtendedStatus, eTalkType1=eTalkType1, nip=nip, tcpipIPAddressServerAddress=tcpipIPAddressServerAddress, outputPrinter=outputPrinter, tcpipRawPortNumber=tcpipRawPortNumber, tcpipDefaultGateway=tcpipDefaultGateway, cfg2Tray5MediaTypeCurrentValue=cfg2Tray5MediaTypeCurrentValue, cfgPsFirmVersion=cfgPsFirmVersion, outputPrinterDisplay=outputPrinterDisplay, cfg2Tray4MediaType=cfg2Tray4MediaType, cfg2LRHdd=cfg2LRHdd, nwOutputTrapMask=nwOutputTrapMask, outputTotalJobsLogged=outputTotalJobsLogged, cfgOkiCyanDarkness=cfgOkiCyanDarkness, outputHandshake=outputHandshake, cfg2Tray3A3PaperCurrentValue=cfg2Tray3A3PaperCurrentValue, cfgEpsonfxWhitePageSkip=cfgEpsonfxWhitePageSkip, usagePrinterUnitCounter=usagePrinterUnitCounter, genProductName=genProductName, usagePrinterUnitTable=usagePrinterUnitTable, cfgRs232cBusyTime=cfgRs232cBusyTime, usageBeltTable=usageBeltTable, driverChecksumErrors=driverChecksumErrors, usageTonerCurrentLevel=usageTonerCurrentLevel, eTalkActiveZone=eTalkActiveZone, cfg2PowerSaveShift=cfg2PowerSaveShift, cfg2Tray4A5A6Paper=cfg2Tray4A5A6Paper, tcpipOutputTrapMask=tcpipOutputTrapMask, cfgEpsonfxFormLength=cfgEpsonfxFormLength, nwEnabled=nwEnabled, cfg2PHDuplex=cfg2PHDuplex, trCommands=trCommands, cfgTrayName=cfgTrayName, tcpipPOP3Password=tcpipPOP3Password, snmpTrapMaskIndex=snmpTrapMaskIndex, okidata=okidata, usageFuserCurrentLevel=usageFuserCurrentLevel, nwMode=nwMode, cfg2Duplex=cfg2Duplex, cfgOkiColorAdjustYellow=cfgOkiColorAdjustYellow, cfgEngineFirmVersion=cfgEngineFirmVersion, tcpipIPAddressSource=tcpipIPAddressSource, trapPrinterError=trapPrinterError, genProductNumber=genProductNumber, bvJobSize=bvJobSize, usageBeltCurrentLevel=usageBeltCurrentLevel, eTalkNetwork=eTalkNetwork, tcpipSecurityEntry=tcpipSecurityEntry, cfgOkiPaperSizeCheck=cfgOkiPaperSizeCheck, driverRXPacketsUnavailable=driverRXPacketsUnavailable, nwQueueScanTime=nwQueueScanTime, cfgOkiMediaInTray5=cfgOkiMediaInTray5, cfg2Tray7MediaTypeCurrentValue=cfg2Tray7MediaTypeCurrentValue, cfgEpsonfxSymbolSet=cfgEpsonfxSymbolSet, genNumProtocols=genNumProtocols, nwAvailablePrintModes=nwAvailablePrintModes, cfg2Tray2A5A6Paper=cfg2Tray2A5A6Paper, tcpipDisplayMask=tcpipDisplayMask, trapPrinterPaperOut=trapPrinterPaperOut, nwMaxFileServers=nwMaxFileServers, nwTrapIndex=nwTrapIndex, cfg2PrinterVersion6Table=cfg2PrinterVersion6Table, cfg2HostInterface=cfg2HostInterface, nwPortEntry=nwPortEntry, outputAvailableTrapsMask=outputAvailableTrapsMask, cfgDensity=cfgDensity, cfg2Tray1MediaType=cfg2Tray1MediaType, cfgMessageVersion=cfgMessageVersion, lanManager=lanManager, bvJobTitle=bvJobTitle, cfg2JamRecoveryCurrentValue=cfg2JamRecoveryCurrentValue, tcpipSubnetMask=tcpipSubnetMask, cfgIbmpprLetterOStyle=cfgIbmpprLetterOStyle, nwFrameFormat=nwFrameFormat, okipsSNMPCommands=okipsSNMPCommands, usageFuserMaxLevel=usageFuserMaxLevel, trapPrinterOnline=trapPrinterOnline, cfgIbmpprLinePitch=cfgIbmpprLinePitch, cfgPclPtSize=cfgPclPtSize, tcpipMLPPort=tcpipMLPPort, tcpipSmtpEmailAddr=tcpipSmtpEmailAddr, cfg2Tray4Legal14PaperCurrentValue=cfg2Tray4Legal14PaperCurrentValue, cfgEpsonfxCrFunction=cfgEpsonfxCrFunction, stat=stat, cfgOkiColorAdjustPrint=cfgOkiColorAdjustPrint, cfg2Tray4A3PaperCurrentValue=cfg2Tray4A3PaperCurrentValue, cfg2Tray3A5A6PaperCurrentValue=cfg2Tray3A5A6PaperCurrentValue, tcpipWinsAddressSource=tcpipWinsAddressSource, snmpGroupVersion=snmpGroupVersion, cfg2Tray3Legal14Paper=cfg2Tray3Legal14Paper, cfg2Tray3Table=cfg2Tray3Table, cfg2JobControl=cfg2JobControl, usageBeltMaxLevel=usageBeltMaxLevel, cfgEscpZoom=cfgEscpZoom, bvGroupVersion=bvGroupVersion, cfgEpsonfxLetterOStyle=cfgEpsonfxLetterOStyle, cfgRs422=cfgRs422, cfg2Tray2PaperSize=cfg2Tray2PaperSize, trapPrinterTonerLow=trapPrinterTonerLow, psVerifyConfiguration=psVerifyConfiguration, tcpipNumSecurity=tcpipNumSecurity, bvSetSequenceRouting=bvSetSequenceRouting, cfgFirmCpuVersion=cfgFirmCpuVersion, bvNumPrintServices=bvNumPrintServices, cfgOkiXAdjust=cfgOkiXAdjust, cfgOkiReceiveBuffer=cfgOkiReceiveBuffer, cfg2PrinterVersion5Table=cfg2PrinterVersion5Table, tcpipStatus=tcpipStatus, bvError=bvError, eTalkNode=eTalkNode, cfg2MonoPrintSpeedCurrentValue=cfg2MonoPrintSpeedCurrentValue, tcpipSmtpIndex=tcpipSmtpIndex, cfgHiperwOkiReverse=cfgHiperwOkiReverse, cfg2Tray1A5A6Paper=cfg2Tray1A5A6Paper, nwPortStatus=nwPortStatus, tcpipPrinter2TrapMask=tcpipPrinter2TrapMask, cfgAutoCont=cfgAutoCont, bvPrinterStatus=bvPrinterStatus, bvPrintServiceEntry=bvPrintServiceEntry, tcpipFirmwareUpgrade=tcpipFirmwareUpgrade, outputTable=outputTable, cfg2Tray2A3Paper=cfg2Tray2A3Paper, genCompanyTechSupport=genCompanyTechSupport, cfgIntray3=cfgIntray3, cfg2PriorityTray=cfg2PriorityTray, general=general, cfgOkiEcp=cfgOkiEcp, cfg2Tray3MediaType=cfg2Tray3MediaType, cfgEmulationName=cfgEmulationName, cfg2PrinterVersion9=cfg2PrinterVersion9, cfg2Tray5A5A6Paper=cfg2Tray5A5A6Paper, cfgIbmpprLineLength=cfgIbmpprLineLength, cfgRs422StopBits=cfgRs422StopBits, nwNDSPreferredDSTree=nwNDSPreferredDSTree, tcpipWebUserName=tcpipWebUserName, cfg2Tray5Table=cfg2Tray5Table, nwCommands=nwCommands, cfgPclOkiWhitePageSkip=cfgPclOkiWhitePageSkip, tcpipSmtpTable=tcpipSmtpTable, commands=commands, cfgOkiColorAdjustMagenta=cfgOkiColorAdjustMagenta, cfgEpsonfxCharacterPitch=cfgEpsonfxCharacterPitch, outputNumLogEntries=outputNumLogEntries, eTalkPortTable=eTalkPortTable, cfgOkiYAdjust=cfgOkiYAdjust, cfg2Tray5A5A6PaperCurrentValue=cfg2Tray5A5A6PaperCurrentValue, cfg2Tray6MediaTypeCurrentValue=cfg2Tray6MediaTypeCurrentValue, cfg2StoragePartitionFree=cfg2StoragePartitionFree, nwRestoreDefaults=nwRestoreDefaults, cfg2PrinterVersion8Table=cfg2PrinterVersion8Table, cfg2Tray5MediaType=cfg2Tray5MediaType, genGroupVersion=genGroupVersion, outputStatusString=outputStatusString, cfg2LRMemory=cfg2LRMemory, cfgOkiDuplexAdjust=cfgOkiDuplexAdjust, nwFileServerName=nwFileServerName)
