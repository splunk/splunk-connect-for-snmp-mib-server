#
# PySNMP MIB module MX25-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MX25-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:06:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, enterprises, Integer32, Counter64, IpAddress, iso, Counter32, Gauge32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "Integer32", "Counter64", "IpAddress", "iso", "Counter32", "Gauge32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Bits", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500ContMX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6))
class DisplayString(OctetString):
    pass

cdx6500PPCTMX25PortTables = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4))
cdx6500PPCTMX25PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cdx6500PPCTMX25PortTable.setStatus('mandatory')
cdx6500PPCTMX25PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25pCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCTMX25PortEntry.setStatus('mandatory')
cdx6500mx25pCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCfgPortNum.setStatus('mandatory')
cdx6500mx25pSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("master", 0), ("slave", 1), ("newvalMaster", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pSubType.setStatus('mandatory')
cdx6500PPCTMX25MPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: cdx6500PPCTMX25MPortTable.setStatus('mandatory')
cdx6500PPCTMX25MPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25mpCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCTMX25MPortEntry.setStatus('mandatory')
cdx6500mx25mpCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpCfgPortNum.setStatus('mandatory')
cdx6500mx25mpSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 50))).clone(namedValues=NamedValues(("master", 0), ("newvalMaster", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpSubType.setStatus('mandatory')
cdx6500mx25mpClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpClockSource.setStatus('mandatory')
cdx6500mx25mpClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpClockSpeed.setStatus('mandatory')
cdx6500mx25mpStationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpStationCnt.setStatus('mandatory')
cdx6500mx25mpPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpPollTimer.setStatus('mandatory')
cdx6500mx25mpPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpPollPeriod.setStatus('mandatory')
cdx6500mx25mpTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpTries.setStatus('mandatory')
cdx6500mx25mpRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpRestartTimer.setStatus('mandatory')
cdx6500mx25mpResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpResetTimer.setStatus('mandatory')
cdx6500mx25mpCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpCallTimer.setStatus('mandatory')
cdx6500mx25mpClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpClearTimer.setStatus('mandatory')
cdx6500mx25mpPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpPortControl.setStatus('mandatory')
cdx6500mx25mpTXEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("nrz", 0), ("nrzi", 1), ("newvalNrz", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpTXEncoding.setStatus('mandatory')
cdx6500mx25mpElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpElectricalInterfaceType.setStatus('mandatory')
cdx6500mx25mpV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500mx25mpHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25mpHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPCTMX25SPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3), )
if mibBuilder.loadTexts: cdx6500PPCTMX25SPortTable.setStatus('mandatory')
cdx6500PPCTMX25SPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25spCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCTMX25SPortEntry.setStatus('mandatory')
cdx6500mx25spCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spCfgPortNum.setStatus('mandatory')
cdx6500mx25spSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spSubType.setStatus('mandatory')
cdx6500mx25spClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spClockSource.setStatus('mandatory')
cdx6500mx25spClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spClockSpeed.setStatus('mandatory')
cdx6500mx25spStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spStationAddress.setStatus('mandatory')
cdx6500mx25spPVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spPVCChannels.setStatus('mandatory')
cdx6500mx25spStartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spStartingPVC.setStatus('mandatory')
cdx6500mx25spSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spSVCChannels.setStatus('mandatory')
cdx6500mx25spStartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spStartingSVC.setStatus('mandatory')
cdx6500mx25spPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spPollTimer.setStatus('mandatory')
cdx6500mx25spTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spTries.setStatus('mandatory')
cdx6500mx25spFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spFrameWinSize.setStatus('mandatory')
cdx6500mx25spPacketWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spPacketWinSize.setStatus('mandatory')
cdx6500mx25spRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spRestartTimer.setStatus('mandatory')
cdx6500mx25spResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spResetTimer.setStatus('mandatory')
cdx6500mx25spCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spCallTimer.setStatus('mandatory')
cdx6500mx25spClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spClearTimer.setStatus('mandatory')
cdx6500mx25spMX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spMX25Options.setStatus('mandatory')
cdx6500mx25spRCDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spRCDestination.setStatus('mandatory')
cdx6500mx25spCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spCUG.setStatus('mandatory')
cdx6500mx25spBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spBillingRecords.setStatus('mandatory')
cdx6500mx25spPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spPortControl.setStatus('mandatory')
cdx6500mx25spTXEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("nrz", 0), ("nrzi", 1), ("newvalNrz", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spTXEncoding.setStatus('mandatory')
cdx6500mx25spUpperQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spUpperQueue.setStatus('mandatory')
cdx6500mx25spLowerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spLowerQueue.setStatus('mandatory')
cdx6500mx25spElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spElectricalInterfaceType.setStatus('mandatory')
cdx6500mx25spV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500mx25spHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25spHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTMX25PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: cdx6500PPSTMX25PortTable.setStatus('mandatory')
cdx6500PPSTMX25PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25pStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTMX25PortEntry.setStatus('mandatory')
cdx6500mx25pStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pStatsPortNum.setStatus('mandatory')
cdx6500mx25pPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pPortStatus.setStatus('mandatory')
cdx6500mx25pPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pPortSpeed.setStatus('mandatory')
cdx6500mx25pCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCharInTotal.setStatus('mandatory')
cdx6500mx25pCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCharOutTotal.setStatus('mandatory')
cdx6500mx25pCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCharsInPerSec.setStatus('mandatory')
cdx6500mx25pCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pCharsOutPerSec.setStatus('mandatory')
cdx6500mx25pFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pFrameInTotal.setStatus('mandatory')
cdx6500mx25pFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pFrameOutTotal.setStatus('mandatory')
cdx6500mx25pFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pFramesInPerSec.setStatus('mandatory')
cdx6500mx25pFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25pFramesOutPerSec.setStatus('mandatory')
cdx6500SPCTMX25StationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: cdx6500SPCTMX25StationTable.setStatus('mandatory')
cdx6500SPCTMX25StationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25sCfgPortNum"), (0, "MX25-OPT-MIB", "cdx6500mx25sCfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTMX25StationEntry.setStatus('mandatory')
cdx6500mx25sCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCfgPortNum.setStatus('mandatory')
cdx6500mx25sCfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCfgStationNum.setStatus('mandatory')
cdx6500mx25sStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStationAddress.setStatus('mandatory')
cdx6500mx25sPVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sPVCChannels.setStatus('mandatory')
cdx6500mx25sStartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStartingPVC.setStatus('mandatory')
cdx6500mx25sSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sSVCChannels.setStatus('mandatory')
cdx6500mx25sStartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStartingSVC.setStatus('mandatory')
cdx6500mx25sFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFrameWinSize.setStatus('mandatory')
cdx6500mx25sPacketWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sPacketWinSize.setStatus('mandatory')
cdx6500mx25sMX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sMX25Options.setStatus('mandatory')
cdx6500mx25sRCDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sRCDestination.setStatus('mandatory')
cdx6500mx25sCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCUG.setStatus('mandatory')
cdx6500mx25sBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sBillingRecords.setStatus('mandatory')
cdx6500mx25sUpperQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sUpperQueue.setStatus('mandatory')
cdx6500mx25sLowerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sLowerQueue.setStatus('mandatory')
cdx6500SPSTMX25StationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: cdx6500SPSTMX25StationTable.setStatus('mandatory')
cdx6500SPSTMX25StationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25sStatsPortNum"), (0, "MX25-OPT-MIB", "cdx6500mx25sStatsStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTMX25StationEntry.setStatus('mandatory')
cdx6500mx25sStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStatsPortNum.setStatus('mandatory')
cdx6500mx25sStatsStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStatsStationNum.setStatus('mandatory')
cdx6500mx25sStatsStnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sStatsStnAddr.setStatus('mandatory')
cdx6500mx25sCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCharInTotal.setStatus('mandatory')
cdx6500mx25sCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCharOutTotal.setStatus('mandatory')
cdx6500mx25sCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCharsInPerSec.setStatus('mandatory')
cdx6500mx25sCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCharsOutPerSec.setStatus('mandatory')
cdx6500mx25sFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFrameInTotal.setStatus('mandatory')
cdx6500mx25sFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFrameOutTotal.setStatus('mandatory')
cdx6500mx25sFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFramesInPerSec.setStatus('mandatory')
cdx6500mx25sFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sFramesOutPerSec.setStatus('mandatory')
cdx6500mx25sCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500mx25sCallCount.setStatus('mandatory')
cdx6500ContMX25StationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1), )
if mibBuilder.loadTexts: cdx6500ContMX25StationTable.setStatus('mandatory')
cdx6500ContMX25StationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1), ).setIndexNames((0, "MX25-OPT-MIB", "cdx6500mx25sContPortNum"), (0, "MX25-OPT-MIB", "cdx6500mx25sContStationNum"))
if mibBuilder.loadTexts: cdx6500ContMX25StationEntry.setStatus('mandatory')
cdx6500mx25sContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500mx25sContPortNum.setStatus('mandatory')
cdx6500mx25sContStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cdx6500mx25sContStationNum.setStatus('mandatory')
cdx6500mx25sContBootStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContBootStation.setStatus('mandatory')
cdx6500mx25sContDisableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContDisableStation.setStatus('mandatory')
cdx6500mx25sContEnableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContEnableStation.setStatus('mandatory')
cdx6500mx25sContBusyOutStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busyOut", 1), ("noBusyOut", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContBusyOutStation.setStatus('mandatory')
cdx6500mx25sContResetStnStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500mx25sContResetStnStats.setStatus('mandatory')
mibBuilder.exportSymbols("MX25-OPT-MIB", cdx6500mx25spClearTimer=cdx6500mx25spClearTimer, cdx6500mx25sContEnableStation=cdx6500mx25sContEnableStation, cdx6500mx25spBillingRecords=cdx6500mx25spBillingRecords, cdx6500mx25pCharsOutPerSec=cdx6500mx25pCharsOutPerSec, cdx6500mx25mpResetTimer=cdx6500mx25mpResetTimer, cdx6500mx25mpCallTimer=cdx6500mx25mpCallTimer, cdx6500mx25sContResetStnStats=cdx6500mx25sContResetStnStats, cdx6500mx25sLowerQueue=cdx6500mx25sLowerQueue, cdx6500mx25mpStationCnt=cdx6500mx25mpStationCnt, cdx6500mx25mpPortControl=cdx6500mx25mpPortControl, cdx6500mx25spRCDestination=cdx6500mx25spRCDestination, cdx6500mx25mpV24ElectricalInterfaceOption=cdx6500mx25mpV24ElectricalInterfaceOption, cdx6500mx25pFrameInTotal=cdx6500mx25pFrameInTotal, cdx6500mx25mpClockSpeed=cdx6500mx25mpClockSpeed, cdx6500mx25mpRestartTimer=cdx6500mx25mpRestartTimer, cdx6500mx25spStartingSVC=cdx6500mx25spStartingSVC, cdx6500mx25sCharOutTotal=cdx6500mx25sCharOutTotal, cdx6500mx25spTries=cdx6500mx25spTries, cdx6500mx25sStatsStationNum=cdx6500mx25sStatsStationNum, cdx6500Controls=cdx6500Controls, codex=codex, cdx6500mx25pCfgPortNum=cdx6500mx25pCfgPortNum, cdx6500mx25sCharsOutPerSec=cdx6500mx25sCharsOutPerSec, cdx6500PPCTMX25MPortEntry=cdx6500PPCTMX25MPortEntry, cdx6500=cdx6500, cdx6500mx25spUpperQueue=cdx6500mx25spUpperQueue, cdx6500mx25sFramesOutPerSec=cdx6500mx25sFramesOutPerSec, cdx6500mx25spSubType=cdx6500mx25spSubType, cdx6500mx25spPacketWinSize=cdx6500mx25spPacketWinSize, cdx6500mx25mpTries=cdx6500mx25mpTries, cdx6500mx25sFrameOutTotal=cdx6500mx25sFrameOutTotal, cdx6500ContMX25StationTable=cdx6500ContMX25StationTable, cdx6500mx25pSubType=cdx6500mx25pSubType, cdx6500mx25spFrameWinSize=cdx6500mx25spFrameWinSize, cdx6500mx25pFrameOutTotal=cdx6500mx25pFrameOutTotal, cdx6500PPCTMX25SPortTable=cdx6500PPCTMX25SPortTable, cdx6500mx25sPacketWinSize=cdx6500mx25sPacketWinSize, cdx6500SPSTMX25StationEntry=cdx6500SPSTMX25StationEntry, cdx6500mx25spHighSpeedElectricalInterfaceOption=cdx6500mx25spHighSpeedElectricalInterfaceOption, cdx6500mx25sContStationNum=cdx6500mx25sContStationNum, cdx6500mx25sCfgStationNum=cdx6500mx25sCfgStationNum, cdx6500mx25spStationAddress=cdx6500mx25spStationAddress, cdx6500mx25sStatsPortNum=cdx6500mx25sStatsPortNum, cdx6500mx25sStatsStnAddr=cdx6500mx25sStatsStnAddr, cdx6500PPCTMX25PortEntry=cdx6500PPCTMX25PortEntry, cdx6500mx25sStationAddress=cdx6500mx25sStationAddress, cdx6500mx25spElectricalInterfaceType=cdx6500mx25spElectricalInterfaceType, cdx6500mx25mpPollPeriod=cdx6500mx25mpPollPeriod, cdx6500mx25spSVCChannels=cdx6500mx25spSVCChannels, cdx6500Configuration=cdx6500Configuration, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500ContMX25=cdx6500ContMX25, cdx6500mx25mpCfgPortNum=cdx6500mx25mpCfgPortNum, cdx6500mx25sPVCChannels=cdx6500mx25sPVCChannels, cdx6500mx25spPollTimer=cdx6500mx25spPollTimer, cdx6500mx25pFramesInPerSec=cdx6500mx25pFramesInPerSec, cdx6500mx25spMX25Options=cdx6500mx25spMX25Options, cdx6500mx25sFrameInTotal=cdx6500mx25sFrameInTotal, DisplayString=DisplayString, cdx6500mx25spPVCChannels=cdx6500mx25spPVCChannels, cdx6500mx25sContDisableStation=cdx6500mx25sContDisableStation, cdx6500mx25sStartingPVC=cdx6500mx25sStartingPVC, cdx6500mx25spV24ElectricalInterfaceOption=cdx6500mx25spV24ElectricalInterfaceOption, cdx6500mx25pCharsInPerSec=cdx6500mx25pCharsInPerSec, cdx6500mx25spCUG=cdx6500mx25spCUG, cdx6500mx25mpHighSpeedElectricalInterfaceOption=cdx6500mx25mpHighSpeedElectricalInterfaceOption, cdx6500mx25sMX25Options=cdx6500mx25sMX25Options, cdx6500mx25sUpperQueue=cdx6500mx25sUpperQueue, cdx6500mx25mpTXEncoding=cdx6500mx25mpTXEncoding, cdx6500mx25mpClockSource=cdx6500mx25mpClockSource, cdx6500mx25pStatsPortNum=cdx6500mx25pStatsPortNum, cdx6500mx25sCharInTotal=cdx6500mx25sCharInTotal, cdx6500mx25spRestartTimer=cdx6500mx25spRestartTimer, cdx6500SPCTMX25StationTable=cdx6500SPCTMX25StationTable, cdx6500mx25spClockSource=cdx6500mx25spClockSource, cdx6500mx25spCallTimer=cdx6500mx25spCallTimer, cdx6500mx25sContPortNum=cdx6500mx25sContPortNum, cdx6500mx25pCharInTotal=cdx6500mx25pCharInTotal, cdx6500PPSTMX25PortTable=cdx6500PPSTMX25PortTable, cdx6500mx25pPortSpeed=cdx6500mx25pPortSpeed, cdx6500mx25mpSubType=cdx6500mx25mpSubType, cdx6500mx25pCharOutTotal=cdx6500mx25pCharOutTotal, cdx6500mx25sFramesInPerSec=cdx6500mx25sFramesInPerSec, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500ContMX25StationEntry=cdx6500ContMX25StationEntry, cdx6500mx25spPortControl=cdx6500mx25spPortControl, cdx6500mx25sStartingSVC=cdx6500mx25sStartingSVC, cdx6500PPCTMX25MPortTable=cdx6500PPCTMX25MPortTable, cdx6500mx25sRCDestination=cdx6500mx25sRCDestination, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500mx25sContBootStation=cdx6500mx25sContBootStation, cdx6500mx25mpClearTimer=cdx6500mx25mpClearTimer, cdx6500SPCTMX25StationEntry=cdx6500SPCTMX25StationEntry, cdx6500mx25sCallCount=cdx6500mx25sCallCount, cdx6500mx25spStartingPVC=cdx6500mx25spStartingPVC, cdx6500mx25mpPollTimer=cdx6500mx25mpPollTimer, cdx6500PPSTMX25PortEntry=cdx6500PPSTMX25PortEntry, cdx6500mx25pFramesOutPerSec=cdx6500mx25pFramesOutPerSec, cdx6500mx25sCharsInPerSec=cdx6500mx25sCharsInPerSec, cdx6500mx25sCfgPortNum=cdx6500mx25sCfgPortNum, cdx6500PPCTMX25PortTable=cdx6500PPCTMX25PortTable, cdx6500mx25sBillingRecords=cdx6500mx25sBillingRecords, cdx6500Statistics=cdx6500Statistics, cdx6500mx25mpElectricalInterfaceType=cdx6500mx25mpElectricalInterfaceType, cdx6500PPCTMX25SPortEntry=cdx6500PPCTMX25SPortEntry, cdx6500SPSTMX25StationTable=cdx6500SPSTMX25StationTable, cdx6500mx25spClockSpeed=cdx6500mx25spClockSpeed, cdx6500mx25sSVCChannels=cdx6500mx25sSVCChannels, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500PPCTMX25PortTables=cdx6500PPCTMX25PortTables, cdx6500mx25spCfgPortNum=cdx6500mx25spCfgPortNum, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500mx25sCUG=cdx6500mx25sCUG, cdxProductSpecific=cdxProductSpecific, cdx6500mx25spTXEncoding=cdx6500mx25spTXEncoding, cdx6500mx25spLowerQueue=cdx6500mx25spLowerQueue, cdx6500mx25pPortStatus=cdx6500mx25pPortStatus, cdx6500mx25sContBusyOutStation=cdx6500mx25sContBusyOutStation, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500mx25spResetTimer=cdx6500mx25spResetTimer, cdx6500mx25sFrameWinSize=cdx6500mx25sFrameWinSize)
