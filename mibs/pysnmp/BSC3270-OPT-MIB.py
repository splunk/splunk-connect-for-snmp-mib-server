#
# PySNMP MIB module BSC3270-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSC3270-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:24:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Counter64, IpAddress, TimeTicks, Integer32, enterprises, Gauge32, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Counter64", "IpAddress", "TimeTicks", "Integer32", "enterprises", "Gauge32", "Counter32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTBSC3270DeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTBSC3270PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10), )
if mibBuilder.loadTexts: cdx6500PPCTBSC3270PortTable.setStatus('mandatory')
cdx6500PPCTBSC3270PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1), ).setIndexNames((0, "BSC3270-OPT-MIB", "cdx6500BSC3270PortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTBSC3270PortEntry.setStatus('mandatory')
cdx6500BSC3270PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PortNumber.setStatus('mandatory')
cdx6500BSC3270PADType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("tpad", 0), ("hpad", 1), ("newvalTpad", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PADType.setStatus('mandatory')
cdx6500BSC3270ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270ClockSource.setStatus('mandatory')
cdx6500BSC3270ClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 19200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270ClockSpeed.setStatus('mandatory')
cdx6500BSC3270Contention = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("hdx", 0), ("fdx", 1), ("newvalHdx", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270Contention.setStatus('mandatory')
cdx6500BSC3270NumDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270NumDevices.setStatus('mandatory')
cdx6500BSC3270ServTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270ServTimer.setStatus('mandatory')
cdx6500BSC3270ErrThreshCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270ErrThreshCount.setStatus('mandatory')
cdx6500BSC3270ResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270ResponseTimeout.setStatus('mandatory')
cdx6500BSC3270HostPADTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270HostPADTimeout.setStatus('mandatory')
cdx6500BSC3270InterBuffTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270InterBuffTimeout.setStatus('mandatory')
cdx6500BSC3270IdleDevTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270IdleDevTimeout.setStatus('mandatory')
cdx6500BSC3270PrintDisconTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PrintDisconTimer.setStatus('mandatory')
cdx6500BSC3270SignonKey = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(241, 242, 243, 244, 245, 246, 247, 248, 249, 122, 123, 124, 193, 194, 195, 196, 197, 198, 199, 200, 201, 74, 75, 76))).clone(namedValues=NamedValues(("pf1", 241), ("pf2", 242), ("pf3", 243), ("pf4", 244), ("pf5", 245), ("pf6", 246), ("pf7", 247), ("pf8", 248), ("pf9", 249), ("pf10", 122), ("pf11", 123), ("pf12", 124), ("pf13", 193), ("pf14", 194), ("pf15", 195), ("pf16", 196), ("pf17", 197), ("pf18", 198), ("pf19", 199), ("pf20", 200), ("pf21", 201), ("pf22", 74), ("pf23", 75), ("pf24", 76)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270SignonKey.setStatus('mandatory')
cdx6500BSC3270DiscKey = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(241, 242, 243, 244, 245, 246, 247, 248, 249, 122, 123, 124, 193, 194, 195, 196, 197, 198, 199, 200, 201, 74, 75, 76))).clone(namedValues=NamedValues(("pf1", 241), ("pf2", 242), ("pf3", 243), ("pf4", 244), ("pf5", 245), ("pf6", 246), ("pf7", 247), ("pf8", 248), ("pf9", 249), ("pf10", 122), ("pf11", 123), ("pf12", 124), ("pf13", 193), ("pf14", 194), ("pf15", 195), ("pf16", 196), ("pf17", 197), ("pf18", 198), ("pf19", 199), ("pf20", 200), ("pf21", 201), ("pf22", 74), ("pf23", 75), ("pf24", 76)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DiscKey.setStatus('mandatory')
cdx6500BSC3270CharSet = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("ascii", 0), ("ebcdic", 1), ("newvalAscii", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270CharSet.setStatus('mandatory')
cdx6500BSC3270PortSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PortSubAddr.setStatus('mandatory')
cdx6500BSC3270PortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PortOptions.setStatus('mandatory')
cdx6500BSC3270RestrictConnDest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270RestrictConnDest.setStatus('mandatory')
cdx6500bsc3270ElectricalInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc3270ElectricalInterfaceType.setStatus('mandatory')
cdx6500bsc3270V24ElectricalInterfaceOption = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc3270V24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500bsc3270HighSpeedElectricalInterfaceOption = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc3270HighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PBCTBSC3270DevTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1), )
if mibBuilder.loadTexts: cdx6500PBCTBSC3270DevTable.setStatus('mandatory')
cdx6500PBCTBSC3270DevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1), ).setIndexNames((0, "BSC3270-OPT-MIB", "cdx6500BSC3270DevPortNumber"), (0, "BSC3270-OPT-MIB", "cdx6500BSC3270DevEntry"))
if mibBuilder.loadTexts: cdx6500PBCTBSC3270DevEntry.setStatus('mandatory')
cdx6500BSC3270DevPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DevPortNumber.setStatus('mandatory')
cdx6500BSC3270DevEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DevEntry.setStatus('mandatory')
cdx6500BSC3270BSCControlUnitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270BSCControlUnitAddr.setStatus('mandatory')
cdx6500BSC3270BSCDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270BSCDevAddr.setStatus('mandatory')
cdx6500BSC3270DSPDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("term", 0), ("prin", 1), ("newvalTerm", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DSPDevType.setStatus('mandatory')
cdx6500BSC3270DSPControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DSPControl.setStatus('mandatory')
cdx6500BSC3270DevControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DevControl.setStatus('mandatory')
cdx6500BSC3270DSPDevCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DSPDevCharacteristics.setStatus('mandatory')
cdx6500BSC3270DSPDevFormatSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 50))).clone(namedValues=NamedValues(("format480", 0), ("format960", 1), ("format1920", 2), ("format2650", 3), ("format3440", 4), ("format3564", 5), ("newvalFormat480", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DSPDevFormatSize.setStatus('mandatory')
cdx6500BSC3270DSPCharSetCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DSPCharSetCapability.setStatus('mandatory')
cdx6500BSC3270ConnReqMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270ConnReqMode.setStatus('mandatory')
cdx6500BSC3270DestControlUnitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DestControlUnitAddr.setStatus('mandatory')
cdx6500BSC3270DestDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DestDevAddr.setStatus('mandatory')
cdx6500BSC3270AutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270AutocallMnemonic.setStatus('mandatory')
cdx6500BSC3270DSPApplicationIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DSPApplicationIdent.setStatus('mandatory')
cdx6500BSC3270DSPCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("newvalNo", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270DSPCompatibility.setStatus('mandatory')
cdx6500BSC3270BillRec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270BillRec.setStatus('mandatory')
cdx6500BSC3270TrafficPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("lowPriority", 0), ("medPriority", 1), ("hiPriority", 2), ("xpPriority", 3), ("newvalLowPriority", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270TrafficPriority.setStatus('optional')
cdx6500PPSTBSC3270PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10), )
if mibBuilder.loadTexts: cdx6500PPSTBSC3270PortTable.setStatus('mandatory')
cdx6500PPSTBSC3270PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1), ).setIndexNames((0, "BSC3270-OPT-MIB", "cdx6500BSC3270StatPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTBSC3270PortEntry.setStatus('mandatory')
cdx6500BSC3270StatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270StatPortNumber.setStatus('mandatory')
cdx6500BSC3270PortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PortStatus.setStatus('mandatory')
cdx6500BSC3270PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PortState.setStatus('mandatory')
cdx6500BSC3270PortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PortSpeed.setStatus('mandatory')
cdx6500BSC3270PortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PortUtilIn.setStatus('mandatory')
cdx6500BSC3270PortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270PortUtilOut.setStatus('mandatory')
cdx6500BSC3270InMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270InMsgs.setStatus('mandatory')
cdx6500BSC3270OutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270OutMsgs.setStatus('mandatory')
cdx6500BSC3270InChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270InChars.setStatus('mandatory')
cdx6500BSC3270OutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270OutChars.setStatus('mandatory')
cdx6500BSC3270CharRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270CharRateIn.setStatus('mandatory')
cdx6500BSC3270CharRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270CharRateOut.setStatus('mandatory')
cdx6500BSC3270CrcBccErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270CrcBccErrs.setStatus('mandatory')
cdx6500BSC3270InPosAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270InPosAcks.setStatus('mandatory')
cdx6500BSC3270OutPosAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270OutPosAcks.setStatus('mandatory')
cdx6500BSC3270InNegAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270InNegAcks.setStatus('mandatory')
cdx6500BSC3270OutNegAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270OutNegAcks.setStatus('mandatory')
cdx6500BSC3270MsgRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270MsgRateIn.setStatus('mandatory')
cdx6500BSC3270MsgRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270MsgRateOut.setStatus('mandatory')
cdx6500BSC3270InEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270InEnq.setStatus('mandatory')
cdx6500BSC3270OutEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270OutEnq.setStatus('mandatory')
cdx6500BSC3270NumRetran = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSC3270NumRetran.setStatus('mandatory')
mibBuilder.exportSymbols("BSC3270-OPT-MIB", cdx6500BSC3270InMsgs=cdx6500BSC3270InMsgs, cdx6500BSC3270MsgRateIn=cdx6500BSC3270MsgRateIn, cdx6500=cdx6500, cdx6500BSC3270DSPDevFormatSize=cdx6500BSC3270DSPDevFormatSize, cdx6500BSC3270DevEntry=cdx6500BSC3270DevEntry, cdx6500BSC3270InNegAcks=cdx6500BSC3270InNegAcks, cdx6500BSC3270AutocallMnemonic=cdx6500BSC3270AutocallMnemonic, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500BSC3270DevPortNumber=cdx6500BSC3270DevPortNumber, cdx6500PPSTBSC3270PortEntry=cdx6500PPSTBSC3270PortEntry, cdx6500BSC3270StatPortNumber=cdx6500BSC3270StatPortNumber, cdx6500BSC3270DSPCharSetCapability=cdx6500BSC3270DSPCharSetCapability, cdx6500BSC3270ErrThreshCount=cdx6500BSC3270ErrThreshCount, cdx6500bsc3270ElectricalInterfaceType=cdx6500bsc3270ElectricalInterfaceType, cdx6500PPCTBSC3270PortEntry=cdx6500PPCTBSC3270PortEntry, cdx6500BSC3270DevControl=cdx6500BSC3270DevControl, cdx6500BSC3270PortNumber=cdx6500BSC3270PortNumber, cdx6500BSC3270OutEnq=cdx6500BSC3270OutEnq, codex=codex, cdx6500BSC3270PortUtilIn=cdx6500BSC3270PortUtilIn, cdx6500BSC3270CharRateOut=cdx6500BSC3270CharRateOut, cdx6500bsc3270V24ElectricalInterfaceOption=cdx6500bsc3270V24ElectricalInterfaceOption, cdx6500BSC3270ClockSource=cdx6500BSC3270ClockSource, cdx6500BSC3270NumRetran=cdx6500BSC3270NumRetran, cdx6500BSC3270DestControlUnitAddr=cdx6500BSC3270DestControlUnitAddr, cdx6500BSC3270SignonKey=cdx6500BSC3270SignonKey, cdx6500BSC3270OutNegAcks=cdx6500BSC3270OutNegAcks, cdx6500Statistics=cdx6500Statistics, cdx6500BSC3270DSPDevType=cdx6500BSC3270DSPDevType, cdx6500BSC3270PortState=cdx6500BSC3270PortState, cdx6500BSC3270CharRateIn=cdx6500BSC3270CharRateIn, cdx6500BSC3270BSCDevAddr=cdx6500BSC3270BSCDevAddr, cdx6500BSC3270CrcBccErrs=cdx6500BSC3270CrcBccErrs, cdx6500BSC3270TrafficPriority=cdx6500BSC3270TrafficPriority, cdx6500Controls=cdx6500Controls, cdx6500BSC3270RestrictConnDest=cdx6500BSC3270RestrictConnDest, cdx6500BSC3270IdleDevTimeout=cdx6500BSC3270IdleDevTimeout, cdx6500BSC3270OutChars=cdx6500BSC3270OutChars, cdx6500BSC3270DSPDevCharacteristics=cdx6500BSC3270DSPDevCharacteristics, cdx6500BSC3270InPosAcks=cdx6500BSC3270InPosAcks, cdx6500PBCTBSC3270DevEntry=cdx6500PBCTBSC3270DevEntry, cdx6500PCTBSC3270DeviceGroup=cdx6500PCTBSC3270DeviceGroup, cdx6500BSC3270DSPControl=cdx6500BSC3270DSPControl, cdx6500BSC3270ResponseTimeout=cdx6500BSC3270ResponseTimeout, cdx6500BSC3270InChars=cdx6500BSC3270InChars, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500PPSTBSC3270PortTable=cdx6500PPSTBSC3270PortTable, cdx6500BSC3270PortSpeed=cdx6500BSC3270PortSpeed, cdx6500BSC3270ConnReqMode=cdx6500BSC3270ConnReqMode, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500BSC3270PrintDisconTimer=cdx6500BSC3270PrintDisconTimer, cdx6500BSC3270DiscKey=cdx6500BSC3270DiscKey, cdx6500PPCTBSC3270PortTable=cdx6500PPCTBSC3270PortTable, cdx6500BSC3270NumDevices=cdx6500BSC3270NumDevices, cdx6500BSC3270InterBuffTimeout=cdx6500BSC3270InterBuffTimeout, cdx6500BSC3270PortOptions=cdx6500BSC3270PortOptions, cdx6500BSC3270ServTimer=cdx6500BSC3270ServTimer, cdx6500BSC3270PortUtilOut=cdx6500BSC3270PortUtilOut, cdx6500BSC3270PortStatus=cdx6500BSC3270PortStatus, cdx6500BSC3270BillRec=cdx6500BSC3270BillRec, cdx6500BSC3270MsgRateOut=cdx6500BSC3270MsgRateOut, cdx6500BSC3270HostPADTimeout=cdx6500BSC3270HostPADTimeout, cdx6500Configuration=cdx6500Configuration, cdx6500BSC3270OutPosAcks=cdx6500BSC3270OutPosAcks, cdx6500PBCTBSC3270DevTable=cdx6500PBCTBSC3270DevTable, DisplayString=DisplayString, cdx6500BSC3270PADType=cdx6500BSC3270PADType, cdx6500BSC3270DestDevAddr=cdx6500BSC3270DestDevAddr, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdxProductSpecific=cdxProductSpecific, cdx6500BSC3270Contention=cdx6500BSC3270Contention, cdx6500BSC3270DSPCompatibility=cdx6500BSC3270DSPCompatibility, cdx6500BSC3270DSPApplicationIdent=cdx6500BSC3270DSPApplicationIdent, cdx6500BSC3270BSCControlUnitAddr=cdx6500BSC3270BSCControlUnitAddr, cdx6500BSC3270InEnq=cdx6500BSC3270InEnq, cdx6500bsc3270HighSpeedElectricalInterfaceOption=cdx6500bsc3270HighSpeedElectricalInterfaceOption, cdx6500BSC3270OutMsgs=cdx6500BSC3270OutMsgs, cdx6500BSC3270ClockSpeed=cdx6500BSC3270ClockSpeed, cdx6500BSC3270PortSubAddr=cdx6500BSC3270PortSubAddr, cdx6500BSC3270CharSet=cdx6500BSC3270CharSet)
