#
# PySNMP MIB module HUAWEI-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-VLAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:37:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hwFrameIndex, hwConfigChangeIP, hwSlotIndex = mibBuilder.importSymbols("HUAWEI-DEVICE-MIB", "hwFrameIndex", "hwConfigChangeIP", "hwSlotIndex")
huaweiMgmt, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ObjectIdentity, NotificationType, Gauge32, MibIdentifier, iso, Unsigned32, Counter64, Counter32, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "NotificationType", "Gauge32", "MibIdentifier", "iso", "Unsigned32", "Counter64", "Counter32", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
hwVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 6))
hwVlan.setRevisions(('2015-08-07 10:00', '2015-04-13 00:00', '2015-01-22 10:00', '2014-12-24 10:00', '2014-12-23 10:00', '2014-11-24 10:00', '2014-11-13 10:00', '2014-09-26 10:00', '2014-08-30 10:00', '2014-08-15 10:00', '2014-07-20 10:00', '2014-06-23 10:00', '2014-05-08 10:00', '2014-04-22 10:00', '2014-01-15 10:00', '2013-12-13 10:00', '2013-10-29 10:00', '2013-08-02 10:00', '2013-09-14 10:00', '2013-02-01 10:00', '2013-01-18 10:00', '2012-11-13 10:00', '2012-10-29 10:00', '2012-08-13 10:00', '2012-06-15 10:00', '2012-03-07 00:00', '2012-01-30 10:00', '2011-09-21 00:00', '2011-07-15 10:00', '2011-04-01 10:00', '2011-03-25 10:00', '2011-02-11 10:00', '2011-01-24 10:00', '2010-12-13 00:00', '2010-11-24 10:00', '2010-11-19 10:00', '2010-07-03 10:00', '2010-06-21 10:00', '2010-06-20 10:00', '2010-06-10 10:00', '2010-06-07 10:00', '2010-05-18 10:00', '2010-04-26 10:00', '2010-03-22 10:00', '2010-03-18 10:00', '2010-02-11 10:00', '2010-01-25 10:00', '2010-01-11 10:00', '2010-01-08 10:00', '2009-12-03 00:00', '2009-11-16 00:00', '2009-02-20 00:00', '2007-12-20 00:00', '2007-04-23 00:00', '2005-12-13 00:00',))
if mibBuilder.loadTexts: hwVlan.setLastUpdated('201508071000Z')
if mibBuilder.loadTexts: hwVlan.setOrganization('Huawei Technologies Co.,Ltd.')
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class SnmpAdminString(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class PortList(TextualConvention, OctetString):
    status = 'current'

hwVlanMngObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1))
if mibBuilder.loadTexts: hwVlanMngObject.setStatus('current')
hwVlanMIBTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1), )
if mibBuilder.loadTexts: hwVlanMIBTable.setStatus('current')
hwVlanMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIndex"))
if mibBuilder.loadTexts: hwVlanMIBEntry.setStatus('current')
hwVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanIndex.setStatus('current')
hwVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanName.setStatus('current')
hwVlanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanPorts.setStatus('current')
hwVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("superVlan", 1), ("commonVlan", 2), ("subVlan", 3), ("primaryVlan", 4), ("secondaryVlan", 5), ("regionVlan", 6), ("smartVlan", 7), ("muxVlan", 8), ("multiVlan", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanType.setStatus('current')
hwVlanMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMacFilter.setStatus('current')
hwVlanMcastUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMcastUnknownProtos.setStatus('current')
hwExistInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExistInterface.setStatus('current')
hwVlanInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceIndex.setStatus('current')
hwVlanMacLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMacLearn.setStatus('current')
hwVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("dynamicGvrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanStatus.setStatus('current')
hwVlanCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanCreationTime.setStatus('current')
hwVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanPriority.setStatus('current')
hwVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVlanRowStatus.setStatus('current')
hwVlanAttrib = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("common", 1), ("qinq", 2), ("stacking", 3), ("subVlan", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanAttrib.setStatus('current')
hwVlanSuperID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanSuperID.setStatus('current')
hwVlanForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlanMac", 1), ("vlanConnect", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanForwarding.setStatus('current')
hwVlanPolicyBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanPolicyBroadcast.setStatus('current')
hwVlanPolicyMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanPolicyMulticast.setStatus('current')
hwVlanPolicyUnknowncast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanPolicyUnknowncast.setStatus('current')
hwVlanOuterTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanOuterTpid.setStatus('current')
hwVlanBindSrvProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanBindSrvProfName.setStatus('current')
hwVlanChangeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("addPort", 1), ("removePort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanChangeEnable.setStatus('current')
hwVlanBindRaioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanBindRaioProfileName.setStatus('current')
hwVlanTrafficSuppressUnknowncastNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanTrafficSuppressUnknowncastNetwork.setStatus('current')
hwVlanMethL2Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMethL2Forward.setStatus('current')
hwifSVLANVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 3), )
if mibBuilder.loadTexts: hwifSVLANVlanListTable.setStatus('current')
hwifSVLANVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 3, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwifSvlanVlanID"))
if mibBuilder.loadTexts: hwifSVLANVlanListEntry.setStatus('current')
hwifSvlanVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 3, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwifSvlanVlanID.setStatus('current')
hwifSvlanSubVlanlistLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifSvlanSubVlanlistLow.setStatus('current')
hwifSvlanSubVlanlisHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifSvlanSubVlanlisHigh.setStatus('current')
hwifSvlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwifSvlanOperStatus.setStatus('current')
hwifPVLANMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 4), )
if mibBuilder.loadTexts: hwifPVLANMappingTable.setStatus('current')
hwifPVLANMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 4, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwifPvlanPrimaryVlanID"))
if mibBuilder.loadTexts: hwifPVLANMappingEntry.setStatus('current')
hwifPvlanPrimaryVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 4, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwifPvlanPrimaryVlanID.setStatus('current')
hwifPvlanSecondaryVlanlistLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifPvlanSecondaryVlanlistLow.setStatus('current')
hwifPvlanSecondaryVlanlistHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifPvlanSecondaryVlanlistHigh.setStatus('current')
hwifPvlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwifPvlanOperStatus.setStatus('current')
hwRegionVLanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 5), )
if mibBuilder.loadTexts: hwRegionVLanTable.setStatus('current')
hwRegionVLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 5, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIndex"))
if mibBuilder.loadTexts: hwRegionVLanEntry.setStatus('current')
hwRegionVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRegionVpi.setStatus('current')
hwRegionVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRegionVci.setStatus('current')
hwRegionPVCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRegionPVCRowStatus.setStatus('current')
hwSmartVLanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 6), )
if mibBuilder.loadTexts: hwSmartVLanTable.setStatus('current')
hwSmartVLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 6, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwSmartVlanID"))
if mibBuilder.loadTexts: hwSmartVLanEntry.setStatus('current')
hwSmartVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 6, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSmartVlanID.setStatus('current')
hwSmartVlanUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 6, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSmartVlanUplinkPort.setStatus('current')
hwSmartVlanDownlinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 6, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSmartVlanDownlinkPort.setStatus('current')
hwSmartVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSmartVlanRowStatus.setStatus('current')
hwMuxVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMuxVlanEnable.setStatus('current')
hwMuxVlanPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 8), )
if mibBuilder.loadTexts: hwMuxVlanPortConfTable.setStatus('current')
hwMuxVlanPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hwMuxVlanPortConfEntry.setStatus('current')
hwMuxVlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uplinkPort", 1), ("cascadingPort", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMuxVlanPortType.setStatus('current')
hwMuxVlanStartVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 8, 1, 2), Integer32().clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMuxVlanStartVlanId.setStatus('current')
hwMuxVlanGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 8, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMuxVlanGroupNum.setStatus('current')
hwMuxVlanPortConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMuxVlanPortConfRowStatus.setStatus('current')
hwMuxVlanUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 8, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMuxVlanUplinkPort.setStatus('current')
hwMuxVlanDownlinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 8, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMuxVlanDownlinkPort.setStatus('current')
hwMuxVlanSlotConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 9), )
if mibBuilder.loadTexts: hwMuxVlanSlotConfTable.setStatus('current')
hwMuxVlanSlotConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 9, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwMuxVlanSlotConfEntry.setStatus('current')
hwMuxVlanSlotStartVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 9, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMuxVlanSlotStartVlanId.setStatus('current')
hwMuxVlanSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMuxVlanSlotRowStatus.setStatus('current')
hwMultiVLanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 10), )
if mibBuilder.loadTexts: hwMultiVLanTable.setStatus('current')
hwMultiVLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 10, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwMultiVlanID"))
if mibBuilder.loadTexts: hwMultiVLanEntry.setStatus('current')
hwMultiVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 10, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMultiVlanID.setStatus('current')
hwMultiVlanUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 10, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMultiVlanUplinkPort.setStatus('current')
hwMultiVlanDownlinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 10, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMultiVlanDownlinkPort.setStatus('current')
hwMultiVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMultiVlanRowStatus.setStatus('current')
hwVlanAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 11), )
if mibBuilder.loadTexts: hwVlanAggregationTable.setStatus('current')
hwVlanAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 11, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanAggregationSuperVlanId"), (0, "HUAWEI-VLAN-MIB", "hwVlanAggregationSubVlanId"))
if mibBuilder.loadTexts: hwVlanAggregationEntry.setStatus('current')
hwVlanAggregationSuperVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4093))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanAggregationSuperVlanId.setStatus('current')
hwVlanAggregationSubVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4093))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanAggregationSubVlanId.setStatus('current')
hwVlanAggregationSubVlanArpProxyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanAggregationSubVlanArpProxyStatus.setStatus('current')
hwVlanAggregationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVlanAggregationRowStatus.setStatus('current')
hwVlanAggregationSubVlanNdProxyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanAggregationSubVlanNdProxyStatus.setStatus('current')
hwStackingVlanInnerEthernetType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackingVlanInnerEthernetType.setStatus('current')
hwVlanUpCarTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 15), )
if mibBuilder.loadTexts: hwVlanUpCarTable.setStatus('current')
hwVlanUpCarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 15, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanUpCarId"))
if mibBuilder.loadTexts: hwVlanUpCarEntry.setStatus('current')
hwVlanUpCarId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanUpCarId.setStatus('current')
hwVlanUpCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanUpCarName.setStatus('current')
hwVlanUpCarBandValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1048512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanUpCarBandValue.setStatus('current')
hwVlanUpCarBurstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanUpCarBurstValue.setStatus('current')
hwVlanUpCarIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("noUsed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanUpCarIsUsed.setStatus('current')
hwVlanUpCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVlanUpCarRowStatus.setStatus('current')
hwVlanDownCarTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 16), )
if mibBuilder.loadTexts: hwVlanDownCarTable.setStatus('current')
hwVlanDownCarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 16, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanDownCarId"))
if mibBuilder.loadTexts: hwVlanDownCarEntry.setStatus('current')
hwVlanDownCarId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanDownCarId.setStatus('current')
hwVlanDownCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanDownCarName.setStatus('current')
hwVlanDownCarBandValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1048512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanDownCarBandValue.setStatus('current')
hwVlanDownCarBurstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanDownCarBurstValue.setStatus('current')
hwVlanDownCarIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("noUsed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanDownCarIsUsed.setStatus('current')
hwVlanDownCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVlanDownCarRowStatus.setStatus('current')
hwVlanParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 17), )
if mibBuilder.loadTexts: hwVlanParaTable.setStatus('current')
hwVlanParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 17, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanParaIndex"))
if mibBuilder.loadTexts: hwVlanParaEntry.setStatus('current')
hwVlanParaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 17, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanParaIndex.setStatus('current')
hwVlanMacLearnCpability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMacLearnCpability.setStatus('current')
hwVlanMaxMacLearnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMaxMacLearnNum.setStatus('current')
hwVlanUpDirectCarID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanUpDirectCarID.setStatus('current')
hwVlanDownDirectCarID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanDownDirectCarID.setStatus('current')
hwMethL2Vlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMethL2Vlan.setStatus('current')
hwDocsDefaultSrvVlanID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDocsDefaultSrvVlanID.setStatus('current')
hwStackingVlanOuterEthernetType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65000), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackingVlanOuterEthernetType.setStatus('current')
hwDot1adTpid = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65001), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1adTpid.setStatus('current')
hwPortOuterEthernetTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65002), )
if mibBuilder.loadTexts: hwPortOuterEthernetTypeTable.setStatus('current')
hwPortOuterEthernetTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65002, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hwPortOuterEthernetTypeEntry.setStatus('current')
hwPortOuterEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65002, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("invalid", -1), ("dot1qTpid", 1), ("dot1adTpid", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortOuterEthernetType.setStatus('current')
hwVlanLocalSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65003), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanLocalSwitch.setStatus('current')
hwLocalVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65004), )
if mibBuilder.loadTexts: hwLocalVlanTable.setStatus('current')
hwLocalVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65004, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIndex"))
if mibBuilder.loadTexts: hwLocalVlanEntry.setStatus('current')
hwLocalVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65004, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalVlan.setStatus('current')
hwVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2), )
if mibBuilder.loadTexts: hwVlanInterfaceTable.setStatus('current')
hwVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanInterfaceID"))
if mibBuilder.loadTexts: hwVlanInterfaceEntry.setStatus('current')
hwVlanInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceID.setStatus('current')
hwVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanID.setStatus('current')
hwVlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIpAddress.setStatus('current')
hwVlanIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIpAddressMask.setStatus('current')
hwVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanInterfaceAdminStatus.setStatus('current')
hwVlanInterfaceFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetii", 1), ("ethernetsnap", 2), ("ethernet8022", 3), ("ethernet8023", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanInterfaceFrameType.setStatus('current')
hwInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwInterfaceRowStatus.setStatus('current')
hwVlanInterfaceLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceLinkStatus.setStatus('current')
hwVlanIfIPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIfIPMode.setStatus('current')
hwVlanIfDhcpClientOption60 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIfDhcpClientOption60.setStatus('current')
hwVlanIfVlanEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleTag", 1), ("doubleTag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIfVlanEncapMode.setStatus('current')
hwVlanIfVlanInnerLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIfVlanInnerLabel.setStatus('current')
hwVlanIfDHCPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIfDHCPSStatus.setStatus('current')
hwIPv6MTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1280, 1499), ValueRangeConstraint(1501, 1560), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPv6MTU.setStatus('current')
hwIPv4MTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 1560), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPv4MTU.setStatus('current')
hwVlanInterfaceSubIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 22), )
if mibBuilder.loadTexts: hwVlanInterfaceSubIpAddrTable.setStatus('current')
hwVlanInterfaceSubIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 22, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanInterfaceIDWithSub"), (0, "HUAWEI-VLAN-MIB", "hwVlanSubIpAddress"), (0, "HUAWEI-VLAN-MIB", "hwVlanSubIpAddressMask"))
if mibBuilder.loadTexts: hwVlanInterfaceSubIpAddrEntry.setStatus('current')
hwVlanInterfaceIDWithSub = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceIDWithSub.setStatus('current')
hwVlanSubIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 22, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanSubIpAddress.setStatus('current')
hwVlanSubIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 22, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanSubIpAddressMask.setStatus('current')
hwInterfaceSubIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 22, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwInterfaceSubIpAddrRowStatus.setStatus('current')
hwPacketTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 21), )
if mibBuilder.loadTexts: hwPacketTunnelTable.setStatus('current')
hwPacketTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 21, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIndex"))
if mibBuilder.loadTexts: hwPacketTunnelEntry.setStatus('current')
hwPacketTunnelRip = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPacketTunnelRip.setStatus('current')
hwPacketTunnelVTPCDP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPacketTunnelVTPCDP.setStatus('current')
hwBpduTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 18), )
if mibBuilder.loadTexts: hwBpduTunnelTable.setStatus('current')
hwBpduTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 18, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIndex"))
if mibBuilder.loadTexts: hwBpduTunnelEntry.setStatus('current')
hwBpduTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnel.setStatus('current')
hwVOIPAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19), )
if mibBuilder.loadTexts: hwVOIPAddressTable.setStatus('current')
hwVOIPAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVOIPAddressIndex"))
if mibBuilder.loadTexts: hwVOIPAddressEntry.setStatus('current')
hwVOIPAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwVOIPAddressIndex.setStatus('current')
hwVOIPIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("media", 1), ("signaling", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVOIPIPType.setStatus('current')
hwVOIPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVOIPIPAddress.setStatus('current')
hwVOIPSubMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVOIPSubMask.setStatus('current')
hwVOIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVOIPGateway.setStatus('current')
hwVOIPMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVOIPMACAddress.setStatus('current')
hwVOIPVlanTagIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVOIPVlanTagIdentifier.setStatus('current')
hwVOIPQosIPStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tos", 1), ("dscp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVOIPQosIPStrategy.setStatus('current')
hwVOIPAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVOIPAddressRowStatus.setStatus('current')
hwVOIPAddressObtainMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("pppoe", 2), ("dhcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVOIPAddressObtainMode.setStatus('current')
hwVOIPPPPOEClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVOIPPPPOEClientName.setStatus('current')
hwVOIPIPAddressSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 19, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVOIPIPAddressSrc.setStatus('current')
hwVOIPQosTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 20), )
if mibBuilder.loadTexts: hwVOIPQosTable.setStatus('current')
hwVOIPQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 20, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVOIPAddressIndex"))
if mibBuilder.loadTexts: hwVOIPQosEntry.setStatus('current')
hwVOIPQosIPTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVOIPQosIPTosValue.setStatus('current')
hwVOIPQosIPDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVOIPQosIPDscpValue.setStatus('current')
hwVOIPQosVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVOIPQosVlanPriority.setStatus('current')
hwVOIPQosIPAddressSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVOIPQosIPAddressSrc.setStatus('current')
hwVlanSrvProfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25), )
if mibBuilder.loadTexts: hwVlanSrvProfTable.setStatus('current')
hwVlanSrvProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanSrvProfName"))
if mibBuilder.loadTexts: hwVlanSrvProfEntry.setStatus('current')
hwVlanSrvProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanSrvProfName.setStatus('current')
hwForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vlanMac", 1), ("vlanConnect", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwForwardingMode.setStatus('current')
hwAntiIpSpoofingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAntiIpSpoofingSwitch.setStatus('current')
hwAntiMacSpoofingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAntiMacSpoofingSwitch.setStatus('current')
hwPPPoEMacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("multiMac", 1), ("singleMac", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPPPoEMacMode.setStatus('current')
hwBpduTunnelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelSwitch.setStatus('current')
hwRipTunnelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRipTunnelSwitch.setStatus('current')
hwVtpCdpTunnelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVtpCdpTunnelSwitch.setStatus('current')
hwDhcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfig", 1), ("layer2", 2), ("l3Standard", 3), ("l3Option60", 4), ("l3MacRange", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpMode.setStatus('current')
hwDhcpProxySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpProxySwitch.setStatus('current')
hwDhcpOption82Switch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpOption82Switch.setStatus('current')
hwPitpSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPitpSwitch.setStatus('current')
hwPolicyBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPolicyBroadcast.setStatus('current')
hwPolicyMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPolicyMulticast.setStatus('current')
hwPolicyUnknowncast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPolicyUnknowncast.setStatus('current')
hwUserBridging = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserBridging.setStatus('current')
hwDhcpSuppressSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSuppressSwitch.setStatus('current')
hwMismatchIgmpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMismatchIgmpPolicy.setStatus('current')
hwVmacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVmacStatus.setStatus('current')
hwIPoEMacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multiMac", 1), ("singleMac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPoEMacMode.setStatus('current')
hwVmacAgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macLearning", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVmacAgingMode.setStatus('current')
hwFabricMacLearningSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFabricMacLearningSwitch.setStatus('current')
hwOspfTunnelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfTunnelSwitch.setStatus('current')
hwL3ProtocolTunnelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL3ProtocolTunnelSwitch.setStatus('current')
hwDhcpv6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfig", 1), ("layer2", 2), ("layer3", 3), ("layer3option16", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpv6Mode.setStatus('current')
hwDhcpv6OptionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpv6OptionSwitch.setStatus('current')
hwVmacIPoESubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVmacIPoESubStatus.setStatus('current')
hwVmacPPPoESubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVmacPPPoESubStatus.setStatus('current')
hwVmacPPPoASubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVmacPPPoASubStatus.setStatus('current')
hwPPPoAMacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("multiMac", 1), ("singleMac", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPPPoAMacMode.setStatus('current')
hwAntiIpv6SpoofingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAntiIpv6SpoofingSwitch.setStatus('current')
hwIpv6DadProxySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpv6DadProxySwitch.setStatus('current')
hwIpv6BindRouteAndNdSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpv6BindRouteAndNdSwitch.setStatus('current')
hwIpv6NsReplySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpv6NsReplySwitch.setStatus('current')
hwIpv4ArpReplySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpv4ArpReplySwitch.setStatus('current')
hwDhcpRelayInterfaceRelayAgentSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("receive", 1), ("send", 2), ("notConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpRelayInterfaceRelayAgentSwitch.setStatus('current')
hwPolicyMulticastFabric = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPolicyMulticastFabric.setStatus('current')
hwCableSourceVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCableSourceVerify.setStatus('current')
hwRipngTunnelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRipngTunnelSwitch.setStatus('current')
hwIpv4ArpUnicastSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpv4ArpUnicastSwitch.setStatus('current')
hwIpv4ArpUnicastunkonwnpolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpv4ArpUnicastunkonwnpolicy.setStatus('current')
hwIpv6NsUnicastSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpv6NsUnicastSwitch.setStatus('current')
hwIpv6NsUnicastunkonwnpolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpv6NsUnicastunkonwnpolicy.setStatus('current')
hwIgmpUserMaxVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unaware", 1), ("untag", 2), ("single", 3), ("double", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIgmpUserMaxVlanTag.setStatus('current')
hwRouterRedirectReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRouterRedirectReverse.setStatus('current')
hwCableIPv6SourceVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCableIPv6SourceVerify.setStatus('current')
hwProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 25, 1, 255), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwProfileRowStatus.setStatus('current')
hwSmartVlanIsolateSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSmartVlanIsolateSwitch.setStatus('current')
hwVlanIpAwareTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 27), )
if mibBuilder.loadTexts: hwVlanIpAwareTable.setStatus('current')
hwVlanIpAwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 27, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIpAwareVlanID"))
if mibBuilder.loadTexts: hwVlanIpAwareEntry.setStatus('current')
hwVlanIpAwareVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanIpAwareVlanID.setStatus('current')
hwVlanIpAwareVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 27, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIpAwareVrfName.setStatus('current')
hwVlanIpAwareRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 27, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVlanIpAwareRowStatus.setStatus('current')
hwVlanIpAwareSrcIPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clientIp", 1), ("virtualIp", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIpAwareSrcIPMode.setStatus('current')
hwVlanIpAwareArpSendPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIpAwareArpSendPeriod.setStatus('current')
hwIpAwareVirtualIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 28), )
if mibBuilder.loadTexts: hwIpAwareVirtualIPTable.setStatus('current')
hwIpAwareVirtualIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 28, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwIpAwareVirtualIPVlanID"), (0, "HUAWEI-VLAN-MIB", "hwIpAwareVirtualIP"), (0, "HUAWEI-VLAN-MIB", "hwIpAwareVirtualIPMask"))
if mibBuilder.loadTexts: hwIpAwareVirtualIPEntry.setStatus('current')
hwIpAwareVirtualIPVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpAwareVirtualIPVlanID.setStatus('current')
hwIpAwareVirtualIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 28, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpAwareVirtualIP.setStatus('current')
hwIpAwareVirtualIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 28, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpAwareVirtualIPMask.setStatus('current')
hwIpAwareVirtualIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 28, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpAwareVirtualIPRowStatus.setStatus('current')
hwIpAwareRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 29), )
if mibBuilder.loadTexts: hwIpAwareRouteTable.setStatus('current')
hwIpAwareRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 29, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwIpAwareRouteDstIP"), (0, "HUAWEI-VLAN-MIB", "hwIpAwareRouteMask"), (0, "HUAWEI-VLAN-MIB", "hwIpAwareRouteVlanID"))
if mibBuilder.loadTexts: hwIpAwareRouteEntry.setStatus('current')
hwIpAwareRouteDstIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 29, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpAwareRouteDstIP.setStatus('current')
hwIpAwareRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 29, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpAwareRouteMask.setStatus('current')
hwIpAwareRouteVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 29, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpAwareRouteVlanID.setStatus('current')
hwIpAwareRouteNexthopIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 29, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpAwareRouteNexthopIP.setStatus('current')
hwIpAwareRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 29, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpAwareRouteRowStatus.setStatus('current')
hwVlanFlowAccountTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14), )
if mibBuilder.loadTexts: hwVlanFlowAccountTable.setStatus('current')
hwVlanFlowAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIndex"), (0, "HUAWEI-VLAN-MIB", "hwInnerVlanID"))
if mibBuilder.loadTexts: hwVlanFlowAccountEntry.setStatus('current')
hwInnerVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInnerVlanID.setStatus('current')
hwUpFlowAccountByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUpFlowAccountByte.setStatus('current')
hwDownFlowAccountByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDownFlowAccountByte.setStatus('current')
hwUpFlowAccountPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUpFlowAccountPacket.setStatus('current')
hwDownFlowAccountPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDownFlowAccountPacket.setStatus('current')
hwUpStreamPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUpStreamPacket.setStatus('current')
hwDownStreamPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDownStreamPacket.setStatus('current')
hwFlowAccountAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("invalid", -1), ("reset", 0), ("resetAcl", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFlowAccountAdminStatus.setStatus('current')
hwUpFlowAccountDiscardPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUpFlowAccountDiscardPacket.setStatus('current')
hwDownFlowAccountDiscardPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 14, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDownFlowAccountDiscardPacket.setStatus('current')
hwVlanTrafficOccupiedTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65005), )
if mibBuilder.loadTexts: hwVlanTrafficOccupiedTable.setStatus('current')
hwVlanTrafficOccupiedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65005, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIndex"), (0, "HUAWEI-VLAN-MIB", "hwInnerVlanID"))
if mibBuilder.loadTexts: hwVlanTrafficOccupiedEntry.setStatus('current')
hwVlanUplinkTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65005, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanUplinkTraffic.setStatus('current')
hwVlanDownTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65005, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanDownTraffic.setStatus('current')
hwVlanUplinkBandwidthOccupancyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65005, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanUplinkBandwidthOccupancyRate.setStatus('current')
hwVlanDownBandwidthOccupancyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65005, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanDownBandwidthOccupancyRate.setStatus('current')
hwMplsVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65006), )
if mibBuilder.loadTexts: hwMplsVlanTable.setStatus('current')
hwMplsVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65006, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanIndex"))
if mibBuilder.loadTexts: hwMplsVlanEntry.setStatus('current')
hwMplsVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65006, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsVlanEnable.setStatus('current')
hwVlanConnectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007), )
if mibBuilder.loadTexts: hwVlanConnectTable.setStatus('current')
hwVlanConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVlanConnectOuterVlanID"), (0, "HUAWEI-VLAN-MIB", "hwVlanConnectInnerVlanID"))
if mibBuilder.loadTexts: hwVlanConnectEntry.setStatus('current')
hwVlanConnectOuterVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4095), )))
if mibBuilder.loadTexts: hwVlanConnectOuterVlanID.setStatus('current')
hwVlanConnectInnerVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4095), )))
if mibBuilder.loadTexts: hwVlanConnectInnerVlanID.setStatus('current')
hwVlanConnectSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, -1))).clone(namedValues=NamedValues(("port", 1), ("invalid", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanConnectSrcType.setStatus('current')
hwVlanConnectSrcPara = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanConnectSrcPara.setStatus('current')
hwVlanConnectDstType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, -1))).clone(namedValues=NamedValues(("port", 1), ("flow", 2), ("bundle", 3), ("invalid", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanConnectDstType.setStatus('current')
hwVlanConnectDstPara = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanConnectDstPara.setStatus('current')
hwVlanConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65007, 1, 255), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVlanConnectRowStatus.setStatus('current')
hwDoubleTagTunnelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65008))
hwDoubleTagTunnelIgmp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65008, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDoubleTagTunnelIgmp.setStatus('current')
hwDoubleTagTunnelRip = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65008, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDoubleTagTunnelRip.setStatus('current')
hwDoubleTagTunnelDhcp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65008, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDoubleTagTunnelDhcp.setStatus('current')
hwDocsSrvVlanIDTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65009), )
if mibBuilder.loadTexts: hwDocsSrvVlanIDTable.setStatus('current')
hwDocsSrvVlanIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65009, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwDocsSrvVlanIDEntry.setStatus('current')
hwDocsSrvVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65009, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDocsSrvVlanID.setStatus('current')
hwDocsSrvVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65009, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDocsSrvVlanRowStatus.setStatus('current')
hwVOIPDhcpQosTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 35), )
if mibBuilder.loadTexts: hwVOIPDhcpQosTable.setStatus('current')
hwVOIPDhcpQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 35, 1), ).setIndexNames((0, "HUAWEI-VLAN-MIB", "hwVOIPDhcpVlanID"), (0, "HUAWEI-VLAN-MIB", "hwVOIPDhcpQosType"))
if mibBuilder.loadTexts: hwVOIPDhcpQosEntry.setStatus('current')
hwVOIPDhcpVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: hwVOIPDhcpVlanID.setStatus('current')
hwVOIPDhcpQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: hwVOIPDhcpQosType.setStatus('current')
hwVOIPDhcpQosIPTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVOIPDhcpQosIPTos.setStatus('current')
hwVOIPDhcpQosIPDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 35, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVOIPDhcpQosIPDscp.setStatus('current')
hwVOIPDhcpQosVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 35, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVOIPDhcpQosVlanPriority.setStatus('current')
hwVOIPDhcpQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 35, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVOIPDhcpQosRowStatus.setStatus('current')
hwMethNativeVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 65010), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMethNativeVlan.setStatus('current')
hwVlanInterfaceTrapsVbOids = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 30))
hwL3InterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlanif", 1), ("meth", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL3InterfaceType.setStatus('current')
hwVlanifTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 31))
hwVlanifCommonTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 31, 1))
hwVlanifAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 31, 2))
hwVlanifAlarmTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 31, 2, 0))
hwVlanifUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 31, 2, 0, 1)).setObjects(("HUAWEI-VLAN-MIB", "hwL3InterfaceType"), ("HUAWEI-VLAN-MIB", "hwVlanID"))
if mibBuilder.loadTexts: hwVlanifUpTrap.setStatus('current')
hwVlanifDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 31, 2, 0, 2)).setObjects(("HUAWEI-VLAN-MIB", "hwL3InterfaceType"), ("HUAWEI-VLAN-MIB", "hwVlanID"))
if mibBuilder.loadTexts: hwVlanifDownTrap.setStatus('current')
hwVlanCfgTrapsVbOids = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 32))
hwVlanList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 32, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVlanList.setStatus('current')
hwVlanSrvProfOperType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 32, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("modify", 2), ("delete", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVlanSrvProfOperType.setStatus('current')
hwVlanListType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 32, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("superVlan", 1), ("commonVlan", 2), ("subVlan", 3), ("primaryVlan", 4), ("secondaryVlan", 5), ("regionVlan", 6), ("smartVlan", 7), ("muxVlan", 8), ("multiVlan", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVlanListType.setStatus('current')
hwVlanListAttrib = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 32, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("common", 1), ("qinq", 2), ("stacking", 3), ("subVlan", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVlanListAttrib.setStatus('current')
hwVlanCfgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33))
hwVlanCfgCommonTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1))
hwVlanCfgCommonTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0))
hwVlanNameChangeInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0, 1)).setObjects(("HUAWEI-DEVICE-MIB", "hwConfigChangeIP"), ("HUAWEI-VLAN-MIB", "hwVlanIndex"), ("HUAWEI-VLAN-MIB", "hwVlanName"))
if mibBuilder.loadTexts: hwVlanNameChangeInfoTrap.setStatus('current')
hwVlanForwardingModeInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0, 2)).setObjects(("HUAWEI-DEVICE-MIB", "hwConfigChangeIP"), ("HUAWEI-VLAN-MIB", "hwVlanIndex"), ("HUAWEI-VLAN-MIB", "hwVlanForwarding"))
if mibBuilder.loadTexts: hwVlanForwardingModeInfoTrap.setStatus('current')
hwVlanSrvProfChageInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0, 3)).setObjects(("HUAWEI-DEVICE-MIB", "hwConfigChangeIP"), ("HUAWEI-VLAN-MIB", "hwVlanSrvProfName"), ("HUAWEI-VLAN-MIB", "hwVlanSrvProfOperType"))
if mibBuilder.loadTexts: hwVlanSrvProfChageInfoTrap.setStatus('current')
hwVlanAndVlanSrvProfOperInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0, 4)).setObjects(("HUAWEI-DEVICE-MIB", "hwConfigChangeIP"), ("HUAWEI-VLAN-MIB", "hwVlanList"), ("HUAWEI-VLAN-MIB", "hwVlanSrvProfName"))
if mibBuilder.loadTexts: hwVlanAndVlanSrvProfOperInfoTrap.setStatus('current')
hwVlanAddInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0, 5)).setObjects(("HUAWEI-DEVICE-MIB", "hwConfigChangeIP"), ("HUAWEI-VLAN-MIB", "hwVlanList"), ("HUAWEI-VLAN-MIB", "hwVlanListType"), ("HUAWEI-VLAN-MIB", "hwVlanListAttrib"))
if mibBuilder.loadTexts: hwVlanAddInfoTrap.setStatus('current')
hwVlanDelInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0, 6)).setObjects(("HUAWEI-DEVICE-MIB", "hwConfigChangeIP"), ("HUAWEI-VLAN-MIB", "hwVlanList"))
if mibBuilder.loadTexts: hwVlanDelInfoTrap.setStatus('current')
hwVlanAttrChangedInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0, 7)).setObjects(("HUAWEI-DEVICE-MIB", "hwConfigChangeIP"), ("HUAWEI-VLAN-MIB", "hwVlanList"), ("HUAWEI-VLAN-MIB", "hwVlanListAttrib"))
if mibBuilder.loadTexts: hwVlanAttrChangedInfoTrap.setStatus('current')
hwPortVlanChangedInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 6, 1, 33, 1, 0, 8)).setObjects(("HUAWEI-DEVICE-MIB", "hwConfigChangeIP"), ("HUAWEI-VLAN-MIB", "hwVlanList"))
if mibBuilder.loadTexts: hwPortVlanChangedInfoTrap.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-VLAN-MIB", hwVOIPIPAddress=hwVOIPIPAddress, hwVlanUplinkTraffic=hwVlanUplinkTraffic, hwVOIPGateway=hwVOIPGateway, hwMultiVLanEntry=hwMultiVLanEntry, hwRipTunnelSwitch=hwRipTunnelSwitch, hwDoubleTagTunnelDhcp=hwDoubleTagTunnelDhcp, hwRouterRedirectReverse=hwRouterRedirectReverse, hwVlanPorts=hwVlanPorts, hwVOIPPPPOEClientName=hwVOIPPPPOEClientName, hwVlanUplinkBandwidthOccupancyRate=hwVlanUplinkBandwidthOccupancyRate, hwVlanIfDHCPSStatus=hwVlanIfDHCPSStatus, hwVlanifTraps=hwVlanifTraps, hwDownFlowAccountByte=hwDownFlowAccountByte, hwVlanIpAwareArpSendPeriod=hwVlanIpAwareArpSendPeriod, SnmpAdminString=SnmpAdminString, hwVlanIpAwareVlanID=hwVlanIpAwareVlanID, hwVlanSrvProfChageInfoTrap=hwVlanSrvProfChageInfoTrap, hwVlanIpAwareEntry=hwVlanIpAwareEntry, hwMuxVlanEnable=hwMuxVlanEnable, hwVOIPAddressObtainMode=hwVOIPAddressObtainMode, hwL3InterfaceType=hwL3InterfaceType, hwPortOuterEthernetType=hwPortOuterEthernetType, VlanIndex=VlanIndex, hwVOIPDhcpQosVlanPriority=hwVOIPDhcpQosVlanPriority, hwPitpSwitch=hwPitpSwitch, hwDownStreamPacket=hwDownStreamPacket, hwifSVLANVlanListEntry=hwifSVLANVlanListEntry, hwStackingVlanInnerEthernetType=hwStackingVlanInnerEthernetType, hwMuxVlanSlotConfTable=hwMuxVlanSlotConfTable, hwVlanFlowAccountTable=hwVlanFlowAccountTable, hwPolicyBroadcast=hwPolicyBroadcast, hwVmacIPoESubStatus=hwVmacIPoESubStatus, hwCableIPv6SourceVerify=hwCableIPv6SourceVerify, hwVlanConnectSrcPara=hwVlanConnectSrcPara, hwVlanAttrChangedInfoTrap=hwVlanAttrChangedInfoTrap, hwVlanBindRaioProfileName=hwVlanBindRaioProfileName, hwVOIPQosEntry=hwVOIPQosEntry, hwSmartVlanUplinkPort=hwSmartVlanUplinkPort, hwVlanList=hwVlanList, hwVlanType=hwVlanType, hwForwardingMode=hwForwardingMode, hwMultiVlanID=hwMultiVlanID, hwVlanInterfaceAdminStatus=hwVlanInterfaceAdminStatus, hwVlanifCommonTraps=hwVlanifCommonTraps, hwDocsSrvVlanIDTable=hwDocsSrvVlanIDTable, hwVOIPIPType=hwVOIPIPType, hwDhcpv6Mode=hwDhcpv6Mode, hwVlanDownCarIsUsed=hwVlanDownCarIsUsed, hwVlanTrafficSuppressUnknowncastNetwork=hwVlanTrafficSuppressUnknowncastNetwork, hwIpAwareRouteNexthopIP=hwIpAwareRouteNexthopIP, hwVlanMacFilter=hwVlanMacFilter, hwVlanAddInfoTrap=hwVlanAddInfoTrap, hwUpFlowAccountByte=hwUpFlowAccountByte, hwBpduTunnelSwitch=hwBpduTunnelSwitch, hwVlanInterfaceSubIpAddrTable=hwVlanInterfaceSubIpAddrTable, hwSmartVlanIsolateSwitch=hwSmartVlanIsolateSwitch, PYSNMP_MODULE_ID=hwVlan, hwVlanUpCarName=hwVlanUpCarName, hwVlanifDownTrap=hwVlanifDownTrap, hwUpStreamPacket=hwUpStreamPacket, hwPacketTunnelVTPCDP=hwPacketTunnelVTPCDP, hwifPVLANMappingEntry=hwifPVLANMappingEntry, hwVOIPQosIPStrategy=hwVOIPQosIPStrategy, hwMuxVlanPortType=hwMuxVlanPortType, hwVOIPVlanTagIdentifier=hwVOIPVlanTagIdentifier, hwVlanInterfaceTable=hwVlanInterfaceTable, hwDoubleTagTunnelIgmp=hwDoubleTagTunnelIgmp, hwVlanInterfaceLinkStatus=hwVlanInterfaceLinkStatus, hwSmartVLanTable=hwSmartVLanTable, hwVlanSrvProfEntry=hwVlanSrvProfEntry, hwVlanSrvProfOperType=hwVlanSrvProfOperType, hwVlanConnectSrcType=hwVlanConnectSrcType, hwDhcpProxySwitch=hwDhcpProxySwitch, hwVlanConnectInnerVlanID=hwVlanConnectInnerVlanID, hwVlanConnectDstType=hwVlanConnectDstType, hwVOIPSubMask=hwVOIPSubMask, hwVOIPAddressRowStatus=hwVOIPAddressRowStatus, hwVlanDownBandwidthOccupancyRate=hwVlanDownBandwidthOccupancyRate, hwBpduTunnel=hwBpduTunnel, hwVlanMngObject=hwVlanMngObject, hwVlanDownCarBurstValue=hwVlanDownCarBurstValue, hwVlanName=hwVlanName, hwIPoEMacMode=hwIPoEMacMode, hwAntiIpv6SpoofingSwitch=hwAntiIpv6SpoofingSwitch, hwDownFlowAccountPacket=hwDownFlowAccountPacket, hwVOIPQosIPTosValue=hwVOIPQosIPTosValue, hwVlanMacLearnCpability=hwVlanMacLearnCpability, hwVlanTrafficOccupiedEntry=hwVlanTrafficOccupiedEntry, hwVlanPolicyMulticast=hwVlanPolicyMulticast, hwifSvlanVlanID=hwifSvlanVlanID, hwMethNativeVlan=hwMethNativeVlan, hwVlanIpAwareRowStatus=hwVlanIpAwareRowStatus, hwVlanNameChangeInfoTrap=hwVlanNameChangeInfoTrap, hwVlanCfgTraps=hwVlanCfgTraps, hwVlanAggregationSubVlanId=hwVlanAggregationSubVlanId, hwPortVlanChangedInfoTrap=hwPortVlanChangedInfoTrap, hwMuxVlanSlotStartVlanId=hwMuxVlanSlotStartVlanId, hwIPv6MTU=hwIPv6MTU, hwVOIPDhcpVlanID=hwVOIPDhcpVlanID, hwVlanCfgCommonTrapsPrefix=hwVlanCfgCommonTrapsPrefix, hwifSvlanSubVlanlistLow=hwifSvlanSubVlanlistLow, PortList=PortList, hwVlanSrvProfName=hwVlanSrvProfName, hwMuxVlanGroupNum=hwMuxVlanGroupNum, hwVlan=hwVlan, hwVOIPMACAddress=hwVOIPMACAddress, hwMuxVlanSlotRowStatus=hwMuxVlanSlotRowStatus, hwBpduTunnelTable=hwBpduTunnelTable, hwVlanParaTable=hwVlanParaTable, hwExistInterface=hwExistInterface, hwMuxVlanDownlinkPort=hwMuxVlanDownlinkPort, hwRegionVLanEntry=hwRegionVLanEntry, hwPolicyMulticastFabric=hwPolicyMulticastFabric, hwVlanUpCarBurstValue=hwVlanUpCarBurstValue, hwVtpCdpTunnelSwitch=hwVtpCdpTunnelSwitch, hwIpAwareVirtualIPEntry=hwIpAwareVirtualIPEntry, hwVOIPAddressEntry=hwVOIPAddressEntry, hwAntiIpSpoofingSwitch=hwAntiIpSpoofingSwitch, hwIpAwareVirtualIPVlanID=hwIpAwareVirtualIPVlanID, hwVlanDownCarRowStatus=hwVlanDownCarRowStatus, hwVlanChangeEnable=hwVlanChangeEnable, hwVlanifUpTrap=hwVlanifUpTrap, hwBpduTunnelEntry=hwBpduTunnelEntry, hwIgmpUserMaxVlanTag=hwIgmpUserMaxVlanTag, hwVlanStatus=hwVlanStatus, hwDownFlowAccountDiscardPacket=hwDownFlowAccountDiscardPacket, hwVlanDownCarEntry=hwVlanDownCarEntry, hwVlanSubIpAddressMask=hwVlanSubIpAddressMask, hwVOIPDhcpQosIPDscp=hwVOIPDhcpQosIPDscp, hwProfileRowStatus=hwProfileRowStatus, hwVOIPQosIPAddressSrc=hwVOIPQosIPAddressSrc, hwVlanAggregationSubVlanNdProxyStatus=hwVlanAggregationSubVlanNdProxyStatus, hwVOIPDhcpQosIPTos=hwVOIPDhcpQosIPTos, hwIpAwareRouteVlanID=hwIpAwareRouteVlanID, hwVOIPQosIPDscpValue=hwVOIPQosIPDscpValue, hwOspfTunnelSwitch=hwOspfTunnelSwitch, hwMplsVlanEntry=hwMplsVlanEntry, hwifSVLANVlanListTable=hwifSVLANVlanListTable, hwSmartVlanRowStatus=hwSmartVlanRowStatus, hwVlanIfDhcpClientOption60=hwVlanIfDhcpClientOption60, hwMultiVlanUplinkPort=hwMultiVlanUplinkPort, hwIpAwareRouteEntry=hwIpAwareRouteEntry, hwVlanSuperID=hwVlanSuperID, hwLocalVlan=hwLocalVlan, hwIpv4ArpUnicastunkonwnpolicy=hwIpv4ArpUnicastunkonwnpolicy, hwIpAwareRouteTable=hwIpAwareRouteTable, hwVlanAndVlanSrvProfOperInfoTrap=hwVlanAndVlanSrvProfOperInfoTrap, hwIpv6NsReplySwitch=hwIpv6NsReplySwitch, hwVlanDelInfoTrap=hwVlanDelInfoTrap, hwVlanConnectTable=hwVlanConnectTable, hwVlanAggregationRowStatus=hwVlanAggregationRowStatus, hwIpAwareRouteRowStatus=hwIpAwareRouteRowStatus, hwSmartVlanDownlinkPort=hwSmartVlanDownlinkPort, hwLocalVlanTable=hwLocalVlanTable, hwVlanPriority=hwVlanPriority, hwVlanDownCarBandValue=hwVlanDownCarBandValue, hwVlanInterfaceFrameType=hwVlanInterfaceFrameType, hwVlanRowStatus=hwVlanRowStatus, hwVlanDownCarTable=hwVlanDownCarTable, hwFabricMacLearningSwitch=hwFabricMacLearningSwitch, hwVlanFlowAccountEntry=hwVlanFlowAccountEntry, hwMuxVlanUplinkPort=hwMuxVlanUplinkPort, hwVlanIpAddress=hwVlanIpAddress, hwMuxVlanPortConfTable=hwMuxVlanPortConfTable, hwFlowAccountAdminStatus=hwFlowAccountAdminStatus, hwMethL2Vlan=hwMethL2Vlan, hwSmartVlanID=hwSmartVlanID, hwPolicyMulticast=hwPolicyMulticast, hwVlanTrafficOccupiedTable=hwVlanTrafficOccupiedTable, hwMplsVlanTable=hwMplsVlanTable, hwL3ProtocolTunnelSwitch=hwL3ProtocolTunnelSwitch, hwRegionPVCRowStatus=hwRegionPVCRowStatus, hwVlanUpCarEntry=hwVlanUpCarEntry, hwVlanIfVlanInnerLabel=hwVlanIfVlanInnerLabel, hwIpAwareVirtualIPMask=hwIpAwareVirtualIPMask, hwVlanForwarding=hwVlanForwarding, hwMuxVlanPortConfEntry=hwMuxVlanPortConfEntry, hwVOIPQosTable=hwVOIPQosTable, hwDhcpRelayInterfaceRelayAgentSwitch=hwDhcpRelayInterfaceRelayAgentSwitch, hwVlanUpCarBandValue=hwVlanUpCarBandValue, hwVlanCfgCommonTraps=hwVlanCfgCommonTraps, hwDhcpv6OptionSwitch=hwDhcpv6OptionSwitch, hwIpAwareVirtualIPTable=hwIpAwareVirtualIPTable, hwInnerVlanID=hwInnerVlanID, hwIpAwareVirtualIP=hwIpAwareVirtualIP, hwVlanIpAwareTable=hwVlanIpAwareTable, hwVlanInterfaceTrapsVbOids=hwVlanInterfaceTrapsVbOids, hwVOIPDhcpQosTable=hwVOIPDhcpQosTable, hwIpv4ArpUnicastSwitch=hwIpv4ArpUnicastSwitch, hwStackingVlanOuterEthernetType=hwStackingVlanOuterEthernetType, hwMismatchIgmpPolicy=hwMismatchIgmpPolicy, hwVlanConnectEntry=hwVlanConnectEntry, hwVlanConnectDstPara=hwVlanConnectDstPara, hwVlanMIBTable=hwVlanMIBTable, hwAntiMacSpoofingSwitch=hwAntiMacSpoofingSwitch, hwVlanDownCarId=hwVlanDownCarId, hwVlanDownDirectCarID=hwVlanDownDirectCarID, hwifPvlanSecondaryVlanlistHigh=hwifPvlanSecondaryVlanlistHigh, hwVlanifAlarmTraps=hwVlanifAlarmTraps, hwSmartVLanEntry=hwSmartVLanEntry, hwVlanUpDirectCarID=hwVlanUpDirectCarID, hwDocsSrvVlanID=hwDocsSrvVlanID, hwCableSourceVerify=hwCableSourceVerify, hwDot1adTpid=hwDot1adTpid, hwifPvlanPrimaryVlanID=hwifPvlanPrimaryVlanID, hwVlanDownTraffic=hwVlanDownTraffic, hwPacketTunnelEntry=hwPacketTunnelEntry, hwIpAwareRouteMask=hwIpAwareRouteMask, hwDoubleTagTunnelRip=hwDoubleTagTunnelRip, hwVlanMaxMacLearnNum=hwVlanMaxMacLearnNum, hwLocalVlanEntry=hwLocalVlanEntry, hwDhcpSuppressSwitch=hwDhcpSuppressSwitch, hwVlanIfVlanEncapMode=hwVlanIfVlanEncapMode, hwPortOuterEthernetTypeTable=hwPortOuterEthernetTypeTable, hwVlanIpAwareVrfName=hwVlanIpAwareVrfName, hwVlanParaIndex=hwVlanParaIndex, hwVlanPolicyBroadcast=hwVlanPolicyBroadcast, hwMultiVLanTable=hwMultiVLanTable, hwifPVLANMappingTable=hwifPVLANMappingTable, hwVlanifAlarmTrapsPrefix=hwVlanifAlarmTrapsPrefix, hwVlanMethL2Forward=hwVlanMethL2Forward, hwMplsVlanEnable=hwMplsVlanEnable, hwVlanUpCarId=hwVlanUpCarId, hwVOIPDhcpQosRowStatus=hwVOIPDhcpQosRowStatus, hwVlanInterfaceEntry=hwVlanInterfaceEntry, hwVlanInterfaceIndex=hwVlanInterfaceIndex, hwVlanUpCarTable=hwVlanUpCarTable, hwRegionVpi=hwRegionVpi, hwMuxVlanPortConfRowStatus=hwMuxVlanPortConfRowStatus, hwVlanInterfaceID=hwVlanInterfaceID, hwVlanDownCarName=hwVlanDownCarName, hwVlanInterfaceSubIpAddrEntry=hwVlanInterfaceSubIpAddrEntry, hwIpv6NsUnicastSwitch=hwIpv6NsUnicastSwitch, hwVlanUpCarIsUsed=hwVlanUpCarIsUsed, hwIPv4MTU=hwIPv4MTU, hwVOIPAddressTable=hwVOIPAddressTable, hwifSvlanOperStatus=hwifSvlanOperStatus, hwUserBridging=hwUserBridging, hwRipngTunnelSwitch=hwRipngTunnelSwitch, hwVlanIpAddressMask=hwVlanIpAddressMask, hwMuxVlanSlotConfEntry=hwMuxVlanSlotConfEntry, hwVlanAggregationEntry=hwVlanAggregationEntry, hwVlanListAttrib=hwVlanListAttrib, hwIpAwareRouteDstIP=hwIpAwareRouteDstIP, hwDhcpOption82Switch=hwDhcpOption82Switch, hwPPPoAMacMode=hwPPPoAMacMode, hwUpFlowAccountPacket=hwUpFlowAccountPacket, hwVlanForwardingModeInfoTrap=hwVlanForwardingModeInfoTrap, hwVOIPIPAddressSrc=hwVOIPIPAddressSrc, hwMultiVlanDownlinkPort=hwMultiVlanDownlinkPort, hwVlanSubIpAddress=hwVlanSubIpAddress, hwVlanPolicyUnknowncast=hwVlanPolicyUnknowncast, hwInterfaceSubIpAddrRowStatus=hwInterfaceSubIpAddrRowStatus, hwVlanConnectRowStatus=hwVlanConnectRowStatus)
mibBuilder.exportSymbols("HUAWEI-VLAN-MIB", hwIpv4ArpReplySwitch=hwIpv4ArpReplySwitch, hwVmacAgingMode=hwVmacAgingMode, hwVOIPDhcpQosType=hwVOIPDhcpQosType, hwVlanMcastUnknownProtos=hwVlanMcastUnknownProtos, hwMuxVlanStartVlanId=hwMuxVlanStartVlanId, hwifSvlanSubVlanlisHigh=hwifSvlanSubVlanlisHigh, hwVlanMacLearn=hwVlanMacLearn, hwVlanOuterTpid=hwVlanOuterTpid, hwVOIPAddressIndex=hwVOIPAddressIndex, hwVlanUpCarRowStatus=hwVlanUpCarRowStatus, hwPortOuterEthernetTypeEntry=hwPortOuterEthernetTypeEntry, hwIpv6NsUnicastunkonwnpolicy=hwIpv6NsUnicastunkonwnpolicy, hwRegionVci=hwRegionVci, hwifPvlanOperStatus=hwifPvlanOperStatus, hwVlanLocalSwitch=hwVlanLocalSwitch, hwVlanID=hwVlanID, hwVlanIpAwareSrcIPMode=hwVlanIpAwareSrcIPMode, hwVlanCfgTrapsVbOids=hwVlanCfgTrapsVbOids, hwVlanAggregationTable=hwVlanAggregationTable, hwVlanInterfaceIDWithSub=hwVlanInterfaceIDWithSub, hwMultiVlanRowStatus=hwMultiVlanRowStatus, hwVlanParaEntry=hwVlanParaEntry, hwIpAwareVirtualIPRowStatus=hwIpAwareVirtualIPRowStatus, hwVlanAggregationSuperVlanId=hwVlanAggregationSuperVlanId, hwVmacPPPoESubStatus=hwVmacPPPoESubStatus, hwVlanSrvProfTable=hwVlanSrvProfTable, hwVlanIfIPMode=hwVlanIfIPMode, hwVOIPQosVlanPriority=hwVOIPQosVlanPriority, hwVlanConnectOuterVlanID=hwVlanConnectOuterVlanID, hwVmacStatus=hwVmacStatus, hwIpv6DadProxySwitch=hwIpv6DadProxySwitch, hwVlanAggregationSubVlanArpProxyStatus=hwVlanAggregationSubVlanArpProxyStatus, hwDocsDefaultSrvVlanID=hwDocsDefaultSrvVlanID, hwVmacPPPoASubStatus=hwVmacPPPoASubStatus, hwRegionVLanTable=hwRegionVLanTable, hwUpFlowAccountDiscardPacket=hwUpFlowAccountDiscardPacket, hwVlanIndex=hwVlanIndex, hwifPvlanSecondaryVlanlistLow=hwifPvlanSecondaryVlanlistLow, hwPolicyUnknowncast=hwPolicyUnknowncast, hwPacketTunnelRip=hwPacketTunnelRip, hwVlanBindSrvProfName=hwVlanBindSrvProfName, hwInterfaceRowStatus=hwInterfaceRowStatus, hwVlanAttrib=hwVlanAttrib, hwDocsSrvVlanIDEntry=hwDocsSrvVlanIDEntry, hwVlanCreationTime=hwVlanCreationTime, hwPPPoEMacMode=hwPPPoEMacMode, hwPacketTunnelTable=hwPacketTunnelTable, hwDocsSrvVlanRowStatus=hwDocsSrvVlanRowStatus, hwVlanListType=hwVlanListType, hwDhcpMode=hwDhcpMode, hwDoubleTagTunnelConfig=hwDoubleTagTunnelConfig, hwVlanMIBEntry=hwVlanMIBEntry, hwVOIPDhcpQosEntry=hwVOIPDhcpQosEntry, hwIpv6BindRouteAndNdSwitch=hwIpv6BindRouteAndNdSwitch)
