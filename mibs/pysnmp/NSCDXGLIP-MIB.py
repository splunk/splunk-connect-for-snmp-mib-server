#
# PySNMP MIB module NSCDXGLIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSCDXGLIP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
nscDx, = mibBuilder.importSymbols("NSC-MIB", "nscDx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Unsigned32, Counter64, enterprises, Counter32, NotificationType, ModuleIdentity, ObjectIdentity, Gauge32, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Counter64", "enterprises", "Counter32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Gauge32", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nscDxGreenline = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4))
nscDxGlChannelTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1), )
if mibBuilder.loadTexts: nscDxGlChannelTable.setStatus('mandatory')
nscDxGlChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlChanEntKeyId"))
if mibBuilder.loadTexts: nscDxGlChannelEntry.setStatus('mandatory')
nscDxGlChanEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntKeyId.setStatus('mandatory')
nscDxGlChanEntType = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bus-tag-hci", 1), ("bus-tag-rci", 2), ("escon-hci", 3), ("escon-rci", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntType.setStatus('mandatory')
nscDxGlChanEntActivityState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("stacked", 3), ("suppressible", 4), ("unsuppressible", 5), ("ipl", 6), ("wait-for-resources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntActivityState.setStatus('mandatory')
nscDxGlChanEntResetState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("system-reset", 2), ("selective-reset", 3), ("ifdisc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntResetState.setStatus('mandatory')
nscDxGlChanEntIplState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("stacked", 3), ("suppressible", 4), ("unsuppressible", 5), ("ipl", 6), ("wait-for-resources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntIplState.setStatus('mandatory')
nscDxGlChanEntIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntIpState.setStatus('mandatory')
nscDxGlChanEntOnlineOfflineState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntOnlineOfflineState.setStatus('mandatory')
nscDxGlChanEntPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlChanEntPolling.setStatus('mandatory')
nscDxGlChanEntActiveSubchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntActiveSubchannel.setStatus('mandatory')
nscDxGlChanEntMemoryResourcesLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntMemoryResourcesLimited.setStatus('mandatory')
nscDxGlChanEntTagOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntTagOverruns.setStatus('mandatory')
nscDxGlChanEntDcOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntDcOverruns.setStatus('mandatory')
nscDxGlChanEntDsOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntDsOverruns.setStatus('mandatory')
nscDxGlChanEntDmaParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntDmaParityErrors.setStatus('mandatory')
nscDxGlChanEntCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntCrcErrors.setStatus('mandatory')
nscDxGlChanEntResetsDuringDma = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntResetsDuringDma.setStatus('mandatory')
nscDxGlChanEntCmdParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntCmdParityErrors.setStatus('mandatory')
nscDxGlChanEntUnsupportedStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntUnsupportedStatuses.setStatus('mandatory')
nscDxGlChanEntMiscompareParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntMiscompareParityErrors.setStatus('mandatory')
nscDxGlChanEntSelectionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntSelectionTimeouts.setStatus('mandatory')
nscDxGlChanEntStatusAcceptDiscIns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntStatusAcceptDiscIns.setStatus('mandatory')
nscDxGlChanEntStatusAcceptTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntStatusAcceptTimeouts.setStatus('mandatory')
nscDxGlChanEntStatusWaitDiscIns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntStatusWaitDiscIns.setStatus('mandatory')
nscDxGlChanEntStatusWaitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntStatusWaitTimeouts.setStatus('mandatory')
nscDxGlChanEntOpInActiveTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntOpInActiveTimeouts.setStatus('mandatory')
nscDxGlChanEntNumCus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntNumCus.setStatus('mandatory')
nscDxGlChanEntChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("notconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntChannelStatus.setStatus('mandatory')
nscDxGlProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2))
nscDxGlProfControlUnitTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1), )
if mibBuilder.loadTexts: nscDxGlProfControlUnitTable.setStatus('mandatory')
nscDxGlProfControlUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlCuEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlCuEntCuNum"))
if mibBuilder.loadTexts: nscDxGlProfControlUnitEntry.setStatus('mandatory')
nscDxGlProfCuEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfCuEntKeyId.setStatus('mandatory')
nscDxGlProfCuEntCuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfCuEntCuNum.setStatus('mandatory')
nscDxGlProfCuEntNumDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfCuEntNumDevices.setStatus('mandatory')
nscDxGlProfCuEntOnlineOfflineState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntOnlineOfflineState.setStatus('mandatory')
nscDxGlProfCuEntDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntDeviceType.setStatus('mandatory')
nscDxGlProfCuEntHostStartingDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostStartingDevAddr.setStatus('mandatory')
nscDxGlProfCuEntHostEndingDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostEndingDevAddr.setStatus('mandatory')
nscDxGlProfCuEntHostChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dci", 1), ("ds3", 2), ("ds4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostChannelSpeed.setStatus('mandatory')
nscDxGlProfCuEntHostBufferRequirements = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostBufferRequirements.setStatus('mandatory')
nscDxGlProfCuEntRmtIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtIpAddr.setStatus('mandatory')
nscDxGlProfCuEntRmtStartingDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtStartingDevAddr.setStatus('mandatory')
nscDxGlProfCuEntRmtBufferHold = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tbl-def", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtBufferHold.setStatus('mandatory')
nscDxGlProfCuEntRmtChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dci", 1), ("ds3", 2), ("ds4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtChannelSpeed.setStatus('mandatory')
nscDxGlProfCuEntRmtBufferRequirements = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtBufferRequirements.setStatus('mandatory')
nscDxGlProfCuEntUnsolStatusOption = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("q-non-uc", 1), ("discard", 2), ("q-uc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntUnsolStatusOption.setStatus('mandatory')
nscDxGlProfCuEntDevDriverOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntDevDriverOptions.setStatus('mandatory')
nscDxGlProfCuEntHostBufferHold = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tbl-def", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostBufferHold.setStatus('mandatory')
nscDxGlProfCuEntWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntWindowSize.setStatus('mandatory')
nscDxGlProfDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2), )
if mibBuilder.loadTexts: nscDxGlProfDeviceTable.setStatus('mandatory')
nscDxGlProfDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlDevEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlProfDevEntDevice"))
if mibBuilder.loadTexts: nscDxGlProfDeviceEntry.setStatus('mandatory')
nscDxGlProfDevEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfDevEntKeyId.setStatus('mandatory')
nscDxGlProfDevEntDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfDevEntDevice.setStatus('mandatory')
nscDxGlProfDevEntOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfDevEntOnOff.setStatus('mandatory')
nscDxGlDevStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3), )
if mibBuilder.loadTexts: nscDxGlDevStatusTable.setStatus('mandatory')
nscDxGlDevStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlDevStatusEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlDevStatusEntDeviceNum"))
if mibBuilder.loadTexts: nscDxGlDevStatusEntry.setStatus('mandatory')
nscDxGlDevStatusEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntKeyId.setStatus('mandatory')
nscDxGlDevStatusEntDeviceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntDeviceNum.setStatus('mandatory')
nscDxGlDevStatusEntHostDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntHostDevAddr.setStatus('mandatory')
nscDxGlDevStatusEntRmtDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntRmtDevAddr.setStatus('mandatory')
nscDxGlDevStatusEntOnOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("marked-off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntOnOffState.setStatus('mandatory')
nscDxGlDevStatusEntReservedState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unreserved", 1), ("reserved", 2), ("primed", 3), ("re-reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntReservedState.setStatus('mandatory')
nscDxGlSesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4), )
if mibBuilder.loadTexts: nscDxGlSesStatsTable.setStatus('mandatory')
nscDxGlSesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlSesStatsEntKeyId"))
if mibBuilder.loadTexts: nscDxGlSesStatsEntry.setStatus('mandatory')
nscDxGlSesStatsEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntKeyId.setStatus('mandatory')
nscDxGlSesStatsEntInControlReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInControlReqs.setStatus('mandatory')
nscDxGlSesStatsEntInControlResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInControlResps.setStatus('mandatory')
nscDxGlSesStatsEntInDevAvailResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInDevAvailResps.setStatus('mandatory')
nscDxGlSesStatsEntInDevStatResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInDevStatResps.setStatus('mandatory')
nscDxGlSesStatsEntInInitReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInitReqs.setStatus('mandatory')
nscDxGlSesStatsEntInInitResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInitResps.setStatus('mandatory')
nscDxGlSesStatsEntInReserveReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInReserveReqs.setStatus('mandatory')
nscDxGlSesStatsEntInReserveResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInReserveResps.setStatus('mandatory')
nscDxGlSesStatsEntInSenseReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInSenseReqs.setStatus('mandatory')
nscDxGlSesStatsEntInSenseResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInSenseResps.setStatus('mandatory')
nscDxGlSesStatsEntInUnreserveReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInUnreserveReqs.setStatus('mandatory')
nscDxGlSesStatsEntInInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInvalids.setStatus('mandatory')
nscDxGlSesStatsEntOutControlReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutControlReqs.setStatus('mandatory')
nscDxGlSesStatsEntOutControlResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutControlResps.setStatus('mandatory')
nscDxGlSesStatsEntOutDevAvailResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutDevAvailResps.setStatus('mandatory')
nscDxGlSesStatsEntOutDevStatResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutDevStatResps.setStatus('mandatory')
nscDxGlSesStatsEntOutInitReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInitReqs.setStatus('mandatory')
nscDxGlSesStatsEntOutInitResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInitResps.setStatus('mandatory')
nscDxGlSesStatsEntOutReserveReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutReserveReqs.setStatus('mandatory')
nscDxGlSesStatsEntOutReserveResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutReserveResps.setStatus('mandatory')
nscDxGlSesStatsEntOutSenseReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutSenseReqs.setStatus('mandatory')
nscDxGlSesStatsEntOutSenseResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutSenseResps.setStatus('mandatory')
nscDxGlSesStatsEntOutUnreserveReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutUnreserveReqs.setStatus('mandatory')
nscDxGlSesStatsEntOutInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInvalids.setStatus('mandatory')
nscDxGlSesStatsEntHciState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("initial-poll", 2), ("hci-wait", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntHciState.setStatus('mandatory')
nscDxGlSesStatsEntRciState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("initial-poll", 2), ("hci-wait", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciState.setStatus('mandatory')
nscDxGlSesStatsEntHciMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntHciMaxSessions.setStatus('mandatory')
nscDxGlSesStatsEntRciMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciMaxSessions.setStatus('mandatory')
nscDxGlSesStatsEntRciPollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollStatus.setStatus('mandatory')
nscDxGlSesStatsEntRciPollRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollRequests.setStatus('mandatory')
nscDxGlSesStatsEntRciPollDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollDevice.setStatus('mandatory')
nscDxGlSesHciConnTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5), )
if mibBuilder.loadTexts: nscDxGlSesHciConnTable.setStatus('mandatory')
nscDxGlSesHciConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlSesHciConnEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlSesHciConnEntSesNum"))
if mibBuilder.loadTexts: nscDxGlSesHciConnEntry.setStatus('mandatory')
nscDxGlSesHciConnEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntKeyId.setStatus('mandatory')
nscDxGlSesHciConnEntSesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntSesNum.setStatus('mandatory')
nscDxGlSesHciConnEntIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntIpAddress.setStatus('mandatory')
nscDxGlSesHciConnEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("closed", 1), ("init1", 2), ("init2", 3), ("open", 4), ("closing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntStatus.setStatus('mandatory')
nscDxGlSesHciConnEntSendState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 6), ("header", 7), ("data", 8), ("flush", 9), ("trailer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntSendState.setStatus('mandatory')
nscDxGlSesHciConnEntRecvState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 6), ("header", 7), ("data", 8), ("flush", 9), ("trailer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntRecvState.setStatus('mandatory')
nscDxGlSesHciConnEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntAddr.setStatus('mandatory')
nscDxGlSesHciConnEntFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntFlags.setStatus('mandatory')
nscDxGlSesHciConnEntReconn = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntReconn.setStatus('mandatory')
nscDxGlSesRciConnTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6), )
if mibBuilder.loadTexts: nscDxGlSesRciConnTable.setStatus('mandatory')
nscDxGlSesRciConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlSesRciConnEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlSesRciConnEntSesNum"))
if mibBuilder.loadTexts: nscDxGlSesRciConnEntry.setStatus('mandatory')
nscDxGlSesRciConnEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntKeyId.setStatus('mandatory')
nscDxGlSesRciConnEntSesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntSesNum.setStatus('mandatory')
nscDxGlSesRciConnEntIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntIpAddress.setStatus('mandatory')
nscDxGlSesRciConnEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("closed", 1), ("init1", 2), ("init2", 3), ("open", 4), ("closing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntStatus.setStatus('mandatory')
nscDxGlSesRciConnEntSendState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 6), ("header", 7), ("data", 8), ("flush", 9), ("trailer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntSendState.setStatus('mandatory')
nscDxGlSesRciConnEntRecvState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 6), ("header", 7), ("data", 8), ("flush", 9), ("trailer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntRecvState.setStatus('mandatory')
nscDxGlSesRciConnEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntAddr.setStatus('mandatory')
nscDxGlSesRciConnEntFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntFlags.setStatus('mandatory')
nscDxGlSesDevTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7), )
if mibBuilder.loadTexts: nscDxGlSesDevTable.setStatus('mandatory')
nscDxGlSesDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlSesDevEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlSesDevEntDevice"))
if mibBuilder.loadTexts: nscDxGlSesDevEntry.setStatus('mandatory')
nscDxGlSesDevEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntKeyId.setStatus('mandatory')
nscDxGlSesDevEntDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntDevice.setStatus('mandatory')
nscDxGlSesDevEntReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntReserve.setStatus('mandatory')
nscDxGlSesDevEntPrimed = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntPrimed.setStatus('mandatory')
nscDxGlSesDevEntStat = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntStat.setStatus('mandatory')
nscDxGlSesDevEntSenseData = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntSenseData.setStatus('mandatory')
nscDxGlXportStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8), )
if mibBuilder.loadTexts: nscDxGlXportStatsTable.setStatus('mandatory')
nscDxGlXportStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlXportStatsEntKeyId"))
if mibBuilder.loadTexts: nscDxGlXportStatsEntry.setStatus('mandatory')
nscDxGlXportStatsEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntKeyId.setStatus('mandatory')
nscDxGlXportStatsEntInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInAcks.setStatus('mandatory')
nscDxGlXportStatsEntInConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInConnects.setStatus('mandatory')
nscDxGlXportStatsEntInDataDups = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataDups.setStatus('mandatory')
nscDxGlXportStatsEntInDataInOrders = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInOrders.setStatus('mandatory')
nscDxGlXportStatsEntInDataInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInvalids.setStatus('mandatory')
nscDxGlXportStatsEntInDataInWindows = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInWindows.setStatus('mandatory')
nscDxGlXportStatsEntInDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDiscs.setStatus('mandatory')
nscDxGlXportStatsEntInNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInNacks.setStatus('mandatory')
nscDxGlXportStatsEntInProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInProbes.setStatus('mandatory')
nscDxGlXportStatsEntInProbeResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInProbeResps.setStatus('mandatory')
nscDxGlXportStatsEntBadPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadPckts.setStatus('mandatory')
nscDxGlXportStatsEntBadXcbs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadXcbs.setStatus('mandatory')
nscDxGlXportStatsEntOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutAcks.setStatus('mandatory')
nscDxGlXportStatsEntOutConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutConnects.setStatus('mandatory')
nscDxGlXportStatsEntOutDatas = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutDatas.setStatus('mandatory')
nscDxGlXportStatsEntOutDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutDiscs.setStatus('mandatory')
nscDxGlXportStatsEntOutNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutNacks.setStatus('mandatory')
nscDxGlXportStatsEntOutProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutProbes.setStatus('mandatory')
nscDxGlXportStatsEntOutProbeResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutProbeResps.setStatus('mandatory')
nscDxGlXportStatsEntReconns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntReconns.setStatus('mandatory')
nscDxGlXportStatsEntRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntRetransmits.setStatus('mandatory')
nscDxGlXportStatsEntBadChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadChecksums.setStatus('mandatory')
nscDxGlXportStatsEntBadVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadVersions.setStatus('mandatory')
nscDxGlXportStatsEntConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntConnTimeouts.setStatus('mandatory')
nscDxGlXportStatsEntInitXcbExists = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInitXcbExists.setStatus('mandatory')
nscDxGlXportStatsEntNoHdrSpaces = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoHdrSpaces.setStatus('mandatory')
nscDxGlXportStatsEntNoMemorys = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoMemorys.setStatus('mandatory')
nscDxGlXportStatsEntNoPes = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoPes.setStatus('mandatory')
nscDxGlXportStatsEntOutOfSeqDatas = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutOfSeqDatas.setStatus('mandatory')
nscDxGlXportStatsEntShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntShortPackets.setStatus('mandatory')
nscDxGlXportConnTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9), )
if mibBuilder.loadTexts: nscDxGlXportConnTable.setStatus('mandatory')
nscDxGlXportConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlXportConnEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlXportConnEntNum"))
if mibBuilder.loadTexts: nscDxGlXportConnEntry.setStatus('mandatory')
nscDxGlXportConnEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntKeyId.setStatus('mandatory')
nscDxGlXportConnEntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntNum.setStatus('mandatory')
nscDxGlXportConnEntLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntLocalAddress.setStatus('mandatory')
nscDxGlXportConnEntLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntLocalPort.setStatus('mandatory')
nscDxGlXportConnEntRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntRemoteAddress.setStatus('mandatory')
nscDxGlXportConnEntRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntRemotePort.setStatus('mandatory')
nscDxGlXportConnEntXopt = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntXopt.setStatus('mandatory')
nscDxGlXportConnEntWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntWindowSize.setStatus('mandatory')
nscDxGlXportConnEntRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntRoundTripTime.setStatus('mandatory')
nscDxGlXportConnEntSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntSeqNumber.setStatus('mandatory')
nscDxGlXportConnEntXcbFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntXcbFlags.setStatus('mandatory')
mibBuilder.exportSymbols("NSCDXGLIP-MIB", nscDxGreenline=nscDxGreenline, nscDxGlSesStatsEntInDevAvailResps=nscDxGlSesStatsEntInDevAvailResps, nscDxGlSesStatsEntRciPollRequests=nscDxGlSesStatsEntRciPollRequests, nscDxGlSesRciConnTable=nscDxGlSesRciConnTable, nscDxGlSesRciConnEntAddr=nscDxGlSesRciConnEntAddr, nscDxGlSesHciConnEntAddr=nscDxGlSesHciConnEntAddr, nscDxGlXportConnEntWindowSize=nscDxGlXportConnEntWindowSize, nscDxGlSesStatsEntInInitResps=nscDxGlSesStatsEntInInitResps, nscDxGlXportStatsEntOutProbes=nscDxGlXportStatsEntOutProbes, nscDxGlSesStatsEntRciState=nscDxGlSesStatsEntRciState, nscDxGlChanEntSelectionTimeouts=nscDxGlChanEntSelectionTimeouts, nscDxGlProfDeviceTable=nscDxGlProfDeviceTable, nscDxGlXportStatsEntConnTimeouts=nscDxGlXportStatsEntConnTimeouts, nscDxGlXportStatsEntBadVersions=nscDxGlXportStatsEntBadVersions, nscDxGlXportConnEntry=nscDxGlXportConnEntry, nscDxGlXportStatsEntNoHdrSpaces=nscDxGlXportStatsEntNoHdrSpaces, nscDxGlSesDevEntSenseData=nscDxGlSesDevEntSenseData, nscDxGlSesHciConnEntry=nscDxGlSesHciConnEntry, nscDxGlProfCuEntHostBufferRequirements=nscDxGlProfCuEntHostBufferRequirements, nscDxGlChanEntKeyId=nscDxGlChanEntKeyId, nscDxGlProfCuEntRmtBufferHold=nscDxGlProfCuEntRmtBufferHold, nscDxGlSesDevEntReserve=nscDxGlSesDevEntReserve, nscDxGlXportConnEntXopt=nscDxGlXportConnEntXopt, nscDxGlXportConnEntXcbFlags=nscDxGlXportConnEntXcbFlags, nscDxGlXportStatsEntInDataDups=nscDxGlXportStatsEntInDataDups, nscDxGlSesStatsEntOutDevStatResps=nscDxGlSesStatsEntOutDevStatResps, nscDxGlSesHciConnEntRecvState=nscDxGlSesHciConnEntRecvState, nscDxGlXportConnTable=nscDxGlXportConnTable, nscDxGlXportStatsEntBadPckts=nscDxGlXportStatsEntBadPckts, nscDxGlXportStatsEntOutOfSeqDatas=nscDxGlXportStatsEntOutOfSeqDatas, nscDxGlChanEntStatusAcceptDiscIns=nscDxGlChanEntStatusAcceptDiscIns, nscDxGlXportConnEntKeyId=nscDxGlXportConnEntKeyId, nscDxGlChannelTable=nscDxGlChannelTable, nscDxGlChanEntCmdParityErrors=nscDxGlChanEntCmdParityErrors, nscDxGlSesDevEntStat=nscDxGlSesDevEntStat, nscDxGlProfCuEntRmtStartingDevAddr=nscDxGlProfCuEntRmtStartingDevAddr, nscDxGlSesRciConnEntRecvState=nscDxGlSesRciConnEntRecvState, nscDxGlXportStatsEntInDiscs=nscDxGlXportStatsEntInDiscs, nscDxGlSesStatsEntInSenseResps=nscDxGlSesStatsEntInSenseResps, nscDxGlSesDevEntry=nscDxGlSesDevEntry, nscDxGlXportStatsEntOutDiscs=nscDxGlXportStatsEntOutDiscs, nscDxGlXportStatsEntOutNacks=nscDxGlXportStatsEntOutNacks, nscDxGlXportStatsEntInAcks=nscDxGlXportStatsEntInAcks, nscDxGlXportConnEntNum=nscDxGlXportConnEntNum, nscDxGlChanEntCrcErrors=nscDxGlChanEntCrcErrors, nscDxGlSesRciConnEntIpAddress=nscDxGlSesRciConnEntIpAddress, nscDxGlXportStatsEntReconns=nscDxGlXportStatsEntReconns, nscDxGlProfCuEntOnlineOfflineState=nscDxGlProfCuEntOnlineOfflineState, nscDxGlSesDevEntDevice=nscDxGlSesDevEntDevice, nscDxGlChanEntMemoryResourcesLimited=nscDxGlChanEntMemoryResourcesLimited, nscDxGlProfCuEntRmtChannelSpeed=nscDxGlProfCuEntRmtChannelSpeed, nscDxGlSesStatsEntry=nscDxGlSesStatsEntry, nscDxGlSesRciConnEntSendState=nscDxGlSesRciConnEntSendState, nscDxGlSesStatsEntInInitReqs=nscDxGlSesStatsEntInInitReqs, nscDxGlChanEntIpState=nscDxGlChanEntIpState, nscDxGlXportConnEntRemotePort=nscDxGlXportConnEntRemotePort, nscDxGlDevStatusTable=nscDxGlDevStatusTable, nscDxGlSesStatsEntOutControlResps=nscDxGlSesStatsEntOutControlResps, nscDxGlSesHciConnTable=nscDxGlSesHciConnTable, nscDxGlSesStatsEntInControlReqs=nscDxGlSesStatsEntInControlReqs, nscDxGlProfDeviceEntry=nscDxGlProfDeviceEntry, nscDxGlXportStatsEntry=nscDxGlXportStatsEntry, nscDxGlSesStatsEntHciMaxSessions=nscDxGlSesStatsEntHciMaxSessions, nscDxGlSesDevEntKeyId=nscDxGlSesDevEntKeyId, nscDxGlXportStatsEntNoPes=nscDxGlXportStatsEntNoPes, nscDxGlSesStatsEntOutDevAvailResps=nscDxGlSesStatsEntOutDevAvailResps, nscDxGlProfCuEntRmtBufferRequirements=nscDxGlProfCuEntRmtBufferRequirements, nscDxGlSesStatsEntRciPollDevice=nscDxGlSesStatsEntRciPollDevice, nscDxGlSesStatsEntOutSenseReqs=nscDxGlSesStatsEntOutSenseReqs, nscDxGlSesStatsEntInReserveResps=nscDxGlSesStatsEntInReserveResps, nscDxGlSesStatsEntOutReserveResps=nscDxGlSesStatsEntOutReserveResps, nscDxGlXportStatsEntKeyId=nscDxGlXportStatsEntKeyId, nscDxGlSesRciConnEntSesNum=nscDxGlSesRciConnEntSesNum, nscDxGlChanEntIplState=nscDxGlChanEntIplState, nscDxGlChanEntMiscompareParityErrors=nscDxGlChanEntMiscompareParityErrors, nscDxGlChanEntStatusWaitTimeouts=nscDxGlChanEntStatusWaitTimeouts, nscDxGlSesDevEntPrimed=nscDxGlSesDevEntPrimed, nscDxGlXportStatsEntBadXcbs=nscDxGlXportStatsEntBadXcbs, nscDxGlProfControlUnitEntry=nscDxGlProfControlUnitEntry, nscDxGlXportStatsEntOutAcks=nscDxGlXportStatsEntOutAcks, nscDxGlSesHciConnEntReconn=nscDxGlSesHciConnEntReconn, nscDxGlSesStatsEntInDevStatResps=nscDxGlSesStatsEntInDevStatResps, nscDxGlXportConnEntRemoteAddress=nscDxGlXportConnEntRemoteAddress, nscDxGlSesStatsEntInReserveReqs=nscDxGlSesStatsEntInReserveReqs, nscDxGlSesStatsEntOutInitResps=nscDxGlSesStatsEntOutInitResps, nscDxGlXportStatsEntInDataInOrders=nscDxGlXportStatsEntInDataInOrders, nscDxGlChanEntDcOverruns=nscDxGlChanEntDcOverruns, nscDxGlChanEntUnsupportedStatuses=nscDxGlChanEntUnsupportedStatuses, nscDxGlProfCuEntRmtIpAddr=nscDxGlProfCuEntRmtIpAddr, nscDxGlDevStatusEntKeyId=nscDxGlDevStatusEntKeyId, nscDxGlChanEntResetsDuringDma=nscDxGlChanEntResetsDuringDma, nscDxGlProfCuEntUnsolStatusOption=nscDxGlProfCuEntUnsolStatusOption, nscDxGlProfCuEntWindowSize=nscDxGlProfCuEntWindowSize, nscDxGlXportStatsEntOutProbeResps=nscDxGlXportStatsEntOutProbeResps, nscDxGlXportStatsTable=nscDxGlXportStatsTable, nscDxGlXportStatsEntInProbes=nscDxGlXportStatsEntInProbes, nscDxGlChanEntStatusWaitDiscIns=nscDxGlChanEntStatusWaitDiscIns, nscDxGlProfCuEntCuNum=nscDxGlProfCuEntCuNum, nscDxGlProfCuEntDeviceType=nscDxGlProfCuEntDeviceType, nscDxGlSesRciConnEntFlags=nscDxGlSesRciConnEntFlags, nscDxGlDevStatusEntReservedState=nscDxGlDevStatusEntReservedState, nscDxGlSesStatsEntInInvalids=nscDxGlSesStatsEntInInvalids, nscDxGlProfCuEntHostChannelSpeed=nscDxGlProfCuEntHostChannelSpeed, nscDxGlProfControlUnitTable=nscDxGlProfControlUnitTable, nscDxGlDevStatusEntHostDevAddr=nscDxGlDevStatusEntHostDevAddr, nscDxGlXportConnEntSeqNumber=nscDxGlXportConnEntSeqNumber, nscDxGlSesHciConnEntSesNum=nscDxGlSesHciConnEntSesNum, nscDxGlProfCuEntNumDevices=nscDxGlProfCuEntNumDevices, nscDxGlChanEntType=nscDxGlChanEntType, nscDxGlProfCuEntHostStartingDevAddr=nscDxGlProfCuEntHostStartingDevAddr, nscDxGlChanEntStatusAcceptTimeouts=nscDxGlChanEntStatusAcceptTimeouts, nscDxGlXportStatsEntInProbeResps=nscDxGlXportStatsEntInProbeResps, nscDxGlProfCuEntKeyId=nscDxGlProfCuEntKeyId, nscDxGlChanEntChannelStatus=nscDxGlChanEntChannelStatus, nscDxGlProfDevEntOnOff=nscDxGlProfDevEntOnOff, nscDxGlSesRciConnEntry=nscDxGlSesRciConnEntry, nscDxGlXportStatsEntInDataInvalids=nscDxGlXportStatsEntInDataInvalids, nscDxGlSesHciConnEntIpAddress=nscDxGlSesHciConnEntIpAddress, nscDxGlProfDevEntKeyId=nscDxGlProfDevEntKeyId, nscDxGlSesStatsEntHciState=nscDxGlSesStatsEntHciState, nscDxGlChanEntPolling=nscDxGlChanEntPolling, nscDxGlSesStatsEntInUnreserveReqs=nscDxGlSesStatsEntInUnreserveReqs, nscDxGlDevStatusEntRmtDevAddr=nscDxGlDevStatusEntRmtDevAddr, nscDxGlSesHciConnEntStatus=nscDxGlSesHciConnEntStatus, nscDxGlChannelEntry=nscDxGlChannelEntry, nscDxGlProfDevEntDevice=nscDxGlProfDevEntDevice, nscDxGlSesStatsEntOutReserveReqs=nscDxGlSesStatsEntOutReserveReqs, nscDxGlXportStatsEntInDataInWindows=nscDxGlXportStatsEntInDataInWindows, nscDxGlSesHciConnEntSendState=nscDxGlSesHciConnEntSendState, nscDxGlChanEntOnlineOfflineState=nscDxGlChanEntOnlineOfflineState, nscDxGlChanEntNumCus=nscDxGlChanEntNumCus, nscDxGlSesStatsTable=nscDxGlSesStatsTable, nscDxGlSesRciConnEntStatus=nscDxGlSesRciConnEntStatus, nscDxGlSesStatsEntOutInitReqs=nscDxGlSesStatsEntOutInitReqs, nscDxGlDevStatusEntry=nscDxGlDevStatusEntry, nscDxGlDevStatusEntDeviceNum=nscDxGlDevStatusEntDeviceNum, nscDxGlSesStatsEntRciPollStatus=nscDxGlSesStatsEntRciPollStatus, nscDxGlSesHciConnEntKeyId=nscDxGlSesHciConnEntKeyId, nscDxGlXportStatsEntInNacks=nscDxGlXportStatsEntInNacks, nscDxGlChanEntActiveSubchannel=nscDxGlChanEntActiveSubchannel, nscDxGlXportStatsEntInConnects=nscDxGlXportStatsEntInConnects, nscDxGlXportConnEntRoundTripTime=nscDxGlXportConnEntRoundTripTime, nscDxGlXportStatsEntNoMemorys=nscDxGlXportStatsEntNoMemorys, nscDxGlProfCuEntDevDriverOptions=nscDxGlProfCuEntDevDriverOptions, nscDxGlChanEntDsOverruns=nscDxGlChanEntDsOverruns, nscDxGlSesStatsEntOutSenseResps=nscDxGlSesStatsEntOutSenseResps, nscDxGlChanEntTagOverruns=nscDxGlChanEntTagOverruns, nscDxGlProfiles=nscDxGlProfiles, nscDxGlSesStatsEntOutInvalids=nscDxGlSesStatsEntOutInvalids, nscDxGlXportStatsEntOutConnects=nscDxGlXportStatsEntOutConnects, nscDxGlChanEntResetState=nscDxGlChanEntResetState, nscDxGlSesStatsEntOutUnreserveReqs=nscDxGlSesStatsEntOutUnreserveReqs, nscDxGlXportStatsEntShortPackets=nscDxGlXportStatsEntShortPackets, nscDxGlProfCuEntHostBufferHold=nscDxGlProfCuEntHostBufferHold, nscDxGlDevStatusEntOnOffState=nscDxGlDevStatusEntOnOffState, nscDxGlXportConnEntLocalAddress=nscDxGlXportConnEntLocalAddress, nscDxGlChanEntDmaParityErrors=nscDxGlChanEntDmaParityErrors, nscDxGlXportStatsEntBadChecksums=nscDxGlXportStatsEntBadChecksums, nscDxGlSesStatsEntInSenseReqs=nscDxGlSesStatsEntInSenseReqs, nscDxGlChanEntOpInActiveTimeouts=nscDxGlChanEntOpInActiveTimeouts, nscDxGlSesDevTable=nscDxGlSesDevTable, nscDxGlProfCuEntHostEndingDevAddr=nscDxGlProfCuEntHostEndingDevAddr, nscDxGlSesStatsEntInControlResps=nscDxGlSesStatsEntInControlResps, nscDxGlXportStatsEntInitXcbExists=nscDxGlXportStatsEntInitXcbExists, nscDxGlXportConnEntLocalPort=nscDxGlXportConnEntLocalPort, nscDxGlSesStatsEntKeyId=nscDxGlSesStatsEntKeyId, nscDxGlSesStatsEntOutControlReqs=nscDxGlSesStatsEntOutControlReqs, nscDxGlSesStatsEntRciMaxSessions=nscDxGlSesStatsEntRciMaxSessions, nscDxGlSesRciConnEntKeyId=nscDxGlSesRciConnEntKeyId, nscDxGlChanEntActivityState=nscDxGlChanEntActivityState, nscDxGlXportStatsEntRetransmits=nscDxGlXportStatsEntRetransmits, nscDxGlSesHciConnEntFlags=nscDxGlSesHciConnEntFlags, nscDxGlXportStatsEntOutDatas=nscDxGlXportStatsEntOutDatas)
