#
# PySNMP MIB module HH3C-NDEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-NDEC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hh3cmlsr, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cmlsr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, Unsigned32, Gauge32, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ModuleIdentity, MibIdentifier, Integer32, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Unsigned32", "Gauge32", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ModuleIdentity", "MibIdentifier", "Integer32", "IpAddress", "NotificationType")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
hh3cNDEC = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2))
hh3cNDEC.setRevisions(('2004-09-15 10:52',))
if mibBuilder.loadTexts: hh3cNDEC.setLastUpdated('200409150000Z')
if mibBuilder.loadTexts: hh3cNDEC.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3chipsNDECSAListTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1), )
if mibBuilder.loadTexts: hh3chipsNDECSAListTable.setStatus('current')
hh3chipsNDECSAListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsPeerIpAddr"), (0, "HH3C-NDEC-MIB", "hh3chipsProtocol"), (0, "HH3C-NDEC-MIB", "hh3chipsSPI"))
if mibBuilder.loadTexts: hh3chipsNDECSAListEntry.setStatus('current')
hh3chipsPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsPeerIpAddr.setStatus('current')
hh3chipsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50, 51))).clone(namedValues=NamedValues(("ipsecEsp", 50), ("ipsecAh", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsProtocol.setStatus('current')
hh3chipsSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSPI.setStatus('current')
hh3chipsEncAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ealgNone", 1), ("ealgDescbc", 2), ("ealg3desCbc", 3), ("ealgXBlf", 4), ("ealgXCast", 5), ("ealgXSkipjack", 6), ("ealgXAes", 7), ("ealgXQc5", 8), ("ealgXNsa", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsEncAlgorithm.setStatus('current')
hh3chipsAuthAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("aalgNone", 1), ("aalgMd5Hmac", 2), ("aalgSha1Hmac", 3), ("aalgMd5Hmac96", 4), ("aalgSha1Hmac96", 5), ("aalgXRipeMd160Hmac96", 6), ("aalgXMd5", 7), ("aalgXSha1", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsAuthAlgorithm.setStatus('current')
hh3chipsLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsLocalIpAddr.setStatus('current')
hh3chipsSaLifeKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSaLifeKBytes.setStatus('current')
hh3chipsSaLifeSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSaLifeSecond.setStatus('current')
hh3chipsByCard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsByCard.setStatus('current')
hh3chipsNegotiateSaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("isakmp", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsNegotiateSaMode.setStatus('current')
hh3chipsExpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsExpBytes.setStatus('current')
hh3chipsSoftBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSoftBytes.setStatus('current')
hh3chipsExpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsExpTimeout.setStatus('current')
hh3chipsSoftTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsSoftTimeout.setStatus('current')
hh3chikeSATable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2), )
if mibBuilder.loadTexts: hh3chikeSATable.setStatus('current')
hh3chikeSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chikeConnId"))
if mibBuilder.loadTexts: hh3chikeSAEntry.setStatus('current')
hh3chikeConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikeConnId.setStatus('current')
hh3chikePeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikePeerIpAddr.setStatus('current')
hh3chikeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikeFlag.setStatus('current')
hh3chikePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unkown", 1), ("phase1", 2), ("phase2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikePhase.setStatus('current')
hh3chikeDoi = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unkown", 1), ("ipsec", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chikeDoi.setStatus('current')
hh3chikeClearSA = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chikeClearSA.setStatus('current')
hh3chipsIKEPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3), )
if mibBuilder.loadTexts: hh3chipsIKEPolicyTable.setStatus('current')
hh3chipsIKEPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsIsakmpPolPriority"))
if mibBuilder.loadTexts: hh3chipsIKEPolicyEntry.setStatus('current')
hh3chipsIsakmpPolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolPriority.setStatus('current')
hh3chipsIsakmpPolEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ikeEncryptNone", 1), ("ikeEncryptDesCbc", 2), ("ikeEncryptIdeaCbc", 3), ("ikeEncryptBlowfishcbc", 4), ("ikeEncryptRc5R16B64cbc", 5), ("ikeEncrypt3DesCbc", 6), ("ikeEncryptCastCbc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolEncr.setStatus('current')
hh3chipsIsakmpPolHash = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ikeHashNone", 1), ("ikeHashMd5", 2), ("ikeHashSha", 3), ("ikeHashTiger", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolHash.setStatus('current')
hh3chipsIsakmpPolAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ikeAuthPreNone", 1), ("ikeAuthPreShared", 2), ("ikeAuthDss", 3), ("ikeAuthRsaSig", 4), ("ikeAuthRsaEnc", 5), ("ikeAuthRsaEncRev", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolAuth.setStatus('current')
hh3chipsIsakmpPolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("dhGroup1", 2), ("dhGroup2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolGroup.setStatus('current')
hh3chipsIsakmpPolLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsakmpPolLifetime.setStatus('current')
hh3chipsStaticCryptomapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4), )
if mibBuilder.loadTexts: hh3chipsStaticCryptomapTable.setStatus('current')
hh3chipsStaticCryptomapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsStaticCryptomapName"), (0, "HH3C-NDEC-MIB", "hh3chipsStaticCryptomapSN"))
if mibBuilder.loadTexts: hh3chipsStaticCryptomapEntry.setStatus('current')
hh3chipsStaticCryptomapName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapName.setStatus('current')
hh3chipsStaticCryptomapSN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapSN.setStatus('current')
hh3chipsStaticCryptomapNegMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("isakmp", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapNegMode.setStatus('current')
hh3chipsStaticCryptomapMatchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapMatchAddr.setStatus('current')
hh3chipsStaticCryptomapPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapPeerIpAddr.setStatus('current')
hh3chipsStaticCryptomapTransforName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapTransforName.setStatus('current')
hh3chipsStaticCryptomapLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLifetime.setStatus('current')
hh3chipsStaticCryptomapLifesize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLifesize.setStatus('current')
hh3chipsStaticCryptomapLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsStaticCryptomapLocalIpAddr.setStatus('current')
hh3chipsIfNameUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIfNameUsed.setStatus('current')
hh3chipsInAHSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInAHSPI.setStatus('current')
hh3chipsInESPSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInESPSPI.setStatus('current')
hh3chipsOutAHSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutAHSPI.setStatus('current')
hh3chipsOutESPSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutESPSPI.setStatus('current')
hh3chipsInAhHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInAhHexKeyString.setStatus('current')
hh3chipsInEspCipherHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInEspCipherHexKeyString.setStatus('current')
hh3chipsInEspAuthenHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInEspAuthenHexKeyString.setStatus('current')
hh3chipsInAhStringKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInAhStringKeyString.setStatus('current')
hh3chipsInEspStringKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInEspStringKeyString.setStatus('current')
hh3chipsOutAhHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutAhHexKeyString.setStatus('current')
hh3chipsOutEspCipherHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutEspCipherHexKeyString.setStatus('current')
hh3chipsOutEspAuthenHexKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutEspAuthenHexKeyString.setStatus('current')
hh3chipsOutAhStringKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutAhStringKeyString.setStatus('current')
hh3chipsOutEspStringKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 4, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutEspStringKeyString.setStatus('current')
hh3chipsTransformNameSetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5), )
if mibBuilder.loadTexts: hh3chipsTransformNameSetTable.setStatus('current')
hh3chipsTransformNameSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsTransformName"))
if mibBuilder.loadTexts: hh3chipsTransformNameSetEntry.setStatus('current')
hh3chipsTransformName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsTransformName.setStatus('current')
hh3chipsTransformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsTransformMode.setStatus('current')
hh3chipsTransformProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ipsecNone", 1), ("ipsecAhNew", 2), ("ipsecAhEspNew", 3), ("ipsecAhEspOld", 4), ("ipsecAhOld", 5), ("ipsecEspNew", 6), ("ipsecEspAhNew", 7), ("ipsecEspAhOld", 8), ("ipsecEspOld", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsTransformProtocol.setStatus('current')
hh3chipsAH = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("aalgNone", 1), ("aalgMd5Hmac", 2), ("aalgSha1Hmac", 3), ("aalgMd5Hmac96", 4), ("aalgSha1Hmac96", 5), ("aalgXRipeMd160Hmac96", 6), ("aalgXMd5", 7), ("aalgXSha1", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsAH.setStatus('current')
hh3chipsEespEn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ealgNone", 1), ("ealgDescbc", 2), ("ealg3desCbc", 3), ("ealgXBlf", 4), ("ealgXCast", 5), ("ealgXSkipjack", 6), ("ealgXAes", 7), ("ealgXQc5", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsEespEn.setStatus('current')
hh3chipsEspAu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("aalgNone", 1), ("aalgMd5Hmac", 2), ("aalgSha1Hmac", 3), ("aalgMd5Hmac96", 4), ("aalgSha1Hmac96", 5), ("aalgXRipeMd160Hmac96", 6), ("aalgXMd5", 7), ("aalgXSha1", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsEspAu.setStatus('current')
hh3chipsIsCardTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsIsCardTransform.setStatus('current')
hh3chipsNDECInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6), )
if mibBuilder.loadTexts: hh3chipsNDECInfoTable.setStatus('current')
hh3chipsNDECInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1), ).setIndexNames((0, "HH3C-NDEC-MIB", "hh3chipsCardSlot"))
if mibBuilder.loadTexts: hh3chipsNDECInfoEntry.setStatus('current')
hh3chipsCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardSlot.setStatus('current')
hh3chipsInPac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInPac.setStatus('current')
hh3chipsOutPac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutPac.setStatus('current')
hh3chipsInByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsInByte.setStatus('current')
hh3chipsOutByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsOutByte.setStatus('current')
hh3chipsDropPac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsDropPac.setStatus('current')
hh3chipsCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ecStateInvalid", 1), ("ecStateReady", 2), ("ecStateResetting", 3), ("ecStateProgramUpdating", 4), ("ecStateDisable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardStatus.setStatus('current')
hh3chipsCardHardVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardHardVer.setStatus('current')
hh3chipsCardSoftVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardSoftVer.setStatus('current')
hh3chipsCardCPLDVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsCardCPLDVer.setStatus('current')
hh3chipsCardOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cardClearStatic", 1), ("cardReset", 2), ("cardSynTime", 3), ("cardSysLogOn", 4), ("cardSysLogOff", 5), ("cardSysLogClear", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chipsCardOperate.setStatus('current')
hh3chipsDropPacInUnitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 6, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsDropPacInUnitTime.setStatus('current')
hh3chipsNDECLeaf = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 7))
hh3chipsNDECConnections = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chipsNDECConnections.setStatus('current')
hh3chipsNDECBackup = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chipsNDECBackup.setStatus('current')
hh3chipsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 8))
hh3chipsNDECNormalResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 8, 1)).setObjects(("HH3C-NDEC-MIB", "hh3chipsCardSlot"), ("HH3C-NDEC-MIB", "hh3chipsCardHardVer"), ("HH3C-NDEC-MIB", "hh3chipsCardSoftVer"), ("HH3C-NDEC-MIB", "hh3chipsCardCPLDVer"))
if mibBuilder.loadTexts: hh3chipsNDECNormalResetTrap.setStatus('current')
hh3chipsNDECStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 8, 2)).setObjects(("HH3C-NDEC-MIB", "hh3chipsCardSlot"), ("HH3C-NDEC-MIB", "hh3chipsCardStatus"))
if mibBuilder.loadTexts: hh3chipsNDECStateChangeTrap.setStatus('current')
hh3chipsNDECFlowTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 36, 2, 8, 3)).setObjects(("HH3C-NDEC-MIB", "hh3chipsCardSlot"), ("HH3C-NDEC-MIB", "hh3chipsDropPacInUnitTime"))
if mibBuilder.loadTexts: hh3chipsNDECFlowTrap.setStatus('current')
mibBuilder.exportSymbols("HH3C-NDEC-MIB", hh3chipsOutEspCipherHexKeyString=hh3chipsOutEspCipherHexKeyString, hh3chipsTraps=hh3chipsTraps, hh3chipsIKEPolicyTable=hh3chipsIKEPolicyTable, hh3chipsStaticCryptomapNegMode=hh3chipsStaticCryptomapNegMode, hh3chipsCardCPLDVer=hh3chipsCardCPLDVer, hh3chipsTransformNameSetEntry=hh3chipsTransformNameSetEntry, hh3chipsLocalIpAddr=hh3chipsLocalIpAddr, hh3chipsSoftTimeout=hh3chipsSoftTimeout, hh3chipsIfNameUsed=hh3chipsIfNameUsed, hh3chipsInEspAuthenHexKeyString=hh3chipsInEspAuthenHexKeyString, hh3chipsOutEspStringKeyString=hh3chipsOutEspStringKeyString, hh3chipsStaticCryptomapMatchAddr=hh3chipsStaticCryptomapMatchAddr, hh3chipsNDECInfoEntry=hh3chipsNDECInfoEntry, hh3chipsStaticCryptomapSN=hh3chipsStaticCryptomapSN, hh3chipsNegotiateSaMode=hh3chipsNegotiateSaMode, hh3chipsStaticCryptomapLifetime=hh3chipsStaticCryptomapLifetime, hh3chikeSAEntry=hh3chikeSAEntry, hh3chipsExpTimeout=hh3chipsExpTimeout, hh3chipsNDECSAListEntry=hh3chipsNDECSAListEntry, hh3chipsIsakmpPolGroup=hh3chipsIsakmpPolGroup, hh3chipsNDECConnections=hh3chipsNDECConnections, hh3chipsPeerIpAddr=hh3chipsPeerIpAddr, hh3chikeClearSA=hh3chikeClearSA, hh3chipsEspAu=hh3chipsEspAu, hh3chipsStaticCryptomapLocalIpAddr=hh3chipsStaticCryptomapLocalIpAddr, hh3chipsNDECBackup=hh3chipsNDECBackup, hh3chipsExpBytes=hh3chipsExpBytes, hh3chipsSoftBytes=hh3chipsSoftBytes, hh3chipsAH=hh3chipsAH, hh3chipsStaticCryptomapPeerIpAddr=hh3chipsStaticCryptomapPeerIpAddr, hh3chipsNDECFlowTrap=hh3chipsNDECFlowTrap, hh3chipsTransformProtocol=hh3chipsTransformProtocol, hh3chipsOutPac=hh3chipsOutPac, hh3chipsOutByte=hh3chipsOutByte, hh3chipsCardOperate=hh3chipsCardOperate, hh3chikePeerIpAddr=hh3chikePeerIpAddr, hh3chipsIKEPolicyEntry=hh3chipsIKEPolicyEntry, hh3chipsTransformMode=hh3chipsTransformMode, hh3chipsIsakmpPolLifetime=hh3chipsIsakmpPolLifetime, hh3chipsStaticCryptomapEntry=hh3chipsStaticCryptomapEntry, hh3chipsTransformName=hh3chipsTransformName, hh3chipsInPac=hh3chipsInPac, hh3chipsInAHSPI=hh3chipsInAHSPI, hh3chipsCardSlot=hh3chipsCardSlot, hh3chipsSaLifeKBytes=hh3chipsSaLifeKBytes, hh3chipsInEspStringKeyString=hh3chipsInEspStringKeyString, hh3chipsEespEn=hh3chipsEespEn, hh3chipsIsakmpPolEncr=hh3chipsIsakmpPolEncr, hh3chipsInAhStringKeyString=hh3chipsInAhStringKeyString, hh3chipsStaticCryptomapTransforName=hh3chipsStaticCryptomapTransforName, hh3chipsSPI=hh3chipsSPI, hh3chipsCardStatus=hh3chipsCardStatus, hh3chipsSaLifeSecond=hh3chipsSaLifeSecond, hh3chipsCardHardVer=hh3chipsCardHardVer, hh3chikeSATable=hh3chikeSATable, hh3chipsNDECInfoTable=hh3chipsNDECInfoTable, hh3chipsOutEspAuthenHexKeyString=hh3chipsOutEspAuthenHexKeyString, hh3chipsTransformNameSetTable=hh3chipsTransformNameSetTable, hh3chipsEncAlgorithm=hh3chipsEncAlgorithm, hh3chipsAuthAlgorithm=hh3chipsAuthAlgorithm, hh3chipsOutAHSPI=hh3chipsOutAHSPI, hh3chipsNDECSAListTable=hh3chipsNDECSAListTable, PYSNMP_MODULE_ID=hh3cNDEC, hh3chipsIsakmpPolAuth=hh3chipsIsakmpPolAuth, hh3chipsCardSoftVer=hh3chipsCardSoftVer, hh3chipsNDECNormalResetTrap=hh3chipsNDECNormalResetTrap, hh3chipsProtocol=hh3chipsProtocol, hh3chipsInByte=hh3chipsInByte, hh3chipsIsakmpPolHash=hh3chipsIsakmpPolHash, hh3chipsNDECLeaf=hh3chipsNDECLeaf, hh3chipsOutAhStringKeyString=hh3chipsOutAhStringKeyString, hh3chikeConnId=hh3chikeConnId, hh3chipsInAhHexKeyString=hh3chipsInAhHexKeyString, hh3chikeFlag=hh3chikeFlag, hh3chipsNDECStateChangeTrap=hh3chipsNDECStateChangeTrap, hh3chipsDropPacInUnitTime=hh3chipsDropPacInUnitTime, hh3chikePhase=hh3chikePhase, hh3chipsDropPac=hh3chipsDropPac, hh3chipsInEspCipherHexKeyString=hh3chipsInEspCipherHexKeyString, hh3chikeDoi=hh3chikeDoi, hh3chipsStaticCryptomapTable=hh3chipsStaticCryptomapTable, hh3chipsStaticCryptomapLifesize=hh3chipsStaticCryptomapLifesize, hh3chipsIsCardTransform=hh3chipsIsCardTransform, hh3chipsOutAhHexKeyString=hh3chipsOutAhHexKeyString, hh3chipsOutESPSPI=hh3chipsOutESPSPI, hh3chipsInESPSPI=hh3chipsInESPSPI, hh3cNDEC=hh3cNDEC, hh3chipsIsakmpPolPriority=hh3chipsIsakmpPolPriority, hh3chipsByCard=hh3chipsByCard, hh3chipsStaticCryptomapName=hh3chipsStaticCryptomapName)
