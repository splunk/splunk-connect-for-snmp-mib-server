#
# PySNMP MIB module Nortel-Magellan-Passport-FrameRelayNniMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-FrameRelayNniMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:17:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
Unsigned32, PassportCounter64, Integer32, RowStatus, DisplayString, InterfaceIndex, Gauge32, RowPointer, Counter32, StorageType = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Unsigned32", "PassportCounter64", "Integer32", "RowStatus", "DisplayString", "InterfaceIndex", "Gauge32", "RowPointer", "Counter32", "StorageType")
HexString, NonReplicated, EnterpriseDateAndTime, Link, FixedPoint3, DigitString, AsciiString, Unsigned64, Hex = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "HexString", "NonReplicated", "EnterpriseDateAndTime", "Link", "FixedPoint3", "DigitString", "AsciiString", "Unsigned64", "Hex")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, iso, Integer32, Counter64, ObjectIdentity, NotificationType, Bits, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Integer32", "Counter64", "ObjectIdentity", "NotificationType", "Bits", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ModuleIdentity", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
frameRelayNniMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23))
frNni = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70))
frNniRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 1), )
if mibBuilder.loadTexts: frNniRowStatusTable.setStatus('mandatory')
frNniRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"))
if mibBuilder.loadTexts: frNniRowStatusEntry.setStatus('mandatory')
frNniRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniRowStatus.setStatus('mandatory')
frNniComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniComponentName.setStatus('mandatory')
frNniStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniStorageType.setStatus('mandatory')
frNniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: frNniIndex.setStatus('mandatory')
frNniCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 10), )
if mibBuilder.loadTexts: frNniCidDataTable.setStatus('mandatory')
frNniCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"))
if mibBuilder.loadTexts: frNniCidDataEntry.setStatus('mandatory')
frNniCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniCustomerIdentifier.setStatus('mandatory')
frNniStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11), )
if mibBuilder.loadTexts: frNniStateTable.setStatus('mandatory')
frNniStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"))
if mibBuilder.loadTexts: frNniStateEntry.setStatus('mandatory')
frNniAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniAdminState.setStatus('mandatory')
frNniOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniOperationalState.setStatus('mandatory')
frNniUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniUsageState.setStatus('mandatory')
frNniAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniAvailabilityStatus.setStatus('mandatory')
frNniProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniProceduralStatus.setStatus('mandatory')
frNniControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniControlStatus.setStatus('mandatory')
frNniAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniAlarmStatus.setStatus('mandatory')
frNniStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniStandbyStatus.setStatus('mandatory')
frNniUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniUnknownStatus.setStatus('mandatory')
frNniStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 12), )
if mibBuilder.loadTexts: frNniStatsTable.setStatus('mandatory')
frNniStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"))
if mibBuilder.loadTexts: frNniStatsEntry.setStatus('mandatory')
frNniLastUnknownDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLastUnknownDlci.setStatus('mandatory')
frNniUnknownDlciFramesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniUnknownDlciFramesFromIf.setStatus('mandatory')
frNniInvalidHeaderFramesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniInvalidHeaderFramesFromIf.setStatus('mandatory')
frNniIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 13), )
if mibBuilder.loadTexts: frNniIfEntryTable.setStatus('mandatory')
frNniIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"))
if mibBuilder.loadTexts: frNniIfEntryEntry.setStatus('mandatory')
frNniIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniIfAdminStatus.setStatus('mandatory')
frNniIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniIfIndex.setStatus('mandatory')
frNniOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 14), )
if mibBuilder.loadTexts: frNniOperStatusTable.setStatus('mandatory')
frNniOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"))
if mibBuilder.loadTexts: frNniOperStatusEntry.setStatus('mandatory')
frNniSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniSnmpOperStatus.setStatus('mandatory')
frNniEmissionPriorityQsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 15), )
if mibBuilder.loadTexts: frNniEmissionPriorityQsTable.setStatus('mandatory')
frNniEmissionPriorityQsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"))
if mibBuilder.loadTexts: frNniEmissionPriorityQsEntry.setStatus('mandatory')
frNniNumberOfEmissionQs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniNumberOfEmissionQs.setStatus('mandatory')
frNniFrmToIfByQueueTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 341), )
if mibBuilder.loadTexts: frNniFrmToIfByQueueTable.setStatus('mandatory')
frNniFrmToIfByQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 341, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniFrmToIfByQueueIndex"))
if mibBuilder.loadTexts: frNniFrmToIfByQueueEntry.setStatus('mandatory')
frNniFrmToIfByQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 341, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: frNniFrmToIfByQueueIndex.setStatus('mandatory')
frNniFrmToIfByQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 341, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFrmToIfByQueueValue.setStatus('mandatory')
frNniOctetToIfByQueueTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 342), )
if mibBuilder.loadTexts: frNniOctetToIfByQueueTable.setStatus('mandatory')
frNniOctetToIfByQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 342, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniOctetToIfByQueueIndex"))
if mibBuilder.loadTexts: frNniOctetToIfByQueueEntry.setStatus('mandatory')
frNniOctetToIfByQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 342, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: frNniOctetToIfByQueueIndex.setStatus('mandatory')
frNniOctetToIfByQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 342, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniOctetToIfByQueueValue.setStatus('mandatory')
frNniDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2))
frNniDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 1), )
if mibBuilder.loadTexts: frNniDnaRowStatusTable.setStatus('mandatory')
frNniDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"))
if mibBuilder.loadTexts: frNniDnaRowStatusEntry.setStatus('mandatory')
frNniDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaRowStatus.setStatus('mandatory')
frNniDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaComponentName.setStatus('mandatory')
frNniDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaStorageType.setStatus('mandatory')
frNniDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniDnaIndex.setStatus('mandatory')
frNniDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 10), )
if mibBuilder.loadTexts: frNniDnaAddressTable.setStatus('mandatory')
frNniDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"))
if mibBuilder.loadTexts: frNniDnaAddressEntry.setStatus('mandatory')
frNniDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaNumberingPlanIndicator.setStatus('mandatory')
frNniDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaDataNetworkAddress.setStatus('mandatory')
frNniDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11), )
if mibBuilder.loadTexts: frNniDnaOutgoingOptionsTable.setStatus('mandatory')
frNniDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"))
if mibBuilder.loadTexts: frNniDnaOutgoingOptionsEntry.setStatus('mandatory')
frNniDnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaOutDefaultPriority.setStatus('mandatory')
frNniDnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaOutDefaultPathSensitivity.setStatus('obsolete')
frNniDnaOutPathSensitivityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaOutPathSensitivityOverRide.setStatus('obsolete')
frNniDnaOutDefaultPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaOutDefaultPathReliability.setStatus('mandatory')
frNniDnaOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaOutAccess.setStatus('mandatory')
frNniDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaDefaultTransferPriority.setStatus('mandatory')
frNniDnaTransferPriorityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaTransferPriorityOverRide.setStatus('mandatory')
frNniDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 12), )
if mibBuilder.loadTexts: frNniDnaIncomingOptionsTable.setStatus('mandatory')
frNniDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"))
if mibBuilder.loadTexts: frNniDnaIncomingOptionsEntry.setStatus('mandatory')
frNniDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaIncAccess.setStatus('mandatory')
frNniDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 13), )
if mibBuilder.loadTexts: frNniDnaCallOptionsTable.setStatus('mandatory')
frNniDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"))
if mibBuilder.loadTexts: frNniDnaCallOptionsEntry.setStatus('mandatory')
frNniDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaAccountClass.setStatus('mandatory')
frNniDnaAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 13, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaAccountCollection.setStatus('mandatory')
frNniDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaServiceExchange.setStatus('mandatory')
frNniDnaEgressAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaEgressAccounting.setStatus('mandatory')
frNniDnaDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dprsOnly", 0), ("dprsMcsOnly", 1), ("dprsMcsFirst", 2))).clone('dprsOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaDataPath.setStatus('mandatory')
frNniDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2))
frNniDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 1), )
if mibBuilder.loadTexts: frNniDnaCugRowStatusTable.setStatus('mandatory')
frNniDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaCugIndex"))
if mibBuilder.loadTexts: frNniDnaCugRowStatusEntry.setStatus('mandatory')
frNniDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaCugRowStatus.setStatus('mandatory')
frNniDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaCugComponentName.setStatus('mandatory')
frNniDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaCugStorageType.setStatus('mandatory')
frNniDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: frNniDnaCugIndex.setStatus('mandatory')
frNniDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 10), )
if mibBuilder.loadTexts: frNniDnaCugCugOptionsTable.setStatus('mandatory')
frNniDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaCugIndex"))
if mibBuilder.loadTexts: frNniDnaCugCugOptionsEntry.setStatus('mandatory')
frNniDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaCugType.setStatus('mandatory')
frNniDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaCugDnic.setStatus('mandatory')
frNniDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaCugInterlockCode.setStatus('mandatory')
frNniDnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaCugPreferential.setStatus('mandatory')
frNniDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaCugOutCalls.setStatus('mandatory')
frNniDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaCugIncCalls.setStatus('mandatory')
frNniDnaHgM = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3))
frNniDnaHgMRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 1), )
if mibBuilder.loadTexts: frNniDnaHgMRowStatusTable.setStatus('mandatory')
frNniDnaHgMRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaHgMIndex"))
if mibBuilder.loadTexts: frNniDnaHgMRowStatusEntry.setStatus('mandatory')
frNniDnaHgMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaHgMRowStatus.setStatus('mandatory')
frNniDnaHgMComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaHgMComponentName.setStatus('mandatory')
frNniDnaHgMStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaHgMStorageType.setStatus('mandatory')
frNniDnaHgMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniDnaHgMIndex.setStatus('mandatory')
frNniDnaHgMIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 10), )
if mibBuilder.loadTexts: frNniDnaHgMIfTable.setStatus('mandatory')
frNniDnaHgMIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaHgMIndex"))
if mibBuilder.loadTexts: frNniDnaHgMIfEntry.setStatus('mandatory')
frNniDnaHgMAvailabilityUpdateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2048, 16777216)).clone(8192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaHgMAvailabilityUpdateThreshold.setStatus('mandatory')
frNniDnaHgMOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 11), )
if mibBuilder.loadTexts: frNniDnaHgMOpTable.setStatus('mandatory')
frNniDnaHgMOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaHgMIndex"))
if mibBuilder.loadTexts: frNniDnaHgMOpEntry.setStatus('mandatory')
frNniDnaHgMMaximumAvailableAggregateCir = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaHgMMaximumAvailableAggregateCir.setStatus('mandatory')
frNniDnaHgMAvailableAggregateCir = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaHgMAvailableAggregateCir.setStatus('mandatory')
frNniDnaHgMAvailabilityDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-16777216, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaHgMAvailabilityDelta.setStatus('mandatory')
frNniDnaHgMAvailableDlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaHgMAvailableDlcis.setStatus('mandatory')
frNniDnaHgMHgAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2))
frNniDnaHgMHgAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 1), )
if mibBuilder.loadTexts: frNniDnaHgMHgAddrRowStatusTable.setStatus('mandatory')
frNniDnaHgMHgAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaHgMIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: frNniDnaHgMHgAddrRowStatusEntry.setStatus('mandatory')
frNniDnaHgMHgAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaHgMHgAddrRowStatus.setStatus('mandatory')
frNniDnaHgMHgAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaHgMHgAddrComponentName.setStatus('mandatory')
frNniDnaHgMHgAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDnaHgMHgAddrStorageType.setStatus('mandatory')
frNniDnaHgMHgAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: frNniDnaHgMHgAddrIndex.setStatus('mandatory')
frNniDnaHgMHgAddrAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 10), )
if mibBuilder.loadTexts: frNniDnaHgMHgAddrAddrTable.setStatus('mandatory')
frNniDnaHgMHgAddrAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaHgMIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: frNniDnaHgMHgAddrAddrEntry.setStatus('mandatory')
frNniDnaHgMHgAddrNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaHgMHgAddrNumberingPlanIndicator.setStatus('mandatory')
frNniDnaHgMHgAddrDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 2, 3, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDnaHgMHgAddrDataNetworkAddress.setStatus('mandatory')
frNniFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3))
frNniFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 1), )
if mibBuilder.loadTexts: frNniFramerRowStatusTable.setStatus('mandatory')
frNniFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniFramerIndex"))
if mibBuilder.loadTexts: frNniFramerRowStatusEntry.setStatus('mandatory')
frNniFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniFramerRowStatus.setStatus('mandatory')
frNniFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerComponentName.setStatus('mandatory')
frNniFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerStorageType.setStatus('mandatory')
frNniFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniFramerIndex.setStatus('mandatory')
frNniFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 10), )
if mibBuilder.loadTexts: frNniFramerProvTable.setStatus('mandatory')
frNniFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniFramerIndex"))
if mibBuilder.loadTexts: frNniFramerProvEntry.setStatus('mandatory')
frNniFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniFramerInterfaceName.setStatus('mandatory')
frNniFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 11), )
if mibBuilder.loadTexts: frNniFramerLinkTable.setStatus('mandatory')
frNniFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniFramerIndex"))
if mibBuilder.loadTexts: frNniFramerLinkEntry.setStatus('mandatory')
frNniFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniFramerFlagsBetweenFrames.setStatus('mandatory')
frNniFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 12), )
if mibBuilder.loadTexts: frNniFramerStateTable.setStatus('mandatory')
frNniFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniFramerIndex"))
if mibBuilder.loadTexts: frNniFramerStateEntry.setStatus('mandatory')
frNniFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerAdminState.setStatus('mandatory')
frNniFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerOperationalState.setStatus('mandatory')
frNniFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerUsageState.setStatus('mandatory')
frNniFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13), )
if mibBuilder.loadTexts: frNniFramerStatsTable.setStatus('mandatory')
frNniFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniFramerIndex"))
if mibBuilder.loadTexts: frNniFramerStatsEntry.setStatus('mandatory')
frNniFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerFrmToIf.setStatus('mandatory')
frNniFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerFrmFromIf.setStatus('mandatory')
frNniFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerOctetFromIf.setStatus('mandatory')
frNniFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerAborts.setStatus('mandatory')
frNniFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerCrcErrors.setStatus('mandatory')
frNniFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerLrcErrors.setStatus('mandatory')
frNniFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerNonOctetErrors.setStatus('mandatory')
frNniFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerOverruns.setStatus('mandatory')
frNniFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerUnderruns.setStatus('mandatory')
frNniFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerLargeFrmErrors.setStatus('mandatory')
frNniFramerFrmModeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerFrmModeErrors.setStatus('mandatory')
frNniFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 14), )
if mibBuilder.loadTexts: frNniFramerUtilTable.setStatus('mandatory')
frNniFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniFramerIndex"))
if mibBuilder.loadTexts: frNniFramerUtilEntry.setStatus('mandatory')
frNniFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerNormPrioLinkUtilToIf.setStatus('mandatory')
frNniFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 3, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
frNniLmi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4))
frNniLmiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 1), )
if mibBuilder.loadTexts: frNniLmiRowStatusTable.setStatus('mandatory')
frNniLmiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLmiIndex"))
if mibBuilder.loadTexts: frNniLmiRowStatusEntry.setStatus('mandatory')
frNniLmiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiRowStatus.setStatus('mandatory')
frNniLmiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiComponentName.setStatus('mandatory')
frNniLmiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiStorageType.setStatus('mandatory')
frNniLmiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniLmiIndex.setStatus('mandatory')
frNniLmiParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 10), )
if mibBuilder.loadTexts: frNniLmiParmsTable.setStatus('mandatory')
frNniLmiParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLmiIndex"))
if mibBuilder.loadTexts: frNniLmiParmsEntry.setStatus('mandatory')
frNniLmiProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ansi", 2), ("itu", 3), ("autoConfigure", 4))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLmiProcedures.setStatus('mandatory')
frNniLmiAsyncStatusReport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLmiAsyncStatusReport.setStatus('mandatory')
frNniLmiErrorEventThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLmiErrorEventThreshold.setStatus('mandatory')
frNniLmiEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLmiEventCount.setStatus('mandatory')
frNniLmiCheckPointTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), )).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLmiCheckPointTimer.setStatus('mandatory')
frNniLmiIgnoreActiveBit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLmiIgnoreActiveBit.setStatus('mandatory')
frNniLmiNniParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 11), )
if mibBuilder.loadTexts: frNniLmiNniParmsTable.setStatus('mandatory')
frNniLmiNniParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLmiIndex"))
if mibBuilder.loadTexts: frNniLmiNniParmsEntry.setStatus('mandatory')
frNniLmiFullStatusPollingCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLmiFullStatusPollingCycles.setStatus('mandatory')
frNniLmiLinkVerificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), )).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLmiLinkVerificationTimer.setStatus('mandatory')
frNniLmiStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 12), )
if mibBuilder.loadTexts: frNniLmiStateTable.setStatus('mandatory')
frNniLmiStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLmiIndex"))
if mibBuilder.loadTexts: frNniLmiStateEntry.setStatus('mandatory')
frNniLmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiAdminState.setStatus('mandatory')
frNniLmiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiOperationalState.setStatus('mandatory')
frNniLmiUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiUsageState.setStatus('mandatory')
frNniLmiPsiTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 13), )
if mibBuilder.loadTexts: frNniLmiPsiTable.setStatus('mandatory')
frNniLmiPsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLmiIndex"))
if mibBuilder.loadTexts: frNniLmiPsiEntry.setStatus('mandatory')
frNniLmiProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("errorCondition", 0), ("normalCondition", 1), ("configuring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiProtocolStatus.setStatus('mandatory')
frNniLmiOpProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ansi", 2), ("itu", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiOpProcedures.setStatus('mandatory')
frNniLmiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14), )
if mibBuilder.loadTexts: frNniLmiStatsTable.setStatus('mandatory')
frNniLmiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLmiIndex"))
if mibBuilder.loadTexts: frNniLmiStatsEntry.setStatus('mandatory')
frNniLmiKeepAliveStatusToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiKeepAliveStatusToIf.setStatus('mandatory')
frNniLmiFullStatusToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiFullStatusToIf.setStatus('mandatory')
frNniLmiKeepAliveStatusEnqFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiKeepAliveStatusEnqFromIf.setStatus('mandatory')
frNniLmiFullStatusEnqFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiFullStatusEnqFromIf.setStatus('mandatory')
frNniLmiNetworkSideEventHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiNetworkSideEventHistory.setStatus('mandatory')
frNniLmiUserSideEventHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiUserSideEventHistory.setStatus('mandatory')
frNniLmiProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiProtocolErrors.setStatus('mandatory')
frNniLmiUnexpectedIes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiUnexpectedIes.setStatus('mandatory')
frNniLmiSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiSequenceErrors.setStatus('mandatory')
frNniLmiStatusSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiStatusSequenceErrors.setStatus('mandatory')
frNniLmiUnexpectedReports = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiUnexpectedReports.setStatus('mandatory')
frNniLmiPollingVerifTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiPollingVerifTimeouts.setStatus('mandatory')
frNniLmiNoStatusReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 4, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLmiNoStatusReportCount.setStatus('mandatory')
frNniDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5))
frNniDlciRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 1), )
if mibBuilder.loadTexts: frNniDlciRowStatusTable.setStatus('mandatory')
frNniDlciRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"))
if mibBuilder.loadTexts: frNniDlciRowStatusEntry.setStatus('mandatory')
frNniDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciRowStatus.setStatus('mandatory')
frNniDlciComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciComponentName.setStatus('mandatory')
frNniDlciStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciStorageType.setStatus('mandatory')
frNniDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: frNniDlciIndex.setStatus('mandatory')
frNniDlciStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10), )
if mibBuilder.loadTexts: frNniDlciStateTable.setStatus('mandatory')
frNniDlciStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"))
if mibBuilder.loadTexts: frNniDlciStateEntry.setStatus('mandatory')
frNniDlciAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciAdminState.setStatus('mandatory')
frNniDlciOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciOperationalState.setStatus('mandatory')
frNniDlciUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciUsageState.setStatus('mandatory')
frNniDlciAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciAvailabilityStatus.setStatus('mandatory')
frNniDlciProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciProceduralStatus.setStatus('mandatory')
frNniDlciControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciControlStatus.setStatus('mandatory')
frNniDlciAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciAlarmStatus.setStatus('mandatory')
frNniDlciStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciStandbyStatus.setStatus('mandatory')
frNniDlciUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciUnknownStatus.setStatus('mandatory')
frNniDlciAbitTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 12), )
if mibBuilder.loadTexts: frNniDlciAbitTable.setStatus('mandatory')
frNniDlciAbitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"))
if mibBuilder.loadTexts: frNniDlciAbitEntry.setStatus('mandatory')
frNniDlciABitStatusToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciABitStatusToIf.setStatus('mandatory')
frNniDlciABitReasonToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 0), ("remoteUserSignaled", 1), ("localLmiError", 2), ("remoteLmiError", 3), ("localLinkDown", 4), ("remoteLinkDown", 5), ("pvcDown", 6))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciABitReasonToIf.setStatus('mandatory')
frNniDlciABitStatusFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciABitStatusFromIf.setStatus('mandatory')
frNniDlciABitReasonFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 7))).clone(namedValues=NamedValues(("notApplicable", 0), ("remoteUserSignaled", 1), ("localLmiError", 2), ("localLinkDown", 4), ("missingFromLmiReport", 7))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciABitReasonFromIf.setStatus('mandatory')
frNniDlciLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLoopbackState.setStatus('mandatory')
frNniDlciSpOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13), )
if mibBuilder.loadTexts: frNniDlciSpOpTable.setStatus('mandatory')
frNniDlciSpOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"))
if mibBuilder.loadTexts: frNniDlciSpOpEntry.setStatus('mandatory')
frNniDlciMaximumFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8187))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciMaximumFrameSize.setStatus('mandatory')
frNniDlciRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciRateEnforcement.setStatus('obsolete')
frNniDlciCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciCommittedInformationRate.setStatus('mandatory')
frNniDlciCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciCommittedBurstSize.setStatus('mandatory')
frNniDlciExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciExcessBurstSize.setStatus('mandatory')
frNniDlciMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciMeasurementInterval.setStatus('mandatory')
frNniDlciRateAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("eirOnly", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciRateAdaptation.setStatus('obsolete')
frNniDlciAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciAccounting.setStatus('mandatory')
frNniDlciEmissionPriorityToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciEmissionPriorityToIf.setStatus('mandatory')
frNniDlciTransferPriToNwk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciTransferPriToNwk.setStatus('mandatory')
frNniDlciTransferPriFromNwk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 13, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciTransferPriFromNwk.setStatus('mandatory')
frNniDlciStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14), )
if mibBuilder.loadTexts: frNniDlciStatsTable.setStatus('mandatory')
frNniDlciStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"))
if mibBuilder.loadTexts: frNniDlciStatsEntry.setStatus('mandatory')
frNniDlciFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciFrmToIf.setStatus('mandatory')
frNniDlciFecnFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciFecnFrmToIf.setStatus('mandatory')
frNniDlciBecnFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciBecnFrmToIf.setStatus('mandatory')
frNniDlciBciToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciBciToSubnet.setStatus('mandatory')
frNniDlciDeFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDeFrmToIf.setStatus('mandatory')
frNniDlciDiscCongestedToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscCongestedToIf.setStatus('mandatory')
frNniDlciDiscDeCongestedToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscDeCongestedToIf.setStatus('mandatory')
frNniDlciFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciFrmFromIf.setStatus('mandatory')
frNniDlciFecnFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciFecnFrmFromIf.setStatus('mandatory')
frNniDlciBecnFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciBecnFrmFromIf.setStatus('mandatory')
frNniDlciFciFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciFciFromSubnet.setStatus('mandatory')
frNniDlciBciFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciBciFromSubnet.setStatus('mandatory')
frNniDlciDeFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDeFrmFromIf.setStatus('mandatory')
frNniDlciExcessFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciExcessFrmFromIf.setStatus('mandatory')
frNniDlciDiscExcessFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscExcessFromIf.setStatus('mandatory')
frNniDlciDiscFrameAbit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscFrameAbit.setStatus('mandatory')
frNniDlciDiscCongestedFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscCongestedFromIf.setStatus('mandatory')
frNniDlciDiscDeCongestedFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscDeCongestedFromIf.setStatus('mandatory')
frNniDlciErrorShortFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciErrorShortFrmFromIf.setStatus('mandatory')
frNniDlciErrorLongFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciErrorLongFrmFromIf.setStatus('mandatory')
frNniDlciBecnFrmSetByService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciBecnFrmSetByService.setStatus('mandatory')
frNniDlciBytesToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciBytesToIf.setStatus('mandatory')
frNniDlciDeBytesToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDeBytesToIf.setStatus('mandatory')
frNniDlciDiscCongestedToIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscCongestedToIfBytes.setStatus('mandatory')
frNniDlciDiscDeCongestedToIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscDeCongestedToIfBytes.setStatus('mandatory')
frNniDlciBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciBytesFromIf.setStatus('mandatory')
frNniDlciDeBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDeBytesFromIf.setStatus('mandatory')
frNniDlciExcessBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciExcessBytesFromIf.setStatus('mandatory')
frNniDlciDiscExcessFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscExcessFromIfBytes.setStatus('mandatory')
frNniDlciDiscByteAbit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscByteAbit.setStatus('mandatory')
frNniDlciDiscCongestedFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscCongestedFromIfBytes.setStatus('mandatory')
frNniDlciDiscDeCongestedFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscDeCongestedFromIfBytes.setStatus('mandatory')
frNniDlciErrorShortBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciErrorShortBytesFromIf.setStatus('mandatory')
frNniDlciErrorLongBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciErrorLongBytesFromIf.setStatus('mandatory')
frNniDlciRateAdaptReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciRateAdaptReduct.setStatus('mandatory')
frNniDlciRateAdaptReductPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciRateAdaptReductPeriod.setStatus('mandatory')
frNniDlciTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciTransferPriorityToNetwork.setStatus('obsolete')
frNniDlciTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciTransferPriorityFromNetwork.setStatus('obsolete')
frNniDlciCirPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciCirPresent.setStatus('mandatory')
frNniDlciEirPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 14, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciEirPresent.setStatus('mandatory')
frNniDlciIntTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15), )
if mibBuilder.loadTexts: frNniDlciIntTable.setStatus('mandatory')
frNniDlciIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"))
if mibBuilder.loadTexts: frNniDlciIntEntry.setStatus('mandatory')
frNniDlciStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 1), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciStartTime.setStatus('mandatory')
frNniDlciTotalIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 2), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciTotalIngressBytes.setStatus('mandatory')
frNniDlciTotalEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 3), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciTotalEgressBytes.setStatus('mandatory')
frNniDlciEirIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 4), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciEirIngressBytes.setStatus('mandatory')
frNniDlciEirEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 5), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciEirEgressBytes.setStatus('mandatory')
frNniDlciDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 6), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscardedBytes.setStatus('mandatory')
frNniDlciTotalIngressSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciTotalIngressSegFrm.setStatus('mandatory')
frNniDlciTotalEgressSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciTotalEgressSegFrm.setStatus('mandatory')
frNniDlciEirIngressSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciEirIngressSegFrm.setStatus('mandatory')
frNniDlciEirEgressSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciEirEgressSegFrm.setStatus('mandatory')
frNniDlciDiscardedSegFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDiscardedSegFrm.setStatus('mandatory')
frNniDlciCirPresentObs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciCirPresentObs.setStatus('obsolete')
frNniDlciEirPresentObs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciEirPresentObs.setStatus('obsolete')
frNniDlciRateEnforcementPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciRateEnforcementPresent.setStatus('obsolete')
frNniDlciRateAdaptationPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciRateAdaptationPresent.setStatus('obsolete')
frNniDlciLocalRateAdaptOccurred = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLocalRateAdaptOccurred.setStatus('mandatory')
frNniDlciCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 17), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciCallReferenceNumber.setStatus('mandatory')
frNniDlciElapsedDifference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 15, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciElapsedDifference.setStatus('mandatory')
frNniDlciDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2))
frNniDlciDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 1), )
if mibBuilder.loadTexts: frNniDlciDcRowStatusTable.setStatus('mandatory')
frNniDlciDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciDcIndex"))
if mibBuilder.loadTexts: frNniDlciDcRowStatusEntry.setStatus('mandatory')
frNniDlciDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDcRowStatus.setStatus('mandatory')
frNniDlciDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDcComponentName.setStatus('mandatory')
frNniDlciDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciDcStorageType.setStatus('mandatory')
frNniDlciDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniDlciDcIndex.setStatus('mandatory')
frNniDlciDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10), )
if mibBuilder.loadTexts: frNniDlciDcOptionsTable.setStatus('mandatory')
frNniDlciDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciDcIndex"))
if mibBuilder.loadTexts: frNniDlciDcOptionsEntry.setStatus('mandatory')
frNniDlciDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcRemoteNpi.setStatus('mandatory')
frNniDlciDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcRemoteDna.setStatus('mandatory')
frNniDlciDcRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcRemoteDlci.setStatus('mandatory')
frNniDlciDcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("permanentMaster", 1), ("permanentSlave", 2), ("permanentBackupSlave", 3), ("permanentSlaveWithBackup", 4))).clone('permanentMaster')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcType.setStatus('mandatory')
frNniDlciDcTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("useDnaDefTP", 255))).clone('useDnaDefTP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcTransferPriority.setStatus('mandatory')
frNniDlciDcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("useDnaDefPriority", 3))).clone('useDnaDefPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcDiscardPriority.setStatus('mandatory')
frNniDlciDcDeDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lowest", 0), ("determinedByDiscardPriority", 1))).clone('determinedByDiscardPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcDeDiscardPriority.setStatus('mandatory')
frNniDlciDcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dprsOnly", 0), ("dprsMcsOnly", 1), ("dprsMcsFirst", 2), ("useDnaValue", 3))).clone('useDnaValue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcDataPath.setStatus('mandatory')
frNniDlciDcCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcCugIndex.setStatus('mandatory')
frNniDlciDcCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 9))).clone(namedValues=NamedValues(("doNotSignal", 0), ("cug", 3), ("cugOa", 9))).clone('doNotSignal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcCugType.setStatus('mandatory')
frNniDlciDcNfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 202), )
if mibBuilder.loadTexts: frNniDlciDcNfaTable.setStatus('obsolete')
frNniDlciDcNfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 202, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciDcIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciDcNfaIndex"))
if mibBuilder.loadTexts: frNniDlciDcNfaEntry.setStatus('obsolete')
frNniDlciDcNfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 202, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(48, 48), )))
if mibBuilder.loadTexts: frNniDlciDcNfaIndex.setStatus('obsolete')
frNniDlciDcNfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 202, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciDcNfaValue.setStatus('obsolete')
frNniDlciDcNfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 2, 202, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frNniDlciDcNfaRowStatus.setStatus('obsolete')
frNniDlciVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3))
frNniDlciVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 1), )
if mibBuilder.loadTexts: frNniDlciVcRowStatusTable.setStatus('mandatory')
frNniDlciVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciVcIndex"))
if mibBuilder.loadTexts: frNniDlciVcRowStatusEntry.setStatus('mandatory')
frNniDlciVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcRowStatus.setStatus('mandatory')
frNniDlciVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcComponentName.setStatus('mandatory')
frNniDlciVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcStorageType.setStatus('mandatory')
frNniDlciVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniDlciVcIndex.setStatus('mandatory')
frNniDlciVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10), )
if mibBuilder.loadTexts: frNniDlciVcCadTable.setStatus('mandatory')
frNniDlciVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciVcIndex"))
if mibBuilder.loadTexts: frNniDlciVcCadEntry.setStatus('mandatory')
frNniDlciVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcType.setStatus('mandatory')
frNniDlciVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcState.setStatus('mandatory')
frNniDlciVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPreviousState.setStatus('mandatory')
frNniDlciVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcDiagnosticCode.setStatus('mandatory')
frNniDlciVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPreviousDiagnosticCode.setStatus('mandatory')
frNniDlciVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCalledNpi.setStatus('mandatory')
frNniDlciVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCalledDna.setStatus('mandatory')
frNniDlciVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCalledLcn.setStatus('mandatory')
frNniDlciVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCallingNpi.setStatus('mandatory')
frNniDlciVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCallingDna.setStatus('mandatory')
frNniDlciVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCallingLcn.setStatus('mandatory')
frNniDlciVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcAccountingEnabled.setStatus('mandatory')
frNniDlciVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcFastSelectCall.setStatus('mandatory')
frNniDlciVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPathReliability.setStatus('mandatory')
frNniDlciVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcAccountingEnd.setStatus('mandatory')
frNniDlciVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPriority.setStatus('mandatory')
frNniDlciVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcSegmentSize.setStatus('mandatory')
frNniDlciVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcMaxSubnetPktSize.setStatus('mandatory')
frNniDlciVcRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcRcosToNetwork.setStatus('mandatory')
frNniDlciVcRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcRcosFromNetwork.setStatus('mandatory')
frNniDlciVcEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcEmissionPriorityToNetwork.setStatus('mandatory')
frNniDlciVcEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcEmissionPriorityFromNetwork.setStatus('mandatory')
frNniDlciVcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcDataPath.setStatus('mandatory')
frNniDlciVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 11), )
if mibBuilder.loadTexts: frNniDlciVcIntdTable.setStatus('mandatory')
frNniDlciVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciVcIndex"))
if mibBuilder.loadTexts: frNniDlciVcIntdEntry.setStatus('mandatory')
frNniDlciVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCallReferenceNumber.setStatus('mandatory')
frNniDlciVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcElapsedTimeTillNow.setStatus('mandatory')
frNniDlciVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcSegmentsRx.setStatus('mandatory')
frNniDlciVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcSegmentsSent.setStatus('mandatory')
frNniDlciVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcStartTime.setStatus('mandatory')
frNniDlciVcFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12), )
if mibBuilder.loadTexts: frNniDlciVcFrdTable.setStatus('mandatory')
frNniDlciVcFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciVcIndex"))
if mibBuilder.loadTexts: frNniDlciVcFrdEntry.setStatus('mandatory')
frNniDlciVcFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcFrmCongestedToSubnet.setStatus('mandatory')
frNniDlciVcCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCannotForwardToSubnet.setStatus('mandatory')
frNniDlciVcNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcNotDataXferToSubnet.setStatus('mandatory')
frNniDlciVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
frNniDlciVcCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcCombErrorsFromSubnet.setStatus('mandatory')
frNniDlciVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcDuplicatesFromSubnet.setStatus('mandatory')
frNniDlciVcNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcNotDataXferFromSubnet.setStatus('mandatory')
frNniDlciVcFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcFrmLossTimeouts.setStatus('mandatory')
frNniDlciVcOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcOoSeqByteCntExceeded.setStatus('mandatory')
frNniDlciVcPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPeakOoSeqPktCount.setStatus('mandatory')
frNniDlciVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPeakOoSeqFrmForwarded.setStatus('mandatory')
frNniDlciVcSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcSendSequenceNumber.setStatus('mandatory')
frNniDlciVcPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPktRetryTimeouts.setStatus('mandatory')
frNniDlciVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPeakRetryQueueSize.setStatus('mandatory')
frNniDlciVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcSubnetRecoveries.setStatus('mandatory')
frNniDlciVcOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcOoSeqPktCntExceeded.setStatus('mandatory')
frNniDlciVcPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcPeakOoSeqByteCount.setStatus('mandatory')
frNniDlciVcDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 417), )
if mibBuilder.loadTexts: frNniDlciVcDmepTable.setStatus('mandatory')
frNniDlciVcDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 417, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciVcIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciVcDmepValue"))
if mibBuilder.loadTexts: frNniDlciVcDmepEntry.setStatus('mandatory')
frNniDlciVcDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 3, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciVcDmepValue.setStatus('mandatory')
frNniDlciSp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4))
frNniDlciSpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 1), )
if mibBuilder.loadTexts: frNniDlciSpRowStatusTable.setStatus('mandatory')
frNniDlciSpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciSpIndex"))
if mibBuilder.loadTexts: frNniDlciSpRowStatusEntry.setStatus('mandatory')
frNniDlciSpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciSpRowStatus.setStatus('mandatory')
frNniDlciSpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciSpComponentName.setStatus('mandatory')
frNniDlciSpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciSpStorageType.setStatus('mandatory')
frNniDlciSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniDlciSpIndex.setStatus('mandatory')
frNniDlciSpParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11), )
if mibBuilder.loadTexts: frNniDlciSpParmsTable.setStatus('mandatory')
frNniDlciSpParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciSpIndex"))
if mibBuilder.loadTexts: frNniDlciSpParmsEntry.setStatus('mandatory')
frNniDlciSpMaximumFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8187)).clone(2100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpMaximumFrameSize.setStatus('mandatory')
frNniDlciSpRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpRateEnforcement.setStatus('mandatory')
frNniDlciSpCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpCommittedInformationRate.setStatus('mandatory')
frNniDlciSpCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpCommittedBurstSize.setStatus('mandatory')
frNniDlciSpExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpExcessBurstSize.setStatus('mandatory')
frNniDlciSpMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpMeasurementInterval.setStatus('mandatory')
frNniDlciSpRateAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("eirOnly", 2), ("cirProportionate", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpRateAdaptation.setStatus('mandatory')
frNniDlciSpAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpAccounting.setStatus('mandatory')
frNniDlciSpRaSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpRaSensitivity.setStatus('mandatory')
frNniDlciSpUpdateBCI = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 4, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniDlciSpUpdateBCI.setStatus('mandatory')
frNniDlciLb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5))
frNniDlciLbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 1), )
if mibBuilder.loadTexts: frNniDlciLbRowStatusTable.setStatus('mandatory')
frNniDlciLbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciLbIndex"))
if mibBuilder.loadTexts: frNniDlciLbRowStatusEntry.setStatus('mandatory')
frNniDlciLbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbRowStatus.setStatus('mandatory')
frNniDlciLbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbComponentName.setStatus('mandatory')
frNniDlciLbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbStorageType.setStatus('mandatory')
frNniDlciLbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniDlciLbIndex.setStatus('mandatory')
frNniDlciLbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10), )
if mibBuilder.loadTexts: frNniDlciLbStatsTable.setStatus('mandatory')
frNniDlciLbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniDlciLbIndex"))
if mibBuilder.loadTexts: frNniDlciLbStatsEntry.setStatus('mandatory')
frNniDlciLbLocalTotalFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbLocalTotalFrm.setStatus('mandatory')
frNniDlciLbLocalTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbLocalTotalBytes.setStatus('mandatory')
frNniDlciLbLocalFecnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbLocalFecnFrm.setStatus('mandatory')
frNniDlciLbLocalBecnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbLocalBecnFrm.setStatus('mandatory')
frNniDlciLbLocalDeFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbLocalDeFrm.setStatus('mandatory')
frNniDlciLbLocalDeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbLocalDeBytes.setStatus('mandatory')
frNniDlciLbRemoteTotalFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbRemoteTotalFrm.setStatus('mandatory')
frNniDlciLbRemoteTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbRemoteTotalBytes.setStatus('mandatory')
frNniDlciLbRemoteFecnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbRemoteFecnFrm.setStatus('mandatory')
frNniDlciLbRemoteBecnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbRemoteBecnFrm.setStatus('mandatory')
frNniDlciLbRemoteDeFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbRemoteDeFrm.setStatus('mandatory')
frNniDlciLbRemoteDeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 5, 5, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniDlciLbRemoteDeBytes.setStatus('mandatory')
frNniVFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6))
frNniVFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 1), )
if mibBuilder.loadTexts: frNniVFramerRowStatusTable.setStatus('mandatory')
frNniVFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniVFramerIndex"))
if mibBuilder.loadTexts: frNniVFramerRowStatusEntry.setStatus('mandatory')
frNniVFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniVFramerRowStatus.setStatus('mandatory')
frNniVFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniVFramerComponentName.setStatus('mandatory')
frNniVFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniVFramerStorageType.setStatus('mandatory')
frNniVFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniVFramerIndex.setStatus('mandatory')
frNniVFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 10), )
if mibBuilder.loadTexts: frNniVFramerProvTable.setStatus('mandatory')
frNniVFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniVFramerIndex"))
if mibBuilder.loadTexts: frNniVFramerProvEntry.setStatus('mandatory')
frNniVFramerOtherVirtualFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniVFramerOtherVirtualFramer.setStatus('mandatory')
frNniVFramerLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 10, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniVFramerLogicalProcessor.setStatus('mandatory')
frNniVFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 11), )
if mibBuilder.loadTexts: frNniVFramerStateTable.setStatus('mandatory')
frNniVFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniVFramerIndex"))
if mibBuilder.loadTexts: frNniVFramerStateEntry.setStatus('mandatory')
frNniVFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniVFramerAdminState.setStatus('mandatory')
frNniVFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniVFramerOperationalState.setStatus('mandatory')
frNniVFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniVFramerUsageState.setStatus('mandatory')
frNniVFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 12), )
if mibBuilder.loadTexts: frNniVFramerStatsTable.setStatus('mandatory')
frNniVFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniVFramerIndex"))
if mibBuilder.loadTexts: frNniVFramerStatsEntry.setStatus('mandatory')
frNniVFramerFrmToOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 12, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniVFramerFrmToOtherVFramer.setStatus('mandatory')
frNniVFramerFrmFromOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 12, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniVFramerFrmFromOtherVFramer.setStatus('mandatory')
frNniVFramerOctetFromOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 6, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniVFramerOctetFromOtherVFramer.setStatus('mandatory')
frNniLts = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9))
frNniLtsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 1), )
if mibBuilder.loadTexts: frNniLtsRowStatusTable.setStatus('mandatory')
frNniLtsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"))
if mibBuilder.loadTexts: frNniLtsRowStatusEntry.setStatus('mandatory')
frNniLtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsRowStatus.setStatus('mandatory')
frNniLtsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsComponentName.setStatus('mandatory')
frNniLtsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsStorageType.setStatus('mandatory')
frNniLtsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frNniLtsIndex.setStatus('mandatory')
frNniLtsSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 10), )
if mibBuilder.loadTexts: frNniLtsSetupTable.setStatus('mandatory')
frNniLtsSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"))
if mibBuilder.loadTexts: frNniLtsSetupEntry.setStatus('mandatory')
frNniLtsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 10, 1, 200), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsDuration.setStatus('mandatory')
frNniLtsAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 10, 1, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("continousBurst", 0), ("intervalBurst", 1), ("delayBurst", 2), ("fixedBurst", 3))).clone('continousBurst')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsAlgorithm.setStatus('mandatory')
frNniLtsBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 10, 1, 204), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsBurstSize.setStatus('mandatory')
frNniLtsTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 10, 1, 205), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsTimeInterval.setStatus('mandatory')
frNniLtsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 11), )
if mibBuilder.loadTexts: frNniLtsStateTable.setStatus('mandatory')
frNniLtsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"))
if mibBuilder.loadTexts: frNniLtsStateEntry.setStatus('mandatory')
frNniLtsGeneratorState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 11, 1, 200), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopped", 0), ("running", 1))).clone('stopped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsGeneratorState.setStatus('mandatory')
frNniLtsCycleIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 11, 1, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsCycleIncomplete.setStatus('mandatory')
frNniLtsLastActiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 11, 1, 202), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsLastActiveInterval.setStatus('mandatory')
frNniLtsLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 11, 1, 204), FixedPoint3().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsLoad.setStatus('mandatory')
frNniLtsElapsedGenerationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 11, 1, 205), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsElapsedGenerationTime.setStatus('mandatory')
frNniLtsResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 12), )
if mibBuilder.loadTexts: frNniLtsResultsTable.setStatus('mandatory')
frNniLtsResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"))
if mibBuilder.loadTexts: frNniLtsResultsEntry.setStatus('mandatory')
frNniLtsFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 12, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsFramesTx.setStatus('mandatory')
frNniLtsBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 12, 1, 204), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsBytesTx.setStatus('mandatory')
frNniLtsBitRateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 12, 1, 208), FixedPoint3().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsBitRateTx.setStatus('mandatory')
frNniLtsFrameRateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 12, 1, 209), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsFrameRateTx.setStatus('mandatory')
frNniLtsPat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2))
frNniLtsPatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 1), )
if mibBuilder.loadTexts: frNniLtsPatRowStatusTable.setStatus('mandatory')
frNniLtsPatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsPatIndex"))
if mibBuilder.loadTexts: frNniLtsPatRowStatusEntry.setStatus('mandatory')
frNniLtsPatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatRowStatus.setStatus('mandatory')
frNniLtsPatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsPatComponentName.setStatus('mandatory')
frNniLtsPatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsPatStorageType.setStatus('mandatory')
frNniLtsPatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29)))
if mibBuilder.loadTexts: frNniLtsPatIndex.setStatus('mandatory')
frNniLtsPatDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10), )
if mibBuilder.loadTexts: frNniLtsPatDefaultsTable.setStatus('mandatory')
frNniLtsPatDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsPatIndex"))
if mibBuilder.loadTexts: frNniLtsPatDefaultsEntry.setStatus('mandatory')
frNniLtsPatDefaultDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 200), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultDlci.setStatus('mandatory')
frNniLtsPatDefaultNumFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 201), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultNumFrames.setStatus('mandatory')
frNniLtsPatDefaultDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 202), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8200)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultDataSize.setStatus('mandatory')
frNniLtsPatDefaultHeaderBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 203), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultHeaderBits.setStatus('mandatory')
frNniLtsPatDefaultHeaderLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 204), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultHeaderLength.setStatus('mandatory')
frNniLtsPatDefaultEABits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 205), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultEABits.setStatus('mandatory')
frNniLtsPatDefaultPayloadPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 206), HexString().subtype(subtypeSpec=ValueSizeConstraint(1, 12)).clone(hexValue="55")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultPayloadPattern.setStatus('mandatory')
frNniLtsPatDefaultRfc1490Header = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("n16", 16), ("n17", 17), ("none", 18))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultRfc1490Header.setStatus('mandatory')
frNniLtsPatDefaultUseBadLrc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 10, 1, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDefaultUseBadLrc.setStatus('mandatory')
frNniLtsPatSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11), )
if mibBuilder.loadTexts: frNniLtsPatSetupTable.setStatus('mandatory')
frNniLtsPatSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsPatIndex"))
if mibBuilder.loadTexts: frNniLtsPatSetupEntry.setStatus('mandatory')
frNniLtsPatDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 200), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDlci.setStatus('mandatory')
frNniLtsPatNumFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 201), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatNumFrames.setStatus('mandatory')
frNniLtsPatDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 202), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8200)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatDataSize.setStatus('mandatory')
frNniLtsPatHeaderBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 203), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatHeaderBits.setStatus('mandatory')
frNniLtsPatHeaderLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 204), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatHeaderLength.setStatus('mandatory')
frNniLtsPatEaBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 205), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatEaBits.setStatus('mandatory')
frNniLtsPatPayloadPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 206), HexString().subtype(subtypeSpec=ValueSizeConstraint(1, 12)).clone(hexValue="55")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatPayloadPattern.setStatus('mandatory')
frNniLtsPatRfc1490Header = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("n16", 16), ("n17", 17), ("none", 18))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatRfc1490Header.setStatus('mandatory')
frNniLtsPatUseBadLrc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 11, 1, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatUseBadLrc.setStatus('mandatory')
frNniLtsPatOpDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 12), )
if mibBuilder.loadTexts: frNniLtsPatOpDataTable.setStatus('mandatory')
frNniLtsPatOpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsPatIndex"))
if mibBuilder.loadTexts: frNniLtsPatOpDataEntry.setStatus('mandatory')
frNniLtsPatFramePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 12, 1, 200), HexString().subtype(subtypeSpec=ValueSizeConstraint(20, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsPatFramePattern.setStatus('mandatory')
frNniLtsPatHdlcBitsInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 12, 1, 201), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsPatHdlcBitsInserted.setStatus('mandatory')
frNniLtsPatOpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 13), )
if mibBuilder.loadTexts: frNniLtsPatOpStateTable.setStatus('mandatory')
frNniLtsPatOpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsIndex"), (0, "Nortel-Magellan-Passport-FrameRelayNniMIB", "frNniLtsPatIndex"))
if mibBuilder.loadTexts: frNniLtsPatOpStateEntry.setStatus('mandatory')
frNniLtsPatLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 13, 1, 200), FixedPoint3().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNniLtsPatLoad.setStatus('mandatory')
frNniLtsPatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 70, 9, 2, 13, 1, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frNniLtsPatStatus.setStatus('mandatory')
frameRelayNniGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23, 1))
frameRelayNniGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23, 1, 5))
frameRelayNniGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23, 1, 5, 2))
frameRelayNniGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23, 1, 5, 2, 2))
frameRelayNniCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23, 3))
frameRelayNniCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23, 3, 5))
frameRelayNniCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23, 3, 5, 2))
frameRelayNniCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 23, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-FrameRelayNniMIB", frNniLtsPatDefaultDataSize=frNniLtsPatDefaultDataSize, frNniDlciDiscCongestedToIf=frNniDlciDiscCongestedToIf, frameRelayNniMIB=frameRelayNniMIB, frNniDlciDcIndex=frNniDlciDcIndex, frNniFramerUsageState=frNniFramerUsageState, frNniDlciProceduralStatus=frNniDlciProceduralStatus, frNniFramerOctetFromIf=frNniFramerOctetFromIf, frNniDlciLb=frNniDlciLb, frNniDlciDcRowStatus=frNniDlciDcRowStatus, frNniDlciVcEmissionPriorityFromNetwork=frNniDlciVcEmissionPriorityFromNetwork, frNniFramerUtilEntry=frNniFramerUtilEntry, frNniDlciIntEntry=frNniDlciIntEntry, frNniDlciVcDataPath=frNniDlciVcDataPath, frNniLmiKeepAliveStatusToIf=frNniLmiKeepAliveStatusToIf, frNniDlciEirPresent=frNniDlciEirPresent, frNniVFramerStatsTable=frNniVFramerStatsTable, frNniDlciLoopbackState=frNniDlciLoopbackState, frNniDlciDcType=frNniDlciDcType, frNniLmiUnexpectedIes=frNniLmiUnexpectedIes, frNniFramerUnderruns=frNniFramerUnderruns, frNniDlciDcComponentName=frNniDlciDcComponentName, frNniDlciVcCalledDna=frNniDlciVcCalledDna, frNniDlciVcDmepValue=frNniDlciVcDmepValue, frNniLtsIndex=frNniLtsIndex, frNniEmissionPriorityQsEntry=frNniEmissionPriorityQsEntry, frNniDlciVcCadTable=frNniDlciVcCadTable, frNniAlarmStatus=frNniAlarmStatus, frNniDlciABitReasonFromIf=frNniDlciABitReasonFromIf, frNniDlciVcIndex=frNniDlciVcIndex, frNniLmiCheckPointTimer=frNniLmiCheckPointTimer, frNniDlciDiscByteAbit=frNniDlciDiscByteAbit, frNniFramerNormPrioLinkUtilToIf=frNniFramerNormPrioLinkUtilToIf, frNniLmiPsiEntry=frNniLmiPsiEntry, frNniIfEntryTable=frNniIfEntryTable, frNniLmiEventCount=frNniLmiEventCount, frNniDlciVcOoSeqPktCntExceeded=frNniDlciVcOoSeqPktCntExceeded, frNniDlciVcOutOfRangeFrmFromSubnet=frNniDlciVcOutOfRangeFrmFromSubnet, frNniStatsTable=frNniStatsTable, frNniDnaOutgoingOptionsEntry=frNniDnaOutgoingOptionsEntry, frNniDlciDeBytesFromIf=frNniDlciDeBytesFromIf, frNniDlciVcCallReferenceNumber=frNniDlciVcCallReferenceNumber, frNniIndex=frNniIndex, frNniDlciSpComponentName=frNniDlciSpComponentName, frNniDlciDiscCongestedFromIfBytes=frNniDlciDiscCongestedFromIfBytes, frNniLmiSequenceErrors=frNniLmiSequenceErrors, frNniDlciVcIntdEntry=frNniDlciVcIntdEntry, frNniLmiStatusSequenceErrors=frNniLmiStatusSequenceErrors, frNniDlciVcCannotForwardToSubnet=frNniDlciVcCannotForwardToSubnet, frNniLtsPatDefaultHeaderLength=frNniLtsPatDefaultHeaderLength, frNniDlciVcDmepEntry=frNniDlciVcDmepEntry, frNniLtsRowStatusEntry=frNniLtsRowStatusEntry, frNniDlciSpCommittedBurstSize=frNniDlciSpCommittedBurstSize, frNniDlciVcSegmentsSent=frNniDlciVcSegmentsSent, frNniDlciVcPeakOoSeqPktCount=frNniDlciVcPeakOoSeqPktCount, frNniDlciSpOpTable=frNniDlciSpOpTable, frNniDlciTotalIngressSegFrm=frNniDlciTotalIngressSegFrm, frNniDnaCugRowStatus=frNniDnaCugRowStatus, frNniDlciVcFastSelectCall=frNniDlciVcFastSelectCall, frNniVFramerRowStatusEntry=frNniVFramerRowStatusEntry, frNniLtsBitRateTx=frNniLtsBitRateTx, frNniLtsPatOpStateEntry=frNniLtsPatOpStateEntry, frNniDlciDiscDeCongestedFromIf=frNniDlciDiscDeCongestedFromIf, frNniDlciTransferPriFromNwk=frNniDlciTransferPriFromNwk, frNniStateTable=frNniStateTable, frNniLmiOpProcedures=frNniLmiOpProcedures, frNniDnaCug=frNniDnaCug, frNniCustomerIdentifier=frNniCustomerIdentifier, frNniDlciDiscExcessFromIfBytes=frNniDlciDiscExcessFromIfBytes, frNniDlciSpRowStatusTable=frNniDlciSpRowStatusTable, frNniDnaHgMIfTable=frNniDnaHgMIfTable, frNniDlciOperationalState=frNniDlciOperationalState, frNniDnaComponentName=frNniDnaComponentName, frNniLmiRowStatusTable=frNniLmiRowStatusTable, frNniDlciCommittedInformationRate=frNniDlciCommittedInformationRate, frNniDlciLocalRateAdaptOccurred=frNniDlciLocalRateAdaptOccurred, frNniLtsPatHeaderLength=frNniLtsPatHeaderLength, frNniLmiKeepAliveStatusEnqFromIf=frNniLmiKeepAliveStatusEnqFromIf, frNniDlciVcSendSequenceNumber=frNniDlciVcSendSequenceNumber, frameRelayNniGroupBE=frameRelayNniGroupBE, frNniDlciStatsTable=frNniDlciStatsTable, frNniDlciSpMaximumFrameSize=frNniDlciSpMaximumFrameSize, frNniVFramerUsageState=frNniVFramerUsageState, frNniStatsEntry=frNniStatsEntry, frNniDlciVcAccountingEnabled=frNniDlciVcAccountingEnabled, frNniControlStatus=frNniControlStatus, frNniFramerStateTable=frNniFramerStateTable, frNniVFramerAdminState=frNniVFramerAdminState, frNniDlciLbRemoteTotalFrm=frNniDlciLbRemoteTotalFrm, frNniDnaHgMRowStatus=frNniDnaHgMRowStatus, frNniDlciVcPreviousDiagnosticCode=frNniDlciVcPreviousDiagnosticCode, frNniDlciVcElapsedTimeTillNow=frNniDlciVcElapsedTimeTillNow, frNniDlciVcSegmentsRx=frNniDlciVcSegmentsRx, frNniDnaNumberingPlanIndicator=frNniDnaNumberingPlanIndicator, frNniLtsFramesTx=frNniLtsFramesTx, frNniDnaHgMHgAddrRowStatusTable=frNniDnaHgMHgAddrRowStatusTable, frNniDlciLbLocalDeFrm=frNniDlciLbLocalDeFrm, frNniDlciSpOpEntry=frNniDlciSpOpEntry, frNniCidDataEntry=frNniCidDataEntry, frNniDlciSpUpdateBCI=frNniDlciSpUpdateBCI, frNniFramerFrmToIf=frNniFramerFrmToIf, frNniAdminState=frNniAdminState, frNniDnaTransferPriorityOverRide=frNniDnaTransferPriorityOverRide, frNniDlciVcSegmentSize=frNniDlciVcSegmentSize, frNniOperStatusTable=frNniOperStatusTable, frNniDlciVcNotDataXferToSubnet=frNniDlciVcNotDataXferToSubnet, frNniFramer=frNniFramer, frNniLtsPatLoad=frNniLtsPatLoad, frNniDnaHgM=frNniDnaHgM, frNniFramerStatsTable=frNniFramerStatsTable, frNniFramerUtilTable=frNniFramerUtilTable, frNniDlciBciFromSubnet=frNniDlciBciFromSubnet, frNniDlciDiscExcessFromIf=frNniDlciDiscExcessFromIf, frNniDlciEirPresentObs=frNniDlciEirPresentObs, frNniLtsPatHdlcBitsInserted=frNniLtsPatHdlcBitsInserted, frNniDlciDcNfaRowStatus=frNniDlciDcNfaRowStatus, frNniOperStatusEntry=frNniOperStatusEntry, frNniIfIndex=frNniIfIndex, frNniLmiStateTable=frNniLmiStateTable, frNniDnaHgMHgAddrIndex=frNniDnaHgMHgAddrIndex, frNniDlciTotalEgressBytes=frNniDlciTotalEgressBytes, frNniDlciVcMaxSubnetPktSize=frNniDlciVcMaxSubnetPktSize, frNniDlciVcFrmLossTimeouts=frNniDlciVcFrmLossTimeouts, frNniVFramerStatsEntry=frNniVFramerStatsEntry, frameRelayNniCapabilities=frameRelayNniCapabilities, frNniVFramerProvTable=frNniVFramerProvTable, frNniLmiComponentName=frNniLmiComponentName, frNniDlciVcCalledNpi=frNniDlciVcCalledNpi, frNniDlciTotalEgressSegFrm=frNniDlciTotalEgressSegFrm, frNniComponentName=frNniComponentName, frNniDlciVcCallingLcn=frNniDlciVcCallingLcn, frNniLmiStatsEntry=frNniLmiStatsEntry, frNniLtsFrameRateTx=frNniLtsFrameRateTx, frNniLmiFullStatusToIf=frNniLmiFullStatusToIf, frNniFramerOperationalState=frNniFramerOperationalState, frNniLtsGeneratorState=frNniLtsGeneratorState, frNniDnaHgMHgAddrAddrEntry=frNniDnaHgMHgAddrAddrEntry, frNniLtsPatDefaultUseBadLrc=frNniLtsPatDefaultUseBadLrc, frNniLmiLinkVerificationTimer=frNniLmiLinkVerificationTimer, frNniDlciVcState=frNniDlciVcState, frNniDlciLbRowStatusTable=frNniDlciLbRowStatusTable, frNniDlciDcOptionsTable=frNniDlciDcOptionsTable, frNniDnaAccountClass=frNniDnaAccountClass, frNniFramerNormPrioLinkUtilFromIf=frNniFramerNormPrioLinkUtilFromIf, frNniLtsPatSetupEntry=frNniLtsPatSetupEntry, frNniDlciSpIndex=frNniDlciSpIndex, frNniDlciSpRowStatusEntry=frNniDlciSpRowStatusEntry, frNniLtsPatDefaultsEntry=frNniLtsPatDefaultsEntry, frNniVFramerRowStatusTable=frNniVFramerRowStatusTable, frNniFramerComponentName=frNniFramerComponentName, frNniDlciVcRcosToNetwork=frNniDlciVcRcosToNetwork, frNniDlciRateAdaptReductPeriod=frNniDlciRateAdaptReductPeriod, frNniDlciVcRowStatusTable=frNniDlciVcRowStatusTable, frNniFramerFrmModeErrors=frNniFramerFrmModeErrors, frNniDlciStateTable=frNniDlciStateTable, frameRelayNniCapabilitiesBE01A=frameRelayNniCapabilitiesBE01A, frNniDnaHgMAvailabilityDelta=frNniDnaHgMAvailabilityDelta, frNniDlciLbRemoteBecnFrm=frNniDlciLbRemoteBecnFrm, frNniDnaHgMHgAddrDataNetworkAddress=frNniDnaHgMHgAddrDataNetworkAddress, frNniDlciSpAccounting=frNniDlciSpAccounting, frNniDlciAlarmStatus=frNniDlciAlarmStatus, frNniLts=frNniLts, frNniDnaOutPathSensitivityOverRide=frNniDnaOutPathSensitivityOverRide, frNniLtsCycleIncomplete=frNniLtsCycleIncomplete, frNniDlciVcComponentName=frNniDlciVcComponentName, frNniLmiIndex=frNniLmiIndex, frameRelayNniCapabilitiesBE01=frameRelayNniCapabilitiesBE01, frNniFramerIndex=frNniFramerIndex, frameRelayNniCapabilitiesBE=frameRelayNniCapabilitiesBE, frNniLmiNniParmsEntry=frNniLmiNniParmsEntry, frNniDlciStandbyStatus=frNniDlciStandbyStatus, frNniDlciBecnFrmToIf=frNniDlciBecnFrmToIf, frNniLtsPatDlci=frNniLtsPatDlci, frNniCidDataTable=frNniCidDataTable, frNniDnaHgMAvailabilityUpdateThreshold=frNniDnaHgMAvailabilityUpdateThreshold, frNniDnaAddressEntry=frNniDnaAddressEntry, frNniDlciEirIngressSegFrm=frNniDlciEirIngressSegFrm, frNniDnaEgressAccounting=frNniDnaEgressAccounting, frNniLtsPatRowStatus=frNniLtsPatRowStatus, frNniDlciTransferPriorityFromNetwork=frNniDlciTransferPriorityFromNetwork, frNniDnaHgMHgAddrRowStatus=frNniDnaHgMHgAddrRowStatus, frNniDnaHgMHgAddrAddrTable=frNniDnaHgMHgAddrAddrTable, frNniDlciFciFromSubnet=frNniDlciFciFromSubnet, frNniDlciErrorShortBytesFromIf=frNniDlciErrorShortBytesFromIf, frNniFrmToIfByQueueIndex=frNniFrmToIfByQueueIndex, frNniDnaOutAccess=frNniDnaOutAccess, frNniLtsResultsTable=frNniLtsResultsTable, frNniLmiParmsEntry=frNniLmiParmsEntry, frNniDlciErrorLongBytesFromIf=frNniDlciErrorLongBytesFromIf, frNniDnaHgMHgAddrStorageType=frNniDnaHgMHgAddrStorageType, frNniDlciLbLocalDeBytes=frNniDlciLbLocalDeBytes, frNniProceduralStatus=frNniProceduralStatus, frNniDlciStartTime=frNniDlciStartTime, frNniDlciBecnFrmFromIf=frNniDlciBecnFrmFromIf, frNniDlciDiscDeCongestedToIf=frNniDlciDiscDeCongestedToIf, frNniRowStatusTable=frNniRowStatusTable, frNniLmiIgnoreActiveBit=frNniLmiIgnoreActiveBit, frNniLmiRowStatus=frNniLmiRowStatus, frNniVFramerStateTable=frNniVFramerStateTable, frNniDnaRowStatusTable=frNniDnaRowStatusTable, frNniDlciRowStatusTable=frNniDlciRowStatusTable, frNniVFramerFrmFromOtherVFramer=frNniVFramerFrmFromOtherVFramer, frNniLtsRowStatus=frNniLtsRowStatus, frNniDlciAdminState=frNniDlciAdminState, frNniDnaCugInterlockCode=frNniDnaCugInterlockCode, frNniLtsPatComponentName=frNniLtsPatComponentName, frNniDnaHgMStorageType=frNniDnaHgMStorageType, frNniLmiFullStatusEnqFromIf=frNniLmiFullStatusEnqFromIf, frNniDlciLbRemoteDeFrm=frNniDlciLbRemoteDeFrm, frNniIfAdminStatus=frNniIfAdminStatus, frNniDlciVcCadEntry=frNniDlciVcCadEntry, frNniVFramerLogicalProcessor=frNniVFramerLogicalProcessor, frNniDlci=frNniDlci, frNniDnaCugType=frNniDnaCugType, frNniLtsPatHeaderBits=frNniLtsPatHeaderBits, frNniLmiRowStatusEntry=frNniLmiRowStatusEntry, frNniDlciTransferPriToNwk=frNniDlciTransferPriToNwk, frNniDlciBciToSubnet=frNniDlciBciToSubnet, frNniDlciStorageType=frNniDlciStorageType, frNniLtsPatStatus=frNniLtsPatStatus, frNniDnaCugIndex=frNniDnaCugIndex, frNniDnaRowStatus=frNniDnaRowStatus, frNniDlciCirPresent=frNniDlciCirPresent, frNniDlciDcDataPath=frNniDlciDcDataPath, frNniDlciDcNfaTable=frNniDlciDcNfaTable, frNniFrmToIfByQueueEntry=frNniFrmToIfByQueueEntry, frNniUnknownDlciFramesFromIf=frNniUnknownDlciFramesFromIf, frNniFramerStatsEntry=frNniFramerStatsEntry, frNniDnaHgMIfEntry=frNniDnaHgMIfEntry, frNniDnaIncomingOptionsTable=frNniDnaIncomingOptionsTable, frNniDnaHgMIndex=frNniDnaHgMIndex, frNniDlciDiscDeCongestedToIfBytes=frNniDlciDiscDeCongestedToIfBytes, frNniDlciVcFrmCongestedToSubnet=frNniDlciVcFrmCongestedToSubnet, frNniFramerLinkEntry=frNniFramerLinkEntry, frNniDlciComponentName=frNniDlciComponentName, frNniDlciABitStatusToIf=frNniDlciABitStatusToIf, frNniDlciTransferPriorityToNetwork=frNniDlciTransferPriorityToNetwork, frNniLmiProcedures=frNniLmiProcedures, frNniFrmToIfByQueueTable=frNniFrmToIfByQueueTable, frNniDnaCugIncCalls=frNniDnaCugIncCalls, frNniDlciLbStatsTable=frNniDlciLbStatsTable, frNniLtsPatDefaultEABits=frNniLtsPatDefaultEABits, frNniLmiProtocolStatus=frNniLmiProtocolStatus, frNniDlciEirIngressBytes=frNniDlciEirIngressBytes, frNniDlciLbRemoteFecnFrm=frNniDlciLbRemoteFecnFrm, frNniOctetToIfByQueueIndex=frNniOctetToIfByQueueIndex, frNniLmiOperationalState=frNniLmiOperationalState, frNniDnaOutDefaultPathReliability=frNniDnaOutDefaultPathReliability, frNniDnaCugRowStatusTable=frNniDnaCugRowStatusTable, frNniDlciLbStorageType=frNniDlciLbStorageType, frNniLtsLoad=frNniLtsLoad, frNniLtsPatDefaultsTable=frNniLtsPatDefaultsTable, frNniLmiUserSideEventHistory=frNniLmiUserSideEventHistory, frNniDlciFrmToIf=frNniDlciFrmToIf, frNniDlciUsageState=frNniDlciUsageState)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-FrameRelayNniMIB", frNniDnaCugCugOptionsTable=frNniDnaCugCugOptionsTable, frNniLtsPatRowStatusEntry=frNniLtsPatRowStatusEntry, frNniDlciSpCommittedInformationRate=frNniDlciSpCommittedInformationRate, frNniDlciCommittedBurstSize=frNniDlciCommittedBurstSize, frNniDlciVcEmissionPriorityToNetwork=frNniDlciVcEmissionPriorityToNetwork, frNniDlciAbitTable=frNniDlciAbitTable, frNniDlciAbitEntry=frNniDlciAbitEntry, frNniVFramer=frNniVFramer, frNniLtsLastActiveInterval=frNniLtsLastActiveInterval, frNniFramerOverruns=frNniFramerOverruns, frNniVFramerStateEntry=frNniVFramerStateEntry, frNniDlciVcStorageType=frNniDlciVcStorageType, frNniDlciSpRaSensitivity=frNniDlciSpRaSensitivity, frNniDlciVcCombErrorsFromSubnet=frNniDlciVcCombErrorsFromSubnet, frNniFramerLrcErrors=frNniFramerLrcErrors, frNniDlciElapsedDifference=frNniDlciElapsedDifference, frNniDlciVcDiagnosticCode=frNniDlciVcDiagnosticCode, frNniLtsRowStatusTable=frNniLtsRowStatusTable, frNniDlciMeasurementInterval=frNniDlciMeasurementInterval, frNniVFramerOtherVirtualFramer=frNniVFramerOtherVirtualFramer, frNniFramerFrmFromIf=frNniFramerFrmFromIf, frNniFramerRowStatus=frNniFramerRowStatus, frNniDlciRowStatusEntry=frNniDlciRowStatusEntry, frNniDlciDcOptionsEntry=frNniDlciDcOptionsEntry, frNniDlciSpRateEnforcement=frNniDlciSpRateEnforcement, frNniUsageState=frNniUsageState, frNniDlciFecnFrmToIf=frNniDlciFecnFrmToIf, frNniLtsStateTable=frNniLtsStateTable, frNniDnaCugComponentName=frNniDnaCugComponentName, frNniDlciVcPathReliability=frNniDlciVcPathReliability, frNniDnaHgMMaximumAvailableAggregateCir=frNniDnaHgMMaximumAvailableAggregateCir, frNniDlciDiscFrameAbit=frNniDlciDiscFrameAbit, frNniDlciDiscardedBytes=frNniDlciDiscardedBytes, frNniDlciVcPktRetryTimeouts=frNniDlciVcPktRetryTimeouts, frNniDlciVcDmepTable=frNniDlciVcDmepTable, frNniFramerProvEntry=frNniFramerProvEntry, frNniDlciRateAdaptationPresent=frNniDlciRateAdaptationPresent, frNniDlciVcCalledLcn=frNniDlciVcCalledLcn, frNniDnaCallOptionsTable=frNniDnaCallOptionsTable, frNniLmiProtocolErrors=frNniLmiProtocolErrors, frNniNumberOfEmissionQs=frNniNumberOfEmissionQs, frNniLtsPatPayloadPattern=frNniLtsPatPayloadPattern, frNniLtsPatDefaultPayloadPattern=frNniLtsPatDefaultPayloadPattern, frNniDlciSpParmsEntry=frNniDlciSpParmsEntry, frNniLtsPatUseBadLrc=frNniLtsPatUseBadLrc, frNniDnaOutgoingOptionsTable=frNniDnaOutgoingOptionsTable, frNniDlciExcessFrmFromIf=frNniDlciExcessFrmFromIf, frNniDlciRateEnforcement=frNniDlciRateEnforcement, frNniDlciDcCugType=frNniDlciDcCugType, frNniDnaOutDefaultPathSensitivity=frNniDnaOutDefaultPathSensitivity, frNniOctetToIfByQueueTable=frNniOctetToIfByQueueTable, frNniDnaDataPath=frNniDnaDataPath, frNniLtsPatDefaultDlci=frNniLtsPatDefaultDlci, frNniDnaCugPreferential=frNniDnaCugPreferential, frNniDlciDiscDeCongestedFromIfBytes=frNniDlciDiscDeCongestedFromIfBytes, frNniDlciLbLocalTotalFrm=frNniDlciLbLocalTotalFrm, frNniDnaRowStatusEntry=frNniDnaRowStatusEntry, frNniLtsStateEntry=frNniLtsStateEntry, frNniLmiParmsTable=frNniLmiParmsTable, frNniDlciVcType=frNniDlciVcType, frNniDlciLbLocalTotalBytes=frNniDlciLbLocalTotalBytes, frNniFramerLargeFrmErrors=frNniFramerLargeFrmErrors, frNniDna=frNniDna, frNniDlciRateAdaptReduct=frNniDlciRateAdaptReduct, frNniDlciEirEgressSegFrm=frNniDlciEirEgressSegFrm, frNniDnaDataNetworkAddress=frNniDnaDataNetworkAddress, frNniDnaCugStorageType=frNniDnaCugStorageType, frNniDlciCallReferenceNumber=frNniDlciCallReferenceNumber, frNniDlciLbRemoteTotalBytes=frNniDlciLbRemoteTotalBytes, frNniDlciDiscCongestedFromIf=frNniDlciDiscCongestedFromIf, frNniLtsPatStorageType=frNniLtsPatStorageType, frNniDlciRateEnforcementPresent=frNniDlciRateEnforcementPresent, frNniDnaHgMComponentName=frNniDnaHgMComponentName, frNniLmiPollingVerifTimeouts=frNniLmiPollingVerifTimeouts, frNniDlciLbRemoteDeBytes=frNniDlciLbRemoteDeBytes, frNniStorageType=frNniStorageType, frNniDlciVcRcosFromNetwork=frNniDlciVcRcosFromNetwork, frNniDlciEirEgressBytes=frNniDlciEirEgressBytes, frNniDlciLbLocalBecnFrm=frNniDlciLbLocalBecnFrm, frameRelayNniGroupBE01A=frameRelayNniGroupBE01A, frNniDlciVcPeakRetryQueueSize=frNniDlciVcPeakRetryQueueSize, frNniLtsPatIndex=frNniLtsPatIndex, frNniLtsPatOpDataEntry=frNniLtsPatOpDataEntry, frNniDlciLbRowStatus=frNniDlciLbRowStatus, frNniStandbyStatus=frNniStandbyStatus, frNniDnaHgMAvailableAggregateCir=frNniDnaHgMAvailableAggregateCir, frNniLmiPsiTable=frNniLmiPsiTable, frNniVFramerOperationalState=frNniVFramerOperationalState, frNniFramerAdminState=frNniFramerAdminState, frNniStateEntry=frNniStateEntry, frNniDlciSpExcessBurstSize=frNniDlciSpExcessBurstSize, frNniFramerRowStatusEntry=frNniFramerRowStatusEntry, frNniLmiErrorEventThreshold=frNniLmiErrorEventThreshold, frNniDnaIndex=frNniDnaIndex, frNniLtsPatDataSize=frNniLtsPatDataSize, frNniDlciStateEntry=frNniDlciStateEntry, frNniDlciDeBytesToIf=frNniDlciDeBytesToIf, frNniVFramerProvEntry=frNniVFramerProvEntry, frNniDlciDcCugIndex=frNniDlciDcCugIndex, frNniDlciVcPreviousState=frNniDlciVcPreviousState, frNniDnaHgMOpEntry=frNniDnaHgMOpEntry, frNniFrmToIfByQueueValue=frNniFrmToIfByQueueValue, frNniDlciFrmFromIf=frNniDlciFrmFromIf, frNniVFramerFrmToOtherVFramer=frNniVFramerFrmToOtherVFramer, frNniLmi=frNniLmi, frNniDlciVcPriority=frNniDlciVcPriority, frNniRowStatus=frNniRowStatus, frNniLtsComponentName=frNniLtsComponentName, frNniDlciErrorLongFrmFromIf=frNniDlciErrorLongFrmFromIf, frNni=frNni, frNniVFramerComponentName=frNniVFramerComponentName, frNniLtsSetupEntry=frNniLtsSetupEntry, frNniLtsPatOpDataTable=frNniLtsPatOpDataTable, frNniLmiNetworkSideEventHistory=frNniLmiNetworkSideEventHistory, frNniLtsPatNumFrames=frNniLtsPatNumFrames, frNniDnaHgMHgAddr=frNniDnaHgMHgAddr, frNniDnaHgMAvailableDlcis=frNniDnaHgMAvailableDlcis, frNniDlciLbComponentName=frNniDlciLbComponentName, frNniDlciDcNfaIndex=frNniDlciDcNfaIndex, frNniLmiNniParmsTable=frNniLmiNniParmsTable, frNniVFramerRowStatus=frNniVFramerRowStatus, frNniFramerStorageType=frNniFramerStorageType, frNniEmissionPriorityQsTable=frNniEmissionPriorityQsTable, frNniDlciCirPresentObs=frNniDlciCirPresentObs, frNniDnaAccountCollection=frNniDnaAccountCollection, frNniDnaHgMRowStatusEntry=frNniDnaHgMRowStatusEntry, frNniDlciLbRowStatusEntry=frNniDlciLbRowStatusEntry, frNniLtsPatDefaultHeaderBits=frNniLtsPatDefaultHeaderBits, frNniDlciControlStatus=frNniDlciControlStatus, frNniDlciSpRateAdaptation=frNniDlciSpRateAdaptation, frNniDlciBecnFrmSetByService=frNniDlciBecnFrmSetByService, frNniDnaOutDefaultPriority=frNniDnaOutDefaultPriority, frNniDlciVcIntdTable=frNniDlciVcIntdTable, frNniUnknownStatus=frNniUnknownStatus, frNniDlciSpMeasurementInterval=frNniDlciSpMeasurementInterval, frNniLtsPatOpStateTable=frNniLtsPatOpStateTable, frNniRowStatusEntry=frNniRowStatusEntry, frNniDlciEmissionPriorityToIf=frNniDlciEmissionPriorityToIf, frNniDnaIncomingOptionsEntry=frNniDnaIncomingOptionsEntry, frNniFramerFlagsBetweenFrames=frNniFramerFlagsBetweenFrames, frNniLtsPatDefaultNumFrames=frNniLtsPatDefaultNumFrames, frNniDlciIndex=frNniDlciIndex, frNniLtsPatEaBits=frNniLtsPatEaBits, frNniDlciVcCallingNpi=frNniDlciVcCallingNpi, frNniLmiStateEntry=frNniLmiStateEntry, frNniDlciVcFrdEntry=frNniDlciVcFrdEntry, frNniDlciAvailabilityStatus=frNniDlciAvailabilityStatus, frNniDlciLbStatsEntry=frNniDlciLbStatsEntry, frNniDlciExcessBurstSize=frNniDlciExcessBurstSize, frNniLtsResultsEntry=frNniLtsResultsEntry, frNniDlciDcRemoteNpi=frNniDlciDcRemoteNpi, frNniIfEntryEntry=frNniIfEntryEntry, frNniLmiNoStatusReportCount=frNniLmiNoStatusReportCount, frNniDlciABitStatusFromIf=frNniDlciABitStatusFromIf, frNniDnaCallOptionsEntry=frNniDnaCallOptionsEntry, frNniDlciAccounting=frNniDlciAccounting, frNniDlciErrorShortFrmFromIf=frNniDlciErrorShortFrmFromIf, frNniVFramerStorageType=frNniVFramerStorageType, frNniOperationalState=frNniOperationalState, frNniDlciDcRowStatusEntry=frNniDlciDcRowStatusEntry, frNniDlciVcOoSeqByteCntExceeded=frNniDlciVcOoSeqByteCntExceeded, frNniDnaStorageType=frNniDnaStorageType, frNniVFramerOctetFromOtherVFramer=frNniVFramerOctetFromOtherVFramer, frNniLtsTimeInterval=frNniLtsTimeInterval, frNniSnmpOperStatus=frNniSnmpOperStatus, frNniDlciVcDuplicatesFromSubnet=frNniDlciVcDuplicatesFromSubnet, frNniDlciVcFrdTable=frNniDlciVcFrdTable, frNniDlciSpParmsTable=frNniDlciSpParmsTable, frNniLtsPatDefaultRfc1490Header=frNniLtsPatDefaultRfc1490Header, frNniDlciDcStorageType=frNniDlciDcStorageType, frNniLtsPatSetupTable=frNniLtsPatSetupTable, frNniLmiUnexpectedReports=frNniLmiUnexpectedReports, frNniLmiUsageState=frNniLmiUsageState, frNniVFramerIndex=frNniVFramerIndex, frNniDnaCugRowStatusEntry=frNniDnaCugRowStatusEntry, frNniDlciVcRowStatusEntry=frNniDlciVcRowStatusEntry, frNniInvalidHeaderFramesFromIf=frNniInvalidHeaderFramesFromIf, frNniDlciVc=frNniDlciVc, frNniDlciDc=frNniDlciDc, frNniDlciDcDiscardPriority=frNniDlciDcDiscardPriority, frNniDlciVcSubnetRecoveries=frNniDlciVcSubnetRecoveries, frNniLtsBytesTx=frNniLtsBytesTx, frNniDlciDiscCongestedToIfBytes=frNniDlciDiscCongestedToIfBytes, frNniFramerAborts=frNniFramerAborts, frNniDlciDcRemoteDna=frNniDlciDcRemoteDna, frNniLtsPatFramePattern=frNniLtsPatFramePattern, frNniOctetToIfByQueueValue=frNniOctetToIfByQueueValue, frNniDlciDcNfaEntry=frNniDlciDcNfaEntry, frNniDlciLbIndex=frNniDlciLbIndex, frNniDnaHgMRowStatusTable=frNniDnaHgMRowStatusTable, frNniDnaAddressTable=frNniDnaAddressTable, frNniDlciSp=frNniDlciSp, frNniDlciBytesToIf=frNniDlciBytesToIf, frNniFramerProvTable=frNniFramerProvTable, frNniDlciVcAccountingEnd=frNniDlciVcAccountingEnd, frNniDlciLbLocalFecnFrm=frNniDlciLbLocalFecnFrm, frNniLtsSetupTable=frNniLtsSetupTable, frNniDlciABitReasonToIf=frNniDlciABitReasonToIf, frNniDlciVcStartTime=frNniDlciVcStartTime, frNniDlciRateAdaptation=frNniDlciRateAdaptation, frNniLmiAdminState=frNniLmiAdminState, frNniDlciBytesFromIf=frNniDlciBytesFromIf, frNniDlciDcNfaValue=frNniDlciDcNfaValue, frNniLtsAlgorithm=frNniLtsAlgorithm, frNniDnaHgMHgAddrNumberingPlanIndicator=frNniDnaHgMHgAddrNumberingPlanIndicator, frNniFramerLinkTable=frNniFramerLinkTable, frNniDnaIncAccess=frNniDnaIncAccess, frNniLmiStatsTable=frNniLmiStatsTable, frNniLtsBurstSize=frNniLtsBurstSize, frNniDnaHgMHgAddrRowStatusEntry=frNniDnaHgMHgAddrRowStatusEntry, frNniLtsStorageType=frNniLtsStorageType, frNniFramerInterfaceName=frNniFramerInterfaceName, frNniDlciVcPeakOoSeqByteCount=frNniDlciVcPeakOoSeqByteCount, frNniDlciDeFrmToIf=frNniDlciDeFrmToIf, frNniLtsElapsedGenerationTime=frNniLtsElapsedGenerationTime, frNniDlciMaximumFrameSize=frNniDlciMaximumFrameSize, frNniLtsPatRowStatusTable=frNniLtsPatRowStatusTable, frNniDlciExcessBytesFromIf=frNniDlciExcessBytesFromIf, frNniDlciStatsEntry=frNniDlciStatsEntry, frNniDlciTotalIngressBytes=frNniDlciTotalIngressBytes, frNniDnaCugCugOptionsEntry=frNniDnaCugCugOptionsEntry, frNniDnaHgMOpTable=frNniDnaHgMOpTable, frNniFramerCrcErrors=frNniFramerCrcErrors, frNniDlciDcRowStatusTable=frNniDlciDcRowStatusTable, frameRelayNniGroup=frameRelayNniGroup, frNniDnaHgMHgAddrComponentName=frNniDnaHgMHgAddrComponentName, frNniDlciSpStorageType=frNniDlciSpStorageType, frNniLmiFullStatusPollingCycles=frNniLmiFullStatusPollingCycles, frNniDlciDeFrmFromIf=frNniDlciDeFrmFromIf, frNniFramerNonOctetErrors=frNniFramerNonOctetErrors, frNniDlciVcNotDataXferFromSubnet=frNniDlciVcNotDataXferFromSubnet, frNniDlciIntTable=frNniDlciIntTable, frNniDlciUnknownStatus=frNniDlciUnknownStatus, frNniDlciDcTransferPriority=frNniDlciDcTransferPriority, frNniDnaDefaultTransferPriority=frNniDnaDefaultTransferPriority, frNniDlciVcCallingDna=frNniDlciVcCallingDna, frNniDlciDiscardedSegFrm=frNniDlciDiscardedSegFrm, frameRelayNniGroupBE01=frameRelayNniGroupBE01, frNniLtsPat=frNniLtsPat, frNniDlciRowStatus=frNniDlciRowStatus, frNniAvailabilityStatus=frNniAvailabilityStatus, frNniDnaServiceExchange=frNniDnaServiceExchange, frNniFramerStateEntry=frNniFramerStateEntry, frNniDlciVcPeakOoSeqFrmForwarded=frNniDlciVcPeakOoSeqFrmForwarded, frNniOctetToIfByQueueEntry=frNniOctetToIfByQueueEntry, frNniDnaCugDnic=frNniDnaCugDnic, frNniLtsPatRfc1490Header=frNniLtsPatRfc1490Header, frNniFramerRowStatusTable=frNniFramerRowStatusTable, frNniDlciFecnFrmFromIf=frNniDlciFecnFrmFromIf, frNniDnaCugOutCalls=frNniDnaCugOutCalls, frNniDlciDcRemoteDlci=frNniDlciDcRemoteDlci, frNniLmiStorageType=frNniLmiStorageType, frNniLastUnknownDlci=frNniLastUnknownDlci, frNniLtsDuration=frNniLtsDuration)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-FrameRelayNniMIB", frNniDlciSpRowStatus=frNniDlciSpRowStatus, frNniDlciVcRowStatus=frNniDlciVcRowStatus, frNniLmiAsyncStatusReport=frNniLmiAsyncStatusReport, frNniDlciDcDeDiscardPriority=frNniDlciDcDeDiscardPriority)
