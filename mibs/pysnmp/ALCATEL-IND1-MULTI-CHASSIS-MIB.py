#
# PySNMP MIB module ALCATEL-IND1-MULTI-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-MULTI-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:02:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1MultiChassisManager, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1MultiChassisManager")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Counter64, TimeTicks, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, ModuleIdentity, MibIdentifier, ObjectIdentity, Unsigned32, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "TimeTicks", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Counter32", "Integer32")
DisplayString, TextualConvention, MacAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue", "RowStatus")
alcatelIND1MultiChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1))
alcatelIND1MultiChassisMIB.setRevisions(('2009-11-10 00:00',))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIB.setLastUpdated('200911100000Z')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
alcatelIND1MultiChassisMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBNotifications.setStatus('current')
alcatelIND1MultiChassisMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBObjects.setStatus('current')
alcatelIND1MultiChassisMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBConformance.setStatus('current')
alcatelIND1MultiChassisMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBGroups.setStatus('current')
alcatelIND1MultiChassisMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBCompliances.setStatus('current')
class MultiChassisId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2)

class MultiChassisLinkIfIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(40000128))
    namedValues = NamedValues(("link0", 40000128))

class MultiChassisConsistency(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("inconsistent", 0), ("consistent", 1), ("na", 2), ("disabled", 3))

class MultiChassisLocaleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("local", 1), ("peer", 2))

class MultiChassisGroup(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class MultiChassisType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invalid", 0), ("rushmore", 1), ("tor", 2))

multiChassisConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1))
multiChassisConfigChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1, 1), MultiChassisId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisConfigChassisId.setStatus('current')
multiChassisConfigHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisConfigHelloInterval.setStatus('current')
multiChassisConfigIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisConfigIpcVlan.setStatus('current')
multiChassisConfigChassisGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1, 4), MultiChassisGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisConfigChassisGroup.setStatus('current')
multiChassisOperation = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2))
multiChassisOperChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperChassisId.setStatus('current')
multiChassisOperChassisRole = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unassigned", 0), ("primary", 1), ("secondary", 2), ("inconsistent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperChassisRole.setStatus('current')
multiChassisOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("inconsistent", 2), ("standalone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperStatus.setStatus('current')
multiChassisOperHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperHelloInterval.setStatus('current')
multiChassisOperIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperIpcVlan.setStatus('current')
multiChassisOperChassisGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 6), MultiChassisGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperChassisGroup.setStatus('current')
multiChassisOperChassisType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 7), MultiChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperChassisType.setStatus('current')
multiChassisLinkTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3), )
if mibBuilder.loadTexts: multiChassisLinkTable.setStatus('current')
multiChassisLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkIfIndex"))
if mibBuilder.loadTexts: multiChassisLinkEntry.setStatus('current')
multiChassisLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 1), MultiChassisLinkIfIndex())
if mibBuilder.loadTexts: multiChassisLinkIfIndex.setStatus('current')
multiChassisLinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiChassisLinkAdminStatus.setStatus('current')
multiChassisLinkOperDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiChassisLinkOperDefaultVlan.setStatus('current')
multiChassisLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkOperStatus.setStatus('current')
multiChassisLinkPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkPrimaryPort.setStatus('current')
multiChassisLinkActivePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkActivePortNum.setStatus('current')
multiChassisLinkConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkConfigPortNum.setStatus('current')
multiChassisLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiChassisLinkRowStatus.setStatus('current')
multiChassisLinkMemberPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4), )
if mibBuilder.loadTexts: multiChassisLinkMemberPortTable.setStatus('current')
multiChassisLinkMemberPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortLinkIfIndex"), (0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortIfindex"))
if mibBuilder.loadTexts: multiChassisLinkMemberPortEntry.setStatus('current')
multiChassisLinkMemberPortLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 1), MultiChassisLinkIfIndex())
if mibBuilder.loadTexts: multiChassisLinkMemberPortLinkIfIndex.setStatus('current')
multiChassisLinkMemberPortIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: multiChassisLinkMemberPortIfindex.setStatus('current')
multiChassisLinkMemberPortIsPrimay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkMemberPortIsPrimay.setStatus('current')
multiChassisLinkMemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkMemberOperStatus.setStatus('current')
multiChassisLinkMemberPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiChassisLinkMemberPortRowStatus.setStatus('current')
multiChassisLoopDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5))
multiChassisLoopDetectionAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisLoopDetectionAdminStatus.setStatus('current')
multiChassisLoopDetectionTransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisLoopDetectionTransmitInterval.setStatus('current')
multiChassisLoopDetectionTransmitCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLoopDetectionTransmitCount.setStatus('current')
multiChassisLoopDetectionCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLoopDetectionCount.setStatus('current')
multiChassisLoopDetectionPortDownList = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLoopDetectionPortDownList.setStatus('current')
multiChassisLoopDetectionClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonClear", 0), ("clear", 1))).clone('nonClear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisLoopDetectionClear.setStatus('current')
multiChassisGlobalConsistency = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6))
multiChassisLocalChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 1), MultiChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalChassisId.setStatus('current')
multiChassisPeerChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 2), MultiChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerChassisId.setStatus('current')
multiChassisIdConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 3), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisIdConsistency.setStatus('current')
multiChassisLocalHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalHelloInterval.setStatus('current')
multiChassisPeerHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerHelloInterval.setStatus('current')
multiChassisHelloIntervalConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 6), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisHelloIntervalConsistency.setStatus('current')
multiChassisLocalIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalIpcVlan.setStatus('current')
multiChassisPeerIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerIpcVlan.setStatus('current')
multiChassisIpcVlanConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 9), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisIpcVlanConsistency.setStatus('current')
multiChassisLocalStpPathCostMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("thrityTwoBit", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalStpPathCostMode.setStatus('current')
multiChassisPeerStpPathCostMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("thrityTwoBit", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerStpPathCostMode.setStatus('current')
multiChassisStpPathCostModeConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 12), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisStpPathCostModeConsistency.setStatus('current')
multiChassisLocalStpMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flat", 1), ("onePerVlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalStpMode.setStatus('current')
multiChassisPeerStpMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("flat", 1), ("onePerVlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerStpMode.setStatus('current')
multiChassisStpModeConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 15), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisStpModeConsistency.setStatus('current')
multiChassisLocalChassisGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 16), MultiChassisGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalChassisGroup.setStatus('current')
multiChassisPeerChassisGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 17), MultiChassisGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerChassisGroup.setStatus('current')
multiChassisGroupConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 18), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisGroupConsistency.setStatus('current')
multiChassisLocalChassisType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 19), MultiChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalChassisType.setStatus('current')
multiChassisPeerChassisType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 20), MultiChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerChassisType.setStatus('current')
multiChassisTypeConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 21), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTypeConsistency.setStatus('current')
multiChassisLinkaggConsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7), )
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyTable.setStatus('current')
multiChassisLinkaggConsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyAggIndex"))
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyEntry.setStatus('current')
multiChassisLinkaggConsistencyAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyAggIndex.setStatus('current')
multiChassisLinkaggConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 2), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistency.setStatus('current')
multiChassisLinkaggLocalAggType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2), ("mcStatic", 3), ("mcLacp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggType.setStatus('current')
multiChassisLinkaggPeerAggType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("static", 1), ("lacp", 2), ("mcStatic", 3), ("mcLacp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggType.setStatus('current')
multiChassisLinkaggAggTypeConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 5), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggAggTypeConsistency.setStatus('current')
multiChassisLinkaggLocalDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalDefaultVlan.setStatus('current')
multiChassisLinkaggPeerDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerDefaultVlan.setStatus('current')
multiChassisLinkaggDefaultVlanConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 8), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggDefaultVlanConsistency.setStatus('current')
multiChassisLinkaggLocalVlanListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalVlanListConfigured.setStatus('current')
multiChassisLinkaggPeerVlanListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerVlanListConfigured.setStatus('current')
multiChassisLinkaggVlanListConfiguredConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 11), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggVlanListConfiguredConsistency.setStatus('current')
multiChassisLinkaggLocalAggActorSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggActorSystemID.setStatus('current')
multiChassisLinkaggPeerAggActorSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggActorSystemID.setStatus('current')
multiChassisLinkaggAggActorSystemIDConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 14), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggAggActorSystemIDConsistency.setStatus('current')
multiChassisLinkaggLocalAggActorSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggActorSystemPriority.setStatus('current')
multiChassisLinkaggPeerAggActorSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggActorSystemPriority.setStatus('current')
multiChassisLinkaggAggActorSystemPriorityConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 17), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggAggActorSystemPriorityConsistency.setStatus('current')
multiChassisLinkaggLocalExist = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalExist.setStatus('current')
multiChassisLinkaggPeerExist = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerExist.setStatus('current')
multiChassisLinkaggAggAllConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 20), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggAggAllConsistency.setStatus('current')
multiChassisLinkaggLocalListVlanSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalListVlanSize.setStatus('current')
multiChassisLinkaggPeerListVlanSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerListVlanSize.setStatus('current')
multiChassisTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8))
multiChassisTrapIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapIpcVlan.setStatus('current')
multiChassisTrapStpBlockingVlanList = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapStpBlockingVlanList.setStatus('current')
multiChassisTrapFailure = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapFailure.setStatus('current')
multiChassisTrapVFL = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 4), MultiChassisLinkIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapVFL.setStatus('current')
multiChassisTrapVFLMemberPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapVFLMemberPort.setStatus('current')
multiChassisTrapDiagnostic = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("duplexMode", 1), ("speed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapDiagnostic.setStatus('current')
multiChassisStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forwarding", 0), ("blocking", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisStpStatus.setStatus('current')
multiChassisTrapRecovered = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("recovered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapRecovered.setStatus('current')
multiChassisLinkaggConsistencyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9), )
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanTable.setStatus('current')
multiChassisLinkaggConsistencyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanAggIndex"), (0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanId"), (0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanLocaleType"))
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanEntry.setStatus('current')
multiChassisLinkaggConsistencyVlanAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanAggIndex.setStatus('current')
multiChassisLinkaggConsistencyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanId.setStatus('current')
multiChassisLinkaggConsistencyVlanLocaleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 3), MultiChassisLocaleType())
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanLocaleType.setStatus('current')
multiChassisLinkaggConsistencyVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("invalid", 0), ("service", 1), ("multicastEnt", 2), ("multicastService", 3), ("dynamic", 4), ("standard", 5), ("ipc", 6), ("vipVlan", 7), ("erpVlan", 8), ("mtpVlan", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanType.setStatus('current')
multiChassisLinkaggConsistencyVlanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanAdminStatus.setStatus('current')
multiChassisLinkaggConsistencyVlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanOperStatus.setStatus('current')
multiChassisLinkaggConsistencyVlanIpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanIpEnable.setStatus('current')
multiChassisLinkaggConsistencyVlanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 10222))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanMtu.setStatus('current')
multiChassisLinkaggConsistencyVlanSrcLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanSrcLearningStatus.setStatus('current')
multiChassisLinkaggConsistencyVlanVpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("cfgDefault", 1), ("qTagged", 2), ("dynamic", 3), ("vstkDoubleTag", 4), ("vstkTranslate", 5), ("forbidden", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVpaType.setStatus('current')
multiChassisLinkaggConsistencyVlanVpaState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("forwarding", 0), ("blocking", 1), ("inactive", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVpaState.setStatus('current')
multiChassisLinkaggConsistencyVlanVRF = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVRF.setStatus('current')
multiChassisLinkaggConsistencyVlanIcmpRedirectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanIcmpRedirectStatus.setStatus('current')
multiChassisLinkaggConsistencyVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 14), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanStatus.setStatus('current')
multiChassisIpcVlanDown = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 1)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapIpcVlan"))
if mibBuilder.loadTexts: multiChassisIpcVlanDown.setStatus('deprecated')
multiChassisIpcVlanUp = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 2)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapIpcVlan"))
if mibBuilder.loadTexts: multiChassisIpcVlanUp.setStatus('deprecated')
multiChassisMisconfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 3)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisMisconfigurationFailure.setStatus('current')
multiChassisHelloIntervalConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 4)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisHelloIntervalConsisFailure.setStatus('current')
multiChassisStpModeConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 5)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisStpModeConsisFailure.setStatus('current')
multiChassisStpPathCostModeConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 6)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisStpPathCostModeConsisFailure.setStatus('current')
multiChassisVflinkStatusConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 7)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisVflinkStatusConsisFailure.setStatus('deprecated')
multiChassisStpBlockingStatus = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 8)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapStpBlockingVlanList"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFL"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpStatus"))
if mibBuilder.loadTexts: multiChassisStpBlockingStatus.setStatus('current')
multiChassisLoopDetected = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 9)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisLoopDetected.setStatus('current')
multiChassisHelloTimeout = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 10)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisHelloTimeout.setStatus('current')
multiChassisVflinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 11)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisVflinkDown.setStatus('current')
multiChassisVFLMemberJoinFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 12)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFL"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFLMemberPort"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapDiagnostic"))
if mibBuilder.loadTexts: multiChassisVFLMemberJoinFailure.setStatus('current')
multiChassisGroupConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 13)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisGroupConsisFailure.setStatus('current')
multiChassisTypeConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 14)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisTypeConsisFailure.setStatus('current')
multiChassisConsisFailureRecovered = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 15)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapRecovered"))
if mibBuilder.loadTexts: multiChassisConsisFailureRecovered.setStatus('current')
alcatelIND1MultiChassisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperationGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisGlobalConsistencyGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1MultiChassisMIBCompliance = alcatelIND1MultiChassisMIBCompliance.setStatus('current')
multiChassisConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigChassisId"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigHelloInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigChassisGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisConfigGroup = multiChassisConfigGroup.setStatus('current')
multiChassisOperationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperChassisId"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperChassisRole"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperHelloInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperChassisGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperChassisType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisOperationGroup = multiChassisOperationGroup.setStatus('current')
multiChassisLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkAdminStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkOperDefaultVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkOperStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkPrimaryPort"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkActivePortNum"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkConfigPortNum"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLinkGroup = multiChassisLinkGroup.setStatus('current')
multiChassisLinkMemberPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortIsPrimay"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberOperStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLinkMemberPortGroup = multiChassisLinkMemberPortGroup.setStatus('current')
multiChassisLoopDetectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionAdminStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionTransmitInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionTransmitCount"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionCount"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionPortDownList"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLoopDetectionGroup = multiChassisLoopDetectionGroup.setStatus('current')
multiChassisGlobalConsistencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalChassisId"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerChassisId"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisIdConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalHelloInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerHelloInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisHelloIntervalConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisIpcVlanConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalStpPathCostMode"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerStpPathCostMode"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpPathCostModeConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalStpMode"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerStpMode"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpModeConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalChassisGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerChassisGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisGroupConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalChassisType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerChassisType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTypeConsistency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisGlobalConsistencyGroup = multiChassisGlobalConsistencyGroup.setStatus('current')
multiChassisLinkaggConsistencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalAggType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerAggType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggAggTypeConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalDefaultVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerDefaultVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggDefaultVlanConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalVlanListConfigured"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerVlanListConfigured"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggVlanListConfiguredConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalAggActorSystemID"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerAggActorSystemID"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggAggActorSystemIDConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalAggActorSystemPriority"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerAggActorSystemPriority"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggAggActorSystemPriorityConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalExist"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerExist"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggAggAllConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalListVlanSize"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerListVlanSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLinkaggConsistencyGroup = multiChassisLinkaggConsistencyGroup.setStatus('current')
multiChassisTrapInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapStpBlockingVlanList"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFL"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFLMemberPort"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapDiagnostic"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapRecovered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisTrapInfoGroup = multiChassisTrapInfoGroup.setStatus('current')
multiChassisTrapOBJGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisIpcVlanDown"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisIpcVlanUp"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisMisconfigurationFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisHelloIntervalConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpModeConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpPathCostModeConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisVflinkStatusConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpBlockingStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetected"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisHelloTimeout"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisVflinkDown"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisVFLMemberJoinFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisGroupConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTypeConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConsisFailureRecovered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisTrapOBJGroup = multiChassisTrapOBJGroup.setStatus('current')
multiChassisLinkaggConsistencyVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanAdminStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanOperStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanIpEnable"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanMtu"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanSrcLearningStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanVpaType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanVpaState"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanVRF"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanIcmpRedirectStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLinkaggConsistencyVlanGroup = multiChassisLinkaggConsistencyVlanGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-MULTI-CHASSIS-MIB", multiChassisLinkaggConsistencyVlanEntry=multiChassisLinkaggConsistencyVlanEntry, multiChassisLinkaggConsistencyVlanVRF=multiChassisLinkaggConsistencyVlanVRF, multiChassisLinkaggLocalAggActorSystemID=multiChassisLinkaggLocalAggActorSystemID, multiChassisLinkaggConsistencyAggIndex=multiChassisLinkaggConsistencyAggIndex, multiChassisLocalIpcVlan=multiChassisLocalIpcVlan, alcatelIND1MultiChassisMIBConformance=alcatelIND1MultiChassisMIBConformance, multiChassisConfigGroup=multiChassisConfigGroup, multiChassisLocalHelloInterval=multiChassisLocalHelloInterval, multiChassisHelloTimeout=multiChassisHelloTimeout, MultiChassisType=MultiChassisType, multiChassisLinkaggPeerVlanListConfigured=multiChassisLinkaggPeerVlanListConfigured, multiChassisConfig=multiChassisConfig, multiChassisTrapStpBlockingVlanList=multiChassisTrapStpBlockingVlanList, multiChassisLinkMemberPortEntry=multiChassisLinkMemberPortEntry, multiChassisGroupConsisFailure=multiChassisGroupConsisFailure, multiChassisStpModeConsistency=multiChassisStpModeConsistency, multiChassisLinkaggConsistencyVlanGroup=multiChassisLinkaggConsistencyVlanGroup, multiChassisLoopDetectionTransmitInterval=multiChassisLoopDetectionTransmitInterval, multiChassisLinkaggConsistencyVlanIpEnable=multiChassisLinkaggConsistencyVlanIpEnable, multiChassisLinkaggPeerDefaultVlan=multiChassisLinkaggPeerDefaultVlan, multiChassisIdConsistency=multiChassisIdConsistency, multiChassisLinkaggConsistencyVlanOperStatus=multiChassisLinkaggConsistencyVlanOperStatus, multiChassisLinkaggConsistencyTable=multiChassisLinkaggConsistencyTable, multiChassisLocalStpPathCostMode=multiChassisLocalStpPathCostMode, multiChassisLinkaggPeerAggType=multiChassisLinkaggPeerAggType, MultiChassisConsistency=MultiChassisConsistency, MultiChassisId=MultiChassisId, multiChassisLinkaggPeerAggActorSystemID=multiChassisLinkaggPeerAggActorSystemID, multiChassisLinkaggConsistencyVlanSrcLearningStatus=multiChassisLinkaggConsistencyVlanSrcLearningStatus, multiChassisLinkAdminStatus=multiChassisLinkAdminStatus, alcatelIND1MultiChassisMIBNotifications=alcatelIND1MultiChassisMIBNotifications, multiChassisLinkMemberPortIfindex=multiChassisLinkMemberPortIfindex, multiChassisPeerIpcVlan=multiChassisPeerIpcVlan, MultiChassisGroup=MultiChassisGroup, MultiChassisLocaleType=MultiChassisLocaleType, multiChassisLinkaggConsistencyVlanId=multiChassisLinkaggConsistencyVlanId, multiChassisPeerChassisGroup=multiChassisPeerChassisGroup, multiChassisVFLMemberJoinFailure=multiChassisVFLMemberJoinFailure, multiChassisLocalStpMode=multiChassisLocalStpMode, multiChassisLinkaggConsistencyVlanMtu=multiChassisLinkaggConsistencyVlanMtu, multiChassisLinkaggConsistencyVlanAdminStatus=multiChassisLinkaggConsistencyVlanAdminStatus, multiChassisLoopDetectionAdminStatus=multiChassisLoopDetectionAdminStatus, multiChassisLinkMemberPortTable=multiChassisLinkMemberPortTable, multiChassisLoopDetectionCount=multiChassisLoopDetectionCount, multiChassisHelloIntervalConsistency=multiChassisHelloIntervalConsistency, multiChassisPeerStpMode=multiChassisPeerStpMode, multiChassisLinkaggConsistencyVlanVpaState=multiChassisLinkaggConsistencyVlanVpaState, multiChassisTrapRecovered=multiChassisTrapRecovered, multiChassisLinkGroup=multiChassisLinkGroup, multiChassisStpPathCostModeConsistency=multiChassisStpPathCostModeConsistency, multiChassisVflinkStatusConsisFailure=multiChassisVflinkStatusConsisFailure, multiChassisLinkaggPeerExist=multiChassisLinkaggPeerExist, multiChassisOperIpcVlan=multiChassisOperIpcVlan, multiChassisConfigHelloInterval=multiChassisConfigHelloInterval, multiChassisLinkaggVlanListConfiguredConsistency=multiChassisLinkaggVlanListConfiguredConsistency, multiChassisStpBlockingStatus=multiChassisStpBlockingStatus, multiChassisLinkRowStatus=multiChassisLinkRowStatus, multiChassisOperationGroup=multiChassisOperationGroup, multiChassisLinkaggConsistency=multiChassisLinkaggConsistency, multiChassisTrapFailure=multiChassisTrapFailure, multiChassisLocalChassisId=multiChassisLocalChassisId, multiChassisTrapVFLMemberPort=multiChassisTrapVFLMemberPort, multiChassisLinkaggLocalAggActorSystemPriority=multiChassisLinkaggLocalAggActorSystemPriority, multiChassisIpcVlanUp=multiChassisIpcVlanUp, multiChassisOperStatus=multiChassisOperStatus, multiChassisOperHelloInterval=multiChassisOperHelloInterval, multiChassisLoopDetected=multiChassisLoopDetected, multiChassisStpStatus=multiChassisStpStatus, multiChassisLinkaggConsistencyVlanStatus=multiChassisLinkaggConsistencyVlanStatus, multiChassisLoopDetectionPortDownList=multiChassisLoopDetectionPortDownList, multiChassisTrapOBJGroup=multiChassisTrapOBJGroup, alcatelIND1MultiChassisMIBObjects=alcatelIND1MultiChassisMIBObjects, multiChassisPeerChassisId=multiChassisPeerChassisId, multiChassisStpPathCostModeConsisFailure=multiChassisStpPathCostModeConsisFailure, multiChassisIpcVlanConsistency=multiChassisIpcVlanConsistency, multiChassisLinkaggConsistencyEntry=multiChassisLinkaggConsistencyEntry, multiChassisTrapIpcVlan=multiChassisTrapIpcVlan, multiChassisLoopDetectionTransmitCount=multiChassisLoopDetectionTransmitCount, multiChassisGlobalConsistencyGroup=multiChassisGlobalConsistencyGroup, multiChassisOperation=multiChassisOperation, multiChassisOperChassisRole=multiChassisOperChassisRole, multiChassisLinkaggConsistencyVlanIcmpRedirectStatus=multiChassisLinkaggConsistencyVlanIcmpRedirectStatus, MultiChassisLinkIfIndex=MultiChassisLinkIfIndex, multiChassisLinkMemberPortIsPrimay=multiChassisLinkMemberPortIsPrimay, multiChassisTrapVFL=multiChassisTrapVFL, multiChassisLinkaggDefaultVlanConsistency=multiChassisLinkaggDefaultVlanConsistency, multiChassisTypeConsisFailure=multiChassisTypeConsisFailure, multiChassisLinkEntry=multiChassisLinkEntry, multiChassisLinkaggAggActorSystemPriorityConsistency=multiChassisLinkaggAggActorSystemPriorityConsistency, multiChassisOperChassisGroup=multiChassisOperChassisGroup, multiChassisVflinkDown=multiChassisVflinkDown, multiChassisLinkaggAggActorSystemIDConsistency=multiChassisLinkaggAggActorSystemIDConsistency, multiChassisLinkaggAggTypeConsistency=multiChassisLinkaggAggTypeConsistency, multiChassisLinkaggPeerAggActorSystemPriority=multiChassisLinkaggPeerAggActorSystemPriority, multiChassisLinkMemberPortLinkIfIndex=multiChassisLinkMemberPortLinkIfIndex, multiChassisMisconfigurationFailure=multiChassisMisconfigurationFailure, multiChassisStpModeConsisFailure=multiChassisStpModeConsisFailure, multiChassisLinkaggLocalExist=multiChassisLinkaggLocalExist, multiChassisLinkaggConsistencyVlanLocaleType=multiChassisLinkaggConsistencyVlanLocaleType, multiChassisIpcVlanDown=multiChassisIpcVlanDown, multiChassisLinkMemberPortRowStatus=multiChassisLinkMemberPortRowStatus, multiChassisTrapDiagnostic=multiChassisTrapDiagnostic, multiChassisOperChassisId=multiChassisOperChassisId, multiChassisLinkaggConsistencyVlanTable=multiChassisLinkaggConsistencyVlanTable, multiChassisLinkTable=multiChassisLinkTable, multiChassisLinkaggLocalListVlanSize=multiChassisLinkaggLocalListVlanSize, multiChassisLinkaggLocalDefaultVlan=multiChassisLinkaggLocalDefaultVlan, alcatelIND1MultiChassisMIBGroups=alcatelIND1MultiChassisMIBGroups, multiChassisPeerStpPathCostMode=multiChassisPeerStpPathCostMode, multiChassisLinkMemberPortGroup=multiChassisLinkMemberPortGroup, multiChassisLocalChassisType=multiChassisLocalChassisType, multiChassisConfigChassisId=multiChassisConfigChassisId, multiChassisLoopDetection=multiChassisLoopDetection, multiChassisLinkMemberOperStatus=multiChassisLinkMemberOperStatus, multiChassisLinkaggConsistencyVlanType=multiChassisLinkaggConsistencyVlanType, multiChassisLinkIfIndex=multiChassisLinkIfIndex, multiChassisLinkaggLocalAggType=multiChassisLinkaggLocalAggType, multiChassisHelloIntervalConsisFailure=multiChassisHelloIntervalConsisFailure, multiChassisPeerHelloInterval=multiChassisPeerHelloInterval, multiChassisTypeConsistency=multiChassisTypeConsistency, multiChassisLoopDetectionGroup=multiChassisLoopDetectionGroup, multiChassisLinkConfigPortNum=multiChassisLinkConfigPortNum, multiChassisTrapInfoGroup=multiChassisTrapInfoGroup, multiChassisLinkaggAggAllConsistency=multiChassisLinkaggAggAllConsistency, PYSNMP_MODULE_ID=alcatelIND1MultiChassisMIB, multiChassisConfigChassisGroup=multiChassisConfigChassisGroup, multiChassisLinkOperDefaultVlan=multiChassisLinkOperDefaultVlan, multiChassisLinkOperStatus=multiChassisLinkOperStatus, multiChassisLinkaggConsistencyVlanVpaType=multiChassisLinkaggConsistencyVlanVpaType, multiChassisLinkaggConsistencyVlanAggIndex=multiChassisLinkaggConsistencyVlanAggIndex, multiChassisPeerChassisType=multiChassisPeerChassisType, alcatelIND1MultiChassisMIBCompliances=alcatelIND1MultiChassisMIBCompliances, multiChassisOperChassisType=multiChassisOperChassisType, multiChassisLinkaggPeerListVlanSize=multiChassisLinkaggPeerListVlanSize, alcatelIND1MultiChassisMIBCompliance=alcatelIND1MultiChassisMIBCompliance, multiChassisLocalChassisGroup=multiChassisLocalChassisGroup, multiChassisGroupConsistency=multiChassisGroupConsistency, multiChassisLinkActivePortNum=multiChassisLinkActivePortNum, multiChassisLoopDetectionClear=multiChassisLoopDetectionClear, alcatelIND1MultiChassisMIB=alcatelIND1MultiChassisMIB, multiChassisTrapInfo=multiChassisTrapInfo, multiChassisLinkaggConsistencyGroup=multiChassisLinkaggConsistencyGroup, multiChassisGlobalConsistency=multiChassisGlobalConsistency, multiChassisLinkPrimaryPort=multiChassisLinkPrimaryPort, multiChassisLinkaggLocalVlanListConfigured=multiChassisLinkaggLocalVlanListConfigured, multiChassisConsisFailureRecovered=multiChassisConsisFailureRecovered, multiChassisConfigIpcVlan=multiChassisConfigIpcVlan)
