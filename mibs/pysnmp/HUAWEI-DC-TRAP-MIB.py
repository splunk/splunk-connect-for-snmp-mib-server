#
# PySNMP MIB module HUAWEI-DC-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-DC-TRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:32:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
entPhysicalName, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, Integer32, IpAddress, Unsigned32, Counter32, Bits, Counter64, NotificationType, Gauge32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Integer32", "IpAddress", "Unsigned32", "Counter32", "Bits", "Counter64", "NotificationType", "Gauge32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwDCTrapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37))
if mibBuilder.loadTexts: hwDCTrapMIB.setLastUpdated('200604240000Z')
if mibBuilder.loadTexts: hwDCTrapMIB.setOrganization('Huawei Technologies co.,Ltd.')
hwDCTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 1))
hwDCCtrlTrap = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDCCtrlTrap.setStatus('current')
hwTunnelGroupID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTunnelGroupID.setStatus('current')
hwDCTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDCTrapReason.setStatus('current')
hwDCTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2))
hwMPUSynClkFaulty = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 1)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMPUSynClkFaulty.setStatus('current')
hwMPUSynClkFaultyResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMPUSynClkFaultyResume.setStatus('current')
hwSlaveMPUNoResp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 3)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSlaveMPUNoResp.setStatus('current')
hwSlaveMPUNoRespResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 4)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSlaveMPUNoRespResume.setStatus('current')
hwBrdChannelFaulty = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 5)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdChannelFaulty.setStatus('current')
hwBrdChannelFaultyResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 6)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdChannelFaultyResume.setStatus('current')
hwBrdNofullin = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 7)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdNofullin.setStatus('current')
hwBrdNofullinResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 8)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdNofullinResume.setStatus('current')
hwBrdTypeNoMatchReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 9)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdTypeNoMatchReset.setStatus('current')
hwBrdAutoSwtFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 10)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdAutoSwtFail.setStatus('current')
hwBrdAutoSwt = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 11)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdAutoSwt.setStatus('current')
hwBrdClkLockERR = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 12)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdClkLockERR.setStatus('current')
hwBrdClkLockERRResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 13)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdClkLockERRResume.setStatus('current')
hwBrdRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 14)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdRemoved.setStatus('current')
hwBrdInserted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 15)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdInserted.setStatus('current')
hwBrdUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 16)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdUp.setStatus('current')
hwClkSrcMiss = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 17)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkSrcMiss.setStatus('current')
hwClkAllSrcLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 18)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkAllSrcLost.setStatus('current')
hwClkAllSrcLostResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 19)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkAllSrcLostResume.setStatus('current')
hwClkFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 20)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkFail.setStatus('current')
hwClkFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 21)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkFailResume.setStatus('current')
hwClkNoHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 22)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkNoHeartbeat.setStatus('current')
hwClkNoHeartbeatResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 23)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkNoHeartbeatResume.setStatus('current')
hwLPULostSynAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 24)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLPULostSynAlarm.setStatus('current')
hwLPUOpenChannelError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 25)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLPUOpenChannelError.setStatus('current')
hwLPUSlfTstErr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 26)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLPUSlfTstErr.setStatus('current')
hwLPU3ClkSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 27)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLPU3ClkSwitch.setStatus('current')
hwSFULostHrtReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 28)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSFULostHrtReset.setStatus('current')
hwSFULinkLostReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 29)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSFULinkLostReset.setStatus('current')
hwSFUChannelLinkLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 30)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSFUChannelLinkLost.setStatus('current')
hwSFUInChannelOpenFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 31)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSFUInChannelOpenFail.setStatus('current')
hwVoltSensorFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 32)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSensorFail.setStatus('current')
hwVoltSensorFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 33)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSensorFailResume.setStatus('current')
hwVoltBtmC = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 34)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltBtmC.setStatus('current')
hwVoltBtmCResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 35)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltBtmCResume.setStatus('current')
hwVoltSprC = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 36)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSprC.setStatus('current')
hwVoltSprCResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 37)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSprCResume.setStatus('current')
hwVoltBtmM = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 38)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltBtmM.setStatus('current')
hwVoltBtmMResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 39)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltBtmMResume.setStatus('current')
hwVoltSprM = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 40)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSprM.setStatus('current')
hwVoltSprMResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 41)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSprMResume.setStatus('current')
hwTempSensorFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 42)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempSensorFail.setStatus('current')
hwTempSensorFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 43)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempSensorFailResume.setStatus('current')
hwTempMnr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 44)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempMnr.setStatus('current')
hwTempMnrResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 45)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempMnrResume.setStatus('current')
hwTempMjr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 46)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempMjr.setStatus('current')
hwTempMjrResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 47)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempMjrResume.setStatus('current')
hwTempCtl = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 48)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempCtl.setStatus('current')
hwTempCtlResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 49)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempCtlResume.setStatus('current')
hwFanHFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 50)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanHFail.setStatus('current')
hwFanFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 51)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanFail.setStatus('current')
hwFanFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 52)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanFailResume.setStatus('current')
hwFanAbsent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 53)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanAbsent.setStatus('current')
hwFanAbsentResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 54)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanAbsentResume.setStatus('current')
hwFanCabUN = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 55)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanCabUN.setStatus('current')
hwFanCabUNResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 56)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanCabUNResume.setStatus('current')
hwPwrFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 57)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrFail.setStatus('current')
hwPwrFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 58)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrFailResume.setStatus('current')
hwPwrAbsent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 59)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrAbsent.setStatus('current')
hwPwrAbsentResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 60)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrAbsentResume.setStatus('current')
hwPwrCabUN = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 61)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrCabUN.setStatus('current')
hwPwrCabUNResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 62)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrCabUNResume.setStatus('current')
hwLCDHFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 63)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDHFail.setStatus('current')
hwLCDFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 64)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDFail.setStatus('current')
hwLCDAbsent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 65)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDAbsent.setStatus('current')
hwLCDAbsentResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 66)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDAbsentResume.setStatus('current')
hwLCDCabUN = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 67)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDCabUN.setStatus('current')
hwLCDCabUNResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 68)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDCabUNResume.setStatus('current')
hwROMFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 69)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwROMFail.setStatus('current')
hwMonitorBUSFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 70)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMonitorBUSFail.setStatus('current')
hwMonitorBUSFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 71)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMonitorBUSFailResume.setStatus('current')
hwBoardOfflineChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 72)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBoardOfflineChange.setStatus('current')
hwWriteFlashError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 100)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwWriteFlashError.setStatus('current')
hwBoardReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 101)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBoardReset.setStatus('current')
hwBoardResetSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 102)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBoardResetSuccess.setStatus('current')
hwSlaveMPUReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 103)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSlaveMPUReset.setStatus('current')
hwMasterSlaveSwap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 104)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMasterSlaveSwap.setStatus('current')
hwRTCFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 105)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwRTCFail.setStatus('current')
hwExchangeChipFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 106)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwExchangeChipFail.setStatus('current')
hwTempResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 107)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempResume.setStatus('current')
hwOpticalModuleInsert = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 108)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwOpticalModuleInsert.setStatus('current')
hwOpticalModuleRemove = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 109)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwOpticalModuleRemove.setStatus('current')
hwFPGAAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 110)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFPGAAbnormal.setStatus('current')
hwMinMTunnelDownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 111)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwTunnelGroupID"))
if mibBuilder.loadTexts: hwMinMTunnelDownAlarm.setStatus('current')
hwMinMTunnelUpAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 112)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwTunnelGroupID"))
if mibBuilder.loadTexts: hwMinMTunnelUpAlarm.setStatus('current')
hwInterfacePhysicalDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 113)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwInterfacePhysicalDown.setStatus('current')
hwInterfacePhysicalUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 114)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwInterfacePhysicalUp.setStatus('current')
hwBTBStartupFileNameDifferent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 119)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBStartupFileNameDifferent.setStatus('current')
hwBTBChassisRunningModeConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 120)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBChassisRunningModeConflict.setStatus('current')
hwBTBCtrlChannelFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 121)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBCtrlChannelFail.setStatus('current')
hwBTBCtrlChannelFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 122)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBCtrlChannelFailResume.setStatus('current')
hwBTBDataChannelFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 123)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBDataChannelFail.setStatus('current')
hwBTBDataChannelFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 124)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBDataChannelFailResume.setStatus('current')
hwBTBClkChannelFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 125)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBClkChannelFail.setStatus('current')
hwBTBClkChannelFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 126)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBClkChannelFailResume.setStatus('current')
hwBTBSFUOpticInterfaceError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 127)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSFUOpticInterfaceError.setStatus('current')
hwBTBSFUOpticInterfaceErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 128)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSFUOpticInterfaceErrorResume.setStatus('current')
hwBTBVSRInterfaceInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 129)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBVSRInterfaceInvalid.setStatus('current')
hwBTBVSRInterfaceInvalidResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 130)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBVSRInterfaceInvalidResume.setStatus('current')
hwBTBSlaveChassisNoHeart = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 131)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSlaveChassisNoHeart.setStatus('current')
hwBTBNoSlaveChassis = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 132)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBNoSlaveChassis.setStatus('current')
hwBTBSlaveChassisRegisted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 133)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSlaveChassisRegisted.setStatus('current')
hwBTBSlaveChassisRegisteFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 134)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSlaveChassisRegisteFail.setStatus('current')
hwBTBChassisTypeConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 135)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBChassisTypeConflict.setStatus('current')
hwSuperChangeSuccesful = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 136))
if mibBuilder.loadTexts: hwSuperChangeSuccesful.setStatus('current')
hwSuperChangeFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 137))
if mibBuilder.loadTexts: hwSuperChangeFailure.setStatus('current')
hwOpticaPowerAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 138)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwOpticaPowerAbnormal.setStatus('current')
hwEpldAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 139)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwEpldAbnormal.setStatus('current')
hwPhyChipAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 140)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPhyChipAbnormal.setStatus('current')
hwSerdesAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 141)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSerdesAbnormal.setStatus('current')
hwBoardAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 142)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBoardAbnormal.setStatus('current')
hwFeChannelAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 143)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFeChannelAbnormal.setStatus('current')
hwParityCheckAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 144)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwParityCheckAbnormal.setStatus('current')
hwPhyClockAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 145)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPhyClockAbnormal.setStatus('current')
hwPortAutoNegotiateFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 146)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPortAutoNegotiateFail.setStatus('current')
hwPortSemiduplex = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 147)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPortSemiduplex.setStatus('current')
hwScuStartModeSetFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 148)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwScuStartModeSetFail.setStatus('current')
hwMemoryExhaust = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 149))
if mibBuilder.loadTexts: hwMemoryExhaust.setStatus('current')
hwMemoryExhaustClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 150))
if mibBuilder.loadTexts: hwMemoryExhaustClear.setStatus('current')
hwMethAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 151)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMethAbnormal.setStatus('current')
hwLpuNotTight = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 152)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLpuNotTight.setStatus('current')
hwLicenseFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 153)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLicenseFail.setStatus('current')
hwHaBatchBegin = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 154)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwHaBatchBegin.setStatus('current')
hwHaBatchEnd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 155)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwHaBatchEnd.setStatus('current')
hwHaSmoothBegin = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 156)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwHaSmoothBegin.setStatus('current')
hwHaSmoothEnd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 157)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwHaSmoothEnd.setStatus('current')
hwFanUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 158)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanUp.setStatus('current')
hwDCTrapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3))
hwDCTrapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 1))
hwDCTrapControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 1, 1)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwDCCtrlTrap"), ("HUAWEI-DC-TRAP-MIB", "hwTunnelGroupID"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDCTrapControlGroup = hwDCTrapControlGroup.setStatus('current')
hwDCNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 1, 2)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwMPUSynClkFaulty"), ("HUAWEI-DC-TRAP-MIB", "hwMPUSynClkFaultyResume"), ("HUAWEI-DC-TRAP-MIB", "hwSlaveMPUNoResp"), ("HUAWEI-DC-TRAP-MIB", "hwSlaveMPUNoRespResume"), ("HUAWEI-DC-TRAP-MIB", "hwBrdChannelFaulty"), ("HUAWEI-DC-TRAP-MIB", "hwBrdChannelFaultyResume"), ("HUAWEI-DC-TRAP-MIB", "hwBrdNofullin"), ("HUAWEI-DC-TRAP-MIB", "hwBrdNofullinResume"), ("HUAWEI-DC-TRAP-MIB", "hwBrdTypeNoMatchReset"), ("HUAWEI-DC-TRAP-MIB", "hwBrdAutoSwtFail"), ("HUAWEI-DC-TRAP-MIB", "hwBrdAutoSwt"), ("HUAWEI-DC-TRAP-MIB", "hwBrdClkLockERR"), ("HUAWEI-DC-TRAP-MIB", "hwBrdClkLockERRResume"), ("HUAWEI-DC-TRAP-MIB", "hwBrdRemoved"), ("HUAWEI-DC-TRAP-MIB", "hwBrdUp"), ("HUAWEI-DC-TRAP-MIB", "hwClkSrcMiss"), ("HUAWEI-DC-TRAP-MIB", "hwClkAllSrcLost"), ("HUAWEI-DC-TRAP-MIB", "hwClkAllSrcLostResume"), ("HUAWEI-DC-TRAP-MIB", "hwClkFail"), ("HUAWEI-DC-TRAP-MIB", "hwClkFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwClkNoHeartbeat"), ("HUAWEI-DC-TRAP-MIB", "hwClkNoHeartbeatResume"), ("HUAWEI-DC-TRAP-MIB", "hwLPULostSynAlarm"), ("HUAWEI-DC-TRAP-MIB", "hwLPUOpenChannelError"), ("HUAWEI-DC-TRAP-MIB", "hwLPUSlfTstErr"), ("HUAWEI-DC-TRAP-MIB", "hwLPU3ClkSwitch"), ("HUAWEI-DC-TRAP-MIB", "hwSFULostHrtReset"), ("HUAWEI-DC-TRAP-MIB", "hwSFULinkLostReset"), ("HUAWEI-DC-TRAP-MIB", "hwSFUChannelLinkLost"), ("HUAWEI-DC-TRAP-MIB", "hwSFUInChannelOpenFail"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSensorFail"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSensorFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwVoltBtmC"), ("HUAWEI-DC-TRAP-MIB", "hwVoltBtmCResume"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSprC"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSprCResume"), ("HUAWEI-DC-TRAP-MIB", "hwVoltBtmM"), ("HUAWEI-DC-TRAP-MIB", "hwVoltBtmMResume"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSprM"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSprMResume"), ("HUAWEI-DC-TRAP-MIB", "hwTempSensorFail"), ("HUAWEI-DC-TRAP-MIB", "hwTempSensorFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwTempMnr"), ("HUAWEI-DC-TRAP-MIB", "hwTempMnrResume"), ("HUAWEI-DC-TRAP-MIB", "hwTempMjr"), ("HUAWEI-DC-TRAP-MIB", "hwTempMjrResume"), ("HUAWEI-DC-TRAP-MIB", "hwTempCtl"), ("HUAWEI-DC-TRAP-MIB", "hwTempCtlResume"), ("HUAWEI-DC-TRAP-MIB", "hwFanHFail"), ("HUAWEI-DC-TRAP-MIB", "hwFanFail"), ("HUAWEI-DC-TRAP-MIB", "hwFanFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwFanAbsent"), ("HUAWEI-DC-TRAP-MIB", "hwFanAbsentResume"), ("HUAWEI-DC-TRAP-MIB", "hwFanCabUN"), ("HUAWEI-DC-TRAP-MIB", "hwFanCabUNResume"), ("HUAWEI-DC-TRAP-MIB", "hwPwrFail"), ("HUAWEI-DC-TRAP-MIB", "hwPwrFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwPwrAbsent"), ("HUAWEI-DC-TRAP-MIB", "hwPwrAbsentResume"), ("HUAWEI-DC-TRAP-MIB", "hwPwrCabUN"), ("HUAWEI-DC-TRAP-MIB", "hwPwrCabUNResume"), ("HUAWEI-DC-TRAP-MIB", "hwLCDHFail"), ("HUAWEI-DC-TRAP-MIB", "hwLCDFail"), ("HUAWEI-DC-TRAP-MIB", "hwLCDAbsent"), ("HUAWEI-DC-TRAP-MIB", "hwLCDAbsentResume"), ("HUAWEI-DC-TRAP-MIB", "hwLCDCabUN"), ("HUAWEI-DC-TRAP-MIB", "hwLCDCabUNResume"), ("HUAWEI-DC-TRAP-MIB", "hwROMFail"), ("HUAWEI-DC-TRAP-MIB", "hwMonitorBUSFail"), ("HUAWEI-DC-TRAP-MIB", "hwMonitorBUSFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwWriteFlashError"), ("HUAWEI-DC-TRAP-MIB", "hwBoardReset"), ("HUAWEI-DC-TRAP-MIB", "hwBoardResetSuccess"), ("HUAWEI-DC-TRAP-MIB", "hwSlaveMPUReset"), ("HUAWEI-DC-TRAP-MIB", "hwMasterSlaveSwap"), ("HUAWEI-DC-TRAP-MIB", "hwRTCFail"), ("HUAWEI-DC-TRAP-MIB", "hwExchangeChipFail"), ("HUAWEI-DC-TRAP-MIB", "hwTempResume"), ("HUAWEI-DC-TRAP-MIB", "hwOpticalModuleInsert"), ("HUAWEI-DC-TRAP-MIB", "hwOpticalModuleRemove"), ("HUAWEI-DC-TRAP-MIB", "hwBoardOfflineChange"), ("HUAWEI-DC-TRAP-MIB", "hwInterfacePhysicalDown"), ("HUAWEI-DC-TRAP-MIB", "hwInterfacePhysicalUp"), ("HUAWEI-DC-TRAP-MIB", "hwBTBStartupFileNameDifferent"), ("HUAWEI-DC-TRAP-MIB", "hwBTBChassisRunningModeConflict"), ("HUAWEI-DC-TRAP-MIB", "hwBTBCtrlChannelFail"), ("HUAWEI-DC-TRAP-MIB", "hwBTBCtrlChannelFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBDataChannelFail"), ("HUAWEI-DC-TRAP-MIB", "hwBTBDataChannelFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBClkChannelFail"), ("HUAWEI-DC-TRAP-MIB", "hwBTBClkChannelFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSFUOpticInterfaceError"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSFUOpticInterfaceErrorResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBVSRInterfaceInvalid"), ("HUAWEI-DC-TRAP-MIB", "hwBTBVSRInterfaceInvalidResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSlaveChassisNoHeart"), ("HUAWEI-DC-TRAP-MIB", "hwBTBNoSlaveChassis"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSlaveChassisRegisted"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSlaveChassisRegisteFail"), ("HUAWEI-DC-TRAP-MIB", "hwBTBChassisTypeConflict"), ("HUAWEI-DC-TRAP-MIB", "hwOpticaPowerAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwFPGAAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwBrdInserted"), ("HUAWEI-DC-TRAP-MIB", "hwMinMTunnelDownAlarm"), ("HUAWEI-DC-TRAP-MIB", "hwMinMTunnelUpAlarm"), ("HUAWEI-DC-TRAP-MIB", "hwSuperChangeSuccesful"), ("HUAWEI-DC-TRAP-MIB", "hwSuperChangeFailure"), ("HUAWEI-DC-TRAP-MIB", "hwEpldAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwPhyChipAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwSerdesAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwBoardAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwFeChannelAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwParityCheckAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwPhyClockAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwPortAutoNegotiateFail"), ("HUAWEI-DC-TRAP-MIB", "hwPortSemiduplex"), ("HUAWEI-DC-TRAP-MIB", "hwScuStartModeSetFail"), ("HUAWEI-DC-TRAP-MIB", "hwMemoryExhaust"), ("HUAWEI-DC-TRAP-MIB", "hwMemoryExhaustClear"), ("HUAWEI-DC-TRAP-MIB", "hwMethAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwLpuNotTight"), ("HUAWEI-DC-TRAP-MIB", "hwLicenseFail"), ("HUAWEI-DC-TRAP-MIB", "hwHaBatchBegin"), ("HUAWEI-DC-TRAP-MIB", "hwHaBatchEnd"), ("HUAWEI-DC-TRAP-MIB", "hwHaSmoothBegin"), ("HUAWEI-DC-TRAP-MIB", "hwHaSmoothEnd"), ("HUAWEI-DC-TRAP-MIB", "hwFanUp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDCNotificationGroup = hwDCNotificationGroup.setStatus('current')
hwDCTrapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 2))
hwDCTrapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 2, 1)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwDCTrapControlGroup"), ("HUAWEI-DC-TRAP-MIB", "hwDCNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDCTrapCompliance = hwDCTrapCompliance.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-DC-TRAP-MIB", hwPwrFailResume=hwPwrFailResume, hwDCTrapMIB=hwDCTrapMIB, hwDCNotificationGroup=hwDCNotificationGroup, hwBTBClkChannelFail=hwBTBClkChannelFail, hwFeChannelAbnormal=hwFeChannelAbnormal, hwBrdClkLockERR=hwBrdClkLockERR, hwBTBCtrlChannelFailResume=hwBTBCtrlChannelFailResume, hwMPUSynClkFaulty=hwMPUSynClkFaulty, hwTempSensorFailResume=hwTempSensorFailResume, hwBTBChassisTypeConflict=hwBTBChassisTypeConflict, hwVoltBtmM=hwVoltBtmM, hwROMFail=hwROMFail, hwFanFail=hwFanFail, hwFanUp=hwFanUp, hwClkSrcMiss=hwClkSrcMiss, hwBrdChannelFaulty=hwBrdChannelFaulty, hwBrdNofullin=hwBrdNofullin, hwMemoryExhaustClear=hwMemoryExhaustClear, hwBrdTypeNoMatchReset=hwBrdTypeNoMatchReset, hwVoltSprC=hwVoltSprC, hwDCTrapConformance=hwDCTrapConformance, hwClkNoHeartbeat=hwClkNoHeartbeat, hwLPUSlfTstErr=hwLPUSlfTstErr, hwClkNoHeartbeatResume=hwClkNoHeartbeatResume, hwBTBSFUOpticInterfaceErrorResume=hwBTBSFUOpticInterfaceErrorResume, hwSuperChangeFailure=hwSuperChangeFailure, hwVoltSprCResume=hwVoltSprCResume, hwBTBCtrlChannelFail=hwBTBCtrlChannelFail, hwLpuNotTight=hwLpuNotTight, hwPhyClockAbnormal=hwPhyClockAbnormal, hwOpticalModuleRemove=hwOpticalModuleRemove, hwBrdRemoved=hwBrdRemoved, hwDCTraps=hwDCTraps, hwBrdInserted=hwBrdInserted, hwWriteFlashError=hwWriteFlashError, hwBTBSlaveChassisNoHeart=hwBTBSlaveChassisNoHeart, hwBTBChassisRunningModeConflict=hwBTBChassisRunningModeConflict, hwDCTrapReason=hwDCTrapReason, hwBrdNofullinResume=hwBrdNofullinResume, hwVoltSprMResume=hwVoltSprMResume, hwBTBNoSlaveChassis=hwBTBNoSlaveChassis, hwHaBatchEnd=hwHaBatchEnd, hwExchangeChipFail=hwExchangeChipFail, hwBTBVSRInterfaceInvalidResume=hwBTBVSRInterfaceInvalidResume, hwVoltBtmMResume=hwVoltBtmMResume, hwBTBVSRInterfaceInvalid=hwBTBVSRInterfaceInvalid, hwSFUInChannelOpenFail=hwSFUInChannelOpenFail, hwBoardReset=hwBoardReset, hwTempSensorFail=hwTempSensorFail, hwLCDCabUNResume=hwLCDCabUNResume, hwFanHFail=hwFanHFail, hwMonitorBUSFail=hwMonitorBUSFail, hwTempResume=hwTempResume, hwPhyChipAbnormal=hwPhyChipAbnormal, hwTempMnrResume=hwTempMnrResume, hwLCDAbsent=hwLCDAbsent, hwPwrAbsentResume=hwPwrAbsentResume, hwSFULostHrtReset=hwSFULostHrtReset, hwDCTrapControlGroup=hwDCTrapControlGroup, hwTempCtlResume=hwTempCtlResume, hwPwrCabUNResume=hwPwrCabUNResume, hwFanAbsent=hwFanAbsent, hwClkFailResume=hwClkFailResume, hwSlaveMPUReset=hwSlaveMPUReset, hwFanFailResume=hwFanFailResume, hwBoardResetSuccess=hwBoardResetSuccess, hwBoardOfflineChange=hwBoardOfflineChange, hwTunnelGroupID=hwTunnelGroupID, hwBTBSFUOpticInterfaceError=hwBTBSFUOpticInterfaceError, hwVoltBtmCResume=hwVoltBtmCResume, hwSerdesAbnormal=hwSerdesAbnormal, hwPwrFail=hwPwrFail, hwInterfacePhysicalDown=hwInterfacePhysicalDown, hwMonitorBUSFailResume=hwMonitorBUSFailResume, hwMemoryExhaust=hwMemoryExhaust, hwDCTrapGroups=hwDCTrapGroups, hwLPULostSynAlarm=hwLPULostSynAlarm, hwLPUOpenChannelError=hwLPUOpenChannelError, hwBTBStartupFileNameDifferent=hwBTBStartupFileNameDifferent, hwBrdUp=hwBrdUp, PYSNMP_MODULE_ID=hwDCTrapMIB, hwSlaveMPUNoResp=hwSlaveMPUNoResp, hwSFUChannelLinkLost=hwSFUChannelLinkLost, hwParityCheckAbnormal=hwParityCheckAbnormal, hwMinMTunnelDownAlarm=hwMinMTunnelDownAlarm, hwFanCabUN=hwFanCabUN, hwTempMjr=hwTempMjr, hwBTBDataChannelFail=hwBTBDataChannelFail, hwTempCtl=hwTempCtl, hwOpticaPowerAbnormal=hwOpticaPowerAbnormal, hwDCCtrlTrap=hwDCCtrlTrap, hwBrdAutoSwt=hwBrdAutoSwt, hwBTBSlaveChassisRegisted=hwBTBSlaveChassisRegisted, hwVoltSensorFail=hwVoltSensorFail, hwLCDHFail=hwLCDHFail, hwMasterSlaveSwap=hwMasterSlaveSwap, hwHaBatchBegin=hwHaBatchBegin, hwVoltBtmC=hwVoltBtmC, hwBrdAutoSwtFail=hwBrdAutoSwtFail, hwSuperChangeSuccesful=hwSuperChangeSuccesful, hwFPGAAbnormal=hwFPGAAbnormal, hwMethAbnormal=hwMethAbnormal, hwBrdClkLockERRResume=hwBrdClkLockERRResume, hwClkAllSrcLost=hwClkAllSrcLost, hwBrdChannelFaultyResume=hwBrdChannelFaultyResume, hwClkFail=hwClkFail, hwMinMTunnelUpAlarm=hwMinMTunnelUpAlarm, hwDCTrapCompliances=hwDCTrapCompliances, hwTempMnr=hwTempMnr, hwMPUSynClkFaultyResume=hwMPUSynClkFaultyResume, hwScuStartModeSetFail=hwScuStartModeSetFail, hwFanCabUNResume=hwFanCabUNResume, hwBTBSlaveChassisRegisteFail=hwBTBSlaveChassisRegisteFail, hwSlaveMPUNoRespResume=hwSlaveMPUNoRespResume, hwPwrCabUN=hwPwrCabUN, hwDCTrapCompliance=hwDCTrapCompliance, hwFanAbsentResume=hwFanAbsentResume, hwHaSmoothEnd=hwHaSmoothEnd, hwPwrAbsent=hwPwrAbsent, hwVoltSprM=hwVoltSprM, hwEpldAbnormal=hwEpldAbnormal, hwInterfacePhysicalUp=hwInterfacePhysicalUp, hwOpticalModuleInsert=hwOpticalModuleInsert, hwPortSemiduplex=hwPortSemiduplex, hwPortAutoNegotiateFail=hwPortAutoNegotiateFail, hwLCDFail=hwLCDFail, hwTempMjrResume=hwTempMjrResume, hwBTBClkChannelFailResume=hwBTBClkChannelFailResume, hwBoardAbnormal=hwBoardAbnormal, hwClkAllSrcLostResume=hwClkAllSrcLostResume, hwLCDAbsentResume=hwLCDAbsentResume, hwBTBDataChannelFailResume=hwBTBDataChannelFailResume, hwLCDCabUN=hwLCDCabUN, hwVoltSensorFailResume=hwVoltSensorFailResume, hwSFULinkLostReset=hwSFULinkLostReset, hwLPU3ClkSwitch=hwLPU3ClkSwitch, hwRTCFail=hwRTCFail, hwHaSmoothBegin=hwHaSmoothBegin, hwDCTrapControl=hwDCTrapControl, hwLicenseFail=hwLicenseFail)
