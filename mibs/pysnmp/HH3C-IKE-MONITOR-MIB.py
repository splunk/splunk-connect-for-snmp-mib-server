#
# PySNMP MIB module HH3C-IKE-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-IKE-MONITOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:14:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, iso, ObjectIdentity, Unsigned32, Bits, NotificationType, MibIdentifier, TimeTicks, Integer32, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Unsigned32", "Bits", "NotificationType", "MibIdentifier", "TimeTicks", "Integer32", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hh3cIKEMonitor = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 30))
if mibBuilder.loadTexts: hh3cIKEMonitor.setLastUpdated('200410260000Z')
if mibBuilder.loadTexts: hh3cIKEMonitor.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cIKENegoMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 4, 32))
    namedValues = NamedValues(("mainMode", 2), ("aggressiveMode", 4), ("quickMode", 32))

class Hh3cIKEAuthMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3))
    namedValues = NamedValues(("preSharedKey", 1), ("rsaSignatures", 3))

class Hh3cDiffHellmanGrp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 5, 14))
    namedValues = NamedValues(("modp768", 1), ("modp1024", 2), ("modp1536", 5), ("modp2048", 14))

class Hh3cEncryptAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("desCbc", 1), ("ideaCbc", 2), ("blowfishCbc", 3), ("rc5R16B64Cbc", 4), ("tripleDesCbc", 5), ("castCbc", 6), ("aesCbc", 7), ("aesCbc128", 8), ("aesCbc192", 9), ("aesCbc256", 10))

class Hh3cAuthAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("md5", 1), ("sha", 2))

class Hh3cSaProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("reserved", 0), ("isakmp", 1), ("ah", 2), ("esp", 3), ("ipcomp", 4))

class Hh3cTrapStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class Hh3cIKEIDType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("reserved", 0), ("ipv4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8), ("derAsn1Dn", 9), ("derAsn1Gn", 10), ("keyId", 11))

class Hh3cTrafficType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ipv4Addr", 1), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8))

class Hh3cIKETunnelState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("timeout", 2))

hh3cIKEObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1))
hh3cIKETunnelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1), )
if mibBuilder.loadTexts: hh3cIKETunnelTable.setStatus('current')
hh3cIKETunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1), ).setIndexNames((0, "HH3C-IKE-MONITOR-MIB", "hh3cIKETunIndex"))
if mibBuilder.loadTexts: hh3cIKETunnelEntry.setStatus('current')
hh3cIKETunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cIKETunIndex.setStatus('current')
hh3cIKETunLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 2), Hh3cIKEIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunLocalType.setStatus('current')
hh3cIKETunLocalValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunLocalValue1.setStatus('current')
hh3cIKETunLocalValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunLocalValue2.setStatus('current')
hh3cIKETunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunLocalAddr.setStatus('current')
hh3cIKETunRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 6), Hh3cIKEIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunRemoteType.setStatus('current')
hh3cIKETunRemoteValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunRemoteValue1.setStatus('current')
hh3cIKETunRemoteValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunRemoteValue2.setStatus('current')
hh3cIKETunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunRemoteAddr.setStatus('current')
hh3cIKETunInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInitiator.setStatus('current')
hh3cIKETunNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 11), Hh3cIKENegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunNegoMode.setStatus('current')
hh3cIKETunDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 12), Hh3cDiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunDiffHellmanGrp.setStatus('current')
hh3cIKETunEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 13), Hh3cEncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunEncryptAlgo.setStatus('current')
hh3cIKETunHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 14), Hh3cAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunHashAlgo.setStatus('current')
hh3cIKETunAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 15), Hh3cIKEAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunAuthMethod.setStatus('current')
hh3cIKETunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunLifeTime.setStatus('current')
hh3cIKETunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunActiveTime.setStatus('current')
hh3cIKETunRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunRemainTime.setStatus('current')
hh3cIKETunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunTotalRefreshes.setStatus('current')
hh3cIKETunState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 20), Hh3cIKETunnelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunState.setStatus('current')
hh3cIKETunDpdIntervalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 21), Integer32().clone(10)).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunDpdIntervalTime.setStatus('current')
hh3cIKETunDpdTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 1, 1, 22), Integer32().clone(5)).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunDpdTimeOut.setStatus('current')
hh3cIKETunnelStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2), )
if mibBuilder.loadTexts: hh3cIKETunnelStatTable.setStatus('current')
hh3cIKETunnelStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1), ).setIndexNames((0, "HH3C-IKE-MONITOR-MIB", "hh3cIKETunIndex"))
if mibBuilder.loadTexts: hh3cIKETunnelStatEntry.setStatus('current')
hh3cIKETunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInOctets.setStatus('current')
hh3cIKETunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInPkts.setStatus('current')
hh3cIKETunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInDropPkts.setStatus('current')
hh3cIKETunInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInP2Exchgs.setStatus('current')
hh3cIKETunInP2ExchgRejets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInP2ExchgRejets.setStatus('current')
hh3cIKETunInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInP2SaDelRequests.setStatus('current')
hh3cIKETunInP1SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInP1SaDelRequests.setStatus('current')
hh3cIKETunInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunInNotifys.setStatus('current')
hh3cIKETunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunOutOctets.setStatus('current')
hh3cIKETunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunOutPkts.setStatus('current')
hh3cIKETunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunOutDropPkts.setStatus('current')
hh3cIKETunOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunOutP2Exchgs.setStatus('current')
hh3cIKETunOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunOutP2ExchgRejects.setStatus('current')
hh3cIKETunOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunOutP2SaDelRequests.setStatus('current')
hh3cIKETunOutP1SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunOutP1SaDelRequests.setStatus('current')
hh3cIKETunOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKETunOutNotifys.setStatus('current')
hh3cIKEGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3))
hh3cIKEGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalActiveTunnels.setStatus('current')
hh3cIKEGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInOctets.setStatus('current')
hh3cIKEGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInPkts.setStatus('current')
hh3cIKEGlobalInDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInDropPkts.setStatus('current')
hh3cIKEGlobalInP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInP2Exchgs.setStatus('current')
hh3cIKEGlobalInP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInP2ExchgRejects.setStatus('current')
hh3cIKEGlobalInP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInP2SaDelRequests.setStatus('current')
hh3cIKEGlobalInNotifys = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInNotifys.setStatus('current')
hh3cIKEGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalOutOctets.setStatus('current')
hh3cIKEGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalOutPkts.setStatus('current')
hh3cIKEGlobalOutDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalOutDropPkts.setStatus('current')
hh3cIKEGlobalOutP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalOutP2Exchgs.setStatus('current')
hh3cIKEGlobalOutP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalOutP2ExchgRejects.setStatus('current')
hh3cIKEGlobalOutP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalOutP2SaDelRequests.setStatus('current')
hh3cIKEGlobalOutNotifys = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalOutNotifys.setStatus('current')
hh3cIKEGlobalInitTunnels = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInitTunnels.setStatus('current')
hh3cIKEGlobalInitTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInitTunnelFails.setStatus('current')
hh3cIKEGlobalRespTunnels = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalRespTunnels.setStatus('current')
hh3cIKEGlobalRespTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalRespTunnelFails.setStatus('current')
hh3cIKEGlobalAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalAuthFails.setStatus('current')
hh3cIKEGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalNoSaFails.setStatus('current')
hh3cIKEGlobalInvalidCookieFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInvalidCookieFails.setStatus('current')
hh3cIKEGlobalAttrNotSuppFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalAttrNotSuppFails.setStatus('current')
hh3cIKEGlobalNoProposalChosenFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalNoProposalChosenFails.setStatus('current')
hh3cIKEGlobalUnsportExchTypeFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalUnsportExchTypeFails.setStatus('current')
hh3cIKEGlobalInvalidIdFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInvalidIdFails.setStatus('current')
hh3cIKEGlobalInvalidProFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInvalidProFails.setStatus('current')
hh3cIKEGlobalCertTypeUnsuppFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalCertTypeUnsuppFails.setStatus('current')
hh3cIKEGlobalInvalidCertAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInvalidCertAuthFails.setStatus('current')
hh3cIKEGlobalInvalidSignFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalInvalidSignFails.setStatus('current')
hh3cIKEGlobalCertUnavailableFails = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 3, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIKEGlobalCertUnavailableFails.setStatus('current')
hh3cIKETrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 4))
hh3cIKEProposalNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 4, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIKEProposalNumber.setStatus('current')
hh3cIKEProposalSize = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 4, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIKEProposalSize.setStatus('current')
hh3cIKEIdInformation = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 4, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIKEIdInformation.setStatus('current')
hh3cIKEProtocolNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 4, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIKEProtocolNum.setStatus('current')
hh3cIKECertInformation = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 4, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIKECertInformation.setStatus('current')
hh3cIKETrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5))
hh3cIKETrapGlobalCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 1), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKETrapGlobalCntl.setStatus('current')
hh3cIKETunnelStartTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 2), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKETunnelStartTrapCntl.setStatus('current')
hh3cIKETunnelStopTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 3), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKETunnelStopTrapCntl.setStatus('current')
hh3cIKENoSaTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 4), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKENoSaTrapCntl.setStatus('current')
hh3cIKEEncryFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 5), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEEncryFailureTrapCntl.setStatus('current')
hh3cIKEDecryFailureTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 6), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEDecryFailureTrapCntl.setStatus('current')
hh3cIKEInvalidProposalTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 7), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEInvalidProposalTrapCntl.setStatus('current')
hh3cIKEAuthFailTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 8), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEAuthFailTrapCntl.setStatus('current')
hh3cIKEInvalidCookieTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 9), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEInvalidCookieTrapCntl.setStatus('current')
hh3cIKEInvalidSpiTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 10), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEInvalidSpiTrapCntl.setStatus('current')
hh3cIKEAttrNotSuppTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 11), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEAttrNotSuppTrapCntl.setStatus('current')
hh3cIKEUnsportExchTypeTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 12), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEUnsportExchTypeTrapCntl.setStatus('current')
hh3cIKEInvalidIdTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 13), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEInvalidIdTrapCntl.setStatus('current')
hh3cIKEInvalidProtocolTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 14), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEInvalidProtocolTrapCntl.setStatus('current')
hh3cIKECertTypeUnsuppTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 15), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKECertTypeUnsuppTrapCntl.setStatus('current')
hh3cIKEInvalidCertAuthTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 16), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEInvalidCertAuthTrapCntl.setStatus('current')
hh3cIKEInvalidSignTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 17), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEInvalidSignTrapCntl.setStatus('current')
hh3cIKECertUnavailableTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 18), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKECertUnavailableTrapCntl.setStatus('current')
hh3cIKEProposalAddTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 19), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEProposalAddTrapCntl.setStatus('current')
hh3cIKEProposalDelTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 5, 20), Hh3cTrapStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIKEProposalDelTrapCntl.setStatus('current')
hh3cIKETrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6))
hh3cIKENotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1))
hh3cIKETunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 1)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLifeTime"))
if mibBuilder.loadTexts: hh3cIKETunnelStart.setStatus('current')
hh3cIKETunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 2)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunActiveTime"))
if mibBuilder.loadTexts: hh3cIKETunnelStop.setStatus('current')
hh3cIKENoSaFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 3)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: hh3cIKENoSaFailure.setStatus('current')
hh3cIKEEncryFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 4)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: hh3cIKEEncryFailFailure.setStatus('current')
hh3cIKEDecryFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 5)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: hh3cIKEDecryFailFailure.setStatus('current')
hh3cIKEInvalidProposalFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 6)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: hh3cIKEInvalidProposalFailure.setStatus('current')
hh3cIKEAuthFailFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 7)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: hh3cIKEAuthFailFailure.setStatus('current')
hh3cIKEInvalidCookieFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 8)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: hh3cIKEInvalidCookieFailure.setStatus('current')
hh3cIKEAttrNotSuppFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 9)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: hh3cIKEAttrNotSuppFailure.setStatus('current')
hh3cIKEUnsportExchTypeFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 10)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"))
if mibBuilder.loadTexts: hh3cIKEUnsportExchTypeFailure.setStatus('current')
hh3cIKEInvalidIdFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 11)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEIdInformation"))
if mibBuilder.loadTexts: hh3cIKEInvalidIdFailure.setStatus('current')
hh3cIKEInvalidProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 12)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProtocolNum"))
if mibBuilder.loadTexts: hh3cIKEInvalidProtocolFailure.setStatus('current')
hh3cIKECertTypeUnsuppFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 13)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertInformation"))
if mibBuilder.loadTexts: hh3cIKECertTypeUnsuppFailure.setStatus('current')
hh3cIKEInvalidCertAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 14)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertInformation"))
if mibBuilder.loadTexts: hh3cIKEInvalidCertAuthFailure.setStatus('current')
hh3cIKElInvalidSignFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 15)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertInformation"))
if mibBuilder.loadTexts: hh3cIKElInvalidSignFailure.setStatus('current')
hh3cIKECertUnavailableFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 16)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertInformation"))
if mibBuilder.loadTexts: hh3cIKECertUnavailableFailure.setStatus('current')
hh3cIKEProposalAdd = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 17)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalNumber"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalSize"))
if mibBuilder.loadTexts: hh3cIKEProposalAdd.setStatus('current')
hh3cIKEProposalDel = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 30, 1, 6, 1, 18)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalNumber"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalSize"))
if mibBuilder.loadTexts: hh3cIKEProposalDel.setStatus('current')
hh3cIKEConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2))
hh3cIKECompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 1))
hh3cIKEGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 2))
hh3cIKECompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 1, 1)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunnelTableGroup"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunnelStatTableGroup"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalStatsGroup"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETrapObjectGroup"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETrapCntlGroup"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIKECompliance = hh3cIKECompliance.setStatus('current')
hh3cIKETunnelTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 2, 1)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalType"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalValue1"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalValue2"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLocalAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteType"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteValue1"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteValue2"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemoteAddr"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInitiator"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunNegoMode"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunDiffHellmanGrp"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunEncryptAlgo"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunHashAlgo"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunAuthMethod"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunLifeTime"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunActiveTime"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunRemainTime"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunTotalRefreshes"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunState"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunDpdIntervalTime"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunDpdTimeOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIKETunnelTableGroup = hh3cIKETunnelTableGroup.setStatus('current')
hh3cIKETunnelStatTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 2, 2)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInOctets"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInPkts"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInDropPkts"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInP2Exchgs"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInP2ExchgRejets"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInP2SaDelRequests"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInP1SaDelRequests"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunInNotifys"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunOutOctets"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunOutPkts"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunOutDropPkts"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunOutP2Exchgs"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunOutP2ExchgRejects"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunOutP2SaDelRequests"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunOutP1SaDelRequests"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunOutNotifys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIKETunnelStatTableGroup = hh3cIKETunnelStatTableGroup.setStatus('current')
hh3cIKEGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 2, 3)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalActiveTunnels"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInOctets"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInPkts"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInDropPkts"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInP2Exchgs"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInP2ExchgRejects"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInP2SaDelRequests"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInNotifys"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalOutOctets"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalOutPkts"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalOutDropPkts"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalOutP2Exchgs"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalOutP2ExchgRejects"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalOutP2SaDelRequests"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalOutNotifys"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInitTunnels"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInitTunnelFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalRespTunnels"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalRespTunnelFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalAuthFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalNoSaFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInvalidCookieFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalAttrNotSuppFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalNoProposalChosenFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalUnsportExchTypeFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInvalidIdFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInvalidProFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalCertTypeUnsuppFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInvalidCertAuthFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalInvalidSignFails"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEGlobalCertUnavailableFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIKEGlobalStatsGroup = hh3cIKEGlobalStatsGroup.setStatus('current')
hh3cIKETrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 2, 4)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalNumber"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalSize"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEIdInformation"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProtocolNum"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertInformation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIKETrapObjectGroup = hh3cIKETrapObjectGroup.setStatus('current')
hh3cIKETrapCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 2, 5)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETrapGlobalCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunnelStartTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunnelStopTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKENoSaTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEEncryFailureTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEDecryFailureTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidProposalTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEAuthFailTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidCookieTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidSpiTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEAttrNotSuppTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEUnsportExchTypeTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidIdTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidProtocolTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertTypeUnsuppTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidCertAuthTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidSignTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertUnavailableTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalAddTrapCntl"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalDelTrapCntl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIKETrapCntlGroup = hh3cIKETrapCntlGroup.setStatus('current')
hh3cIKETrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 2, 30, 2, 2, 6)).setObjects(("HH3C-IKE-MONITOR-MIB", "hh3cIKETunnelStart"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKETunnelStop"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKENoSaFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEEncryFailFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEDecryFailFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidProposalFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEAuthFailFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidCookieFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEAttrNotSuppFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEUnsportExchTypeFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidIdFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidProtocolFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertTypeUnsuppFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEInvalidCertAuthFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKElInvalidSignFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKECertUnavailableFailure"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalAdd"), ("HH3C-IKE-MONITOR-MIB", "hh3cIKEProposalDel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIKETrapGroup = hh3cIKETrapGroup.setStatus('current')
mibBuilder.exportSymbols("HH3C-IKE-MONITOR-MIB", hh3cIKETunnelTableGroup=hh3cIKETunnelTableGroup, hh3cIKENotifications=hh3cIKENotifications, hh3cIKETunDpdIntervalTime=hh3cIKETunDpdIntervalTime, hh3cIKETunAuthMethod=hh3cIKETunAuthMethod, hh3cIKEDecryFailureTrapCntl=hh3cIKEDecryFailureTrapCntl, hh3cIKEGroups=hh3cIKEGroups, hh3cIKEGlobalInvalidProFails=hh3cIKEGlobalInvalidProFails, hh3cIKETrapGroup=hh3cIKETrapGroup, hh3cIKEGlobalOutP2ExchgRejects=hh3cIKEGlobalOutP2ExchgRejects, hh3cIKEGlobalStatsGroup=hh3cIKEGlobalStatsGroup, hh3cIKEGlobalOutP2Exchgs=hh3cIKEGlobalOutP2Exchgs, hh3cIKEGlobalCertTypeUnsuppFails=hh3cIKEGlobalCertTypeUnsuppFails, hh3cIKETunInP2SaDelRequests=hh3cIKETunInP2SaDelRequests, hh3cIKEProposalNumber=hh3cIKEProposalNumber, hh3cIKETunOutP2ExchgRejects=hh3cIKETunOutP2ExchgRejects, hh3cIKEInvalidSignTrapCntl=hh3cIKEInvalidSignTrapCntl, hh3cIKETunEncryptAlgo=hh3cIKETunEncryptAlgo, hh3cIKEGlobalNoProposalChosenFails=hh3cIKEGlobalNoProposalChosenFails, hh3cIKEGlobalInNotifys=hh3cIKEGlobalInNotifys, hh3cIKETunNegoMode=hh3cIKETunNegoMode, hh3cIKEGlobalInvalidCookieFails=hh3cIKEGlobalInvalidCookieFails, hh3cIKETunLocalAddr=hh3cIKETunLocalAddr, hh3cIKEAuthFailFailure=hh3cIKEAuthFailFailure, hh3cIKETunnelStatEntry=hh3cIKETunnelStatEntry, hh3cIKECompliances=hh3cIKECompliances, hh3cIKETunnelTable=hh3cIKETunnelTable, hh3cIKEGlobalRespTunnelFails=hh3cIKEGlobalRespTunnelFails, hh3cIKENoSaTrapCntl=hh3cIKENoSaTrapCntl, hh3cIKETunHashAlgo=hh3cIKETunHashAlgo, hh3cIKETunIndex=hh3cIKETunIndex, Hh3cAuthAlgo=Hh3cAuthAlgo, hh3cIKEInvalidCertAuthFailure=hh3cIKEInvalidCertAuthFailure, Hh3cIKENegoMode=Hh3cIKENegoMode, hh3cIKETunDpdTimeOut=hh3cIKETunDpdTimeOut, hh3cIKEGlobalRespTunnels=hh3cIKEGlobalRespTunnels, hh3cIKETunOutPkts=hh3cIKETunOutPkts, hh3cIKEGlobalStats=hh3cIKEGlobalStats, hh3cIKEUnsportExchTypeTrapCntl=hh3cIKEUnsportExchTypeTrapCntl, hh3cIKEGlobalOutNotifys=hh3cIKEGlobalOutNotifys, Hh3cSaProtocol=Hh3cSaProtocol, hh3cIKEAuthFailTrapCntl=hh3cIKEAuthFailTrapCntl, hh3cIKECertTypeUnsuppTrapCntl=hh3cIKECertTypeUnsuppTrapCntl, hh3cIKEProposalDelTrapCntl=hh3cIKEProposalDelTrapCntl, hh3cIKEMonitor=hh3cIKEMonitor, hh3cIKETunInP2ExchgRejets=hh3cIKETunInP2ExchgRejets, hh3cIKEGlobalOutOctets=hh3cIKEGlobalOutOctets, Hh3cIKETunnelState=Hh3cIKETunnelState, hh3cIKETunOutP2SaDelRequests=hh3cIKETunOutP2SaDelRequests, hh3cIKETunRemainTime=hh3cIKETunRemainTime, hh3cIKEGlobalInitTunnelFails=hh3cIKEGlobalInitTunnelFails, hh3cIKECompliance=hh3cIKECompliance, hh3cIKEGlobalAttrNotSuppFails=hh3cIKEGlobalAttrNotSuppFails, hh3cIKEIdInformation=hh3cIKEIdInformation, hh3cIKETunInitiator=hh3cIKETunInitiator, hh3cIKEInvalidProposalTrapCntl=hh3cIKEInvalidProposalTrapCntl, hh3cIKETunInPkts=hh3cIKETunInPkts, hh3cIKETunState=hh3cIKETunState, hh3cIKECertInformation=hh3cIKECertInformation, Hh3cDiffHellmanGrp=Hh3cDiffHellmanGrp, hh3cIKETunLocalType=hh3cIKETunLocalType, hh3cIKETunInOctets=hh3cIKETunInOctets, hh3cIKEInvalidCookieTrapCntl=hh3cIKEInvalidCookieTrapCntl, hh3cIKETunnelStartTrapCntl=hh3cIKETunnelStartTrapCntl, hh3cIKEInvalidIdFailure=hh3cIKEInvalidIdFailure, hh3cIKElInvalidSignFailure=hh3cIKElInvalidSignFailure, hh3cIKETunTotalRefreshes=hh3cIKETunTotalRefreshes, hh3cIKEEncryFailureTrapCntl=hh3cIKEEncryFailureTrapCntl, hh3cIKEProposalDel=hh3cIKEProposalDel, hh3cIKETrapObject=hh3cIKETrapObject, hh3cIKEGlobalOutPkts=hh3cIKEGlobalOutPkts, hh3cIKEGlobalUnsportExchTypeFails=hh3cIKEGlobalUnsportExchTypeFails, hh3cIKEInvalidProtocolTrapCntl=hh3cIKEInvalidProtocolTrapCntl, hh3cIKETunnelStart=hh3cIKETunnelStart, hh3cIKEInvalidProtocolFailure=hh3cIKEInvalidProtocolFailure, hh3cIKETunDiffHellmanGrp=hh3cIKETunDiffHellmanGrp, hh3cIKETrap=hh3cIKETrap, hh3cIKETunActiveTime=hh3cIKETunActiveTime, hh3cIKETunInNotifys=hh3cIKETunInNotifys, hh3cIKECertTypeUnsuppFailure=hh3cIKECertTypeUnsuppFailure, hh3cIKEInvalidProposalFailure=hh3cIKEInvalidProposalFailure, hh3cIKETunnelStatTable=hh3cIKETunnelStatTable, hh3cIKEGlobalCertUnavailableFails=hh3cIKEGlobalCertUnavailableFails, hh3cIKETunOutP2Exchgs=hh3cIKETunOutP2Exchgs, hh3cIKETunInP2Exchgs=hh3cIKETunInP2Exchgs, hh3cIKECertUnavailableFailure=hh3cIKECertUnavailableFailure, hh3cIKEGlobalOutDropPkts=hh3cIKEGlobalOutDropPkts, hh3cIKECertUnavailableTrapCntl=hh3cIKECertUnavailableTrapCntl, hh3cIKEGlobalNoSaFails=hh3cIKEGlobalNoSaFails, hh3cIKEAttrNotSuppTrapCntl=hh3cIKEAttrNotSuppTrapCntl, hh3cIKEInvalidCertAuthTrapCntl=hh3cIKEInvalidCertAuthTrapCntl, hh3cIKETunLifeTime=hh3cIKETunLifeTime, hh3cIKEInvalidCookieFailure=hh3cIKEInvalidCookieFailure, hh3cIKEGlobalInvalidSignFails=hh3cIKEGlobalInvalidSignFails, hh3cIKEGlobalInDropPkts=hh3cIKEGlobalInDropPkts, hh3cIKEConformance=hh3cIKEConformance, hh3cIKEProtocolNum=hh3cIKEProtocolNum, hh3cIKETunRemoteValue1=hh3cIKETunRemoteValue1, hh3cIKEGlobalInOctets=hh3cIKEGlobalInOctets, hh3cIKEProposalAdd=hh3cIKEProposalAdd, hh3cIKETrapObjectGroup=hh3cIKETrapObjectGroup, hh3cIKEEncryFailFailure=hh3cIKEEncryFailFailure, hh3cIKEProposalSize=hh3cIKEProposalSize, hh3cIKEGlobalInP2SaDelRequests=hh3cIKEGlobalInP2SaDelRequests, hh3cIKETunOutOctets=hh3cIKETunOutOctets, hh3cIKENoSaFailure=hh3cIKENoSaFailure, PYSNMP_MODULE_ID=hh3cIKEMonitor, Hh3cEncryptAlgo=Hh3cEncryptAlgo, hh3cIKETrapCntlGroup=hh3cIKETrapCntlGroup, hh3cIKETunOutP1SaDelRequests=hh3cIKETunOutP1SaDelRequests, hh3cIKETunInP1SaDelRequests=hh3cIKETunInP1SaDelRequests, Hh3cIKEIDType=Hh3cIKEIDType, hh3cIKETrapCntl=hh3cIKETrapCntl, hh3cIKEDecryFailFailure=hh3cIKEDecryFailFailure, hh3cIKEGlobalInP2ExchgRejects=hh3cIKEGlobalInP2ExchgRejects, hh3cIKEGlobalInPkts=hh3cIKEGlobalInPkts, hh3cIKEGlobalInitTunnels=hh3cIKEGlobalInitTunnels, hh3cIKETunRemoteAddr=hh3cIKETunRemoteAddr, hh3cIKEGlobalOutP2SaDelRequests=hh3cIKEGlobalOutP2SaDelRequests, hh3cIKETunLocalValue1=hh3cIKETunLocalValue1, hh3cIKEUnsportExchTypeFailure=hh3cIKEUnsportExchTypeFailure, hh3cIKETunnelStatTableGroup=hh3cIKETunnelStatTableGroup, Hh3cTrafficType=Hh3cTrafficType, hh3cIKETrapGlobalCntl=hh3cIKETrapGlobalCntl, hh3cIKEGlobalInP2Exchgs=hh3cIKEGlobalInP2Exchgs, hh3cIKEGlobalInvalidIdFails=hh3cIKEGlobalInvalidIdFails, hh3cIKETunRemoteValue2=hh3cIKETunRemoteValue2, hh3cIKETunnelEntry=hh3cIKETunnelEntry, Hh3cTrapStatus=Hh3cTrapStatus, hh3cIKEAttrNotSuppFailure=hh3cIKEAttrNotSuppFailure, hh3cIKEProposalAddTrapCntl=hh3cIKEProposalAddTrapCntl, hh3cIKEInvalidSpiTrapCntl=hh3cIKEInvalidSpiTrapCntl, hh3cIKETunRemoteType=hh3cIKETunRemoteType, hh3cIKETunnelStop=hh3cIKETunnelStop, hh3cIKEInvalidIdTrapCntl=hh3cIKEInvalidIdTrapCntl, hh3cIKEObjects=hh3cIKEObjects, Hh3cIKEAuthMethod=Hh3cIKEAuthMethod, hh3cIKETunInDropPkts=hh3cIKETunInDropPkts, hh3cIKEGlobalActiveTunnels=hh3cIKEGlobalActiveTunnels, hh3cIKETunOutDropPkts=hh3cIKETunOutDropPkts, hh3cIKEGlobalInvalidCertAuthFails=hh3cIKEGlobalInvalidCertAuthFails, hh3cIKETunnelStopTrapCntl=hh3cIKETunnelStopTrapCntl, hh3cIKETunOutNotifys=hh3cIKETunOutNotifys, hh3cIKEGlobalAuthFails=hh3cIKEGlobalAuthFails, hh3cIKETunLocalValue2=hh3cIKETunLocalValue2)
