#
# PySNMP MIB module BSC2780-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSC2780-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:24:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, enterprises, iso, IpAddress, Unsigned32, Counter32, NotificationType, Bits, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "iso", "IpAddress", "Unsigned32", "Counter32", "NotificationType", "Bits", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Integer32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
class DisplayString(OctetString):
    pass

cdx6500PPCTBSC2780Table = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11), )
if mibBuilder.loadTexts: cdx6500PPCTBSC2780Table.setStatus('mandatory')
cdx6500bsc2780PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1), ).setIndexNames((0, "BSC2780-OPT-MIB", "cdx6500bsc2780PortNumber"))
if mibBuilder.loadTexts: cdx6500bsc2780PortConfigEntry.setStatus('mandatory')
cdx6500bsc2780PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortNumber.setStatus('mandatory')
cdx6500bsc2780ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780ClockSource.setStatus('mandatory')
cdx6500bsc2780ClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 19200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780ClockSpeed.setStatus('mandatory')
cdx6500bsc2780Contention = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("hdx", 0), ("fdx", 1), ("newvalHdx", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780Contention.setStatus('mandatory')
cdx6500bsc2780ErrThreshCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780ErrThreshCount.setStatus('mandatory')
cdx6500bsc2780DisConnOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("newvalNo", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780DisConnOnError.setStatus('mandatory')
cdx6500bsc2780ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5, 13, 14, 16, 19, 50))).clone(namedValues=NamedValues(("simp", 0), ("emri", 3), ("dimo", 5), ("v25b", 13), ("rs366", 14), ("emrih", 16), ("dimoh", 19), ("newvalSimp", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780ConnType.setStatus('mandatory')
cdx6500bsc2780InterBuffTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780InterBuffTimeout.setStatus('mandatory')
cdx6500bsc2780PortSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortSubAddr.setStatus('mandatory')
cdx6500bsc2780ReConnRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780ReConnRetry.setStatus('mandatory')
cdx6500bsc2780AutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780AutocallMnemonic.setStatus('mandatory')
cdx6500bsc2780RestrictConnDest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780RestrictConnDest.setStatus('mandatory')
cdx6500bsc2780BillRec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780BillRec.setStatus('mandatory')
cdx6500bsc2780DSRfollowSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("newvalNo", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780DSRfollowSVC.setStatus('mandatory')
cdx6500bsc2780DSRholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780DSRholdTime.setStatus('mandatory')
cdx6500bsc2780PortOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deprecatedObj", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortOption.setStatus('deprecated')
cdx6500bsc2780TrafficPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("lowPriority", 0), ("medPriority", 1), ("hiPriority", 2), ("xpPriority", 3), ("newvalLowPriority", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780TrafficPriority.setStatus('optional')
cdx6500bsc2780PortOptString = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortOptString.setStatus('mandatory')
cdx6500bsc2780IdleDiscTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780IdleDiscTimer.setStatus('mandatory')
cdx6500bsc2780ElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780ElectricalInterfaceType.setStatus('mandatory')
cdx6500bsc2780V24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780V24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500bsc2780HighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780HighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500bsc2780RemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t2780", 1), ("snaint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780RemoteType.setStatus('mandatory')
cdx6500PPSTBSC2780Table = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11), )
if mibBuilder.loadTexts: cdx6500PPSTBSC2780Table.setStatus('mandatory')
cdx6500bsc2780PortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1), ).setIndexNames((0, "BSC2780-OPT-MIB", "cdx6500bsc2780StatPortNumber"))
if mibBuilder.loadTexts: cdx6500bsc2780PortStatEntry.setStatus('mandatory')
cdx6500bsc2780StatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780StatPortNumber.setStatus('mandatory')
cdx6500bsc2780PortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortStatus.setStatus('mandatory')
cdx6500bsc2780PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortState.setStatus('mandatory')
cdx6500bsc2780PortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortSpeed.setStatus('mandatory')
cdx6500bsc2780PortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortUtilIn.setStatus('mandatory')
cdx6500bsc2780PortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780PortUtilOut.setStatus('mandatory')
cdx6500bsc2780InMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780InMsgs.setStatus('mandatory')
cdx6500bsc2780OutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780OutMsgs.setStatus('mandatory')
cdx6500bsc2780InChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780InChars.setStatus('mandatory')
cdx6500bsc2780OutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780OutChars.setStatus('mandatory')
cdx6500bsc2780CharRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780CharRateIn.setStatus('mandatory')
cdx6500bsc2780CharRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780CharRateOut.setStatus('mandatory')
cdx6500bsc2780CrcBccErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500bsc2780CrcBccErrs.setStatus('mandatory')
mibBuilder.exportSymbols("BSC2780-OPT-MIB", cdx6500bsc2780CharRateIn=cdx6500bsc2780CharRateIn, cdx6500bsc2780PortOptString=cdx6500bsc2780PortOptString, cdx6500Configuration=cdx6500Configuration, cdx6500PPCTBSC2780Table=cdx6500PPCTBSC2780Table, cdx6500bsc2780DSRfollowSVC=cdx6500bsc2780DSRfollowSVC, cdx6500bsc2780PortOption=cdx6500bsc2780PortOption, codex=codex, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500bsc2780DisConnOnError=cdx6500bsc2780DisConnOnError, cdx6500bsc2780PortSpeed=cdx6500bsc2780PortSpeed, cdx6500bsc2780PortStatus=cdx6500bsc2780PortStatus, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500bsc2780BillRec=cdx6500bsc2780BillRec, cdx6500bsc2780PortUtilOut=cdx6500bsc2780PortUtilOut, cdx6500bsc2780OutChars=cdx6500bsc2780OutChars, cdx6500bsc2780CharRateOut=cdx6500bsc2780CharRateOut, cdx6500bsc2780RestrictConnDest=cdx6500bsc2780RestrictConnDest, cdx6500PPSTBSC2780Table=cdx6500PPSTBSC2780Table, cdx6500bsc2780ReConnRetry=cdx6500bsc2780ReConnRetry, cdx6500bsc2780HighSpeedElectricalInterfaceOption=cdx6500bsc2780HighSpeedElectricalInterfaceOption, cdx6500bsc2780StatPortNumber=cdx6500bsc2780StatPortNumber, cdx6500bsc2780ErrThreshCount=cdx6500bsc2780ErrThreshCount, cdx6500bsc2780PortNumber=cdx6500bsc2780PortNumber, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500bsc2780IdleDiscTimer=cdx6500bsc2780IdleDiscTimer, DisplayString=DisplayString, cdx6500bsc2780ClockSource=cdx6500bsc2780ClockSource, cdx6500bsc2780TrafficPriority=cdx6500bsc2780TrafficPriority, cdx6500bsc2780PortStatEntry=cdx6500bsc2780PortStatEntry, cdx6500bsc2780PortConfigEntry=cdx6500bsc2780PortConfigEntry, cdx6500bsc2780ConnType=cdx6500bsc2780ConnType, cdx6500bsc2780PortState=cdx6500bsc2780PortState, cdx6500bsc2780AutocallMnemonic=cdx6500bsc2780AutocallMnemonic, cdx6500bsc2780DSRholdTime=cdx6500bsc2780DSRholdTime, cdx6500bsc2780Contention=cdx6500bsc2780Contention, cdx6500bsc2780ElectricalInterfaceType=cdx6500bsc2780ElectricalInterfaceType, cdx6500bsc2780InterBuffTimeout=cdx6500bsc2780InterBuffTimeout, cdx6500bsc2780PortUtilIn=cdx6500bsc2780PortUtilIn, cdxProductSpecific=cdxProductSpecific, cdx6500bsc2780OutMsgs=cdx6500bsc2780OutMsgs, cdx6500bsc2780CrcBccErrs=cdx6500bsc2780CrcBccErrs, cdx6500bsc2780PortSubAddr=cdx6500bsc2780PortSubAddr, cdx6500bsc2780V24ElectricalInterfaceOption=cdx6500bsc2780V24ElectricalInterfaceOption, cdx6500Statistics=cdx6500Statistics, cdx6500bsc2780InMsgs=cdx6500bsc2780InMsgs, cdx6500=cdx6500, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500bsc2780RemoteType=cdx6500bsc2780RemoteType, cdx6500bsc2780InChars=cdx6500bsc2780InChars, cdx6500bsc2780ClockSpeed=cdx6500bsc2780ClockSpeed)
