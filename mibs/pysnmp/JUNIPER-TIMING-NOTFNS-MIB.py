#
# PySNMP MIB module JUNIPER-TIMING-NOTFNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-TIMING-NOTFNS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:50:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifOperStatus, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifOperStatus", "InterfaceIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
jnxTimingNotfnsMIBRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxTimingNotfnsMIBRoot")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, iso, MibIdentifier, Unsigned32, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ModuleIdentity, Bits, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "iso", "MibIdentifier", "Unsigned32", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ModuleIdentity", "Bits", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxTimingNotfnsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1))
jnxTimingNotfnsMIB.setRevisions(('2015-10-14 00:00', '2013-03-15 15:41',))
if mibBuilder.loadTexts: jnxTimingNotfnsMIB.setLastUpdated('201304220930Z')
if mibBuilder.loadTexts: jnxTimingNotfnsMIB.setOrganization('Juniper Networks, Inc.')
jnxTimingFaults = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1))
jnxTimingEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2))
jnxTimingNotfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3))
jnxTimingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4))
class JnxPtpClockIdTC(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class JnxPtpPhaseOffsetTC(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-9'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1000)

jnxClksyncState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("set", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncState.setStatus('current')
jnxClksyncIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 2), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncIfIndex.setStatus('current')
jnxClksyncIntfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncIntfName.setStatus('current')
jnxAcbFpgaRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxAcbFpgaRevMajor.setStatus('current')
jnxAcbFpgaRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxAcbFpgaRevMinor.setStatus('current')
jnxBootCpldFpgaRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxBootCpldFpgaRevMajor.setStatus('current')
jnxBootCpldFpgaRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxBootCpldFpgaRevMinor.setStatus('current')
jnxClksyncQualityCode = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8, 11, 15, 1, 0, 7, 16, 13, 10, 12, 14, 17))).clone(namedValues=NamedValues(("prc", 2), ("ssu-a", 4), ("ssu-b", 8), ("sec", 11), ("dnu", 15), ("prs", 1), ("stu", 0), ("st2", 7), ("tnc", 16), ("st3e", 13), ("st3", 10), ("smc", 12), ("st4", 14), ("dus", 17)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncQualityCode.setStatus('current')
jnxClksyncDpllState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", -1), ("lock-acq", 0), ("locked", 1), ("holder", 2), ("freerun", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncDpllState.setStatus('current')
jnxPtpServoState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 0), ("free-run", 1), ("holdover", 2), ("acquiring", 3), ("freq-locked", 4), ("phase-aligned", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpServoState.setStatus('current')
jnxPtpClass = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpClass.setStatus('current')
jnxPtpAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpAccuracy.setStatus('current')
jnxPtpGmId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 13), JnxPtpClockIdTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpGmId.setStatus('current')
jnxPtpGmIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 14), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpGmIpAddr.setStatus('current')
jnxClkStreamHandle = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClkStreamHandle.setStatus('current')
jnxRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 16), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxRemoteIpAddr.setStatus('current')
jnxClksyncHybridState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 0), ("freq-acq", 1), ("freqLck-phaseAcq1", 2), ("freqLck-phaseAcq2", 3), ("freqLck-phaseAcq3", 4), ("freq-phase-lck", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncHybridState.setStatus('current')
jnxPtpPhaseOffset = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 18), JnxPtpPhaseOffsetTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpPhaseOffset.setStatus('current')
jnxClksyncQualityCodeStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncQualityCodeStr.setStatus('current')
jnxClksyncDpllStateStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncDpllStateStr.setStatus('current')
jnxPtpServoStateStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpServoStateStr.setStatus('current')
jnxClksyncHybridStateStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 22), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncHybridStateStr.setStatus('current')
jnxClksyncColorStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncColorStr.setStatus('current')
jnxTimingFaultLOSSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 1)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLOSSet.setStatus('current')
jnxTimingFaultLOSClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 2)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLOSClear.setStatus('current')
jnxTimingFaultEFDSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 3)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultEFDSet.setStatus('current')
jnxTimingFaultEFDClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 4)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultEFDClear.setStatus('current')
jnxTimingFaultLOESMCSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 5)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLOESMCSet.setStatus('current')
jnxTimingFaultLOESMCClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 6)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLOESMCClear.setStatus('current')
jnxTimingFaultQLFailSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 7)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultQLFailSet.setStatus('current')
jnxTimingFaultQLFailClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 8)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultQLFailClear.setStatus('current')
jnxTimingFaultLTISet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 9)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLTISet.setStatus('current')
jnxTimingFaultLTIClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 10)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLTIClear.setStatus('current')
jnxTimingFaultAcbcFpgaVerNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 11)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxAcbFpgaRevMajor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxAcbFpgaRevMinor"))
if mibBuilder.loadTexts: jnxTimingFaultAcbcFpgaVerNotCompatible.setStatus('current')
jnxTimingFaultBootCpldVerNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 12)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxBootCpldFpgaRevMajor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxBootCpldFpgaRevMinor"))
if mibBuilder.loadTexts: jnxTimingFaultBootCpldVerNotCompatible.setStatus('current')
jnxTimingFaultPriSrcFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 13)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultPriSrcFailed.setStatus('current')
jnxTimingFaultSecSrcFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 14)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultSecSrcFailed.setStatus('current')
jnxTimingFaultPtpUniNegRateRejectSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 15)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClkStreamHandle"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxRemoteIpAddr"))
if mibBuilder.loadTexts: jnxTimingFaultPtpUniNegRateRejectSet.setStatus('current')
jnxTimingFaultPtpUniNegRateRejectClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 16)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClkStreamHandle"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxRemoteIpAddr"))
if mibBuilder.loadTexts: jnxTimingFaultPtpUniNegRateRejectClear.setStatus('current')
jnxTimingEventPriSrcRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 1)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventPriSrcRecovered.setStatus('current')
jnxTimingEventSecSrcRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 2)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSecSrcRecovered.setStatus('current')
jnxTimingEventPriRefChanged = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 3)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventPriRefChanged.setStatus('current')
jnxTimingEventSecRefChanged = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 4)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSecRefChanged.setStatus('current')
jnxTimingEventQLChangedRx = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 5)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCode"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCodeStr"))
if mibBuilder.loadTexts: jnxTimingEventQLChangedRx.setStatus('current')
jnxTimingEventQLChangedTx = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 6)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCode"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCodeStr"))
if mibBuilder.loadTexts: jnxTimingEventQLChangedTx.setStatus('current')
jnxTimingEventSynceHldovrToLck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 7)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSynceHldovrToLck.setStatus('current')
jnxTimingEventSynceLckToHldovr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 8)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSynceLckToHldovr.setStatus('current')
jnxTimingEventDpllStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 9)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllStateStr"))
if mibBuilder.loadTexts: jnxTimingEventDpllStatus.setStatus('current')
jnxTimingEventSynceDpllStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 10)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllStateStr"))
if mibBuilder.loadTexts: jnxTimingEventSynceDpllStatus.setStatus('current')
jnxTimingEventBitsDpllStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 11)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllStateStr"))
if mibBuilder.loadTexts: jnxTimingEventBitsDpllStatus.setStatus('current')
jnxTimingEventPtpServoStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 12)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpServoState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpServoStateStr"))
if mibBuilder.loadTexts: jnxTimingEventPtpServoStatus.setStatus('current')
jnxTimingEventPtpGMClockClassChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 13)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmId"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpClass"))
if mibBuilder.loadTexts: jnxTimingEventPtpGMClockClassChange.setStatus('current')
jnxTimingEventPtpGMClockAccuracyChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 14)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmId"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpAccuracy"))
if mibBuilder.loadTexts: jnxTimingEventPtpGMClockAccuracyChange.setStatus('current')
jnxTimingEventPtpGMChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 15)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmId"))
if mibBuilder.loadTexts: jnxTimingEventPtpGMChange.setStatus('current')
jnxTimingEventHybridStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 16)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncHybridState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncHybridStateStr"))
if mibBuilder.loadTexts: jnxTimingEventHybridStatus.setStatus('current')
jnxTimingEventSquelchSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 17)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSquelchSet.setStatus('current')
jnxTimingEventSquelchClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 18)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSquelchClear.setStatus('current')
jnxTimingEventLedColorChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 19)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncColorStr"))
if mibBuilder.loadTexts: jnxTimingEventLedColorChange.setStatus('current')
jnxTimingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 1))
jnxTimingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 2))
jnxTimingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 1, 1)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingObjectsGroup"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingNotfnFaultsGroup"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingNotfnEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxTimingCompliance = jnxTimingCompliance.setStatus('current')
jnxTimingObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 2, 1)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxAcbFpgaRevMajor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxAcbFpgaRevMinor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxBootCpldFpgaRevMajor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxBootCpldFpgaRevMinor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCode"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpServoState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpClass"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpAccuracy"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmId"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmIpAddr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClkStreamHandle"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxRemoteIpAddr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncHybridState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpPhaseOffset"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCodeStr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllStateStr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpServoStateStr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncHybridStateStr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncColorStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxTimingObjectsGroup = jnxTimingObjectsGroup.setStatus('current')
jnxTimingNotfnFaultsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 2, 2)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLOSSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLOSClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultEFDSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultEFDClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLOESMCSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLOESMCClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultQLFailSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultQLFailClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLTISet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLTIClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultAcbcFpgaVerNotCompatible"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultBootCpldVerNotCompatible"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultPriSrcFailed"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultSecSrcFailed"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultPtpUniNegRateRejectSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultPtpUniNegRateRejectClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxTimingNotfnFaultsGroup = jnxTimingNotfnFaultsGroup.setStatus('current')
jnxTimingNotfnEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 2, 3)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPriSrcRecovered"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSecSrcRecovered"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPriRefChanged"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSecRefChanged"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventQLChangedRx"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventQLChangedTx"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSynceHldovrToLck"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSynceLckToHldovr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventDpllStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSynceDpllStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventBitsDpllStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPtpServoStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPtpGMClockClassChange"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPtpGMClockAccuracyChange"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPtpGMChange"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventHybridStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSquelchSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSquelchClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventLedColorChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxTimingNotfnEventsGroup = jnxTimingNotfnEventsGroup.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-TIMING-NOTFNS-MIB", jnxTimingFaultPriSrcFailed=jnxTimingFaultPriSrcFailed, jnxTimingFaultPtpUniNegRateRejectClear=jnxTimingFaultPtpUniNegRateRejectClear, jnxTimingEventSynceDpllStatus=jnxTimingEventSynceDpllStatus, jnxPtpGmId=jnxPtpGmId, jnxTimingCompliances=jnxTimingCompliances, jnxBootCpldFpgaRevMinor=jnxBootCpldFpgaRevMinor, jnxTimingCompliance=jnxTimingCompliance, jnxTimingEventPtpServoStatus=jnxTimingEventPtpServoStatus, jnxPtpServoState=jnxPtpServoState, jnxClksyncDpllStateStr=jnxClksyncDpllStateStr, jnxTimingGroups=jnxTimingGroups, jnxTimingFaultLOSSet=jnxTimingFaultLOSSet, jnxTimingFaultPtpUniNegRateRejectSet=jnxTimingFaultPtpUniNegRateRejectSet, jnxTimingFaultLOESMCClear=jnxTimingFaultLOESMCClear, JnxPtpClockIdTC=JnxPtpClockIdTC, jnxTimingFaultLOSClear=jnxTimingFaultLOSClear, jnxTimingConformance=jnxTimingConformance, jnxTimingFaultLTISet=jnxTimingFaultLTISet, jnxTimingEventPriSrcRecovered=jnxTimingEventPriSrcRecovered, jnxTimingEventSynceHldovrToLck=jnxTimingEventSynceHldovrToLck, jnxClksyncState=jnxClksyncState, jnxClksyncColorStr=jnxClksyncColorStr, jnxTimingEventSynceLckToHldovr=jnxTimingEventSynceLckToHldovr, jnxTimingNotfnFaultsGroup=jnxTimingNotfnFaultsGroup, jnxPtpAccuracy=jnxPtpAccuracy, jnxTimingEventDpllStatus=jnxTimingEventDpllStatus, jnxTimingFaultBootCpldVerNotCompatible=jnxTimingFaultBootCpldVerNotCompatible, jnxPtpServoStateStr=jnxPtpServoStateStr, jnxTimingNotfnsMIB=jnxTimingNotfnsMIB, jnxTimingFaultQLFailSet=jnxTimingFaultQLFailSet, jnxTimingFaultLTIClear=jnxTimingFaultLTIClear, PYSNMP_MODULE_ID=jnxTimingNotfnsMIB, jnxClksyncQualityCode=jnxClksyncQualityCode, jnxTimingNotfnEventsGroup=jnxTimingNotfnEventsGroup, jnxTimingEventPtpGMChange=jnxTimingEventPtpGMChange, jnxTimingFaultEFDSet=jnxTimingFaultEFDSet, jnxBootCpldFpgaRevMajor=jnxBootCpldFpgaRevMajor, jnxClksyncQualityCodeStr=jnxClksyncQualityCodeStr, jnxClksyncHybridStateStr=jnxClksyncHybridStateStr, jnxTimingEventPriRefChanged=jnxTimingEventPriRefChanged, jnxTimingEventPtpGMClockAccuracyChange=jnxTimingEventPtpGMClockAccuracyChange, jnxClksyncIntfName=jnxClksyncIntfName, jnxTimingEventSecSrcRecovered=jnxTimingEventSecSrcRecovered, jnxPtpGmIpAddr=jnxPtpGmIpAddr, jnxTimingEvents=jnxTimingEvents, jnxTimingFaultAcbcFpgaVerNotCompatible=jnxTimingFaultAcbcFpgaVerNotCompatible, jnxAcbFpgaRevMajor=jnxAcbFpgaRevMajor, jnxTimingEventPtpGMClockClassChange=jnxTimingEventPtpGMClockClassChange, jnxAcbFpgaRevMinor=jnxAcbFpgaRevMinor, jnxTimingEventQLChangedRx=jnxTimingEventQLChangedRx, jnxTimingFaultSecSrcFailed=jnxTimingFaultSecSrcFailed, jnxTimingEventSquelchClear=jnxTimingEventSquelchClear, jnxTimingEventBitsDpllStatus=jnxTimingEventBitsDpllStatus, jnxClksyncIfIndex=jnxClksyncIfIndex, jnxTimingNotfObjects=jnxTimingNotfObjects, jnxTimingEventHybridStatus=jnxTimingEventHybridStatus, jnxClkStreamHandle=jnxClkStreamHandle, jnxTimingFaultQLFailClear=jnxTimingFaultQLFailClear, jnxTimingFaultLOESMCSet=jnxTimingFaultLOESMCSet, jnxTimingEventSquelchSet=jnxTimingEventSquelchSet, jnxTimingEventSecRefChanged=jnxTimingEventSecRefChanged, jnxPtpClass=jnxPtpClass, JnxPtpPhaseOffsetTC=JnxPtpPhaseOffsetTC, jnxTimingEventQLChangedTx=jnxTimingEventQLChangedTx, jnxPtpPhaseOffset=jnxPtpPhaseOffset, jnxTimingEventLedColorChange=jnxTimingEventLedColorChange, jnxRemoteIpAddr=jnxRemoteIpAddr, jnxTimingFaultEFDClear=jnxTimingFaultEFDClear, jnxTimingObjectsGroup=jnxTimingObjectsGroup, jnxTimingFaults=jnxTimingFaults, jnxClksyncDpllState=jnxClksyncDpllState, jnxClksyncHybridState=jnxClksyncHybridState)
