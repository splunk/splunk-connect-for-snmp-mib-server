#
# PySNMP MIB module SW-IGMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-IGMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:04:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Bits, Gauge32, Counter32, ModuleIdentity, MibIdentifier, IpAddress, Integer32, Counter64, Unsigned32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Bits", "Gauge32", "Counter32", "ModuleIdentity", "MibIdentifier", "IpAddress", "Integer32", "Counter64", "Unsigned32", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
dlinkcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
es2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 3))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
marconi_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("marconi-mgmt")
es2000Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28))
swL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2))
swIGMP = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7))
swIGMPCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 1))
swIGMPAdminState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPAdminState.setStatus('mandatory')
swIGMPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 1, 2), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPTimeout.setStatus('mandatory')
swIGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2), )
if mibBuilder.loadTexts: swIGMPInfoTable.setStatus('mandatory')
swIGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1), ).setIndexNames((0, "SW-IGMP-MIB", "swIGMPInfoIndex"))
if mibBuilder.loadTexts: swIGMPInfoEntry.setStatus('mandatory')
swIGMPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoIndex.setStatus('mandatory')
swIGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoVid.setStatus('mandatory')
swIGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setStatus('mandatory')
swIGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setStatus('mandatory')
swIGMPTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3), )
if mibBuilder.loadTexts: swIGMPTable.setStatus('mandatory')
swIGMPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1), ).setIndexNames((0, "SW-IGMP-MIB", "swIGMPVid"), (0, "SW-IGMP-MIB", "swIGMPGroupIpAddr"))
if mibBuilder.loadTexts: swIGMPEntry.setStatus('mandatory')
swIGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPVid.setStatus('mandatory')
swIGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setStatus('mandatory')
swIGMPGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupMacAddr.setStatus('mandatory')
swIGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPPortMap.setStatus('mandatory')
swIGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setStatus('mandatory')
swIGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4), )
if mibBuilder.loadTexts: swIGMPCtrlTable.setStatus('mandatory')
swIGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1), ).setIndexNames((0, "SW-IGMP-MIB", "swIGMPCtrlIndex"))
if mibBuilder.loadTexts: swIGMPCtrlEntry.setStatus('mandatory')
swIGMPCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPCtrlIndex.setStatus('mandatory')
swIGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlVid.setStatus('mandatory')
swIGMPCtrlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlTimer.setStatus('mandatory')
swIGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("deleted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlState.setStatus('mandatory')
mibBuilder.exportSymbols("SW-IGMP-MIB", swIGMPCtrlEntry=swIGMPCtrlEntry, swIGMPInfoTxQueryCount=swIGMPInfoTxQueryCount, swIGMPGroupMacAddr=swIGMPGroupMacAddr, swIGMPInfoTable=swIGMPInfoTable, swIGMPTimeout=swIGMPTimeout, swIGMPInfoVid=swIGMPInfoVid, swL2Mgmt=swL2Mgmt, golfcommon=golfcommon, swIGMPInfoEntry=swIGMPInfoEntry, swIGMPCtrlState=swIGMPCtrlState, external=external, MacAddress=MacAddress, systems=systems, swIGMPCtrlIndex=swIGMPCtrlIndex, swIGMPVid=swIGMPVid, swIGMPCtrlVid=swIGMPCtrlVid, swIGMPGroupIpAddr=swIGMPGroupIpAddr, swIGMPInfoQueryCount=swIGMPInfoQueryCount, golf=golf, es2000Mgmt=es2000Mgmt, marconi_mgmt=marconi_mgmt, swIGMPEntry=swIGMPEntry, swIGMPCtrlTimer=swIGMPCtrlTimer, dlinkcommon=dlinkcommon, es2000=es2000, swIGMPCtrlTable=swIGMPCtrlTable, golfproducts=golfproducts, swIGMPAdminState=swIGMPAdminState, swIGMPPortMap=swIGMPPortMap, swIGMP=swIGMP, swIGMPCtrl=swIGMPCtrl, swIGMPIpGroupReportCount=swIGMPIpGroupReportCount, dlink=dlink, PortList=PortList, marconi=marconi, swIGMPTable=swIGMPTable, swIGMPInfoIndex=swIGMPInfoIndex)
