#
# PySNMP MIB module LANPLEX-OPT-FDDI-MIB-1-1-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANPLEX-OPT-FDDI-MIB-1-1-2
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
fddimibMACCurrentPath, fddimibPORTCurrentPath, FddiTimeNano, fddimibMACDownstreamNbr, fddimibMACLostCts, fddimibMACAvailablePaths, fddimibMACNotCopiedFlag, fddimibPORTPCWithhold, fddimibPORTRequestedPaths, fddimibMACOldUpstreamNbr, fddimibPORTMyType, fddimibMACFrameErrorFlag, fddimibPORTLemRejectCts, fddimibMACOldDownstreamNbr, fddimibMACCopiedCts, FddiSMTStationIdType, fddimibPORTConnectState, fddimibSMTPeerWrapFlag, fddimibMACErrorCts, fddimibMACFrameErrorRatio, fddimibMACSMTAddress, fddimibPORTLemCts, fddimibMACUpstreamNbr, fddimibMACUnaDaFlag, fddimibMACNotCopiedCts, fddimibPORTLerCutoff, fddimibPORTLerEstimate, fddimibSMTStationId, fddimibMACNotCopiedRatio, fddimibMACRequestedPaths, fddimibPORTLerFlag, fddimibPORTAvailablePaths, fddimibSMTCFState, fddimibMACDaFlag, fddimibPORTNeighborType, fddimibMACFrameCts, fddimibPORTLerAlarm = mibBuilder.importSymbols("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCurrentPath", "fddimibPORTCurrentPath", "FddiTimeNano", "fddimibMACDownstreamNbr", "fddimibMACLostCts", "fddimibMACAvailablePaths", "fddimibMACNotCopiedFlag", "fddimibPORTPCWithhold", "fddimibPORTRequestedPaths", "fddimibMACOldUpstreamNbr", "fddimibPORTMyType", "fddimibMACFrameErrorFlag", "fddimibPORTLemRejectCts", "fddimibMACOldDownstreamNbr", "fddimibMACCopiedCts", "FddiSMTStationIdType", "fddimibPORTConnectState", "fddimibSMTPeerWrapFlag", "fddimibMACErrorCts", "fddimibMACFrameErrorRatio", "fddimibMACSMTAddress", "fddimibPORTLemCts", "fddimibMACUpstreamNbr", "fddimibMACUnaDaFlag", "fddimibMACNotCopiedCts", "fddimibPORTLerCutoff", "fddimibPORTLerEstimate", "fddimibSMTStationId", "fddimibMACNotCopiedRatio", "fddimibMACRequestedPaths", "fddimibPORTLerFlag", "fddimibPORTAvailablePaths", "fddimibSMTCFState", "fddimibMACDaFlag", "fddimibPORTNeighborType", "fddimibMACFrameCts", "fddimibPORTLerAlarm")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, Counter64, Gauge32, ObjectIdentity, MibIdentifier, enterprises, Counter32, IpAddress, iso, Integer32, NotificationType, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Counter64", "Gauge32", "ObjectIdentity", "MibIdentifier", "enterprises", "Counter32", "IpAddress", "iso", "Integer32", "NotificationType", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
synernetics = MibIdentifier((1, 3, 6, 1, 4, 1, 114))
lanplex = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1))
lanplexOptFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10))
lpOptSMT = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10, 1))
lpOptMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10, 2))
lpOptPATH = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10, 3))
lpOptPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10, 4))
lpOptSMTTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1), )
if mibBuilder.loadTexts: lpOptSMTTable.setStatus('mandatory')
lpOptSMTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptSMTIndex"))
if mibBuilder.loadTexts: lpOptSMTEntry.setStatus('mandatory')
lpOptSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTIndex.setStatus('mandatory')
lpOptSMTManufacturerOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTManufacturerOUI.setStatus('mandatory')
lpOptSMTManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTManufacturerData.setStatus('mandatory')
lpOptSMTHoldState = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-implemented", 1), ("not-holding", 2), ("holding-prm", 3), ("holding-sec", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTHoldState.setStatus('mandatory')
lpOptSMTSetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTSetCount.setStatus('mandatory')
lpOptSMTLastSetStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 6), FddiSMTStationIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTLastSetStationId.setStatus('mandatory')
lpOptMACBridgeFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1), )
if mibBuilder.loadTexts: lpOptMACBridgeFunctionTable.setStatus('mandatory')
lpOptMACBridgeFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptMACBridgeFunctionSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptMACBridgeFunctionMACIndex"))
if mibBuilder.loadTexts: lpOptMACBridgeFunctionEntry.setStatus('mandatory')
lpOptMACBridgeFunctionSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACBridgeFunctionSMTIndex.setStatus('mandatory')
lpOptMACBridgeFunctionMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACBridgeFunctionMACIndex.setStatus('mandatory')
lpOptMACBridgeFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACBridgeFunctions.setStatus('mandatory')
lpOptMACTPriTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2), )
if mibBuilder.loadTexts: lpOptMACTPriTable.setStatus('mandatory')
lpOptMACTPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptMACTPriSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptMACTPriMACIndex"))
if mibBuilder.loadTexts: lpOptMACTPriEntry.setStatus('mandatory')
lpOptMACTPriSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPriSMTIndex.setStatus('mandatory')
lpOptMACTPriMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPriMACIndex.setStatus('mandatory')
lpOptMACTPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 3), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri0.setStatus('mandatory')
lpOptMACTPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 4), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri1.setStatus('mandatory')
lpOptMACTPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 5), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri2.setStatus('mandatory')
lpOptMACTPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 6), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri3.setStatus('mandatory')
lpOptMACTPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 7), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri4.setStatus('mandatory')
lpOptMACTPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 8), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri5.setStatus('mandatory')
lpOptMACTPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 9), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri6.setStatus('mandatory')
lpOptPATHRingTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1), )
if mibBuilder.loadTexts: lpOptPATHRingTable.setStatus('mandatory')
lpOptPATHRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPATHRingSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPATHRingPATHIndex"))
if mibBuilder.loadTexts: lpOptPATHRingEntry.setStatus('mandatory')
lpOptPATHRingSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHRingSMTIndex.setStatus('mandatory')
lpOptPATHRingPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHRingPATHIndex.setStatus('mandatory')
lpOptPATHRingLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHRingLatency.setStatus('mandatory')
lpOptPATHTraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHTraceStatus.setStatus('mandatory')
lpOptPATHT_Rmode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 5), FddiTimeNano()).setLabel("lpOptPATHT-Rmode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHT_Rmode.setStatus('mandatory')
lpOptPATHSbaTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2), )
if mibBuilder.loadTexts: lpOptPATHSbaTable.setStatus('mandatory')
lpOptPATHSbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPATHSbaSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPATHSbaPATHIndex"))
if mibBuilder.loadTexts: lpOptPATHSbaEntry.setStatus('mandatory')
lpOptPATHSbaSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHSbaSMTIndex.setStatus('mandatory')
lpOptPATHSbaPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHSbaPATHIndex.setStatus('mandatory')
lpOptPATHSbaPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1562))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHSbaPayload.setStatus('mandatory')
lpOptPATHSbaOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHSbaOverhead.setStatus('mandatory')
lpOptPATHSbaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHSbaAvailable.setStatus('mandatory')
lpOptPORTTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1), )
if mibBuilder.loadTexts: lpOptPORTTable.setStatus('mandatory')
lpOptPORTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPORTSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPORTIndex"))
if mibBuilder.loadTexts: lpOptPORTEntry.setStatus('mandatory')
lpOptPORTSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTSMTIndex.setStatus('mandatory')
lpOptPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTIndex.setStatus('mandatory')
lpOptPORTMACLoopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPORTMACLoopTime.setStatus('mandatory')
lpOptPORTEBErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTEBErrorCt.setStatus('mandatory')
lpOptPORTLSTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2), )
if mibBuilder.loadTexts: lpOptPORTLSTable.setStatus('mandatory')
lpOptPORTLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPORTLSSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPORTLSPORTIndex"))
if mibBuilder.loadTexts: lpOptPORTLSEntry.setStatus('mandatory')
lpOptPORTLSSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTLSSMTIndex.setStatus('mandatory')
lpOptPORTLSPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTLSPORTIndex.setStatus('mandatory')
lpOptPORTMaintLS = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPORTMaintLS.setStatus('mandatory')
lpOptPORTPCLS = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTPCLS.setStatus('mandatory')
lpOptSMTHoldCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,1)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptSMTHoldState"))
lpOptSMTPeerWrapCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,2)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTCFState"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTPeerWrapFlag"))
lpOptMACDuplicateAddressCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,3)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACSMTAddress"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACDaFlag"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUnaDaFlag"))
lpOptMACFrameErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,4)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameErrorFlag"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACErrorCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACLostCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameErrorRatio"))
lpOptMACNotCopiedCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,5)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCopiedCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedRatio"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedFlag"))
lpOptMACNeighborChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,6)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACOldUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACDownstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACOldDownstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACSMTAddress"))
lpOptMACPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,7)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACAvailablePaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACRequestedPaths"))
lpOptPORTLerCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,8)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerCutoff"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerAlarm"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerEstimate"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLemRejectCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLemCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerFlag"))
lpOptPORTUndesiredConnAttemptEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,9)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTMyType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTConnectState"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTNeighborType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTPCWithhold"))
lpOptPORTEBErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,10)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("LANPLEX-OPT-FDDI-MIB-1-1-2", "lpOptPORTEBErrorCt"))
lpOptPORTPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,11)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTAvailablePaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTRequestedPaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTMyType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTNeighborType"))
mibBuilder.exportSymbols("LANPLEX-OPT-FDDI-MIB-1-1-2", lpOptSMTManufacturerData=lpOptSMTManufacturerData, lpOptPORTPCLS=lpOptPORTPCLS, lpOptMACBridgeFunctions=lpOptMACBridgeFunctions, lpOptMACTPri0=lpOptMACTPri0, lpOptSMTEntry=lpOptSMTEntry, lpOptPORTLSTable=lpOptPORTLSTable, lpOptMACTPri6=lpOptMACTPri6, lpOptSMTIndex=lpOptSMTIndex, lpOptPATHSbaPayload=lpOptPATHSbaPayload, lpOptPORT=lpOptPORT, lpOptMACTPriSMTIndex=lpOptMACTPriSMTIndex, lpOptMACTPri5=lpOptMACTPri5, lpOptMACNeighborChangeEvent=lpOptMACNeighborChangeEvent, lpOptPORTMaintLS=lpOptPORTMaintLS, lpOptPORTTable=lpOptPORTTable, synernetics=synernetics, lpOptPATHTraceStatus=lpOptPATHTraceStatus, lanplexOptFddi=lanplexOptFddi, lpOptMACBridgeFunctionTable=lpOptMACBridgeFunctionTable, lpOptMACBridgeFunctionEntry=lpOptMACBridgeFunctionEntry, lpOptPATHSbaOverhead=lpOptPATHSbaOverhead, lpOptPATHSbaAvailable=lpOptPATHSbaAvailable, lpOptPORTEntry=lpOptPORTEntry, lpOptPORTUndesiredConnAttemptEvent=lpOptPORTUndesiredConnAttemptEvent, lpOptMACBridgeFunctionMACIndex=lpOptMACBridgeFunctionMACIndex, lpOptSMTPeerWrapCondition=lpOptSMTPeerWrapCondition, lpOptPORTLSPORTIndex=lpOptPORTLSPORTIndex, lpOptSMTSetCount=lpOptSMTSetCount, lanplex=lanplex, lpOptSMTLastSetStationId=lpOptSMTLastSetStationId, lpOptPATHRingPATHIndex=lpOptPATHRingPATHIndex, lpOptMACTPriEntry=lpOptMACTPriEntry, lpOptPORTSMTIndex=lpOptPORTSMTIndex, lpOptPATHSbaPATHIndex=lpOptPATHSbaPATHIndex, lpOptPORTMACLoopTime=lpOptPORTMACLoopTime, lpOptPATHRingLatency=lpOptPATHRingLatency, lpOptPATHRingTable=lpOptPATHRingTable, lpOptMACTPri3=lpOptMACTPri3, lpOptSMTTable=lpOptSMTTable, lpOptPORTLerCondition=lpOptPORTLerCondition, lpOptPATHSbaSMTIndex=lpOptPATHSbaSMTIndex, lpOptPORTIndex=lpOptPORTIndex, lpOptPORTLSEntry=lpOptPORTLSEntry, lpOptPATHSbaTable=lpOptPATHSbaTable, lpOptPORTLSSMTIndex=lpOptPORTLSSMTIndex, lpOptMACTPriTable=lpOptMACTPriTable, lpOptMAC=lpOptMAC, lpOptMACTPriMACIndex=lpOptMACTPriMACIndex, lpOptPATHRingEntry=lpOptPATHRingEntry, lpOptMACFrameErrorCondition=lpOptMACFrameErrorCondition, lpOptPORTEBErrorCt=lpOptPORTEBErrorCt, lpOptMACDuplicateAddressCondition=lpOptMACDuplicateAddressCondition, lpOptMACBridgeFunctionSMTIndex=lpOptMACBridgeFunctionSMTIndex, lpOptPATH=lpOptPATH, lpOptPATHSbaEntry=lpOptPATHSbaEntry, lpOptMACPathChangeEvent=lpOptMACPathChangeEvent, lpOptSMTManufacturerOUI=lpOptSMTManufacturerOUI, lpOptSMTHoldCondition=lpOptSMTHoldCondition, lpOptMACTPri2=lpOptMACTPri2, lpOptPATHT_Rmode=lpOptPATHT_Rmode, lpOptPATHRingSMTIndex=lpOptPATHRingSMTIndex, lpOptPORTPathChangeEvent=lpOptPORTPathChangeEvent, lpOptSMTHoldState=lpOptSMTHoldState, lpOptMACNotCopiedCondition=lpOptMACNotCopiedCondition, lpOptMACTPri1=lpOptMACTPri1, lpOptMACTPri4=lpOptMACTPri4, lpOptPORTEBErrorCondition=lpOptPORTEBErrorCondition, lpOptSMT=lpOptSMT)
