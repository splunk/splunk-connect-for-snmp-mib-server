#
# PySNMP MIB module A100-R1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A100-R1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:48:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, NotificationType, TimeTicks, Counter64, iso, Unsigned32, Integer32, Bits, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "NotificationType", "TimeTicks", "Counter64", "iso", "Unsigned32", "Integer32", "Bits", "Counter32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
atomis_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14)).setLabel("atomis-mib")
m5core_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3)).setLabel("m5core-mib")
node = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1))
linf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2))
conn = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3))
perf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4))
nodeOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("off-line", 3), ("testing", 4), ("initializing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOperStatus.setStatus('mandatory')
nodeIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2), )
if mibBuilder.loadTexts: nodeIfConfTable.setStatus('mandatory')
nodeIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1), ).setIndexNames((0, "A100-R1-MIB", "nodeIfConfIndex"))
if mibBuilder.loadTexts: nodeIfConfEntry.setStatus('mandatory')
nodeIfConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfConfIndex.setStatus('mandatory')
nodeIfConfPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("other", 1), ("sar", 2), ("taxi100M", 3), ("oc3cSMF", 4), ("oc-3cMMF", 5), ("ds3-PLCP-SCRAMBLE", 6), ("ds3-PLCP-noScramble", 7), ("relay-6Mcel", 8), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfConfPhysType.setStatus('mandatory')
nodeIfConfRev = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfConfRev.setStatus('mandatory')
nodeIfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("other", 1), ("inService", 2), ("outOfService", 3), ("testing", 4), ("localLoopBack", 5), ("remoteLoopBack", 6), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfConfStatus.setStatus('mandatory')
nodeFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFanStatus.setStatus('mandatory')
nodeUpcWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeUpcWindowSize.setStatus('mandatory')
nodeBestEffortBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBestEffortBufferSize.setStatus('mandatory')
nodeGuaranteedBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeGuaranteedBufferSize.setStatus('mandatory')
nodeBestEffortBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBestEffortBufferThreshold.setStatus('mandatory')
nodeGuaranteedBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeGuaranteedBufferThreshold.setStatus('mandatory')
nodeSaveConf = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nodeSaveConf.setStatus('mandatory')
nodeSaveResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("temporaryFailure", 1), ("notReady", 2), ("ready", 3), ("succeed", 4), ("nearend", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSaveResult.setStatus('mandatory')
linfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1), )
if mibBuilder.loadTexts: linfStatusTable.setStatus('mandatory')
linfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1), ).setIndexNames((0, "A100-R1-MIB", "linfIndex"))
if mibBuilder.loadTexts: linfStatusEntry.setStatus('mandatory')
linfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfIndex.setStatus('mandatory')
linfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("normal", 1), ("los", 2), ("lof", 3), ("loc", 4), ("ais", 5), ("yellow-line", 6), ("yellow-path", 7), ("lop", 8), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfStatus.setStatus('mandatory')
linfConf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("public-UNI", 1), ("private-UNI", 2), ("private-NNI", 3), ("others", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linfConf.setStatus('mandatory')
mibBuilder.exportSymbols("A100-R1-MIB", necProductDepend=necProductDepend, linfConf=linfConf, nodeIfConfIndex=nodeIfConfIndex, nodeFanStatus=nodeFanStatus, nodeBestEffortBufferSize=nodeBestEffortBufferSize, nodeGuaranteedBufferThreshold=nodeGuaranteedBufferThreshold, nodeIfConfPhysType=nodeIfConfPhysType, nodeOperStatus=nodeOperStatus, linfStatus=linfStatus, nodeUpcWindowSize=nodeUpcWindowSize, nodeSaveResult=nodeSaveResult, linfStatusTable=linfStatusTable, nodeIfConfTable=nodeIfConfTable, nodeIfConfRev=nodeIfConfRev, nodeIfConfStatus=nodeIfConfStatus, atomis_mib=atomis_mib, m5core_mib=m5core_mib, linfIndex=linfIndex, nodeIfConfEntry=nodeIfConfEntry, nodeGuaranteedBufferSize=nodeGuaranteedBufferSize, node=node, nec_mib=nec_mib, linfStatusEntry=linfStatusEntry, nodeSaveConf=nodeSaveConf, perf=perf, nodeBestEffortBufferThreshold=nodeBestEffortBufferThreshold, linf=linf, nec=nec, conn=conn)
