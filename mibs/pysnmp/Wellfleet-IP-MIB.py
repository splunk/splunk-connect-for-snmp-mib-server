#
# PySNMP MIB module Wellfleet-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, ModuleIdentity, Opaque, Unsigned32, IpAddress, Counter64, Integer32, ObjectIdentity, Bits, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "ModuleIdentity", "Opaque", "Unsigned32", "IpAddress", "Counter64", "Integer32", "ObjectIdentity", "Bits", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfUdpGroup, wfRipGroup, wfIpGroup = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfUdpGroup", "wfRipGroup", "wfIpGroup")
wfIpBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1))
wfIpBaseCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseCreate.setStatus('mandatory')
wfIpBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseEnable.setStatus('mandatory')
wfIpBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseState.setStatus('mandatory')
wfIpBaseForwarding = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2))).clone('forwarding')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseForwarding.setStatus('mandatory')
wfIpBaseDefaultTTL = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseDefaultTTL.setStatus('mandatory')
wfIpBaseRipDiameter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseRipDiameter.setStatus('mandatory')
wfIpBaseRouteCache = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(60))).clone(namedValues=NamedValues(("default", 60))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseRouteCache.setStatus('mandatory')
wfIpBaseMibTables = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("route", 2), ("forwarding", 3), ("both", 4))).clone('route')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseMibTables.setStatus('mandatory')
wfIpBaseNetworks = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseNetworks.setStatus('mandatory')
wfIpBaseZeroSubnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("rip1onasb", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseZeroSubnetEnable.setStatus('mandatory')
wfIpBaseEstimatedNetworks = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseEstimatedNetworks.setStatus('mandatory')
wfIpBaseHosts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseHosts.setStatus('mandatory')
wfIpBaseEstimatedHosts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseEstimatedHosts.setStatus('mandatory')
wfIpBaseDefaultOverSubnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseDefaultOverSubnetEnable.setStatus('mandatory')
wfIpBaseMaxPolicyRules = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 15), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseMaxPolicyRules.setStatus('mandatory')
wfIpBaseRouteFilterSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseRouteFilterSupport.setStatus('mandatory')
wfRipMaximumPath = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipMaximumPath.setStatus('mandatory')
wfIpMultipathMethod = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("round-robin", 2), ("src-dest-hash", 3), ("dest-hash", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpMultipathMethod.setStatus('mandatory')
wfIpBaseIspMode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseIspMode.setStatus('mandatory')
wfIpBaseExtendedTrafficFilterSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseExtendedTrafficFilterSupport.setStatus('mandatory')
wfIpOspfMaximumPath = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpOspfMaximumPath.setStatus('mandatory')
wfIpBaseIcmpErrorLimit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseIcmpErrorLimit.setStatus('mandatory')
wfIpBaseIbgpEcmp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseIbgpEcmp.setStatus('obsolete')
wfIpBaseRtbBalanceInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseRtbBalanceInterval.setStatus('mandatory')
wfIpBaseRtblP1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseRtblP1.setStatus('mandatory')
wfIpBaseRtblP2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseRtblP2.setStatus('mandatory')
wfIpBaseArpBufLimitPrcnt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseArpBufLimitPrcnt.setStatus('mandatory')
wfIpBaseDirectedBcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseDirectedBcastEnable.setStatus('mandatory')
wfIpBaseHostOnlyRip = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("listen", 1), ("notlisten", 2))).clone('listen')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseHostOnlyRip.setStatus('mandatory')
wfIpBaseBlockSRR = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseBlockSRR.setStatus('mandatory')
wfIpBaseRtEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2), )
if mibBuilder.loadTexts: wfIpBaseRtEntryTable.setStatus('mandatory')
wfIpBaseRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpBaseRouteDest"))
if mibBuilder.loadTexts: wfIpBaseRtEntry.setStatus('mandatory')
wfIpBaseRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteDest.setStatus('mandatory')
wfIpBaseRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteIfIndex.setStatus('mandatory')
wfIpBaseRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteMetric1.setStatus('mandatory')
wfIpBaseRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteMetric2.setStatus('mandatory')
wfIpBaseRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteMetric3.setStatus('mandatory')
wfIpBaseRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteMetric4.setStatus('mandatory')
wfIpBaseRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteNextHop.setStatus('mandatory')
wfIpBaseRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteType.setStatus('mandatory')
wfIpBaseRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is", 9), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ahb", 16), ("asr", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteProto.setStatus('mandatory')
wfIpBaseRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteAge.setStatus('mandatory')
wfIpBaseRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteMask.setStatus('mandatory')
wfIpBaseRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteMetric5.setStatus('mandatory')
wfIpBaseRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 2, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseRouteInfo.setStatus('mandatory')
wfIpBaseHostEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 3), )
if mibBuilder.loadTexts: wfIpBaseHostEntryTable.setStatus('obsolete')
wfIpBaseHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 3, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpBaseNetToMediaIfIndex"), (0, "Wellfleet-IP-MIB", "wfIpBaseNetToMediaNetAddress"))
if mibBuilder.loadTexts: wfIpBaseHostEntry.setStatus('obsolete')
wfIpBaseNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseNetToMediaIfIndex.setStatus('obsolete')
wfIpBaseNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseNetToMediaPhysAddress.setStatus('obsolete')
wfIpBaseNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpBaseNetToMediaNetAddress.setStatus('obsolete')
wfIpBaseNetToMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseNetToMediaType.setStatus('obsolete')
wfIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4), )
if mibBuilder.loadTexts: wfIpInterfaceTable.setStatus('obsolete')
wfIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpInterfaceAddr"), (0, "Wellfleet-IP-MIB", "wfIpInterfaceCircuit"))
if mibBuilder.loadTexts: wfIpInterfaceEntry.setStatus('obsolete')
wfIpInterfaceCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceCreate.setStatus('obsolete')
wfIpInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceEnable.setStatus('obsolete')
wfIpInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceState.setStatus('obsolete')
wfIpInterfaceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceAddr.setStatus('obsolete')
wfIpInterfaceCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceCircuit.setStatus('obsolete')
wfIpInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceMask.setStatus('obsolete')
wfIpInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceCost.setStatus('obsolete')
wfIpInterfaceCfgBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceCfgBcastAddr.setStatus('obsolete')
wfIpInterfaceBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceBcastAddr.setStatus('obsolete')
wfIpInterfaceMTUDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceMTUDiscovery.setStatus('obsolete')
wfIpInterfaceAMR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceAMR.setStatus('obsolete')
wfIpInterfaceASB = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceASB.setStatus('obsolete')
wfIpInterfaceAddressResolutionType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("arp", 1), ("ddn", 3), ("pdn", 4), ("in-arp", 5), ("arp-in-arp", 6), ("none", 7), ("bfe-ddn", 8), ("probe", 9), ("arp-probe", 10), ("atm-arp", 11))).clone('arp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceAddressResolutionType.setStatus('obsolete')
wfIpInterfaceProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceProxy.setStatus('obsolete')
wfIpInterfaceHostCache = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 120, 180, 240, 300, 600, 900, 1200))).clone(namedValues=NamedValues(("cache-off", 1), ("cache-120", 120), ("cache-180", 180), ("cache-240", 240), ("cache-300", 300), ("cache-600", 600), ("cache-900", 900), ("cache-1200", 1200))).clone('cache-off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceHostCache.setStatus('obsolete')
wfIpInterfaceUdpXsumOn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceUdpXsumOn.setStatus('obsolete')
wfIpInterfaceCfgMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceCfgMacAddress.setStatus('obsolete')
wfIpInterfaceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceMacAddress.setStatus('obsolete')
wfIpInterfaceReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceReasmMaxSize.setStatus('obsolete')
wfIpInterfaceMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceMaxInfo.setStatus('obsolete')
wfIpInterfaceInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceInReceives.setStatus('obsolete')
wfIpInterfaceInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceInHdrErrors.setStatus('obsolete')
wfIpInterfaceInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceInAddrErrors.setStatus('obsolete')
wfIpInterfaceForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceForwDatagrams.setStatus('obsolete')
wfIpInterfaceInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceInUnknownProtos.setStatus('obsolete')
wfIpInterfaceInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceInDiscards.setStatus('obsolete')
wfIpInterfaceInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceInDelivers.setStatus('obsolete')
wfIpInterfaceOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceOutRequests.setStatus('obsolete')
wfIpInterfaceOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceOutDiscards.setStatus('obsolete')
wfIpInterfaceOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceOutNoRoutes.setStatus('obsolete')
wfIpInterfaceReasmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceReasmTimeout.setStatus('obsolete')
wfIpInterfaceReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceReasmReqds.setStatus('obsolete')
wfIpInterfaceReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceReasmOKs.setStatus('obsolete')
wfIpInterfaceReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceReasmFails.setStatus('obsolete')
wfIpInterfaceFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceFragOKs.setStatus('obsolete')
wfIpInterfaceFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceFragFails.setStatus('obsolete')
wfIpInterfaceFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceFragCreates.setStatus('obsolete')
wfIpInterfaceIcmpInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInMsgs.setStatus('obsolete')
wfIpInterfaceIcmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInErrors.setStatus('obsolete')
wfIpInterfaceIcmpInDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInDestUnreachs.setStatus('obsolete')
wfIpInterfaceIcmpInTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInTimeExcds.setStatus('obsolete')
wfIpInterfaceIcmpInParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInParmProbs.setStatus('obsolete')
wfIpInterfaceIcmpInSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInSrcQuenchs.setStatus('obsolete')
wfIpInterfaceIcmpInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInRedirects.setStatus('obsolete')
wfIpInterfaceIcmpInEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInEchos.setStatus('obsolete')
wfIpInterfaceIcmpInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInEchoReps.setStatus('obsolete')
wfIpInterfaceIcmpInTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInTimestamps.setStatus('obsolete')
wfIpInterfaceIcmpInTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInTimestampReps.setStatus('obsolete')
wfIpInterfaceIcmpInAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInAddrMasks.setStatus('obsolete')
wfIpInterfaceIcmpInAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInAddrMaskReps.setStatus('obsolete')
wfIpInterfaceIcmpOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutMsgs.setStatus('obsolete')
wfIpInterfaceIcmpOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutErrors.setStatus('obsolete')
wfIpInterfaceIcmpOutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutDestUnreachs.setStatus('obsolete')
wfIpInterfaceIcmpOutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutTimeExcds.setStatus('obsolete')
wfIpInterfaceIcmpOutParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutParmProbs.setStatus('obsolete')
wfIpInterfaceIcmpOutSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutSrcQuenchs.setStatus('obsolete')
wfIpInterfaceIcmpOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutRedirects.setStatus('obsolete')
wfIpInterfaceIcmpOutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutEchos.setStatus('obsolete')
wfIpInterfaceIcmpOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutEchoReps.setStatus('obsolete')
wfIpInterfaceIcmpOutTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutTimestamps.setStatus('obsolete')
wfIpInterfaceIcmpOutTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutTimestampReps.setStatus('obsolete')
wfIpInterfaceIcmpOutAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutAddrMasks.setStatus('obsolete')
wfIpInterfaceIcmpOutAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutAddrMaskReps.setStatus('obsolete')
wfIpInterfaceTrEndStation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceTrEndStation.setStatus('obsolete')
wfIpInterfaceSMDSGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 65), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceSMDSGroupAddress.setStatus('obsolete')
wfIpInterfaceSMDSArpReqAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 66), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceSMDSArpReqAddress.setStatus('obsolete')
wfIpInterfaceFRBcastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 67), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceFRBcastDlci.setStatus('obsolete')
wfIpInterfaceFRMcast1Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceFRMcast1Dlci.setStatus('obsolete')
wfIpInterfaceFRMcast2Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 69), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceFRMcast2Dlci.setStatus('obsolete')
wfIpInterfaceRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceRedirect.setStatus('obsolete')
wfIpInterfaceEnetArpEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("enet", 1), ("snap", 2), ("both", 3), ("probelsap", 4), ("probeenet", 5), ("probeboth", 6), ("arpenetprobelsap", 7), ("arpsnapprobelsap", 8), ("arpbothprobelsap", 9))).clone('enet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceEnetArpEncaps.setStatus('obsolete')
wfIpInterfaceCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceCacheMisses.setStatus('obsolete')
wfIpInterfaceCacheNetworks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceCacheNetworks.setStatus('obsolete')
wfIpInterfaceCacheRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceCacheRemoves.setStatus('obsolete')
wfIpInterfaceSlotMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 75), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceSlotMask.setStatus('obsolete')
wfIpInterfaceEnableSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceEnableSecurity.setStatus('obsolete')
wfIpInterfaceStripSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceStripSecurity.setStatus('obsolete')
wfIpInterfaceRequireOutSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forwarded", 1), ("originated", 2), ("all", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceRequireOutSecurity.setStatus('obsolete')
wfIpInterfaceRequireInSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceRequireInSecurity.setStatus('obsolete')
wfIpInterfaceMinLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(171, 150, 90, 61))).clone(namedValues=NamedValues(("unclassified", 171), ("confidential", 150), ("secret", 90), ("topsecret", 61))).clone('unclassified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceMinLevel.setStatus('obsolete')
wfIpInterfaceMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(171, 150, 90, 61))).clone(namedValues=NamedValues(("unclassified", 171), ("confidential", 150), ("secret", 90), ("topsecret", 61))).clone('topsecret')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceMaxLevel.setStatus('obsolete')
wfIpInterfaceMustOutAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 82), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceMustOutAuthority.setStatus('obsolete')
wfIpInterfaceMayOutAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 83), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceMayOutAuthority.setStatus('obsolete')
wfIpInterfaceMustInAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 84), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceMustInAuthority.setStatus('obsolete')
wfIpInterfaceMayInAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 85), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceMayInAuthority.setStatus('obsolete')
wfIpInterfaceImplicitLabelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceImplicitLabelEnabled.setStatus('obsolete')
wfIpInterfaceImplicitAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 87), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceImplicitAuth.setStatus('obsolete')
wfIpInterfaceImplicitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(171, 150, 90, 61))).clone(namedValues=NamedValues(("unclassified", 171), ("confidential", 150), ("secret", 90), ("topsecret", 61))).clone('unclassified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceImplicitLevel.setStatus('obsolete')
wfIpInterfaceDefaultLabelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceDefaultLabelEnabled.setStatus('obsolete')
wfIpInterfaceDefaultAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 90), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceDefaultAuth.setStatus('obsolete')
wfIpInterfaceDefaultLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(171, 150, 90, 61))).clone(namedValues=NamedValues(("unclassified", 171), ("confidential", 150), ("secret", 90), ("topsecret", 61))).clone('unclassified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceDefaultLevel.setStatus('obsolete')
wfIpInterfaceErrorLabelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceErrorLabelEnabled.setStatus('obsolete')
wfIpInterfaceErrorAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 93), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceErrorAuth.setStatus('obsolete')
wfIpInterfaceDropRxAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceDropRxAuths.setStatus('obsolete')
wfIpInterfaceDropRxFormats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceDropRxFormats.setStatus('obsolete')
wfIpInterfaceDropRxLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceDropRxLevels.setStatus('obsolete')
wfIpInterfaceDropRxNoIpsos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceDropRxNoIpsos.setStatus('obsolete')
wfIpInterfaceDropTxAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceDropTxAuths.setStatus('obsolete')
wfIpInterfaceDropTxLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceDropTxLevels.setStatus('obsolete')
wfIpInterfaceDropTxNoIpsos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceDropTxNoIpsos.setStatus('obsolete')
wfIpInterfaceDropTxNoIpsoRooms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceDropTxNoIpsoRooms.setStatus('obsolete')
wfIpInterfaceICMPInAdminProhib = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceICMPInAdminProhib.setStatus('obsolete')
wfIpInterfaceICMPOutAdminProhib = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceICMPOutAdminProhib.setStatus('obsolete')
wfIpInterfaceFwdCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 2147483647)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceFwdCacheSize.setStatus('obsolete')
wfIpInterfaceTunnelInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 105), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceTunnelInfo.setStatus('obsolete')
wfIpInterfaceIcmpInRdiscSolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInRdiscSolicit.setStatus('obsolete')
wfIpInterfaceIcmpInRdiscAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpInRdiscAdvert.setStatus('obsolete')
wfIpInterfaceIcmpOutRdiscAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceIcmpOutRdiscAdvert.setStatus('obsolete')
wfIpInterfaceRoutingDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceRoutingDiscards.setStatus('obsolete')
wfIpInterfaceUnnumAssocAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 110), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceUnnumAssocAddr.setStatus('obsolete')
wfIpInterfaceUnnumAssocAlt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceUnnumAssocAlt.setStatus('obsolete')
wfIpInterfaceAtmArpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("client", 1), ("server", 2), ("none", 3))).clone('client')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpMode.setStatus('obsolete')
wfIpInterfaceAtmArpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 113), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpServerAddress.setStatus('obsolete')
wfIpInterfaceAtmArpServerVcAgingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpServerVcAgingEnable.setStatus('obsolete')
wfIpInterfaceAtmArpServerRegInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(900, 1200))).clone(namedValues=NamedValues(("clientdefault", 900), ("serverdefault", 1200))).clone('clientdefault')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpServerRegInterval.setStatus('obsolete')
wfIpInterfaceAtmArpServerConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 1028, 4, 20, 36, 52, 260, 276, 292, 308, 516, 532, 548, 564, 772, 788, 804, 820, 12, 28, 44, 60, 268, 284, 300, 316, 524, 540, 556, 572, 780, 796, 812, 828))).clone(namedValues=NamedValues(("init", 1), ("wereserver", 2), ("noservercfg", 1028), ("closednotreg", 4), ("openingnotreg", 20), ("opennotregxxx", 36), ("openfailnotreg", 52), ("closedregingxxx", 260), ("openingregingxxx", 276), ("openreging", 292), ("openfailregingxxx", 308), ("closedreg", 516), ("openingreg", 532), ("openreg", 548), ("openfailreg", 564), ("closedregfail", 772), ("openingregfail", 788), ("openregfailxxx", 804), ("openfailregfail", 820), ("closednotregarp", 12), ("openingnotregarp", 28), ("opennotregarpxxx", 44), ("openfailnotregarp", 60), ("closedregingarpxxx", 268), ("openingregingarpxxx", 284), ("openregingarp", 300), ("openfailregingarpxxx", 316), ("closedregarp", 524), ("openingregarp", 540), ("openregarpxxx", 556), ("openfailregarp", 572), ("closedregfailarp", 780), ("openingregfailarp", 796), ("openregfailarpxxx", 812), ("openfailregfailarp", 828))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpServerConnState.setStatus('obsolete')
wfIpInterfaceAtmArpAttemptedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpAttemptedCalls.setStatus('obsolete')
wfIpInterfaceAtmArpFailRetryCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpFailRetryCalls.setStatus('obsolete')
wfIpInterfaceAtmArpFailNoRetryCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpFailNoRetryCalls.setStatus('obsolete')
wfIpInterfaceAtmArpSuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpSuccessfulCalls.setStatus('obsolete')
wfIpInterfaceAtmArpAcceptedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpAcceptedCalls.setStatus('obsolete')
wfIpInterfaceAtmArpOpenSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpOpenSvcs.setStatus('obsolete')
wfIpInterfaceAtmArpMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 123), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpMisc.setStatus('obsolete')
wfIpInterfaceAtmArpMisc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 124), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceAtmArpMisc2.setStatus('obsolete')
wfIpInterfaceMcastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceMcastInPkts.setStatus('obsolete')
wfIpInterfaceMcastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInterfaceMcastOutPkts.setStatus('obsolete')
wfIpInterfaceTrEsArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 4, 1, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ste", 1), ("are", 2))).clone('ste')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpInterfaceTrEsArpType.setStatus('obsolete')
wfIpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5), )
if mibBuilder.loadTexts: wfIpStaticRouteTable.setStatus('mandatory')
wfIpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpSrIpAddress"), (0, "Wellfleet-IP-MIB", "wfIpSrIpNetMask"), (0, "Wellfleet-IP-MIB", "wfIpSrIpAddressRt"))
if mibBuilder.loadTexts: wfIpStaticRouteEntry.setStatus('mandatory')
wfIpSrCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpSrCreate.setStatus('mandatory')
wfIpSrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpSrEnable.setStatus('mandatory')
wfIpSrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpSrIpAddress.setStatus('mandatory')
wfIpSrIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpSrIpNetMask.setStatus('mandatory')
wfIpSrCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpSrCost.setStatus('mandatory')
wfIpSrNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpSrNextHopAddr.setStatus('mandatory')
wfIpSrNextHopMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpSrNextHopMask.setStatus('obsolete')
wfIpSrPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 8), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpSrPreference.setStatus('mandatory')
wfIpSrIpAddressRt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpSrIpAddressRt.setStatus('mandatory')
wfIpSrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpSrValid.setStatus('mandatory')
wfIpSrUnnumCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpSrUnnumCct.setStatus('mandatory')
wfIpAdjacentHostTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6), )
if mibBuilder.loadTexts: wfIpAdjacentHostTable.setStatus('mandatory')
wfIpAdjacentHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpAdjHostIpAddress"))
if mibBuilder.loadTexts: wfIpAdjacentHostEntry.setStatus('mandatory')
wfIpAdjHostCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostCreate.setStatus('mandatory')
wfIpAdjHostEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostEnable.setStatus('mandatory')
wfIpAdjHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAdjHostIpAddress.setStatus('mandatory')
wfIpAdjHostIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostIntf.setStatus('mandatory')
wfIpAdjHostIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostIntfMask.setStatus('mandatory')
wfIpAdjHostMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostMacAddr.setStatus('mandatory')
wfIpAdjHostEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("enet", 1), ("snap", 2), ("pdn", 3), ("ddn", 4), ("null", 5), ("snapip", 6), ("gre", 7))).clone('enet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostEncaps.setStatus('mandatory')
wfIpAdjHostValid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAdjHostValid.setStatus('mandatory')
wfIpAdjHostX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostX121Addr.setStatus('mandatory')
wfIpAdjHostSubaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostSubaddr.setStatus('mandatory')
wfIpAdjHostTypeOfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostTypeOfNumber.setStatus('mandatory')
wfIpAdjHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fre164", 1), ("default", 2), ("frx121", 3), ("frdlci", 4), ("gre", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostType.setStatus('mandatory')
wfIpAdjHostGreConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 6, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAdjHostGreConnName.setStatus('mandatory')
wfIpTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7), )
if mibBuilder.loadTexts: wfIpTrafficFilterTable.setStatus('mandatory')
wfIpTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpTrafficFilterInterface"), (0, "Wellfleet-IP-MIB", "wfIpTrafficFilterCircuit"), (0, "Wellfleet-IP-MIB", "wfIpTrafficFilterRuleNumber"), (0, "Wellfleet-IP-MIB", "wfIpTrafficFilterFragment"))
if mibBuilder.loadTexts: wfIpTrafficFilterEntry.setStatus('mandatory')
wfIpTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTrafficFilterCreate.setStatus('mandatory')
wfIpTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTrafficFilterEnable.setStatus('mandatory')
wfIpTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterStatus.setStatus('mandatory')
wfIpTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterCounter.setStatus('mandatory')
wfIpTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTrafficFilterDefinition.setStatus('mandatory')
wfIpTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterReserved.setStatus('mandatory')
wfIpTrafficFilterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterInterface.setStatus('mandatory')
wfIpTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterCircuit.setStatus('mandatory')
wfIpTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterRuleNumber.setStatus('mandatory')
wfIpTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterFragment.setStatus('mandatory')
wfIpTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTrafficFilterName.setStatus('mandatory')
wfIpTrafficFilterPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTrafficFilterPrecedence.setStatus('mandatory')
wfIpTrafficFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("staticdiffserv", 2), ("copsdiffserv", 3), ("dynamicdiffserv", 4))).clone('ip')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterType.setStatus('mandatory')
wfIpTrafficFilterDSOopCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterDSOopCounter.setStatus('mandatory')
wfIpTrafficFilterDSPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 15), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTrafficFilterDSPrecedence.setStatus('mandatory')
wfIpTrafficFilterDSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterDSBytes.setStatus('mandatory')
wfIpTrafficFilterDSOopBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTrafficFilterDSOopBytes.setStatus('mandatory')
wfIpForwardTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16), )
if mibBuilder.loadTexts: wfIpForwardTable.setStatus('mandatory')
wfIpForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpForwardDest"), (0, "Wellfleet-IP-MIB", "wfIpForwardMask"), (0, "Wellfleet-IP-MIB", "wfIpForwardProto"), (0, "Wellfleet-IP-MIB", "wfIpForwardPolicy"), (0, "Wellfleet-IP-MIB", "wfIpForwardNextHop"))
if mibBuilder.loadTexts: wfIpForwardEntry.setStatus('mandatory')
wfIpForwardDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardDest.setStatus('mandatory')
wfIpForwardMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardMask.setStatus('mandatory')
wfIpForwardPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardPolicy.setStatus('mandatory')
wfIpForwardNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardNextHop.setStatus('mandatory')
wfIpForwardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardIfIndex.setStatus('mandatory')
wfIpForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardType.setStatus('mandatory')
wfIpForwardProto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isis", 9), ("esis", 10), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ahb", 16), ("asr", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardProto.setStatus('mandatory')
wfIpForwardAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardAge.setStatus('mandatory')
wfIpForwardInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardInfo.setStatus('mandatory')
wfIpForwardNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardNextHopAS.setStatus('mandatory')
wfIpForwardMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardMetric1.setStatus('mandatory')
wfIpForwardMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardMetric2.setStatus('mandatory')
wfIpForwardMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardMetric3.setStatus('mandatory')
wfIpForwardMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardMetric4.setStatus('mandatory')
wfIpForwardMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 16, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpForwardMetric5.setStatus('mandatory')
wfIpNetToMediaEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 18), )
if mibBuilder.loadTexts: wfIpNetToMediaEntryTable.setStatus('mandatory')
wfIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 18, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpNetToMediaIfIndex"), (0, "Wellfleet-IP-MIB", "wfIpNetToMediaNetAddress"))
if mibBuilder.loadTexts: wfIpNetToMediaEntry.setStatus('mandatory')
wfIpNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpNetToMediaIfIndex.setStatus('mandatory')
wfIpNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 18, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpNetToMediaPhysAddress.setStatus('mandatory')
wfIpNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 18, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpNetToMediaNetAddress.setStatus('mandatory')
wfIpNetToMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpNetToMediaType.setStatus('mandatory')
wfUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 1))
wfUdpInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpInDatagrams.setStatus('mandatory')
wfUdpNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpNoPorts.setStatus('mandatory')
wfUdpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpInErrors.setStatus('mandatory')
wfUdpOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpOutDatagrams.setStatus('mandatory')
wfUdpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 2), )
if mibBuilder.loadTexts: wfUdpTable.setStatus('mandatory')
wfUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 2, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfUdpLocalAddress"), (0, "Wellfleet-IP-MIB", "wfUdpLocalPort"))
if mibBuilder.loadTexts: wfUdpEntry.setStatus('mandatory')
wfUdpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpLocalAddress.setStatus('mandatory')
wfUdpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpLocalPort.setStatus('mandatory')
wfUdpMpr = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3))
wfUdpMprCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprCreate.setStatus('mandatory')
wfUdpMprEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprEnable.setStatus('mandatory')
wfUdpMprStartPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 50000, 60000))).clone(namedValues=NamedValues(("minumum", 10000), ("default", 50000), ("maximum", 60000))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprStartPort.setStatus('mandatory')
wfUdpMprNumberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 256))).clone(namedValues=NamedValues(("default", 64), ("maximum", 256))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprNumberOfPorts.setStatus('mandatory')
wfUdpMprStatisticsEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprStatisticsEnable.setStatus('mandatory')
wfUdpMprInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprInPkts.setStatus('mandatory')
wfUdpMprOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprOutPkts.setStatus('mandatory')
wfUdpMprGenPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprGenPkts.setStatus('mandatory')
wfUdpMprLookupDrops = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprLookupDrops.setStatus('mandatory')
wfUdpMprDisableDrops = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprDisableDrops.setStatus('mandatory')
wfUdpMprMappingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4), )
if mibBuilder.loadTexts: wfUdpMprMappingTable.setStatus('mandatory')
wfUdpMprMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfUdpMprMapPort"))
if mibBuilder.loadTexts: wfUdpMprMappingEntry.setStatus('mandatory')
wfUdpMprMapCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprMapCreate.setStatus('mandatory')
wfUdpMprMapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprMapEnable.setStatus('mandatory')
wfUdpMprMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprMapPort.setStatus('mandatory')
wfUdpMprMapMcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprMapMcastAddr.setStatus('mandatory')
wfUdpMprMapStatisticsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUdpMprMapStatisticsEnable.setStatus('mandatory')
wfUdpMprMapInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprMapInPkts.setStatus('mandatory')
wfUdpMprMapOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprMapOutPkts.setStatus('mandatory')
wfUdpMprMapGenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprMapGenPkts.setStatus('mandatory')
wfUdpMprMapLookupDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprMapLookupDrops.setStatus('mandatory')
wfUdpMprMapDisableDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUdpMprMapDisableDrops.setStatus('mandatory')
wfRipIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1), )
if mibBuilder.loadTexts: wfRipIntfTable.setStatus('obsolete')
wfRipIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfRipInterfaceIndex"))
if mibBuilder.loadTexts: wfRipIntfEntry.setStatus('obsolete')
wfRipInterfaceCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipInterfaceCreate.setStatus('obsolete')
wfRipInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipInterfaceEnable.setStatus('obsolete')
wfRipInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRipInterfaceState.setStatus('obsolete')
wfRipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRipInterfaceIndex.setStatus('obsolete')
wfRipInterfaceSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipInterfaceSupply.setStatus('obsolete')
wfRipInterfaceListen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipInterfaceListen.setStatus('obsolete')
wfRipInterfaceDefaultRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipInterfaceDefaultRouteSupply.setStatus('obsolete')
wfRipInterfaceDefaultRouteListen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipInterfaceDefaultRouteListen.setStatus('obsolete')
wfRipInterfacePoisonedReversed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("poisoned", 1), ("actual", 2), ("split", 3))).clone('poisoned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipInterfacePoisonedReversed.setStatus('obsolete')
wfRipInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2), )
if mibBuilder.loadTexts: wfRipInterfaceTable.setStatus('mandatory')
wfRipInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfRipIntfIndex"), (0, "Wellfleet-IP-MIB", "wfRipIntfCct"))
if mibBuilder.loadTexts: wfRipInterfaceEntry.setStatus('mandatory')
wfRipIntfCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfCreate.setStatus('mandatory')
wfRipIntfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfEnable.setStatus('mandatory')
wfRipIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRipIntfState.setStatus('mandatory')
wfRipIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRipIntfIndex.setStatus('mandatory')
wfRipIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfSupply.setStatus('mandatory')
wfRipIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfListen.setStatus('mandatory')
wfRipIntfDefaultRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("generated", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfDefaultRouteSupply.setStatus('mandatory')
wfRipIntfDefaultRouteListen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfDefaultRouteListen.setStatus('mandatory')
wfRipIntfPoisonedReversed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("poisoned", 1), ("actual", 2), ("split", 3))).clone('poisoned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfPoisonedReversed.setStatus('mandatory')
wfRipIntfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRipIntfCct.setStatus('mandatory')
wfRipIntfTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfTTL.setStatus('mandatory')
wfRipIntfBroadcastTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfBroadcastTimer.setStatus('mandatory')
wfRipIntfTimeoutTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 3628800)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfTimeoutTimer.setStatus('mandatory')
wfRipIntfHolddownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 3628800)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfHolddownTimer.setStatus('mandatory')
wfRipIntfCompSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("aggr", 3))).clone('rip1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfCompSwitch.setStatus('mandatory')
wfRipIntfTriggeredUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfTriggeredUpdates.setStatus('mandatory')
wfRipIntfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-password", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfAuthType.setStatus('mandatory')
wfRipIntfAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfAuthentication.setStatus('mandatory')
wfRipIntfInitStabilizationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfInitStabilizationTimer.setStatus('mandatory')
wfRipIntfSVCBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfSVCBroadcast.setStatus('mandatory')
wfRipIntfDefaultRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipIntfDefaultRouteCost.setStatus('mandatory')
wfRdiscIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17), )
if mibBuilder.loadTexts: wfRdiscIntfTable.setStatus('mandatory')
wfRdiscIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfRdiscInterfaceIndex"))
if mibBuilder.loadTexts: wfRdiscIntfEntry.setStatus('mandatory')
wfRdiscInterfaceCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRdiscInterfaceCreate.setStatus('mandatory')
wfRdiscInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRdiscInterfaceEnable.setStatus('mandatory')
wfRdiscInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRdiscInterfaceState.setStatus('mandatory')
wfRdiscInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRdiscInterfaceIndex.setStatus('mandatory')
wfRdiscInterfaceBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("local", 2), ("direct", 3))).clone('mcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRdiscInterfaceBcast.setStatus('mandatory')
wfRdiscInterfaceMinIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 6), Integer32().clone(450)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRdiscInterfaceMinIntrvl.setStatus('mandatory')
wfRdiscInterfaceMaxIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 7), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRdiscInterfaceMaxIntrvl.setStatus('mandatory')
wfRdiscInterfaceLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 8), Integer32().clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRdiscInterfaceLifetime.setStatus('mandatory')
wfRdiscInterfacePref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRdiscInterfacePref.setStatus('mandatory')
wfRdiscInterfaceUnicastAdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRdiscInterfaceUnicastAdvt.setStatus('mandatory')
wfRdiscInterfaceMulticastAdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRdiscInterfaceMulticastAdvt.setStatus('mandatory')
wfRdiscInterfaceDynamicPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRdiscInterfaceDynamicPref.setStatus('obsolete')
wfIpAccCtrlFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19), )
if mibBuilder.loadTexts: wfIpAccCtrlFilterTable.setStatus('mandatory')
wfIpAccCtrlFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpAccCtrlFilterIndex"))
if mibBuilder.loadTexts: wfIpAccCtrlFilterEntry.setStatus('mandatory')
wfIpAccCtrlFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterCreate.setStatus('mandatory')
wfIpAccCtrlFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterEnable.setStatus('mandatory')
wfIpAccCtrlFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAccCtrlFilterIndex.setStatus('mandatory')
wfIpAccCtrlFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterName.setStatus('mandatory')
wfIpAccCtrlFilterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterNetwork.setStatus('mandatory')
wfIpAccCtrlFilterNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterNetworkMask.setStatus('mandatory')
wfIpAccCtrlFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterAction.setStatus('mandatory')
wfIpAccCtrlFilterServiceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterServiceMask.setStatus('mandatory')
wfIpAccCtrlFilterDenyLog = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterDenyLog.setStatus('mandatory')
wfIpAccCtrlFilterPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterPrecedence.setStatus('mandatory')
wfIpAccCtrlFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 19, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlFilterId.setStatus('mandatory')
wfIpAccCtrlNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 20), )
if mibBuilder.loadTexts: wfIpAccCtrlNetworkTable.setStatus('mandatory')
wfIpAccCtrlNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 20, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpAccCtrlNetworkIndex"))
if mibBuilder.loadTexts: wfIpAccCtrlNetworkEntry.setStatus('mandatory')
wfIpAccCtrlNetworkCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlNetworkCreate.setStatus('mandatory')
wfIpAccCtrlNetworkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlNetworkEnable.setStatus('mandatory')
wfIpAccCtrlNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAccCtrlNetworkIndex.setStatus('mandatory')
wfIpAccCtrlNetworkNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 20, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlNetworkNetwork.setStatus('mandatory')
wfIpAccCtrlNetworkNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 20, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlNetworkNetworkMask.setStatus('mandatory')
wfIpAccCtrlNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 20, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlNetworkId.setStatus('mandatory')
wfIpAccCtrlUserHostTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 21), )
if mibBuilder.loadTexts: wfIpAccCtrlUserHostTable.setStatus('mandatory')
wfIpAccCtrlUserHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 21, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpAccCtrlUserHostIndex"))
if mibBuilder.loadTexts: wfIpAccCtrlUserHostEntry.setStatus('mandatory')
wfIpAccCtrlUserHostCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlUserHostCreate.setStatus('mandatory')
wfIpAccCtrlUserHostEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlUserHostEnable.setStatus('mandatory')
wfIpAccCtrlUserHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAccCtrlUserHostIndex.setStatus('mandatory')
wfIpAccCtrlUserHostUser = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 21, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlUserHostUser.setStatus('mandatory')
wfIpAccCtrlUserHostHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlUserHostHost.setStatus('mandatory')
wfIpAccCtrlUserHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 21, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpAccCtrlUserHostId.setStatus('mandatory')
wfIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 22), )
if mibBuilder.loadTexts: wfIpAddrTable.setStatus('mandatory')
wfIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 22, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpAdEntAddr"))
if mibBuilder.loadTexts: wfIpAddrEntry.setStatus('mandatory')
wfIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 22, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAdEntAddr.setStatus('mandatory')
wfIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAdEntIfIndex.setStatus('mandatory')
wfIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 22, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAdEntNetMask.setStatus('mandatory')
wfIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAdEntBcastAddr.setStatus('mandatory')
wfIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpAdEntReasmMaxSize.setStatus('mandatory')
wfIpInternalHostTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23), )
if mibBuilder.loadTexts: wfIpInternalHostTable.setStatus('mandatory')
wfIpInternalHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpInternHtIpAddress"))
if mibBuilder.loadTexts: wfIpInternalHostEntry.setStatus('mandatory')
wfIpInternHtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInternHtIpAddress.setStatus('mandatory')
wfIpInternHtReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInternHtReceives.setStatus('mandatory')
wfIpInternHtInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInternHtInDelivers.setStatus('mandatory')
wfIpInternHtUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInternHtUnknownProtos.setStatus('mandatory')
wfIpInternHtReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInternHtReasmReqds.setStatus('mandatory')
wfIpInternHtReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInternHtReasmFails.setStatus('mandatory')
wfIpInternHtReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInternHtReasmOKs.setStatus('mandatory')
wfIpInternHtInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 23, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpInternHtInHdrErrors.setStatus('mandatory')
wfIpIntfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25), )
if mibBuilder.loadTexts: wfIpIntfStatsTable.setStatus('mandatory')
wfIpIntfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpIntfStatsAddr"), (0, "Wellfleet-IP-MIB", "wfIpIntfStatsCircuit"))
if mibBuilder.loadTexts: wfIpIntfStatsEntry.setStatus('mandatory')
wfIpIntfStatsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsAddr.setStatus('mandatory')
wfIpIntfStatsCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsCircuit.setStatus('mandatory')
wfIpIntfStatsReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsReasmMaxSize.setStatus('mandatory')
wfIpIntfStatsMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsMaxInfo.setStatus('mandatory')
wfIpIntfStatsInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsInReceives.setStatus('mandatory')
wfIpIntfStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsInHdrErrors.setStatus('mandatory')
wfIpIntfStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsInAddrErrors.setStatus('mandatory')
wfIpIntfStatsForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsForwDatagrams.setStatus('mandatory')
wfIpIntfStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsInUnknownProtos.setStatus('mandatory')
wfIpIntfStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsInDiscards.setStatus('mandatory')
wfIpIntfStatsInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsInDelivers.setStatus('mandatory')
wfIpIntfStatsOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsOutRequests.setStatus('mandatory')
wfIpIntfStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsOutDiscards.setStatus('mandatory')
wfIpIntfStatsOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsOutNoRoutes.setStatus('mandatory')
wfIpIntfStatsReasmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsReasmTimeout.setStatus('mandatory')
wfIpIntfStatsReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsReasmReqds.setStatus('mandatory')
wfIpIntfStatsReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsReasmOKs.setStatus('mandatory')
wfIpIntfStatsReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsReasmFails.setStatus('mandatory')
wfIpIntfStatsFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsFragOKs.setStatus('mandatory')
wfIpIntfStatsFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsFragFails.setStatus('mandatory')
wfIpIntfStatsFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsFragCreates.setStatus('mandatory')
wfIpIntfStatsCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsCacheMisses.setStatus('mandatory')
wfIpIntfStatsCacheNetworks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsCacheNetworks.setStatus('mandatory')
wfIpIntfStatsCacheRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsCacheRemoves.setStatus('mandatory')
wfIpIntfStatsDropRxAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsDropRxAuths.setStatus('mandatory')
wfIpIntfStatsDropRxFormats = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsDropRxFormats.setStatus('mandatory')
wfIpIntfStatsDropRxLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsDropRxLevels.setStatus('mandatory')
wfIpIntfStatsDropRxNoIpsos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsDropRxNoIpsos.setStatus('mandatory')
wfIpIntfStatsDropTxAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsDropTxAuths.setStatus('mandatory')
wfIpIntfStatsDropTxLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsDropTxLevels.setStatus('mandatory')
wfIpIntfStatsDropTxNoIpsos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsDropTxNoIpsos.setStatus('mandatory')
wfIpIntfStatsDropTxNoIpsoRooms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsDropTxNoIpsoRooms.setStatus('mandatory')
wfIpIntfStatsRoutingDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsRoutingDiscards.setStatus('mandatory')
wfIpIntfStatsAtmArpAttemptedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsAtmArpAttemptedCalls.setStatus('mandatory')
wfIpIntfStatsAtmArpFailRetryCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsAtmArpFailRetryCalls.setStatus('mandatory')
wfIpIntfStatsAtmArpFailNoRetryCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsAtmArpFailNoRetryCalls.setStatus('mandatory')
wfIpIntfStatsAtmArpSuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsAtmArpSuccessfulCalls.setStatus('mandatory')
wfIpIntfStatsAtmArpAcceptedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsAtmArpAcceptedCalls.setStatus('mandatory')
wfIpIntfStatsAtmArpOpenSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsAtmArpOpenSvcs.setStatus('mandatory')
wfIpIntfStatsMcastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsMcastInPkts.setStatus('mandatory')
wfIpIntfStatsMcastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsMcastOutPkts.setStatus('mandatory')
wfIpIntfStatsMcastInDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsMcastInDataPkts.setStatus('mandatory')
wfIpIntfStatsControlPathInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsControlPathInPkts.setStatus('mandatory')
wfIpIntfStatsControlPathOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 25, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsControlPathOutPkts.setStatus('mandatory')
wfIpIntfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24), )
if mibBuilder.loadTexts: wfIpIntfCfgTable.setStatus('mandatory')
wfIpIntfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpIntfCfgAddr"), (0, "Wellfleet-IP-MIB", "wfIpIntfCfgCircuit"))
if mibBuilder.loadTexts: wfIpIntfCfgEntry.setStatus('mandatory')
wfIpIntfCfgCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgCreate.setStatus('mandatory')
wfIpIntfCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgEnable.setStatus('mandatory')
wfIpIntfCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfCfgState.setStatus('mandatory')
wfIpIntfCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfCfgAddr.setStatus('mandatory')
wfIpIntfCfgCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfCfgCircuit.setStatus('mandatory')
wfIpIntfCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMask.setStatus('mandatory')
wfIpIntfCfgCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgCost.setStatus('mandatory')
wfIpIntfCfgCfgBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgCfgBcastAddr.setStatus('mandatory')
wfIpIntfCfgBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfCfgBcastAddr.setStatus('mandatory')
wfIpIntfCfgCfgMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgCfgMacAddress.setStatus('mandatory')
wfIpIntfCfgMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfCfgMacAddress.setStatus('mandatory')
wfIpIntfCfgMTUDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMTUDiscovery.setStatus('mandatory')
wfIpIntfCfgAMR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgAMR.setStatus('mandatory')
wfIpIntfCfgASB = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgASB.setStatus('mandatory')
wfIpIntfCfgAddressResolutionType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("arp", 1), ("ddn", 3), ("pdn", 4), ("in-arp", 5), ("arp-in-arp", 6), ("none", 7), ("bfe-ddn", 8), ("probe", 9), ("arp-probe", 10), ("atm-arp", 11))).clone('arp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgAddressResolutionType.setStatus('mandatory')
wfIpIntfCfgProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgProxy.setStatus('mandatory')
wfIpIntfCfgHostCache = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 120, 180, 240, 300, 600, 900, 1200))).clone(namedValues=NamedValues(("cache-off", 1), ("cache-120", 120), ("cache-180", 180), ("cache-240", 240), ("cache-300", 300), ("cache-600", 600), ("cache-900", 900), ("cache-1200", 1200))).clone('cache-off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgHostCache.setStatus('mandatory')
wfIpIntfCfgUdpXsumOn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgUdpXsumOn.setStatus('mandatory')
wfIpIntfCfgTrEndStation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgTrEndStation.setStatus('mandatory')
wfIpIntfCfgSMDSGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgSMDSGroupAddress.setStatus('mandatory')
wfIpIntfCfgSMDSArpReqAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgSMDSArpReqAddress.setStatus('mandatory')
wfIpIntfCfgFRBcastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgFRBcastDlci.setStatus('mandatory')
wfIpIntfCfgFRMcast1Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgFRMcast1Dlci.setStatus('mandatory')
wfIpIntfCfgFRMcast2Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgFRMcast2Dlci.setStatus('mandatory')
wfIpIntfCfgRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgRedirect.setStatus('mandatory')
wfIpIntfCfgEnetArpEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("enet", 1), ("snap", 2), ("both", 3), ("probelsap", 4), ("probeenet", 5), ("probeboth", 6), ("arpenetprobelsap", 7), ("arpsnapprobelsap", 8), ("arpbothprobelsap", 9))).clone('enet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgEnetArpEncaps.setStatus('mandatory')
wfIpIntfCfgSlotMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 27), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgSlotMask.setStatus('mandatory')
wfIpIntfCfgEnableSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgEnableSecurity.setStatus('mandatory')
wfIpIntfCfgStripSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgStripSecurity.setStatus('mandatory')
wfIpIntfCfgRequireOutSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forwarded", 1), ("originated", 2), ("all", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgRequireOutSecurity.setStatus('mandatory')
wfIpIntfCfgRequireInSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgRequireInSecurity.setStatus('mandatory')
wfIpIntfCfgMinLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(171, 150, 90, 61))).clone(namedValues=NamedValues(("unclassified", 171), ("confidential", 150), ("secret", 90), ("topsecret", 61))).clone('unclassified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMinLevel.setStatus('mandatory')
wfIpIntfCfgMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(171, 150, 90, 61))).clone(namedValues=NamedValues(("unclassified", 171), ("confidential", 150), ("secret", 90), ("topsecret", 61))).clone('topsecret')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMaxLevel.setStatus('mandatory')
wfIpIntfCfgMustOutAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMustOutAuthority.setStatus('mandatory')
wfIpIntfCfgMayOutAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 35), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMayOutAuthority.setStatus('mandatory')
wfIpIntfCfgMustInAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 36), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMustInAuthority.setStatus('mandatory')
wfIpIntfCfgMayInAuthority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 37), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMayInAuthority.setStatus('mandatory')
wfIpIntfCfgImplicitLabelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgImplicitLabelEnabled.setStatus('mandatory')
wfIpIntfCfgImplicitAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 39), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgImplicitAuth.setStatus('mandatory')
wfIpIntfCfgImplicitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(171, 150, 90, 61))).clone(namedValues=NamedValues(("unclassified", 171), ("confidential", 150), ("secret", 90), ("topsecret", 61))).clone('unclassified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgImplicitLevel.setStatus('mandatory')
wfIpIntfCfgDefaultLabelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgDefaultLabelEnabled.setStatus('mandatory')
wfIpIntfCfgDefaultAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 42), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgDefaultAuth.setStatus('mandatory')
wfIpIntfCfgDefaultLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(171, 150, 90, 61))).clone(namedValues=NamedValues(("unclassified", 171), ("confidential", 150), ("secret", 90), ("topsecret", 61))).clone('unclassified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgDefaultLevel.setStatus('mandatory')
wfIpIntfCfgErrorLabelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgErrorLabelEnabled.setStatus('mandatory')
wfIpIntfCfgErrorAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 45), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgErrorAuth.setStatus('mandatory')
wfIpIntfCfgFwdCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 2147483647)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgFwdCacheSize.setStatus('mandatory')
wfIpIntfCfgUnnumAsocAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 47), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgUnnumAsocAddr.setStatus('mandatory')
wfIpIntfCfgUnnumAsocAlt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgUnnumAsocAlt.setStatus('mandatory')
wfIpIntfCfgAtmArpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("client", 1), ("server", 2), ("none", 3))).clone('client')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgAtmArpMode.setStatus('mandatory')
wfIpIntfCfgAtmArpSrvAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 50), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgAtmArpSrvAddress.setStatus('mandatory')
wfIpIntfCfgAtmArpSrvVcAgingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgAtmArpSrvVcAgingEnable.setStatus('mandatory')
wfIpIntfCfgAtmArpSrvRegInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(900, 1200))).clone(namedValues=NamedValues(("client-default", 900), ("server-default", 1200))).clone('client-default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgAtmArpSrvRegInterval.setStatus('mandatory')
wfIpIntfCfgAtmArpMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgAtmArpMisc.setStatus('mandatory')
wfIpIntfCfgAtmArpMisc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgAtmArpMisc2.setStatus('mandatory')
wfIpIntfCfgAtmArpSrvConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 1028, 4, 20, 36, 52, 260, 276, 292, 308, 516, 532, 548, 564, 772, 788, 804, 820, 12, 28, 44, 60, 268, 284, 300, 316, 524, 540, 556, 572, 780, 796, 812, 828))).clone(namedValues=NamedValues(("init", 1), ("wereserver", 2), ("noservercfg", 1028), ("closednotreg", 4), ("openingnotreg", 20), ("opennotregxxx", 36), ("openfailnotreg", 52), ("closedregingxxx", 260), ("openingregingxxx", 276), ("openreging", 292), ("openfailregingxxx", 308), ("closedreg", 516), ("openingreg", 532), ("openreg", 548), ("openfailreg", 564), ("closedregfail", 772), ("openingregfail", 788), ("openregfailxxx", 804), ("openfailregfail", 820), ("closednotregarp", 12), ("openingnotregarp", 28), ("opennotregarpxxx", 44), ("openfailnotregarp", 60), ("closedregingarpxxx", 268), ("openingregingarpxxx", 284), ("openregingarp", 300), ("openfailregingarpxxx", 316), ("closedregarp", 524), ("openingregarp", 540), ("openregarpxxx", 556), ("openfailregarp", 572), ("closedregfailarp", 780), ("openingregfailarp", 796), ("openregfailarpxxx", 812), ("openfailregfailarp", 828))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfCfgAtmArpSrvConnState.setStatus('mandatory')
wfIpIntfCfgTrEsArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ste", 1), ("are", 2))).clone('ste')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgTrEsArpType.setStatus('mandatory')
wfIpIntfCfgMprMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("translate", 2), ("replicate", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMprMode.setStatus('mandatory')
wfIpIntfCfgMprState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfCfgMprState.setStatus('mandatory')
wfIpIntfCfgIPSecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgIPSecEnable.setStatus('mandatory')
wfIpIntfCfgIPSecLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgIPSecLogLevel.setStatus('mandatory')
wfIpIntfCfgTosTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("rfc791-precedence", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgTosTemplate.setStatus('obsolete')
wfIpIntfCfgMsgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2031616, 65536, 131072, 262144, 524288, 1048576, 917504))).clone(namedValues=NamedValues(("all", 2031616), ("debug", 65536), ("info", 131072), ("warning", 262144), ("fault", 524288), ("trace", 1048576), ("infofaultwarning", 917504))).clone('infofaultwarning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMsgLevel.setStatus('mandatory')
wfIpIntfCfgMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgMtu.setStatus('mandatory')
wfIpIntfCfgDropIpMacBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 24, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpIntfCfgDropIpMacBroadcast.setStatus('mandatory')
wfIpIntfStatsIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26), )
if mibBuilder.loadTexts: wfIpIntfStatsIcmpTable.setStatus('mandatory')
wfIpIntfStatsIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpIntfStatsIcmpAddr"), (0, "Wellfleet-IP-MIB", "wfIpIntfStatsIcmpCircuit"))
if mibBuilder.loadTexts: wfIpIntfStatsIcmpEntry.setStatus('mandatory')
wfIpIntfStatsIcmpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpAddr.setStatus('mandatory')
wfIpIntfStatsIcmpCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpCircuit.setStatus('mandatory')
wfIpIntfStatsIcmpInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInMsgs.setStatus('mandatory')
wfIpIntfStatsIcmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInErrors.setStatus('mandatory')
wfIpIntfStatsIcmpInDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInDestUnreachs.setStatus('mandatory')
wfIpIntfStatsIcmpInTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInTimeExcds.setStatus('mandatory')
wfIpIntfStatsIcmpInParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInParmProbs.setStatus('mandatory')
wfIpIntfStatsIcmpInSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInSrcQuenchs.setStatus('mandatory')
wfIpIntfStatsIcmpInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInRedirects.setStatus('mandatory')
wfIpIntfStatsIcmpInEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInEchos.setStatus('mandatory')
wfIpIntfStatsIcmpInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInEchoReps.setStatus('mandatory')
wfIpIntfStatsIcmpInTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInTimestamps.setStatus('mandatory')
wfIpIntfStatsIcmpInTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInTimestampReps.setStatus('mandatory')
wfIpIntfStatsIcmpInAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInAddrMasks.setStatus('mandatory')
wfIpIntfStatsIcmpInAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInAddrMaskReps.setStatus('mandatory')
wfIpIntfStatsIcmpOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutMsgs.setStatus('mandatory')
wfIpIntfStatsIcmpOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutErrors.setStatus('mandatory')
wfIpIntfStatsIcmpOutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutDestUnreachs.setStatus('mandatory')
wfIpIntfStatsIcmpOutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutTimeExcds.setStatus('mandatory')
wfIpIntfStatsIcmpOutParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutParmProbs.setStatus('mandatory')
wfIpIntfStatsIcmpOutSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutSrcQuenchs.setStatus('mandatory')
wfIpIntfStatsIcmpOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutRedirects.setStatus('mandatory')
wfIpIntfStatsIcmpOutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutEchos.setStatus('mandatory')
wfIpIntfStatsIcmpOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutEchoReps.setStatus('mandatory')
wfIpIntfStatsIcmpOutTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutTimestamps.setStatus('mandatory')
wfIpIntfStatsIcmpOutTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutTimestampReps.setStatus('mandatory')
wfIpIntfStatsIcmpOutAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutAddrMasks.setStatus('mandatory')
wfIpIntfStatsIcmpOutAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutAddrMaskReps.setStatus('mandatory')
wfIpIntfStatsIcmpInAdminProhib = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInAdminProhib.setStatus('mandatory')
wfIpIntfStatsIcmpOutAdminProhib = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutAdminProhib.setStatus('mandatory')
wfIpIntfStatsIcmpInRdiscSolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInRdiscSolicit.setStatus('mandatory')
wfIpIntfStatsIcmpInRdiscAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpInRdiscAdvert.setStatus('mandatory')
wfIpIntfStatsIcmpOutRdiscAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 26, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpIntfStatsIcmpOutRdiscAdvert.setStatus('mandatory')
wfIpFilterRuleTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29), )
if mibBuilder.loadTexts: wfIpFilterRuleTable.setStatus('mandatory')
wfIpFilterRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpFilterRuleNumber"), (0, "Wellfleet-IP-MIB", "wfIpFilterRuleFragment"))
if mibBuilder.loadTexts: wfIpFilterRuleEntry.setStatus('mandatory')
wfIpFilterRuleCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterRuleCreate.setStatus('mandatory')
wfIpFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterRuleNumber.setStatus('mandatory')
wfIpFilterRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterRuleName.setStatus('mandatory')
wfIpFilterRuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 4), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterRuleDescription.setStatus('mandatory')
wfIpFilterRuleFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterRuleFragment.setStatus('mandatory')
wfIpFilterRuleNewTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterRuleNewTosValue.setStatus('mandatory')
wfIpFilterRuleNewTosValueMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterRuleNewTosValueMask.setStatus('mandatory')
wfIpFilterRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("accept", 2), ("forwardtohost", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterRuleAction.setStatus('mandatory')
wfIpFilterRuleClassifyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(99, 99), )).clone(99)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterRuleClassifyAction.setStatus('mandatory')
wfIpFilterRuleDropPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 29, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1), ValueRangeConstraint(99, 99), )).clone(99)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterRuleDropPreference.setStatus('mandatory')
wfIpFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30), )
if mibBuilder.loadTexts: wfIpFilterConfigTable.setStatus('mandatory')
wfIpFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpFilterConfigInterface"), (0, "Wellfleet-IP-MIB", "wfIpFilterConfigCircuit"), (0, "Wellfleet-IP-MIB", "wfIpFilterConfigIndex"))
if mibBuilder.loadTexts: wfIpFilterConfigEntry.setStatus('mandatory')
wfIpFilterConfigCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterConfigCreate.setStatus('mandatory')
wfIpFilterConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterConfigEnable.setStatus('mandatory')
wfIpFilterConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterConfigStatus.setStatus('mandatory')
wfIpFilterConfigRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterConfigRuleNumber.setStatus('mandatory')
wfIpFilterConfigRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterConfigRulePrecedence.setStatus('mandatory')
wfIpFilterConfigFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2))).clone('in')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterConfigFilterType.setStatus('mandatory')
wfIpFilterConfigLogFilterInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterConfigLogFilterInfo.setStatus('mandatory')
wfIpFilterConfigReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterConfigReserved.setStatus('mandatory')
wfIpFilterConfigInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterConfigInterface.setStatus('mandatory')
wfIpFilterConfigCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterConfigCircuit.setStatus('mandatory')
wfIpFilterConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 30, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterConfigIndex.setStatus('mandatory')
wfIpFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 31), )
if mibBuilder.loadTexts: wfIpFilterStatsTable.setStatus('mandatory')
wfIpFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 31, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpFilterStatsInterface"), (0, "Wellfleet-IP-MIB", "wfIpFilterStatsCircuit"), (0, "Wellfleet-IP-MIB", "wfIpFilterStatsIndex"))
if mibBuilder.loadTexts: wfIpFilterStatsEntry.setStatus('mandatory')
wfIpFilterStatsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 31, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterStatsCounter.setStatus('mandatory')
wfIpFilterStatsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 31, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterStatsInterface.setStatus('mandatory')
wfIpFilterStatsCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 31, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterStatsCircuit.setStatus('mandatory')
wfIpFilterStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 31, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterStatsIndex.setStatus('mandatory')
wfIpTosTemplateCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32), )
if mibBuilder.loadTexts: wfIpTosTemplateCfgTable.setStatus('obsolete')
wfIpTosTemplateCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpTosTemplateCfgIndex"))
if mibBuilder.loadTexts: wfIpTosTemplateCfgEntry.setStatus('obsolete')
wfIpTosTemplateCfgCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTosTemplateCfgCreate.setStatus('obsolete')
wfIpTosTemplateCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateCfgIndex.setStatus('obsolete')
wfIpTosTemplateCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTosTemplateCfgName.setStatus('obsolete')
wfIpTosTemplateCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("notconfigurable", 3))).clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateCfgStatus.setStatus('obsolete')
wfIpTosTemplateCfgRxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTosTemplateCfgRxEnable.setStatus('obsolete')
wfIpTosTemplateCfgRxMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTosTemplateCfgRxMapping.setStatus('obsolete')
wfIpTosTemplateCfgTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTosTemplateCfgTxEnable.setStatus('obsolete')
wfIpTosTemplateCfgTxMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 32, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpTosTemplateCfgTxMapping.setStatus('obsolete')
wfIpTosTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33), )
if mibBuilder.loadTexts: wfIpTosTemplateTable.setStatus('obsolete')
wfIpTosTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpTosTemplateIndex"))
if mibBuilder.loadTexts: wfIpTosTemplateEntry.setStatus('obsolete')
wfIpTosTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateIndex.setStatus('obsolete')
wfIpTosTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateName.setStatus('obsolete')
wfIpTosTemplateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("builtin", 3))).clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateStatus.setStatus('obsolete')
wfIpTosTemplateRxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateRxEnable.setStatus('obsolete')
wfIpTosTemplateRxMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateRxMapping.setStatus('obsolete')
wfIpTosTemplateTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateTxEnable.setStatus('obsolete')
wfIpTosTemplateTxMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 33, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpTosTemplateTxMapping.setStatus('obsolete')
wfIpGreTnlTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27), )
if mibBuilder.loadTexts: wfIpGreTnlTable.setStatus('mandatory')
wfIpGreTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpGreTnlNum"))
if mibBuilder.loadTexts: wfIpGreTnlEntry.setStatus('mandatory')
wfIpGreTnlCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreTnlCreate.setStatus('mandatory')
wfIpGreTnlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreTnlEnable.setStatus('mandatory')
wfIpGreTnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpGreTnlState.setStatus('mandatory')
wfIpGreTnlNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpGreTnlNum.setStatus('mandatory')
wfIpGreTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreTnlName.setStatus('mandatory')
wfIpGreTnlCctNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1, 6), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreTnlCctNum.setStatus('mandatory')
wfIpGreTnlLocIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreTnlLocIpAddr.setStatus('mandatory')
wfIpGreTnlMinMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 27, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreTnlMinMtu.setStatus('mandatory')
wfIpGreConnTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28), )
if mibBuilder.loadTexts: wfIpGreConnTable.setStatus('mandatory')
wfIpGreConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpGreConnTnlNum"), (0, "Wellfleet-IP-MIB", "wfIpGreConnNum"))
if mibBuilder.loadTexts: wfIpGreConnEntry.setStatus('mandatory')
wfIpGreConnCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreConnCreate.setStatus('mandatory')
wfIpGreConnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreConnEnable.setStatus('mandatory')
wfIpGreConnTnlNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpGreConnTnlNum.setStatus('mandatory')
wfIpGreConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpGreConnNum.setStatus('mandatory')
wfIpGreConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreConnName.setStatus('mandatory')
wfIpGreConnRemIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreConnRemIpAddr.setStatus('mandatory')
wfIpGreConnProtoMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 28, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpGreConnProtoMap.setStatus('mandatory')
wfIpBaseDbg = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 34))
wfIpBaseDbgCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseDbgCreate.setStatus('mandatory')
wfIpBaseDbgOptions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 34, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseDbgOptions.setStatus('mandatory')
wfIpBaseDbgAddress = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 34, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseDbgAddress.setStatus('mandatory')
wfIpBaseDbgAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 34, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseDbgAddressMask.setStatus('mandatory')
wfIpBaseDbgMisc = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 34, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpBaseDbgMisc.setStatus('mandatory')
wfIpFilterTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 35), )
if mibBuilder.loadTexts: wfIpFilterTemplateTable.setStatus('mandatory')
wfIpFilterTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 35, 1), ).setIndexNames((0, "Wellfleet-IP-MIB", "wfIpFilterTemplateRuleNumber"), (0, "Wellfleet-IP-MIB", "wfIpFilterTemplateFragment"))
if mibBuilder.loadTexts: wfIpFilterTemplateEntry.setStatus('mandatory')
wfIpFilterTemplateCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterTemplateCreate.setStatus('mandatory')
wfIpFilterTemplateRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 35, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterTemplateRuleNumber.setStatus('mandatory')
wfIpFilterTemplateFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 35, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpFilterTemplateFragment.setStatus('mandatory')
wfIpFilterTemplateDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 35, 1, 4), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterTemplateDefinition.setStatus('mandatory')
wfIpFilterTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 35, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpFilterTemplateName.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-IP-MIB", wfUdpMprMappingEntry=wfUdpMprMappingEntry, wfIpSrIpAddressRt=wfIpSrIpAddressRt, wfIpNetToMediaEntry=wfIpNetToMediaEntry, wfRipIntfTTL=wfRipIntfTTL, wfIpInterfaceCfgMacAddress=wfIpInterfaceCfgMacAddress, wfRipMaximumPath=wfRipMaximumPath, wfRdiscInterfacePref=wfRdiscInterfacePref, wfIpTrafficFilterDSOopCounter=wfIpTrafficFilterDSOopCounter, wfIpInterfaceMayOutAuthority=wfIpInterfaceMayOutAuthority, wfIpIntfStatsMcastInPkts=wfIpIntfStatsMcastInPkts, wfIpIntfCfgImplicitAuth=wfIpIntfCfgImplicitAuth, wfIpInterfaceICMPInAdminProhib=wfIpInterfaceICMPInAdminProhib, wfIpInterfaceRequireInSecurity=wfIpInterfaceRequireInSecurity, wfIpIntfCfgBcastAddr=wfIpIntfCfgBcastAddr, wfIpInterfaceMacAddress=wfIpInterfaceMacAddress, wfIpIntfStatsIcmpCircuit=wfIpIntfStatsIcmpCircuit, wfIpIntfCfgProxy=wfIpIntfCfgProxy, wfIpInterfaceIcmpOutAddrMaskReps=wfIpInterfaceIcmpOutAddrMaskReps, wfIpTosTemplateCfgRxMapping=wfIpTosTemplateCfgRxMapping, wfIpTrafficFilterCircuit=wfIpTrafficFilterCircuit, wfIpBaseHostEntryTable=wfIpBaseHostEntryTable, wfRipIntfAuthType=wfRipIntfAuthType, wfIpTosTemplateRxMapping=wfIpTosTemplateRxMapping, wfRipIntfEntry=wfRipIntfEntry, wfIpIntfCfgAtmArpMode=wfIpIntfCfgAtmArpMode, wfIpInterfaceFragFails=wfIpInterfaceFragFails, wfIpIntfStatsIcmpTable=wfIpIntfStatsIcmpTable, wfIpInternHtInHdrErrors=wfIpInternHtInHdrErrors, wfIpInterfaceRequireOutSecurity=wfIpInterfaceRequireOutSecurity, wfIpAccCtrlNetworkEnable=wfIpAccCtrlNetworkEnable, wfIpInterfaceImplicitLevel=wfIpInterfaceImplicitLevel, wfIpIntfStatsIcmpInParmProbs=wfIpIntfStatsIcmpInParmProbs, wfIpInterfaceCost=wfIpInterfaceCost, wfRipInterfaceIndex=wfRipInterfaceIndex, wfIpTosTemplateCfgIndex=wfIpTosTemplateCfgIndex, wfIpAddrEntry=wfIpAddrEntry, wfIpIntfCfgAtmArpMisc2=wfIpIntfCfgAtmArpMisc2, wfIpAccCtrlFilterIndex=wfIpAccCtrlFilterIndex, wfIpIntfStatsIcmpInRdiscAdvert=wfIpIntfStatsIcmpInRdiscAdvert, wfIpBaseRouteDest=wfIpBaseRouteDest, wfIpIntfCfgCfgBcastAddr=wfIpIntfCfgCfgBcastAddr, wfIpIntfStatsIcmpOutParmProbs=wfIpIntfStatsIcmpOutParmProbs, wfUdpMprStartPort=wfUdpMprStartPort, wfUdpMprMapInPkts=wfUdpMprMapInPkts, wfRdiscInterfaceLifetime=wfRdiscInterfaceLifetime, wfIpFilterStatsIndex=wfIpFilterStatsIndex, wfUdpInDatagrams=wfUdpInDatagrams, wfIpInterfaceDropTxLevels=wfIpInterfaceDropTxLevels, wfIpBaseRtblP1=wfIpBaseRtblP1, wfIpIntfCfgAtmArpSrvRegInterval=wfIpIntfCfgAtmArpSrvRegInterval, wfIpIntfCfgCost=wfIpIntfCfgCost, wfIpTrafficFilterStatus=wfIpTrafficFilterStatus, wfIpBaseRouteAge=wfIpBaseRouteAge, wfIpNetToMediaNetAddress=wfIpNetToMediaNetAddress, wfIpAccCtrlUserHostId=wfIpAccCtrlUserHostId, wfIpInterfaceICMPOutAdminProhib=wfIpInterfaceICMPOutAdminProhib, wfIpTrafficFilterDSOopBytes=wfIpTrafficFilterDSOopBytes, wfIpFilterStatsCounter=wfIpFilterStatsCounter, wfIpGreTnlEnable=wfIpGreTnlEnable, wfIpBaseState=wfIpBaseState, wfIpIntfCfgMayOutAuthority=wfIpIntfCfgMayOutAuthority, wfIpForwardMetric2=wfIpForwardMetric2, wfIpIntfCfgFRMcast2Dlci=wfIpIntfCfgFRMcast2Dlci, wfIpBaseDbgCreate=wfIpBaseDbgCreate, wfIpTosTemplateStatus=wfIpTosTemplateStatus, wfIpBaseMibTables=wfIpBaseMibTables, wfIpBaseRtblP2=wfIpBaseRtblP2, wfIpAdjHostIpAddress=wfIpAdjHostIpAddress, wfIpForwardAge=wfIpForwardAge, wfIpSrCost=wfIpSrCost, wfIpAccCtrlFilterPrecedence=wfIpAccCtrlFilterPrecedence, wfIpIntfStatsAtmArpFailRetryCalls=wfIpIntfStatsAtmArpFailRetryCalls, wfIpInterfaceFwdCacheSize=wfIpInterfaceFwdCacheSize, wfRipIntfState=wfRipIntfState, wfRipInterfaceDefaultRouteListen=wfRipInterfaceDefaultRouteListen, wfIpIntfCfgEnable=wfIpIntfCfgEnable, wfIpAdjacentHostTable=wfIpAdjacentHostTable, wfIpFilterConfigEntry=wfIpFilterConfigEntry, wfIpInterfaceCacheNetworks=wfIpInterfaceCacheNetworks, wfIpBaseRouteMetric5=wfIpBaseRouteMetric5, wfRdiscInterfaceBcast=wfRdiscInterfaceBcast, wfRdiscIntfTable=wfRdiscIntfTable, wfRdiscInterfaceState=wfRdiscInterfaceState, wfIpFilterConfigIndex=wfIpFilterConfigIndex, wfIpTosTemplateCfgTxEnable=wfIpTosTemplateCfgTxEnable, wfIpFilterRuleTable=wfIpFilterRuleTable, wfIpIntfCfgMustOutAuthority=wfIpIntfCfgMustOutAuthority, wfIpSrValid=wfIpSrValid, wfIpAdjHostEnable=wfIpAdjHostEnable, wfIpAccCtrlUserHostHost=wfIpAccCtrlUserHostHost, wfIpIntfStatsControlPathInPkts=wfIpIntfStatsControlPathInPkts, wfIpBaseRipDiameter=wfIpBaseRipDiameter, wfIpInterfaceMcastInPkts=wfIpInterfaceMcastInPkts, wfIpInterfaceAtmArpAcceptedCalls=wfIpInterfaceAtmArpAcceptedCalls, wfIpInterfaceIcmpInAddrMaskReps=wfIpInterfaceIcmpInAddrMaskReps, wfIpInterfaceCacheMisses=wfIpInterfaceCacheMisses, wfIpInterfaceSMDSArpReqAddress=wfIpInterfaceSMDSArpReqAddress, wfIpBaseDefaultTTL=wfIpBaseDefaultTTL, wfIpFilterStatsCircuit=wfIpFilterStatsCircuit, wfRipIntfSupply=wfRipIntfSupply, wfRipIntfCompSwitch=wfRipIntfCompSwitch, wfIpIntfStatsDropTxNoIpsoRooms=wfIpIntfStatsDropTxNoIpsoRooms, wfIpGreConnRemIpAddr=wfIpGreConnRemIpAddr, wfIpIntfCfgMprState=wfIpIntfCfgMprState, wfIpIntfCfgDropIpMacBroadcast=wfIpIntfCfgDropIpMacBroadcast, wfIpIntfStatsIcmpInRedirects=wfIpIntfStatsIcmpInRedirects, wfIpIntfStatsOutRequests=wfIpIntfStatsOutRequests, wfIpInterfaceMaxLevel=wfIpInterfaceMaxLevel, wfIpBaseRouteInfo=wfIpBaseRouteInfo, wfUdpLocalPort=wfUdpLocalPort, wfIpAccCtrlNetworkNetwork=wfIpAccCtrlNetworkNetwork, wfUdpMprMapCreate=wfUdpMprMapCreate, wfIpIntfCfgTable=wfIpIntfCfgTable, wfIpGreConnProtoMap=wfIpGreConnProtoMap, wfIpInterfaceASB=wfIpInterfaceASB, wfIpInterfaceUdpXsumOn=wfIpInterfaceUdpXsumOn, wfIpBaseMaxPolicyRules=wfIpBaseMaxPolicyRules, wfIpInterfaceFRMcast2Dlci=wfIpInterfaceFRMcast2Dlci, wfIpInterfaceRoutingDiscards=wfIpInterfaceRoutingDiscards, wfIpAccCtrlUserHostEntry=wfIpAccCtrlUserHostEntry, wfIpIntfCfgRedirect=wfIpIntfCfgRedirect, wfIpInterfaceMayInAuthority=wfIpInterfaceMayInAuthority, wfIpInterfaceIcmpOutTimestampReps=wfIpInterfaceIcmpOutTimestampReps, wfIpInterfaceIcmpInTimestamps=wfIpInterfaceIcmpInTimestamps, wfUdpMprMapDisableDrops=wfUdpMprMapDisableDrops, wfIpNetToMediaIfIndex=wfIpNetToMediaIfIndex, wfIpIntfCfgMprMode=wfIpIntfCfgMprMode, wfIpIntfCfgErrorLabelEnabled=wfIpIntfCfgErrorLabelEnabled, wfUdpEntry=wfUdpEntry, wfIpInterfaceAddr=wfIpInterfaceAddr, wfIpIntfCfgDefaultAuth=wfIpIntfCfgDefaultAuth, wfIpInterfaceDefaultAuth=wfIpInterfaceDefaultAuth, wfIpInterfaceCircuit=wfIpInterfaceCircuit, wfIpAccCtrlUserHostTable=wfIpAccCtrlUserHostTable, wfIpIntfStatsIcmpInAddrMaskReps=wfIpIntfStatsIcmpInAddrMaskReps, wfIpInterfaceOutDiscards=wfIpInterfaceOutDiscards, wfUdpMprMapOutPkts=wfUdpMprMapOutPkts, wfIpIntfCfgMask=wfIpIntfCfgMask, wfIpIntfCfgMinLevel=wfIpIntfCfgMinLevel, wfIpForwardProto=wfIpForwardProto, wfIpInternHtInDelivers=wfIpInternHtInDelivers, wfIpInterfaceIcmpInTimeExcds=wfIpInterfaceIcmpInTimeExcds, wfIpInterfaceSMDSGroupAddress=wfIpInterfaceSMDSGroupAddress, wfIpForwardMetric1=wfIpForwardMetric1, wfIpIntfCfgCircuit=wfIpIntfCfgCircuit, wfIpInternHtReasmFails=wfIpInternHtReasmFails, wfIpIntfCfgImplicitLabelEnabled=wfIpIntfCfgImplicitLabelEnabled, wfIpIntfCfgFwdCacheSize=wfIpIntfCfgFwdCacheSize, wfIpInterfaceFragCreates=wfIpInterfaceFragCreates, wfIpInterfaceIcmpOutTimeExcds=wfIpInterfaceIcmpOutTimeExcds, wfIpFilterTemplateFragment=wfIpFilterTemplateFragment, wfIpIntfCfgMacAddress=wfIpIntfCfgMacAddress, wfIpFilterConfigRulePrecedence=wfIpFilterConfigRulePrecedence, wfIpInterfaceDropRxFormats=wfIpInterfaceDropRxFormats, wfIpFilterConfigTable=wfIpFilterConfigTable, wfIpTrafficFilterName=wfIpTrafficFilterName, wfIpBaseHostEntry=wfIpBaseHostEntry, wfIpInterfaceAtmArpServerVcAgingEnable=wfIpInterfaceAtmArpServerVcAgingEnable, wfIpInterfaceOutNoRoutes=wfIpInterfaceOutNoRoutes, wfIpIntfCfgAtmArpMisc=wfIpIntfCfgAtmArpMisc, wfIpAccCtrlNetworkId=wfIpAccCtrlNetworkId, wfRipInterfaceCreate=wfRipInterfaceCreate, wfIpIntfStatsIcmpOutRedirects=wfIpIntfStatsIcmpOutRedirects, wfIpIntfCfgASB=wfIpIntfCfgASB, wfIpIntfCfgDefaultLabelEnabled=wfIpIntfCfgDefaultLabelEnabled, wfIpIntfStatsIcmpOutEchoReps=wfIpIntfStatsIcmpOutEchoReps, wfIpIntfStatsDropRxLevels=wfIpIntfStatsDropRxLevels, wfIpInterfaceTunnelInfo=wfIpInterfaceTunnelInfo, wfUdpMprStatisticsEnable=wfUdpMprStatisticsEnable, wfIpInterfaceCacheRemoves=wfIpInterfaceCacheRemoves, wfIpIntfCfgIPSecLogLevel=wfIpIntfCfgIPSecLogLevel, wfIpIntfStatsAtmArpOpenSvcs=wfIpIntfStatsAtmArpOpenSvcs, wfIpInterfaceAMR=wfIpInterfaceAMR, wfIpTrafficFilterCreate=wfIpTrafficFilterCreate, wfRipInterfaceTable=wfRipInterfaceTable, wfIpIntfStatsInDiscards=wfIpIntfStatsInDiscards, wfRipIntfCreate=wfRipIntfCreate, wfRipIntfDefaultRouteCost=wfRipIntfDefaultRouteCost, wfUdpMprCreate=wfUdpMprCreate, wfIpTrafficFilterDSPrecedence=wfIpTrafficFilterDSPrecedence, wfIpForwardNextHopAS=wfIpForwardNextHopAS, wfIpGreConnEnable=wfIpGreConnEnable, wfIpTrafficFilterPrecedence=wfIpTrafficFilterPrecedence, wfIpBaseDefaultOverSubnetEnable=wfIpBaseDefaultOverSubnetEnable, wfIpInterfaceIcmpInSrcQuenchs=wfIpInterfaceIcmpInSrcQuenchs, wfIpInterfaceMustOutAuthority=wfIpInterfaceMustOutAuthority, wfUdpTable=wfUdpTable, wfIpInterfaceUnnumAssocAlt=wfIpInterfaceUnnumAssocAlt, wfIpIntfStatsDropTxLevels=wfIpIntfStatsDropTxLevels, wfRipIntfDefaultRouteSupply=wfRipIntfDefaultRouteSupply, wfIpBaseForwarding=wfIpBaseForwarding, wfIpForwardDest=wfIpForwardDest, wfIpAdjHostTypeOfNumber=wfIpAdjHostTypeOfNumber, wfIpAccCtrlFilterNetwork=wfIpAccCtrlFilterNetwork, wfIpInterfaceAtmArpFailRetryCalls=wfIpInterfaceAtmArpFailRetryCalls, wfIpInterfaceEntry=wfIpInterfaceEntry, wfIpBaseCreate=wfIpBaseCreate, wfIpTosTemplateEntry=wfIpTosTemplateEntry, wfIpAdEntAddr=wfIpAdEntAddr, wfIpIntfCfgEnableSecurity=wfIpIntfCfgEnableSecurity, wfIpBaseHosts=wfIpBaseHosts, wfIpIntfStatsForwDatagrams=wfIpIntfStatsForwDatagrams, wfIpBaseIcmpErrorLimit=wfIpBaseIcmpErrorLimit, wfIpAddrTable=wfIpAddrTable, wfIpInterfaceIcmpOutEchoReps=wfIpInterfaceIcmpOutEchoReps, wfIpInterfaceEnableSecurity=wfIpInterfaceEnableSecurity, wfIpIntfStatsAtmArpSuccessfulCalls=wfIpIntfStatsAtmArpSuccessfulCalls, wfIpIntfCfgEnetArpEncaps=wfIpIntfCfgEnetArpEncaps, wfIpIntfStatsIcmpInTimestamps=wfIpIntfStatsIcmpInTimestamps, wfRipInterfaceState=wfRipInterfaceState, wfIpTrafficFilterEntry=wfIpTrafficFilterEntry, wfIpFilterStatsTable=wfIpFilterStatsTable, wfIpInterfaceFragOKs=wfIpInterfaceFragOKs, wfIpIntfStatsReasmOKs=wfIpIntfStatsReasmOKs, wfIpTrafficFilterReserved=wfIpTrafficFilterReserved, wfIpBaseRouteType=wfIpBaseRouteType, wfUdpMprEnable=wfUdpMprEnable, wfIpFilterRuleName=wfIpFilterRuleName, wfIpBaseNetToMediaType=wfIpBaseNetToMediaType, wfIpFilterConfigReserved=wfIpFilterConfigReserved, wfIpFilterTemplateDefinition=wfIpFilterTemplateDefinition, wfIpInterfaceIcmpOutAddrMasks=wfIpInterfaceIcmpOutAddrMasks, wfIpIntfStatsOutNoRoutes=wfIpIntfStatsOutNoRoutes, wfIpIntfStatsCircuit=wfIpIntfStatsCircuit, wfIpBaseArpBufLimitPrcnt=wfIpBaseArpBufLimitPrcnt, wfIpInterfaceIcmpInRdiscAdvert=wfIpInterfaceIcmpInRdiscAdvert, wfIpInterfaceAtmArpMisc=wfIpInterfaceAtmArpMisc, wfIpBaseRtbBalanceInterval=wfIpBaseRtbBalanceInterval, wfIpAccCtrlFilterEntry=wfIpAccCtrlFilterEntry, wfIpIntfCfgState=wfIpIntfCfgState, wfIpIntfStatsReasmMaxSize=wfIpIntfStatsReasmMaxSize, wfIpBaseHostOnlyRip=wfIpBaseHostOnlyRip, wfRipIntfTriggeredUpdates=wfRipIntfTriggeredUpdates, wfIpIntfCfgDefaultLevel=wfIpIntfCfgDefaultLevel, wfIpIntfCfgTosTemplate=wfIpIntfCfgTosTemplate, wfIpFilterConfigEnable=wfIpFilterConfigEnable, wfIpInterfaceImplicitLabelEnabled=wfIpInterfaceImplicitLabelEnabled, wfIpInterfaceReasmReqds=wfIpInterfaceReasmReqds, wfIpBaseRouteIfIndex=wfIpBaseRouteIfIndex, wfIpIntfCfgAMR=wfIpIntfCfgAMR, wfIpIntfStatsReasmFails=wfIpIntfStatsReasmFails, wfIpInterfaceIcmpOutDestUnreachs=wfIpInterfaceIcmpOutDestUnreachs, wfIpFilterConfigCreate=wfIpFilterConfigCreate, wfRipIntfCct=wfRipIntfCct, wfIpBaseIbgpEcmp=wfIpBaseIbgpEcmp, wfIpInterfaceDropRxNoIpsos=wfIpInterfaceDropRxNoIpsos, wfIpIntfStatsDropRxAuths=wfIpIntfStatsDropRxAuths, wfIpFilterRuleClassifyAction=wfIpFilterRuleClassifyAction, wfIpIntfStatsIcmpAddr=wfIpIntfStatsIcmpAddr, wfIpSrCreate=wfIpSrCreate, wfIpInterfaceIcmpInEchos=wfIpInterfaceIcmpInEchos, wfIpTrafficFilterDSBytes=wfIpTrafficFilterDSBytes, wfIpFilterRuleEntry=wfIpFilterRuleEntry, wfIpFilterConfigInterface=wfIpFilterConfigInterface)
mibBuilder.exportSymbols("Wellfleet-IP-MIB", wfIpInterfaceIcmpInParmProbs=wfIpInterfaceIcmpInParmProbs, wfIpBaseRtEntry=wfIpBaseRtEntry, wfIpIntfStatsIcmpOutRdiscAdvert=wfIpIntfStatsIcmpOutRdiscAdvert, wfIpInterfaceMaxInfo=wfIpInterfaceMaxInfo, wfIpInterfaceSlotMask=wfIpInterfaceSlotMask, wfIpInterfaceIcmpInRedirects=wfIpInterfaceIcmpInRedirects, wfRipIntfPoisonedReversed=wfRipIntfPoisonedReversed, wfIpInterfaceImplicitAuth=wfIpInterfaceImplicitAuth, wfIpBaseDbgOptions=wfIpBaseDbgOptions, wfIpIntfCfgRequireOutSecurity=wfIpIntfCfgRequireOutSecurity, wfIpIntfCfgTrEsArpType=wfIpIntfCfgTrEsArpType, wfIpSrPreference=wfIpSrPreference, wfIpIntfStatsTable=wfIpIntfStatsTable, wfIpInterfaceErrorAuth=wfIpInterfaceErrorAuth, wfUdpMprDisableDrops=wfUdpMprDisableDrops, wfIpInterfaceMcastOutPkts=wfIpInterfaceMcastOutPkts, wfIpIntfStatsInReceives=wfIpIntfStatsInReceives, wfIpInterfaceIcmpInRdiscSolicit=wfIpInterfaceIcmpInRdiscSolicit, wfIpBaseEnable=wfIpBaseEnable, wfIpTrafficFilterType=wfIpTrafficFilterType, wfIpInterfaceIcmpInMsgs=wfIpInterfaceIcmpInMsgs, wfIpAccCtrlNetworkTable=wfIpAccCtrlNetworkTable, wfIpIntfCfgUnnumAsocAlt=wfIpIntfCfgUnnumAsocAlt, wfIpIntfStatsIcmpOutTimestampReps=wfIpIntfStatsIcmpOutTimestampReps, wfIpAdjHostIntfMask=wfIpAdjHostIntfMask, wfIpIntfCfgSMDSArpReqAddress=wfIpIntfCfgSMDSArpReqAddress, wfUdpMprMapMcastAddr=wfUdpMprMapMcastAddr, wfIpFilterRuleDropPreference=wfIpFilterRuleDropPreference, wfIpInterfaceDropTxNoIpsos=wfIpInterfaceDropTxNoIpsos, wfIpIntfStatsMcastOutPkts=wfIpIntfStatsMcastOutPkts, wfIpInterfaceIcmpOutSrcQuenchs=wfIpInterfaceIcmpOutSrcQuenchs, wfIpFilterRuleNumber=wfIpFilterRuleNumber, wfIpInterfaceAtmArpOpenSvcs=wfIpInterfaceAtmArpOpenSvcs, wfIpBaseEstimatedHosts=wfIpBaseEstimatedHosts, wfIpInterfaceOutRequests=wfIpInterfaceOutRequests, wfIpInternHtReceives=wfIpInternHtReceives, wfIpIntfCfgFRBcastDlci=wfIpIntfCfgFRBcastDlci, wfIpIntfStatsIcmpOutAddrMasks=wfIpIntfStatsIcmpOutAddrMasks, wfIpGreTnlCctNum=wfIpGreTnlCctNum, wfIpIntfCfgErrorAuth=wfIpIntfCfgErrorAuth, wfIpTosTemplateRxEnable=wfIpTosTemplateRxEnable, wfIpAdjHostIntf=wfIpAdjHostIntf, wfRdiscInterfaceEnable=wfRdiscInterfaceEnable, wfRipInterfaceSupply=wfRipInterfaceSupply, wfIpIntfStatsIcmpOutMsgs=wfIpIntfStatsIcmpOutMsgs, wfIpInterfaceCreate=wfIpInterfaceCreate, wfIpInterfaceInAddrErrors=wfIpInterfaceInAddrErrors, wfIpIntfCfgIPSecEnable=wfIpIntfCfgIPSecEnable, wfRdiscInterfaceMulticastAdvt=wfRdiscInterfaceMulticastAdvt, wfIpBaseNetToMediaNetAddress=wfIpBaseNetToMediaNetAddress, wfIpSrIpAddress=wfIpSrIpAddress, wfIpForwardInfo=wfIpForwardInfo, wfIpTrafficFilterEnable=wfIpTrafficFilterEnable, wfIpBaseBlockSRR=wfIpBaseBlockSRR, wfIpIntfStatsIcmpInSrcQuenchs=wfIpIntfStatsIcmpInSrcQuenchs, wfIpIntfStatsFragFails=wfIpIntfStatsFragFails, wfIpBaseRouteMask=wfIpBaseRouteMask, wfRdiscInterfaceDynamicPref=wfRdiscInterfaceDynamicPref, wfIpInterfaceInDiscards=wfIpInterfaceInDiscards, wfIpTosTemplateName=wfIpTosTemplateName, wfIpInterfaceAtmArpServerConnState=wfIpInterfaceAtmArpServerConnState, wfIpAccCtrlFilterServiceMask=wfIpAccCtrlFilterServiceMask, wfIpFilterConfigLogFilterInfo=wfIpFilterConfigLogFilterInfo, wfIpBaseRouteMetric4=wfIpBaseRouteMetric4, wfIpFilterTemplateName=wfIpFilterTemplateName, wfIpBaseZeroSubnetEnable=wfIpBaseZeroSubnetEnable, wfIpAdjHostEncaps=wfIpAdjHostEncaps, wfIpInterfaceForwDatagrams=wfIpInterfaceForwDatagrams, wfIpForwardMetric5=wfIpForwardMetric5, wfIpIntfStatsReasmReqds=wfIpIntfStatsReasmReqds, wfIpFilterTemplateEntry=wfIpFilterTemplateEntry, wfIpInternHtIpAddress=wfIpInternHtIpAddress, wfIpIntfCfgMTUDiscovery=wfIpIntfCfgMTUDiscovery, wfIpInterfaceMask=wfIpInterfaceMask, wfIpGreConnCreate=wfIpGreConnCreate, wfIpIntfStatsAtmArpFailNoRetryCalls=wfIpIntfStatsAtmArpFailNoRetryCalls, wfIpIntfCfgAddr=wfIpIntfCfgAddr, wfIpInterfaceAtmArpServerAddress=wfIpInterfaceAtmArpServerAddress, wfIpTosTemplateCfgTable=wfIpTosTemplateCfgTable, wfIpAdjHostSubaddr=wfIpAdjHostSubaddr, wfIpIntfCfgCfgMacAddress=wfIpIntfCfgCfgMacAddress, wfIpGreTnlState=wfIpGreTnlState, wfUdpMprGenPkts=wfUdpMprGenPkts, wfIpIntfStatsFragOKs=wfIpIntfStatsFragOKs, wfIpTosTemplateCfgName=wfIpTosTemplateCfgName, wfIpTrafficFilterInterface=wfIpTrafficFilterInterface, wfIpNetToMediaType=wfIpNetToMediaType, wfRdiscInterfaceCreate=wfRdiscInterfaceCreate, wfRdiscInterfaceMinIntrvl=wfRdiscInterfaceMinIntrvl, wfIpSrNextHopMask=wfIpSrNextHopMask, wfIpForwardNextHop=wfIpForwardNextHop, wfIpNetToMediaPhysAddress=wfIpNetToMediaPhysAddress, wfIpIntfStatsIcmpInTimeExcds=wfIpIntfStatsIcmpInTimeExcds, wfRipIntfSVCBroadcast=wfRipIntfSVCBroadcast, wfRipIntfTimeoutTimer=wfRipIntfTimeoutTimer, wfIpBaseExtendedTrafficFilterSupport=wfIpBaseExtendedTrafficFilterSupport, wfIpInterfaceTrEsArpType=wfIpInterfaceTrEsArpType, wfRipIntfAuthentication=wfRipIntfAuthentication, wfIpIntfStatsIcmpOutSrcQuenchs=wfIpIntfStatsIcmpOutSrcQuenchs, wfIpTosTemplateTable=wfIpTosTemplateTable, wfIpInterfaceEnable=wfIpInterfaceEnable, wfIpAdjacentHostEntry=wfIpAdjacentHostEntry, wfIpInterfaceFRMcast1Dlci=wfIpInterfaceFRMcast1Dlci, wfUdpMpr=wfUdpMpr, wfIpIntfStatsCacheMisses=wfIpIntfStatsCacheMisses, wfIpInterfaceInHdrErrors=wfIpInterfaceInHdrErrors, wfIpInterfaceAtmArpSuccessfulCalls=wfIpInterfaceAtmArpSuccessfulCalls, wfIpFilterRuleNewTosValue=wfIpFilterRuleNewTosValue, wfIpTosTemplateCfgStatus=wfIpTosTemplateCfgStatus, wfIpInterfaceStripSecurity=wfIpInterfaceStripSecurity, wfIpIntfStatsIcmpInAddrMasks=wfIpIntfStatsIcmpInAddrMasks, wfUdpMprMapEnable=wfUdpMprMapEnable, wfUdpMprMapLookupDrops=wfUdpMprMapLookupDrops, wfIpFilterStatsEntry=wfIpFilterStatsEntry, wfIpFilterRuleFragment=wfIpFilterRuleFragment, wfRdiscInterfaceIndex=wfRdiscInterfaceIndex, wfIpIntfStatsFragCreates=wfIpIntfStatsFragCreates, wfIpAdjHostValid=wfIpAdjHostValid, wfIpIntfStatsMaxInfo=wfIpIntfStatsMaxInfo, wfIpIntfStatsIcmpOutTimestamps=wfIpIntfStatsIcmpOutTimestamps, wfIpIntfStatsIcmpOutEchos=wfIpIntfStatsIcmpOutEchos, wfIpInterfaceUnnumAssocAddr=wfIpInterfaceUnnumAssocAddr, wfIpBaseDbg=wfIpBaseDbg, wfIpIntfCfgCreate=wfIpIntfCfgCreate, wfIpInterfaceIcmpOutEchos=wfIpInterfaceIcmpOutEchos, wfIpIntfStatsInUnknownProtos=wfIpIntfStatsInUnknownProtos, wfIpIntfStatsAddr=wfIpIntfStatsAddr, wfRipIntfInitStabilizationTimer=wfRipIntfInitStabilizationTimer, wfIpInterfaceAtmArpMisc2=wfIpInterfaceAtmArpMisc2, wfIpIntfStatsInDelivers=wfIpIntfStatsInDelivers, wfIpNetToMediaEntryTable=wfIpNetToMediaEntryTable, wfIpBaseDbgAddress=wfIpBaseDbgAddress, wfIpInterfaceDropRxLevels=wfIpInterfaceDropRxLevels, wfUdp=wfUdp, wfIpAccCtrlNetworkEntry=wfIpAccCtrlNetworkEntry, wfIpGreTnlName=wfIpGreTnlName, wfIpIntfStatsIcmpInDestUnreachs=wfIpIntfStatsIcmpInDestUnreachs, wfIpInterfaceIcmpOutRdiscAdvert=wfIpInterfaceIcmpOutRdiscAdvert, wfIpBaseDbgAddressMask=wfIpBaseDbgAddressMask, wfIpInterfaceInReceives=wfIpInterfaceInReceives, wfRipInterfaceEntry=wfRipInterfaceEntry, wfIpAccCtrlNetworkNetworkMask=wfIpAccCtrlNetworkNetworkMask, wfRipIntfHolddownTimer=wfRipIntfHolddownTimer, wfIpGreConnTnlNum=wfIpGreConnTnlNum, wfIpForwardTable=wfIpForwardTable, wfUdpMprInPkts=wfUdpMprInPkts, wfIpInterfaceIcmpOutMsgs=wfIpInterfaceIcmpOutMsgs, wfIpBaseRouteMetric1=wfIpBaseRouteMetric1, wfIpIntfCfgEntry=wfIpIntfCfgEntry, wfIpIntfCfgUnnumAsocAddr=wfIpIntfCfgUnnumAsocAddr, wfIpTrafficFilterCounter=wfIpTrafficFilterCounter, wfIpIntfStatsAtmArpAcceptedCalls=wfIpIntfStatsAtmArpAcceptedCalls, wfIpBaseDirectedBcastEnable=wfIpBaseDirectedBcastEnable, wfIpAdjHostGreConnName=wfIpAdjHostGreConnName, wfRipIntfListen=wfRipIntfListen, wfUdpOutDatagrams=wfUdpOutDatagrams, wfIpIntfStatsDropRxNoIpsos=wfIpIntfStatsDropRxNoIpsos, wfIpInterfaceDefaultLabelEnabled=wfIpInterfaceDefaultLabelEnabled, wfUdpMprMapGenPkts=wfUdpMprMapGenPkts, wfIpAccCtrlFilterEnable=wfIpAccCtrlFilterEnable, wfIpFilterRuleDescription=wfIpFilterRuleDescription, wfIpInterfaceIcmpOutParmProbs=wfIpInterfaceIcmpOutParmProbs, wfIpFilterRuleAction=wfIpFilterRuleAction, wfIpFilterConfigCircuit=wfIpFilterConfigCircuit, wfIpIntfCfgMayInAuthority=wfIpIntfCfgMayInAuthority, wfIpIntfCfgSlotMask=wfIpIntfCfgSlotMask, wfIpInterfaceDropRxAuths=wfIpInterfaceDropRxAuths, wfIpAdjHostX121Addr=wfIpAdjHostX121Addr, wfUdpMprMapStatisticsEnable=wfUdpMprMapStatisticsEnable, wfIpStaticRouteTable=wfIpStaticRouteTable, wfIpIntfStatsIcmpEntry=wfIpIntfStatsIcmpEntry, wfRdiscInterfaceUnicastAdvt=wfRdiscInterfaceUnicastAdvt, wfIpGreTnlMinMtu=wfIpGreTnlMinMtu, wfIpTosTemplateIndex=wfIpTosTemplateIndex, wfIpInterfaceCfgBcastAddr=wfIpInterfaceCfgBcastAddr, wfIpForwardMask=wfIpForwardMask, wfIpGreTnlNum=wfIpGreTnlNum, wfIpAccCtrlUserHostCreate=wfIpAccCtrlUserHostCreate, wfIpTrafficFilterTable=wfIpTrafficFilterTable, wfRipInterfaceListen=wfRipInterfaceListen, wfIpBaseRouteCache=wfIpBaseRouteCache, wfRipIntfEnable=wfRipIntfEnable, wfIpIntfCfgAtmArpSrvVcAgingEnable=wfIpIntfCfgAtmArpSrvVcAgingEnable, wfIpInterfaceErrorLabelEnabled=wfIpInterfaceErrorLabelEnabled, wfRipInterfaceDefaultRouteSupply=wfRipInterfaceDefaultRouteSupply, wfIpStaticRouteEntry=wfIpStaticRouteEntry, wfRipInterfaceEnable=wfRipInterfaceEnable, wfIpInterfaceInDelivers=wfIpInterfaceInDelivers, wfIpInterfaceAtmArpServerRegInterval=wfIpInterfaceAtmArpServerRegInterval, wfIpBaseNetworks=wfIpBaseNetworks, wfIpAccCtrlNetworkCreate=wfIpAccCtrlNetworkCreate, wfIpIntfStatsEntry=wfIpIntfStatsEntry, wfIpAccCtrlNetworkIndex=wfIpAccCtrlNetworkIndex, wfIpForwardMetric3=wfIpForwardMetric3, wfIpBaseRouteMetric2=wfIpBaseRouteMetric2, wfIpIntfStatsIcmpInTimestampReps=wfIpIntfStatsIcmpInTimestampReps, wfIpForwardEntry=wfIpForwardEntry, wfIpIntfStatsIcmpOutAdminProhib=wfIpIntfStatsIcmpOutAdminProhib, wfIpInterfaceReasmTimeout=wfIpInterfaceReasmTimeout, wfIpBaseNetToMediaIfIndex=wfIpBaseNetToMediaIfIndex, wfIpGreConnName=wfIpGreConnName, wfIpInterfaceIcmpOutErrors=wfIpInterfaceIcmpOutErrors, wfIpForwardType=wfIpForwardType, wfIpIntfStatsControlPathOutPkts=wfIpIntfStatsControlPathOutPkts, wfIpTrafficFilterDefinition=wfIpTrafficFilterDefinition, wfIpIntfStatsInHdrErrors=wfIpIntfStatsInHdrErrors, wfRipIntfDefaultRouteListen=wfRipIntfDefaultRouteListen, wfIpInternalHostEntry=wfIpInternalHostEntry, wfIpInterfaceDropTxAuths=wfIpInterfaceDropTxAuths, wfIpAdjHostType=wfIpAdjHostType, wfIpIntfCfgImplicitLevel=wfIpIntfCfgImplicitLevel, wfIpInterfaceReasmFails=wfIpInterfaceReasmFails, wfUdpMprNumberOfPorts=wfUdpMprNumberOfPorts, wfIpIntfCfgMsgLevel=wfIpIntfCfgMsgLevel, wfIpInterfaceInUnknownProtos=wfIpInterfaceInUnknownProtos, wfIpIntfCfgUdpXsumOn=wfIpIntfCfgUdpXsumOn, wfIpBaseIspMode=wfIpBaseIspMode, wfIpInterfaceReasmMaxSize=wfIpInterfaceReasmMaxSize, wfIpIntfStatsIcmpOutTimeExcds=wfIpIntfStatsIcmpOutTimeExcds, wfIpIntfStatsIcmpInAdminProhib=wfIpIntfStatsIcmpInAdminProhib, wfIpBaseRtEntryTable=wfIpBaseRtEntryTable, wfRdiscIntfEntry=wfRdiscIntfEntry, wfIpInterfaceRedirect=wfIpInterfaceRedirect, wfUdpMprLookupDrops=wfUdpMprLookupDrops, wfIpIntfStatsIcmpOutDestUnreachs=wfIpIntfStatsIcmpOutDestUnreachs, wfRipIntfBroadcastTimer=wfRipIntfBroadcastTimer, wfIpInterfaceDropTxNoIpsoRooms=wfIpInterfaceDropTxNoIpsoRooms, wfIpInterfaceAtmArpMode=wfIpInterfaceAtmArpMode, wfIpInternHtReasmReqds=wfIpInternHtReasmReqds, wfIpInterfaceDefaultLevel=wfIpInterfaceDefaultLevel, wfIpFilterConfigStatus=wfIpFilterConfigStatus, wfIpForwardMetric4=wfIpForwardMetric4, wfIpTosTemplateCfgRxEnable=wfIpTosTemplateCfgRxEnable, wfUdpMprOutPkts=wfUdpMprOutPkts, wfIpBaseDbgMisc=wfIpBaseDbgMisc, wfIpSrNextHopAddr=wfIpSrNextHopAddr, wfIpIntfCfgSMDSGroupAddress=wfIpIntfCfgSMDSGroupAddress, wfIpInterfaceTrEndStation=wfIpInterfaceTrEndStation, wfIpInterfaceMustInAuthority=wfIpInterfaceMustInAuthority, wfIpIntfStatsIcmpInMsgs=wfIpIntfStatsIcmpInMsgs, wfIpInterfaceIcmpInErrors=wfIpInterfaceIcmpInErrors, wfIpIntfStatsCacheNetworks=wfIpIntfStatsCacheNetworks, wfIpIntfCfgFRMcast1Dlci=wfIpIntfCfgFRMcast1Dlci, wfIpIntfCfgMtu=wfIpIntfCfgMtu, wfIpInterfaceState=wfIpInterfaceState, wfIpAdEntBcastAddr=wfIpAdEntBcastAddr, wfRipIntfIndex=wfRipIntfIndex, wfIpIntfStatsRoutingDiscards=wfIpIntfStatsRoutingDiscards, wfIpIntfCfgAtmArpSrvAddress=wfIpIntfCfgAtmArpSrvAddress, wfIpIntfStatsIcmpInEchos=wfIpIntfStatsIcmpInEchos, wfIpIntfStatsIcmpOutErrors=wfIpIntfStatsIcmpOutErrors, wfIpInternHtReasmOKs=wfIpInternHtReasmOKs, wfIpAccCtrlFilterDenyLog=wfIpAccCtrlFilterDenyLog, wfIpIntfStatsInAddrErrors=wfIpIntfStatsInAddrErrors)
mibBuilder.exportSymbols("Wellfleet-IP-MIB", wfIpFilterTemplateCreate=wfIpFilterTemplateCreate, wfIpIntfStatsIcmpOutAddrMaskReps=wfIpIntfStatsIcmpOutAddrMaskReps, wfIpFilterStatsInterface=wfIpFilterStatsInterface, wfIpInternalHostTable=wfIpInternalHostTable, wfIpAdEntReasmMaxSize=wfIpAdEntReasmMaxSize, wfUdpMprMappingTable=wfUdpMprMappingTable, wfIpAdjHostCreate=wfIpAdjHostCreate, wfRipIntfTable=wfRipIntfTable, wfIpInternHtUnknownProtos=wfIpInternHtUnknownProtos, wfIpInterfaceIcmpInTimestampReps=wfIpInterfaceIcmpInTimestampReps, wfIpInterfaceAtmArpFailNoRetryCalls=wfIpInterfaceAtmArpFailNoRetryCalls, wfIpIntfCfgTrEndStation=wfIpIntfCfgTrEndStation, wfIpInterfaceMinLevel=wfIpInterfaceMinLevel, wfIpInterfaceEnetArpEncaps=wfIpInterfaceEnetArpEncaps, wfIpTosTemplateTxEnable=wfIpTosTemplateTxEnable, wfIpForwardIfIndex=wfIpForwardIfIndex, wfIpAccCtrlUserHostEnable=wfIpAccCtrlUserHostEnable, wfIpAccCtrlFilterName=wfIpAccCtrlFilterName, wfIpInterfaceIcmpOutRedirects=wfIpInterfaceIcmpOutRedirects, wfIpAccCtrlFilterAction=wfIpAccCtrlFilterAction, wfIpInterfaceIcmpOutTimestamps=wfIpInterfaceIcmpOutTimestamps, wfIpAdjHostMacAddr=wfIpAdjHostMacAddr, wfIpIntfStatsIcmpInRdiscSolicit=wfIpIntfStatsIcmpInRdiscSolicit, wfIpTosTemplateCfgCreate=wfIpTosTemplateCfgCreate, wfIpInterfaceHostCache=wfIpInterfaceHostCache, wfIpFilterConfigFilterType=wfIpFilterConfigFilterType, wfIpTrafficFilterFragment=wfIpTrafficFilterFragment, wfIpSrEnable=wfIpSrEnable, wfIpIntfStatsOutDiscards=wfIpIntfStatsOutDiscards, wfIpFilterRuleCreate=wfIpFilterRuleCreate, wfIpBaseRouteNextHop=wfIpBaseRouteNextHop, wfIpSrUnnumCct=wfIpSrUnnumCct, wfIpIntfStatsDropTxAuths=wfIpIntfStatsDropTxAuths, wfIpIntfStatsIcmpInEchoReps=wfIpIntfStatsIcmpInEchoReps, wfIpInterfaceIcmpInEchoReps=wfIpInterfaceIcmpInEchoReps, wfIpAccCtrlFilterCreate=wfIpAccCtrlFilterCreate, wfIpForwardPolicy=wfIpForwardPolicy, wfIpIntfStatsAtmArpAttemptedCalls=wfIpIntfStatsAtmArpAttemptedCalls, wfIpInterfaceBcastAddr=wfIpInterfaceBcastAddr, wfIpIntfCfgMaxLevel=wfIpIntfCfgMaxLevel, wfIpIntfCfgAtmArpSrvConnState=wfIpIntfCfgAtmArpSrvConnState, wfIpIntfCfgHostCache=wfIpIntfCfgHostCache, wfIpInterfaceAddressResolutionType=wfIpInterfaceAddressResolutionType, wfIpInterfaceTable=wfIpInterfaceTable, wfIpInterfaceAtmArpAttemptedCalls=wfIpInterfaceAtmArpAttemptedCalls, wfIpGreConnNum=wfIpGreConnNum, wfIpFilterTemplateTable=wfIpFilterTemplateTable, wfIpInterfaceProxy=wfIpInterfaceProxy, wfUdpMprMapPort=wfUdpMprMapPort, wfIpIntfStatsMcastInDataPkts=wfIpIntfStatsMcastInDataPkts, wfIpAdEntNetMask=wfIpAdEntNetMask, wfIpIntfStatsCacheRemoves=wfIpIntfStatsCacheRemoves, wfIpGreTnlCreate=wfIpGreTnlCreate, wfIpBaseEstimatedNetworks=wfIpBaseEstimatedNetworks, wfIpAccCtrlUserHostUser=wfIpAccCtrlUserHostUser, wfIpTosTemplateCfgTxMapping=wfIpTosTemplateCfgTxMapping, wfIpSrIpNetMask=wfIpSrIpNetMask, wfIpInterfaceFRBcastDlci=wfIpInterfaceFRBcastDlci, wfIpIntfCfgAddressResolutionType=wfIpIntfCfgAddressResolutionType, wfIpInterfaceMTUDiscovery=wfIpInterfaceMTUDiscovery, wfIpInterfaceReasmOKs=wfIpInterfaceReasmOKs, wfIpOspfMaximumPath=wfIpOspfMaximumPath, wfRipInterfacePoisonedReversed=wfRipInterfacePoisonedReversed, wfIpTrafficFilterRuleNumber=wfIpTrafficFilterRuleNumber, wfIpGreConnTable=wfIpGreConnTable, wfIpIntfCfgRequireInSecurity=wfIpIntfCfgRequireInSecurity, wfIpFilterConfigRuleNumber=wfIpFilterConfigRuleNumber, wfUdpLocalAddress=wfUdpLocalAddress, wfIpMultipathMethod=wfIpMultipathMethod, wfIpIntfStatsIcmpInErrors=wfIpIntfStatsIcmpInErrors, wfIpGreTnlEntry=wfIpGreTnlEntry, wfRdiscInterfaceMaxIntrvl=wfRdiscInterfaceMaxIntrvl, wfUdpNoPorts=wfUdpNoPorts, wfIpGreConnEntry=wfIpGreConnEntry, wfIpFilterTemplateRuleNumber=wfIpFilterTemplateRuleNumber, wfIpInterfaceIcmpInDestUnreachs=wfIpInterfaceIcmpInDestUnreachs, wfIpIntfStatsDropTxNoIpsos=wfIpIntfStatsDropTxNoIpsos, wfIpAccCtrlUserHostIndex=wfIpAccCtrlUserHostIndex, wfIpIntfStatsDropRxFormats=wfIpIntfStatsDropRxFormats, wfIpAccCtrlFilterTable=wfIpAccCtrlFilterTable, wfIpFilterRuleNewTosValueMask=wfIpFilterRuleNewTosValueMask, wfIpIntfCfgStripSecurity=wfIpIntfCfgStripSecurity, wfUdpInErrors=wfUdpInErrors, wfIpBaseRouteMetric3=wfIpBaseRouteMetric3, wfIpTosTemplateCfgEntry=wfIpTosTemplateCfgEntry, wfIpBaseNetToMediaPhysAddress=wfIpBaseNetToMediaPhysAddress, wfIpIntfStatsReasmTimeout=wfIpIntfStatsReasmTimeout, wfIpAccCtrlFilterNetworkMask=wfIpAccCtrlFilterNetworkMask, wfIpAdEntIfIndex=wfIpAdEntIfIndex, wfIpBase=wfIpBase, wfIpIntfCfgMustInAuthority=wfIpIntfCfgMustInAuthority, wfIpBaseRouteProto=wfIpBaseRouteProto, wfIpAccCtrlFilterId=wfIpAccCtrlFilterId, wfIpTosTemplateTxMapping=wfIpTosTemplateTxMapping, wfIpBaseRouteFilterSupport=wfIpBaseRouteFilterSupport, wfIpGreTnlTable=wfIpGreTnlTable, wfIpInterfaceIcmpInAddrMasks=wfIpInterfaceIcmpInAddrMasks, wfIpGreTnlLocIpAddr=wfIpGreTnlLocIpAddr)
