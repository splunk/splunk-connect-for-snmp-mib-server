#
# PySNMP MIB module GSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:06:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
gsa, = mibBuilder.importSymbols("GOOGLE-MIB", "gsa")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, ObjectIdentity, Counter64, Gauge32, Bits, MibIdentifier, TimeTicks, Integer32, Counter32, Unsigned32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Counter64", "Gauge32", "Bits", "MibIdentifier", "TimeTicks", "Integer32", "Counter32", "Unsigned32", "NotificationType", "iso")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
crawl = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 1))
crawlRunning = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("paused", 0), ("running", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crawlRunning.setStatus('current')
status = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2))
docsServed = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsServed.setStatus('current')
crawlingRate = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crawlingRate.setStatus('current')
docBytes = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docBytes.setStatus('current')
todayDocsCrawled = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todayDocsCrawled.setStatus('current')
docErrors = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docErrors.setStatus('current')
docsFound = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsFound.setStatus('current')
batchCrawlRunning = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batchCrawlRunning.setStatus('current')
batchCrawlStartTime = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batchCrawlStartTime.setStatus('current')
batchCrawlEndTime = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batchCrawlEndTime.setStatus('current')
batchCrawlEndReason = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("urllimit", 0), ("schedulestopped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batchCrawlEndReason.setStatus('current')
diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 1, 3))
serving = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 2))
qpm = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qpm.setStatus('current')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 3))
gsaDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 3, 1))
diskHealth = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("red", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHealth.setStatus('current')
diskErrors = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskErrors.setStatus('current')
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 3, 2))
temperatureHealth = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("red", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureHealth.setStatus('current')
temperatureErrors = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureErrors.setStatus('current')
machine = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 3, 3))
machineHealth = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("red", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineHealth.setStatus('current')
machineErrors = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineErrors.setStatus('current')
search = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 4))
reports = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 4, 1))
logs = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 4, 2))
eventLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 5))
mibBuilder.exportSymbols("GSA-MIB", logs=logs, crawl=crawl, todayDocsCrawled=todayDocsCrawled, crawlingRate=crawlingRate, batchCrawlEndTime=batchCrawlEndTime, docBytes=docBytes, batchCrawlStartTime=batchCrawlStartTime, temperatureHealth=temperatureHealth, docsFound=docsFound, batchCrawlRunning=batchCrawlRunning, temperature=temperature, eventLogs=eventLogs, batchCrawlEndReason=batchCrawlEndReason, gsaDisk=gsaDisk, crawlRunning=crawlRunning, search=search, qpm=qpm, docsServed=docsServed, diskHealth=diskHealth, docErrors=docErrors, machine=machine, reports=reports, status=status, diagnostics=diagnostics, diskErrors=diskErrors, machineErrors=machineErrors, machineHealth=machineHealth, system=system, temperatureErrors=temperatureErrors, serving=serving)
