#
# PySNMP MIB module HPN-ICF-LLDP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-LLDP-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
LldpPortNumber, = mibBuilder.importSymbols("LLDP-MIB", "LldpPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, ModuleIdentity, Unsigned32, MibIdentifier, Integer32, Counter32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Integer32", "Counter32", "TimeTicks", "NotificationType")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
hpnicflldp = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100))
hpnicflldp.setRevisions(('2009-03-21 00:00',))
if mibBuilder.loadTexts: hpnicflldp.setLastUpdated('200903210000Z')
if mibBuilder.loadTexts: hpnicflldp.setOrganization('')
hpnicflldpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1))
hpnicflldpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1))
hpnicflldpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicflldpAdminStatus.setStatus('current')
hpnicflldpComplianceCDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicflldpComplianceCDPStatus.setStatus('current')
hpnicflldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 3), )
if mibBuilder.loadTexts: hpnicflldpPortConfigTable.setStatus('current')
hpnicflldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-LLDP-EXT-MIB", "hpnicflldpPortConfigPortNum"))
if mibBuilder.loadTexts: hpnicflldpPortConfigEntry.setStatus('current')
hpnicflldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 3, 1, 1), LldpPortNumber())
if mibBuilder.loadTexts: hpnicflldpPortConfigPortNum.setStatus('current')
hpnicflldpPortConfigCDPComplianceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txAndRx", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicflldpPortConfigCDPComplianceStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-LLDP-EXT-MIB", PYSNMP_MODULE_ID=hpnicflldp, hpnicflldpPortConfigTable=hpnicflldpPortConfigTable, hpnicflldp=hpnicflldp, hpnicflldpPortConfigPortNum=hpnicflldpPortConfigPortNum, hpnicflldpObjects=hpnicflldpObjects, hpnicflldpConfiguration=hpnicflldpConfiguration, hpnicflldpComplianceCDPStatus=hpnicflldpComplianceCDPStatus, hpnicflldpPortConfigCDPComplianceStatus=hpnicflldpPortConfigCDPComplianceStatus, hpnicflldpAdminStatus=hpnicflldpAdminStatus, hpnicflldpPortConfigEntry=hpnicflldpPortConfigEntry)
