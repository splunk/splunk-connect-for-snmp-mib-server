#
# PySNMP MIB module HM2-INDUSTRIAL-PROTOCOLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-INDUSTRIAL-PROTOCOLS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmEnabledStatus")
InetAddressIPv4, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, IpAddress, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, iso, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "IpAddress", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "iso", "Integer32", "Gauge32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hm2IndustrialProtocolsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 101))
hm2IndustrialProtocolsMib.setRevisions(('2014-02-24 00:00', '2014-01-15 00:00', '2013-05-22 00:00',))
if mibBuilder.loadTexts: hm2IndustrialProtocolsMib.setLastUpdated('201402240000Z')
if mibBuilder.loadTexts: hm2IndustrialProtocolsMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2IndustrialProtocolsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 0))
hm2IndustrialProtocolsMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1))
hm2IndustrialProtocolsMibSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 3))
hm2Iec61850Group = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1))
hm2ProfinetIOGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2))
hm2EthernetIPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3))
hm2ModbusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 4))
hm2Iec61850ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1))
hm2Iec61850StatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 2))
hm2Iec61850MmsServerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsServerAdminStatus.setStatus('current')
hm2Iec61850MmsServerWriteAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsServerWriteAccessStatus.setStatus('current')
hm2Iec61850MmsServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 3), InetPortNumber().clone(102)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsServerPortNumber.setStatus('current')
hm2Iec61850MmsServerMaxSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsServerMaxSessionsCount.setStatus('current')
hm2Iec61850MmsServerTechnicalKey = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('KEY')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsServerTechnicalKey.setStatus('current')
hm2Iec61850MmsTlsServerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerAdminStatus.setStatus('current')
hm2Iec61850MmsTlsServerWriteAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 11), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerWriteAccessStatus.setStatus('current')
hm2Iec61850MmsTlsServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 12), InetPortNumber().clone(3782)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerPortNumber.setStatus('current')
hm2Iec61850MmsTlsServerMaxSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerMaxSessionsCount.setStatus('current')
hm2Iec61850MmsTlsServerKeysPresent = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsa", 1), ("rsa", 2), ("both", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerKeysPresent.setStatus('current')
hm2Iec61850MmsTlsServerKeyOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsa", 1), ("rsa", 2), ("both", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerKeyOperStatus.setStatus('current')
hm2Iec61850MmsTlsServerRSAKeyControl = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("generate", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerRSAKeyControl.setStatus('current')
hm2Iec61850MmsTlsServerDSAKeyControl = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("generate", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerDSAKeyControl.setStatus('current')
hm2Iec61850MmsTlsServerFingerPrintDSA = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerFingerPrintDSA.setStatus('current')
hm2Iec61850MmsTlsServerFingerPrintRSA = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerFingerPrintRSA.setStatus('current')
hm2Iec61850MmsServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unavailable", 1), ("starting", 2), ("running", 3), ("stopping", 4), ("halted", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Iec61850MmsServerStatus.setStatus('current')
hm2Iec61850MmsServerSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Iec61850MmsServerSessionsCount.setStatus('current')
hm2Iec61850MmsTlsServerSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Iec61850MmsTlsServerSessionsCount.setStatus('current')
hm2ProfinetIOConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1))
hm2ProfinetIOStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 2))
hm2PNIOAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PNIOAdminStatus.setStatus('current')
hm2PNIODeviceID = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PNIODeviceID.setStatus('current')
hm2PNIOModuleIdentNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PNIOModuleIdentNumber.setStatus('current')
hm2PNIOOrderID = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PNIOOrderID.setStatus('current')
hm2PNIODeviceTypeDetails = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PNIODeviceTypeDetails.setStatus('current')
hm2PNIOSoftwareRelease = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PNIOSoftwareRelease.setStatus('current')
hm2PNIOHardwareRelease = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PNIOHardwareRelease.setStatus('current')
hm2PNIOOrderID9th = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PNIOOrderID9th.setStatus('current')
hm2PNIONameOfStation = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PNIONameOfStation.setStatus('current')
hm2PNIONumActiveApplicationRelations = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PNIONumActiveApplicationRelations.setStatus('current')
hm2PNIOClearIpParameter = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PNIOClearIpParameter.setStatus('current')
hm2PNIODcpModeTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 20), )
if mibBuilder.loadTexts: hm2PNIODcpModeTable.setStatus('current')
hm2PNIODcpModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 20, 1), ).setIndexNames((0, "HM2-INDUSTRIAL-PROTOCOLS-MIB", "hm2PNIODcpModePortID"))
if mibBuilder.loadTexts: hm2PNIODcpModeEntry.setStatus('current')
hm2PNIODcpModePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2PNIODcpModePortID.setStatus('current')
hm2PNIODcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 2, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ingress", 1), ("egress", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PNIODcpMode.setStatus('current')
hm2EthernetIPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1))
hm2EthernetIPStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 2))
hm2EthernetIPTCPIPObjectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 3))
hm2EthernetIPQoSObjectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 4))
hm2EtherNetIPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPAdminStatus.setStatus('current')
hm2EtherNetIPErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPErrorCode.setStatus('current')
hm2EtherNetIPProductCode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPProductCode.setStatus('current')
hm2EtherNetIPMajorRevision = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPMajorRevision.setStatus('current')
hm2EtherNetIPMinorRevision = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPMinorRevision.setStatus('current')
hm2EtherNetIPProductName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPProductName.setStatus('current')
hm2EtherNetIPCatalogName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPCatalogName.setStatus('current')
hm2EtherNetIPWriteAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 1, 8), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPWriteAccessStatus.setStatus('current')
hm2EtherNetIPConnEstablished = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPConnEstablished.setStatus('current')
hm2EtherNetIPConnTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPConnTimeouts.setStatus('current')
hm2EtherNetIPVendorObjRequests = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2EtherNetIPVendorObjRequests.setStatus('current')
hm2EtherNetIPMcastTTLValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPMcastTTLValue.setStatus('current')
hm2EtherNetIPMcastAllocControl = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("defined", 1), ("reserved", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPMcastAllocControl.setStatus('current')
hm2EtherNetIPMcastCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPMcastCount.setStatus('current')
hm2EtherNetIPMcastStartAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 3, 4), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPMcastStartAddress.setStatus('current')
hm2EtherNetIPLastConflictDetectedACDActivity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(28, 28)).setFixedLength(28)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPLastConflictDetectedACDActivity.setStatus('current')
hm2EtherNetIPSelectACDStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPSelectACDStatus.setStatus('current')
hm2EtherNetIPQosDscpUrgentValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(55)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPQosDscpUrgentValue.setStatus('current')
hm2EtherNetIPQosDscpScheduledValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPQosDscpScheduledValue.setStatus('current')
hm2EtherNetIPQosDscpHighValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(43)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPQosDscpHighValue.setStatus('current')
hm2EtherNetIPQosDscpLowValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPQosDscpLowValue.setStatus('current')
hm2EtherNetIPQosDscpExplicitValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(27)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPQosDscpExplicitValue.setStatus('current')
hm2EtherNetIPQosValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 3, 4, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2EtherNetIPQosValue.setStatus('current')
hm2ModbusConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 4, 1))
hm2ModbusStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 4, 2))
hm2ModbusTcpServerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 4, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModbusTcpServerAdminStatus.setStatus('current')
hm2ModbusTcpServerWriteAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 4, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModbusTcpServerWriteAccessStatus.setStatus('current')
hm2ModbusTcpServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 4, 1, 3), InetPortNumber().clone(502)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModbusTcpServerPortNumber.setStatus('current')
hm2ModbusTcpServerMaxSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ModbusTcpServerMaxSessionsCount.setStatus('current')
hm2ModbusTcpServerSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 101, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ModbusTcpServerSessionsCount.setStatus('current')
hm2Iec61850SESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 3, 1))
hm2ProfinetIOSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 3, 2))
hm2EthernetIPSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 3, 3))
hm2ModbusSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 101, 3, 4))
hm2ProfinetIOInvalidStationName = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 101, 3, 2, 1))
if mibBuilder.loadTexts: hm2ProfinetIOInvalidStationName.setStatus('current')
mibBuilder.exportSymbols("HM2-INDUSTRIAL-PROTOCOLS-MIB", hm2PNIODcpModeTable=hm2PNIODcpModeTable, hm2Iec61850MmsServerAdminStatus=hm2Iec61850MmsServerAdminStatus, hm2Iec61850MmsServerStatus=hm2Iec61850MmsServerStatus, hm2PNIODcpMode=hm2PNIODcpMode, hm2IndustrialProtocolsNotifications=hm2IndustrialProtocolsNotifications, hm2PNIOModuleIdentNumber=hm2PNIOModuleIdentNumber, hm2EtherNetIPQosDscpUrgentValue=hm2EtherNetIPQosDscpUrgentValue, hm2PNIODcpModeEntry=hm2PNIODcpModeEntry, hm2EtherNetIPAdminStatus=hm2EtherNetIPAdminStatus, hm2EtherNetIPQosDscpHighValue=hm2EtherNetIPQosDscpHighValue, hm2PNIODeviceID=hm2PNIODeviceID, hm2EthernetIPQoSObjectGroup=hm2EthernetIPQoSObjectGroup, hm2EtherNetIPMcastTTLValue=hm2EtherNetIPMcastTTLValue, PYSNMP_MODULE_ID=hm2IndustrialProtocolsMib, hm2EtherNetIPMcastAllocControl=hm2EtherNetIPMcastAllocControl, hm2ModbusTcpServerSessionsCount=hm2ModbusTcpServerSessionsCount, hm2Iec61850MmsTlsServerAdminStatus=hm2Iec61850MmsTlsServerAdminStatus, hm2IndustrialProtocolsMibSNMPExtensionGroup=hm2IndustrialProtocolsMibSNMPExtensionGroup, hm2PNIOOrderID9th=hm2PNIOOrderID9th, hm2EtherNetIPMcastStartAddress=hm2EtherNetIPMcastStartAddress, hm2PNIOOrderID=hm2PNIOOrderID, hm2PNIODcpModePortID=hm2PNIODcpModePortID, hm2ModbusTcpServerPortNumber=hm2ModbusTcpServerPortNumber, hm2Iec61850StatisticsGroup=hm2Iec61850StatisticsGroup, hm2ProfinetIOStatisticsGroup=hm2ProfinetIOStatisticsGroup, hm2EtherNetIPMajorRevision=hm2EtherNetIPMajorRevision, hm2ModbusTcpServerWriteAccessStatus=hm2ModbusTcpServerWriteAccessStatus, hm2ProfinetIOInvalidStationName=hm2ProfinetIOInvalidStationName, hm2Iec61850MmsTlsServerKeysPresent=hm2Iec61850MmsTlsServerKeysPresent, hm2ModbusStatisticsGroup=hm2ModbusStatisticsGroup, hm2EtherNetIPVendorObjRequests=hm2EtherNetIPVendorObjRequests, hm2EtherNetIPProductCode=hm2EtherNetIPProductCode, hm2ModbusSESGroup=hm2ModbusSESGroup, hm2Iec61850MmsServerTechnicalKey=hm2Iec61850MmsServerTechnicalKey, hm2EthernetIPTCPIPObjectGroup=hm2EthernetIPTCPIPObjectGroup, hm2EtherNetIPQosDscpScheduledValue=hm2EtherNetIPQosDscpScheduledValue, hm2EthernetIPStatisticsGroup=hm2EthernetIPStatisticsGroup, hm2EtherNetIPMcastCount=hm2EtherNetIPMcastCount, hm2ProfinetIOConfigGroup=hm2ProfinetIOConfigGroup, hm2ProfinetIOGroup=hm2ProfinetIOGroup, hm2EthernetIPGroup=hm2EthernetIPGroup, hm2Iec61850MmsTlsServerDSAKeyControl=hm2Iec61850MmsTlsServerDSAKeyControl, hm2Iec61850MmsTlsServerRSAKeyControl=hm2Iec61850MmsTlsServerRSAKeyControl, hm2Iec61850MmsServerWriteAccessStatus=hm2Iec61850MmsServerWriteAccessStatus, hm2Iec61850MmsServerMaxSessionsCount=hm2Iec61850MmsServerMaxSessionsCount, hm2EtherNetIPProductName=hm2EtherNetIPProductName, hm2Iec61850MmsTlsServerPortNumber=hm2Iec61850MmsTlsServerPortNumber, hm2EtherNetIPMinorRevision=hm2EtherNetIPMinorRevision, hm2Iec61850MmsServerPortNumber=hm2Iec61850MmsServerPortNumber, hm2ModbusTcpServerMaxSessionsCount=hm2ModbusTcpServerMaxSessionsCount, hm2PNIOSoftwareRelease=hm2PNIOSoftwareRelease, hm2PNIONameOfStation=hm2PNIONameOfStation, hm2PNIODeviceTypeDetails=hm2PNIODeviceTypeDetails, hm2IndustrialProtocolsMibObjects=hm2IndustrialProtocolsMibObjects, hm2EtherNetIPCatalogName=hm2EtherNetIPCatalogName, hm2Iec61850MmsServerSessionsCount=hm2Iec61850MmsServerSessionsCount, hm2PNIONumActiveApplicationRelations=hm2PNIONumActiveApplicationRelations, hm2EtherNetIPWriteAccessStatus=hm2EtherNetIPWriteAccessStatus, hm2Iec61850ConfigGroup=hm2Iec61850ConfigGroup, hm2ModbusTcpServerAdminStatus=hm2ModbusTcpServerAdminStatus, hm2ProfinetIOSESGroup=hm2ProfinetIOSESGroup, hm2EtherNetIPQosDscpLowValue=hm2EtherNetIPQosDscpLowValue, hm2Iec61850MmsTlsServerFingerPrintDSA=hm2Iec61850MmsTlsServerFingerPrintDSA, hm2PNIOAdminStatus=hm2PNIOAdminStatus, hm2EtherNetIPSelectACDStatus=hm2EtherNetIPSelectACDStatus, hm2EtherNetIPConnEstablished=hm2EtherNetIPConnEstablished, hm2Iec61850MmsTlsServerMaxSessionsCount=hm2Iec61850MmsTlsServerMaxSessionsCount, hm2Iec61850MmsTlsServerFingerPrintRSA=hm2Iec61850MmsTlsServerFingerPrintRSA, hm2IndustrialProtocolsMib=hm2IndustrialProtocolsMib, hm2ModbusConfigGroup=hm2ModbusConfigGroup, hm2Iec61850MmsTlsServerKeyOperStatus=hm2Iec61850MmsTlsServerKeyOperStatus, hm2Iec61850SESGroup=hm2Iec61850SESGroup, hm2ModbusGroup=hm2ModbusGroup, hm2EtherNetIPLastConflictDetectedACDActivity=hm2EtherNetIPLastConflictDetectedACDActivity, hm2Iec61850MmsTlsServerSessionsCount=hm2Iec61850MmsTlsServerSessionsCount, hm2PNIOClearIpParameter=hm2PNIOClearIpParameter, hm2EtherNetIPErrorCode=hm2EtherNetIPErrorCode, hm2Iec61850Group=hm2Iec61850Group, hm2EthernetIPSESGroup=hm2EthernetIPSESGroup, hm2EthernetIPConfigGroup=hm2EthernetIPConfigGroup, hm2EtherNetIPQosDscpExplicitValue=hm2EtherNetIPQosDscpExplicitValue, hm2EtherNetIPQosValue=hm2EtherNetIPQosValue, hm2Iec61850MmsTlsServerWriteAccessStatus=hm2Iec61850MmsTlsServerWriteAccessStatus, hm2EtherNetIPConnTimeouts=hm2EtherNetIPConnTimeouts, hm2PNIOHardwareRelease=hm2PNIOHardwareRelease)
