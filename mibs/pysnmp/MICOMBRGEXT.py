#
# PySNMP MIB module MICOMBRGEXT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOMBRGEXT
# Produced by pysmi-0.3.4 at Mon Apr 29 20:02:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, MibIdentifier, iso, Bits, TimeTicks, ObjectIdentity, Gauge32, IpAddress, Unsigned32, Integer32, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "MibIdentifier", "iso", "Bits", "TimeTicks", "ObjectIdentity", "Gauge32", "IpAddress", "Unsigned32", "Integer32", "Counter32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class Timeout(Integer32):
    pass

mcmBrg = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6))
mcmBrgGlobalParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1))
mcmBrgIPBridged = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridged", 1), ("routed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgIPBridged.setStatus('mandatory')
mcmBrgNumInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgNumInterfaces.setStatus('mandatory')
mcmBrgSpanEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgSpanEnable.setStatus('mandatory')
mcmBrgSpoofEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgSpoofEnable.setStatus('mandatory')
mcmBrgAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgAgeTime.setStatus('mandatory')
mcmBrgMiscParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2))
mcmBrgDebugEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgDebugEnable.setStatus('mandatory')
mcmBrgSpanDebugEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSpanDebugEnable.setStatus('mandatory')
mcmBrgSpoofCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSpoofCacheAge.setStatus('mandatory')
mcmBrgSpoofThresholdAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSpoofThresholdAge.setStatus('mandatory')
mcmBrgSpoofThresholdCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSpoofThresholdCount.setStatus('mandatory')
mcmBrgConfPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3), )
if mibBuilder.loadTexts: mcmBrgConfPortTable.setStatus('mandatory')
mcmBrgConfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgConfPortIndex"))
if mibBuilder.loadTexts: mcmBrgConfPortEntry.setStatus('mandatory')
mcmBrgConfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgConfPortIndex.setStatus('mandatory')
mcmBrgConfPortPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgConfPortPPA.setStatus('mandatory')
mcmBrgConfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("frameRelay", 3), ("internal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgConfPortType.setStatus('mandatory')
mcmBrgConfPortMacFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortMacFilterFlag.setStatus('mandatory')
mcmBrgConfPortEtFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortEtFilterFlag.setStatus('mandatory')
mcmBrgConfPortSapFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortSapFilterFlag.setStatus('mandatory')
mcmBrgConfPortMacInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortMacInclExcl.setStatus('mandatory')
mcmBrgConfPortEtInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortEtInclExcl.setStatus('mandatory')
mcmBrgConfPortSapInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortSapInclExcl.setStatus('mandatory')
mcmBrgMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4), )
if mibBuilder.loadTexts: mcmBrgMacFilterTable.setStatus('mandatory')
mcmBrgMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgMacFilterPortIndex"), (0, "MICOMBRGEXT", "mcmBrgMacFilterNumber"))
if mibBuilder.loadTexts: mcmBrgMacFilterEntry.setStatus('mandatory')
mcmBrgMacFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgMacFilterPortIndex.setStatus('mandatory')
mcmBrgMacFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgMacFilterNumber.setStatus('mandatory')
mcmBrgMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgMacAddress.setStatus('mandatory')
mcmBrgMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgMacType.setStatus('mandatory')
mcmBrgEtFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5), )
if mibBuilder.loadTexts: mcmBrgEtFilterTable.setStatus('mandatory')
mcmBrgEtFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgEtFilterPortIndex"), (0, "MICOMBRGEXT", "mcmBrgEtFilterNumber"))
if mibBuilder.loadTexts: mcmBrgEtFilterEntry.setStatus('mandatory')
mcmBrgEtFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterPortIndex.setStatus('mandatory')
mcmBrgEtFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterNumber.setStatus('mandatory')
mcmBrgEtFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singular", 1), ("range", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterStatus.setStatus('mandatory')
mcmBrgEtFilterEType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterEType.setStatus('mandatory')
mcmBrgEtFilterUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterUpperRange.setStatus('mandatory')
mcmBrgEtFilterLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterLowerRange.setStatus('mandatory')
mcmBrgSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6), )
if mibBuilder.loadTexts: mcmBrgSapFilterTable.setStatus('mandatory')
mcmBrgSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgSapFilterPortIndex"), (0, "MICOMBRGEXT", "mcmBrgSapFilterNumber"))
if mibBuilder.loadTexts: mcmBrgSapFilterEntry.setStatus('mandatory')
mcmBrgSapFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterPortIndex.setStatus('mandatory')
mcmBrgSapFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterNumber.setStatus('mandatory')
mcmBrgSapFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singular", 1), ("range", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterStatus.setStatus('mandatory')
mcmBrgSapFilterEType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterEType.setStatus('mandatory')
mcmBrgSapFilterUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterUpperRange.setStatus('mandatory')
mcmBrgSapFilterLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterLowerRange.setStatus('mandatory')
nvmBrgGlobalParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7))
nvmBrgIPBridged = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridged", 1), ("routed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgIPBridged.setStatus('mandatory')
nvmBrgNumInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgNumInterfaces.setStatus('mandatory')
nvmBrgSpanEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpanEnable.setStatus('mandatory')
nvmBrgSpoofEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpoofEnable.setStatus('mandatory')
nvmBrgAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgAgeTime.setStatus('mandatory')
nvmBrgMiscParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8))
nvmBrgDebugEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgDebugEnable.setStatus('mandatory')
nvmBrgSpanDebugEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpanDebugEnable.setStatus('mandatory')
nvmBrgSpoofCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpoofCacheAge.setStatus('mandatory')
nvmBrgSpoofThresholdAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpoofThresholdAge.setStatus('mandatory')
nvmBrgSpoofThresholdCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpoofThresholdCount.setStatus('mandatory')
nvmBrgStpParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9))
nvmBrgPriority = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgPriority.setStatus('mandatory')
nvmBrgMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9, 2), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgMaxAge.setStatus('mandatory')
nvmBrgFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgFwdDelay.setStatus('mandatory')
nvmBrgHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9, 4), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgHelloTime.setStatus('mandatory')
nvmBrgConfPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10), )
if mibBuilder.loadTexts: nvmBrgConfPortTable.setStatus('mandatory')
nvmBrgConfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1), ).setIndexNames((0, "MICOMBRGEXT", "nvmBrgConfPortIndex"))
if mibBuilder.loadTexts: nvmBrgConfPortEntry.setStatus('mandatory')
nvmBrgConfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortIndex.setStatus('mandatory')
nvmBrgConfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("frameRelay", 3), ("internal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortType.setStatus('mandatory')
nvmBrgConfPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortEnable.setStatus('mandatory')
nvmBrgConfPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortPriority.setStatus('mandatory')
nvmBrgConfPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortPathCost.setStatus('mandatory')
nvmBrgConfPortMacFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortMacFilterFlag.setStatus('mandatory')
nvmBrgConfPortEtFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortEtFilterFlag.setStatus('mandatory')
nvmBrgConfPortSapFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortSapFilterFlag.setStatus('mandatory')
nvmBrgConfPortMacInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortMacInclExcl.setStatus('mandatory')
nvmBrgConfPortEtInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortEtInclExcl.setStatus('mandatory')
nvmBrgConfPortSapInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortSapInclExcl.setStatus('mandatory')
nvmBrgMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11), )
if mibBuilder.loadTexts: nvmBrgMacFilterTable.setStatus('mandatory')
nvmBrgMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1), ).setIndexNames((0, "MICOMBRGEXT", "nvmBrgMacFilterPortIndex"), (0, "MICOMBRGEXT", "nvmBrgMacFilterNumber"))
if mibBuilder.loadTexts: nvmBrgMacFilterEntry.setStatus('mandatory')
nvmBrgMacFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgMacFilterPortIndex.setStatus('mandatory')
nvmBrgMacFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgMacFilterNumber.setStatus('mandatory')
nvmBrgMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgMacAddress.setStatus('mandatory')
nvmBrgMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgMacType.setStatus('mandatory')
nvmBrgEtFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12), )
if mibBuilder.loadTexts: nvmBrgEtFilterTable.setStatus('mandatory')
nvmBrgEtFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1), ).setIndexNames((0, "MICOMBRGEXT", "nvmBrgEtFilterPortIndex"), (0, "MICOMBRGEXT", "nvmBrgEtFilterNumber"))
if mibBuilder.loadTexts: nvmBrgEtFilterEntry.setStatus('mandatory')
nvmBrgEtFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterPortIndex.setStatus('mandatory')
nvmBrgEtFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterNumber.setStatus('mandatory')
nvmBrgEtFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singular", 1), ("range", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterStatus.setStatus('mandatory')
nvmBrgEtFilterEType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterEType.setStatus('mandatory')
nvmBrgEtFilterUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterUpperRange.setStatus('mandatory')
nvmBrgEtFilterLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterLowerRange.setStatus('mandatory')
nvmBrgSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13), )
if mibBuilder.loadTexts: nvmBrgSapFilterTable.setStatus('mandatory')
nvmBrgSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1), ).setIndexNames((0, "MICOMBRGEXT", "nvmBrgSapFilterPortIndex"), (0, "MICOMBRGEXT", "nvmBrgSapFilterNumber"))
if mibBuilder.loadTexts: nvmBrgSapFilterEntry.setStatus('mandatory')
nvmBrgSapFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterPortIndex.setStatus('mandatory')
nvmBrgSapFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterNumber.setStatus('mandatory')
nvmBrgSapFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singular", 1), ("range", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterStatus.setStatus('mandatory')
nvmBrgSapFilterEType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterEType.setStatus('mandatory')
nvmBrgSapFilterUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterUpperRange.setStatus('mandatory')
nvmBrgSapFilterLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterLowerRange.setStatus('mandatory')
mcmBrgCntr = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14))
mcmBrgPortCntrZeroTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1), )
if mibBuilder.loadTexts: mcmBrgPortCntrZeroTable.setStatus('obsolete')
mcmBrgPortCntrZeroEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgPortCntrZeroIndex"))
if mibBuilder.loadTexts: mcmBrgPortCntrZeroEntry.setStatus('obsolete')
mcmBrgPortCntrZeroIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgPortCntrZeroIndex.setStatus('obsolete')
mcmBrgBasePortCounterZero = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgBasePortCounterZero.setStatus('obsolete')
mcmBrgStpPortCounterZero = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgStpPortCounterZero.setStatus('obsolete')
mcmBrgTpPortCounterZero = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgTpPortCounterZero.setStatus('obsolete')
mcmBrgCounterZero = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 2))
mcmBrgStpCounterZero = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgStpCounterZero.setStatus('obsolete')
mcmBrgTpCounterZero = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgTpCounterZero.setStatus('obsolete')
mibBuilder.exportSymbols("MICOMBRGEXT", mcmBrg=mcmBrg, nvmBrgEtFilterUpperRange=nvmBrgEtFilterUpperRange, mcmBrgMacFilterEntry=mcmBrgMacFilterEntry, nvmBrgEtFilterLowerRange=nvmBrgEtFilterLowerRange, nvmBrgMaxAge=nvmBrgMaxAge, nvmBrgFwdDelay=nvmBrgFwdDelay, nvmBrgConfPortPriority=nvmBrgConfPortPriority, mcmBrgSapFilterStatus=mcmBrgSapFilterStatus, mcmBrgConfPortSapInclExcl=mcmBrgConfPortSapInclExcl, nvmBrgConfPortEnable=nvmBrgConfPortEnable, mcmBrgSapFilterEType=mcmBrgSapFilterEType, mcmBrgSpoofThresholdAge=mcmBrgSpoofThresholdAge, mcmBrgPortCntrZeroEntry=mcmBrgPortCntrZeroEntry, nvmBrgNumInterfaces=nvmBrgNumInterfaces, nvmBrgEtFilterPortIndex=nvmBrgEtFilterPortIndex, mcmBrgMacFilterNumber=mcmBrgMacFilterNumber, nvmBrgHelloTime=nvmBrgHelloTime, nvmBrgSapFilterUpperRange=nvmBrgSapFilterUpperRange, mcmBrgGlobalParamGroup=mcmBrgGlobalParamGroup, mcmBrgSpoofThresholdCount=mcmBrgSpoofThresholdCount, nvmBrgSpoofThresholdAge=nvmBrgSpoofThresholdAge, nvmBrgSapFilterLowerRange=nvmBrgSapFilterLowerRange, mcmBrgEtFilterEType=mcmBrgEtFilterEType, nvmBrgSpoofThresholdCount=nvmBrgSpoofThresholdCount, mcmBrgMacType=mcmBrgMacType, mcmBrgConfPortTable=mcmBrgConfPortTable, mcmBrgMacAddress=mcmBrgMacAddress, mcmBrgSapFilterTable=mcmBrgSapFilterTable, mcmBrgConfPortType=mcmBrgConfPortType, nvmBrgEtFilterEntry=nvmBrgEtFilterEntry, nvmBrgConfPortIndex=nvmBrgConfPortIndex, nvmBrgConfPortEtFilterFlag=nvmBrgConfPortEtFilterFlag, nvmBrgSapFilterEType=nvmBrgSapFilterEType, mcmBrgConfPortMacFilterFlag=mcmBrgConfPortMacFilterFlag, nvmBrgAgeTime=nvmBrgAgeTime, MacAddress=MacAddress, Timeout=Timeout, mcmBrgSapFilterUpperRange=mcmBrgSapFilterUpperRange, nvmBrgEtFilterTable=nvmBrgEtFilterTable, nvmBrgMacFilterPortIndex=nvmBrgMacFilterPortIndex, nvmBrgMiscParamGroup=nvmBrgMiscParamGroup, mcmBrgEtFilterTable=mcmBrgEtFilterTable, mcmBrgSapFilterLowerRange=mcmBrgSapFilterLowerRange, mcmBrgSapFilterEntry=mcmBrgSapFilterEntry, nvmBrgMacFilterNumber=nvmBrgMacFilterNumber, mcmBrgTpCounterZero=mcmBrgTpCounterZero, nvmBrgSpoofCacheAge=nvmBrgSpoofCacheAge, nvmBrgSapFilterNumber=nvmBrgSapFilterNumber, mcmBrgSpanEnable=mcmBrgSpanEnable, mcmBrgPortCntrZeroTable=mcmBrgPortCntrZeroTable, mcmBrgCounterZero=mcmBrgCounterZero, mcmBrgSapFilterPortIndex=mcmBrgSapFilterPortIndex, mcmBrgCntr=mcmBrgCntr, nvmBrgMacType=nvmBrgMacType, mcmBrgConfPortIndex=mcmBrgConfPortIndex, mcmBrgEtFilterStatus=mcmBrgEtFilterStatus, nvmBrgConfPortMacInclExcl=nvmBrgConfPortMacInclExcl, nvmBrgConfPortType=nvmBrgConfPortType, mcmBrgMacFilterTable=mcmBrgMacFilterTable, nvmBrgSapFilterTable=nvmBrgSapFilterTable, nvmBrgMacFilterTable=nvmBrgMacFilterTable, nvmBrgEtFilterStatus=nvmBrgEtFilterStatus, nvmBrgIPBridged=nvmBrgIPBridged, nvmBrgSpanDebugEnable=nvmBrgSpanDebugEnable, nvmBrgMacAddress=nvmBrgMacAddress, mcmBrgMiscParamGroup=mcmBrgMiscParamGroup, mcmBrgPortCntrZeroIndex=mcmBrgPortCntrZeroIndex, mcmBrgSpoofCacheAge=mcmBrgSpoofCacheAge, mcmBrgStpCounterZero=mcmBrgStpCounterZero, nvmBrgGlobalParamGroup=nvmBrgGlobalParamGroup, nvmBrgConfPortSapFilterFlag=nvmBrgConfPortSapFilterFlag, mcmBrgConfPortMacInclExcl=mcmBrgConfPortMacInclExcl, mcmBrgConfPortEtInclExcl=mcmBrgConfPortEtInclExcl, mcmBrgEtFilterNumber=mcmBrgEtFilterNumber, nvmBrgPriority=nvmBrgPriority, mcmBrgSapFilterNumber=mcmBrgSapFilterNumber, nvmBrgSapFilterPortIndex=nvmBrgSapFilterPortIndex, nvmBrgConfPortEntry=nvmBrgConfPortEntry, nvmBrgSapFilterStatus=nvmBrgSapFilterStatus, mcmBrgDebugEnable=mcmBrgDebugEnable, mcmBrgIPBridged=mcmBrgIPBridged, mcmBrgMacFilterPortIndex=mcmBrgMacFilterPortIndex, nvmBrgConfPortSapInclExcl=nvmBrgConfPortSapInclExcl, mcmBrgEtFilterPortIndex=mcmBrgEtFilterPortIndex, mcmBrgConfPortEntry=mcmBrgConfPortEntry, nvmBrgConfPortPathCost=nvmBrgConfPortPathCost, nvmBrgEtFilterNumber=nvmBrgEtFilterNumber, nvmBrgMacFilterEntry=nvmBrgMacFilterEntry, nvmBrgDebugEnable=nvmBrgDebugEnable, mcmBrgConfPortSapFilterFlag=mcmBrgConfPortSapFilterFlag, mcmBrgAgeTime=mcmBrgAgeTime, mcmBrgEtFilterEntry=mcmBrgEtFilterEntry, mcmBrgSpoofEnable=mcmBrgSpoofEnable, mcmBrgConfPortPPA=mcmBrgConfPortPPA, nvmBrgConfPortMacFilterFlag=nvmBrgConfPortMacFilterFlag, nvmBrgSpanEnable=nvmBrgSpanEnable, nvmBrgStpParamGroup=nvmBrgStpParamGroup, mcmBrgEtFilterLowerRange=mcmBrgEtFilterLowerRange, mcmBrgEtFilterUpperRange=mcmBrgEtFilterUpperRange, mcmBrgBasePortCounterZero=mcmBrgBasePortCounterZero, mcmBrgNumInterfaces=mcmBrgNumInterfaces, mcmBrgConfPortEtFilterFlag=mcmBrgConfPortEtFilterFlag, nvmBrgConfPortEtInclExcl=nvmBrgConfPortEtInclExcl, nvmBrgEtFilterEType=nvmBrgEtFilterEType, nvmBrgConfPortTable=nvmBrgConfPortTable, mcmBrgStpPortCounterZero=mcmBrgStpPortCounterZero, nvmBrgSpoofEnable=nvmBrgSpoofEnable, nvmBrgSapFilterEntry=nvmBrgSapFilterEntry, mcmBrgTpPortCounterZero=mcmBrgTpPortCounterZero, mcmBrgSpanDebugEnable=mcmBrgSpanDebugEnable)
