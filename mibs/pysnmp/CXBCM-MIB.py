#
# PySNMP MIB module CXBCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXBCM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
Alias, SapIndex, cxBCM = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "SapIndex", "cxBCM")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, NotificationType, MibIdentifier, Unsigned32, TimeTicks, ModuleIdentity, Integer32, Gauge32, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "NotificationType", "MibIdentifier", "Unsigned32", "TimeTicks", "ModuleIdentity", "Integer32", "Gauge32", "Counter32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class LSapIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 30)

class CHIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1)

bcmTraps = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmTraps.setStatus('obsolete')
bcmCallHistoryTraps = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmCallHistoryTraps.setStatus('mandatory')
bcmSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmSoftwareVersion.setStatus('mandatory')
bcmMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 4), Integer32().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmMibLevel.setStatus('mandatory')
bcmModuleState = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uninitialized", 1), ("initializing", 2), ("registering", 3), ("operational", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmModuleState.setStatus('mandatory')
bcmNbActiveUSap = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbActiveUSap.setStatus('mandatory')
bcmNbActiveDsl = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbActiveDsl.setStatus('mandatory')
bcmLSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50), )
if mibBuilder.loadTexts: bcmLSapTable.setStatus('mandatory')
bcmLSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmLSapDslNumber"), (0, "CXBCM-MIB", "bcmLSapNumber"))
if mibBuilder.loadTexts: bcmLSapEntry.setStatus('mandatory')
bcmLSapDslNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapDslNumber.setStatus('mandatory')
bcmLSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 2), LSapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNumber.setStatus('mandatory')
bcmLSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapAlias.setStatus('mandatory')
bcmLSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapCompanionAlias.setStatus('mandatory')
bcmLSapDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapDirectoryIndex.setStatus('mandatory')
bcmLSapLowDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapLowDirectoryIndex.setStatus('mandatory')
bcmLSapHighDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapHighDirectoryIndex.setStatus('mandatory')
bcmLSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("not-used", 1), ("unbound", 2), ("bound", 3), ("registering", 4), ("idle", 5), ("outgoing", 6), ("incoming", 7), ("active", 8), ("release", 9), ("pending", 10), ("overlap-rx", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapState.setStatus('mandatory')
bcmLSapStatusEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noEvent", 1), ("dslOutOfRange", 2), ("lsapOutOfRange", 3), ("lsapMngmtRegistrationFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapStatusEvent.setStatus('obsolete')
bcmLSapPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapPeerAddress.setStatus('mandatory')
bcmLSapPeerSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapPeerSubAddress.setStatus('mandatory')
bcmLSapCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("originate", 2), ("answer", 3), ("callback", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallOrigin.setStatus('mandatory')
bcmLSapInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("speech", 2), ("unrestricted-digital", 3), ("restricted-digital", 4), ("audio-31", 5), ("audio-7", 6), ("video", 7), ("packet", 8))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapInfoType.setStatus('mandatory')
bcmLSapCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallId.setStatus('mandatory')
bcmLSapUSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapUSapId.setStatus('mandatory')
bcmLSapChannelCES = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapChannelCES.setStatus('mandatory')
bcmLSapCallSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 49), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallSetupTime.setStatus('mandatory')
bcmLSapCallConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 50), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallConnectTime.setStatus('mandatory')
bcmLSapCallDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallDisconnectTime.setStatus('mandatory')
bcmLSapNbInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNbInCalls.setStatus('mandatory')
bcmLSapNbInCallsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNbInCallsConnected.setStatus('mandatory')
bcmLSapNbOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNbOutCalls.setStatus('mandatory')
bcmLSapNbOutCallsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNbOutCallsConnected.setStatus('mandatory')
bcmDslTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51), )
if mibBuilder.loadTexts: bcmDslTable.setStatus('mandatory')
bcmDslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmDslNumber"))
if mibBuilder.loadTexts: bcmDslEntry.setStatus('mandatory')
bcmDslNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslNumber.setStatus('mandatory')
bcmDslRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslRowStatus.setStatus('mandatory')
bcmDslSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 8, 9))).clone(namedValues=NamedValues(("unspecified", 1), ("bri-5ESS", 3), ("bri-DMS100", 5), ("bri-NI1", 8), ("bri-NI2", 9))).clone('bri-NI1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslSwitchType.setStatus('obsolete')
bcmDslBChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslBChannelCount.setStatus('mandatory')
bcmDslBChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dialup", 1), ("leased", 2))).clone('dialup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslBChannelType.setStatus('mandatory')
bcmDslMngmtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslMngmtTimer.setStatus('mandatory')
bcmDslInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate56kbps", 1), ("rate64kbps", 2))).clone('rate64kbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslInfoRate.setStatus('mandatory')
bcmDslSendingProceed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("en-bloc", 1), ("overlap", 2))).clone('en-bloc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslSendingProceed.setStatus('obsolete')
bcmDslInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bri", 2), ("pri", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslInterfaceType.setStatus('mandatory')
bcmDslBriType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("u", 2), ("s-t", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslBriType.setStatus('mandatory')
bcmDslPriType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ansi", 2), ("cept", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslPriType.setStatus('mandatory')
bcmDslNbChannelInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslNbChannelInUse.setStatus('mandatory')
bcmDslOutGoingCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslOutGoingCallId.setStatus('mandatory')
bcmDslEffectiveRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslEffectiveRetries.setStatus('mandatory')
bcmUSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52), )
if mibBuilder.loadTexts: bcmUSapTable.setStatus('mandatory')
bcmUSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmUSapNumber"))
if mibBuilder.loadTexts: bcmUSapEntry.setStatus('mandatory')
bcmUSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNumber.setStatus('mandatory')
bcmUSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapRowStatus.setStatus('mandatory')
bcmUSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapAlias.setStatus('mandatory')
bcmUSapLowDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapLowDirectoryIndex.setStatus('mandatory')
bcmUSapHighDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapHighDirectoryIndex.setStatus('mandatory')
bcmUSapAnswerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("answer-none", 1), ("answer-all", 2), ("answer-address", 3), ("answer-subaddress", 4))).clone('answer-all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapAnswerMode.setStatus('mandatory')
bcmUSapPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("both", 3), ("callback", 4))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapPermission.setStatus('mandatory')
bcmUSapCallTypeAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("voice-call", 1), ("data-call", 2), ("packet-call", 3))).clone('data-call')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapCallTypeAccepted.setStatus('mandatory')
bcmUSapSendingProceed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("en-bloc", 1), ("overlap", 2))).clone('en-bloc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapSendingProceed.setStatus('mandatory')
bcmUSapVoiceInterDigitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceInterDigitTimer.setStatus('mandatory')
bcmUSapVoiceHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 17), Integer32().clone(1073741823)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceHuntGroup.setStatus('mandatory')
bcmUSapVoiceHuntDsl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 18), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceHuntDsl.setStatus('mandatory')
bcmUSapVoiceAddressPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("isdn", 2), ("telephony", 3), ("x-121", 4), ("telex", 5), ("national", 9), ("private", 10))).clone('isdn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceAddressPlan.setStatus('mandatory')
bcmUSapVoiceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2), ("national", 3), ("private", 4), ("subscriber", 5))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceAddressType.setStatus('mandatory')
bcmUSapVoiceCodingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mu-law", 1), ("a-law", 2))).clone('mu-law')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceCodingScheme.setStatus('mandatory')
bcmUSapVoiceCallRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-used", 1), ("address", 2), ("subaddress", 3), ("address-and-subaddress", 4))).clone('not-used')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceCallRoutingMode.setStatus('mandatory')
bcmUSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11))).clone(namedValues=NamedValues(("not-used", 1), ("unbound", 2), ("bound", 3), ("registering", 4), ("idle", 5), ("outgoing", 6), ("incoming", 7), ("active", 8), ("release", 9), ("overlap-rx", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapState.setStatus('mandatory')
bcmUSapStatusEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEvent", 1), ("usapOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapStatusEvent.setStatus('obsolete')
bcmUSapNbChannelBound = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNbChannelBound.setStatus('mandatory')
bcmUSapTotalConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 43), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapTotalConnectTime.setStatus('mandatory')
bcmUSapLastSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 44), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLastSetupTime.setStatus('mandatory')
bcmUSapLastConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 45), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLastConnectTime.setStatus('mandatory')
bcmUSapLastDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 46), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLastDisconnectTime.setStatus('mandatory')
bcmUSapLastDisconnectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLastDisconnectCause.setStatus('mandatory')
bcmUSapDslId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapDslId.setStatus('mandatory')
bcmUSapLocalSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLocalSapId.setStatus('obsolete')
bcmUSapSpeedDialDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapSpeedDialDirectoryIndex.setStatus('mandatory')
bcmUSapVoiceChannelUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapVoiceChannelUsed.setStatus('mandatory')
bcmUSapNbSuccessCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNbSuccessCalls.setStatus('mandatory')
bcmUSapNbFailedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNbFailedCalls.setStatus('mandatory')
bcmUSapNbRefusedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNbRefusedCalls.setStatus('mandatory')
bcmDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53), )
if mibBuilder.loadTexts: bcmDirectoryTable.setStatus('mandatory')
bcmDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmDirectoryNumber"))
if mibBuilder.loadTexts: bcmDirectoryEntry.setStatus('mandatory')
bcmDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDirectoryNumber.setStatus('mandatory')
bcmDirectoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectoryRowStatus.setStatus('mandatory')
bcmDirectoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectoryAddress.setStatus('mandatory')
bcmDirectoryAddressPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("isdn", 2), ("telephony", 3), ("x-121", 4), ("telex", 5), ("national", 9), ("private", 10))).clone('isdn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectoryAddressPlan.setStatus('mandatory')
bcmDirectoryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2), ("national", 3), ("private", 4), ("subscriber", 5))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectoryAddressType.setStatus('mandatory')
bcmDirectorySubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectorySubAddress.setStatus('mandatory')
bcmDirectorySubAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("nsap", 1), ("user-defines", 3))).clone('user-defines')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectorySubAddressType.setStatus('mandatory')
bcmDirectorySpid = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectorySpid.setStatus('mandatory')
bcmCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54), )
if mibBuilder.loadTexts: bcmCallHistoryTable.setStatus('mandatory')
bcmCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmCallHistoryUSapNumber"), (0, "CXBCM-MIB", "bcmCallHistoryNumber"))
if mibBuilder.loadTexts: bcmCallHistoryEntry.setStatus('mandatory')
bcmCallHistoryUSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryUSapNumber.setStatus('mandatory')
bcmCallHistoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 2), CHIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryNumber.setStatus('mandatory')
bcmCallHistoryDslChannelUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryDslChannelUsed.setStatus('mandatory')
bcmCallHistoryBChannelsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryBChannelsUsed.setStatus('mandatory')
bcmCallHistoryPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryPeerAddress.setStatus('mandatory')
bcmCallHistoryPeerSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryPeerSubAddress.setStatus('mandatory')
bcmCallHistoryOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown-src", 1), ("originate-src", 2), ("answer-src", 3), ("callback-src", 4))).clone('unknown-src')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryOrigin.setStatus('mandatory')
bcmCallHistorySetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 45), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistorySetupTime.setStatus('mandatory')
bcmCallHistoryConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 46), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryConnectTime.setStatus('mandatory')
bcmCallHistoryDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 47), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryDisconnectTime.setStatus('mandatory')
bcmDebugTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55), )
if mibBuilder.loadTexts: bcmDebugTable.setStatus('mandatory')
bcmDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmDebugNumber"))
if mibBuilder.loadTexts: bcmDebugEntry.setStatus('mandatory')
bcmDebugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDebugNumber.setStatus('mandatory')
bcmDebugDslCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugDslCB.setStatus('mandatory')
bcmDebugLSapCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugLSapCB.setStatus('mandatory')
bcmDebugUSapCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugUSapCB.setStatus('mandatory')
bcmDebugCallHistoryCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugCallHistoryCB.setStatus('mandatory')
bcmDebugDataScope = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugDataScope.setStatus('mandatory')
bcmDebugDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugDisconnect.setStatus('mandatory')
bcmLSapStatusIndication = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48) + (0,1)).setObjects(("CXBCM-MIB", "bcmLSapDslNumber"), ("CXBCM-MIB", "bcmLSapNumber"), ("CXBCM-MIB", "bcmLSapStatusEvent"))
bcmCallHistoryStatusIndication = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48) + (0,2)).setObjects(("CXBCM-MIB", "bcmCallHistoryUSapNumber"), ("CXBCM-MIB", "bcmCallHistoryNumber"), ("CXBCM-MIB", "bcmCallHistoryDslChannelUsed"), ("CXBCM-MIB", "bcmCallHistoryBChannelsUsed"), ("CXBCM-MIB", "bcmCallHistoryPeerAddress"), ("CXBCM-MIB", "bcmCallHistoryPeerSubAddress"), ("CXBCM-MIB", "bcmCallHistoryOrigin"), ("CXBCM-MIB", "bcmCallHistorySetupTime"), ("CXBCM-MIB", "bcmCallHistoryConnectTime"), ("CXBCM-MIB", "bcmCallHistoryDisconnectTime"))
mibBuilder.exportSymbols("CXBCM-MIB", bcmUSapEntry=bcmUSapEntry, bcmUSapRowStatus=bcmUSapRowStatus, bcmUSapNbSuccessCalls=bcmUSapNbSuccessCalls, bcmCallHistoryDisconnectTime=bcmCallHistoryDisconnectTime, bcmModuleState=bcmModuleState, bcmUSapLastSetupTime=bcmUSapLastSetupTime, bcmDebugUSapCB=bcmDebugUSapCB, bcmNbActiveUSap=bcmNbActiveUSap, bcmUSapStatusEvent=bcmUSapStatusEvent, bcmUSapNbFailedCalls=bcmUSapNbFailedCalls, bcmCallHistoryNumber=bcmCallHistoryNumber, bcmUSapTable=bcmUSapTable, bcmCallHistoryStatusIndication=bcmCallHistoryStatusIndication, bcmSoftwareVersion=bcmSoftwareVersion, bcmLSapNumber=bcmLSapNumber, bcmDslBChannelCount=bcmDslBChannelCount, bcmTraps=bcmTraps, bcmDirectoryAddressType=bcmDirectoryAddressType, bcmCallHistoryDslChannelUsed=bcmCallHistoryDslChannelUsed, bcmLSapTable=bcmLSapTable, bcmDebugDslCB=bcmDebugDslCB, bcmLSapDirectoryIndex=bcmLSapDirectoryIndex, bcmNbActiveDsl=bcmNbActiveDsl, bcmUSapLowDirectoryIndex=bcmUSapLowDirectoryIndex, bcmUSapNumber=bcmUSapNumber, bcmLSapHighDirectoryIndex=bcmLSapHighDirectoryIndex, bcmDebugLSapCB=bcmDebugLSapCB, bcmUSapLastDisconnectTime=bcmUSapLastDisconnectTime, bcmLSapCallSetupTime=bcmLSapCallSetupTime, bcmUSapAlias=bcmUSapAlias, bcmDirectoryRowStatus=bcmDirectoryRowStatus, bcmDebugDisconnect=bcmDebugDisconnect, bcmUSapVoiceInterDigitTimer=bcmUSapVoiceInterDigitTimer, bcmDslOutGoingCallId=bcmDslOutGoingCallId, bcmUSapPermission=bcmUSapPermission, bcmCallHistoryPeerAddress=bcmCallHistoryPeerAddress, bcmLSapInfoType=bcmLSapInfoType, bcmDslRowStatus=bcmDslRowStatus, bcmDslTable=bcmDslTable, bcmLSapCallId=bcmLSapCallId, bcmDebugDataScope=bcmDebugDataScope, bcmLSapNbInCallsConnected=bcmLSapNbInCallsConnected, bcmDslEntry=bcmDslEntry, bcmDslBChannelType=bcmDslBChannelType, bcmDirectoryTable=bcmDirectoryTable, bcmLSapAlias=bcmLSapAlias, bcmCallHistorySetupTime=bcmCallHistorySetupTime, bcmDirectoryAddressPlan=bcmDirectoryAddressPlan, bcmCallHistoryPeerSubAddress=bcmCallHistoryPeerSubAddress, bcmDslEffectiveRetries=bcmDslEffectiveRetries, bcmUSapHighDirectoryIndex=bcmUSapHighDirectoryIndex, bcmUSapDslId=bcmUSapDslId, bcmUSapVoiceCodingScheme=bcmUSapVoiceCodingScheme, bcmDslInfoRate=bcmDslInfoRate, bcmUSapVoiceHuntDsl=bcmUSapVoiceHuntDsl, bcmUSapLastConnectTime=bcmUSapLastConnectTime, bcmCallHistoryConnectTime=bcmCallHistoryConnectTime, bcmCallHistoryUSapNumber=bcmCallHistoryUSapNumber, bcmUSapAnswerMode=bcmUSapAnswerMode, bcmUSapVoiceCallRoutingMode=bcmUSapVoiceCallRoutingMode, bcmLSapEntry=bcmLSapEntry, bcmDslSendingProceed=bcmDslSendingProceed, bcmDirectoryEntry=bcmDirectoryEntry, bcmDslInterfaceType=bcmDslInterfaceType, bcmLSapNbOutCalls=bcmLSapNbOutCalls, bcmUSapTotalConnectTime=bcmUSapTotalConnectTime, bcmUSapLocalSapId=bcmUSapLocalSapId, bcmUSapCallTypeAccepted=bcmUSapCallTypeAccepted, bcmDirectorySpid=bcmDirectorySpid, bcmDslMngmtTimer=bcmDslMngmtTimer, bcmDslSwitchType=bcmDslSwitchType, bcmUSapVoiceChannelUsed=bcmUSapVoiceChannelUsed, bcmLSapCallOrigin=bcmLSapCallOrigin, bcmDirectorySubAddressType=bcmDirectorySubAddressType, bcmDirectoryNumber=bcmDirectoryNumber, bcmDebugNumber=bcmDebugNumber, bcmUSapLastDisconnectCause=bcmUSapLastDisconnectCause, bcmLSapNbOutCallsConnected=bcmLSapNbOutCallsConnected, bcmDslNbChannelInUse=bcmDslNbChannelInUse, bcmUSapSpeedDialDirectoryIndex=bcmUSapSpeedDialDirectoryIndex, bcmLSapState=bcmLSapState, bcmDslPriType=bcmDslPriType, bcmDirectoryAddress=bcmDirectoryAddress, bcmUSapVoiceAddressPlan=bcmUSapVoiceAddressPlan, bcmLSapCompanionAlias=bcmLSapCompanionAlias, bcmLSapChannelCES=bcmLSapChannelCES, bcmUSapNbChannelBound=bcmUSapNbChannelBound, CHIndex=CHIndex, bcmCallHistoryTraps=bcmCallHistoryTraps, bcmLSapNbInCalls=bcmLSapNbInCalls, bcmMibLevel=bcmMibLevel, bcmLSapCallConnectTime=bcmLSapCallConnectTime, bcmCallHistoryOrigin=bcmCallHistoryOrigin, bcmUSapVoiceHuntGroup=bcmUSapVoiceHuntGroup, bcmUSapNbRefusedCalls=bcmUSapNbRefusedCalls, bcmDebugTable=bcmDebugTable, bcmDirectorySubAddress=bcmDirectorySubAddress, bcmDebugEntry=bcmDebugEntry, bcmLSapPeerSubAddress=bcmLSapPeerSubAddress, bcmDslNumber=bcmDslNumber, bcmLSapLowDirectoryIndex=bcmLSapLowDirectoryIndex, bcmCallHistoryTable=bcmCallHistoryTable, bcmUSapVoiceAddressType=bcmUSapVoiceAddressType, bcmUSapSendingProceed=bcmUSapSendingProceed, bcmLSapCallDisconnectTime=bcmLSapCallDisconnectTime, bcmLSapDslNumber=bcmLSapDslNumber, bcmLSapUSapId=bcmLSapUSapId, bcmCallHistoryBChannelsUsed=bcmCallHistoryBChannelsUsed, LSapIndex=LSapIndex, bcmUSapState=bcmUSapState, bcmLSapPeerAddress=bcmLSapPeerAddress, bcmLSapStatusIndication=bcmLSapStatusIndication, bcmLSapStatusEvent=bcmLSapStatusEvent, bcmDslBriType=bcmDslBriType, bcmCallHistoryEntry=bcmCallHistoryEntry, bcmDebugCallHistoryCB=bcmDebugCallHistoryCB)
