#
# PySNMP MIB module CISCO-ATM-RM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-RM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Bits, Counter64, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, ModuleIdentity, Counter32, TimeTicks, MibIdentifier, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Counter64", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "ModuleIdentity", "Counter32", "TimeTicks", "MibIdentifier", "iso", "NotificationType")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoAtmRmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 10))
ciscoAtmRmMIB.setRevisions(('2002-06-03 00:00', '2001-01-29 00:00', '1999-12-22 00:00', '1999-07-27 00:00', '1999-04-30 00:00', '1999-04-14 00:00', '1999-03-11 00:00', '1998-11-24 00:00', '1998-11-03 00:00', '1998-07-26 00:00', '1997-12-03 00:00', '1997-05-26 00:00', '1996-11-11 00:00',))
if mibBuilder.loadTexts: ciscoAtmRmMIB.setLastUpdated('200206030000Z')
if mibBuilder.loadTexts: ciscoAtmRmMIB.setOrganization('Cisco System Inc.')
ciscoAtmRmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1))
class ForceValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forceChange", 1), ("noForceChange", 2))

class FineQueueThreshold(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("percent12", 1), ("percent25", 2), ("percent37", 3), ("percent50", 4), ("percent62", 5), ("percent75", 6), ("percent87", 7), ("percent100", 8))

class LsPerVcqServiceClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("c1", 1), ("c2", 2), ("c3", 3), ("c4", 4), ("c5", 5), ("c6", 6), ("c7", 7), ("c8", 8))

class LsPerVcqServiceClassNoC1(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("c2", 2), ("c3", 3), ("c4", 4), ("c5", 5), ("c6", 6), ("c7", 7), ("c8", 8))

class LsPerVcqThresholdGroup(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("tg1", 1), ("tg2", 2), ("tg3", 3), ("tg4", 4), ("tg5", 5), ("tg6", 6), ("tg7", 7), ("tg8", 8), ("tg9", 9), ("tg10", 10), ("tg11", 11), ("tg12", 12), ("tg13", 13), ("tg14", 14), ("tg15", 15), ("tg16", 16))

class LsPerVcqThresholdGroupService(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("cbr", 1), ("vbrRt", 2), ("vbrNrt", 3), ("abr", 4), ("ubr", 5))

class CgrPerVcqModuleId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4), ("module5", 5), ("module6", 6), ("module7", 7), ("module8", 8))

ciscoAtmRmSwitchCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1))
ciscoAtmRmSwitchSharedMem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 2))
ciscoAtmRmIfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3))
ciscoAtmRmIfState = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4))
ciscoAtmRmIfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5))
ciscoAtmRmIfSharedMem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6))
ciscoLsPerVcqAtmRmSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7))
ciscoLsPerVcqAtmRmIf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8))
ciscoCgrPerVcqAtmRmSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9))
ciscoAtmRmTrafShaperIf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10))
rmSwitchOverSubFactor = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmSwitchOverSubFactor.setStatus('current')
rmSwitchScrMarginFactor = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmSwitchScrMarginFactor.setStatus('current')
rmSwitchAbrCongNotify = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("relativeRate", 1), ("efci", 2), ("efciAndRelativeRate", 3))).clone('relativeRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmSwitchAbrCongNotify.setStatus('current')
rmDefaultQosObjectiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 4), )
if mibBuilder.loadTexts: rmDefaultQosObjectiveTable.setStatus('current')
rmDefaultQosObjectiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-ATM-RM-MIB", "rmDefaultQosServiceCategory"))
if mibBuilder.loadTexts: rmDefaultQosObjectiveEntry.setStatus('current')
rmDefaultQosServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cbr", 1), ("vbrRt", 2), ("vbrNrt", 3))))
if mibBuilder.loadTexts: rmDefaultQosServiceCategory.setStatus('current')
rmScDefaultQosMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmScDefaultQosMaxCtd.setStatus('current')
rmScDefaultQosPeakToPeakCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmScDefaultQosPeakToPeakCdv.setStatus('current')
rmScDefaultQosClr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmScDefaultQosClr.setStatus('current')
rmScDefaultQosClrClp01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmScDefaultQosClrClp01.setStatus('current')
sharedMemRmSwitchQueuedCellTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 2, 1), )
if mibBuilder.loadTexts: sharedMemRmSwitchQueuedCellTable.setStatus('current')
sharedMemRmSwitchQueuedCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ATM-RM-MIB", "sharedMemRmCellPriority"))
if mibBuilder.loadTexts: sharedMemRmSwitchQueuedCellEntry.setStatus('current')
sharedMemRmCellPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4))))
if mibBuilder.loadTexts: sharedMemRmCellPriority.setStatus('current')
sharedMemRmSwitchQueuedCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sharedMemRmSwitchQueuedCellLimit.setStatus('current')
sharedMemRmSwitchQueuedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 2, 1, 1, 3), Gauge32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedMemRmSwitchQueuedCellCount.setStatus('current')
rmIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3), )
if mibBuilder.loadTexts: rmIfCfgTable.setStatus('current')
rmIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rmIfCfgEntry.setStatus('current')
rmIfOutPacingRateRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 1), Unsigned32()).setUnits('kilobits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfOutPacingRateRequested.setStatus('current')
rmIfOutPacingRateInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 2), Unsigned32()).setUnits('kilobits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfOutPacingRateInstalled.setStatus('current')
rmIfOutPacingForce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 3), ForceValue().clone('noForceChange')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfOutPacingForce.setStatus('current')
rmIfLinkDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('kilometers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfLinkDistance.setStatus('current')
rmIfBestEffortLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 5), Unsigned32().clone(4294967295)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfBestEffortLimit.setStatus('current')
rmIfCbrDefaultRxUpcTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 6), Unsigned32().clone(1024)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfCbrDefaultRxUpcTolerance.setStatus('current')
rmIfVbrRtDefaultRxUpcTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 7), Unsigned32().clone(1024)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfVbrRtDefaultRxUpcTolerance.setStatus('current')
rmIfVbrNrtDefaultRxUpcTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 8), Unsigned32().clone(1024)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfVbrNrtDefaultRxUpcTolerance.setStatus('current')
rmIfAbrDefaultRxUpcTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 9), Unsigned32().clone(1024)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfAbrDefaultRxUpcTolerance.setStatus('current')
rmIfUbrDefaultRxUpcTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 10), Unsigned32().clone(1024)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfUbrDefaultRxUpcTolerance.setStatus('current')
rmIfVbrRtDefaultRxUpcCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 11), Unsigned32().clone(1024)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfVbrRtDefaultRxUpcCdvt.setStatus('current')
rmIfVbrNrtDefaultRxUpcCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 12), Unsigned32().clone(1024)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfVbrNrtDefaultRxUpcCdvt.setStatus('current')
rmIfServCategorySupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfServCategorySupport.setStatus('current')
rmIfFramingOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfFramingOverhead.setStatus('current')
rmIfFramingOverheadForce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 15), ForceValue().clone('noForceChange')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfFramingOverheadForce.setStatus('current')
rmIfOverBooking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfOverBooking.setStatus('current')
rmIfVbrRtPerClassOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3200)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfVbrRtPerClassOverbooking.setStatus('current')
rmIfVbrNrtPerClassOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3200)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfVbrNrtPerClassOverbooking.setStatus('current')
rmIfAbrPerClassOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3200)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfAbrPerClassOverbooking.setStatus('current')
rmIfUbrPerClassOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3200)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfUbrPerClassOverbooking.setStatus('current')
rmIfDirectionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4), )
if mibBuilder.loadTexts: rmIfDirectionCfgTable.setStatus('current')
rmIfDirectionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-RM-MIB", "rmIfDirection"))
if mibBuilder.loadTexts: rmIfDirectionCfgEntry.setStatus('current')
rmIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receive", 1), ("transmit", 2))))
if mibBuilder.loadTexts: rmIfDirection.setStatus('current')
rmIfDirControlLinkShareMaxAgg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMaxAgg.setStatus('current')
rmIfDirControlLinkShareMinCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMinCbr.setStatus('current')
rmIfDirControlLinkShareMaxCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMaxCbr.setStatus('current')
rmIfDirControlLinkShareMinVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMinVbr.setStatus('current')
rmIfDirControlLinkShareMaxVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMaxVbr.setStatus('current')
rmIfDirMaxCbrPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 7), Unsigned32().clone(4294967295)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxCbrPcr.setStatus('current')
rmIfDirMaxCbrTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 8), Unsigned32().clone(4294967295)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxCbrTolerance.setStatus('current')
rmIfDirMaxVbrPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 9), Unsigned32().clone(4294967295)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxVbrPcr.setStatus('current')
rmIfDirMaxVbrScr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 10), Unsigned32().clone(4294967295)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxVbrScr.setStatus('current')
rmIfDirMaxVbrTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 11), Unsigned32().clone(4294967295)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxVbrTolerance.setStatus('current')
rmIfDirMaxAbrPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 12), Unsigned32().clone(4294967295)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxAbrPcr.setStatus('current')
rmIfDirMaxAbrTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 13), Unsigned32().clone(4294967295)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxAbrTolerance.setStatus('current')
rmIfDirMaxUbrPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 14), Unsigned32().clone(4294967295)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxUbrPcr.setStatus('current')
rmIfDirMaxUbrTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 15), Unsigned32().clone(4294967295)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxUbrTolerance.setStatus('current')
rmIfDirMaxAbrMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 16), Unsigned32().clone(4294967295)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxAbrMcr.setStatus('current')
rmIfDirMaxUbrMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 17), Unsigned32().clone(4294967295)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxUbrMcr.setStatus('current')
rmIfDirMaxVbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 18), Unsigned32().clone(4294967295)).setUnits('cell-times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirMaxVbrCdvt.setStatus('current')
rmIfDirControlLinkShareMinAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMinAbr.setStatus('current')
rmIfDirControlLinkShareMaxAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMaxAbr.setStatus('current')
rmIfDirControlLinkShareMinUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMinUbr.setStatus('current')
rmIfDirControlLinkShareMaxUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 95)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmIfDirControlLinkShareMaxUbr.setStatus('current')
rmIfServiceCategoryStateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1), )
if mibBuilder.loadTexts: rmIfServiceCategoryStateTable.setStatus('current')
rmIfServiceCategoryStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-RM-MIB", "rmIfSc"))
if mibBuilder.loadTexts: rmIfServiceCategoryStateEntry.setStatus('current')
rmIfSc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbrRt", 2), ("vbrNrt", 3), ("abr", 4), ("ubr", 5))))
if mibBuilder.loadTexts: rmIfSc.setStatus('current')
rmIfScRxAcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 2), Gauge32()).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRxAcr.setStatus('current')
rmIfScTxAcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 3), Gauge32()).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScTxAcr.setStatus('current')
rmIfScRxAlcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 4), Gauge32()).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRxAlcr.setStatus('current')
rmIfScTxAlcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 5), Gauge32()).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScTxAlcr.setStatus('current')
rmIfScNumSvxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 6), Gauge32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScNumSvxConns.setStatus('current')
rmIfScNumPvxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 7), Gauge32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScNumPvxConns.setStatus('current')
rmIfScTxMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 8), Gauge32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScTxMaxCtd.setStatus('current')
rmIfScTxP2PeakCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 9), Gauge32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScTxP2PeakCdv.setStatus('current')
rmIfScTxClr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScTxClr.setStatus('current')
rmIfScTxClrClp01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScTxClrClp01.setStatus('current')
rmIfScRxDynBwSvcAcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 12), Gauge32()).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRxDynBwSvcAcr.setStatus('current')
rmIfScTxDynBwSvcAcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 4, 1, 1, 13), Gauge32()).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScTxDynBwSvcAcr.setStatus('current')
rmIfServiceCategoryStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1), )
if mibBuilder.loadTexts: rmIfServiceCategoryStatisticsTable.setStatus('current')
rmIfServiceCategoryStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-RM-MIB", "rmIfSc"))
if mibBuilder.loadTexts: rmIfServiceCategoryStatisticsEntry.setStatus('current')
rmIfScRcacResultNumAdmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumAdmit.setStatus('current')
rmIfScRcacResultNumTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumTotalRequests.setStatus('current')
rmIfScRcacResultNumFailTraffComb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumFailTraffComb.setStatus('current')
rmIfScRcacResultNumFailBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumFailBw.setStatus('current')
rmIfScRcacResultNumFailLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumFailLoss.setStatus('current')
rmIfScRcacResultNumFailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumFailDelay.setStatus('current')
rmIfScRcacResultNumFailCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumFailCdv.setStatus('current')
rmIfScRcacResultNumFailBeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumFailBeLimit.setStatus('current')
rmIfScRcacResultNumFailParmLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumFailParmLimit.setStatus('current')
rmIfScRcacResultNumFailOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmIfScRcacResultNumFailOther.setStatus('current')
sharedMemRmIfOutputQCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 1), )
if mibBuilder.loadTexts: sharedMemRmIfOutputQCfgTable.setStatus('current')
sharedMemRmIfOutputQCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-RM-MIB", "sharedMemRmIfOutputQ"))
if mibBuilder.loadTexts: sharedMemRmIfOutputQCfgEntry.setStatus('current')
sharedMemRmIfOutputQ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4))))
if mibBuilder.loadTexts: sharedMemRmIfOutputQ.setStatus('current')
sharedMemRmIfOutputQServCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedMemRmIfOutputQServCategory.setStatus('current')
sharedMemRmIfOutputQRequestedMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65504))).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sharedMemRmIfOutputQRequestedMaxSize.setStatus('current')
sharedMemRmIfOutputQInstalledMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65504))).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedMemRmIfOutputQInstalledMaxSize.setStatus('current')
sharedMemRmIfOutputQMaxSizeForce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 1, 1, 5), ForceValue().clone('noForceChange')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sharedMemRmIfOutputQMaxSizeForce.setStatus('current')
sharedMemRmIfOutputQCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 1, 1, 6), Gauge32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedMemRmIfOutputQCellCount.setStatus('current')
sharedMemRmIfThresholdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 2), )
if mibBuilder.loadTexts: sharedMemRmIfThresholdCfgTable.setStatus('current')
sharedMemRmIfThresholdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-RM-MIB", "rmIfSc"))
if mibBuilder.loadTexts: sharedMemRmIfThresholdCfgEntry.setStatus('current')
sharedMemRmIfDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 2, 1, 1), FineQueueThreshold().clone('percent50')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sharedMemRmIfDiscardThreshold.setStatus('current')
sharedMemRmIfEfciThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("percent12", 1), ("percent25", 2), ("percent50", 3), ("percent100", 4))).clone('percent25')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sharedMemRmIfEfciThreshold.setStatus('current')
sharedMemRmIfAbrRelativeRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 6, 2, 1, 3), FineQueueThreshold().clone('percent25')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sharedMemRmIfAbrRelativeRateThreshold.setStatus('current')
lsPerVcqRmThreshGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1), )
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpTable.setStatus('current')
lsPerVcqRmThreshGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrp"))
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpEntry.setStatus('current')
lsPerVcqRmThreshGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1, 1), LsPerVcqThresholdGroup())
if mibBuilder.loadTexts: lsPerVcqRmThreshGrp.setStatus('current')
lsPerVcqRmThreshGrpMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(65535)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpMaxSize.setStatus('current')
lsPerVcqRmThreshGrpQMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(31, 16383))).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpQMaxSize.setStatus('current')
lsPerVcqRmThreshGrpQMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpQMinSize.setStatus('current')
lsPerVcqRmThreshGrpDiscThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpDiscThreshold.setStatus('current')
lsPerVcqRmThreshGrpMarkThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpMarkThreshold.setStatus('current')
lsPerVcqRmThreshGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpName.setStatus('current')
lsPerVcqRmThreshGrpCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 1, 1, 8), Gauge32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpCellCount.setStatus('current')
lsPerVcqRmThreshGrpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 2), )
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpServiceTable.setStatus('current')
lsPerVcqRmThreshGrpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpService"))
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpServiceEntry.setStatus('current')
lsPerVcqRmThreshGrpService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 2, 1, 1), LsPerVcqThresholdGroupService())
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpService.setStatus('current')
lsPerVcqRmThreshGrpServGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 2, 1, 2), LsPerVcqThresholdGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmThreshGrpServGroup.setStatus('current')
lsPerVcqRmHierarchicalSchedulingMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmHierarchicalSchedulingMode.setStatus('current')
cgrPerVcqRmThreshGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1), )
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpTable.setStatus('current')
cgrPerVcqRmThreshGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-ATM-RM-MIB", "cgrPerVcqModuleId"), (0, "CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrp"))
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpEntry.setStatus('current')
cgrPerVcqModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 1), CgrPerVcqModuleId())
if mibBuilder.loadTexts: cgrPerVcqModuleId.setStatus('current')
cgrPerVcqRmThreshGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 2), LsPerVcqThresholdGroup())
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrp.setStatus('current')
cgrPerVcqRmThreshGrpMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 131071)).clone(131071)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpMaxSize.setStatus('current')
cgrPerVcqRmThreshGrpQMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(31, 16383))).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpQMaxSize.setStatus('current')
cgrPerVcqRmThreshGrpQMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpQMinSize.setStatus('current')
cgrPerVcqRmThreshGrpDiscThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpDiscThreshold.setStatus('current')
cgrPerVcqRmThreshGrpMarkThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpMarkThreshold.setStatus('current')
cgrPerVcqRmThreshGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpName.setStatus('current')
cgrPerVcqRmThreshGrpCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 1, 1, 9), Gauge32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpCellCount.setStatus('current')
cgrPerVcqRmThreshGrpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 2), )
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpServiceTable.setStatus('current')
cgrPerVcqRmThreshGrpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 2, 1), ).setIndexNames((0, "CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpService"))
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpServiceEntry.setStatus('current')
cgrPerVcqRmThreshGrpService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 2, 1, 1), LsPerVcqThresholdGroupService())
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpService.setStatus('current')
cgrPerVcqRmThreshGrpServGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 2, 1, 2), LsPerVcqThresholdGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrPerVcqRmThreshGrpServGroup.setStatus('current')
cgrPerVcqRmHierarchicalSchedulingMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrPerVcqRmHierarchicalSchedulingMode.setStatus('current')
lsPerVcqRmIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8, 1), )
if mibBuilder.loadTexts: lsPerVcqRmIfTable.setStatus('current')
lsPerVcqRmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lsPerVcqRmIfEntry.setStatus('current')
lsPerVcqRmIfMinWrrServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8, 1, 1, 1), LsPerVcqServiceClass()).setUnits('service class').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmIfMinWrrServiceClass.setStatus('current')
lsPerVcqRmIfServiceClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8, 2), )
if mibBuilder.loadTexts: lsPerVcqRmIfServiceClassTable.setStatus('current')
lsPerVcqRmIfServiceClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-RM-MIB", "lsPerVcqRmIfServiceClass"))
if mibBuilder.loadTexts: lsPerVcqRmIfServiceClassEntry.setStatus('current')
lsPerVcqRmIfServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8, 2, 1, 1), LsPerVcqServiceClass())
if mibBuilder.loadTexts: lsPerVcqRmIfServiceClass.setStatus('current')
lsPerVcqRmIfServClassConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsPerVcqRmIfServClassConnType.setStatus('current')
lsPerVcqRmIfServClassWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setUnits('weight').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsPerVcqRmIfServClassWrrWeight.setStatus('current')
rmTrafficShaperIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1), )
if mibBuilder.loadTexts: rmTrafficShaperIfTable.setStatus('current')
rmTrafficShaperIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rmTrafficShaperIfEntry.setStatus('current')
rtsIfMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsIfMaxThreshold.setStatus('current')
rtsIfCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 2), Gauge32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsIfCellCount.setStatus('current')
rtsIfVbrCfgRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shapingDisable", 1), ("shapeToPcr", 2), ("shapeToScrAndPcr", 3))).clone('shapingDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsIfVbrCfgRequested.setStatus('current')
rtsIfVbrCfgInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shapingDisable", 1), ("shapeToPcr", 2), ("shapeToScrAndPcr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsIfVbrCfgInstalled.setStatus('current')
rtsIfBeCfgRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shapingDisable", 1), ("shapeToPcr", 2))).clone('shapingDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsIfBeCfgRequested.setStatus('current')
rtsIfBeCfgInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shapingDisable", 1), ("shapeToPcr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsIfBeCfgInstalled.setStatus('current')
rtsIfVbrClassMaxThrshRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 95))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsIfVbrClassMaxThrshRequested.setStatus('current')
rtsIfVbrClassMaxThrshInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsIfVbrClassMaxThrshInstalled.setStatus('current')
rtsIfBeClassMaxThrshRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 95))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsIfBeClassMaxThrshRequested.setStatus('current')
rtsIfBeClassMaxThrshInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsIfBeClassMaxThrshInstalled.setStatus('current')
rtsIfVbrVcMaxThrshRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(512)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsIfVbrVcMaxThrshRequested.setStatus('current')
rtsIfVbrVcMaxThrshInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsIfVbrVcMaxThrshInstalled.setStatus('current')
rtsIfBeVcMaxThrshRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1024)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsIfBeVcMaxThrshRequested.setStatus('current')
rtsIfBeVcMaxThrshInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 10, 1, 10, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsIfBeVcMaxThrshInstalled.setStatus('current')
ciscoAtmRmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 3))
ciscoAtmRmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1))
ciscoAtmRmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2))
ciscoAtmRmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 1)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance = ciscoAtmRmMIBCompliance.setStatus('obsolete')
ciscoAtmRmMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 2)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance2 = ciscoAtmRmMIBCompliance2.setStatus('obsolete')
ciscoAtmRmMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 3)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance3 = ciscoAtmRmMIBCompliance3.setStatus('obsolete')
ciscoAtmRmMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 4)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance4 = ciscoAtmRmMIBCompliance4.setStatus('obsolete')
ciscoAtmRmMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 5)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance5 = ciscoAtmRmMIBCompliance5.setStatus('obsolete')
ciscoAtmRmMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 6)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "cgrPerVcqAtmRmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance6 = ciscoAtmRmMIBCompliance6.setStatus('obsolete')
ciscoAtmRmMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 7)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup4"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup4"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "cgrPerVcqAtmRmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance7 = ciscoAtmRmMIBCompliance7.setStatus('obsolete')
ciscoAtmRmMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 8)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup4"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "cgrPerVcqAtmRmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance8 = ciscoAtmRmMIBCompliance8.setStatus('obsolete')
ciscoAtmRmMIBCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 9)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup4"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "cgrPerVcqAtmRmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance9 = ciscoAtmRmMIBCompliance9.setStatus('obsolete')
ciscoAtmRmMIBCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 10)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "cgrPerVcqAtmRmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance10 = ciscoAtmRmMIBCompliance10.setStatus('obsolete')
ciscoAtmRmMIBCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 11)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "cgrPerVcqAtmRmGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance11 = ciscoAtmRmMIBCompliance11.setStatus('obsolete')
ciscoAtmRmMIBCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 12)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "cgrPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "atmRmTrafficShaperIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance12 = ciscoAtmRmMIBCompliance12.setStatus('deprecated')
ciscoAtmRmMIBCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 1, 13)).setObjects(("CISCO-ATM-RM-MIB", "atmRmSwitchCfgMIBGroup2"), ("CISCO-ATM-RM-MIB", "atmRmPhyIfCfgMIBGroup5"), ("CISCO-ATM-RM-MIB", "atmRmAllIfCfgMIBGroup6"), ("CISCO-ATM-RM-MIB", "atmRmIfAllStateMIBGroup3"), ("CISCO-ATM-RM-MIB", "atmRmIfStatsMIBGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "cgrPerVcqAtmRmGroup2"), ("CISCO-ATM-RM-MIB", "atmRmTrafficShaperIfGroup"), ("CISCO-ATM-RM-MIB", "sharedMemAtmRmSwitchMIBGroup"), ("CISCO-ATM-RM-MIB", "sharedMemAtmRmPhyIfMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmRmMIBCompliance13 = ciscoAtmRmMIBCompliance13.setStatus('current')
atmRmSwitchCfgMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 1)).setObjects(("CISCO-ATM-RM-MIB", "rmSwitchOverSubFactor"), ("CISCO-ATM-RM-MIB", "rmSwitchScrMarginFactor"), ("CISCO-ATM-RM-MIB", "rmSwitchAbrCongNotify"), ("CISCO-ATM-RM-MIB", "rmScDefaultQosMaxCtd"), ("CISCO-ATM-RM-MIB", "rmScDefaultQosPeakToPeakCdv"), ("CISCO-ATM-RM-MIB", "rmScDefaultQosClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmSwitchCfgMIBGroup = atmRmSwitchCfgMIBGroup.setStatus('obsolete')
sharedMemAtmRmSwitchMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 2)).setObjects(("CISCO-ATM-RM-MIB", "sharedMemRmSwitchQueuedCellLimit"), ("CISCO-ATM-RM-MIB", "sharedMemRmSwitchQueuedCellCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sharedMemAtmRmSwitchMIBGroup = sharedMemAtmRmSwitchMIBGroup.setStatus('current')
atmRmPhyIfCfgMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 3)).setObjects(("CISCO-ATM-RM-MIB", "rmIfOutPacingRateRequested"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingRateInstalled"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingForce"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxAgg"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinVbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxVbr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmPhyIfCfgMIBGroup = atmRmPhyIfCfgMIBGroup.setStatus('obsolete')
atmRmAllIfCfgMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 4)).setObjects(("CISCO-ATM-RM-MIB", "rmIfLinkDistance"), ("CISCO-ATM-RM-MIB", "rmIfBestEffortLimit"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrScr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrTolerance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmAllIfCfgMIBGroup = atmRmAllIfCfgMIBGroup.setStatus('obsolete')
atmRmIfAllStateMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 5)).setObjects(("CISCO-ATM-RM-MIB", "rmIfScRxAcr"), ("CISCO-ATM-RM-MIB", "rmIfScTxAcr"), ("CISCO-ATM-RM-MIB", "rmIfScRxAlcr"), ("CISCO-ATM-RM-MIB", "rmIfScTxAlcr"), ("CISCO-ATM-RM-MIB", "rmIfScNumSvxConns"), ("CISCO-ATM-RM-MIB", "rmIfScNumPvxConns"), ("CISCO-ATM-RM-MIB", "rmIfScTxMaxCtd"), ("CISCO-ATM-RM-MIB", "rmIfScTxP2PeakCdv"), ("CISCO-ATM-RM-MIB", "rmIfScTxClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmIfAllStateMIBGroup = atmRmIfAllStateMIBGroup.setStatus('obsolete')
atmRmIfStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 6)).setObjects(("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumAdmit"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumTotalRequests"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumFailTraffComb"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumFailBw"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumFailLoss"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumFailDelay"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumFailCdv"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumFailBeLimit"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumFailParmLimit"), ("CISCO-ATM-RM-MIB", "rmIfScRcacResultNumFailOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmIfStatsMIBGroup = atmRmIfStatsMIBGroup.setStatus('current')
sharedMemAtmRmPhyIfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 7)).setObjects(("CISCO-ATM-RM-MIB", "sharedMemRmIfOutputQServCategory"), ("CISCO-ATM-RM-MIB", "sharedMemRmIfOutputQRequestedMaxSize"), ("CISCO-ATM-RM-MIB", "sharedMemRmIfOutputQInstalledMaxSize"), ("CISCO-ATM-RM-MIB", "sharedMemRmIfOutputQMaxSizeForce"), ("CISCO-ATM-RM-MIB", "sharedMemRmIfOutputQCellCount"), ("CISCO-ATM-RM-MIB", "sharedMemRmIfDiscardThreshold"), ("CISCO-ATM-RM-MIB", "sharedMemRmIfEfciThreshold"), ("CISCO-ATM-RM-MIB", "sharedMemRmIfAbrRelativeRateThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sharedMemAtmRmPhyIfMIBGroup = sharedMemAtmRmPhyIfMIBGroup.setStatus('current')
atmRmSwitchCfgMIBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 8)).setObjects(("CISCO-ATM-RM-MIB", "rmSwitchOverSubFactor"), ("CISCO-ATM-RM-MIB", "rmSwitchScrMarginFactor"), ("CISCO-ATM-RM-MIB", "rmSwitchAbrCongNotify"), ("CISCO-ATM-RM-MIB", "rmScDefaultQosMaxCtd"), ("CISCO-ATM-RM-MIB", "rmScDefaultQosPeakToPeakCdv"), ("CISCO-ATM-RM-MIB", "rmScDefaultQosClr"), ("CISCO-ATM-RM-MIB", "rmScDefaultQosClrClp01"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmSwitchCfgMIBGroup2 = atmRmSwitchCfgMIBGroup2.setStatus('current')
atmRmPhyIfCfgMIBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 9)).setObjects(("CISCO-ATM-RM-MIB", "rmIfOutPacingRateRequested"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingRateInstalled"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingForce"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxAgg"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinVbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxVbr"), ("CISCO-ATM-RM-MIB", "rmIfCbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfAbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfUbrDefaultRxUpcTolerance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmPhyIfCfgMIBGroup2 = atmRmPhyIfCfgMIBGroup2.setStatus('obsolete')
atmRmIfAllStateMIBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 10)).setObjects(("CISCO-ATM-RM-MIB", "rmIfScRxAcr"), ("CISCO-ATM-RM-MIB", "rmIfScTxAcr"), ("CISCO-ATM-RM-MIB", "rmIfScRxAlcr"), ("CISCO-ATM-RM-MIB", "rmIfScTxAlcr"), ("CISCO-ATM-RM-MIB", "rmIfScNumSvxConns"), ("CISCO-ATM-RM-MIB", "rmIfScNumPvxConns"), ("CISCO-ATM-RM-MIB", "rmIfScTxMaxCtd"), ("CISCO-ATM-RM-MIB", "rmIfScTxP2PeakCdv"), ("CISCO-ATM-RM-MIB", "rmIfScTxClr"), ("CISCO-ATM-RM-MIB", "rmIfScTxClrClp01"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmIfAllStateMIBGroup2 = atmRmIfAllStateMIBGroup2.setStatus('obsolete')
lsPerVcqAtmRmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 11)).setObjects(("CISCO-ATM-RM-MIB", "lsPerVcqRmIfMinWrrServiceClass"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmIfServClassConnType"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmIfServClassWrrWeight"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpMaxSize"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpQMaxSize"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpQMinSize"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpDiscThreshold"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpMarkThreshold"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpName"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpCellCount"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpServGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lsPerVcqAtmRmGroup = lsPerVcqAtmRmGroup.setStatus('obsolete')
atmRmPhyIfCfgMIBGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 12)).setObjects(("CISCO-ATM-RM-MIB", "rmIfOutPacingRateRequested"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingRateInstalled"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingForce"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxAgg"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinVbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxVbr"), ("CISCO-ATM-RM-MIB", "rmIfCbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfAbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfUbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcCdvt"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcCdvt"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinAbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxAbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinUbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxUbr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmPhyIfCfgMIBGroup3 = atmRmPhyIfCfgMIBGroup3.setStatus('obsolete')
atmRmAllIfCfgMIBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 13)).setObjects(("CISCO-ATM-RM-MIB", "rmIfLinkDistance"), ("CISCO-ATM-RM-MIB", "rmIfBestEffortLimit"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrScr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrCdvt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmAllIfCfgMIBGroup2 = atmRmAllIfCfgMIBGroup2.setStatus('obsolete')
atmRmAllIfCfgMIBGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 14)).setObjects(("CISCO-ATM-RM-MIB", "rmIfLinkDistance"), ("CISCO-ATM-RM-MIB", "rmIfBestEffortLimit"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrScr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrCdvt"), ("CISCO-ATM-RM-MIB", "rmIfServCategorySupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmAllIfCfgMIBGroup3 = atmRmAllIfCfgMIBGroup3.setStatus('obsolete')
lsPerVcqAtmRmGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 15)).setObjects(("CISCO-ATM-RM-MIB", "lsPerVcqRmIfMinWrrServiceClass"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmIfServClassConnType"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmIfServClassWrrWeight"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpMaxSize"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpQMaxSize"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpQMinSize"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpDiscThreshold"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpMarkThreshold"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpName"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpCellCount"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmThreshGrpServGroup"), ("CISCO-ATM-RM-MIB", "lsPerVcqRmHierarchicalSchedulingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lsPerVcqAtmRmGroup2 = lsPerVcqAtmRmGroup2.setStatus('current')
cgrPerVcqAtmRmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 16)).setObjects(("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpQMaxSize"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpQMinSize"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpDiscThreshold"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpMarkThreshold"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpName"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpCellCount"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpServGroup"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmHierarchicalSchedulingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgrPerVcqAtmRmGroup = cgrPerVcqAtmRmGroup.setStatus('obsolete')
atmRmAllIfCfgMIBGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 17)).setObjects(("CISCO-ATM-RM-MIB", "rmIfLinkDistance"), ("CISCO-ATM-RM-MIB", "rmIfBestEffortLimit"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrScr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrCdvt"), ("CISCO-ATM-RM-MIB", "rmIfServCategorySupport"), ("CISCO-ATM-RM-MIB", "rmIfCbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfAbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfUbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcCdvt"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcCdvt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmAllIfCfgMIBGroup4 = atmRmAllIfCfgMIBGroup4.setStatus('obsolete')
atmRmPhyIfCfgMIBGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 18)).setObjects(("CISCO-ATM-RM-MIB", "rmIfOutPacingRateRequested"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingRateInstalled"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingForce"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxAgg"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinVbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxVbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinAbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxAbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinUbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxUbr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmPhyIfCfgMIBGroup4 = atmRmPhyIfCfgMIBGroup4.setStatus('obsolete')
atmRmPhyIfCfgMIBGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 19)).setObjects(("CISCO-ATM-RM-MIB", "rmIfOutPacingRateRequested"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingRateInstalled"), ("CISCO-ATM-RM-MIB", "rmIfOutPacingForce"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxAgg"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxCbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinVbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxVbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinAbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxAbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMinUbr"), ("CISCO-ATM-RM-MIB", "rmIfDirControlLinkShareMaxUbr"), ("CISCO-ATM-RM-MIB", "rmIfFramingOverhead"), ("CISCO-ATM-RM-MIB", "rmIfFramingOverheadForce"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmPhyIfCfgMIBGroup5 = atmRmPhyIfCfgMIBGroup5.setStatus('current')
atmRmIfAllStateMIBGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 20)).setObjects(("CISCO-ATM-RM-MIB", "rmIfScRxAcr"), ("CISCO-ATM-RM-MIB", "rmIfScTxAcr"), ("CISCO-ATM-RM-MIB", "rmIfScRxAlcr"), ("CISCO-ATM-RM-MIB", "rmIfScTxAlcr"), ("CISCO-ATM-RM-MIB", "rmIfScNumSvxConns"), ("CISCO-ATM-RM-MIB", "rmIfScNumPvxConns"), ("CISCO-ATM-RM-MIB", "rmIfScTxMaxCtd"), ("CISCO-ATM-RM-MIB", "rmIfScTxP2PeakCdv"), ("CISCO-ATM-RM-MIB", "rmIfScTxClr"), ("CISCO-ATM-RM-MIB", "rmIfScTxClrClp01"), ("CISCO-ATM-RM-MIB", "rmIfScRxDynBwSvcAcr"), ("CISCO-ATM-RM-MIB", "rmIfScTxDynBwSvcAcr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmIfAllStateMIBGroup3 = atmRmIfAllStateMIBGroup3.setStatus('current')
atmRmAllIfCfgMIBGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 21)).setObjects(("CISCO-ATM-RM-MIB", "rmIfLinkDistance"), ("CISCO-ATM-RM-MIB", "rmIfBestEffortLimit"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrScr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrCdvt"), ("CISCO-ATM-RM-MIB", "rmIfServCategorySupport"), ("CISCO-ATM-RM-MIB", "rmIfCbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfAbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfUbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcCdvt"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcCdvt"), ("CISCO-ATM-RM-MIB", "rmIfOverBooking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmAllIfCfgMIBGroup5 = atmRmAllIfCfgMIBGroup5.setStatus('deprecated')
cgrPerVcqAtmRmGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 22)).setObjects(("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpQMaxSize"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpQMinSize"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpDiscThreshold"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpMaxSize"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpMarkThreshold"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpName"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpCellCount"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmThreshGrpServGroup"), ("CISCO-ATM-RM-MIB", "cgrPerVcqRmHierarchicalSchedulingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgrPerVcqAtmRmGroup2 = cgrPerVcqAtmRmGroup2.setStatus('current')
atmRmTrafficShaperIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 23)).setObjects(("CISCO-ATM-RM-MIB", "rtsIfMaxThreshold"), ("CISCO-ATM-RM-MIB", "rtsIfCellCount"), ("CISCO-ATM-RM-MIB", "rtsIfVbrCfgRequested"), ("CISCO-ATM-RM-MIB", "rtsIfVbrCfgInstalled"), ("CISCO-ATM-RM-MIB", "rtsIfBeCfgRequested"), ("CISCO-ATM-RM-MIB", "rtsIfBeCfgInstalled"), ("CISCO-ATM-RM-MIB", "rtsIfVbrClassMaxThrshRequested"), ("CISCO-ATM-RM-MIB", "rtsIfVbrClassMaxThrshInstalled"), ("CISCO-ATM-RM-MIB", "rtsIfBeClassMaxThrshRequested"), ("CISCO-ATM-RM-MIB", "rtsIfBeClassMaxThrshInstalled"), ("CISCO-ATM-RM-MIB", "rtsIfVbrVcMaxThrshRequested"), ("CISCO-ATM-RM-MIB", "rtsIfVbrVcMaxThrshInstalled"), ("CISCO-ATM-RM-MIB", "rtsIfBeVcMaxThrshRequested"), ("CISCO-ATM-RM-MIB", "rtsIfBeVcMaxThrshInstalled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmTrafficShaperIfGroup = atmRmTrafficShaperIfGroup.setStatus('current')
atmRmAllIfCfgMIBGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 10, 3, 2, 24)).setObjects(("CISCO-ATM-RM-MIB", "rmIfLinkDistance"), ("CISCO-ATM-RM-MIB", "rmIfBestEffortLimit"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxCbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrScr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrPcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrTolerance"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxAbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxUbrMcr"), ("CISCO-ATM-RM-MIB", "rmIfDirMaxVbrCdvt"), ("CISCO-ATM-RM-MIB", "rmIfServCategorySupport"), ("CISCO-ATM-RM-MIB", "rmIfCbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfAbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfUbrDefaultRxUpcTolerance"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtDefaultRxUpcCdvt"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtDefaultRxUpcCdvt"), ("CISCO-ATM-RM-MIB", "rmIfOverBooking"), ("CISCO-ATM-RM-MIB", "rmIfVbrRtPerClassOverbooking"), ("CISCO-ATM-RM-MIB", "rmIfVbrNrtPerClassOverbooking"), ("CISCO-ATM-RM-MIB", "rmIfAbrPerClassOverbooking"), ("CISCO-ATM-RM-MIB", "rmIfUbrPerClassOverbooking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmRmAllIfCfgMIBGroup6 = atmRmAllIfCfgMIBGroup6.setStatus('current')
mibBuilder.exportSymbols("CISCO-ATM-RM-MIB", sharedMemRmIfOutputQServCategory=sharedMemRmIfOutputQServCategory, rmTrafficShaperIfEntry=rmTrafficShaperIfEntry, atmRmPhyIfCfgMIBGroup=atmRmPhyIfCfgMIBGroup, ciscoAtmRmMIBCompliance11=ciscoAtmRmMIBCompliance11, rmIfCbrDefaultRxUpcTolerance=rmIfCbrDefaultRxUpcTolerance, rmIfDirectionCfgEntry=rmIfDirectionCfgEntry, ciscoLsPerVcqAtmRmSwitch=ciscoLsPerVcqAtmRmSwitch, lsPerVcqRmThreshGrpQMaxSize=lsPerVcqRmThreshGrpQMaxSize, rmIfScTxClrClp01=rmIfScTxClrClp01, sharedMemRmIfThresholdCfgEntry=sharedMemRmIfThresholdCfgEntry, rmIfDirMaxAbrPcr=rmIfDirMaxAbrPcr, rmIfDirection=rmIfDirection, rmScDefaultQosClr=rmScDefaultQosClr, rmIfFramingOverheadForce=rmIfFramingOverheadForce, atmRmAllIfCfgMIBGroup=atmRmAllIfCfgMIBGroup, rmIfDirMaxUbrPcr=rmIfDirMaxUbrPcr, cgrPerVcqModuleId=cgrPerVcqModuleId, atmRmTrafficShaperIfGroup=atmRmTrafficShaperIfGroup, rmIfOutPacingForce=rmIfOutPacingForce, ciscoAtmRmMIBCompliance13=ciscoAtmRmMIBCompliance13, cgrPerVcqRmThreshGrpServiceTable=cgrPerVcqRmThreshGrpServiceTable, rmIfScRcacResultNumFailParmLimit=rmIfScRcacResultNumFailParmLimit, rmIfServiceCategoryStatisticsEntry=rmIfServiceCategoryStatisticsEntry, lsPerVcqRmThreshGrpTable=lsPerVcqRmThreshGrpTable, ciscoAtmRmMIBCompliance12=ciscoAtmRmMIBCompliance12, atmRmIfAllStateMIBGroup2=atmRmIfAllStateMIBGroup2, rmIfScRcacResultNumFailLoss=rmIfScRcacResultNumFailLoss, ciscoCgrPerVcqAtmRmSwitch=ciscoCgrPerVcqAtmRmSwitch, ciscoAtmRmMIBCompliances=ciscoAtmRmMIBCompliances, rmIfCfgEntry=rmIfCfgEntry, rmIfDirMaxUbrMcr=rmIfDirMaxUbrMcr, rmIfScTxAcr=rmIfScTxAcr, lsPerVcqRmIfServClassConnType=lsPerVcqRmIfServClassConnType, rtsIfBeClassMaxThrshRequested=rtsIfBeClassMaxThrshRequested, rmIfVbrNrtDefaultRxUpcTolerance=rmIfVbrNrtDefaultRxUpcTolerance, rtsIfBeVcMaxThrshRequested=rtsIfBeVcMaxThrshRequested, ciscoAtmRmMIBConformance=ciscoAtmRmMIBConformance, rmIfDirControlLinkShareMaxAbr=rmIfDirControlLinkShareMaxAbr, atmRmPhyIfCfgMIBGroup4=atmRmPhyIfCfgMIBGroup4, sharedMemRmIfOutputQCellCount=sharedMemRmIfOutputQCellCount, rmIfVbrRtDefaultRxUpcTolerance=rmIfVbrRtDefaultRxUpcTolerance, cgrPerVcqRmThreshGrpEntry=cgrPerVcqRmThreshGrpEntry, lsPerVcqRmThreshGrpServGroup=lsPerVcqRmThreshGrpServGroup, cgrPerVcqRmHierarchicalSchedulingMode=cgrPerVcqRmHierarchicalSchedulingMode, rtsIfVbrVcMaxThrshRequested=rtsIfVbrVcMaxThrshRequested, ciscoAtmRmMIBCompliance3=ciscoAtmRmMIBCompliance3, rmDefaultQosServiceCategory=rmDefaultQosServiceCategory, sharedMemRmIfOutputQ=sharedMemRmIfOutputQ, rmSwitchOverSubFactor=rmSwitchOverSubFactor, ciscoAtmRmMIBCompliance2=ciscoAtmRmMIBCompliance2, rmIfScNumSvxConns=rmIfScNumSvxConns, rmIfScRcacResultNumTotalRequests=rmIfScRcacResultNumTotalRequests, cgrPerVcqRmThreshGrpQMinSize=cgrPerVcqRmThreshGrpQMinSize, lsPerVcqRmThreshGrpEntry=lsPerVcqRmThreshGrpEntry, lsPerVcqRmThreshGrpDiscThreshold=lsPerVcqRmThreshGrpDiscThreshold, ciscoAtmRmIfCfg=ciscoAtmRmIfCfg, sharedMemRmSwitchQueuedCellTable=sharedMemRmSwitchQueuedCellTable, rmScDefaultQosClrClp01=rmScDefaultQosClrClp01, cgrPerVcqRmThreshGrpMaxSize=cgrPerVcqRmThreshGrpMaxSize, rmIfCfgTable=rmIfCfgTable, sharedMemRmIfOutputQMaxSizeForce=sharedMemRmIfOutputQMaxSizeForce, sharedMemAtmRmSwitchMIBGroup=sharedMemAtmRmSwitchMIBGroup, lsPerVcqRmIfServClassWrrWeight=lsPerVcqRmIfServClassWrrWeight, atmRmSwitchCfgMIBGroup2=atmRmSwitchCfgMIBGroup2, CgrPerVcqModuleId=CgrPerVcqModuleId, atmRmIfStatsMIBGroup=atmRmIfStatsMIBGroup, ciscoAtmRmMIBCompliance9=ciscoAtmRmMIBCompliance9, rmIfUbrPerClassOverbooking=rmIfUbrPerClassOverbooking, lsPerVcqRmThreshGrpName=lsPerVcqRmThreshGrpName, rmIfDirControlLinkShareMaxVbr=rmIfDirControlLinkShareMaxVbr, rmIfDirControlLinkShareMinUbr=rmIfDirControlLinkShareMinUbr, rmIfFramingOverhead=rmIfFramingOverhead, rtsIfBeVcMaxThrshInstalled=rtsIfBeVcMaxThrshInstalled, atmRmIfAllStateMIBGroup3=atmRmIfAllStateMIBGroup3, cgrPerVcqRmThreshGrpTable=cgrPerVcqRmThreshGrpTable, rmIfServiceCategoryStateTable=rmIfServiceCategoryStateTable, lsPerVcqRmIfMinWrrServiceClass=lsPerVcqRmIfMinWrrServiceClass, lsPerVcqRmThreshGrpServiceEntry=lsPerVcqRmThreshGrpServiceEntry, cgrPerVcqRmThreshGrpService=cgrPerVcqRmThreshGrpService, rmIfOutPacingRateRequested=rmIfOutPacingRateRequested, rmIfDirControlLinkShareMinCbr=rmIfDirControlLinkShareMinCbr, lsPerVcqRmThreshGrpServiceTable=lsPerVcqRmThreshGrpServiceTable, cgrPerVcqRmThreshGrpServiceEntry=cgrPerVcqRmThreshGrpServiceEntry, sharedMemRmIfOutputQRequestedMaxSize=sharedMemRmIfOutputQRequestedMaxSize, cgrPerVcqRmThreshGrpName=cgrPerVcqRmThreshGrpName, rmIfServiceCategoryStatisticsTable=rmIfServiceCategoryStatisticsTable, rmScDefaultQosMaxCtd=rmScDefaultQosMaxCtd, rmIfDirMaxCbrPcr=rmIfDirMaxCbrPcr, sharedMemRmSwitchQueuedCellCount=sharedMemRmSwitchQueuedCellCount, sharedMemRmIfAbrRelativeRateThreshold=sharedMemRmIfAbrRelativeRateThreshold, atmRmAllIfCfgMIBGroup3=atmRmAllIfCfgMIBGroup3, lsPerVcqRmThreshGrpQMinSize=lsPerVcqRmThreshGrpQMinSize, ciscoAtmRmSwitchCfg=ciscoAtmRmSwitchCfg, rmIfScRcacResultNumFailDelay=rmIfScRcacResultNumFailDelay, ciscoAtmRmIfStatistics=ciscoAtmRmIfStatistics, ciscoAtmRmTrafShaperIf=ciscoAtmRmTrafShaperIf, rmIfDirMaxVbrScr=rmIfDirMaxVbrScr, rmIfVbrRtDefaultRxUpcCdvt=rmIfVbrRtDefaultRxUpcCdvt, rmIfLinkDistance=rmIfLinkDistance, ForceValue=ForceValue, cgrPerVcqRmThreshGrpQMaxSize=cgrPerVcqRmThreshGrpQMaxSize, ciscoAtmRmMIBGroups=ciscoAtmRmMIBGroups, ciscoAtmRmMIBCompliance6=ciscoAtmRmMIBCompliance6, sharedMemRmIfOutputQCfgTable=sharedMemRmIfOutputQCfgTable, rmIfScTxMaxCtd=rmIfScTxMaxCtd, ciscoAtmRmIfSharedMem=ciscoAtmRmIfSharedMem, sharedMemAtmRmPhyIfMIBGroup=sharedMemAtmRmPhyIfMIBGroup, lsPerVcqAtmRmGroup=lsPerVcqAtmRmGroup, PYSNMP_MODULE_ID=ciscoAtmRmMIB, rmIfAbrPerClassOverbooking=rmIfAbrPerClassOverbooking, ciscoAtmRmMIBCompliance4=ciscoAtmRmMIBCompliance4, rmIfDirControlLinkShareMinVbr=rmIfDirControlLinkShareMinVbr, rmIfDirectionCfgTable=rmIfDirectionCfgTable, atmRmPhyIfCfgMIBGroup2=atmRmPhyIfCfgMIBGroup2, rmDefaultQosObjectiveTable=rmDefaultQosObjectiveTable, cgrPerVcqRmThreshGrp=cgrPerVcqRmThreshGrp, rmSwitchAbrCongNotify=rmSwitchAbrCongNotify, rmIfScRcacResultNumAdmit=rmIfScRcacResultNumAdmit, LsPerVcqServiceClassNoC1=LsPerVcqServiceClassNoC1, lsPerVcqRmThreshGrp=lsPerVcqRmThreshGrp, atmRmPhyIfCfgMIBGroup3=atmRmPhyIfCfgMIBGroup3, ciscoAtmRmMIBCompliance7=ciscoAtmRmMIBCompliance7, rmIfVbrNrtDefaultRxUpcCdvt=rmIfVbrNrtDefaultRxUpcCdvt, rmIfVbrNrtPerClassOverbooking=rmIfVbrNrtPerClassOverbooking, lsPerVcqRmThreshGrpMarkThreshold=lsPerVcqRmThreshGrpMarkThreshold, rmIfDirMaxUbrTolerance=rmIfDirMaxUbrTolerance, rmIfScTxDynBwSvcAcr=rmIfScTxDynBwSvcAcr, rtsIfBeClassMaxThrshInstalled=rtsIfBeClassMaxThrshInstalled, ciscoAtmRmMIBCompliance8=ciscoAtmRmMIBCompliance8, sharedMemRmSwitchQueuedCellEntry=sharedMemRmSwitchQueuedCellEntry, LsPerVcqServiceClass=LsPerVcqServiceClass, rtsIfCellCount=rtsIfCellCount, rmIfVbrRtPerClassOverbooking=rmIfVbrRtPerClassOverbooking, rmIfOutPacingRateInstalled=rmIfOutPacingRateInstalled, lsPerVcqRmThreshGrpMaxSize=lsPerVcqRmThreshGrpMaxSize, rmIfScTxP2PeakCdv=rmIfScTxP2PeakCdv, rmIfScRcacResultNumFailCdv=rmIfScRcacResultNumFailCdv, rmIfScNumPvxConns=rmIfScNumPvxConns, rmIfServCategorySupport=rmIfServCategorySupport, ciscoLsPerVcqAtmRmIf=ciscoLsPerVcqAtmRmIf, rmIfDirMaxVbrPcr=rmIfDirMaxVbrPcr, cgrPerVcqRmThreshGrpMarkThreshold=cgrPerVcqRmThreshGrpMarkThreshold, cgrPerVcqRmThreshGrpServGroup=cgrPerVcqRmThreshGrpServGroup, ciscoAtmRmIfState=ciscoAtmRmIfState, atmRmAllIfCfgMIBGroup5=atmRmAllIfCfgMIBGroup5, atmRmIfAllStateMIBGroup=atmRmIfAllStateMIBGroup, lsPerVcqRmHierarchicalSchedulingMode=lsPerVcqRmHierarchicalSchedulingMode, atmRmAllIfCfgMIBGroup4=atmRmAllIfCfgMIBGroup4, rmIfScRcacResultNumFailBw=rmIfScRcacResultNumFailBw, lsPerVcqRmThreshGrpService=lsPerVcqRmThreshGrpService, ciscoAtmRmSwitchSharedMem=ciscoAtmRmSwitchSharedMem, rmIfScRcacResultNumFailBeLimit=rmIfScRcacResultNumFailBeLimit, rmDefaultQosObjectiveEntry=rmDefaultQosObjectiveEntry, rmIfUbrDefaultRxUpcTolerance=rmIfUbrDefaultRxUpcTolerance, lsPerVcqAtmRmGroup2=lsPerVcqAtmRmGroup2, rmIfDirControlLinkShareMinAbr=rmIfDirControlLinkShareMinAbr, rmIfScRxAcr=rmIfScRxAcr, rmIfScRxAlcr=rmIfScRxAlcr, rmIfScRcacResultNumFailTraffComb=rmIfScRcacResultNumFailTraffComb, rtsIfVbrVcMaxThrshInstalled=rtsIfVbrVcMaxThrshInstalled, rmIfScRxDynBwSvcAcr=rmIfScRxDynBwSvcAcr, rtsIfVbrCfgInstalled=rtsIfVbrCfgInstalled, lsPerVcqRmThreshGrpCellCount=lsPerVcqRmThreshGrpCellCount, rtsIfMaxThreshold=rtsIfMaxThreshold, rmIfServiceCategoryStateEntry=rmIfServiceCategoryStateEntry, ciscoAtmRmMIB=ciscoAtmRmMIB, rtsIfVbrCfgRequested=rtsIfVbrCfgRequested, rtsIfVbrClassMaxThrshInstalled=rtsIfVbrClassMaxThrshInstalled, lsPerVcqRmIfServiceClassEntry=lsPerVcqRmIfServiceClassEntry, rmIfDirMaxVbrCdvt=rmIfDirMaxVbrCdvt, rmIfBestEffortLimit=rmIfBestEffortLimit, sharedMemRmSwitchQueuedCellLimit=sharedMemRmSwitchQueuedCellLimit, sharedMemRmIfOutputQCfgEntry=sharedMemRmIfOutputQCfgEntry, sharedMemRmCellPriority=sharedMemRmCellPriority, ciscoAtmRmMIBObjects=ciscoAtmRmMIBObjects, rmIfDirMaxAbrTolerance=rmIfDirMaxAbrTolerance, cgrPerVcqAtmRmGroup2=cgrPerVcqAtmRmGroup2, rmIfSc=rmIfSc, rtsIfBeCfgRequested=rtsIfBeCfgRequested, LsPerVcqThresholdGroupService=LsPerVcqThresholdGroupService, rmIfDirControlLinkShareMaxUbr=rmIfDirControlLinkShareMaxUbr, LsPerVcqThresholdGroup=LsPerVcqThresholdGroup, atmRmPhyIfCfgMIBGroup5=atmRmPhyIfCfgMIBGroup5, atmRmSwitchCfgMIBGroup=atmRmSwitchCfgMIBGroup, rmIfScTxAlcr=rmIfScTxAlcr, rmTrafficShaperIfTable=rmTrafficShaperIfTable, ciscoAtmRmMIBCompliance=ciscoAtmRmMIBCompliance, rmIfDirControlLinkShareMaxAgg=rmIfDirControlLinkShareMaxAgg, rtsIfVbrClassMaxThrshRequested=rtsIfVbrClassMaxThrshRequested, ciscoAtmRmMIBCompliance10=ciscoAtmRmMIBCompliance10, ciscoAtmRmMIBCompliance5=ciscoAtmRmMIBCompliance5, cgrPerVcqRmThreshGrpCellCount=cgrPerVcqRmThreshGrpCellCount, rmIfDirControlLinkShareMaxCbr=rmIfDirControlLinkShareMaxCbr, lsPerVcqRmIfServiceClassTable=lsPerVcqRmIfServiceClassTable, rmIfDirMaxCbrTolerance=rmIfDirMaxCbrTolerance, rmIfDirMaxVbrTolerance=rmIfDirMaxVbrTolerance, atmRmAllIfCfgMIBGroup2=atmRmAllIfCfgMIBGroup2, cgrPerVcqAtmRmGroup=cgrPerVcqAtmRmGroup, sharedMemRmIfDiscardThreshold=sharedMemRmIfDiscardThreshold, rtsIfBeCfgInstalled=rtsIfBeCfgInstalled, rmIfAbrDefaultRxUpcTolerance=rmIfAbrDefaultRxUpcTolerance, sharedMemRmIfEfciThreshold=sharedMemRmIfEfciThreshold, sharedMemRmIfThresholdCfgTable=sharedMemRmIfThresholdCfgTable, lsPerVcqRmIfEntry=lsPerVcqRmIfEntry, rmIfDirMaxAbrMcr=rmIfDirMaxAbrMcr, lsPerVcqRmIfTable=lsPerVcqRmIfTable, rmIfOverBooking=rmIfOverBooking, cgrPerVcqRmThreshGrpDiscThreshold=cgrPerVcqRmThreshGrpDiscThreshold, rmSwitchScrMarginFactor=rmSwitchScrMarginFactor, rmIfScTxClr=rmIfScTxClr, lsPerVcqRmIfServiceClass=lsPerVcqRmIfServiceClass, sharedMemRmIfOutputQInstalledMaxSize=sharedMemRmIfOutputQInstalledMaxSize, FineQueueThreshold=FineQueueThreshold, rmScDefaultQosPeakToPeakCdv=rmScDefaultQosPeakToPeakCdv, rmIfScRcacResultNumFailOther=rmIfScRcacResultNumFailOther, atmRmAllIfCfgMIBGroup6=atmRmAllIfCfgMIBGroup6)
