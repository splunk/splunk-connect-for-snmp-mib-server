#
# PySNMP MIB module CISCO-WIRELESS-P2P-BPI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WIRELESS-P2P-BPI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:05:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, TimeTicks, NotificationType, MibIdentifier, Unsigned32, ObjectIdentity, IpAddress, Counter32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "NotificationType", "MibIdentifier", "Unsigned32", "ObjectIdentity", "IpAddress", "Counter32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Counter64")
TruthValue, TimeInterval, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeInterval", "DisplayString", "TextualConvention")
ciscoWirelessP2pBpiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 135))
if mibBuilder.loadTexts: ciscoWirelessP2pBpiMIB.setLastUpdated('9905181200Z')
if mibBuilder.loadTexts: ciscoWirelessP2pBpiMIB.setOrganization('Cisco Systems Inc.')
cwrBpiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 135, 1))
cwrBpiRsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1))
cwrBpiRsBaseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1), )
if mibBuilder.loadTexts: cwrBpiRsBaseTable.setStatus('current')
cwrBpiRsBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrBpiRsBaseEntry.setStatus('current')
cwrBpiRsPrivacyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRsPrivacyEnable.setStatus('current')
cwrBpiRsPublicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsPublicKey.setStatus('current')
cwrBpiRsAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("start", 1), ("authWait", 2), ("authorized", 3), ("reauthWait", 4), ("authRejectWait", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsAuthState.setStatus('current')
cwrBpiRsAuthKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsAuthKeySequenceNumber.setStatus('current')
cwrBpiRsAuthExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsAuthExpires.setStatus('current')
cwrBpiRsAuthReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRsAuthReset.setStatus('current')
cwrBpiRsAuthGraceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRsAuthGraceTime.setStatus('current')
cwrBpiRsTEKGraceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRsTEKGraceTime.setStatus('current')
cwrBpiRsAuthWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRsAuthWaitTimeout.setStatus('current')
cwrBpiRsReauthWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRsReauthWaitTimeout.setStatus('current')
cwrBpiRsOpWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRsOpWaitTimeout.setStatus('current')
cwrBpiRsRekeyWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRsRekeyWaitTimeout.setStatus('current')
cwrBpiRsAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsAuthRequests.setStatus('current')
cwrBpiRsAuthReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsAuthReplies.setStatus('current')
cwrBpiRsAuthInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsAuthInvalids.setStatus('current')
cwrBpiRsAuthInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noInformation", 0), ("unauthorizedSlave", 1), ("undefined", 2), ("unsolicited", 3), ("invalidKeySequence", 4), ("keyRequestAuthenticationFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsAuthInvalidErrorCode.setStatus('current')
cwrBpiRsAuthInvalidErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsAuthInvalidErrorString.setStatus('current')
cwrBpiRsTEKTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2), )
if mibBuilder.loadTexts: cwrBpiRsTEKTable.setStatus('current')
cwrBpiRsTEKEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrBpiRsTEKEntry.setStatus('current')
cwrBpiRsTEKEncryptionNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKEncryptionNegotiated.setStatus('current')
cwrBpiRsTEKState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start", 1), ("opWait", 2), ("opReauthWait", 3), ("operational", 4), ("rekeyWait", 5), ("rekeyReauthWait", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKState.setStatus('current')
cwrBpiRsTEKExpiresOld = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKExpiresOld.setStatus('current')
cwrBpiRsTEKExpiresNew = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKExpiresNew.setStatus('current')
cwrBpiRsTEKKeyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKKeyRequests.setStatus('current')
cwrBpiRsTEKKeyReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKKeyReplies.setStatus('current')
cwrBpiRsTEKInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKInvalids.setStatus('current')
cwrBpiRsTEKAuthPends = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKAuthPends.setStatus('current')
cwrBpiRsTEKInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noInformation", 0), ("unauthorizedSlave", 1), ("undefined", 2), ("unsolicited", 3), ("invalidKeySequence", 4), ("keyRequestAuthenticationFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKInvalidErrorCode.setStatus('current')
cwrBpiRsTEKInvalidErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRsTEKInvalidErrorString.setStatus('current')
cwrBpiRmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2))
cwrBpiRmAuthTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1), )
if mibBuilder.loadTexts: cwrBpiRmAuthTable.setStatus('current')
cwrBpiRmAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrBpiRmAuthEntry.setStatus('current')
cwrBpiRmAuthPrivacyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRmAuthPrivacyEnable.setStatus('current')
cwrBpiRmAuthRsPublicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmAuthRsPublicKey.setStatus('current')
cwrBpiRmAuthRsKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmAuthRsKeySequenceNumber.setStatus('current')
cwrBpiRmAuthRsExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmAuthRsExpires.setStatus('current')
cwrBpiRmAuthRsLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6048000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRmAuthRsLifetime.setStatus('current')
cwrBpiRmAuthRsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRmAuthRsReset.setStatus('current')
cwrBpiRmAuthRsRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmAuthRsRequests.setStatus('current')
cwrBpiRmAuthRsReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmAuthRsReplies.setStatus('current')
cwrBpiRmAuthRsInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmAuthRsInvalids.setStatus('current')
cwrBpiRmAuthInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noInformation", 0), ("unauthorizedSlave", 1), ("undefined", 2), ("unsolicited", 3), ("invalidKeySequence", 4), ("keyRequestAuthenticationFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmAuthInvalidErrorCode.setStatus('current')
cwrBpiRmAuthInvalidErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmAuthInvalidErrorString.setStatus('current')
cwrBpiRmTEKTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2), )
if mibBuilder.loadTexts: cwrBpiRmTEKTable.setStatus('current')
cwrBpiRmTEKEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwrBpiRmTEKEntry.setStatus('current')
cwrBpiRmTEKEncryptionNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmTEKEncryptionNegotiated.setStatus('current')
cwrBpiRmTEKLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRmTEKLifetime.setStatus('current')
cwrBpiRmTEKExpiresOld = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmTEKExpiresOld.setStatus('current')
cwrBpiRmTEKExpiresNew = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmTEKExpiresNew.setStatus('current')
cwrBpiRmTEKReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwrBpiRmTEKReset.setStatus('current')
cwrBpiRmKeyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmKeyRequests.setStatus('current')
cwrBpiRmKeyReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmKeyReplies.setStatus('current')
cwrBpiRmTEKInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmTEKInvalids.setStatus('current')
cwrBpiRmTEKInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noInformation", 0), ("unauthorizedSlave", 1), ("undefined", 2), ("unsolicited", 3), ("invalidKeySequence", 4), ("keyRequestAuthenticationFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmTEKInvalidErrorCode.setStatus('current')
cwrBpiRmTEKInvalidErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 135, 1, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrBpiRmTEKInvalidErrorString.setStatus('current')
cwrBpiNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 135, 2))
cwrBpiConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 135, 3))
cwrBpiCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 135, 3, 1))
cwrBpiGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 135, 3, 2))
cwrBpiBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 135, 3, 1, 1)).setObjects(("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsGroup"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrBpiBasicCompliance = cwrBpiBasicCompliance.setStatus('current')
cwrBpiRsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 135, 3, 2, 1)).setObjects(("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsPrivacyEnable"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsPublicKey"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthState"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthKeySequenceNumber"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthExpires"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthReset"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthGraceTime"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKGraceTime"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthWaitTimeout"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsReauthWaitTimeout"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsOpWaitTimeout"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsRekeyWaitTimeout"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthRequests"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthReplies"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthInvalids"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthInvalidErrorCode"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsAuthInvalidErrorString"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKEncryptionNegotiated"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKState"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKExpiresOld"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKExpiresNew"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKKeyRequests"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKKeyReplies"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKInvalids"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKAuthPends"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKInvalidErrorCode"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRsTEKInvalidErrorString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrBpiRsGroup = cwrBpiRsGroup.setStatus('current')
cwrBpiRmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 135, 3, 2, 2)).setObjects(("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthPrivacyEnable"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthRsPublicKey"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthRsKeySequenceNumber"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthRsExpires"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthRsLifetime"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthRsReset"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthRsRequests"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthRsReplies"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthRsInvalids"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthInvalidErrorCode"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmAuthInvalidErrorString"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmTEKEncryptionNegotiated"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmTEKLifetime"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmTEKExpiresOld"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmTEKExpiresNew"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmTEKReset"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmKeyRequests"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmKeyReplies"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmTEKInvalids"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmTEKInvalidErrorCode"), ("CISCO-WIRELESS-P2P-BPI-MIB", "cwrBpiRmTEKInvalidErrorString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwrBpiRmGroup = cwrBpiRmGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WIRELESS-P2P-BPI-MIB", cwrBpiRsOpWaitTimeout=cwrBpiRsOpWaitTimeout, cwrBpiRsTEKInvalidErrorCode=cwrBpiRsTEKInvalidErrorCode, cwrBpiRmTEKInvalids=cwrBpiRmTEKInvalids, cwrBpiRmAuthPrivacyEnable=cwrBpiRmAuthPrivacyEnable, cwrBpiGroups=cwrBpiGroups, cwrBpiConformance=cwrBpiConformance, cwrBpiRmTEKLifetime=cwrBpiRmTEKLifetime, cwrBpiRmAuthRsExpires=cwrBpiRmAuthRsExpires, cwrBpiRmAuthRsLifetime=cwrBpiRmAuthRsLifetime, cwrBpiRmTEKEntry=cwrBpiRmTEKEntry, cwrBpiRsTEKGraceTime=cwrBpiRsTEKGraceTime, cwrBpiRmAuthRsReplies=cwrBpiRmAuthRsReplies, cwrBpiRsTEKInvalidErrorString=cwrBpiRsTEKInvalidErrorString, cwrBpiRmTEKExpiresNew=cwrBpiRmTEKExpiresNew, PYSNMP_MODULE_ID=ciscoWirelessP2pBpiMIB, cwrBpiRmObjects=cwrBpiRmObjects, cwrBpiRmAuthTable=cwrBpiRmAuthTable, cwrBpiRmAuthEntry=cwrBpiRmAuthEntry, cwrBpiRsReauthWaitTimeout=cwrBpiRsReauthWaitTimeout, cwrBpiRsAuthReset=cwrBpiRsAuthReset, cwrBpiRsAuthInvalidErrorCode=cwrBpiRsAuthInvalidErrorCode, cwrBpiRsAuthWaitTimeout=cwrBpiRsAuthWaitTimeout, cwrBpiRmAuthRsRequests=cwrBpiRmAuthRsRequests, cwrBpiRsTEKTable=cwrBpiRsTEKTable, cwrBpiRmTEKTable=cwrBpiRmTEKTable, cwrBpiRsTEKExpiresOld=cwrBpiRsTEKExpiresOld, cwrBpiRsObjects=cwrBpiRsObjects, cwrBpiRsAuthInvalids=cwrBpiRsAuthInvalids, cwrBpiRsTEKExpiresNew=cwrBpiRsTEKExpiresNew, cwrBpiRsTEKKeyReplies=cwrBpiRsTEKKeyReplies, cwrBpiRsTEKEntry=cwrBpiRsTEKEntry, cwrBpiRsAuthRequests=cwrBpiRsAuthRequests, cwrBpiRsRekeyWaitTimeout=cwrBpiRsRekeyWaitTimeout, cwrBpiRsTEKState=cwrBpiRsTEKState, cwrBpiRsAuthExpires=cwrBpiRsAuthExpires, cwrBpiRmAuthRsPublicKey=cwrBpiRmAuthRsPublicKey, cwrBpiRmAuthRsReset=cwrBpiRmAuthRsReset, cwrBpiRsTEKAuthPends=cwrBpiRsTEKAuthPends, cwrBpiRsBaseTable=cwrBpiRsBaseTable, cwrBpiRsTEKInvalids=cwrBpiRsTEKInvalids, cwrBpiRmKeyReplies=cwrBpiRmKeyReplies, cwrBpiMIBObjects=cwrBpiMIBObjects, cwrBpiRsAuthKeySequenceNumber=cwrBpiRsAuthKeySequenceNumber, cwrBpiRmTEKInvalidErrorCode=cwrBpiRmTEKInvalidErrorCode, cwrBpiRsAuthState=cwrBpiRsAuthState, cwrBpiRsAuthInvalidErrorString=cwrBpiRsAuthInvalidErrorString, cwrBpiRsAuthReplies=cwrBpiRsAuthReplies, cwrBpiRmAuthRsInvalids=cwrBpiRmAuthRsInvalids, cwrBpiRmTEKReset=cwrBpiRmTEKReset, cwrBpiRsPublicKey=cwrBpiRsPublicKey, cwrBpiRmTEKInvalidErrorString=cwrBpiRmTEKInvalidErrorString, cwrBpiRsTEKKeyRequests=cwrBpiRsTEKKeyRequests, cwrBpiRmAuthInvalidErrorCode=cwrBpiRmAuthInvalidErrorCode, cwrBpiRmKeyRequests=cwrBpiRmKeyRequests, cwrBpiRsGroup=cwrBpiRsGroup, cwrBpiRsAuthGraceTime=cwrBpiRsAuthGraceTime, cwrBpiRmTEKExpiresOld=cwrBpiRmTEKExpiresOld, cwrBpiRsBaseEntry=cwrBpiRsBaseEntry, cwrBpiRmGroup=cwrBpiRmGroup, cwrBpiBasicCompliance=cwrBpiBasicCompliance, cwrBpiRsPrivacyEnable=cwrBpiRsPrivacyEnable, ciscoWirelessP2pBpiMIB=ciscoWirelessP2pBpiMIB, cwrBpiRsTEKEncryptionNegotiated=cwrBpiRsTEKEncryptionNegotiated, cwrBpiRmAuthRsKeySequenceNumber=cwrBpiRmAuthRsKeySequenceNumber, cwrBpiNotification=cwrBpiNotification, cwrBpiRmAuthInvalidErrorString=cwrBpiRmAuthInvalidErrorString, cwrBpiCompliances=cwrBpiCompliances, cwrBpiRmTEKEncryptionNegotiated=cwrBpiRmTEKEncryptionNegotiated)
