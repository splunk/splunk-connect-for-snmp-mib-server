#
# PySNMP MIB module FC-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FC-TRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
devName, sbProducerHost, sbProducerPort, pepName = mibBuilder.importSymbols("AGGREGATED-EXT-MIB", "devName", "sbProducerHost", "sbProducerPort", "pepName")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
fCApp, fCServer, fCDescText = mibBuilder.importSymbols("FC-DS1-MIB", "fCApp", "fCServer", "fCDescText")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Unsigned32, Counter64, enterprises, iso, ObjectName, Integer32, Gauge32, ModuleIdentity, Counter32, snmpModules = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Unsigned32", "Counter64", "enterprises", "iso", "ObjectName", "Integer32", "Gauge32", "ModuleIdentity", "Counter32", "snmpModules")
TruthValue, DisplayString, TestAndIncr, RowStatus, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TestAndIncr", "RowStatus", "TimeStamp", "TextualConvention")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
softSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198))
fcDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9))
fcTraps = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0))
if mibBuilder.loadTexts: fcTraps.setLastUpdated('240701')
if mibBuilder.loadTexts: fcTraps.setOrganization('Lucent Technologies')
fcSwitchRegnError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 1)).setObjects(("FC-DS1-MIB", "fCServer"))
if mibBuilder.loadTexts: fcSwitchRegnError.setStatus('current')
fCSwitchRegnSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 2)).setObjects(("FC-DS1-MIB", "fCServer"))
if mibBuilder.loadTexts: fCSwitchRegnSucc.setStatus('current')
fcAddLLCNodeError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 3)).setObjects(("FC-DS1-MIB", "fCServer"))
if mibBuilder.loadTexts: fcAddLLCNodeError.setStatus('current')
fcAddLLCNodeSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 4)).setObjects(("FC-DS1-MIB", "fCServer"))
if mibBuilder.loadTexts: fcAddLLCNodeSucc.setStatus('current')
fcAppStartSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 5)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"))
if mibBuilder.loadTexts: fcAppStartSucc.setStatus('current')
fcAppEndSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 6)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"))
if mibBuilder.loadTexts: fcAppEndSucc.setStatus('current')
fcAppStartError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 7)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"))
if mibBuilder.loadTexts: fcAppStartError.setStatus('current')
fcAppInfoError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 8)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"), ("FC-DS1-MIB", "fCDescText"))
if mibBuilder.loadTexts: fcAppInfoError.setStatus('current')
fcAppMajorError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 9)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"), ("FC-DS1-MIB", "fCDescText"))
if mibBuilder.loadTexts: fcAppMajorError.setStatus('current')
fcAppCritError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 10)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"), ("FC-DS1-MIB", "fCDescText"))
if mibBuilder.loadTexts: fcAppCritError.setStatus('current')
fcUnparsedEvent = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 11)).setObjects(("FC-DS1-MIB", "fCDescText"))
if mibBuilder.loadTexts: fcUnparsedEvent.setStatus('current')
mibBuilder.exportSymbols("FC-TRAP-MIB", fcSwitchRegnError=fcSwitchRegnError, fcAppInfoError=fcAppInfoError, fcAppMajorError=fcAppMajorError, products=products, fcAppStartError=fcAppStartError, fcAppCritError=fcAppCritError, fcUnparsedEvent=fcUnparsedEvent, lucent=lucent, fCSwitchRegnSucc=fCSwitchRegnSucc, fcAppEndSucc=fcAppEndSucc, fcAddLLCNodeError=fcAddLLCNodeError, fcDeviceServer=fcDeviceServer, softSwitch=softSwitch, fcAppStartSucc=fcAppStartSucc, PYSNMP_MODULE_ID=fcTraps, fcTraps=fcTraps, fcAddLLCNodeSucc=fcAddLLCNodeSucc)
