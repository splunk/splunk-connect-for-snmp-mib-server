#
# PySNMP MIB module CXDial-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXDial-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cxDial, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxDial", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, Unsigned32, IpAddress, ModuleIdentity, ObjectIdentity, MibIdentifier, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Unsigned32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "NotificationType", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxDialTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1), )
if mibBuilder.loadTexts: cxDialTable.setStatus('mandatory')
cxDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1), ).setIndexNames((0, "CXDial-MIB", "cxDialEntryIndex"))
if mibBuilder.loadTexts: cxDialEntry.setStatus('mandatory')
cxDialEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxDialEntryIndex.setStatus('mandatory')
cxDialPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr", 1), ("isdn", 2))).clone('dtr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialPhysicalType.setStatus('mandatory')
cxDialFunctionType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onDemand", 1), ("onCongestion", 2))).clone('onDemand')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialFunctionType.setStatus('mandatory')
cxDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialRowStatus.setStatus('mandatory')
cxDialInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialInactivityTimer.setStatus('mandatory')
cxDialBackupPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialBackupPollingTimer.setStatus('mandatory')
cxDialDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialDelayTimer.setStatus('mandatory')
cxDialIsdnBcmUSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 15), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialIsdnBcmUSapAlias.setStatus('mandatory')
cxDialIsdnBcmNbrOfBChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialIsdnBcmNbrOfBChannels.setStatus('mandatory')
cxDialIsdnBcmDirectoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 17), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialIsdnBcmDirectoryId.setStatus('mandatory')
cxDialMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxDialMibLevel.setStatus('mandatory')
mibBuilder.exportSymbols("CXDial-MIB", cxDialBackupPollingTimer=cxDialBackupPollingTimer, cxDialIsdnBcmDirectoryId=cxDialIsdnBcmDirectoryId, cxDialIsdnBcmUSapAlias=cxDialIsdnBcmUSapAlias, cxDialEntry=cxDialEntry, cxDialInactivityTimer=cxDialInactivityTimer, cxDialDelayTimer=cxDialDelayTimer, cxDialPhysicalType=cxDialPhysicalType, cxDialTable=cxDialTable, cxDialFunctionType=cxDialFunctionType, cxDialRowStatus=cxDialRowStatus, cxDialMibLevel=cxDialMibLevel, cxDialIsdnBcmNbrOfBChannels=cxDialIsdnBcmNbrOfBChannels, cxDialEntryIndex=cxDialEntryIndex)
