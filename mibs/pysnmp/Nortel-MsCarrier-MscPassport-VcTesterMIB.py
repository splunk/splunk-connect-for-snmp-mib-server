#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-VcTesterMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-VcTesterMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:22:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
RowStatus, Integer32, RowPointer, StorageType, DisplayString, Unsigned32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowStatus", "Integer32", "RowPointer", "StorageType", "DisplayString", "Unsigned32")
Link, AsciiString, HexString, Hex, EnterpriseDateAndTime, DigitString, NonReplicated = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "Link", "AsciiString", "HexString", "Hex", "EnterpriseDateAndTime", "DigitString", "NonReplicated")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, Integer32, Counter32, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Counter64, ModuleIdentity, Unsigned32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Integer32", "Counter32", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Counter64", "ModuleIdentity", "Unsigned32", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vcTesterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34))
mscVct = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130))
mscVctRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 1), )
if mibBuilder.loadTexts: mscVctRowStatusTable.setStatus('mandatory')
mscVctRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"))
if mibBuilder.loadTexts: mscVctRowStatusEntry.setStatus('mandatory')
mscVctRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctRowStatus.setStatus('mandatory')
mscVctComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctComponentName.setStatus('mandatory')
mscVctStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctStorageType.setStatus('mandatory')
mscVctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: mscVctIndex.setStatus('mandatory')
mscVctProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 10), )
if mibBuilder.loadTexts: mscVctProvTable.setStatus('mandatory')
mscVctProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"))
if mibBuilder.loadTexts: mscVctProvEntry.setStatus('mandatory')
mscVctLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctLogicalProcessor.setStatus('mandatory')
mscVctVcName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gvc", 1), ("fvc", 2))).clone('gvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctVcName.setStatus('mandatory')
mscVctDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2))
mscVctDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 1), )
if mibBuilder.loadTexts: mscVctDnaRowStatusTable.setStatus('mandatory')
mscVctDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"))
if mibBuilder.loadTexts: mscVctDnaRowStatusEntry.setStatus('mandatory')
mscVctDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaRowStatus.setStatus('mandatory')
mscVctDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaComponentName.setStatus('mandatory')
mscVctDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaStorageType.setStatus('mandatory')
mscVctDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVctDnaIndex.setStatus('mandatory')
mscVctDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 10), )
if mibBuilder.loadTexts: mscVctDnaAddressTable.setStatus('mandatory')
mscVctDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"))
if mibBuilder.loadTexts: mscVctDnaAddressEntry.setStatus('mandatory')
mscVctDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaNumberingPlanIndicator.setStatus('mandatory')
mscVctDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDataNetworkAddress.setStatus('mandatory')
mscVctDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11), )
if mibBuilder.loadTexts: mscVctDnaOutgoingOptionsTable.setStatus('mandatory')
mscVctDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"))
if mibBuilder.loadTexts: mscVctDnaOutgoingOptionsEntry.setStatus('mandatory')
mscVctDnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutCalls.setStatus('mandatory')
mscVctDnaOutNormalCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutNormalCharge.setStatus('mandatory')
mscVctDnaOutReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutReverseCharge.setStatus('mandatory')
mscVctDnaOutForceReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutForceReverseCharge.setStatus('mandatory')
mscVctDnaOutNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutNormalPriority.setStatus('mandatory')
mscVctDnaOutHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutHighPriority.setStatus('mandatory')
mscVctDnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutDefaultPriority.setStatus('mandatory')
mscVctDnaOutIntl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutIntl.setStatus('mandatory')
mscVctDnaOutFsRestrictedResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutFsRestrictedResponse.setStatus('mandatory')
mscVctDnaOutFsUnrestrictedResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutFsUnrestrictedResponse.setStatus('mandatory')
mscVctDnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutDefaultPathSensitivity.setStatus('obsolete')
mscVctDnaOutPathSensitivityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutPathSensitivityOverRide.setStatus('obsolete')
mscVctDnaOutPathSensitivitySignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutPathSensitivitySignal.setStatus('mandatory')
mscVctDnaOutDefaultPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutDefaultPathReliability.setStatus('mandatory')
mscVctDnaOutPathReliabilityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutPathReliabilityOverRide.setStatus('mandatory')
mscVctDnaOutPathReliabilitySignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutPathReliabilitySignal.setStatus('mandatory')
mscVctDnaOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaOutAccess.setStatus('mandatory')
mscVctDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDefaultTransferPriority.setStatus('mandatory')
mscVctDnaTransferPriorityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaTransferPriorityOverRide.setStatus('mandatory')
mscVctDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12), )
if mibBuilder.loadTexts: mscVctDnaIncomingOptionsTable.setStatus('mandatory')
mscVctDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"))
if mibBuilder.loadTexts: mscVctDnaIncomingOptionsEntry.setStatus('mandatory')
mscVctDnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncCalls.setStatus('mandatory')
mscVctDnaIncHighPriorityReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncHighPriorityReverseCharge.setStatus('mandatory')
mscVctDnaIncNormalPriorityReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncNormalPriorityReverseCharge.setStatus('mandatory')
mscVctDnaIncIntlNormalCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncIntlNormalCharge.setStatus('mandatory')
mscVctDnaIncIntlReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncIntlReverseCharge.setStatus('mandatory')
mscVctDnaIncFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncFastSelect.setStatus('mandatory')
mscVctDnaIncSameService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncSameService.setStatus('mandatory')
mscVctDnaIncChargeTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncChargeTransfer.setStatus('mandatory')
mscVctDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaIncAccess.setStatus('mandatory')
mscVctDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13), )
if mibBuilder.loadTexts: mscVctDnaCallOptionsTable.setStatus('mandatory')
mscVctDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"))
if mibBuilder.loadTexts: mscVctDnaCallOptionsEntry.setStatus('mandatory')
mscVctDnaServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("gsp", 0), ("x25", 1), ("enhancedIti", 2), ("ncs", 3), ("mlti", 4), ("sm", 5), ("ici", 6), ("dsp3270", 7), ("iam", 8), ("mlhi", 9), ("term3270", 10), ("iti", 11), ("bsi", 13), ("hostIti", 14), ("x75", 15), ("hdsp3270", 16), ("api3201", 20), ("sdlc", 21), ("snaMultiHost", 22), ("redirectionServ", 23), ("trSnaTpad", 24), ("offnetNui", 25), ("gasServer", 26), ("vapServer", 28), ("vapAgent", 29), ("frameRelay", 30), ("ipiVc", 31), ("gvcIf", 32))).clone('frameRelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaServiceCategory.setStatus('mandatory')
mscVctDnaPacketSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="1c00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaPacketSizes.setStatus('mandatory')
mscVctDnaDefaultRecvFrmNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDefaultRecvFrmNetworkPacketSize.setStatus('mandatory')
mscVctDnaDefaultSendToNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDefaultSendToNetworkPacketSize.setStatus('mandatory')
mscVctDnaDefaultRecvFrmNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDefaultRecvFrmNetworkThruputClass.setStatus('mandatory')
mscVctDnaDefaultSendToNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDefaultSendToNetworkThruputClass.setStatus('mandatory')
mscVctDnaDefaultRecvFrmNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDefaultRecvFrmNetworkWindowSize.setStatus('mandatory')
mscVctDnaDefaultSendToNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDefaultSendToNetworkWindowSize.setStatus('mandatory')
mscVctDnaPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("endToEnd", 0), ("local", 1))).clone('endToEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaPacketSizeNegotiation.setStatus('mandatory')
mscVctDnaCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("extended", 1))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugFormat.setStatus('mandatory')
mscVctDnaCug0AsNonCugCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCug0AsNonCugCall.setStatus('mandatory')
mscVctDnaSignalPreferentialCugToLink = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaSignalPreferentialCugToLink.setStatus('mandatory')
mscVctDnaSignalIntlAddressToLink = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaSignalIntlAddressToLink.setStatus('mandatory')
mscVctDnaFastSelectCallsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaFastSelectCallsOnly.setStatus('mandatory')
mscVctDnaPreselectRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaPreselectRpoa.setStatus('mandatory')
mscVctDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaAccountClass.setStatus('mandatory')
mscVctDnaAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaAccountCollection.setStatus('mandatory')
mscVctDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaServiceExchange.setStatus('mandatory')
mscVctDnaEgressAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaEgressAccounting.setStatus('mandatory')
mscVctDnaRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 20), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaRpoa.setStatus('mandatory')
mscVctDnaDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dprsOnly", 0), ("dprsMcsOnly", 1), ("dprsMcsFirst", 2))).clone('dprsOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaDataPath.setStatus('mandatory')
mscVctDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2))
mscVctDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 1), )
if mibBuilder.loadTexts: mscVctDnaCugRowStatusTable.setStatus('mandatory')
mscVctDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaCugIndex"))
if mibBuilder.loadTexts: mscVctDnaCugRowStatusEntry.setStatus('mandatory')
mscVctDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugRowStatus.setStatus('mandatory')
mscVctDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaCugComponentName.setStatus('mandatory')
mscVctDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaCugStorageType.setStatus('mandatory')
mscVctDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: mscVctDnaCugIndex.setStatus('mandatory')
mscVctDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10), )
if mibBuilder.loadTexts: mscVctDnaCugCugOptionsTable.setStatus('mandatory')
mscVctDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaCugIndex"))
if mibBuilder.loadTexts: mscVctDnaCugCugOptionsEntry.setStatus('mandatory')
mscVctDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugType.setStatus('mandatory')
mscVctDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugDnic.setStatus('mandatory')
mscVctDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugInterlockCode.setStatus('mandatory')
mscVctDnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugPreferential.setStatus('mandatory')
mscVctDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugOutCalls.setStatus('mandatory')
mscVctDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugIncCalls.setStatus('mandatory')
mscVctDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaCugPrivileged.setStatus('mandatory')
mscVctDnaHgM = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3))
mscVctDnaHgMRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 1), )
if mibBuilder.loadTexts: mscVctDnaHgMRowStatusTable.setStatus('mandatory')
mscVctDnaHgMRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaHgMIndex"))
if mibBuilder.loadTexts: mscVctDnaHgMRowStatusEntry.setStatus('mandatory')
mscVctDnaHgMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaHgMRowStatus.setStatus('mandatory')
mscVctDnaHgMComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaHgMComponentName.setStatus('mandatory')
mscVctDnaHgMStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaHgMStorageType.setStatus('mandatory')
mscVctDnaHgMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVctDnaHgMIndex.setStatus('mandatory')
mscVctDnaHgMIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 10), )
if mibBuilder.loadTexts: mscVctDnaHgMIfTable.setStatus('mandatory')
mscVctDnaHgMIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaHgMIndex"))
if mibBuilder.loadTexts: mscVctDnaHgMIfEntry.setStatus('mandatory')
mscVctDnaHgMAvailabilityUpdateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaHgMAvailabilityUpdateThreshold.setStatus('mandatory')
mscVctDnaHgMOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 11), )
if mibBuilder.loadTexts: mscVctDnaHgMOpTable.setStatus('mandatory')
mscVctDnaHgMOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaHgMIndex"))
if mibBuilder.loadTexts: mscVctDnaHgMOpEntry.setStatus('mandatory')
mscVctDnaHgMMaxAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaHgMMaxAvailableChannels.setStatus('mandatory')
mscVctDnaHgMAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaHgMAvailableChannels.setStatus('mandatory')
mscVctDnaHgMAvailabilityDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4096, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaHgMAvailabilityDelta.setStatus('mandatory')
mscVctDnaHgMHgAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2))
mscVctDnaHgMHgAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 1), )
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrRowStatusTable.setStatus('mandatory')
mscVctDnaHgMHgAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaHgMIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrRowStatusEntry.setStatus('mandatory')
mscVctDnaHgMHgAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrRowStatus.setStatus('mandatory')
mscVctDnaHgMHgAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrComponentName.setStatus('mandatory')
mscVctDnaHgMHgAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrStorageType.setStatus('mandatory')
mscVctDnaHgMHgAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrIndex.setStatus('mandatory')
mscVctDnaHgMHgAddrAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 10), )
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrAddrTable.setStatus('mandatory')
mscVctDnaHgMHgAddrAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaHgMIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrAddrEntry.setStatus('mandatory')
mscVctDnaHgMHgAddrNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrNumberingPlanIndicator.setStatus('mandatory')
mscVctDnaHgMHgAddrDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 2, 3, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDnaHgMHgAddrDataNetworkAddress.setStatus('mandatory')
mscVctDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3))
mscVctDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 1), )
if mibBuilder.loadTexts: mscVctDcRowStatusTable.setStatus('mandatory')
mscVctDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcIndex"))
if mibBuilder.loadTexts: mscVctDcRowStatusEntry.setStatus('mandatory')
mscVctDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcRowStatus.setStatus('mandatory')
mscVctDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDcComponentName.setStatus('mandatory')
mscVctDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctDcStorageType.setStatus('mandatory')
mscVctDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: mscVctDcIndex.setStatus('mandatory')
mscVctDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10), )
if mibBuilder.loadTexts: mscVctDcOptionsTable.setStatus('mandatory')
mscVctDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcIndex"))
if mibBuilder.loadTexts: mscVctDcOptionsEntry.setStatus('mandatory')
mscVctDcLocalNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcLocalNpi.setStatus('mandatory')
mscVctDcLocalDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcLocalDna.setStatus('mandatory')
mscVctDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcRemoteNpi.setStatus('mandatory')
mscVctDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcRemoteDna.setStatus('mandatory')
mscVctDcRemoteLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcRemoteLcn.setStatus('mandatory')
mscVctDcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("switched", 0), ("permanentMaster", 1), ("permanentSlave", 2), ("permanentBackupSlave", 3), ("permanentSlaveWithBackup", 4), ("spvcMaster", 5), ("spvcSlave", 6), ("spvcBackupSlave", 7), ("spvcSlaveWithBackup", 8))).clone('switched')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcType.setStatus('mandatory')
mscVctDcSvcAutoCallRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcSvcAutoCallRetry.setStatus('mandatory')
mscVctDcUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcUserData.setStatus('mandatory')
mscVctDcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("useDnaDefPriority", 3))).clone('useDnaDefPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcDiscardPriority.setStatus('mandatory')
mscVctDcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dprsOnly", 0), ("dprsMcsOnly", 1), ("dprsMcsFirst", 2), ("useDnaValue", 3))).clone('dprsOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcDataPath.setStatus('mandatory')
mscVctDcCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcCugIndex.setStatus('mandatory')
mscVctDcCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 9))).clone(namedValues=NamedValues(("doNotSignal", 0), ("cug", 3), ("cugOa", 9))).clone('doNotSignal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcCugType.setStatus('mandatory')
mscVctDcCfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 267), )
if mibBuilder.loadTexts: mscVctDcCfaTable.setStatus('mandatory')
mscVctDcCfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 267, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcCfaIndex"))
if mibBuilder.loadTexts: mscVctDcCfaEntry.setStatus('mandatory')
mscVctDcCfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 267, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(9, 9), ValueRangeConstraint(66, 66), ValueRangeConstraint(67, 67), ValueRangeConstraint(68, 68), ValueRangeConstraint(71, 71), ValueRangeConstraint(72, 72), ValueRangeConstraint(73, 73), ValueRangeConstraint(196, 196), ValueRangeConstraint(198, 198), )))
if mibBuilder.loadTexts: mscVctDcCfaIndex.setStatus('mandatory')
mscVctDcCfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 267, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcCfaValue.setStatus('mandatory')
mscVctDcCfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 267, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscVctDcCfaRowStatus.setStatus('mandatory')
mscVctDcDfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 268), )
if mibBuilder.loadTexts: mscVctDcDfaTable.setStatus('mandatory')
mscVctDcDfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 268, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcDfaIndex"))
if mibBuilder.loadTexts: mscVctDcDfaEntry.setStatus('mandatory')
mscVctDcDfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 268, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(11, 11), ValueRangeConstraint(201, 201), ValueRangeConstraint(202, 202), ValueRangeConstraint(203, 203), ValueRangeConstraint(210, 210), ValueRangeConstraint(211, 211), )))
if mibBuilder.loadTexts: mscVctDcDfaIndex.setStatus('mandatory')
mscVctDcDfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 268, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcDfaValue.setStatus('mandatory')
mscVctDcDfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 268, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscVctDcDfaRowStatus.setStatus('mandatory')
mscVctDcNfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 269), )
if mibBuilder.loadTexts: mscVctDcNfaTable.setStatus('obsolete')
mscVctDcNfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 269, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcNfaIndex"))
if mibBuilder.loadTexts: mscVctDcNfaEntry.setStatus('obsolete')
mscVctDcNfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 269, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(48, 48), ValueRangeConstraint(127, 127), ValueRangeConstraint(212, 212), )))
if mibBuilder.loadTexts: mscVctDcNfaIndex.setStatus('obsolete')
mscVctDcNfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 269, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcNfaValue.setStatus('obsolete')
mscVctDcNfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 269, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscVctDcNfaRowStatus.setStatus('obsolete')
mscVctDcIfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 270), )
if mibBuilder.loadTexts: mscVctDcIfaTable.setStatus('mandatory')
mscVctDcIfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 270, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctDcIfaIndex"))
if mibBuilder.loadTexts: mscVctDcIfaEntry.setStatus('mandatory')
mscVctDcIfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 270, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: mscVctDcIfaIndex.setStatus('mandatory')
mscVctDcIfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 270, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVctDcIfaValue.setStatus('mandatory')
mscVctDcIfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 3, 270, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscVctDcIfaRowStatus.setStatus('mandatory')
mscVctVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4))
mscVctVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 1), )
if mibBuilder.loadTexts: mscVctVcRowStatusTable.setStatus('mandatory')
mscVctVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcIndex"))
if mibBuilder.loadTexts: mscVctVcRowStatusEntry.setStatus('mandatory')
mscVctVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcRowStatus.setStatus('mandatory')
mscVctVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcComponentName.setStatus('mandatory')
mscVctVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcStorageType.setStatus('mandatory')
mscVctVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVctVcIndex.setStatus('mandatory')
mscVctVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10), )
if mibBuilder.loadTexts: mscVctVcCadTable.setStatus('mandatory')
mscVctVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcIndex"))
if mibBuilder.loadTexts: mscVctVcCadEntry.setStatus('mandatory')
mscVctVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcType.setStatus('mandatory')
mscVctVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcState.setStatus('mandatory')
mscVctVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcPreviousState.setStatus('mandatory')
mscVctVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcDiagnosticCode.setStatus('mandatory')
mscVctVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcPreviousDiagnosticCode.setStatus('mandatory')
mscVctVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcCalledNpi.setStatus('mandatory')
mscVctVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcCalledDna.setStatus('mandatory')
mscVctVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcCalledLcn.setStatus('mandatory')
mscVctVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcCallingNpi.setStatus('mandatory')
mscVctVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcCallingDna.setStatus('mandatory')
mscVctVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcCallingLcn.setStatus('mandatory')
mscVctVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcAccountingEnabled.setStatus('mandatory')
mscVctVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcFastSelectCall.setStatus('mandatory')
mscVctVcLocalRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcLocalRxPktSize.setStatus('mandatory')
mscVctVcLocalTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcLocalTxPktSize.setStatus('mandatory')
mscVctVcLocalTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcLocalTxWindowSize.setStatus('mandatory')
mscVctVcLocalRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcLocalRxWindowSize.setStatus('mandatory')
mscVctVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcPathReliability.setStatus('mandatory')
mscVctVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcAccountingEnd.setStatus('mandatory')
mscVctVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcPriority.setStatus('mandatory')
mscVctVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcSegmentSize.setStatus('mandatory')
mscVctVcSubnetTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcSubnetTxPktSize.setStatus('mandatory')
mscVctVcSubnetTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcSubnetTxWindowSize.setStatus('mandatory')
mscVctVcSubnetRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcSubnetRxPktSize.setStatus('mandatory')
mscVctVcSubnetRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcSubnetRxWindowSize.setStatus('mandatory')
mscVctVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcMaxSubnetPktSize.setStatus('mandatory')
mscVctVcTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcTransferPriorityToNetwork.setStatus('mandatory')
mscVctVcTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcTransferPriorityFromNetwork.setStatus('mandatory')
mscVctVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 11), )
if mibBuilder.loadTexts: mscVctVcIntdTable.setStatus('mandatory')
mscVctVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcIndex"))
if mibBuilder.loadTexts: mscVctVcIntdEntry.setStatus('mandatory')
mscVctVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcCallReferenceNumber.setStatus('obsolete')
mscVctVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcElapsedTimeTillNow.setStatus('mandatory')
mscVctVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcSegmentsRx.setStatus('mandatory')
mscVctVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcSegmentsSent.setStatus('mandatory')
mscVctVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcStartTime.setStatus('mandatory')
mscVctVcCallReferenceNumberDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcCallReferenceNumberDecimal.setStatus('mandatory')
mscVctVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12), )
if mibBuilder.loadTexts: mscVctVcStatsTable.setStatus('mandatory')
mscVctVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcIndex"))
if mibBuilder.loadTexts: mscVctVcStatsEntry.setStatus('mandatory')
mscVctVcAckStackingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcAckStackingTimeouts.setStatus('mandatory')
mscVctVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscVctVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcDuplicatesFromSubnet.setStatus('mandatory')
mscVctVcFrmRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcFrmRetryTimeouts.setStatus('mandatory')
mscVctVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcPeakRetryQueueSize.setStatus('mandatory')
mscVctVcPeakOoSeqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcPeakOoSeqQueueSize.setStatus('mandatory')
mscVctVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcPeakOoSeqFrmForwarded.setStatus('mandatory')
mscVctVcPeakStackedAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcPeakStackedAcksRx.setStatus('mandatory')
mscVctVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcSubnetRecoveries.setStatus('mandatory')
mscVctVcWindowClosuresToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcWindowClosuresToSubnet.setStatus('mandatory')
mscVctVcWindowClosuresFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcWindowClosuresFromSubnet.setStatus('mandatory')
mscVctVcWrTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 4, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcWrTriggers.setStatus('mandatory')
mscVctVcfr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5))
mscVctVcfrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 1), )
if mibBuilder.loadTexts: mscVctVcfrRowStatusTable.setStatus('mandatory')
mscVctVcfrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcfrIndex"))
if mibBuilder.loadTexts: mscVctVcfrRowStatusEntry.setStatus('mandatory')
mscVctVcfrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrRowStatus.setStatus('mandatory')
mscVctVcfrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrComponentName.setStatus('mandatory')
mscVctVcfrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrStorageType.setStatus('mandatory')
mscVctVcfrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVctVcfrIndex.setStatus('mandatory')
mscVctVcfrCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10), )
if mibBuilder.loadTexts: mscVctVcfrCadTable.setStatus('mandatory')
mscVctVcfrCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcfrIndex"))
if mibBuilder.loadTexts: mscVctVcfrCadEntry.setStatus('mandatory')
mscVctVcfrType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2), ("frf10spvc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrType.setStatus('mandatory')
mscVctVcfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrState.setStatus('mandatory')
mscVctVcfrPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPreviousState.setStatus('mandatory')
mscVctVcfrDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrDiagnosticCode.setStatus('mandatory')
mscVctVcfrPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPreviousDiagnosticCode.setStatus('mandatory')
mscVctVcfrCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCalledNpi.setStatus('mandatory')
mscVctVcfrCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCalledDna.setStatus('mandatory')
mscVctVcfrCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCalledLcn.setStatus('mandatory')
mscVctVcfrCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCallingNpi.setStatus('mandatory')
mscVctVcfrCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCallingDna.setStatus('mandatory')
mscVctVcfrCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCallingLcn.setStatus('mandatory')
mscVctVcfrAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrAccountingEnabled.setStatus('mandatory')
mscVctVcfrFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrFastSelectCall.setStatus('mandatory')
mscVctVcfrPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPathReliability.setStatus('mandatory')
mscVctVcfrAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrAccountingEnd.setStatus('mandatory')
mscVctVcfrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPriority.setStatus('mandatory')
mscVctVcfrSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrSegmentSize.setStatus('mandatory')
mscVctVcfrMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrMaxSubnetPktSize.setStatus('mandatory')
mscVctVcfrRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrRcosToNetwork.setStatus('mandatory')
mscVctVcfrRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrRcosFromNetwork.setStatus('mandatory')
mscVctVcfrEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrEmissionPriorityToNetwork.setStatus('mandatory')
mscVctVcfrEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrEmissionPriorityFromNetwork.setStatus('mandatory')
mscVctVcfrDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrDataPath.setStatus('mandatory')
mscVctVcfrIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 11), )
if mibBuilder.loadTexts: mscVctVcfrIntdTable.setStatus('mandatory')
mscVctVcfrIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcfrIndex"))
if mibBuilder.loadTexts: mscVctVcfrIntdEntry.setStatus('mandatory')
mscVctVcfrCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCallReferenceNumber.setStatus('obsolete')
mscVctVcfrElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrElapsedTimeTillNow.setStatus('mandatory')
mscVctVcfrSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrSegmentsRx.setStatus('mandatory')
mscVctVcfrSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrSegmentsSent.setStatus('mandatory')
mscVctVcfrStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrStartTime.setStatus('mandatory')
mscVctVcfrCallReferenceNumberDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCallReferenceNumberDecimal.setStatus('mandatory')
mscVctVcfrFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12), )
if mibBuilder.loadTexts: mscVctVcfrFrdTable.setStatus('mandatory')
mscVctVcfrFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcfrIndex"))
if mibBuilder.loadTexts: mscVctVcfrFrdEntry.setStatus('mandatory')
mscVctVcfrFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrFrmCongestedToSubnet.setStatus('mandatory')
mscVctVcfrCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCannotForwardToSubnet.setStatus('mandatory')
mscVctVcfrNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrNotDataXferToSubnet.setStatus('mandatory')
mscVctVcfrOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscVctVcfrCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrCombErrorsFromSubnet.setStatus('mandatory')
mscVctVcfrDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrDuplicatesFromSubnet.setStatus('mandatory')
mscVctVcfrNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrNotDataXferFromSubnet.setStatus('mandatory')
mscVctVcfrFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrFrmLossTimeouts.setStatus('mandatory')
mscVctVcfrOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrOoSeqByteCntExceeded.setStatus('mandatory')
mscVctVcfrPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPeakOoSeqPktCount.setStatus('mandatory')
mscVctVcfrPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPeakOoSeqFrmForwarded.setStatus('mandatory')
mscVctVcfrSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrSendSequenceNumber.setStatus('mandatory')
mscVctVcfrPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPktRetryTimeouts.setStatus('mandatory')
mscVctVcfrPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPeakRetryQueueSize.setStatus('mandatory')
mscVctVcfrSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrSubnetRecoveries.setStatus('mandatory')
mscVctVcfrOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrOoSeqPktCntExceeded.setStatus('mandatory')
mscVctVcfrPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrPeakOoSeqByteCount.setStatus('mandatory')
mscVctVcfrDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 417), )
if mibBuilder.loadTexts: mscVctVcfrDmepTable.setStatus('mandatory')
mscVctVcfrDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 417, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcfrIndex"), (0, "Nortel-MsCarrier-MscPassport-VcTesterMIB", "mscVctVcfrDmepValue"))
if mibBuilder.loadTexts: mscVctVcfrDmepEntry.setStatus('mandatory')
mscVctVcfrDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 5130, 5, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVctVcfrDmepValue.setStatus('mandatory')
vcTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34, 1))
vcTesterGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34, 1, 1))
vcTesterGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34, 1, 1, 3))
vcTesterGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34, 1, 1, 3, 2))
vcTesterCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34, 3))
vcTesterCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34, 3, 1))
vcTesterCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34, 3, 1, 3))
vcTesterCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 34, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-VcTesterMIB", mscVctDnaFastSelectCallsOnly=mscVctDnaFastSelectCallsOnly, mscVctVcStartTime=mscVctVcStartTime, mscVctVcfrCallingLcn=mscVctVcfrCallingLcn, mscVctDnaDefaultRecvFrmNetworkPacketSize=mscVctDnaDefaultRecvFrmNetworkPacketSize, mscVctVcIntdTable=mscVctVcIntdTable, mscVctVcfrMaxSubnetPktSize=mscVctVcfrMaxSubnetPktSize, mscVctDnaDefaultSendToNetworkPacketSize=mscVctDnaDefaultSendToNetworkPacketSize, mscVctDnaRowStatusEntry=mscVctDnaRowStatusEntry, mscVctVcfrCallingDna=mscVctVcfrCallingDna, mscVctDc=mscVctDc, mscVctVcfrDuplicatesFromSubnet=mscVctVcfrDuplicatesFromSubnet, mscVctDcIfaValue=mscVctDcIfaValue, mscVctVcfrEmissionPriorityFromNetwork=mscVctVcfrEmissionPriorityFromNetwork, mscVctDna=mscVctDna, mscVctProvTable=mscVctProvTable, mscVctVcComponentName=mscVctVcComponentName, mscVctDnaEgressAccounting=mscVctDnaEgressAccounting, mscVctDnaOutNormalPriority=mscVctDnaOutNormalPriority, mscVctDnaHgMHgAddrAddrEntry=mscVctDnaHgMHgAddrAddrEntry, mscVctDnaServiceCategory=mscVctDnaServiceCategory, mscVctDcRemoteLcn=mscVctDcRemoteLcn, mscVctVcLocalRxPktSize=mscVctVcLocalRxPktSize, mscVctVcfrCalledDna=mscVctVcfrCalledDna, mscVctVcfrDmepTable=mscVctVcfrDmepTable, mscVctDnaIncomingOptionsEntry=mscVctDnaIncomingOptionsEntry, mscVctVcfrIntdTable=mscVctVcfrIntdTable, mscVctVcfr=mscVctVcfr, mscVctDnaCugRowStatus=mscVctDnaCugRowStatus, mscVctRowStatusTable=mscVctRowStatusTable, mscVctVcfrFrdTable=mscVctVcfrFrdTable, mscVctVcPeakOoSeqFrmForwarded=mscVctVcPeakOoSeqFrmForwarded, mscVctVcfrCallReferenceNumberDecimal=mscVctVcfrCallReferenceNumberDecimal, mscVctVcfrOoSeqPktCntExceeded=mscVctVcfrOoSeqPktCntExceeded, mscVctDnaHgMHgAddrIndex=mscVctDnaHgMHgAddrIndex, mscVctVcPreviousState=mscVctVcPreviousState, mscVctDnaNumberingPlanIndicator=mscVctDnaNumberingPlanIndicator, mscVctVcLocalTxWindowSize=mscVctVcLocalTxWindowSize, mscVctDcNfaIndex=mscVctDcNfaIndex, mscVctVcAckStackingTimeouts=mscVctVcAckStackingTimeouts, mscVctVcLocalRxWindowSize=mscVctVcLocalRxWindowSize, mscVctDnaHgMHgAddrRowStatus=mscVctDnaHgMHgAddrRowStatus, vcTesterCapabilities=vcTesterCapabilities, mscVctDnaComponentName=mscVctDnaComponentName, mscVctDcDfaValue=mscVctDcDfaValue, mscVctDcCfaRowStatus=mscVctDcCfaRowStatus, mscVctVcfrPreviousDiagnosticCode=mscVctVcfrPreviousDiagnosticCode, mscVctVcfrFastSelectCall=mscVctVcfrFastSelectCall, mscVctDcCfaEntry=mscVctDcCfaEntry, mscVctVcPeakOoSeqQueueSize=mscVctVcPeakOoSeqQueueSize, mscVctDnaCugInterlockCode=mscVctDnaCugInterlockCode, mscVctDnaHgMHgAddrNumberingPlanIndicator=mscVctDnaHgMHgAddrNumberingPlanIndicator, mscVctDnaHgM=mscVctDnaHgM, mscVctVcCadEntry=mscVctVcCadEntry, mscVctVcfrFrmLossTimeouts=mscVctVcfrFrmLossTimeouts, mscVctDcLocalNpi=mscVctDcLocalNpi, mscVctDnaOutCalls=mscVctDnaOutCalls, mscVctVc=mscVctVc, mscVctVcfrRowStatus=mscVctVcfrRowStatus, mscVctDnaHgMMaxAvailableChannels=mscVctDnaHgMMaxAvailableChannels, mscVctVcStatsEntry=mscVctVcStatsEntry, mscVctVcfrCalledLcn=mscVctVcfrCalledLcn, mscVctVcfrSendSequenceNumber=mscVctVcfrSendSequenceNumber, mscVctVcCalledDna=mscVctVcCalledDna, mscVctDcNfaValue=mscVctDcNfaValue, mscVctVcfrNotDataXferFromSubnet=mscVctVcfrNotDataXferFromSubnet, mscVctDcCugIndex=mscVctDcCugIndex, vcTesterGroupCA02=vcTesterGroupCA02, mscVctDnaAccountClass=mscVctDnaAccountClass, mscVctVcCalledLcn=mscVctVcCalledLcn, mscVctVcDiagnosticCode=mscVctVcDiagnosticCode, mscVctVcWrTriggers=mscVctVcWrTriggers, mscVctDnaAddressEntry=mscVctDnaAddressEntry, mscVctDnaOutAccess=mscVctDnaOutAccess, mscVctDnaHgMHgAddrRowStatusTable=mscVctDnaHgMHgAddrRowStatusTable, vcTesterCapabilitiesCA02=vcTesterCapabilitiesCA02, mscVctDnaOutPathSensitivityOverRide=mscVctDnaOutPathSensitivityOverRide, mscVctDnaSignalIntlAddressToLink=mscVctDnaSignalIntlAddressToLink, mscVctStorageType=mscVctStorageType, mscVctDcIndex=mscVctDcIndex, mscVctDnaCugIncCalls=mscVctDnaCugIncCalls, mscVctVcPathReliability=mscVctVcPathReliability, mscVctDnaStorageType=mscVctDnaStorageType, mscVctDnaCugFormat=mscVctDnaCugFormat, mscVctVcLocalTxPktSize=mscVctVcLocalTxPktSize, mscVctVcfrNotDataXferToSubnet=mscVctVcfrNotDataXferToSubnet, mscVctDnaOutPathReliabilitySignal=mscVctDnaOutPathReliabilitySignal, mscVctDnaCallOptionsEntry=mscVctDnaCallOptionsEntry, mscVctDcDfaTable=mscVctDcDfaTable, mscVctDcIfaIndex=mscVctDcIfaIndex, mscVctDnaOutReverseCharge=mscVctDnaOutReverseCharge, mscVctDnaCug=mscVctDnaCug, mscVctDcRowStatus=mscVctDcRowStatus, mscVctVcWindowClosuresToSubnet=mscVctVcWindowClosuresToSubnet, mscVctVcfrComponentName=mscVctVcfrComponentName, mscVctDnaHgMAvailabilityUpdateThreshold=mscVctDnaHgMAvailabilityUpdateThreshold, mscVctDnaRpoa=mscVctDnaRpoa, mscVctVcTransferPriorityFromNetwork=mscVctVcTransferPriorityFromNetwork, mscVctVcSubnetRecoveries=mscVctVcSubnetRecoveries, mscVctVcfrRcosToNetwork=mscVctVcfrRcosToNetwork, mscVctDnaCugStorageType=mscVctDnaCugStorageType, mscVctVcPeakRetryQueueSize=mscVctVcPeakRetryQueueSize, mscVctDnaOutFsUnrestrictedResponse=mscVctDnaOutFsUnrestrictedResponse, mscVctDnaDefaultTransferPriority=mscVctDnaDefaultTransferPriority, mscVctDnaSignalPreferentialCugToLink=mscVctDnaSignalPreferentialCugToLink, mscVctDnaHgMRowStatusTable=mscVctDnaHgMRowStatusTable, mscVctDnaOutgoingOptionsTable=mscVctDnaOutgoingOptionsTable, mscVctDnaCugDnic=mscVctDnaCugDnic, mscVctDnaHgMHgAddrAddrTable=mscVctDnaHgMHgAddrAddrTable, mscVctVcSubnetRxWindowSize=mscVctVcSubnetRxWindowSize, mscVct=mscVct, mscVctVcfrPriority=mscVctVcfrPriority, mscVctVcfrCannotForwardToSubnet=mscVctVcfrCannotForwardToSubnet, mscVctVcSubnetTxWindowSize=mscVctVcSubnetTxWindowSize, mscVctDnaOutIntl=mscVctDnaOutIntl, mscVctDnaHgMAvailabilityDelta=mscVctDnaHgMAvailabilityDelta, mscVctDnaRowStatus=mscVctDnaRowStatus, mscVctDcRemoteDna=mscVctDcRemoteDna, mscVctDcNfaRowStatus=mscVctDcNfaRowStatus, mscVctProvEntry=mscVctProvEntry, mscVctDnaCugType=mscVctDnaCugType, mscVctDcDiscardPriority=mscVctDcDiscardPriority, mscVctVcRowStatusTable=mscVctVcRowStatusTable, mscVctDnaHgMStorageType=mscVctDnaHgMStorageType, mscVctVcCallingLcn=mscVctVcCallingLcn, mscVctVcfrSegmentSize=mscVctVcfrSegmentSize, mscVctDcNfaTable=mscVctDcNfaTable, mscVctDcComponentName=mscVctDcComponentName, mscVctDnaDefaultRecvFrmNetworkWindowSize=mscVctDnaDefaultRecvFrmNetworkWindowSize, mscVctDnaHgMRowStatusEntry=mscVctDnaHgMRowStatusEntry, mscVctComponentName=mscVctComponentName, mscVctVcMaxSubnetPktSize=mscVctVcMaxSubnetPktSize, mscVctVcIntdEntry=mscVctVcIntdEntry, mscVctVcElapsedTimeTillNow=mscVctVcElapsedTimeTillNow, mscVctRowStatus=mscVctRowStatus, mscVctVcName=mscVctVcName, mscVctDnaIncomingOptionsTable=mscVctDnaIncomingOptionsTable, mscVctDnaIncIntlNormalCharge=mscVctDnaIncIntlNormalCharge, mscVctDnaIncFastSelect=mscVctDnaIncFastSelect, mscVctDcUserData=mscVctDcUserData, mscVctVcfrPeakRetryQueueSize=mscVctVcfrPeakRetryQueueSize, mscVctVcfrCombErrorsFromSubnet=mscVctVcfrCombErrorsFromSubnet, mscVctDcLocalDna=mscVctDcLocalDna, mscVctDcIfaTable=mscVctDcIfaTable, mscVctVcfrSubnetRecoveries=mscVctVcfrSubnetRecoveries, mscVctVcfrRcosFromNetwork=mscVctVcfrRcosFromNetwork, mscVctVcfrAccountingEnd=mscVctVcfrAccountingEnd, mscVctVcfrSegmentsRx=mscVctVcfrSegmentsRx, vcTesterGroupCA02A=vcTesterGroupCA02A, mscVctDnaRowStatusTable=mscVctDnaRowStatusTable, mscVctRowStatusEntry=mscVctRowStatusEntry, mscVctVcWindowClosuresFromSubnet=mscVctVcWindowClosuresFromSubnet, mscVctDnaPreselectRpoa=mscVctDnaPreselectRpoa, mscVctDcRemoteNpi=mscVctDcRemoteNpi, mscVctVcFastSelectCall=mscVctVcFastSelectCall, mscVctDnaOutDefaultPathReliability=mscVctDnaOutDefaultPathReliability, mscVctVcfrRowStatusTable=mscVctVcfrRowStatusTable, mscVctDcIfaRowStatus=mscVctDcIfaRowStatus, mscVctDnaHgMIfTable=mscVctDnaHgMIfTable, mscVctVcPriority=mscVctVcPriority, mscVctVcfrDiagnosticCode=mscVctVcfrDiagnosticCode, mscVctVcfrPeakOoSeqFrmForwarded=mscVctVcfrPeakOoSeqFrmForwarded, mscVctDnaIncChargeTransfer=mscVctDnaIncChargeTransfer, mscVctDnaAddressTable=mscVctDnaAddressTable, mscVctDnaHgMOpTable=mscVctDnaHgMOpTable, mscVctVcCallReferenceNumber=mscVctVcCallReferenceNumber, mscVctDcCfaValue=mscVctDcCfaValue, mscVctVcfrCalledNpi=mscVctVcfrCalledNpi, mscVctVcfrPktRetryTimeouts=mscVctVcfrPktRetryTimeouts, mscVctDnaDataNetworkAddress=mscVctDnaDataNetworkAddress, mscVctDnaOutPathReliabilityOverRide=mscVctDnaOutPathReliabilityOverRide, mscVctDnaHgMAvailableChannels=mscVctDnaHgMAvailableChannels, mscVctVcState=mscVctVcState, mscVctVcfrPathReliability=mscVctVcfrPathReliability, mscVctVcfrCallingNpi=mscVctVcfrCallingNpi, mscVctDcType=mscVctDcType, mscVctDcSvcAutoCallRetry=mscVctDcSvcAutoCallRetry, mscVctVcfrCallReferenceNumber=mscVctVcfrCallReferenceNumber, mscVctDnaOutDefaultPathSensitivity=mscVctDnaOutDefaultPathSensitivity, mscVctVcRowStatus=mscVctVcRowStatus, mscVctDnaCugRowStatusTable=mscVctDnaCugRowStatusTable, mscVctVcfrDataPath=mscVctVcfrDataPath, mscVctDcCugType=mscVctDcCugType, mscVctDcOptionsTable=mscVctDcOptionsTable, mscVctDcIfaEntry=mscVctDcIfaEntry, mscVctVcDuplicatesFromSubnet=mscVctVcDuplicatesFromSubnet, mscVctVcfrEmissionPriorityToNetwork=mscVctVcfrEmissionPriorityToNetwork, mscVctDcOptionsEntry=mscVctDcOptionsEntry, mscVctVcfrStartTime=mscVctVcfrStartTime, mscVctDnaHgMHgAddrStorageType=mscVctDnaHgMHgAddrStorageType, mscVctVcfrOoSeqByteCntExceeded=mscVctVcfrOoSeqByteCntExceeded, mscVctVcfrPeakOoSeqPktCount=mscVctVcfrPeakOoSeqPktCount, mscVctDnaCallOptionsTable=mscVctDnaCallOptionsTable, mscVctDnaCug0AsNonCugCall=mscVctDnaCug0AsNonCugCall, mscVctVcCadTable=mscVctVcCadTable, mscVctDnaCugIndex=mscVctDnaCugIndex, mscVctDnaOutHighPriority=mscVctDnaOutHighPriority, mscVctVcAccountingEnabled=mscVctVcAccountingEnabled, mscVctVcfrElapsedTimeTillNow=mscVctVcfrElapsedTimeTillNow, mscVctDnaPacketSizes=mscVctDnaPacketSizes, mscVctVcfrCadTable=mscVctVcfrCadTable, mscVctVcfrCadEntry=mscVctVcfrCadEntry, mscVctVcSegmentsSent=mscVctVcSegmentsSent, mscVctVcfrFrdEntry=mscVctVcfrFrdEntry, mscVctVcfrRowStatusEntry=mscVctVcfrRowStatusEntry, mscVctVcPeakStackedAcksRx=mscVctVcPeakStackedAcksRx, mscVctDnaOutDefaultPriority=mscVctDnaOutDefaultPriority, mscVctDcRowStatusTable=mscVctDcRowStatusTable, vcTesterCapabilitiesCA=vcTesterCapabilitiesCA, mscVctDcDfaIndex=mscVctDcDfaIndex, mscVctVcIndex=mscVctVcIndex, mscVctDcCfaIndex=mscVctDcCfaIndex, mscVctDnaIndex=mscVctDnaIndex, vcTesterMIB=vcTesterMIB, mscVctDnaHgMHgAddr=mscVctDnaHgMHgAddr, mscVctVcfrAccountingEnabled=mscVctVcfrAccountingEnabled, mscVctDnaCugCugOptionsEntry=mscVctDnaCugCugOptionsEntry, mscVctVcfrIntdEntry=mscVctVcfrIntdEntry, mscVctDnaIncSameService=mscVctDnaIncSameService, mscVctDnaIncIntlReverseCharge=mscVctDnaIncIntlReverseCharge, mscVctDnaCugPreferential=mscVctDnaCugPreferential, mscVctDnaOutNormalCharge=mscVctDnaOutNormalCharge, mscVctVcStatsTable=mscVctVcStatsTable, mscVctVcfrFrmCongestedToSubnet=mscVctVcfrFrmCongestedToSubnet, mscVctVcAccountingEnd=mscVctVcAccountingEnd, mscVctVcfrPeakOoSeqByteCount=mscVctVcfrPeakOoSeqByteCount, mscVctVcCalledNpi=mscVctVcCalledNpi, mscVctDnaCugOutCalls=mscVctDnaCugOutCalls, mscVctDnaDefaultRecvFrmNetworkThruputClass=mscVctDnaDefaultRecvFrmNetworkThruputClass, mscVctDnaHgMHgAddrDataNetworkAddress=mscVctDnaHgMHgAddrDataNetworkAddress, mscVctVcPreviousDiagnosticCode=mscVctVcPreviousDiagnosticCode, mscVctDnaHgMIfEntry=mscVctDnaHgMIfEntry, mscVctVcSegmentsRx=mscVctVcSegmentsRx, mscVctVcfrSegmentsSent=mscVctVcfrSegmentsSent, mscVctDnaOutPathSensitivitySignal=mscVctDnaOutPathSensitivitySignal, mscVctDnaDefaultSendToNetworkThruputClass=mscVctDnaDefaultSendToNetworkThruputClass, mscVctDcRowStatusEntry=mscVctDcRowStatusEntry, mscVctVcCallReferenceNumberDecimal=mscVctVcCallReferenceNumberDecimal, mscVctDnaIncNormalPriorityReverseCharge=mscVctDnaIncNormalPriorityReverseCharge, mscVctIndex=mscVctIndex, mscVctLogicalProcessor=mscVctLogicalProcessor, mscVctDnaIncHighPriorityReverseCharge=mscVctDnaIncHighPriorityReverseCharge, mscVctDnaAccountCollection=mscVctDnaAccountCollection, mscVctVcStorageType=mscVctVcStorageType, mscVctVcType=mscVctVcType, mscVctVcFrmRetryTimeouts=mscVctVcFrmRetryTimeouts, mscVctVcfrType=mscVctVcfrType, mscVctVcfrState=mscVctVcfrState, mscVctVcfrDmepEntry=mscVctVcfrDmepEntry, mscVctVcfrStorageType=mscVctVcfrStorageType, mscVctDnaIncCalls=mscVctDnaIncCalls, mscVctVcOutOfRangeFrmFromSubnet=mscVctVcOutOfRangeFrmFromSubnet, mscVctDnaOutFsRestrictedResponse=mscVctDnaOutFsRestrictedResponse, mscVctDcCfaTable=mscVctDcCfaTable, mscVctDnaDataPath=mscVctDnaDataPath)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-VcTesterMIB", mscVctDnaHgMHgAddrRowStatusEntry=mscVctDnaHgMHgAddrRowStatusEntry, mscVctVcTransferPriorityToNetwork=mscVctVcTransferPriorityToNetwork, mscVctVcfrIndex=mscVctVcfrIndex, vcTesterGroupCA=vcTesterGroupCA, mscVctDnaHgMOpEntry=mscVctDnaHgMOpEntry, mscVctDnaTransferPriorityOverRide=mscVctDnaTransferPriorityOverRide, mscVctVcSubnetTxPktSize=mscVctVcSubnetTxPktSize, mscVctDnaOutForceReverseCharge=mscVctDnaOutForceReverseCharge, mscVctDcDfaRowStatus=mscVctDcDfaRowStatus, mscVctDcDataPath=mscVctDcDataPath, mscVctDnaHgMHgAddrComponentName=mscVctDnaHgMHgAddrComponentName, mscVctDnaPacketSizeNegotiation=mscVctDnaPacketSizeNegotiation, mscVctVcfrOutOfRangeFrmFromSubnet=mscVctVcfrOutOfRangeFrmFromSubnet, mscVctDnaServiceExchange=mscVctDnaServiceExchange, mscVctDnaCugPrivileged=mscVctDnaCugPrivileged, vcTesterGroup=vcTesterGroup, mscVctDnaDefaultSendToNetworkWindowSize=mscVctDnaDefaultSendToNetworkWindowSize, mscVctDcDfaEntry=mscVctDcDfaEntry, mscVctVcRowStatusEntry=mscVctVcRowStatusEntry, mscVctDnaCugCugOptionsTable=mscVctDnaCugCugOptionsTable, mscVctVcSegmentSize=mscVctVcSegmentSize, mscVctDnaIncAccess=mscVctDnaIncAccess, mscVctDnaCugComponentName=mscVctDnaCugComponentName, mscVctDnaHgMIndex=mscVctDnaHgMIndex, mscVctDcStorageType=mscVctDcStorageType, mscVctVcSubnetRxPktSize=mscVctVcSubnetRxPktSize, mscVctVcfrDmepValue=mscVctVcfrDmepValue, mscVctDcNfaEntry=mscVctDcNfaEntry, mscVctDnaHgMRowStatus=mscVctDnaHgMRowStatus, mscVctVcCallingNpi=mscVctVcCallingNpi, vcTesterCapabilitiesCA02A=vcTesterCapabilitiesCA02A, mscVctVcCallingDna=mscVctVcCallingDna, mscVctDnaCugRowStatusEntry=mscVctDnaCugRowStatusEntry, mscVctVcfrPreviousState=mscVctVcfrPreviousState, mscVctDnaHgMComponentName=mscVctDnaHgMComponentName, mscVctDnaOutgoingOptionsEntry=mscVctDnaOutgoingOptionsEntry)
