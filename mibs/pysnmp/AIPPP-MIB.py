#
# PySNMP MIB module AIPPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIPPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, Counter64, ModuleIdentity, ObjectIdentity, iso, NotificationType, Unsigned32, MibIdentifier, enterprises, Bits, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Counter64", "ModuleIdentity", "ObjectIdentity", "iso", "NotificationType", "Unsigned32", "MibIdentifier", "enterprises", "Bits", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiPPP = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 25))
if mibBuilder.loadTexts: aiPPP.setLastUpdated('9909151700Z')
if mibBuilder.loadTexts: aiPPP.setOrganization('Applied Innovation Inc.')
aiPPPTable = MibTable((1, 3, 6, 1, 4, 1, 539, 25, 1), )
if mibBuilder.loadTexts: aiPPPTable.setStatus('current')
aiPPPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 25, 1, 1), ).setIndexNames((0, "AIPPP-MIB", "aipppLinkNumber"))
if mibBuilder.loadTexts: aiPPPEntry.setStatus('current')
aipppLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aipppLinkNumber.setStatus('current')
aipppNCPProtoOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipcp", 1), ("bcp", 2), ("ipcpbcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppNCPProtoOption.setStatus('current')
aipppLocalSecurityOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppLocalSecurityOption.setStatus('current')
aipppIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppIpSrcAddr.setStatus('current')
aipppIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppIpDestAddr.setStatus('current')
aipppIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppIpSubnetMask.setStatus('current')
aipppIpBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppIpBcastAddr.setStatus('current')
aipppLocalRadiusOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("localfallback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppLocalRadiusOption.setStatus('current')
aipppRemoteSecurityOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppRemoteSecurityOption.setStatus('current')
aipppMultilinkOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reject", 1), ("request", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppMultilinkOption.setStatus('current')
aipppMLGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppMLGroup.setStatus('current')
mibBuilder.exportSymbols("AIPPP-MIB", aipppMLGroup=aipppMLGroup, aipppLocalSecurityOption=aipppLocalSecurityOption, aiPPPEntry=aiPPPEntry, aipppIpBcastAddr=aipppIpBcastAddr, aipppMultilinkOption=aipppMultilinkOption, PYSNMP_MODULE_ID=aiPPP, aipppNCPProtoOption=aipppNCPProtoOption, aipppLocalRadiusOption=aipppLocalRadiusOption, PositiveInteger=PositiveInteger, aii=aii, aipppIpDestAddr=aipppIpDestAddr, aipppLinkNumber=aipppLinkNumber, aipppIpSrcAddr=aipppIpSrcAddr, aipppIpSubnetMask=aipppIpSubnetMask, aiPPP=aiPPP, aiPPPTable=aiPPPTable, aipppRemoteSecurityOption=aipppRemoteSecurityOption)
