#
# PySNMP MIB module SCSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCSP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, MibIdentifier, ModuleIdentity, NotificationType, Counter32, IpAddress, experimental, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Counter64, Bits, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "NotificationType", "Counter32", "IpAddress", "experimental", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Counter64", "Bits", "ObjectIdentity", "iso")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
scspMIB = ModuleIdentity((1, 3, 6, 1, 3, 2001))
if mibBuilder.loadTexts: scspMIB.setLastUpdated('9808200000Z')
if mibBuilder.loadTexts: scspMIB.setOrganization('IETF Internetworking Over NBMA Working Group (ion)')
class ScspPIDType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("atmarp", 1), ("nhrp", 2), ("mars", 3), ("dhcp", 4), ("lnni", 5))

class ScspHFSMStateType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("down", 1), ("waiting", 2), ("uniConn", 3), ("biConn", 4))

class ScspCAFSMStateType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("down", 1), ("msNego", 2), ("cacheSumm", 3), ("cacheUpdate", 4), ("aligned", 5))

class SCSPVPIInteger(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class SCSPVCIInteger(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

scspObjects = MibIdentifier((1, 3, 6, 1, 3, 2001, 1))
scspNotifications = MibIdentifier((1, 3, 6, 1, 3, 2001, 2))
scspConformance = MibIdentifier((1, 3, 6, 1, 3, 2001, 3))
scspServerGroupTable = MibTable((1, 3, 6, 1, 3, 2001, 1, 1), )
if mibBuilder.loadTexts: scspServerGroupTable.setStatus('current')
scspServerGroupEntry = MibTableRow((1, 3, 6, 1, 3, 2001, 1, 1, 1), ).setIndexNames((0, "SCSP-MIB", "scspServerGroupID"), (0, "SCSP-MIB", "scspServerGroupPID"))
if mibBuilder.loadTexts: scspServerGroupEntry.setStatus('current')
scspServerGroupID = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: scspServerGroupID.setStatus('current')
scspServerGroupPID = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 1, 1, 2), ScspPIDType())
if mibBuilder.loadTexts: scspServerGroupPID.setStatus('current')
scspServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspServerGroupRowStatus.setStatus('current')
scspLSTable = MibTable((1, 3, 6, 1, 3, 2001, 1, 2), )
if mibBuilder.loadTexts: scspLSTable.setStatus('current')
scspLSEntry = MibTableRow((1, 3, 6, 1, 3, 2001, 1, 2, 1), ).setIndexNames((0, "SCSP-MIB", "scspServerGroupID"), (0, "SCSP-MIB", "scspServerGroupPID"), (0, "SCSP-MIB", "scspLSID"))
if mibBuilder.loadTexts: scspLSEntry.setStatus('current')
scspLSID = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: scspLSID.setStatus('current')
scspLSHelloInterval = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSHelloInterval.setStatus('current')
scspLSDeadFactor = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSDeadFactor.setStatus('current')
scspLSCAReXmInterval = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSCAReXmInterval.setStatus('current')
scspLSCSUSReXmtInterval = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSCSUSReXmtInterval.setStatus('current')
scspLSCSUReXmtInterval = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSCSUReXmtInterval.setStatus('current')
scspLSCSAMaxReXmt = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSCSAMaxReXmt.setStatus('current')
scspLSRowStatus = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspLSRowStatus.setStatus('current')
scspDCSTable = MibTable((1, 3, 6, 1, 3, 2001, 1, 3), )
if mibBuilder.loadTexts: scspDCSTable.setStatus('current')
scspDCSEntry = MibTableRow((1, 3, 6, 1, 3, 2001, 1, 3, 1), ).setIndexNames((0, "SCSP-MIB", "scspServerGroupID"), (0, "SCSP-MIB", "scspServerGroupPID"), (0, "SCSP-MIB", "scspDCSID"))
if mibBuilder.loadTexts: scspDCSEntry.setStatus('current')
scspDCSID = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: scspDCSID.setStatus('current')
scspDCSCAFSMState = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 2), ScspCAFSMStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCAFSMState.setStatus('current')
scspDCSCASequence = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCASequence.setStatus('current')
scspDCSCAIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCAIn.setStatus('current')
scspDCSCAOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCAOut.setStatus('current')
scspDCSCAInvalidIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCAInvalidIn.setStatus('current')
scspDCSCADuplicateIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCADuplicateIn.setStatus('current')
scspDCSMSState = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSMSState.setStatus('current')
scspDCSCSUSIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUSIn.setStatus('current')
scspDCSCSUSOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUSOut.setStatus('current')
scspDCSCSUSInvalidIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUSInvalidIn.setStatus('current')
scspDCSCSURequestIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSURequestIn.setStatus('current')
scspDCSCSUReplyOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUReplyOut.setStatus('current')
scspDCSCSURequestOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSURequestOut.setStatus('current')
scspDCSCSUReplyIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUReplyIn.setStatus('current')
scspDCSCSUInvalidRequestIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUInvalidRequestIn.setStatus('current')
scspDCSCSUInvalidReplyIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSUInvalidReplyIn.setStatus('current')
scspDCSCSAIn = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSAIn.setStatus('current')
scspDCSCSAOut = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSAOut.setStatus('current')
scspDCSCSAReXmted = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSAReXmted.setStatus('current')
scspDCSCSAReXmtQDepth = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scspDCSCSAReXmtQDepth.setStatus('current')
scspDCSRowStatus = MibTableColumn((1, 3, 6, 1, 3, 2001, 1, 3, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scspDCSRowStatus.setStatus('current')
scspCSAReXmExceed = NotificationType((1, 3, 6, 1, 3, 2001, 2, 1)).setObjects(("SCSP-MIB", "scspServerGroupID"), ("SCSP-MIB", "scspServerGroupPID"), ("SCSP-MIB", "scspDCSID"))
if mibBuilder.loadTexts: scspCSAReXmExceed.setStatus('current')
scspCompliances = MibIdentifier((1, 3, 6, 1, 3, 2001, 3, 1))
scspGroups = MibIdentifier((1, 3, 6, 1, 3, 2001, 3, 2))
scspCompliance = ModuleCompliance((1, 3, 6, 1, 3, 2001, 3, 1, 1)).setObjects(("SCSP-MIB", "scspLSGroup"), ("SCSP-MIB", "scspDCSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scspCompliance = scspCompliance.setStatus('current')
scspLSGroup = ObjectGroup((1, 3, 6, 1, 3, 2001, 3, 2, 1)).setObjects(("SCSP-MIB", "scspServerGroupID"), ("SCSP-MIB", "scspServerGroupPID"), ("SCSP-MIB", "scspLSID"), ("SCSP-MIB", "scspLSHelloInterval"), ("SCSP-MIB", "scspLSCAReXmInterval"), ("SCSP-MIB", "scspLSCSUSReXmtInterval"), ("SCSP-MIB", "scspLSCSUReXmtInterval"), ("SCSP-MIB", "scspLSCSAMaxReXmt"), ("SCSP-MIB", "scspLSDeadFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scspLSGroup = scspLSGroup.setStatus('current')
scspDCSGroup = ObjectGroup((1, 3, 6, 1, 3, 2001, 3, 2, 2)).setObjects(("SCSP-MIB", "scspDCSID"), ("SCSP-MIB", "scspDCSCAFSMState"), ("SCSP-MIB", "scspDCSCAIn"), ("SCSP-MIB", "scspDCSCAOut"), ("SCSP-MIB", "scspDCSCAInvalidIn"), ("SCSP-MIB", "scspDCSCADuplicateIn"), ("SCSP-MIB", "scspDCSMSState"), ("SCSP-MIB", "scspDCSCSUSIn"), ("SCSP-MIB", "scspDCSCSUSOut"), ("SCSP-MIB", "scspDCSCSURequestIn"), ("SCSP-MIB", "scspDCSCSURequestOut"), ("SCSP-MIB", "scspDCSCSUReplyOut"), ("SCSP-MIB", "scspDCSCSUReplyIn"), ("SCSP-MIB", "scspDCSCSUInvalidRequestIn"), ("SCSP-MIB", "scspDCSCSUInvalidReplyIn"), ("SCSP-MIB", "scspDCSCSAIn"), ("SCSP-MIB", "scspDCSCSAOut"), ("SCSP-MIB", "scspDCSCSAReXmted"), ("SCSP-MIB", "scspDCSCSAReXmtQDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scspDCSGroup = scspDCSGroup.setStatus('current')
mibBuilder.exportSymbols("SCSP-MIB", scspGroups=scspGroups, scspLSRowStatus=scspLSRowStatus, scspDCSCSURequestOut=scspDCSCSURequestOut, scspLSID=scspLSID, scspCSAReXmExceed=scspCSAReXmExceed, scspServerGroupID=scspServerGroupID, SCSPVCIInteger=SCSPVCIInteger, ScspCAFSMStateType=ScspCAFSMStateType, scspDCSCSUReplyIn=scspDCSCSUReplyIn, scspNotifications=scspNotifications, scspConformance=scspConformance, scspDCSID=scspDCSID, scspServerGroupPID=scspServerGroupPID, scspDCSCASequence=scspDCSCASequence, scspDCSCSUSOut=scspDCSCSUSOut, scspDCSCSAReXmted=scspDCSCSAReXmted, scspLSDeadFactor=scspLSDeadFactor, scspLSTable=scspLSTable, scspLSCAReXmInterval=scspLSCAReXmInterval, scspDCSCSURequestIn=scspDCSCSURequestIn, scspDCSCAOut=scspDCSCAOut, scspLSHelloInterval=scspLSHelloInterval, scspMIB=scspMIB, scspDCSCAFSMState=scspDCSCAFSMState, scspDCSGroup=scspDCSGroup, scspDCSCADuplicateIn=scspDCSCADuplicateIn, scspDCSCSAReXmtQDepth=scspDCSCSAReXmtQDepth, ScspPIDType=ScspPIDType, scspDCSCSUSInvalidIn=scspDCSCSUSInvalidIn, scspDCSCSAOut=scspDCSCSAOut, scspCompliance=scspCompliance, scspLSCSUReXmtInterval=scspLSCSUReXmtInterval, ScspHFSMStateType=ScspHFSMStateType, scspLSCSAMaxReXmt=scspLSCSAMaxReXmt, scspDCSEntry=scspDCSEntry, scspDCSCSUInvalidRequestIn=scspDCSCSUInvalidRequestIn, scspDCSRowStatus=scspDCSRowStatus, scspDCSCSUInvalidReplyIn=scspDCSCSUInvalidReplyIn, scspDCSCSAIn=scspDCSCSAIn, scspLSCSUSReXmtInterval=scspLSCSUSReXmtInterval, scspCompliances=scspCompliances, scspServerGroupRowStatus=scspServerGroupRowStatus, SCSPVPIInteger=SCSPVPIInteger, scspObjects=scspObjects, scspDCSMSState=scspDCSMSState, scspDCSCSUSIn=scspDCSCSUSIn, scspServerGroupTable=scspServerGroupTable, scspDCSCSUReplyOut=scspDCSCSUReplyOut, scspLSGroup=scspLSGroup, scspDCSTable=scspDCSTable, scspDCSCAIn=scspDCSCAIn, PYSNMP_MODULE_ID=scspMIB, scspDCSCAInvalidIn=scspDCSCAInvalidIn, scspLSEntry=scspLSEntry, scspServerGroupEntry=scspServerGroupEntry)
