#
# PySNMP MIB module CISCO-STACKWISE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-STACKWISE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:56:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, iso, TimeTicks, ObjectIdentity, MibIdentifier, Unsigned32, Gauge32, Counter32, NotificationType, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "iso", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Gauge32", "Counter32", "NotificationType", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "MacAddress")
ciscoStackWiseMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 500))
ciscoStackWiseMIB.setRevisions(('2016-04-16 00:00', '2015-11-24 00:00', '2011-12-12 00:00', '2010-02-01 00:00', '2008-06-10 00:00', '2005-10-12 00:00',))
if mibBuilder.loadTexts: ciscoStackWiseMIB.setLastUpdated('201604160000Z')
if mibBuilder.loadTexts: ciscoStackWiseMIB.setOrganization('Cisco Systems, Inc.')
class CswPowerStackMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("powerSharing", 1), ("redundant", 2), ("powerSharingStrict", 3), ("redundantStrict", 4))

class CswPowerStackType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ring", 1), ("star", 2))

ciscoStackWiseMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 0))
ciscoStackWiseMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 1))
ciscoStackWiseMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 2))
cswGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1))
cswStackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2))
cswStackPowerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3))
class CswSwitchNumber(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CswSwitchNumberOrZero(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class CswSwitchPriority(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

cswMaxSwitchNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 1), CswSwitchNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswMaxSwitchNum.setStatus('current')
cswMaxSwitchConfigPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 2), CswSwitchPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswMaxSwitchConfigPriority.setStatus('current')
cswRingRedundant = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswRingRedundant.setStatus('current')
cswStackPowerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1), )
if mibBuilder.loadTexts: cswStackPowerInfoTable.setStatus('current')
cswStackPowerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-STACKWISE-MIB", "cswStackPowerStackNumber"))
if mibBuilder.loadTexts: cswStackPowerInfoEntry.setStatus('current')
cswStackPowerStackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cswStackPowerStackNumber.setStatus('current')
cswStackPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 2), CswPowerStackMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswStackPowerMode.setStatus('current')
cswStackPowerMasterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerMasterMacAddress.setStatus('current')
cswStackPowerMasterSwitchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerMasterSwitchNum.setStatus('current')
cswStackPowerNumMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerNumMembers.setStatus('current')
cswStackPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 6), CswPowerStackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerType.setStatus('current')
cswStackPowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswStackPowerName.setStatus('current')
cswStackPowerPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2), )
if mibBuilder.loadTexts: cswStackPowerPortInfoTable.setStatus('current')
cswStackPowerPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-STACKWISE-MIB", "cswStackPowerPortIndex"))
if mibBuilder.loadTexts: cswStackPowerPortInfoEntry.setStatus('current')
cswStackPowerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cswStackPowerPortIndex.setStatus('current')
cswStackPowerPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswStackPowerPortOperStatus.setStatus('current')
cswStackPowerPortNeighborMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerPortNeighborMacAddress.setStatus('current')
cswStackPowerPortNeighborSwitchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 4), CswSwitchNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerPortNeighborSwitchNum.setStatus('current')
cswStackPowerPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerPortLinkStatus.setStatus('current')
cswStackPowerPortOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 6), Unsigned32()).setUnits('Amperes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswStackPowerPortOverCurrentThreshold.setStatus('current')
cswStackPowerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerPortName.setStatus('current')
cswEnableStackNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswEnableStackNotifications.setStatus('deprecated')
cswEnableIndividualStackNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 5), Bits().clone(namedValues=NamedValues(("stackPortChange", 0), ("stackNewMaster", 1), ("stackMismatch", 2), ("stackRingRedundant", 3), ("stackNewMember", 4), ("stackMemberRemoved", 5), ("stackPowerLinkStatusChanged", 6), ("stackPowerPortOperStatusChanged", 7), ("stackPowerVersionMismatch", 8), ("stackPowerInvalidTopology", 9), ("stackPowerBudgetWarning", 10), ("stackPowerInvalidInputCurrent", 11), ("stackPowerInvalidOutputCurrent", 12), ("stackPowerUnderBudget", 13), ("stackPowerUnbalancedPowerSupplies", 14), ("stackPowerInsufficientPower", 15), ("stackPowerPriorityConflict", 16), ("stackPowerUnderVoltage", 17), ("stackPowerGLS", 18), ("stackPowerILS", 19), ("stackPowerSRLS", 20), ("stackPowerSSLS", 21), ("stackMemberToBeReloadedForUpgrade", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswEnableIndividualStackNotifications.setStatus('current')
cswStackDomainNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackDomainNum.setStatus('current')
cswStackType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackType.setStatus('current')
cswStackBandWidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackBandWidth.setStatus('current')
cswSwitchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1), )
if mibBuilder.loadTexts: cswSwitchInfoTable.setStatus('current')
cswSwitchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cswSwitchInfoEntry.setStatus('current')
cswSwitchNumCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 1), CswSwitchNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchNumCurrent.setStatus('current')
cswSwitchNumNextReload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 2), CswSwitchNumberOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchNumNextReload.setStatus('current')
cswSwitchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("member", 2), ("notMember", 3), ("standby", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchRole.setStatus('current')
cswSwitchSwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 4), CswSwitchPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchSwPriority.setStatus('current')
cswSwitchHwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 5), CswSwitchPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchHwPriority.setStatus('current')
cswSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("waiting", 1), ("progressing", 2), ("added", 3), ("ready", 4), ("sdmMismatch", 5), ("verMismatch", 6), ("featureMismatch", 7), ("newMasterInit", 8), ("provisioned", 9), ("invalid", 10), ("removed", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchState.setStatus('current')
cswSwitchMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchMacAddress.setStatus('current')
cswSwitchSoftwareImage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchSoftwareImage.setStatus('current')
cswSwitchPowerBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchPowerBudget.setStatus('current')
cswSwitchPowerCommited = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 10), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchPowerCommited.setStatus('current')
cswSwitchSystemPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchSystemPowerPriority.setStatus('current')
cswSwitchPoeDevicesLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchPoeDevicesLowPriority.setStatus('current')
cswSwitchPoeDevicesHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchPoeDevicesHighPriority.setStatus('current')
cswSwitchPowerAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 14), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchPowerAllocated.setStatus('current')
cswStackPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 2), )
if mibBuilder.loadTexts: cswStackPortInfoTable.setStatus('current')
cswStackPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cswStackPortInfoEntry.setStatus('current')
cswStackPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("forcedDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPortOperStatus.setStatus('current')
cswStackPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 2, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPortNeighbor.setStatus('current')
cswDistrStackLinkInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 3), )
if mibBuilder.loadTexts: cswDistrStackLinkInfoTable.setStatus('current')
cswDistrStackLinkInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-STACKWISE-MIB", "cswDSLindex"))
if mibBuilder.loadTexts: cswDistrStackLinkInfoEntry.setStatus('current')
cswDSLindex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: cswDSLindex.setStatus('current')
cswDistrStackLinkBundleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackLinkBundleOperStatus.setStatus('current')
cswDistrStackPhyPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4), )
if mibBuilder.loadTexts: cswDistrStackPhyPortInfoTable.setStatus('current')
cswDistrStackPhyPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-STACKWISE-MIB", "cswDSLindex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cswDistrStackPhyPortInfoEntry.setStatus('current')
cswDistrStackPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackPhyPort.setStatus('current')
cswDistrStackPhyPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackPhyPortOperStatus.setStatus('current')
cswDistrStackPhyPortNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackPhyPortNbr.setStatus('current')
cswDistrStackPhyPortNbrsw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1, 4), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackPhyPortNbrsw.setStatus('current')
cswMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0))
cswStackPortChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-STACKWISE-MIB", "cswStackPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPortChange.setStatus('current')
cswStackNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 2)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackNewMaster.setStatus('current')
cswStackMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 3)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchState"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackMismatch.setStatus('current')
cswStackRingRedundant = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 4)).setObjects(("CISCO-STACKWISE-MIB", "cswRingRedundant"))
if mibBuilder.loadTexts: cswStackRingRedundant.setStatus('current')
cswStackNewMember = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 5)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackNewMember.setStatus('current')
cswStackMemberRemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 6)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackMemberRemoved.setStatus('current')
cswStackPowerPortLinkStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 7)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerPortLinkStatus"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if mibBuilder.loadTexts: cswStackPowerPortLinkStatusChanged.setStatus('current')
cswStackPowerPortOperStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 8)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if mibBuilder.loadTexts: cswStackPowerPortOperStatusChanged.setStatus('current')
cswStackPowerVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 9)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerVersionMismatch.setStatus('current')
cswStackPowerInvalidTopology = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 10)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerInvalidTopology.setStatus('current')
cscwStackPowerBudgetWarrning = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 11)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cscwStackPowerBudgetWarrning.setStatus('current')
cswStackPowerInvalidInputCurrent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 12)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOverCurrentThreshold"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if mibBuilder.loadTexts: cswStackPowerInvalidInputCurrent.setStatus('current')
cswStackPowerInvalidOutputCurrent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 13)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOverCurrentThreshold"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if mibBuilder.loadTexts: cswStackPowerInvalidOutputCurrent.setStatus('current')
cswStackPowerUnderBudget = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 14)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerUnderBudget.setStatus('current')
cswStackPowerUnbalancedPowerSupplies = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 15)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerName"))
if mibBuilder.loadTexts: cswStackPowerUnbalancedPowerSupplies.setStatus('current')
cswStackPowerInsufficientPower = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 16)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerName"))
if mibBuilder.loadTexts: cswStackPowerInsufficientPower.setStatus('current')
cswStackPowerPriorityConflict = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 17)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerName"))
if mibBuilder.loadTexts: cswStackPowerPriorityConflict.setStatus('current')
cswStackPowerUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 18)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerUnderVoltage.setStatus('current')
cswStackPowerGLS = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 19)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerGLS.setStatus('current')
cswStackPowerILS = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 20)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerILS.setStatus('current')
cswStackPowerSRLS = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 21)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerSRLS.setStatus('current')
cswStackPowerSSLS = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 22)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerSSLS.setStatus('current')
cswStackMemberToBeReloadedForUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 23)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackMemberToBeReloadedForUpgrade.setStatus('current')
cswStackWiseMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1))
cswStackWiseMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2))
cswStackWiseMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 1)).setObjects(("CISCO-STACKWISE-MIB", "cswStatusGroup"), ("CISCO-STACKWISE-MIB", "cswNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBCompliance = cswStackWiseMIBCompliance.setStatus('deprecated')
cswStackWiseMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 2)).setObjects(("CISCO-STACKWISE-MIB", "cswNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStatusGroupRev1"), ("CISCO-STACKWISE-MIB", "cswStackPowerEnableNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerSwitchStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBComplianceRev1 = cswStackWiseMIBComplianceRev1.setStatus('deprecated')
cswStackWiseMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 3)).setObjects(("CISCO-STACKWISE-MIB", "cswNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswNotificationGroupSup1"), ("CISCO-STACKWISE-MIB", "cswStatusGroupRev1"), ("CISCO-STACKWISE-MIB", "cswStackPowerEnableNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerSwitchStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBComplianceRev2 = cswStackWiseMIBComplianceRev2.setStatus('deprecated')
cswStackWiseMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 4)).setObjects(("CISCO-STACKWISE-MIB", "cswNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswNotificationGroupSup1"), ("CISCO-STACKWISE-MIB", "cswStatusGroupRev1"), ("CISCO-STACKWISE-MIB", "cswStackPowerEnableNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerSwitchStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerAllocatedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBComplianceRev3 = cswStackWiseMIBComplianceRev3.setStatus('deprecated')
cswStackWiseMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 5)).setObjects(("CISCO-STACKWISE-MIB", "cswNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswNotificationGroupSup1"), ("CISCO-STACKWISE-MIB", "cswStatusGroupRev2"), ("CISCO-STACKWISE-MIB", "cswStackPowerEnableNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswDistrStackLinkStatusGroup"), ("CISCO-STACKWISE-MIB", "cswDistrStackPhyPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerSwitchStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerAllocatedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBComplianceRev4 = cswStackWiseMIBComplianceRev4.setStatus('current')
cswStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 1)).setObjects(("CISCO-STACKWISE-MIB", "cswMaxSwitchNum"), ("CISCO-STACKWISE-MIB", "cswMaxSwitchConfigPriority"), ("CISCO-STACKWISE-MIB", "cswRingRedundant"), ("CISCO-STACKWISE-MIB", "cswEnableStackNotifications"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswSwitchNumNextReload"), ("CISCO-STACKWISE-MIB", "cswSwitchRole"), ("CISCO-STACKWISE-MIB", "cswSwitchSwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchHwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchState"), ("CISCO-STACKWISE-MIB", "cswSwitchMacAddress"), ("CISCO-STACKWISE-MIB", "cswSwitchSoftwareImage"), ("CISCO-STACKWISE-MIB", "cswStackPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswStackPortNeighbor"), ("CISCO-STACKWISE-MIB", "cswStackPowerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStatusGroup = cswStatusGroup.setStatus('deprecated')
cswNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 2)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPortChange"), ("CISCO-STACKWISE-MIB", "cswStackNewMaster"), ("CISCO-STACKWISE-MIB", "cswStackMismatch"), ("CISCO-STACKWISE-MIB", "cswStackRingRedundant"), ("CISCO-STACKWISE-MIB", "cswStackNewMember"), ("CISCO-STACKWISE-MIB", "cswStackMemberRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswNotificationGroup = cswNotificationGroup.setStatus('current')
cswStatusGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 3)).setObjects(("CISCO-STACKWISE-MIB", "cswMaxSwitchNum"), ("CISCO-STACKWISE-MIB", "cswMaxSwitchConfigPriority"), ("CISCO-STACKWISE-MIB", "cswRingRedundant"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswSwitchNumNextReload"), ("CISCO-STACKWISE-MIB", "cswSwitchRole"), ("CISCO-STACKWISE-MIB", "cswSwitchSwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchHwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchState"), ("CISCO-STACKWISE-MIB", "cswSwitchMacAddress"), ("CISCO-STACKWISE-MIB", "cswSwitchSoftwareImage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStatusGroupRev1 = cswStatusGroupRev1.setStatus('current')
cswStackPowerStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 4)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerMode"), ("CISCO-STACKWISE-MIB", "cswStackPowerMasterMacAddress"), ("CISCO-STACKWISE-MIB", "cswStackPowerMasterSwitchNum"), ("CISCO-STACKWISE-MIB", "cswStackPowerNumMembers"), ("CISCO-STACKWISE-MIB", "cswStackPowerType"), ("CISCO-STACKWISE-MIB", "cswStackPowerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerStatusGroup = cswStackPowerStatusGroup.setStatus('current')
cswStackPowerSwitchStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 5)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchPowerBudget"), ("CISCO-STACKWISE-MIB", "cswSwitchPowerCommited"), ("CISCO-STACKWISE-MIB", "cswSwitchSystemPowerPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchPoeDevicesLowPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchPoeDevicesHighPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerSwitchStatusGroup = cswStackPowerSwitchStatusGroup.setStatus('current')
cswStackPowerPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 6)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortNeighborMacAddress"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortNeighborSwitchNum"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortLinkStatus"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOverCurrentThreshold"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerPortStatusGroup = cswStackPowerPortStatusGroup.setStatus('current')
cswStackPowerNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 7)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerPortLinkStatusChanged"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOperStatusChanged"), ("CISCO-STACKWISE-MIB", "cswStackPowerVersionMismatch"), ("CISCO-STACKWISE-MIB", "cswStackPowerInvalidTopology"), ("CISCO-STACKWISE-MIB", "cscwStackPowerBudgetWarrning"), ("CISCO-STACKWISE-MIB", "cswStackPowerInvalidInputCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerInvalidOutputCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerUnderBudget"), ("CISCO-STACKWISE-MIB", "cswStackPowerUnbalancedPowerSupplies"), ("CISCO-STACKWISE-MIB", "cswStackPowerInsufficientPower"), ("CISCO-STACKWISE-MIB", "cswStackPowerPriorityConflict"), ("CISCO-STACKWISE-MIB", "cswStackPowerUnderVoltage"), ("CISCO-STACKWISE-MIB", "cswStackPowerGLS"), ("CISCO-STACKWISE-MIB", "cswStackPowerILS"), ("CISCO-STACKWISE-MIB", "cswStackPowerSRLS"), ("CISCO-STACKWISE-MIB", "cswStackPowerSSLS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerNotificationGroup = cswStackPowerNotificationGroup.setStatus('current')
cswStackPowerEnableNotificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 8)).setObjects(("CISCO-STACKWISE-MIB", "cswEnableIndividualStackNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerEnableNotificationGroup = cswStackPowerEnableNotificationGroup.setStatus('current')
cswNotificationGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 9)).setObjects(("CISCO-STACKWISE-MIB", "cswStackMemberToBeReloadedForUpgrade"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswNotificationGroupSup1 = cswNotificationGroupSup1.setStatus('current')
cswStackPowerAllocatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 10)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchPowerAllocated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerAllocatedGroup = cswStackPowerAllocatedGroup.setStatus('current')
cswStatusGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 11)).setObjects(("CISCO-STACKWISE-MIB", "cswMaxSwitchNum"), ("CISCO-STACKWISE-MIB", "cswMaxSwitchConfigPriority"), ("CISCO-STACKWISE-MIB", "cswRingRedundant"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswSwitchNumNextReload"), ("CISCO-STACKWISE-MIB", "cswSwitchRole"), ("CISCO-STACKWISE-MIB", "cswSwitchSwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchHwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchState"), ("CISCO-STACKWISE-MIB", "cswSwitchMacAddress"), ("CISCO-STACKWISE-MIB", "cswStackDomainNum"), ("CISCO-STACKWISE-MIB", "cswStackType"), ("CISCO-STACKWISE-MIB", "cswStackBandWidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStatusGroupRev2 = cswStatusGroupRev2.setStatus('current')
cswDistrStackLinkStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 12)).setObjects(("CISCO-STACKWISE-MIB", "cswDistrStackLinkBundleOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswDistrStackLinkStatusGroup = cswDistrStackLinkStatusGroup.setStatus('current')
cswDistrStackPhyPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 13)).setObjects(("CISCO-STACKWISE-MIB", "cswDistrStackPhyPort"), ("CISCO-STACKWISE-MIB", "cswDistrStackPhyPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswDistrStackPhyPortNbr"), ("CISCO-STACKWISE-MIB", "cswDistrStackPhyPortNbrsw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswDistrStackPhyPortStatusGroup = cswDistrStackPhyPortStatusGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-STACKWISE-MIB", cswStackBandWidth=cswStackBandWidth, cswMIBNotifications=cswMIBNotifications, cswStackPowerILS=cswStackPowerILS, cswStackWiseMIBCompliances=cswStackWiseMIBCompliances, CswPowerStackType=CswPowerStackType, cswStackNewMember=cswStackNewMember, cswDistrStackPhyPort=cswDistrStackPhyPort, cswSwitchInfoEntry=cswSwitchInfoEntry, cswGlobals=cswGlobals, cswStackPowerInvalidInputCurrent=cswStackPowerInvalidInputCurrent, cswDistrStackLinkInfoTable=cswDistrStackLinkInfoTable, cswSwitchRole=cswSwitchRole, cswStatusGroupRev1=cswStatusGroupRev1, cswStackMemberRemoved=cswStackMemberRemoved, cswDSLindex=cswDSLindex, cswStackPowerEnableNotificationGroup=cswStackPowerEnableNotificationGroup, cswDistrStackPhyPortInfoEntry=cswDistrStackPhyPortInfoEntry, cswStackPowerInfoEntry=cswStackPowerInfoEntry, CswPowerStackMode=CswPowerStackMode, cswSwitchMacAddress=cswSwitchMacAddress, cswStackPowerAllocatedGroup=cswStackPowerAllocatedGroup, cswNotificationGroup=cswNotificationGroup, cswStackPowerPortNeighborSwitchNum=cswStackPowerPortNeighborSwitchNum, cswStackMismatch=cswStackMismatch, cswSwitchInfoTable=cswSwitchInfoTable, cswStackPowerInsufficientPower=cswStackPowerInsufficientPower, cswStackPortOperStatus=cswStackPortOperStatus, cswSwitchNumCurrent=cswSwitchNumCurrent, CswSwitchPriority=CswSwitchPriority, cswStackPowerUnderVoltage=cswStackPowerUnderVoltage, cswStackPowerInfo=cswStackPowerInfo, ciscoStackWiseMIBNotifs=ciscoStackWiseMIBNotifs, cswStackPowerPortLinkStatus=cswStackPowerPortLinkStatus, cswStackPowerMasterSwitchNum=cswStackPowerMasterSwitchNum, cswStackPowerPortStatusGroup=cswStackPowerPortStatusGroup, CswSwitchNumberOrZero=CswSwitchNumberOrZero, cswStackPowerUnderBudget=cswStackPowerUnderBudget, cswStackInfo=cswStackInfo, cswSwitchPoeDevicesHighPriority=cswSwitchPoeDevicesHighPriority, cswDistrStackPhyPortOperStatus=cswDistrStackPhyPortOperStatus, cswSwitchHwPriority=cswSwitchHwPriority, cswStackPowerUnbalancedPowerSupplies=cswStackPowerUnbalancedPowerSupplies, cswStackPowerPortInfoTable=cswStackPowerPortInfoTable, cswNotificationGroupSup1=cswNotificationGroupSup1, cswStackPowerPortOperStatus=cswStackPowerPortOperStatus, cswStackDomainNum=cswStackDomainNum, cswStackPowerMode=cswStackPowerMode, cswEnableStackNotifications=cswEnableStackNotifications, cswSwitchPoeDevicesLowPriority=cswSwitchPoeDevicesLowPriority, cswStackPowerPortNeighborMacAddress=cswStackPowerPortNeighborMacAddress, PYSNMP_MODULE_ID=ciscoStackWiseMIB, cswStackPowerPriorityConflict=cswStackPowerPriorityConflict, cswStackPowerNotificationGroup=cswStackPowerNotificationGroup, cswDistrStackPhyPortNbr=cswDistrStackPhyPortNbr, cswSwitchPowerAllocated=cswSwitchPowerAllocated, cswStackPowerPortOperStatusChanged=cswStackPowerPortOperStatusChanged, cswStackWiseMIBCompliance=cswStackWiseMIBCompliance, cswStackPowerMasterMacAddress=cswStackPowerMasterMacAddress, cswStackPowerStatusGroup=cswStackPowerStatusGroup, cswSwitchPowerBudget=cswSwitchPowerBudget, cswEnableIndividualStackNotifications=cswEnableIndividualStackNotifications, cswDistrStackPhyPortStatusGroup=cswDistrStackPhyPortStatusGroup, cswSwitchSoftwareImage=cswSwitchSoftwareImage, cswDistrStackLinkBundleOperStatus=cswDistrStackLinkBundleOperStatus, cswSwitchSystemPowerPriority=cswSwitchSystemPowerPriority, ciscoStackWiseMIBObjects=ciscoStackWiseMIBObjects, cswStackPowerNumMembers=cswStackPowerNumMembers, cswStackWiseMIBComplianceRev4=cswStackWiseMIBComplianceRev4, cswStackPortChange=cswStackPortChange, cswStackPowerName=cswStackPowerName, cswStackMemberToBeReloadedForUpgrade=cswStackMemberToBeReloadedForUpgrade, cswStackPowerPortOverCurrentThreshold=cswStackPowerPortOverCurrentThreshold, cswStackPowerSRLS=cswStackPowerSRLS, ciscoStackWiseMIB=ciscoStackWiseMIB, cswDistrStackPhyPortNbrsw=cswDistrStackPhyPortNbrsw, cswDistrStackPhyPortInfoTable=cswDistrStackPhyPortInfoTable, CswSwitchNumber=CswSwitchNumber, cswMaxSwitchNum=cswMaxSwitchNum, cswStackWiseMIBComplianceRev3=cswStackWiseMIBComplianceRev3, cswDistrStackLinkInfoEntry=cswDistrStackLinkInfoEntry, cswStackRingRedundant=cswStackRingRedundant, cswStackPowerPortInfoEntry=cswStackPowerPortInfoEntry, cswRingRedundant=cswRingRedundant, ciscoStackWiseMIBConform=ciscoStackWiseMIBConform, cswStatusGroupRev2=cswStatusGroupRev2, cswStackPowerSSLS=cswStackPowerSSLS, cswSwitchState=cswSwitchState, cswStackPowerSwitchStatusGroup=cswStackPowerSwitchStatusGroup, cswStackPowerInvalidOutputCurrent=cswStackPowerInvalidOutputCurrent, cswDistrStackLinkStatusGroup=cswDistrStackLinkStatusGroup, cswStackPortInfoEntry=cswStackPortInfoEntry, cswStackNewMaster=cswStackNewMaster, cswStackPowerPortName=cswStackPowerPortName, cswStackWiseMIBComplianceRev2=cswStackWiseMIBComplianceRev2, cswSwitchSwPriority=cswSwitchSwPriority, cscwStackPowerBudgetWarrning=cscwStackPowerBudgetWarrning, cswStackWiseMIBGroups=cswStackWiseMIBGroups, cswStackPortNeighbor=cswStackPortNeighbor, cswStackPowerInfoTable=cswStackPowerInfoTable, cswStackWiseMIBComplianceRev1=cswStackWiseMIBComplianceRev1, cswStackPowerVersionMismatch=cswStackPowerVersionMismatch, cswStackPowerStackNumber=cswStackPowerStackNumber, cswStatusGroup=cswStatusGroup, cswStackPowerInvalidTopology=cswStackPowerInvalidTopology, cswSwitchPowerCommited=cswSwitchPowerCommited, cswStackPowerPortLinkStatusChanged=cswStackPowerPortLinkStatusChanged, cswStackPortInfoTable=cswStackPortInfoTable, cswSwitchNumNextReload=cswSwitchNumNextReload, cswStackPowerPortIndex=cswStackPowerPortIndex, cswStackPowerType=cswStackPowerType, cswStackType=cswStackType, cswStackPowerGLS=cswStackPowerGLS, cswMaxSwitchConfigPriority=cswMaxSwitchConfigPriority)
