#
# PySNMP MIB module HUAWEI-SNA-DLSW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SNA-DLSW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:36:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
products, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "products")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Integer32, MibIdentifier, Unsigned32, iso, TimeTicks, ModuleIdentity, Counter32, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "MibIdentifier", "Unsigned32", "iso", "TimeTicks", "ModuleIdentity", "Counter32", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Counter64")
RowPointer, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TextualConvention", "DisplayString", "TruthValue")
dlsw = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 34))
if mibBuilder.loadTexts: dlsw.setLastUpdated('200410301551Z')
if mibBuilder.loadTexts: dlsw.setOrganization('Huawei-3com Technologies co.,Ltd.')
class MacAddressNC(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), )
class EndStationLocation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("local", 4))

class DlcType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("na", 2), ("llc", 3), ("sdlc", 4), ("qllc", 5))

class LFSize(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(516, 1470, 1500, 2052, 4472, 8144, 11407, 11454, 17800, 65535))
    namedValues = NamedValues(("lfs516", 516), ("lfs1470", 1470), ("lfs1500", 1500), ("lfs2052", 2052), ("lfs4472", 4472), ("lfs8144", 8144), ("lfs11407", 11407), ("lfs11454", 11454), ("lfs17800", 17800), ("unknown", 65535))

class CreateLineFlag(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("createLine", 1), ("deleteLine", 2))

class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

dlswNode = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1))
dlswTConn = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2))
dlswBridgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3))
dlswLocDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 4))
dlswCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5))
dlswSdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6))
dlswLlc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7))
dlswNodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswNodeVersion.setStatus('current')
dlswNodeVendorID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswNodeVendorID.setStatus('current')
dlswNodeVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswNodeVersionString.setStatus('current')
dlswNodeStdPacingSupport = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 65535))).clone(namedValues=NamedValues(("none", 1), ("adaptiveRcvWindow", 2), ("fixedRcvWindow", 3), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswNodeStdPacingSupport.setStatus('current')
dlswNodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeStatus.setStatus('current')
dlswNodeVirtualSegmentLFSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 6), LFSize().clone('lfs1500')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeVirtualSegmentLFSize.setStatus('current')
dlswNodeLocalAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeLocalAddr.setStatus('current')
dlswNodePriority = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 5), ValueRangeConstraint(65535, 65535), )).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodePriority.setStatus('current')
dlswNodeInitWindow = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(65535, 65535), )).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeInitWindow.setStatus('current')
dlswNodeKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(65535, 65535), )).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeKeepAlive.setStatus('current')
dlswNodeMaxWindow = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(65535, 65535), )).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeMaxWindow.setStatus('current')
dlswNodePermitDynamic = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 65535))).clone(namedValues=NamedValues(("permit-dynamic", 1), ("forbid-dynamic", 2), ("unknown", 65535))).clone('forbid-dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodePermitDynamic.setStatus('current')
dlswNodeConnTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeConnTimeout.setStatus('current')
dlswNodeLocalPendTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeLocalPendTimeout.setStatus('current')
dlswNodeRemotePendTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeRemotePendTimeout.setStatus('current')
dlswNodeSnaCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswNodeSnaCacheTimeout.setStatus('current')
dlswRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1), )
if mibBuilder.loadTexts: dlswRemotePeerTable.setStatus('current')
dlswRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1), ).setIndexNames((0, "HUAWEI-SNA-DLSW-MIB", "dlswRemotePeerAddr"))
if mibBuilder.loadTexts: dlswRemotePeerEntry.setStatus('current')
dlswRemotePeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerAddr.setStatus('current')
dlswRemotePeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerVersion.setStatus('current')
dlswRemotePeerVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerVendorID.setStatus('current')
dlswRemotePeerPaceWindInit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerPaceWindInit.setStatus('current')
dlswRemotePeerVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerVersionString.setStatus('current')
dlswRemotePeerIsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerIsConfig.setStatus('current')
dlswRemotePeerCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswRemotePeerCost.setStatus('current')
dlswRemotePeerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswRemotePeerKeepAlive.setStatus('current')
dlswRemotePeerLf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 9), LFSize()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswRemotePeerLf.setStatus('current')
dlswRemotePeerTcpQueneMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswRemotePeerTcpQueneMax.setStatus('current')
dlswRemotePeerHaveBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerHaveBackup.setStatus('current')
dlswRemotePeerIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerIsBackup.setStatus('current')
dlswRemotePeerBackupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerBackupAddr.setStatus('current')
dlswRemotePeerLinger = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswRemotePeerLinger.setStatus('current')
dlswRemotePeerLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connecting", 1), ("initCapExchange", 2), ("connected", 3), ("quiescing", 4), ("disconnecting", 5), ("disconnected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerLinkState.setStatus('current')
dlswRemotePeerRecvPacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerRecvPacks.setStatus('current')
dlswRemotePeerSendPacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerSendPacks.setStatus('current')
dlswRemotePeerDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerDrops.setStatus('current')
dlswRemotePeerUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswRemotePeerUptime.setStatus('current')
dlswRemotePeerEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 2, 1, 1, 20), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswRemotePeerEntryStatus.setStatus('current')
dlswBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 1), )
if mibBuilder.loadTexts: dlswBridgeTable.setStatus('current')
dlswBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 1, 1), ).setIndexNames((0, "HUAWEI-SNA-DLSW-MIB", "dlswBridgeNum"))
if mibBuilder.loadTexts: dlswBridgeEntry.setStatus('current')
dlswBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswBridgeNum.setStatus('current')
dlswBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 1, 1, 2), CreateLineFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswBridgeStatus.setStatus('current')
dlswBridgeIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 2), )
if mibBuilder.loadTexts: dlswBridgeIfTable.setStatus('current')
dlswBridgeIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dlswBridgeIfEntry.setStatus('current')
dlswBridgeIfBriGru = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswBridgeIfBriGru.setStatus('current')
dlswBridgeIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswBridgeIfName.setStatus('current')
dlswBridgeIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 3, 2, 1, 3), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswBridgeIfStatus.setStatus('current')
dlswLocMacTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 34, 4, 1), )
if mibBuilder.loadTexts: dlswLocMacTable.setStatus('current')
dlswLocMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 34, 4, 1, 1), ).setIndexNames((0, "HUAWEI-SNA-DLSW-MIB", "dlswLocMacHashIndex"), (0, "HUAWEI-SNA-DLSW-MIB", "dlswLocMacHashIndexSeqNum"))
if mibBuilder.loadTexts: dlswLocMacEntry.setStatus('current')
dlswLocMacHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswLocMacHashIndex.setStatus('current')
dlswLocMacHashIndexSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswLocMacHashIndexSeqNum.setStatus('current')
dlswLocMacMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 4, 1, 1, 3), MacAddressNC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswLocMacMac.setStatus('current')
dlswLocMacLocalInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswLocMacLocalInterfaceName.setStatus('current')
dlswCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1), )
if mibBuilder.loadTexts: dlswCircuitTable.setStatus('current')
dlswCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1), ).setIndexNames((0, "HUAWEI-SNA-DLSW-MIB", "dlswCircuitS1CircuitId"))
if mibBuilder.loadTexts: dlswCircuitEntry.setStatus('current')
dlswCircuitS1CircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1CircuitId.setStatus('current')
dlswCircuitS1Mac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 2), MacAddressNC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1Mac.setStatus('current')
dlswCircuitS1Sap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1Sap.setStatus('current')
dlswCircuitS2Mac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 4), MacAddressNC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2Mac.setStatus('current')
dlswCircuitS2Sap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2Sap.setStatus('current')
dlswCircuitS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1IfIndex.setStatus('current')
dlswCircuitS1Ifname = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1Ifname.setStatus('current')
dlswCircuitS1DlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 8), DlcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1DlcType.setStatus('current')
dlswCircuitS2TAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2TAddress.setStatus('current')
dlswCircuitS2CircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2CircuitId.setStatus('current')
dlswCircuitOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s1", 1), ("s2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitOrigin.setStatus('current')
dlswCircuitEntryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 12), TimeTicks()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitEntryTime.setStatus('current')
dlswCircuitStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 13), TimeTicks()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitStateTime.setStatus('current')
dlswCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("disconnected", 1), ("circuitStart", 2), ("resolvePending", 3), ("circuitPending", 4), ("circuitEstablished", 5), ("connectPending", 6), ("contactPending", 7), ("connected", 8), ("disconnectPending", 9), ("haltPending", 10), ("haltPendingNoack", 11), ("circuitRestart", 12), ("restartPending", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitState.setStatus('current')
dlswCircuitFCSendGrantedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCSendGrantedUnits.setStatus('current')
dlswCircuitFCSendCurrentWndw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCSendCurrentWndw.setStatus('current')
dlswCircuitFCRecvGrantedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCRecvGrantedUnits.setStatus('current')
dlswCircuitFCRecvCurrentWndw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCRecvCurrentWndw.setStatus('current')
dlswSdlcPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1), )
if mibBuilder.loadTexts: dlswSdlcPortTable.setStatus('current')
dlswSdlcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dlswSdlcPortEntry.setStatus('current')
dlswSdlcPortSerialName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswSdlcPortSerialName.setStatus('current')
dlswSdlcPortEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sdlc", 1), ("ppp", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswSdlcPortEncap.setStatus('current')
dlswSdlcPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("seconday", 2), ("norole", 3))).clone('norole')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortRole.setStatus('current')
dlswSdlcPortVmac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 4), MacAddressNC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortVmac.setStatus('current')
dlswSdlcPortHoldq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 255)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortHoldq.setStatus('current')
dlswSdlcPortK = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortK.setStatus('current')
dlswSdlcPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("m8", 8), ("m128", 128))).clone('m8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortModule.setStatus('current')
dlswSdlcPortN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17680)).clone(265)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortN1.setStatus('current')
dlswSdlcPortN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortN2.setStatus('current')
dlswSdlcPortPollPauseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortPollPauseTimer.setStatus('current')
dlswSdlcPortSimultaneousEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disenable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortSimultaneousEnable.setStatus('current')
dlswSdlcPortT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortT1.setStatus('current')
dlswSdlcPortT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcPortT2.setStatus('current')
dlswSdlcLsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 2), )
if mibBuilder.loadTexts: dlswSdlcLsTable.setStatus('current')
dlswSdlcLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-SNA-DLSW-MIB", "dlswSdlcLsAddress"))
if mibBuilder.loadTexts: dlswSdlcLsEntry.setStatus('current')
dlswSdlcLsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswSdlcLsAddress.setStatus('current')
dlswSdlcLsLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcLsLocalId.setStatus('current')
dlswSdlcLsRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 2, 1, 3), MacAddressNC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcLsRemoteMac.setStatus('current')
dlswSdlcLsSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcLsSsap.setStatus('current')
dlswSdlcLsDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcLsDsap.setStatus('current')
dlswSdlcLsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 6, 2, 1, 6), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswSdlcLsStatus.setStatus('current')
dlswLlc2PortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1), )
if mibBuilder.loadTexts: dlswLlc2PortTable.setStatus('current')
dlswLlc2PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-SNA-DLSW-MIB", "dlswBridgeIfBriGru"))
if mibBuilder.loadTexts: dlswLlc2PortEntry.setStatus('current')
dlswLLC2PortAckDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortAckDelayTime.setStatus('current')
dlswLLC2PortAckMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortAckMax.setStatus('current')
dlswLLC2PortLocalWnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortLocalWnd.setStatus('current')
dlswLLC2PortModulus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("m8", 8), ("m128", 128))).clone('m128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortModulus.setStatus('current')
dlswLLC2PortN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortN2.setStatus('current')
dlswLLC2PortT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortT1.setStatus('current')
dlswLLC2PortTbusyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortTbusyTime.setStatus('current')
dlswLLC2PortTpfTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortTpfTime.setStatus('current')
dlswLLC2PortTrejTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortTrejTime.setStatus('current')
dlswLLC2PortTxqMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 34, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 200)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswLLC2PortTxqMax.setStatus('current')
dlswTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 20))
dlswTrapCntlState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 34, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTrapCntlState.setStatus('current')
dlswTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 8))
dlswTrapsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 34, 8, 0))
dlswTrapTConnPartnerReject = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 34, 8, 0, 1)).setObjects(("HUAWEI-SNA-DLSW-MIB", "dlswRemotePeerAddr"))
if mibBuilder.loadTexts: dlswTrapTConnPartnerReject.setStatus('current')
dlswTrapTConnChangeState = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 34, 8, 0, 2)).setObjects(("HUAWEI-SNA-DLSW-MIB", "dlswRemotePeerAddr"), ("HUAWEI-SNA-DLSW-MIB", "dlswRemotePeerLinkState"))
if mibBuilder.loadTexts: dlswTrapTConnChangeState.setStatus('current')
dlswTrapCircuitChangeState = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 34, 8, 0, 3)).setObjects(("HUAWEI-SNA-DLSW-MIB", "dlswCircuitS1CircuitId"), ("HUAWEI-SNA-DLSW-MIB", "dlswCircuitState"), ("HUAWEI-SNA-DLSW-MIB", "dlswCircuitS1Mac"), ("HUAWEI-SNA-DLSW-MIB", "dlswCircuitS1Sap"), ("HUAWEI-SNA-DLSW-MIB", "dlswCircuitS2Mac"), ("HUAWEI-SNA-DLSW-MIB", "dlswCircuitS2Sap"))
if mibBuilder.loadTexts: dlswTrapCircuitChangeState.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-SNA-DLSW-MIB", dlswRemotePeerCost=dlswRemotePeerCost, dlswCircuitFCSendCurrentWndw=dlswCircuitFCSendCurrentWndw, dlswSdlcPortN2=dlswSdlcPortN2, dlswTrapCntlState=dlswTrapCntlState, dlswSdlcLsSsap=dlswSdlcLsSsap, dlswNode=dlswNode, dlswSdlcPortPollPauseTimer=dlswSdlcPortPollPauseTimer, dlswLocMacEntry=dlswLocMacEntry, dlswTrapControl=dlswTrapControl, dlswSdlcPortEntry=dlswSdlcPortEntry, dlswNodeVendorID=dlswNodeVendorID, dlswTConn=dlswTConn, dlswNodeStdPacingSupport=dlswNodeStdPacingSupport, dlswSdlcPortT1=dlswSdlcPortT1, EndStationLocation=EndStationLocation, dlswBridgeIfTable=dlswBridgeIfTable, dlswNodePermitDynamic=dlswNodePermitDynamic, dlswBridgeTable=dlswBridgeTable, dlswNodeStatus=dlswNodeStatus, dlswRemotePeerAddr=dlswRemotePeerAddr, dlswLLC2PortAckMax=dlswLLC2PortAckMax, dlswCircuitStateTime=dlswCircuitStateTime, dlswCircuitS1Ifname=dlswCircuitS1Ifname, dlswLocMacMac=dlswLocMacMac, dlswRemotePeerEntry=dlswRemotePeerEntry, dlswNodeVersionString=dlswNodeVersionString, dlswNodeConnTimeout=dlswNodeConnTimeout, dlswNodePriority=dlswNodePriority, dlswLocDirectory=dlswLocDirectory, dlswBridgeNum=dlswBridgeNum, dlswLlc2=dlswLlc2, dlswRemotePeerDrops=dlswRemotePeerDrops, dlswRemotePeerKeepAlive=dlswRemotePeerKeepAlive, dlswSdlcLsStatus=dlswSdlcLsStatus, dlswCircuitS2Mac=dlswCircuitS2Mac, dlswRemotePeerIsConfig=dlswRemotePeerIsConfig, dlswCircuitEntry=dlswCircuitEntry, dlswRemotePeerLinger=dlswRemotePeerLinger, dlswSdlcLsEntry=dlswSdlcLsEntry, dlswCircuitFCSendGrantedUnits=dlswCircuitFCSendGrantedUnits, CreateLineFlag=CreateLineFlag, dlswSdlcPortTable=dlswSdlcPortTable, dlswCircuitS2CircuitId=dlswCircuitS2CircuitId, dlswCircuitFCRecvGrantedUnits=dlswCircuitFCRecvGrantedUnits, dlswRemotePeerVersionString=dlswRemotePeerVersionString, dlswLLC2PortT1=dlswLLC2PortT1, dlswSdlcPortK=dlswSdlcPortK, dlswSdlcLsDsap=dlswSdlcLsDsap, dlswSdlcLsTable=dlswSdlcLsTable, dlswSdlcLsLocalId=dlswSdlcLsLocalId, dlswRemotePeerSendPacks=dlswRemotePeerSendPacks, dlswCircuit=dlswCircuit, dlswNodeMaxWindow=dlswNodeMaxWindow, dlswBridgeIfStatus=dlswBridgeIfStatus, dlswLLC2PortTxqMax=dlswLLC2PortTxqMax, dlswLocMacHashIndex=dlswLocMacHashIndex, dlswRemotePeerVersion=dlswRemotePeerVersion, dlswRemotePeerTable=dlswRemotePeerTable, dlswSdlc=dlswSdlc, dlswSdlcPortT2=dlswSdlcPortT2, dlswTrapTConnPartnerReject=dlswTrapTConnPartnerReject, dlsw=dlsw, dlswRemotePeerHaveBackup=dlswRemotePeerHaveBackup, dlswSdlcPortEncap=dlswSdlcPortEncap, dlswTraps=dlswTraps, dlswCircuitS1Sap=dlswCircuitS1Sap, MacAddressNC=MacAddressNC, dlswRemotePeerBackupAddr=dlswRemotePeerBackupAddr, dlswCircuitState=dlswCircuitState, dlswCircuitFCRecvCurrentWndw=dlswCircuitFCRecvCurrentWndw, dlswLocMacTable=dlswLocMacTable, dlswTrapsV2=dlswTrapsV2, dlswRemotePeerLinkState=dlswRemotePeerLinkState, dlswBridgeIfEntry=dlswBridgeIfEntry, dlswNodeLocalAddr=dlswNodeLocalAddr, dlswBridgeIfName=dlswBridgeIfName, dlswLLC2PortTpfTime=dlswLLC2PortTpfTime, dlswSdlcPortRole=dlswSdlcPortRole, dlswNodeInitWindow=dlswNodeInitWindow, dlswRemotePeerTcpQueneMax=dlswRemotePeerTcpQueneMax, dlswLLC2PortN2=dlswLLC2PortN2, dlswRemotePeerIsBackup=dlswRemotePeerIsBackup, dlswLLC2PortLocalWnd=dlswLLC2PortLocalWnd, dlswBridgeGroup=dlswBridgeGroup, dlswLLC2PortModulus=dlswLLC2PortModulus, dlswBridgeStatus=dlswBridgeStatus, dlswNodeRemotePendTimeout=dlswNodeRemotePendTimeout, dlswBridgeIfBriGru=dlswBridgeIfBriGru, dlswLlc2PortEntry=dlswLlc2PortEntry, dlswCircuitS1DlcType=dlswCircuitS1DlcType, dlswSdlcPortModule=dlswSdlcPortModule, dlswCircuitS1CircuitId=dlswCircuitS1CircuitId, dlswTrapTConnChangeState=dlswTrapTConnChangeState, PYSNMP_MODULE_ID=dlsw, dlswLLC2PortTbusyTime=dlswLLC2PortTbusyTime, dlswNodeVersion=dlswNodeVersion, dlswSdlcLsAddress=dlswSdlcLsAddress, dlswLocMacHashIndexSeqNum=dlswLocMacHashIndexSeqNum, dlswLlc2PortTable=dlswLlc2PortTable, dlswTrapCircuitChangeState=dlswTrapCircuitChangeState, dlswSdlcLsRemoteMac=dlswSdlcLsRemoteMac, dlswCircuitS1Mac=dlswCircuitS1Mac, dlswNodeKeepAlive=dlswNodeKeepAlive, dlswLLC2PortAckDelayTime=dlswLLC2PortAckDelayTime, dlswLLC2PortTrejTime=dlswLLC2PortTrejTime, dlswCircuitS2Sap=dlswCircuitS2Sap, dlswCircuitEntryTime=dlswCircuitEntryTime, dlswRemotePeerRecvPacks=dlswRemotePeerRecvPacks, LFSize=LFSize, dlswSdlcPortVmac=dlswSdlcPortVmac, dlswBridgeEntry=dlswBridgeEntry, dlswCircuitS1IfIndex=dlswCircuitS1IfIndex, dlswRemotePeerPaceWindInit=dlswRemotePeerPaceWindInit, dlswRemotePeerUptime=dlswRemotePeerUptime, dlswNodeLocalPendTimeout=dlswNodeLocalPendTimeout, dlswRemotePeerVendorID=dlswRemotePeerVendorID, dlswRemotePeerLf=dlswRemotePeerLf, dlswCircuitOrigin=dlswCircuitOrigin, DlcType=DlcType, EntryStatus=EntryStatus, dlswSdlcPortN1=dlswSdlcPortN1, dlswSdlcPortHoldq=dlswSdlcPortHoldq, dlswNodeVirtualSegmentLFSize=dlswNodeVirtualSegmentLFSize, dlswSdlcPortSimultaneousEnable=dlswSdlcPortSimultaneousEnable, dlswCircuitTable=dlswCircuitTable, dlswSdlcPortSerialName=dlswSdlcPortSerialName, dlswNodeSnaCacheTimeout=dlswNodeSnaCacheTimeout, dlswCircuitS2TAddress=dlswCircuitS2TAddress, dlswLocMacLocalInterfaceName=dlswLocMacLocalInterfaceName, dlswRemotePeerEntryStatus=dlswRemotePeerEntryStatus)
