#
# PySNMP MIB module CXChassis2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXChassis2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
cxChassis2, = mibBuilder.importSymbols("CXProduct-SMI", "cxChassis2")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, NotificationType, ModuleIdentity, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Bits, Unsigned32, iso, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "NotificationType", "ModuleIdentity", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Bits", "Unsigned32", "iso", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxChassIfAdmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 5))
ifMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 6))
ifMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 6, 1))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("invalid", 1), ("valid", 2))

cxChassLogIfAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 5, 2), )
if mibBuilder.loadTexts: cxChassLogIfAdmTable.setStatus('mandatory')
cxChassLogIfAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 5, 2, 1), ).setIndexNames((0, "CXChassis2-MIB", "cxChassLogIfAdmCpuIndex"), (0, "CXChassis2-MIB", "cxChassLogIfAdmIfType"), (0, "CXChassis2-MIB", "cxChassLogIfAdmChannelIndex"))
if mibBuilder.loadTexts: cxChassLogIfAdmEntry.setStatus('mandatory')
cxChassLogIfAdmCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxChassLogIfAdmCpuIndex.setStatus('mandatory')
cxChassLogIfAdmIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxChassLogIfAdmIfType.setStatus('mandatory')
cxChassLogIfAdmChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxChassLogIfAdmChannelIndex.setStatus('mandatory')
cxChassLogIfAdmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxChassLogIfAdmIfIndex.setStatus('mandatory')
cxChassLogIfAdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 5, 2, 1, 5), RowStatus().clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxChassLogIfAdmRowStatus.setStatus('mandatory')
ifStackTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 6, 1, 2), )
if mibBuilder.loadTexts: ifStackTable.setStatus('mandatory')
ifStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 6, 1, 2, 1), ).setIndexNames((0, "CXChassis2-MIB", "ifStackHigherLayer"), (0, "CXChassis2-MIB", "ifStackLowerLayer"))
if mibBuilder.loadTexts: ifStackEntry.setStatus('mandatory')
ifStackHigherLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStackHigherLayer.setStatus('mandatory')
ifStackLowerLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStackLowerLayer.setStatus('mandatory')
ifStackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 9, 6, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifStackStatus.setStatus('mandatory')
mibBuilder.exportSymbols("CXChassis2-MIB", ifMIB=ifMIB, ifStackLowerLayer=ifStackLowerLayer, RowStatus=RowStatus, ifStackEntry=ifStackEntry, ifMIBObjects=ifMIBObjects, cxChassLogIfAdmTable=cxChassLogIfAdmTable, cxChassIfAdmGroup=cxChassIfAdmGroup, ifStackStatus=ifStackStatus, cxChassLogIfAdmEntry=cxChassLogIfAdmEntry, cxChassLogIfAdmIfType=cxChassLogIfAdmIfType, ifStackTable=ifStackTable, cxChassLogIfAdmCpuIndex=cxChassLogIfAdmCpuIndex, cxChassLogIfAdmIfIndex=cxChassLogIfAdmIfIndex, cxChassLogIfAdmRowStatus=cxChassLogIfAdmRowStatus, cxChassLogIfAdmChannelIndex=cxChassLogIfAdmChannelIndex, ifStackHigherLayer=ifStackHigherLayer)
