#
# PySNMP MIB module SPP-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SPP-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:02:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, iso, Counter64, enterprises, Gauge32, IpAddress, Bits, NotificationType, ModuleIdentity, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "iso", "Counter64", "enterprises", "Gauge32", "IpAddress", "Bits", "NotificationType", "ModuleIdentity", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTSPPPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30), )
if mibBuilder.loadTexts: cdx6500PPCTSPPPortTable.setStatus('mandatory')
cdx6500PPCTSPPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1), ).setIndexNames((0, "SPP-OPT-MIB", "cdx6500SPPPCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCTSPPPortEntry.setStatus('mandatory')
cdx6500SPPPCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgPortNum.setStatus('mandatory')
cdx6500SPPPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(52))).clone(namedValues=NamedValues(("spp", 52)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgPortType.setStatus('mandatory')
cdx6500SPPPCfgPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 7, 12, 13, 14, 15, 98))).clone(namedValues=NamedValues(("speed300", 2), ("speed1200", 3), ("speed600", 4), ("speed1800", 7), ("speed2400", 12), ("speed4800", 13), ("speed9600", 14), ("speed19200", 15), ("speed7200", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgPortSpeed.setStatus('mandatory')
cdx6500SPPPCfgInterchTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51, 100, 150, 200, 250))).clone(namedValues=NamedValues(("time50", 51), ("time100", 100), ("time150", 150), ("time200", 200), ("time250", 250)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgInterchTimeout.setStatus('mandatory')
cdx6500SPPPCfgSLCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgSLCNum.setStatus('mandatory')
cdx6500SPPPCfgSLCLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgSLCLineNum.setStatus('mandatory')
cdx6500SPPPCfgStnIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgStnIDList.setStatus('mandatory')
cdx6500SPPPCfgProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgProtocolID.setStatus('mandatory')
cdx6500SPPPCfgQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgQueueSize.setStatus('mandatory')
cdx6500SPPPCfgBlockingThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgBlockingThresh.setStatus('mandatory')
cdx6500SPPPCfgUnblockThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgUnblockThresh.setStatus('mandatory')
cdx6500SPPPCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgElectricalInterfaceType.setStatus('mandatory')
cdx6500SPPPCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500SPPPCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 30, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTSPPPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31), )
if mibBuilder.loadTexts: cdx6500PPSTSPPPStatsTable.setStatus('mandatory')
cdx6500PPSTSPPPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1), ).setIndexNames((0, "SPP-OPT-MIB", "cdx6500SPPPStatPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTSPPPStatEntry.setStatus('mandatory')
cdx6500SPPPStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatPortNum.setStatus('mandatory')
cdx6500SPPPStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatPortStatus.setStatus('mandatory')
cdx6500SPPPStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(52))).clone(namedValues=NamedValues(("spp", 52)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatPortType.setStatus('mandatory')
cdx6500SPPPStatPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 7, 12, 13, 14, 15, 98))).clone(namedValues=NamedValues(("speed300", 2), ("speed1200", 3), ("speed600", 4), ("speed1800", 7), ("speed2400", 12), ("speed4800", 13), ("speed9600", 14), ("speed19200", 15), ("speed7200", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatPortSpeed.setStatus('mandatory')
cdx6500SPPPStatPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatPortUtilIn.setStatus('mandatory')
cdx6500SPPPStatPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatPortUtilOut.setStatus('mandatory')
cdx6500SPPPStatSLCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatSLCNum.setStatus('mandatory')
cdx6500SPPPStatSLCLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatSLCLineNum.setStatus('mandatory')
cdx6500SPPPStatFlowCntrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("unblocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatFlowCntrlState.setStatus('mandatory')
cdx6500SPPPStatLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatLastStatsReset.setStatus('mandatory')
cdx6500SPPPStatChrsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatChrsIn.setStatus('mandatory')
cdx6500SPPPStatChrsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatChrsOut.setStatus('mandatory')
cdx6500SPPPStatFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatFramesIn.setStatus('mandatory')
cdx6500SPPPStatFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatFramesOut.setStatus('mandatory')
cdx6500SPPPStatChrsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatChrsInPerSec.setStatus('mandatory')
cdx6500SPPPStatChrsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatChrsOutPerSec.setStatus('mandatory')
cdx6500SPPPStatFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatFramesInPerSec.setStatus('mandatory')
cdx6500SPPPStatFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatFramesOutPerSec.setStatus('mandatory')
cdx6500SPPPStatNoOfErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatNoOfErrorFrames.setStatus('mandatory')
cdx6500SPPPStatNoOfStns = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 31, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPPStatNoOfStns.setStatus('mandatory')
cdx6500SPSTSPPStnStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9), )
if mibBuilder.loadTexts: cdx6500SPSTSPPStnStatTable.setStatus('mandatory')
cdx6500SPSTSPPSStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1), ).setIndexNames((0, "SPP-OPT-MIB", "cdx6500SPPSStatPortNum"), (0, "SPP-OPT-MIB", "cdx6500SPPSStatStnId"))
if mibBuilder.loadTexts: cdx6500SPSTSPPSStatEntry.setStatus('mandatory')
cdx6500SPPSStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatPortNum.setStatus('mandatory')
cdx6500SPPSStatStnId = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatStnId.setStatus('mandatory')
cdx6500SPPSStatStnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatStnStatus.setStatus('mandatory')
cdx6500SPPSStatSLCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatSLCNum.setStatus('mandatory')
cdx6500SPPSStatSLCLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatSLCLineNum.setStatus('mandatory')
cdx6500SPPSStatAdjChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("unblocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatAdjChanState.setStatus('mandatory')
cdx6500SPPSStatCurrCallSummStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibited", 1), ("disconnected", 2), ("calling", 3), ("called", 4), ("connected", 5), ("notDefined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatCurrCallSummStatus.setStatus('mandatory')
cdx6500SPPSStatLastClrCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastClrCauseCode.setStatus('mandatory')
cdx6500SPPSStatLastClrDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastClrDiagCode.setStatus('mandatory')
cdx6500SPPSStatLastInCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastInCalledAddress.setStatus('mandatory')
cdx6500SPPSStatLastInCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastInCallingAddress.setStatus('mandatory')
cdx6500SPPSStatLastInCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastInCallFacilities.setStatus('mandatory')
cdx6500SPPSStatLastInCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastInCallCUD.setStatus('mandatory')
cdx6500SPPSStatLastOutCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastOutCalledAddress.setStatus('mandatory')
cdx6500SPPSStatLastOutCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastOutCallingAddress.setStatus('mandatory')
cdx6500SPPSStatLastOutCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastOutCallFacilities.setStatus('mandatory')
cdx6500SPPSStatLastOutCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastOutCallCUD.setStatus('mandatory')
cdx6500SPPSStatChrsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatChrsIn.setStatus('mandatory')
cdx6500SPPSStatChrsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatChrsOut.setStatus('mandatory')
cdx6500SPPSStatFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatFramesIn.setStatus('mandatory')
cdx6500SPPSStatFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatFramesOut.setStatus('mandatory')
cdx6500SPPSStatChrsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatChrsInPerSec.setStatus('mandatory')
cdx6500SPPSStatChrsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatChrsOutPerSec.setStatus('mandatory')
cdx6500SPPSStatFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatFramesInPerSec.setStatus('mandatory')
cdx6500SPPSStatFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatFramesOutPerSec.setStatus('mandatory')
cdx6500SPPSStatNoOfErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatNoOfErrorFrames.setStatus('mandatory')
cdx6500SPPSStatStnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatStnState.setStatus('mandatory')
cdx6500SPPSStatLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 9, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SPPSStatLastStatsReset.setStatus('mandatory')
cdx6500ContSPPTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13))
cdx6500ContSPPPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 1), )
if mibBuilder.loadTexts: cdx6500ContSPPPortTable.setStatus('mandatory')
cdx6500ContSPPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 1, 1), ).setIndexNames((0, "SPP-OPT-MIB", "cdx6500ContSPPPortNum"))
if mibBuilder.loadTexts: cdx6500ContSPPPortEntry.setStatus('mandatory')
cdx6500ContSPPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500ContSPPPortNum.setStatus('mandatory')
cdx6500ContSPPPortBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("boot", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContSPPPortBoot.setStatus('mandatory')
cdx6500ContSPPPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContSPPPortEnable.setStatus('mandatory')
cdx6500ContSPPPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disable", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContSPPPortDisable.setStatus('mandatory')
cdx6500ContSPPPortResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContSPPPortResetStats.setStatus('mandatory')
cdx6500ContSPPStnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 2), )
if mibBuilder.loadTexts: cdx6500ContSPPStnTable.setStatus('mandatory')
cdx6500ContSPPStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 2, 1), ).setIndexNames((0, "SPP-OPT-MIB", "cdx6500ContSPPPortNum"), (0, "SPP-OPT-MIB", "cdx6500ContSPPStnId"))
if mibBuilder.loadTexts: cdx6500ContSPPStnEntry.setStatus('mandatory')
cdx6500SContSPPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500SContSPPPortNum.setStatus('mandatory')
cdx6500ContSPPStnId = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: cdx6500ContSPPStnId.setStatus('mandatory')
cdx6500ContSPPStnBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("boot", 1))))
if mibBuilder.loadTexts: cdx6500ContSPPStnBoot.setStatus('mandatory')
cdx6500ContSPPStnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContSPPStnEnable.setStatus('mandatory')
cdx6500ContSPPStnDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disable", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContSPPStnDisable.setStatus('mandatory')
cdx6500ContSPPStnResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContSPPStnResetStats.setStatus('mandatory')
mibBuilder.exportSymbols("SPP-OPT-MIB", cdx6500SPPSStatLastInCallCUD=cdx6500SPPSStatLastInCallCUD, cdx6500SPPPStatPortType=cdx6500SPPPStatPortType, cdx6500SPPPStatChrsOutPerSec=cdx6500SPPPStatChrsOutPerSec, cdx6500SPPPCfgBlockingThresh=cdx6500SPPPCfgBlockingThresh, cdx6500ContSPPTable=cdx6500ContSPPTable, cdx6500SPPSStatLastOutCallingAddress=cdx6500SPPSStatLastOutCallingAddress, cdx6500SPPSStatChrsOutPerSec=cdx6500SPPSStatChrsOutPerSec, cdx6500SPPSStatChrsIn=cdx6500SPPSStatChrsIn, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500ContSPPPortBoot=cdx6500ContSPPPortBoot, cdx6500SPPSStatStnId=cdx6500SPPSStatStnId, cdx6500PPCTSPPPortTable=cdx6500PPCTSPPPortTable, cdx6500SPPPStatPortNum=cdx6500SPPPStatPortNum, cdx6500ContSPPPortDisable=cdx6500ContSPPPortDisable, cdx6500SPPPCfgPortNum=cdx6500SPPPCfgPortNum, cdx6500SPPPStatSLCNum=cdx6500SPPPStatSLCNum, cdx6500SPPSStatFramesIn=cdx6500SPPSStatFramesIn, DisplayString=DisplayString, cdx6500ContSPPPortResetStats=cdx6500ContSPPPortResetStats, cdx6500ContSPPStnResetStats=cdx6500ContSPPStnResetStats, cdx6500SPPSStatPortNum=cdx6500SPPSStatPortNum, cdx6500Statistics=cdx6500Statistics, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500SPPPStatPortSpeed=cdx6500SPPPStatPortSpeed, cdx6500SPPSStatStnState=cdx6500SPPSStatStnState, cdx6500SPPPStatFramesIn=cdx6500SPPPStatFramesIn, cdx6500SPPSStatLastClrDiagCode=cdx6500SPPSStatLastClrDiagCode, cdx6500SPPPCfgPortSpeed=cdx6500SPPPCfgPortSpeed, cdx6500SPPPStatNoOfStns=cdx6500SPPPStatNoOfStns, cdx6500SPPPCfgHighSpeedElectricalInterfaceOption=cdx6500SPPPCfgHighSpeedElectricalInterfaceOption, cdx6500SPPSStatLastClrCauseCode=cdx6500SPPSStatLastClrCauseCode, cdx6500SPPPStatPortStatus=cdx6500SPPPStatPortStatus, cdx6500SPPPStatPortUtilOut=cdx6500SPPPStatPortUtilOut, cdx6500SPPSStatCurrCallSummStatus=cdx6500SPPSStatCurrCallSummStatus, cdx6500ContSPPStnEntry=cdx6500ContSPPStnEntry, cdx6500SPPPStatSLCLineNum=cdx6500SPPPStatSLCLineNum, cdx6500PPSTSPPPStatsTable=cdx6500PPSTSPPPStatsTable, cdx6500Controls=cdx6500Controls, cdx6500SPPPStatNoOfErrorFrames=cdx6500SPPPStatNoOfErrorFrames, cdx6500SPPSStatChrsOut=cdx6500SPPSStatChrsOut, cdx6500SPPSStatChrsInPerSec=cdx6500SPPSStatChrsInPerSec, cdx6500SPPSStatLastInCallingAddress=cdx6500SPPSStatLastInCallingAddress, cdx6500ContSPPPortTable=cdx6500ContSPPPortTable, cdx6500SContSPPPortNum=cdx6500SContSPPPortNum, cdx6500SPPSStatLastInCalledAddress=cdx6500SPPSStatLastInCalledAddress, cdx6500SPPSStatSLCNum=cdx6500SPPSStatSLCNum, cdx6500SPSTSPPSStatEntry=cdx6500SPSTSPPSStatEntry, cdx6500SPPPCfgSLCNum=cdx6500SPPPCfgSLCNum, cdx6500SPPPStatFramesOutPerSec=cdx6500SPPPStatFramesOutPerSec, cdx6500ContSPPPortEnable=cdx6500ContSPPPortEnable, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500SPPSStatLastStatsReset=cdx6500SPPSStatLastStatsReset, cdx6500SPPPCfgStnIDList=cdx6500SPPPCfgStnIDList, cdx6500SPPPStatPortUtilIn=cdx6500SPPPStatPortUtilIn, cdx6500SPPPCfgQueueSize=cdx6500SPPPCfgQueueSize, cdx6500SPPPCfgProtocolID=cdx6500SPPPCfgProtocolID, cdx6500SPPSStatNoOfErrorFrames=cdx6500SPPSStatNoOfErrorFrames, cdx6500ContSPPPortNum=cdx6500ContSPPPortNum, cdx6500SPPSStatFramesInPerSec=cdx6500SPPSStatFramesInPerSec, cdx6500SPPPCfgInterchTimeout=cdx6500SPPPCfgInterchTimeout, cdxProductSpecific=cdxProductSpecific, cdx6500ContSPPPortEntry=cdx6500ContSPPPortEntry, cdx6500SPPPStatFramesOut=cdx6500SPPPStatFramesOut, cdx6500SPPPStatChrsIn=cdx6500SPPPStatChrsIn, codex=codex, cdx6500ContSPPStnDisable=cdx6500ContSPPStnDisable, cdx6500=cdx6500, cdx6500SPPPCfgPortType=cdx6500SPPPCfgPortType, cdx6500PPCTSPPPortEntry=cdx6500PPCTSPPPortEntry, cdx6500SPSTSPPStnStatTable=cdx6500SPSTSPPStnStatTable, cdx6500SPPSStatLastInCallFacilities=cdx6500SPPSStatLastInCallFacilities, cdx6500ContSPPStnBoot=cdx6500ContSPPStnBoot, cdx6500SPPPStatLastStatsReset=cdx6500SPPPStatLastStatsReset, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500PPSTSPPPStatEntry=cdx6500PPSTSPPPStatEntry, cdx6500SPPSStatStnStatus=cdx6500SPPSStatStnStatus, cdx6500SPPPStatChrsInPerSec=cdx6500SPPPStatChrsInPerSec, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500SPPSStatLastOutCallFacilities=cdx6500SPPSStatLastOutCallFacilities, cdx6500SPPSStatSLCLineNum=cdx6500SPPSStatSLCLineNum, cdx6500SPPSStatFramesOut=cdx6500SPPSStatFramesOut, cdx6500SPPSStatAdjChanState=cdx6500SPPSStatAdjChanState, cdx6500SPPPCfgElectricalInterfaceType=cdx6500SPPPCfgElectricalInterfaceType, cdx6500SPPPCfgV24ElectricalInterfaceOption=cdx6500SPPPCfgV24ElectricalInterfaceOption, cdx6500SPPPStatFlowCntrlState=cdx6500SPPPStatFlowCntrlState, cdx6500SPPSStatLastOutCallCUD=cdx6500SPPSStatLastOutCallCUD, cdx6500Configuration=cdx6500Configuration, cdx6500SPPPStatChrsOut=cdx6500SPPPStatChrsOut, cdx6500ContSPPStnId=cdx6500ContSPPStnId, cdx6500SPPPCfgSLCLineNum=cdx6500SPPPCfgSLCLineNum, cdx6500ContSPPStnTable=cdx6500ContSPPStnTable, cdx6500ContSPPStnEnable=cdx6500ContSPPStnEnable, cdx6500SPPPCfgUnblockThresh=cdx6500SPPPCfgUnblockThresh, cdx6500SPPSStatLastOutCalledAddress=cdx6500SPPSStatLastOutCalledAddress, cdx6500SPPPStatFramesInPerSec=cdx6500SPPPStatFramesInPerSec, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500SPPSStatFramesOutPerSec=cdx6500SPPSStatFramesOutPerSec)
