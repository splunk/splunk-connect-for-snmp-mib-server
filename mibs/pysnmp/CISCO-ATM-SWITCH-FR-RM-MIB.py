#
# PySNMP MIB module CISCO-ATM-SWITCH-FR-RM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-SWITCH-FR-RM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, Integer32, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Gauge32, TimeTicks, MibIdentifier, Counter64, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Integer32", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Gauge32", "TimeTicks", "MibIdentifier", "Counter64", "Unsigned32", "Bits")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoAtmSwitchFrRmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 110))
if mibBuilder.loadTexts: ciscoAtmSwitchFrRmMIB.setLastUpdated('9807200000Z')
if mibBuilder.loadTexts: ciscoAtmSwitchFrRmMIB.setOrganization('Cisco Systems')
ciscoAtmSwitchFrRmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 1))
cfaAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1))
cfaInterwork = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2))
class CfaInterworkServiceCategory(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vbrNrt", 1), ("abr", 2), ("ubr", 3))

cfaAdapterIfVcQThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1), )
if mibBuilder.loadTexts: cfaAdapterIfVcQThresholdTable.setStatus('current')
cfaAdapterIfVcQThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQService"))
if mibBuilder.loadTexts: cfaAdapterIfVcQThresholdEntry.setStatus('current')
cfaAdapterIfVcQService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 1), CfaInterworkServiceCategory())
if mibBuilder.loadTexts: cfaAdapterIfVcQService.setStatus('current')
cfaAdapterIfVcQInqDiscThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(87)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVcQInqDiscThresh.setStatus('current')
cfaAdapterIfVcQOutqDiscThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(87)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVcQOutqDiscThresh.setStatus('current')
cfaAdapterIfVcQInqMarkThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVcQInqMarkThresh.setStatus('current')
cfaAdapterIfVcQOutqMarkThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVcQOutqMarkThresh.setStatus('current')
cfaAdapterIfVbrServOflowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 2), )
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflowTable.setStatus('current')
cfaAdapterIfVbrServOflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflowEntry.setStatus('current')
cfaAdapterIfVbrServOflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflow.setStatus('current')
cfaAdapterIfFrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 3), )
if mibBuilder.loadTexts: cfaAdapterIfFrConfigTable.setStatus('current')
cfaAdapterIfFrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfaAdapterIfFrConfigEntry.setStatus('current')
cfaAdapterIfOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfOverbooking.setStatus('current')
cfaInterworkIfResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1), )
if mibBuilder.loadTexts: cfaInterworkIfResourceTable.setStatus('current')
cfaInterworkIfResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfVcQService"))
if mibBuilder.loadTexts: cfaInterworkIfResourceEntry.setStatus('current')
cfaInterworkIfVcQService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 1), CfaInterworkServiceCategory())
if mibBuilder.loadTexts: cfaInterworkIfVcQService.setStatus('current')
cfaInterworkIfRxAvailRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 2), Gauge32()).setUnits('bits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfaInterworkIfRxAvailRate.setStatus('current')
cfaInterworkIfTxAvailRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 3), Gauge32()).setUnits('bits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfaInterworkIfTxAvailRate.setStatus('current')
cfaInterworkIfRxAllocRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 4), Gauge32()).setUnits('bits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfaInterworkIfRxAllocRate.setStatus('current')
cfaInterworkIfTxAllocRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 5), Gauge32()).setUnits('bits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfaInterworkIfTxAllocRate.setStatus('current')
ciscoAtmSwitchFrRmMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 2))
ciscoAtmSwitchFrRmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 3))
ciscoAtmSwitchFrRmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 1))
ciscoAtmSwitchFrRmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2))
ciscoAtmSwitchFrRmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 1, 1)).setObjects(("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterGroup"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSwitchFrRmMIBCompliance = ciscoAtmSwitchFrRmMIBCompliance.setStatus('current')
cfaAdapterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2, 1)).setObjects(("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQInqDiscThresh"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQOutqDiscThresh"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQInqMarkThresh"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQOutqMarkThresh"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVbrServOflow"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfOverbooking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfaAdapterGroup = cfaAdapterGroup.setStatus('current')
cfaInterworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2, 2)).setObjects(("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfRxAvailRate"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfTxAvailRate"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfRxAllocRate"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfTxAllocRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfaInterworkGroup = cfaInterworkGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-ATM-SWITCH-FR-RM-MIB", cfaAdapterIfVcQOutqDiscThresh=cfaAdapterIfVcQOutqDiscThresh, PYSNMP_MODULE_ID=ciscoAtmSwitchFrRmMIB, cfaAdapterGroup=cfaAdapterGroup, cfaAdapterIfVcQThresholdEntry=cfaAdapterIfVcQThresholdEntry, cfaAdapterIfVbrServOflowEntry=cfaAdapterIfVbrServOflowEntry, cfaInterworkIfTxAvailRate=cfaInterworkIfTxAvailRate, ciscoAtmSwitchFrRmMIBConformance=ciscoAtmSwitchFrRmMIBConformance, cfaAdapterIfVbrServOflowTable=cfaAdapterIfVbrServOflowTable, cfaInterworkGroup=cfaInterworkGroup, ciscoAtmSwitchFrRmMIB=ciscoAtmSwitchFrRmMIB, cfaInterworkIfTxAllocRate=cfaInterworkIfTxAllocRate, cfaInterwork=cfaInterwork, ciscoAtmSwitchFrRmMIBGroups=ciscoAtmSwitchFrRmMIBGroups, cfaInterworkIfResourceTable=cfaInterworkIfResourceTable, ciscoAtmSwitchFrRmMIBCompliance=ciscoAtmSwitchFrRmMIBCompliance, ciscoAtmSwitchFrRmMIBNotifications=ciscoAtmSwitchFrRmMIBNotifications, cfaInterworkIfRxAvailRate=cfaInterworkIfRxAvailRate, ciscoAtmSwitchFrRmMIBCompliances=ciscoAtmSwitchFrRmMIBCompliances, cfaAdapter=cfaAdapter, cfaAdapterIfVcQThresholdTable=cfaAdapterIfVcQThresholdTable, cfaAdapterIfFrConfigEntry=cfaAdapterIfFrConfigEntry, cfaAdapterIfOverbooking=cfaAdapterIfOverbooking, cfaInterworkIfResourceEntry=cfaInterworkIfResourceEntry, cfaAdapterIfVcQInqMarkThresh=cfaAdapterIfVcQInqMarkThresh, cfaAdapterIfFrConfigTable=cfaAdapterIfFrConfigTable, cfaAdapterIfVcQInqDiscThresh=cfaAdapterIfVcQInqDiscThresh, cfaAdapterIfVcQOutqMarkThresh=cfaAdapterIfVcQOutqMarkThresh, ciscoAtmSwitchFrRmMIBObjects=ciscoAtmSwitchFrRmMIBObjects, cfaInterworkIfVcQService=cfaInterworkIfVcQService, cfaInterworkIfRxAllocRate=cfaInterworkIfRxAllocRate, cfaAdapterIfVcQService=cfaAdapterIfVcQService, cfaAdapterIfVbrServOflow=cfaAdapterIfVbrServOflow, CfaInterworkServiceCategory=CfaInterworkServiceCategory)
