#
# PySNMP MIB module HP-ICF-VIRTUAL-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-VIRTUAL-NETWORK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, NotificationType, Bits, MibIdentifier, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, ObjectIdentity, Counter64, Integer32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Bits", "MibIdentifier", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter64", "Integer32", "IpAddress", "iso")
RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
tunnelIfAddressType, tunnelIfLocalInetAddress, tunnelIfEntry, tunnelIfRemoteInetAddress = mibBuilder.importSymbols("TUNNEL-MIB", "tunnelIfAddressType", "tunnelIfLocalInetAddress", "tunnelIfEntry", "tunnelIfRemoteInetAddress")
hpicfVirtualNetwork = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107))
hpicfVirtualNetwork.setRevisions(('2014-03-19 00:00',))
if mibBuilder.loadTexts: hpicfVirtualNetwork.setLastUpdated('201403190000Z')
if mibBuilder.loadTexts: hpicfVirtualNetwork.setOrganization('HP Networking')
hpicfVirtualNetworkNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 0))
hpicfVirtualNetworkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1))
hpicfVirtualNetworkScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 1))
hpicfVirtualNetworkNotifyScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3))
hpicfTunnelObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2))
hpicfVXLANTunnelObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1))
hpicfVXLANTunnelConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1))
hpicfVXLANTunnelScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 2))
hpicfVirtualNetworkConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3))
hpicfMaxVirtualNetworks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMaxVirtualNetworks.setStatus('current')
hpicfTotalVirtualNetworks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTotalVirtualNetworks.setStatus('current')
hpicfVirtualNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 2), )
if mibBuilder.loadTexts: hpicfVirtualNetworkTable.setStatus('current')
hpicfVirtualNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 2, 1), ).setIndexNames((0, "HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkID"))
if mibBuilder.loadTexts: hpicfVirtualNetworkEntry.setStatus('current')
hpicfVirtualNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)))
if mibBuilder.loadTexts: hpicfVirtualNetworkID.setStatus('current')
hpicfVirtualNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVirtualNetworkName.setStatus('current')
hpicfVirtualNetworkVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 2, 1, 3), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVirtualNetworkVLANID.setStatus('current')
hpicfVirtualNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVirtualNetworkRowStatus.setStatus('current')
hpicfVXLANTunnelIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfVXLANTunnelIfTable.setStatus('current')
hpicfVXLANTunnelIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1), )
tunnelIfEntry.registerAugmentions(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelIfEntry"))
hpicfVXLANTunnelIfEntry.setIndexNames(*tunnelIfEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfVXLANTunnelIfEntry.setStatus('current')
hpicfVXLANTunnelIfDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ifAdminDown", 1), ("tepNotReachable", 2), ("resourceUnavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelIfDownReason.setStatus('current')
hpicfVXLANTunnelIfNextHopIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelIfNextHopIpType.setStatus('current')
hpicfVXLANTunnelIfNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelIfNextHopIp.setStatus('current')
hpicfVXLANTunnelIfNextHopInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelIfNextHopInterface.setStatus('current')
hpicfVXLANTunnelIfNextHopPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelIfNextHopPortName.setStatus('current')
hpicfVXLANTunnelStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelStatsRxPackets.setStatus('current')
hpicfVXLANTunnelStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelStatsTxPackets.setStatus('current')
hpicfVXLANTunnelStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVXLANTunnelStatsClear.setStatus('current')
hpicfMaxVXLANTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMaxVXLANTunnels.setStatus('current')
hpicfTotalVXLANTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTotalVXLANTunnels.setStatus('current')
hpicfVXLANTunnelStatsTxMTUViolation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelStatsTxMTUViolation.setStatus('current')
hpicfVXLANTunnelGlobalStatsDropCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVXLANTunnelGlobalStatsDropCount.setStatus('current')
hpicfVXLANTunnelGlobalStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 2, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVXLANTunnelGlobalStatsClear.setStatus('current')
hpicfVXLANTunnelEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 2, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVXLANTunnelEnable.setStatus('current')
hpicfVXLANTunnelUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4789)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVXLANTunnelUDPPort.setStatus('current')
hpicfMTUDropRouterAddrType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfMTUDropRouterAddrType.setStatus('current')
hpicfMTUDropRouterAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfMTUDropRouterAddr.setStatus('current')
hpicfMTUDropRouterMTU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfMTUDropRouterMTU.setStatus('current')
hpicfMTUDropVTEPSrcAddrType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 4), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfMTUDropVTEPSrcAddrType.setStatus('current')
hpicfMTUDropVTEPSource = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 5), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfMTUDropVTEPSource.setStatus('current')
hpicfMTUDropVTEPDstAddrType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 6), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfMTUDropVTEPDstAddrType.setStatus('current')
hpicfMTUDropVTEPDest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 7), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfMTUDropVTEPDest.setStatus('current')
hpicfMTUDropInIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 8), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfMTUDropInIfIndex.setStatus('current')
hpicfMTUDropNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMTUDropNotifyEnable.setStatus('current')
hpicfVirtualNetworkIcmpErrorRcvd = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 0, 1)).setObjects(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropRouterAddrType"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropRouterAddr"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropRouterMTU"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropVTEPSrcAddrType"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropVTEPSource"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropVTEPDstAddrType"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropVTEPDest"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropInIfIndex"), ("TUNNEL-MIB", "tunnelIfAddressType"), ("TUNNEL-MIB", "tunnelIfLocalInetAddress"), ("TUNNEL-MIB", "tunnelIfRemoteInetAddress"))
if mibBuilder.loadTexts: hpicfVirtualNetworkIcmpErrorRcvd.setStatus('current')
hpicfVirtualNetworkCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 1))
hpicfVirtualNetworkGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 2))
hpicfVirtualNetworkCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 1, 1)).setObjects(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkGroup"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkScalarGroup"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelStatsGroup"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelScalarGroup"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkNotifyScalarsGroup"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVirtualNetworkCompliance = hpicfVirtualNetworkCompliance.setStatus('current')
hpicfVirtualNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 2, 1)).setObjects(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkName"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkVLANID"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVirtualNetworkGroup = hpicfVirtualNetworkGroup.setStatus('current')
hpicfVirtualNetworkScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 2, 2)).setObjects(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMaxVirtualNetworks"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfTotalVirtualNetworks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVirtualNetworkScalarGroup = hpicfVirtualNetworkScalarGroup.setStatus('current')
hpicfVXLANTunnelStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 2, 3)).setObjects(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelIfDownReason"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelIfNextHopIpType"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelIfNextHopIp"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelIfNextHopInterface"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelIfNextHopPortName"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelStatsRxPackets"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelStatsTxPackets"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVXLANTunnelStatsGroup = hpicfVXLANTunnelStatsGroup.setStatus('current')
hpicfVXLANTunnelScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 2, 4)).setObjects(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMaxVXLANTunnels"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfTotalVXLANTunnels"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelStatsTxMTUViolation"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelGlobalStatsDropCount"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelGlobalStatsClear"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelEnable"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVXLANTunnelUDPPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVXLANTunnelScalarGroup = hpicfVXLANTunnelScalarGroup.setStatus('current')
hpicfVirtualNetworkNotifyScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 2, 5)).setObjects(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropRouterAddrType"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropRouterAddr"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropRouterMTU"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropVTEPSrcAddrType"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropVTEPSource"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropVTEPDstAddrType"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropVTEPDest"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropInIfIndex"), ("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfMTUDropNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVirtualNetworkNotifyScalarsGroup = hpicfVirtualNetworkNotifyScalarsGroup.setStatus('current')
hpicfVirtualNetworkNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 107, 3, 2, 6)).setObjects(("HP-ICF-VIRTUAL-NETWORK-MIB", "hpicfVirtualNetworkIcmpErrorRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVirtualNetworkNotificationsGroup = hpicfVirtualNetworkNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-VIRTUAL-NETWORK-MIB", hpicfMTUDropVTEPDstAddrType=hpicfMTUDropVTEPDstAddrType, PYSNMP_MODULE_ID=hpicfVirtualNetwork, hpicfVXLANTunnelEnable=hpicfVXLANTunnelEnable, hpicfVXLANTunnelObjects=hpicfVXLANTunnelObjects, hpicfVirtualNetworkNotifyScalarsGroup=hpicfVirtualNetworkNotifyScalarsGroup, hpicfVirtualNetworkGroups=hpicfVirtualNetworkGroups, hpicfVXLANTunnelScalarGroup=hpicfVXLANTunnelScalarGroup, hpicfVirtualNetworkRowStatus=hpicfVirtualNetworkRowStatus, hpicfVXLANTunnelStatsRxPackets=hpicfVXLANTunnelStatsRxPackets, hpicfVXLANTunnelGlobalStatsDropCount=hpicfVXLANTunnelGlobalStatsDropCount, hpicfMTUDropInIfIndex=hpicfMTUDropInIfIndex, hpicfVirtualNetworkGroup=hpicfVirtualNetworkGroup, hpicfVirtualNetworkCompliance=hpicfVirtualNetworkCompliance, hpicfVXLANTunnelUDPPort=hpicfVXLANTunnelUDPPort, hpicfVirtualNetworkIcmpErrorRcvd=hpicfVirtualNetworkIcmpErrorRcvd, hpicfVirtualNetworkNotifications=hpicfVirtualNetworkNotifications, hpicfVXLANTunnelStatsTxMTUViolation=hpicfVXLANTunnelStatsTxMTUViolation, hpicfVirtualNetworkScalarGroup=hpicfVirtualNetworkScalarGroup, hpicfVirtualNetwork=hpicfVirtualNetwork, hpicfMTUDropNotifyEnable=hpicfMTUDropNotifyEnable, hpicfVirtualNetworkConformance=hpicfVirtualNetworkConformance, hpicfVirtualNetworkName=hpicfVirtualNetworkName, hpicfVirtualNetworkVLANID=hpicfVirtualNetworkVLANID, hpicfMTUDropVTEPSource=hpicfMTUDropVTEPSource, hpicfVXLANTunnelScalars=hpicfVXLANTunnelScalars, hpicfVirtualNetworkTable=hpicfVirtualNetworkTable, hpicfVirtualNetworkEntry=hpicfVirtualNetworkEntry, hpicfVXLANTunnelIfNextHopPortName=hpicfVXLANTunnelIfNextHopPortName, hpicfVXLANTunnelGlobalStatsClear=hpicfVXLANTunnelGlobalStatsClear, hpicfVXLANTunnelIfNextHopIpType=hpicfVXLANTunnelIfNextHopIpType, hpicfVXLANTunnelStatsTxPackets=hpicfVXLANTunnelStatsTxPackets, hpicfVirtualNetworkNotificationsGroup=hpicfVirtualNetworkNotificationsGroup, hpicfTotalVirtualNetworks=hpicfTotalVirtualNetworks, hpicfMTUDropRouterMTU=hpicfMTUDropRouterMTU, hpicfVXLANTunnelIfEntry=hpicfVXLANTunnelIfEntry, hpicfVirtualNetworkID=hpicfVirtualNetworkID, hpicfVXLANTunnelIfNextHopInterface=hpicfVXLANTunnelIfNextHopInterface, hpicfTotalVXLANTunnels=hpicfTotalVXLANTunnels, hpicfTunnelObjects=hpicfTunnelObjects, hpicfVXLANTunnelIfDownReason=hpicfVXLANTunnelIfDownReason, hpicfVXLANTunnelIfNextHopIp=hpicfVXLANTunnelIfNextHopIp, hpicfVirtualNetworkNotifyScalars=hpicfVirtualNetworkNotifyScalars, hpicfVXLANTunnelConfigObjects=hpicfVXLANTunnelConfigObjects, hpicfMTUDropVTEPSrcAddrType=hpicfMTUDropVTEPSrcAddrType, hpicfMaxVirtualNetworks=hpicfMaxVirtualNetworks, hpicfVirtualNetworkCompliances=hpicfVirtualNetworkCompliances, hpicfVirtualNetworkObjects=hpicfVirtualNetworkObjects, hpicfVXLANTunnelIfTable=hpicfVXLANTunnelIfTable, hpicfMaxVXLANTunnels=hpicfMaxVXLANTunnels, hpicfMTUDropRouterAddr=hpicfMTUDropRouterAddr, hpicfVirtualNetworkScalars=hpicfVirtualNetworkScalars, hpicfVXLANTunnelStatsGroup=hpicfVXLANTunnelStatsGroup, hpicfVXLANTunnelStatsClear=hpicfVXLANTunnelStatsClear, hpicfMTUDropRouterAddrType=hpicfMTUDropRouterAddrType, hpicfMTUDropVTEPDest=hpicfMTUDropVTEPDest)
