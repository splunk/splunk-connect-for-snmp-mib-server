#
# PySNMP MIB module DX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:40:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, ObjectIdentity, TimeTicks, Integer32, IpAddress, Counter32, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, enterprises, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Integer32", "IpAddress", "Counter32", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "enterprises", "Gauge32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dxMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3327, 21))
dxMIB.setRevisions(('2005-11-08 15:36',))
if mibBuilder.loadTexts: dxMIB.setLastUpdated('200511081536Z')
if mibBuilder.loadTexts: dxMIB.setOrganization('Computer Associates Intl. http://www.ca.com')
eTrustDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 3327))
dx_MULTIWRITE_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3327, 21, 1)).setLabel("dx-MULTIWRITE-MIB")
dxMWTable = MibTable((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1), )
if mibBuilder.loadTexts: dxMWTable.setStatus('current')
dxMWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1), ).setIndexNames((0, "DX-MIB", "dxMWIndex"))
if mibBuilder.loadTexts: dxMWEntry.setStatus('current')
dxMWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dxMWIndex.setStatus('current')
dxRemoteDsaName = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxRemoteDsaName.setStatus('current')
dxMWQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxMWQueueLength.setStatus('current')
dxMWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("internal-error", 0), ("ok", 1), ("failed", 2), ("failed-no-dsa", 3), ("non-existent", 4), ("recovering", 5), ("disp-failed", 6), ("wait-disp", 7), ("q-purged", 8), ("failed-sent", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxMWStatus.setStatus('current')
dxMWPendingRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxMWPendingRemote.setStatus('current')
dxMWConfirmedLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxMWConfirmedLocal.setStatus('current')
dx_STATISTICS_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3327, 21, 2)).setLabel("dx-STATISTICS-MIB")
dxStatsAssocs = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsAssocs.setStatus('current')
dxStatsNilCredit = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsNilCredit.setStatus('current')
dxStatsNoTicks = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsNoTicks.setStatus('current')
dxStatsQueue = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsQueue.setStatus('current')
dxStatsBusy = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsBusy.setStatus('current')
dxStatsOps = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsOps.setStatus('current')
dxStatsEntries = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsEntries.setStatus('current')
dxStatsMWQ = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsMWQ.setStatus('current')
dx_CACHE_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3327, 21, 3)).setLabel("dx-CACHE-MIB")
dxCacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("internal-error", 0), ("cache-disabled", 1), ("cache-building", 2), ("cache-ok", 3), ("cache-dirty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheStatus.setStatus('current')
dxCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheSize.setStatus('current')
dxCacheSearchHits = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheSearchHits.setStatus('current')
dxCacheSearchMisses = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheSearchMisses.setStatus('current')
dxCacheSequentialScans = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheSequentialScans.setStatus('current')
mibBuilder.exportSymbols("DX-MIB", dxMIB=dxMIB, dx_MULTIWRITE_MIB=dx_MULTIWRITE_MIB, dxRemoteDsaName=dxRemoteDsaName, dxMWPendingRemote=dxMWPendingRemote, dxCacheStatus=dxCacheStatus, dxStatsNoTicks=dxStatsNoTicks, dxMWIndex=dxMWIndex, eTrustDirectory=eTrustDirectory, PYSNMP_MODULE_ID=dxMIB, dxStatsAssocs=dxStatsAssocs, dxMWTable=dxMWTable, dxStatsEntries=dxStatsEntries, dxCacheSearchHits=dxCacheSearchHits, dxCacheSequentialScans=dxCacheSequentialScans, dxMWStatus=dxMWStatus, dxStatsQueue=dxStatsQueue, dxStatsOps=dxStatsOps, dx_STATISTICS_MIB=dx_STATISTICS_MIB, dxStatsBusy=dxStatsBusy, dxStatsMWQ=dxStatsMWQ, dxStatsNilCredit=dxStatsNilCredit, dxMWQueueLength=dxMWQueueLength, dxMWConfirmedLocal=dxMWConfirmedLocal, dxCacheSearchMisses=dxCacheSearchMisses, dx_CACHE_MIB=dx_CACHE_MIB, dxMWEntry=dxMWEntry, dxCacheSize=dxCacheSize)
