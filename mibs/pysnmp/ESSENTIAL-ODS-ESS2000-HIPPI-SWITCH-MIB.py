#
# PySNMP MIB module ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, Unsigned32, IpAddress, MibIdentifier, enterprises, ModuleIdentity, TimeTicks, iso, ObjectIdentity, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "Unsigned32", "IpAddress", "MibIdentifier", "enterprises", "ModuleIdentity", "TimeTicks", "iso", "ObjectIdentity", "Integer32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
essentialCommunications = MibIdentifier((1, 3, 6, 1, 4, 1, 2159))
ecRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1))
ecProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3))
ecExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 6))
ess2000MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2))
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 1))
switchEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 7))
switchDescription = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDescription.setStatus('mandatory')
switchNumOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumOfPorts.setStatus('mandatory')
switchSensors = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchSensors.setStatus('mandatory')
switchControlCard = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 2))
sccDescription = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccDescription.setStatus('mandatory')
sccDateTime = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccDateTime.setStatus('mandatory')
sccAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccAdminStatus.setStatus('mandatory')
sccOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccOperStatus.setStatus('mandatory')
mediaInterfaceCards = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3))
backPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: backPlaneTable.setStatus('mandatory')
backPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB", "backPlaneIndex"))
if mibBuilder.loadTexts: backPlaneEntry.setStatus('mandatory')
backPlaneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: backPlaneIndex.setStatus('mandatory')
backPlaneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneNumber.setStatus('mandatory')
backPlaneCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneCard.setStatus('mandatory')
mICPowerUpInitError = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICPowerUpInitError.setStatus('mandatory')
mICHippiParityBurstError = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICHippiParityBurstError.setStatus('mandatory')
mICLinkReady = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICLinkReady.setStatus('mandatory')
mICSourceInterconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceInterconnect.setStatus('mandatory')
mICSourceRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceRequest.setStatus('mandatory')
mICSourceConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceConnect.setStatus('mandatory')
mICSourceLastConnectAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceLastConnectAttempt.setStatus('mandatory')
mICDestinationInterconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationInterconnect.setStatus('mandatory')
mICDestinationRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationRequest.setStatus('mandatory')
mICDestinationConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationConnect.setStatus('mandatory')
mICByteCounterOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICByteCounterOverflow.setStatus('mandatory')
mICNumberOfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICNumberOfBytes.setStatus('mandatory')
mICNumberOfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICNumberOfPackets.setStatus('mandatory')
mICConnectsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 3, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICConnectsSuccessful.setStatus('mandatory')
sourceRoutes = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 4))
srcRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 4, 1), )
if mibBuilder.loadTexts: srcRouteTable.setStatus('mandatory')
srcRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 4, 1, 1), ).setIndexNames((0, "ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB", "srcIndex"))
if mibBuilder.loadTexts: srcRouteEntry.setStatus('mandatory')
srcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 4, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcIndex.setStatus('mandatory')
srcRouteInPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcRouteInPortAccess.setStatus('mandatory')
srcRouteOutPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcRouteOutPortAccess.setStatus('mandatory')
srcRouteWrite = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcRouteWrite.setStatus('mandatory')
srcSaveRestore = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcSaveRestore.setStatus('mandatory')
logicalAddressRoutes = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5))
destRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 1), )
if mibBuilder.loadTexts: destRouteTable.setStatus('mandatory')
destRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 1, 1), ).setIndexNames((0, "ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB", "destIndex"))
if mibBuilder.loadTexts: destRouteEntry.setStatus('mandatory')
destIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destIndex.setStatus('mandatory')
destRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: destRoute.setStatus('mandatory')
destRouteWrite = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destRouteWrite.setStatus('mandatory')
pathRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 3), )
if mibBuilder.loadTexts: pathRouteTable.setStatus('mandatory')
pathRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 3, 1), ).setIndexNames((0, "ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB", "pathIndex"))
if mibBuilder.loadTexts: pathRouteEntry.setStatus('mandatory')
pathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathIndex.setStatus('mandatory')
pathRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathRoute.setStatus('mandatory')
pathRouteWrite = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathRouteWrite.setStatus('mandatory')
routesSaveRestore = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routesSaveRestore.setStatus('mandatory')
routeDisable = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeDisable.setStatus('mandatory')
huntGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 6))
hGTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 6, 1), )
if mibBuilder.loadTexts: hGTable.setStatus('mandatory')
hGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 6, 1, 1), ).setIndexNames((0, "ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB", "hg"))
if mibBuilder.loadTexts: hGEntry.setStatus('mandatory')
hg = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 6, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hg.setStatus('mandatory')
hgList = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgList.setStatus('mandatory')
hgWrite = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgWrite.setStatus('mandatory')
hgSaveRestore = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgSaveRestore.setStatus('mandatory')
switchSensorWarning = NotificationType((1, 3, 6, 1, 4, 1, 2159, 1, 3, 2, 7) + (0,1)).setObjects(("ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB", "switchSensors"))
mibBuilder.exportSymbols("ESSENTIAL-ODS-ESS2000-HIPPI-SWITCH-MIB", routeDisable=routeDisable, srcRouteWrite=srcRouteWrite, pathRouteEntry=pathRouteEntry, hgWrite=hgWrite, backPlaneEntry=backPlaneEntry, mICLinkReady=mICLinkReady, mICNumberOfPackets=mICNumberOfPackets, huntGroups=huntGroups, mICNumberOfBytes=mICNumberOfBytes, pathIndex=pathIndex, mICSourceConnect=mICSourceConnect, sourceRoutes=sourceRoutes, hGEntry=hGEntry, ecExperimental=ecExperimental, srcRouteOutPortAccess=srcRouteOutPortAccess, destRouteWrite=destRouteWrite, mediaInterfaceCards=mediaInterfaceCards, sccAdminStatus=sccAdminStatus, backPlaneTable=backPlaneTable, srcIndex=srcIndex, backPlaneNumber=backPlaneNumber, srcRouteInPortAccess=srcRouteInPortAccess, switchSensors=switchSensors, pathRoute=pathRoute, mICByteCounterOverflow=mICByteCounterOverflow, routesSaveRestore=routesSaveRestore, ecProducts=ecProducts, mICDestinationConnect=mICDestinationConnect, switchEvents=switchEvents, srcRouteTable=srcRouteTable, switchSensorWarning=switchSensorWarning, pathRouteTable=pathRouteTable, hg=hg, mICSourceLastConnectAttempt=mICSourceLastConnectAttempt, sccDescription=sccDescription, switchControlCard=switchControlCard, destRouteEntry=destRouteEntry, mICDestinationRequest=mICDestinationRequest, backPlaneCard=backPlaneCard, switch=switch, destRouteTable=destRouteTable, mICDestinationInterconnect=mICDestinationInterconnect, ecRoot=ecRoot, destRoute=destRoute, hgSaveRestore=hgSaveRestore, mICHippiParityBurstError=mICHippiParityBurstError, switchDescription=switchDescription, logicalAddressRoutes=logicalAddressRoutes, srcSaveRestore=srcSaveRestore, hGTable=hGTable, destIndex=destIndex, hgList=hgList, essentialCommunications=essentialCommunications, mICSourceRequest=mICSourceRequest, backPlaneIndex=backPlaneIndex, mICConnectsSuccessful=mICConnectsSuccessful, switchNumOfPorts=switchNumOfPorts, ess2000MIB=ess2000MIB, mICPowerUpInitError=mICPowerUpInitError, srcRouteEntry=srcRouteEntry, sccDateTime=sccDateTime, sccOperStatus=sccOperStatus, pathRouteWrite=pathRouteWrite, mICSourceInterconnect=mICSourceInterconnect)
