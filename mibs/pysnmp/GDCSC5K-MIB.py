#
# PySNMP MIB module GDCSC5K-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCSC5K-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, enterprises, Gauge32, Counter64, iso, Bits, NotificationType, Unsigned32, IpAddress, TimeTicks, Counter32, ModuleIdentity, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "enterprises", "Gauge32", "Counter64", "iso", "Bits", "NotificationType", "Unsigned32", "IpAddress", "TimeTicks", "Counter32", "ModuleIdentity", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
sc = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3))
sc5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 2))
gdcSc5000Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 2, 1))
gdcSc5000Timing = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 2, 2))
gdcSc5000Shelf = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 2, 3))
gdcSc5000Highways = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 2, 4))
gdcSc5000LTUConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 2, 5))
gdcSc5000Circuit = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 2, 6))
gdcSc5000MIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcSc5000MIBVersion.setStatus('mandatory')
gdcSc5000TimingTable = MibTable((1, 3, 6, 1, 4, 1, 498, 3, 2, 2, 1), )
if mibBuilder.loadTexts: gdcSc5000TimingTable.setStatus('obsolete')
gdcSc5000TimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 3, 2, 2, 1, 1), ).setIndexNames((0, "GDCSC5K-MIB", "gdcSc5000TimingIndex"))
if mibBuilder.loadTexts: gdcSc5000TimingEntry.setStatus('obsolete')
gdcSc5000TimingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcSc5000TimingIndex.setStatus('obsolete')
gdcSc5000SrcShelfTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inhibit", 1), ("fourMegClk", 2), ("eightKiloClk", 3), ("fourMegAnd8kClk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcSc5000SrcShelfTiming.setStatus('obsolete')
sc5000ShelfNodeTypes = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5000ShelfNodeTypes.setStatus('mandatory')
sc5000ShelfAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000ShelfAdminStatus.setStatus('mandatory')
sc5000ShelfOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5000ShelfOperStatus.setStatus('mandatory')
sc5000ShelfClockProvider = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000ShelfClockProvider.setStatus('obsolete')
sc5000ShelfLTUHwayAssgn = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000ShelfLTUHwayAssgn.setStatus('mandatory')
sc5000ShelfClockMode = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("fallback", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5000ShelfClockMode.setStatus('mandatory')
sc5000ShelfClocks = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000ShelfClocks.setStatus('mandatory')
sc5000ShelfAutoClockRevert = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000ShelfAutoClockRevert.setStatus('mandatory')
sc5000ShelfRevertToPrimaryClk = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000ShelfRevertToPrimaryClk.setStatus('mandatory')
sc5000HighwayTable = MibTable((1, 3, 6, 1, 4, 1, 498, 3, 2, 4, 1), )
if mibBuilder.loadTexts: sc5000HighwayTable.setStatus('mandatory')
sc5000HighwayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 3, 2, 4, 1, 1), ).setIndexNames((0, "GDCSC5K-MIB", "sc5000HighwayNumber"))
if mibBuilder.loadTexts: sc5000HighwayEntry.setStatus('mandatory')
sc5000HighwayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5000HighwayNumber.setStatus('mandatory')
sc5000HighwayAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(96, 96)).setFixedLength(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000HighwayAllocation.setStatus('mandatory')
sc5000LTUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 3, 2, 5, 1), )
if mibBuilder.loadTexts: sc5000LTUConfigTable.setStatus('mandatory')
sc5000LTUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 3, 2, 5, 1, 1), ).setIndexNames((0, "GDCSC5K-MIB", "sc5000SlotNumber"))
if mibBuilder.loadTexts: sc5000LTUConfigEntry.setStatus('mandatory')
sc5000SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5000SlotNumber.setStatus('mandatory')
sc5000DS0Assign = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000DS0Assign.setStatus('mandatory')
sc5000ConfigCSUMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuMode", 1), ("concentratorMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5000ConfigCSUMode.setStatus('mandatory')
sc5000CircuitTable = MibTable((1, 3, 6, 1, 4, 1, 498, 3, 2, 6, 1), )
if mibBuilder.loadTexts: sc5000CircuitTable.setStatus('mandatory')
sc5000CircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 3, 2, 6, 1, 1), ).setIndexNames((0, "GDCSC5K-MIB", "sc5000CircuitIndex"))
if mibBuilder.loadTexts: sc5000CircuitEntry.setStatus('mandatory')
sc5000CircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5000CircuitIndex.setStatus('mandatory')
sc5000CircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("point-to-point", 1), ("multipoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5000CircuitType.setStatus('mandatory')
mibBuilder.exportSymbols("GDCSC5K-MIB", sc5000LTUConfigEntry=sc5000LTUConfigEntry, sc5000HighwayAllocation=sc5000HighwayAllocation, sc5000ShelfAdminStatus=sc5000ShelfAdminStatus, gdcSc5000TimingEntry=gdcSc5000TimingEntry, sc5000ConfigCSUMode=sc5000ConfigCSUMode, gdcSc5000Timing=gdcSc5000Timing, gdcSc5000MIBVersion=gdcSc5000MIBVersion, sc5000HighwayNumber=sc5000HighwayNumber, gdcSc5000Circuit=gdcSc5000Circuit, sc5000DS0Assign=sc5000DS0Assign, sc5000CircuitType=sc5000CircuitType, sc5000ShelfAutoClockRevert=sc5000ShelfAutoClockRevert, sc5000ShelfLTUHwayAssgn=sc5000ShelfLTUHwayAssgn, sc5000LTUConfigTable=sc5000LTUConfigTable, sc5000ShelfRevertToPrimaryClk=sc5000ShelfRevertToPrimaryClk, gdc=gdc, gdcSc5000Shelf=gdcSc5000Shelf, sc5000CircuitTable=sc5000CircuitTable, sc=sc, gdcSc5000Highways=gdcSc5000Highways, gdcSc5000LTUConfig=gdcSc5000LTUConfig, gdcSc5000SrcShelfTiming=gdcSc5000SrcShelfTiming, gdcSc5000Version=gdcSc5000Version, sc5000HighwayTable=sc5000HighwayTable, sc5000ShelfNodeTypes=sc5000ShelfNodeTypes, sc5000ShelfClocks=sc5000ShelfClocks, sc5000CircuitEntry=sc5000CircuitEntry, sc5000ShelfOperStatus=sc5000ShelfOperStatus, gdcSc5000TimingTable=gdcSc5000TimingTable, sc5000ShelfClockMode=sc5000ShelfClockMode, sc5000=sc5000, sc5000SlotNumber=sc5000SlotNumber, sc5000ShelfClockProvider=sc5000ShelfClockProvider, sc5000CircuitIndex=sc5000CircuitIndex, gdcSc5000TimingIndex=gdcSc5000TimingIndex, sc5000HighwayEntry=sc5000HighwayEntry)
