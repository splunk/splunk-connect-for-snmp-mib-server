#
# PySNMP MIB module OMNITRON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNITRON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
OstVlanId, OstPortList, OstPortNumber, OstModeType, omnitron, icAgent = mibBuilder.importSymbols("OMNITRON-TC-MIB", "OstVlanId", "OstPortList", "OstPortNumber", "OstModeType", "omnitron", "icAgent")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, TimeTicks, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, ModuleIdentity, Bits, Counter64, MibIdentifier, ObjectIdentity, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "ModuleIdentity", "Bits", "Counter64", "MibIdentifier", "ObjectIdentity", "IpAddress", "Counter32")
DisplayString, TextualConvention, TimeInterval, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeInterval", "TruthValue")
omnitronMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 7342, 3))
omnitronMIB.setRevisions(('2015-10-21 12:00', '2015-01-19 12:00',))
if mibBuilder.loadTexts: omnitronMIB.setLastUpdated('201510211200Z')
if mibBuilder.loadTexts: omnitronMIB.setOrganization('Omnitron Systems Technology, Inc.')
prodAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 7342, 2))
omnitronConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7342, 4))
omnitronProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 7342, 5))
managementModule = MibIdentifier((1, 3, 6, 1, 4, 1, 7342, 5, 1))
chassis = MibScalar((1, 3, 6, 1, 4, 1, 7342, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis.setStatus('current')
selfSlot = MibScalar((1, 3, 6, 1, 4, 1, 7342, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: selfSlot.setStatus('current')
chassisTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 1, 1), )
if mibBuilder.loadTexts: chassisTable.setStatus('current')
chassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1), ).setIndexNames((0, "OMNITRON-MIB", "chassisnum"), (0, "OMNITRON-MIB", "slotnum"))
if mibBuilder.loadTexts: chassisEntry.setStatus('current')
chassisnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisnum.setStatus('current')
slotnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotnum.setStatus('current')
chassistype = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassistype.setStatus('current')
prodtype = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodtype.setStatus('current')
chassisname = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisname.setStatus('current')
partnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnum.setStatus('current')
serialnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialnum.setStatus('current')
manufdate = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufdate.setStatus('current')
softrev = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softrev.setStatus('current')
prodrev = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodrev.setStatus('current')
ledstat = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledstat.setStatus('current')
switchstat = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchstat.setStatus('current')
extended1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extended1.setStatus('current')
extended2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extended2.setStatus('current')
extended3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extended3.setStatus('current')
extended4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extended4.setStatus('current')
extended5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extended5.setStatus('current')
extended6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extended6.setStatus('current')
resetmod = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetmod.setStatus('current')
wrswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wrswitch.setStatus('current')
modulename = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modulename.setStatus('current')
enhancedchassisTable = MibIdentifier((1, 3, 6, 1, 4, 1, 7342, 2, 1))
moduleCount = MibScalar((1, 3, 6, 1, 4, 1, 7342, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCount.setStatus('current')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2), )
if mibBuilder.loadTexts: moduleTable.setStatus('current')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"))
if mibBuilder.loadTexts: moduleEntry.setStatus('current')
modchassnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modchassnum.setStatus('current')
modslotnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modslotnum.setStatus('current')
modchasstype = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modchasstype.setStatus('current')
modprodtype = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modprodtype.setStatus('current')
modsoftrev = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modsoftrev.setStatus('current')
modprodrev = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modprodrev.setStatus('current')
modreset = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modreset.setStatus('current')
modnumports = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modnumports.setStatus('current')
modchassname = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modchassname.setStatus('current')
modpartnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modpartnum.setStatus('current')
modserialnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: modserialnum.setStatus('current')
modmanufdate = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: modmanufdate.setStatus('current')
modname = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modname.setStatus('current')
modportvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modportvlan.setStatus('current')
modextfeaturebits = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modextfeaturebits.setStatus('current')
modswbuildnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modswbuildnum.setStatus('current')
modenable802dot1qProcessing = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modenable802dot1qProcessing.setStatus('current')
modtagsubstitution = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modtagsubstitution.setStatus('current')
modcommitVLANchanges = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modcommitVLANchanges.setStatus('current')
modvlanTableClear = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modvlanTableClear.setStatus('current')
modcommitNMMCfgChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modcommitNMMCfgChanges.setStatus('current')
modLM80volts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modLM80volts.setStatus('current')
modLM80currents = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modLM80currents.setStatus('current')
modLM80misc = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modLM80misc.setStatus('current')
modRestoreFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modRestoreFactoryDefaults.setStatus('current')
coreStatusOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coreStatusOnly.setStatus('current')
ingressPolicingType = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressPolicingType.setStatus('current')
vlanservicetag = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanservicetag.setStatus('current')
defaultForwardingMap = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultForwardingMap.setStatus('current')
modFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFpgaRev.setStatus('current')
modExpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modExpPartNumber.setStatus('current')
modExpSoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modExpSoftwareRev.setStatus('current')
modExpLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modExpLedStatus.setStatus('current')
modHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modHwRev.setStatus('current')
modPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPcbRev.setStatus('current')
moduleMgtCfgTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3), )
if mibBuilder.loadTexts: moduleMgtCfgTable.setStatus('current')
moduleMgtCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"))
if mibBuilder.loadTexts: moduleMgtCfgEntry.setStatus('current')
sysAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminStatus.setStatus('current')
sysDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('current')
macAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddr.setStatus('current')
ipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
subnetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetmask.setStatus('current')
gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gateway.setStatus('current')
readCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readCommunity.setStatus('current')
writeCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeCommunity.setStatus('current')
mychassnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mychassnum.setStatus('current')
mmname = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmname.setStatus('current')
traphost1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traphost1.setStatus('current')
traphost2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traphost2.setStatus('current')
traphost3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traphost3.setStatus('current')
traphost4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traphost4.setStatus('current')
traphost5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traphost5.setStatus('current')
traphost6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traphost6.setStatus('current')
traphost7 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traphost7.setStatus('current')
traphost8 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traphost8.setStatus('current')
sysloc = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysloc.setStatus('current')
syscon = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syscon.setStatus('current')
serialpass = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialpass.setStatus('current')
telnetpass = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetpass.setStatus('current')
ftppasswrd = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftppasswrd.setStatus('current')
keepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keepAliveInterval.setStatus('current')
vlanIdOst = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 25), OstVlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIdOst.setStatus('current')
nmmCfgSerialBaudrate = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmmCfgSerialBaudrate.setStatus('current')
enabledFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledFunctions.setStatus('current')
enableSNMPFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSNMPFunction.setStatus('current')
nmmCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmmCfgState.setStatus('current')
nmmSecureMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmmSecureMode.setStatus('current')
nmmSecureConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmmSecureConnState.setStatus('current')
nmmIpProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmmIpProtocolState.setStatus('current')
nmmIpDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmmIpDisabled.setStatus('current')
vlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPri.setStatus('current')
enableSNMPWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSNMPWrites.setStatus('current')
cpuVoltageIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVoltageIn.setStatus('current')
cpuVoltageOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVoltageOut.setStatus('current')
cpuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTemperature.setStatus('current')
nmmSecureSlaveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmmSecureSlaveSlot.setStatus('current')
dhcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpIpAddr.setStatus('current')
dhcpSubnetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 41), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetmask.setStatus('current')
dhcpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 42), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGateway.setStatus('current')
nmmOAMmgmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmmOAMmgmtMode.setStatus('current')
customertag = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customertag.setStatus('current')
servicetag = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: servicetag.setStatus('current')
cnodeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnodeControl.setStatus('current')
cnodeCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnodeCIR.setStatus('current')
enableSNMPv3Function = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSNMPv3Function.setStatus('current')
slaveWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveWrite.setStatus('current')
snmpTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapType.setStatus('current')
capsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: capsMask.setStatus('current')
slaveTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveTraps.setStatus('current')
slaveTrapsForward = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveTrapsForward.setStatus('current')
ipAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 54), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr2.setStatus('current')
subnetmask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 55), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetmask2.setStatus('current')
gateway2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 56), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gateway2.setStatus('current')
ipaddrEVCassociation = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipaddrEVCassociation.setStatus('current')
ipaddr2EVCassociation = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipaddr2EVCassociation.setStatus('current')
bootpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 59), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpEnable.setStatus('current')
tftpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 60), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpEnable.setStatus('current')
tftpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 61), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerIpAddress.setStatus('current')
dhcptftpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 62), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcptftpServerIpAddress.setStatus('current')
tftpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFileName.setStatus('current')
modeType = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 64), OstModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modeType.setStatus('current')
dhcpPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPortNumber.setStatus('current')
dhcpTagVid = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 66), OstVlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpTagVid.setStatus('current')
trapSrcIpSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 67), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSrcIpSelect.setStatus('current')
muxGroupDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 68), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxGroupDefaults.setStatus('current')
portFwdCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 0), ("port1", 1), ("port2", 2), ("backplaneA", 3), ("backplaneB", 4))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFwdCpu.setStatus('current')
portFwdCpuList = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 3, 1, 70), OstPortList().clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFwdCpuList.setStatus('current')
modulePortsTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4), )
if mibBuilder.loadTexts: modulePortsTable.setStatus('current')
modulePortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"), (0, "OMNITRON-MIB", "portnum"))
if mibBuilder.loadTexts: modulePortsEntry.setStatus('current')
portnum = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 1), OstPortNumber())
if mibBuilder.loadTexts: portnum.setStatus('current')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("disabled", 1), ("enabled", 2), ("unused", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portState.setStatus('current')
portEgressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgressRate.setStatus('current')
portpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portpriority.setStatus('current')
portcanonicalformatIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portcanonicalformatIndicator.setStatus('current')
portvlanidentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portvlanidentifier.setStatus('current')
portmlistcriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portmlistcriteria.setStatus('current')
portingresssecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portingresssecurity.setStatus('current')
portegresspolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portegresspolicy.setStatus('current')
portIngressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIngressRate.setStatus('current')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeed.setStatus('current')
portUnidirectionalAhOamEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUnidirectionalAhOamEnable.setStatus('current')
portIngressRateDropOrPause = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIngressRateDropOrPause.setStatus('current')
portIngressRateCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 256000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIngressRateCBS.setStatus('current')
portL2CPmgntProcessing = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portL2CPmgntProcessing.setStatus('current')
portEgressQosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgressQosPolicy.setStatus('current')
portAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAccessType.setStatus('current')
portStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatsClear.setStatus('current')
portLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkState.setStatus('current')
portDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDuplex.setStatus('current')
portMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacAddress.setStatus('current')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"), (0, "OMNITRON-MIB", "portnum"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('current')
txOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctets.setStatus('current')
txDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDropPkts.setStatus('current')
txBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBroadcastPkts.setStatus('current')
txMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMulticastPkts.setStatus('current')
txUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUnicastPkts.setStatus('current')
txGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txGoodPkts.setStatus('current')
txErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txErrorPkts.setStatus('current')
txPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPausePkts.setStatus('current')
txCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCollisions.setStatus('current')
txSingleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSingleCollision.setStatus('current')
txMultipleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMultipleCollision.setStatus('current')
txDeferedTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDeferedTransmit.setStatus('current')
txLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txLateCollision.setStatus('current')
txExcessiveCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcessiveCollision.setStatus('current')
txDroppedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDroppedEvents.setStatus('current')
rxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctets.setStatus('current')
rxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDropPkts.setStatus('current')
rxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBroadcastPkts.setStatus('current')
rxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMulticastPkts.setStatus('current')
rxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUnicastPkts.setStatus('current')
rxGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxGoodPkts.setStatus('current')
rxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxTotalPkts.setStatus('current')
rxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxErrorPkts.setStatus('current')
rxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPausePkts.setStatus('current')
rxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUndersizePkts.setStatus('current')
rxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOversizePkts.setStatus('current')
rxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFragments.setStatus('current')
rxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxJabbers.setStatus('current')
rxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAlignmentErrors.setStatus('current')
rxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFCSErrors.setStatus('current')
rxSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxSymbolErrors.setStatus('current')
rxCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxCRCAlignErrors.setStatus('current')
rxPackets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPackets64.setStatus('current')
rxPackets65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPackets65to127.setStatus('current')
rxPackets128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPackets128to255.setStatus('current')
rxPackets256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPackets256to511.setStatus('current')
rxPackets512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPackets512to1023.setStatus('current')
rxPackets1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPackets1024to1518.setStatus('current')
txOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctets64.setStatus('current')
rxOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 5, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctets64.setStatus('current')
moduleVLANTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6), )
if mibBuilder.loadTexts: moduleVLANTable.setStatus('current')
moduleVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"), (0, "OMNITRON-MIB", "index"))
if mibBuilder.loadTexts: moduleVLANEntry.setStatus('current')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: index.setStatus('current')
validityflag = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: validityflag.setStatus('current')
vlanidentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanidentifier.setStatus('current')
port1Membership = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1Membership.setStatus('current')
port2Membership = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2Membership.setStatus('current')
port3Membership = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3Membership.setStatus('current')
port4Membership = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port4Membership.setStatus('current')
port5Membership = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port5Membership.setStatus('current')
port6Membership = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port6Membership.setStatus('current')
portAHTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7), )
if mibBuilder.loadTexts: portAHTable.setStatus('current')
portAHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"), (0, "OMNITRON-MIB", "portnum"))
if mibBuilder.loadTexts: portAHEntry.setStatus('current')
ahEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahEnabled.setStatus('current')
ahLpbkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahLpbkMode.setStatus('current')
ahLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahLocalMode.setStatus('current')
ahRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRemoteMode.setStatus('current')
ahLocalMuxState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahLocalMuxState.setStatus('current')
ahRemoteMuxState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRemoteMuxState.setStatus('current')
ahLocalParserState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahLocalParserState.setStatus('current')
ahRemoteParserState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRemoteParserState.setStatus('current')
ahLocalSupportVar = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahLocalSupportVar.setStatus('current')
ahLocalLinkFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahLocalLinkFlags.setStatus('current')
ahLocalLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahLocalLpbkTimeout.setStatus('current')
ahRemoteSupportVar = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRemoteSupportVar.setStatus('current')
ahRemoteLinkFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRemoteLinkFlags.setStatus('current')
ahRemoteLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRemoteLpbkTimeout.setStatus('current')
ahLocalOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahLocalOUI.setStatus('current')
ahRemoteOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRemoteOUI.setStatus('current')
ahErroredSymbolPeriodWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahErroredSymbolPeriodWindow.setStatus('current')
ahErroredSymbolPeriodThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahErroredSymbolPeriodThreshold.setStatus('current')
ahErroredFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahErroredFrameWindow.setStatus('current')
ahErroredFrameThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahErroredFrameThreshold.setStatus('current')
ahErroredFramePeriodWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahErroredFramePeriodWindow.setStatus('current')
ahErroredFramePeriodThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahErroredFramePeriodThreshold.setStatus('current')
ahErroredFrameSecondsWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahErroredFrameSecondsWindow.setStatus('current')
ahErroredFrameSecondsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahErroredFrameSecondsThreshold.setStatus('current')
ahRemoteLinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRemoteLinkPort.setStatus('current')
ahSymbolErrorRunningTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahSymbolErrorRunningTotal.setStatus('current')
ahSymbolErrorEventTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahSymbolErrorEventTotal.setStatus('current')
ahFrameErrorRunningTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahFrameErrorRunningTotal.setStatus('current')
ahFrameErrorEventTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahFrameErrorEventTotal.setStatus('current')
ahFramePeriodRunningTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahFramePeriodRunningTotal.setStatus('current')
ahFramePeriodEventTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahFramePeriodEventTotal.setStatus('current')
ahFrameSecondsSummaryRunningTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahFrameSecondsSummaryRunningTotal.setStatus('current')
ahFrameSecondsSummaryEventTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahFrameSecondsSummaryEventTotal.setStatus('current')
ahClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahClearStatistics.setStatus('current')
ahTransmissionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setUnits('Frames/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahTransmissionRate.setStatus('current')
ahCriticalEventMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahCriticalEventMode.setStatus('current')
ahCriticalEventTrapList = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 7, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahCriticalEventTrapList.setStatus('current')
portSFPTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8), )
if mibBuilder.loadTexts: portSFPTable.setStatus('current')
portSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"), (0, "OMNITRON-MIB", "portnum"))
if mibBuilder.loadTexts: portSFPEntry.setStatus('current')
portSFPstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSFPstatus.setStatus('current')
portSFPpageA0 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSFPpageA0.setStatus('current')
portSFPpageA2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSFPpageA2.setStatus('current')
portSfpBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpBitRate.setStatus('current')
portSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpVendorName.setStatus('current')
portSfpVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpVendorPartNumber.setStatus('current')
portSfpVendorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpVendorSerialNumber.setStatus('current')
portSfpDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpDateCode.setStatus('current')
portSfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpTemperature.setStatus('current')
portSfpVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpVcc.setStatus('current')
portSfpBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpBiasCurrent.setStatus('current')
portSfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpTxPower.setStatus('current')
portSfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 8, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSfpRxPower.setStatus('current')
userTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 9), )
if mibBuilder.loadTexts: userTable.setStatus('current')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 9, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"), (0, "OMNITRON-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: userIndex.setStatus('current')
snmpv3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserName.setStatus('current')
snmpv3SecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3SecurityLevel.setStatus('current')
snmpv3AuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3AuthPassword.setStatus('current')
snmpv3PrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3PrivPassword.setStatus('current')
snmpv3UserType = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserType.setStatus('current')
ostProtocolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 10), )
if mibBuilder.loadTexts: ostProtocolStatusTable.setStatus('current')
ostProtocolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 10, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"), (0, "OMNITRON-MIB", "userIndex"), (0, "OMNITRON-MIB", "ostProtocolStatusIndex"))
if mibBuilder.loadTexts: ostProtocolStatusEntry.setStatus('current')
ostProtocolStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ostProtocolStatusIndex.setStatus('current')
ostProtocolStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2), ("ftp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostProtocolStatusType.setStatus('current')
ostProtocolStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("lockedout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostProtocolStatusState.setStatus('current')
ostProtocoManagementPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDefined", 1), ("mgt1", 2), ("mgt2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostProtocoManagementPort.setStatus('current')
ostProtocolStatusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostProtocolStatusIpAddress.setStatus('current')
ostProtocolStatusSessionOpenLockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 10, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostProtocolStatusSessionOpenLockTime.setStatus('current')
ostEnvironmentalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11), )
if mibBuilder.loadTexts: ostEnvironmentalStatusTable.setStatus('current')
ostEnvironmentalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1), ).setIndexNames((0, "OMNITRON-MIB", "modchassnum"), (0, "OMNITRON-MIB", "modslotnum"))
if mibBuilder.loadTexts: ostEnvironmentalStatusEntry.setStatus('current')
ostEnvironmentalPs1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("notInstalled", 1), ("installedNotPowered", 2), ("installedPowered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalPs1Status.setStatus('current')
ostEnvironmentalPs1VoltageIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 2), Integer32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalPs1VoltageIn.setStatus('current')
ostEnvironmentalPs1VoltageOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 3), Unsigned32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalPs1VoltageOut.setStatus('current')
ostEnvironmentalPs1CurrentOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 4), Unsigned32()).setUnits('milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalPs1CurrentOut.setStatus('current')
ostEnvironmentalPs2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("notInstalled", 1), ("installedNotPowered", 2), ("installedPowered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalPs2Status.setStatus('current')
ostEnvironmentalPs2VoltageIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 6), Integer32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalPs2VoltageIn.setStatus('current')
ostEnvironmentalPs2VoltageOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 7), Unsigned32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalPs2VoltageOut.setStatus('current')
ostEnvironmentalPs2CurrentOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 8), Unsigned32()).setUnits('milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalPs2CurrentOut.setStatus('current')
ostEnvironmentalTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 9), Integer32()).setUnits('degrees centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalTemperature.setStatus('current')
ostEnvironmentalFan1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("notInstalled", 1), ("installedNotPowered", 2), ("installedPowered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalFan1Status.setStatus('current')
ostEnvironmentalFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 11), Unsigned32()).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalFan1Speed.setStatus('current')
ostEnvironmentalFan2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("notInstalled", 1), ("installedNotPowered", 2), ("installedPowered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalFan2Status.setStatus('current')
ostEnvironmentalFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 13), Unsigned32()).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalFan2Speed.setStatus('current')
ostEnvironmentalFan3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("notInstalled", 1), ("installedNotPowered", 2), ("installedPowered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalFan3Status.setStatus('current')
ostEnvironmentalFan3Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 7342, 2, 1, 11, 1, 15), Unsigned32()).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostEnvironmentalFan3Speed.setStatus('current')
omnitronCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7342, 4, 1))
omnitronGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7342, 4, 2))
omnitronCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7342, 4, 1, 1)).setObjects(("OMNITRON-MIB", "omnitronGroup"), ("OMNITRON-MIB", "omnitronSFPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    omnitronCompliance = omnitronCompliance.setStatus('current')
omnitronGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7342, 4, 2, 1))
for _omnitronGroup_obj in [[("OMNITRON-MIB", "chassis"), ("OMNITRON-MIB", "selfSlot"), ("OMNITRON-MIB", "chassisnum"), ("OMNITRON-MIB", "slotnum"), ("OMNITRON-MIB", "chassistype"), ("OMNITRON-MIB", "prodtype"), ("OMNITRON-MIB", "chassisname"), ("OMNITRON-MIB", "partnum"), ("OMNITRON-MIB", "serialnum"), ("OMNITRON-MIB", "manufdate"), ("OMNITRON-MIB", "softrev"), ("OMNITRON-MIB", "prodrev"), ("OMNITRON-MIB", "ledstat"), ("OMNITRON-MIB", "switchstat"), ("OMNITRON-MIB", "extended1"), ("OMNITRON-MIB", "extended2"), ("OMNITRON-MIB", "extended3"), ("OMNITRON-MIB", "extended4"), ("OMNITRON-MIB", "extended5"), ("OMNITRON-MIB", "extended6"), ("OMNITRON-MIB", "resetmod"), ("OMNITRON-MIB", "wrswitch"), ("OMNITRON-MIB", "modulename"), ("OMNITRON-MIB", "moduleCount"), ("OMNITRON-MIB", "modchassnum"), ("OMNITRON-MIB", "modslotnum"), ("OMNITRON-MIB", "modchasstype"), ("OMNITRON-MIB", "modprodtype"), ("OMNITRON-MIB", "modsoftrev"), ("OMNITRON-MIB", "modprodrev"), ("OMNITRON-MIB", "modreset"), ("OMNITRON-MIB", "modnumports"), ("OMNITRON-MIB", "modchassname"), ("OMNITRON-MIB", "modpartnum"), ("OMNITRON-MIB", "modserialnum"), ("OMNITRON-MIB", "modmanufdate"), ("OMNITRON-MIB", "modname"), ("OMNITRON-MIB", "modportvlan"), ("OMNITRON-MIB", "modextfeaturebits"), ("OMNITRON-MIB", "modswbuildnum"), ("OMNITRON-MIB", "modenable802dot1qProcessing"), ("OMNITRON-MIB", "modtagsubstitution"), ("OMNITRON-MIB", "modcommitVLANchanges"), ("OMNITRON-MIB", "modvlanTableClear"), ("OMNITRON-MIB", "modcommitNMMCfgChanges"), ("OMNITRON-MIB", "modLM80volts"), ("OMNITRON-MIB", "modLM80currents"), ("OMNITRON-MIB", "modLM80misc"), ("OMNITRON-MIB", "modRestoreFactoryDefaults"), ("OMNITRON-MIB", "sysAdminStatus"), ("OMNITRON-MIB", "sysDateTime"), ("OMNITRON-MIB", "macAddr"), ("OMNITRON-MIB", "ipAddr"), ("OMNITRON-MIB", "subnetmask"), ("OMNITRON-MIB", "gateway"), ("OMNITRON-MIB", "readCommunity"), ("OMNITRON-MIB", "writeCommunity"), ("OMNITRON-MIB", "mychassnum"), ("OMNITRON-MIB", "mmname"), ("OMNITRON-MIB", "traphost1"), ("OMNITRON-MIB", "traphost2"), ("OMNITRON-MIB", "traphost3"), ("OMNITRON-MIB", "traphost4"), ("OMNITRON-MIB", "traphost5"), ("OMNITRON-MIB", "traphost6"), ("OMNITRON-MIB", "traphost7"), ("OMNITRON-MIB", "traphost8"), ("OMNITRON-MIB", "sysloc"), ("OMNITRON-MIB", "syscon"), ("OMNITRON-MIB", "serialpass"), ("OMNITRON-MIB", "telnetpass"), ("OMNITRON-MIB", "ftppasswrd"), ("OMNITRON-MIB", "keepAliveInterval"), ("OMNITRON-MIB", "vlanIdOst"), ("OMNITRON-MIB", "nmmCfgSerialBaudrate"), ("OMNITRON-MIB", "enabledFunctions"), ("OMNITRON-MIB", "enableSNMPFunction"), ("OMNITRON-MIB", "nmmCfgState"), ("OMNITRON-MIB", "nmmSecureMode"), ("OMNITRON-MIB", "nmmSecureConnState"), ("OMNITRON-MIB", "nmmIpProtocolState"), ("OMNITRON-MIB", "nmmIpDisabled"), ("OMNITRON-MIB", "vlanPri"), ("OMNITRON-MIB", "enableSNMPWrites"), ("OMNITRON-MIB", "cpuVoltageIn"), ("OMNITRON-MIB", "cpuVoltageOut"), ("OMNITRON-MIB", "cpuTemperature"), ("OMNITRON-MIB", "nmmSecureSlaveSlot"), ("OMNITRON-MIB", "dhcpIpAddr"), ("OMNITRON-MIB", "dhcpSubnetmask"), ("OMNITRON-MIB", "dhcpGateway"), ("OMNITRON-MIB", "nmmOAMmgmtMode"), ("OMNITRON-MIB", "customertag"), ("OMNITRON-MIB", "servicetag"), ("OMNITRON-MIB", "cnodeControl"), ("OMNITRON-MIB", "cnodeCIR"), ("OMNITRON-MIB", "enableSNMPv3Function"), ("OMNITRON-MIB", "slaveWrite"), ("OMNITRON-MIB", "snmpTrapType"), ("OMNITRON-MIB", "capsMask"), ("OMNITRON-MIB", "slaveTraps"), ("OMNITRON-MIB", "slaveTrapsForward"), ("OMNITRON-MIB", "coreStatusOnly"), ("OMNITRON-MIB", "ingressPolicingType"), ("OMNITRON-MIB", "vlanservicetag"), ("OMNITRON-MIB", "defaultForwardingMap"), ("OMNITRON-MIB", "modFpgaRev"), ("OMNITRON-MIB", "modExpPartNumber"), ("OMNITRON-MIB", "modExpSoftwareRev"), ("OMNITRON-MIB", "modExpLedStatus"), ("OMNITRON-MIB", "modHwRev"), ("OMNITRON-MIB", "modPcbRev"), ("OMNITRON-MIB", "ipAddr2"), ("OMNITRON-MIB", "subnetmask2"), ("OMNITRON-MIB", "gateway2"), ("OMNITRON-MIB", "ipaddrEVCassociation"), ("OMNITRON-MIB", "ipaddr2EVCassociation"), ("OMNITRON-MIB", "bootpEnable"), ("OMNITRON-MIB", "tftpEnable"), ("OMNITRON-MIB", "tftpServerIpAddress"), ("OMNITRON-MIB", "dhcptftpServerIpAddress"), ("OMNITRON-MIB", "tftpFileName"), ("OMNITRON-MIB", "modeType"), ("OMNITRON-MIB", "dhcpPortNumber"), ("OMNITRON-MIB", "dhcpTagVid"), ("OMNITRON-MIB", "trapSrcIpSelect"), ("OMNITRON-MIB", "muxGroupDefaults"), ("OMNITRON-MIB", "portFwdCpu"), ("OMNITRON-MIB", "portFwdCpuList"), ("OMNITRON-MIB", "portState"), ("OMNITRON-MIB", "portEgressRate"), ("OMNITRON-MIB", "portpriority"), ("OMNITRON-MIB", "portcanonicalformatIndicator"), ("OMNITRON-MIB", "portvlanidentifier"), ("OMNITRON-MIB", "portmlistcriteria"), ("OMNITRON-MIB", "portingresssecurity"), ("OMNITRON-MIB", "portegresspolicy"), ("OMNITRON-MIB", "portIngressRate"), ("OMNITRON-MIB", "portSpeed"), ("OMNITRON-MIB", "portUnidirectionalAhOamEnable"), ("OMNITRON-MIB", "portIngressRateDropOrPause"), ("OMNITRON-MIB", "portIngressRateCBS"), ("OMNITRON-MIB", "portL2CPmgntProcessing"), ("OMNITRON-MIB", "portEgressQosPolicy"), ("OMNITRON-MIB", "portAccessType"), ("OMNITRON-MIB", "portStatsClear"), ("OMNITRON-MIB", "portLinkState"), ("OMNITRON-MIB", "portDuplex"), ("OMNITRON-MIB", "portMacAddress"), ("OMNITRON-MIB", "txOctets"), ("OMNITRON-MIB", "txDropPkts"), ("OMNITRON-MIB", "txBroadcastPkts"), ("OMNITRON-MIB", "txMulticastPkts"), ("OMNITRON-MIB", "txUnicastPkts"), ("OMNITRON-MIB", "txGoodPkts"), ("OMNITRON-MIB", "txErrorPkts"), ("OMNITRON-MIB", "txPausePkts"), ("OMNITRON-MIB", "txCollisions"), ("OMNITRON-MIB", "txSingleCollision"), ("OMNITRON-MIB", "txMultipleCollision"), ("OMNITRON-MIB", "txDeferedTransmit"), ("OMNITRON-MIB", "txLateCollision"), ("OMNITRON-MIB", "txExcessiveCollision"), ("OMNITRON-MIB", "txDroppedEvents"), ("OMNITRON-MIB", "rxOctets"), ("OMNITRON-MIB", "rxDropPkts"), ("OMNITRON-MIB", "rxBroadcastPkts"), ("OMNITRON-MIB", "rxMulticastPkts"), ("OMNITRON-MIB", "rxUnicastPkts"), ("OMNITRON-MIB", "rxGoodPkts"), ("OMNITRON-MIB", "rxTotalPkts"), ("OMNITRON-MIB", "rxErrorPkts"), ("OMNITRON-MIB", "rxPausePkts"), ("OMNITRON-MIB", "rxUndersizePkts"), ("OMNITRON-MIB", "rxOversizePkts"), ("OMNITRON-MIB", "rxFragments"), ("OMNITRON-MIB", "rxJabbers"), ("OMNITRON-MIB", "rxAlignmentErrors"), ("OMNITRON-MIB", "rxFCSErrors"), ("OMNITRON-MIB", "rxSymbolErrors"), ("OMNITRON-MIB", "rxCRCAlignErrors"), ("OMNITRON-MIB", "rxPackets64"), ("OMNITRON-MIB", "rxPackets65to127"), ("OMNITRON-MIB", "rxPackets128to255"), ("OMNITRON-MIB", "rxPackets256to511"), ("OMNITRON-MIB", "rxPackets512to1023"), ("OMNITRON-MIB", "rxPackets1024to1518"), ("OMNITRON-MIB", "txOctets64"), ("OMNITRON-MIB", "rxOctets64"), ("OMNITRON-MIB", "validityflag"), ("OMNITRON-MIB", "vlanidentifier"), ("OMNITRON-MIB", "port1Membership"), ("OMNITRON-MIB", "port2Membership"), ("OMNITRON-MIB", "port3Membership"), ("OMNITRON-MIB", "port4Membership"), ("OMNITRON-MIB", "port5Membership"), ("OMNITRON-MIB", "port6Membership"), ("OMNITRON-MIB", "ahEnabled"), ("OMNITRON-MIB", "ahLpbkMode"), ("OMNITRON-MIB", "ahLocalMode"), ("OMNITRON-MIB", "ahRemoteMode"), ("OMNITRON-MIB", "ahLocalMuxState"), ("OMNITRON-MIB", "ahRemoteMuxState"), ("OMNITRON-MIB", "ahLocalParserState"), ("OMNITRON-MIB", "ahRemoteParserState"), ("OMNITRON-MIB", "ahLocalSupportVar"), ("OMNITRON-MIB", "ahLocalLinkFlags"), ("OMNITRON-MIB", "ahLocalLpbkTimeout"), ("OMNITRON-MIB", "ahRemoteSupportVar"), ("OMNITRON-MIB", "ahRemoteLinkFlags"), ("OMNITRON-MIB", "ahRemoteLpbkTimeout"), ("OMNITRON-MIB", "ahLocalOUI"), ("OMNITRON-MIB", "ahRemoteOUI"), ("OMNITRON-MIB", "ahErroredSymbolPeriodWindow"), ("OMNITRON-MIB", "ahErroredSymbolPeriodThreshold"), ("OMNITRON-MIB", "ahErroredFrameWindow"), ("OMNITRON-MIB", "ahErroredFrameThreshold"), ("OMNITRON-MIB", "ahErroredFramePeriodWindow"), ("OMNITRON-MIB", "ahErroredFramePeriodThreshold"), ("OMNITRON-MIB", "ahErroredFrameSecondsWindow"), ("OMNITRON-MIB", "ahErroredFrameSecondsThreshold"), ("OMNITRON-MIB", "ahRemoteLinkPort"), ("OMNITRON-MIB", "ahSymbolErrorRunningTotal"), ("OMNITRON-MIB", "ahSymbolErrorEventTotal"), ("OMNITRON-MIB", "ahFrameErrorRunningTotal"), ("OMNITRON-MIB", "ahFrameErrorEventTotal"), ("OMNITRON-MIB", "ahFramePeriodRunningTotal"), ("OMNITRON-MIB", "ahFramePeriodEventTotal"), ("OMNITRON-MIB", "ahFrameSecondsSummaryRunningTotal"), ("OMNITRON-MIB", "ahFrameSecondsSummaryEventTotal"), ("OMNITRON-MIB", "ahClearStatistics"), ("OMNITRON-MIB", "ahTransmissionRate"), ("OMNITRON-MIB", "ahCriticalEventMode"), ("OMNITRON-MIB", "ahCriticalEventTrapList"), ("OMNITRON-MIB", "snmpv3UserName"), ("OMNITRON-MIB", "snmpv3SecurityLevel"), ("OMNITRON-MIB", "snmpv3AuthPassword"), ("OMNITRON-MIB", "snmpv3PrivPassword"), ("OMNITRON-MIB", "snmpv3UserType"), ("OMNITRON-MIB", "ostProtocolStatusType"), ("OMNITRON-MIB", "ostProtocolStatusState"), ("OMNITRON-MIB", "ostProtocoManagementPort"), ("OMNITRON-MIB", "ostProtocolStatusIpAddress"), ("OMNITRON-MIB", "ostProtocolStatusSessionOpenLockTime"), ("OMNITRON-MIB", "ostEnvironmentalPs1Status"), ("OMNITRON-MIB", "ostEnvironmentalPs1VoltageIn"), ("OMNITRON-MIB", "ostEnvironmentalPs1VoltageOut"), ("OMNITRON-MIB", "ostEnvironmentalPs1CurrentOut"), ("OMNITRON-MIB", "ostEnvironmentalPs2Status"), ("OMNITRON-MIB", "ostEnvironmentalPs2VoltageIn"), ("OMNITRON-MIB", "ostEnvironmentalPs2VoltageOut"), ("OMNITRON-MIB", "ostEnvironmentalPs2CurrentOut"), ("OMNITRON-MIB", "ostEnvironmentalTemperature"), ("OMNITRON-MIB", "ostEnvironmentalFan1Status"), ("OMNITRON-MIB", "ostEnvironmentalFan1Speed")], [("OMNITRON-MIB", "ostEnvironmentalFan2Status"), ("OMNITRON-MIB", "ostEnvironmentalFan2Speed"), ("OMNITRON-MIB", "ostEnvironmentalFan3Status"), ("OMNITRON-MIB", "ostEnvironmentalFan3Speed")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        omnitronGroup = omnitronGroup.setObjects(*_omnitronGroup_obj)
    else:
        omnitronGroup = omnitronGroup.setObjects(*_omnitronGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    omnitronGroup = omnitronGroup.setStatus('current')
omnitronSFPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7342, 4, 2, 2)).setObjects(("OMNITRON-MIB", "portSFPstatus"), ("OMNITRON-MIB", "portSFPpageA0"), ("OMNITRON-MIB", "portSFPpageA2"), ("OMNITRON-MIB", "portSfpBitRate"), ("OMNITRON-MIB", "portSfpVendorName"), ("OMNITRON-MIB", "portSfpVendorPartNumber"), ("OMNITRON-MIB", "portSfpVendorSerialNumber"), ("OMNITRON-MIB", "portSfpDateCode"), ("OMNITRON-MIB", "portSfpTemperature"), ("OMNITRON-MIB", "portSfpVcc"), ("OMNITRON-MIB", "portSfpBiasCurrent"), ("OMNITRON-MIB", "portSfpTxPower"), ("OMNITRON-MIB", "portSfpRxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    omnitronSFPGroup = omnitronSFPGroup.setStatus('current')
mibBuilder.exportSymbols("OMNITRON-MIB", txOctets64=txOctets64, modulePortsEntry=modulePortsEntry, rxJabbers=rxJabbers, ostEnvironmentalPs1VoltageOut=ostEnvironmentalPs1VoltageOut, ostEnvironmentalFan3Status=ostEnvironmentalFan3Status, txPausePkts=txPausePkts, portStatsClear=portStatsClear, portSFPEntry=portSFPEntry, port3Membership=port3Membership, portMacAddress=portMacAddress, ahTransmissionRate=ahTransmissionRate, dhcptftpServerIpAddress=dhcptftpServerIpAddress, cpuVoltageOut=cpuVoltageOut, vlanPri=vlanPri, modExpSoftwareRev=modExpSoftwareRev, ostEnvironmentalFan2Status=ostEnvironmentalFan2Status, portSfpDateCode=portSfpDateCode, dhcpPortNumber=dhcpPortNumber, userTable=userTable, ostEnvironmentalFan2Speed=ostEnvironmentalFan2Speed, modtagsubstitution=modtagsubstitution, moduleMgtCfgEntry=moduleMgtCfgEntry, modeType=modeType, portIngressRateDropOrPause=portIngressRateDropOrPause, modcommitNMMCfgChanges=modcommitNMMCfgChanges, omnitronMIB=omnitronMIB, ahRemoteParserState=ahRemoteParserState, managementModule=managementModule, ostEnvironmentalFan1Status=ostEnvironmentalFan1Status, rxPackets65to127=rxPackets65to127, cpuVoltageIn=cpuVoltageIn, modswbuildnum=modswbuildnum, txErrorPkts=txErrorPkts, writeCommunity=writeCommunity, modportvlan=modportvlan, portSFPpageA0=portSFPpageA0, traphost1=traphost1, rxAlignmentErrors=rxAlignmentErrors, ahLocalParserState=ahLocalParserState, portL2CPmgntProcessing=portL2CPmgntProcessing, ahRemoteLinkFlags=ahRemoteLinkFlags, modenable802dot1qProcessing=modenable802dot1qProcessing, portState=portState, modFpgaRev=modFpgaRev, portSfpVendorSerialNumber=portSfpVendorSerialNumber, ipaddrEVCassociation=ipaddrEVCassociation, txUnicastPkts=txUnicastPkts, rxErrorPkts=rxErrorPkts, ingressPolicingType=ingressPolicingType, readCommunity=readCommunity, modulePortsTable=modulePortsTable, portvlanidentifier=portvlanidentifier, ostEnvironmentalFan3Speed=ostEnvironmentalFan3Speed, modpartnum=modpartnum, macAddr=macAddr, ahErroredFrameWindow=ahErroredFrameWindow, modchassnum=modchassnum, modchassname=modchassname, cnodeCIR=cnodeCIR, ahErroredFramePeriodWindow=ahErroredFramePeriodWindow, port5Membership=port5Membership, modLM80currents=modLM80currents, ostProtocolStatusSessionOpenLockTime=ostProtocolStatusSessionOpenLockTime, ostEnvironmentalPs1VoltageIn=ostEnvironmentalPs1VoltageIn, chassis=chassis, nmmCfgState=nmmCfgState, port2Membership=port2Membership, switchstat=switchstat, portSFPpageA2=portSFPpageA2, ostProtocolStatusTable=ostProtocolStatusTable, modExpLedStatus=modExpLedStatus, omnitronGroups=omnitronGroups, modvlanTableClear=modvlanTableClear, ostEnvironmentalPs1Status=ostEnvironmentalPs1Status, portegresspolicy=portegresspolicy, cpuTemperature=cpuTemperature, portcanonicalformatIndicator=portcanonicalformatIndicator, mychassnum=mychassnum, omnitronGroup=omnitronGroup, omnitronCompliance=omnitronCompliance, rxPausePkts=rxPausePkts, modLM80volts=modLM80volts, ostEnvironmentalPs2VoltageIn=ostEnvironmentalPs2VoltageIn, snmpv3PrivPassword=snmpv3PrivPassword, portIngressRateCBS=portIngressRateCBS, ahErroredSymbolPeriodWindow=ahErroredSymbolPeriodWindow, sysloc=sysloc, traphost4=traphost4, rxOctets64=rxOctets64, ahFrameErrorEventTotal=ahFrameErrorEventTotal, portStatsEntry=portStatsEntry, ahLocalOUI=ahLocalOUI, rxTotalPkts=rxTotalPkts, modPcbRev=modPcbRev, modExpPartNumber=modExpPartNumber, portSfpVendorName=portSfpVendorName, cnodeControl=cnodeControl, txGoodPkts=txGoodPkts, modprodtype=modprodtype, portUnidirectionalAhOamEnable=portUnidirectionalAhOamEnable, omnitronCompliances=omnitronCompliances, ostEnvironmentalFan1Speed=ostEnvironmentalFan1Speed, dhcpSubnetmask=dhcpSubnetmask, tftpServerIpAddress=tftpServerIpAddress, portDuplex=portDuplex, ahLocalLpbkTimeout=ahLocalLpbkTimeout, ostProtocolStatusIndex=ostProtocolStatusIndex, ostEnvironmentalPs1CurrentOut=ostEnvironmentalPs1CurrentOut, ahErroredFrameSecondsThreshold=ahErroredFrameSecondsThreshold, ahLocalMuxState=ahLocalMuxState, selfSlot=selfSlot, portFwdCpu=portFwdCpu, subnetmask=subnetmask, partnum=partnum, serialpass=serialpass, rxOctets=rxOctets, chassistype=chassistype, enableSNMPv3Function=enableSNMPv3Function, extended2=extended2, snmpv3SecurityLevel=snmpv3SecurityLevel, ostProtocolStatusType=ostProtocolStatusType, traphost3=traphost3, nmmIpDisabled=nmmIpDisabled, portStatsTable=portStatsTable, ahFrameSecondsSummaryRunningTotal=ahFrameSecondsSummaryRunningTotal, portSfpTemperature=portSfpTemperature, nmmIpProtocolState=nmmIpProtocolState, slaveWrite=slaveWrite, extended3=extended3, modcommitVLANchanges=modcommitVLANchanges, ostEnvironmentalPs2VoltageOut=ostEnvironmentalPs2VoltageOut, ostProtocoManagementPort=ostProtocoManagementPort, ostProtocolStatusIpAddress=ostProtocolStatusIpAddress, capsMask=capsMask, nmmSecureSlaveSlot=nmmSecureSlaveSlot, ahErroredFrameSecondsWindow=ahErroredFrameSecondsWindow, defaultForwardingMap=defaultForwardingMap, syscon=syscon, ipAddr=ipAddr, ostProtocolStatusEntry=ostProtocolStatusEntry, rxPackets512to1023=rxPackets512to1023, ostProtocolStatusState=ostProtocolStatusState, tftpFileName=tftpFileName, extended5=extended5, slaveTrapsForward=slaveTrapsForward, snmpv3UserName=snmpv3UserName, modnumports=modnumports, moduleMgtCfgTable=moduleMgtCfgTable, softrev=softrev, tftpEnable=tftpEnable, ostEnvironmentalStatusTable=ostEnvironmentalStatusTable, rxPackets128to255=rxPackets128to255, slaveTraps=slaveTraps, snmpTrapType=snmpTrapType, modLM80misc=modLM80misc, portFwdCpuList=portFwdCpuList, portSfpVendorPartNumber=portSfpVendorPartNumber, omnitronConformance=omnitronConformance, ostEnvironmentalPs2CurrentOut=ostEnvironmentalPs2CurrentOut, telnetpass=telnetpass, snmpv3AuthPassword=snmpv3AuthPassword, rxFCSErrors=rxFCSErrors, ipaddr2EVCassociation=ipaddr2EVCassociation, chassisEntry=chassisEntry, traphost2=traphost2, userEntry=userEntry, portSfpRxPower=portSfpRxPower, muxGroupDefaults=muxGroupDefaults, enableSNMPWrites=enableSNMPWrites, ftppasswrd=ftppasswrd, enableSNMPFunction=enableSNMPFunction, ahFrameErrorRunningTotal=ahFrameErrorRunningTotal, ostEnvironmentalTemperature=ostEnvironmentalTemperature, ahSymbolErrorRunningTotal=ahSymbolErrorRunningTotal, ahCriticalEventMode=ahCriticalEventMode, rxFragments=rxFragments, mmname=mmname, ahLocalLinkFlags=ahLocalLinkFlags, dhcpGateway=dhcpGateway, ahSymbolErrorEventTotal=ahSymbolErrorEventTotal, nmmSecureMode=nmmSecureMode, coreStatusOnly=coreStatusOnly, portSFPstatus=portSFPstatus, rxPackets1024to1518=rxPackets1024to1518, ipAddr2=ipAddr2, PYSNMP_MODULE_ID=omnitronMIB, ahCriticalEventTrapList=ahCriticalEventTrapList, portAHTable=portAHTable, txDroppedEvents=txDroppedEvents, resetmod=resetmod, moduleVLANEntry=moduleVLANEntry, ahLocalMode=ahLocalMode, prodrev=prodrev, keepAliveInterval=keepAliveInterval, txMultipleCollision=txMultipleCollision, chassisname=chassisname, txCollisions=txCollisions, customertag=customertag, modprodrev=modprodrev, enabledFunctions=enabledFunctions, ahRemoteMuxState=ahRemoteMuxState, serialnum=serialnum, portSFPTable=portSFPTable, rxPackets64=rxPackets64, portSpeed=portSpeed, portSfpVcc=portSfpVcc, bootpEnable=bootpEnable, modRestoreFactoryDefaults=modRestoreFactoryDefaults, wrswitch=wrswitch, userIndex=userIndex, txDeferedTransmit=txDeferedTransmit, enhancedchassisTable=enhancedchassisTable, ahLocalSupportVar=ahLocalSupportVar, txBroadcastPkts=txBroadcastPkts, portnum=portnum, chassisTable=chassisTable, modserialnum=modserialnum, modchasstype=modchasstype, ahFramePeriodRunningTotal=ahFramePeriodRunningTotal, portpriority=portpriority, txSingleCollision=txSingleCollision, ostEnvironmentalPs2Status=ostEnvironmentalPs2Status, portLinkState=portLinkState, extended4=extended4, index=index, portSfpBitRate=portSfpBitRate, ahClearStatistics=ahClearStatistics, omnitronSFPGroup=omnitronSFPGroup, portEgressQosPolicy=portEgressQosPolicy, servicetag=servicetag, moduleTable=moduleTable, ahRemoteMode=ahRemoteMode, traphost7=traphost7, rxUndersizePkts=rxUndersizePkts, port4Membership=port4Membership, ahEnabled=ahEnabled, prodAgent=prodAgent, rxMulticastPkts=rxMulticastPkts, ostEnvironmentalStatusEntry=ostEnvironmentalStatusEntry, txExcessiveCollision=txExcessiveCollision, portEgressRate=portEgressRate, portingresssecurity=portingresssecurity, modsoftrev=modsoftrev, ahErroredFrameThreshold=ahErroredFrameThreshold, sysDateTime=sysDateTime, portIngressRate=portIngressRate, port6Membership=port6Membership, moduleCount=moduleCount, slotnum=slotnum, prodtype=prodtype, gateway=gateway, rxOversizePkts=rxOversizePkts, dhcpTagVid=dhcpTagVid, modulename=modulename)
mibBuilder.exportSymbols("OMNITRON-MIB", moduleEntry=moduleEntry, ahRemoteOUI=ahRemoteOUI, portAHEntry=portAHEntry, modreset=modreset, portAccessType=portAccessType, ahErroredSymbolPeriodThreshold=ahErroredSymbolPeriodThreshold, ahRemoteLinkPort=ahRemoteLinkPort, portSfpBiasCurrent=portSfpBiasCurrent, manufdate=manufdate, gateway2=gateway2, portmlistcriteria=portmlistcriteria, ahErroredFramePeriodThreshold=ahErroredFramePeriodThreshold, ahRemoteSupportVar=ahRemoteSupportVar, moduleVLANTable=moduleVLANTable, extended6=extended6, omnitronProducts=omnitronProducts, sysAdminStatus=sysAdminStatus, ahLpbkMode=ahLpbkMode, modHwRev=modHwRev, portSfpTxPower=portSfpTxPower, rxGoodPkts=rxGoodPkts, rxCRCAlignErrors=rxCRCAlignErrors, modextfeaturebits=modextfeaturebits, modslotnum=modslotnum, modname=modname, chassisnum=chassisnum, dhcpIpAddr=dhcpIpAddr, validityflag=validityflag, ahFramePeriodEventTotal=ahFramePeriodEventTotal, txMulticastPkts=txMulticastPkts, rxSymbolErrors=rxSymbolErrors, vlanservicetag=vlanservicetag, traphost6=traphost6, modmanufdate=modmanufdate, nmmCfgSerialBaudrate=nmmCfgSerialBaudrate, rxDropPkts=rxDropPkts, traphost5=traphost5, vlanIdOst=vlanIdOst, snmpv3UserType=snmpv3UserType, txLateCollision=txLateCollision, txDropPkts=txDropPkts, txOctets=txOctets, nmmSecureConnState=nmmSecureConnState, subnetmask2=subnetmask2, rxUnicastPkts=rxUnicastPkts, traphost8=traphost8, rxBroadcastPkts=rxBroadcastPkts, trapSrcIpSelect=trapSrcIpSelect, ahFrameSecondsSummaryEventTotal=ahFrameSecondsSummaryEventTotal, rxPackets256to511=rxPackets256to511, ledstat=ledstat, nmmOAMmgmtMode=nmmOAMmgmtMode, vlanidentifier=vlanidentifier, ahRemoteLpbkTimeout=ahRemoteLpbkTimeout, port1Membership=port1Membership, extended1=extended1)
