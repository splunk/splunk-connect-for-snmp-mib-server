#
# PySNMP MIB module LAN-EMULATION-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LAN-EMULATION-CLIENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:22:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Counter32, enterprises, ModuleIdentity, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, ObjectIdentity, Unsigned32, iso, Gauge32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "enterprises", "ModuleIdentity", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Unsigned32", "iso", "Gauge32", "IpAddress", "Bits")
TruthValue, RowStatus, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "MacAddress", "TextualConvention", "DisplayString")
atmfLanEmulation = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3))
leClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 3, 1))
if mibBuilder.loadTexts: leClientMIB.setLastUpdated('9505100000Z')
if mibBuilder.loadTexts: leClientMIB.setOrganization('ATM Forum LAN Emulation Sub-Working Group')
leClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1))
class OwnerString(DisplayString):
    pass

class AtmLaneAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), )
class VpiInteger(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class VciInteger(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class LeConnectionInterface(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class LecState(TextualConvention, Integer32):
    reference = 'ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 2.3.1'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("initialState", 1), ("lecsConnect", 2), ("configure", 3), ("join", 4), ("initialRegistration", 5), ("busConnect", 6), ("operational", 7))

class LecDataFrameFormat(TextualConvention, Integer32):
    reference = 'ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.1'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unspecified", 1), ("aflane8023", 2), ("aflane8025", 3))

class LecDataFrameSize(TextualConvention, Integer32):
    reference = 'ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.1'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unspecified", 1), ("max1516", 2), ("max4544", 3), ("max9234", 4), ("max18190", 5))

class LeArpTableEntryType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("learnedViaControl", 2), ("learnedViaData", 3), ("staticVolatile", 4), ("staticNonVolatile", 5))

lecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1), )
if mibBuilder.loadTexts: lecConfigTable.setStatus('current')
lecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"))
if mibBuilder.loadTexts: lecConfigEntry.setStatus('current')
lecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lecIndex.setStatus('current')
lecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecRowStatus.setStatus('current')
lecOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 3), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecOwner.setStatus('current')
lecConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2))).clone('automatic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecConfigMode.setStatus('current')
lecConfigLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 5), LecDataFrameFormat().clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecConfigLanType.setStatus('current')
lecConfigMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 6), LecDataFrameSize().clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecConfigMaxDataFrameSize.setStatus('current')
lecConfigLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecConfigLanName.setStatus('current')
lecConfigLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 8), AtmLaneAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecConfigLesAtmAddress.setStatus('current')
lecControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecControlTimeout.setStatus('current')
lecMaxUnknownFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('frames').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecMaxUnknownFrameCount.setStatus('current')
lecMaxUnknownFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecMaxUnknownFrameTime.setStatus('current')
lecVccTimeoutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 12), Integer32().clone(1200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecVccTimeoutPeriod.setStatus('current')
lecMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecMaxRetryCount.setStatus('current')
lecAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecAgingTime.setStatus('current')
lecForwardDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecForwardDelayTime.setStatus('current')
lecExpectedArpResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecExpectedArpResponseTime.setStatus('current')
lecFlushTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecFlushTimeOut.setStatus('current')
lecPathSwitchingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(6)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecPathSwitchingDelay.setStatus('current')
lecLocalSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecLocalSegmentID.setStatus('current')
lecMulticastSendType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestEffort", 1), ("variableBitRate", 2), ("constantBitRate", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecMulticastSendType.setStatus('current')
lecMulticastSendAvgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 21), Integer32()).setUnits('cells per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecMulticastSendAvgRate.setStatus('current')
lecMulticastSendPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 22), Integer32()).setUnits('cells per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecMulticastSendPeakRate.setStatus('current')
lecConnectionCompleteTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecConnectionCompleteTimer.setStatus('current')
lecStatusTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2), )
if mibBuilder.loadTexts: lecStatusTable.setStatus('current')
lecStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"))
if mibBuilder.loadTexts: lecStatusEntry.setStatus('current')
lecIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecIfIndex.setStatus('current')
lecPrimaryAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecPrimaryAtmAddress.setStatus('current')
lecID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecID.setStatus('current')
lecInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 4), LecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecInterfaceState.setStatus('current')
lecLastFailureRespCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 1), ("timeout", 2), ("undefinedError", 3), ("versionNotSupported", 4), ("invalidRequestParameters", 5), ("duplicateLanDestination", 6), ("duplicateAtmAddress", 7), ("insufficientResources", 8), ("accessDenied", 9), ("invalidRequesterId", 10), ("invalidLanDestination", 11), ("invalidAtmAddress", 12), ("noConfiguration", 13), ("leConfigureError", 14), ("insufficientInformation", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecLastFailureRespCode.setStatus('current')
lecLastFailureState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 6), LecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecLastFailureState.setStatus('current')
lecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecProtocol.setStatus('current')
lecVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecVersion.setStatus('current')
lecTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecTopologyChange.setStatus('current')
lecConfigServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 10), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecConfigServerAtmAddress.setStatus('current')
lecConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gotAddressViaIlmi", 1), ("usedWellKnownAddress", 2), ("usedLecsPvc", 3), ("didNotUseLecs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecConfigSource.setStatus('current')
lecActualLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 12), LecDataFrameFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecActualLanType.setStatus('current')
lecActualMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 13), LecDataFrameSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecActualMaxDataFrameSize.setStatus('current')
lecActualLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecActualLanName.setStatus('current')
lecActualLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 15), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecActualLesAtmAddress.setStatus('current')
lecProxyClient = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecProxyClient.setStatus('current')
lecMappingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 3), )
if mibBuilder.loadTexts: lecMappingTable.setStatus('current')
lecMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lecMappingEntry.setStatus('current')
lecMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecMappingIndex.setStatus('current')
lecStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4), )
if mibBuilder.loadTexts: lecStatisticsTable.setStatus('current')
lecStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"))
if mibBuilder.loadTexts: lecStatisticsEntry.setStatus('current')
lecArpRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecArpRequestsOut.setStatus('current')
lecArpRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecArpRequestsIn.setStatus('current')
lecArpRepliesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecArpRepliesOut.setStatus('current')
lecArpRepliesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecArpRepliesIn.setStatus('current')
lecControlFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecControlFramesOut.setStatus('current')
lecControlFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecControlFramesIn.setStatus('current')
lecSvcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecSvcFailures.setStatus('current')
lecServerVccTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5), )
if mibBuilder.loadTexts: lecServerVccTable.setStatus('current')
lecServerVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"))
if mibBuilder.loadTexts: lecServerVccEntry.setStatus('current')
lecConfigDirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 1), LeConnectionInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecConfigDirectInterface.setStatus('current')
lecConfigDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 2), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecConfigDirectVpi.setStatus('current')
lecConfigDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 3), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecConfigDirectVci.setStatus('current')
lecControlDirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 4), LeConnectionInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecControlDirectInterface.setStatus('current')
lecControlDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 5), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecControlDirectVpi.setStatus('current')
lecControlDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 6), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecControlDirectVci.setStatus('current')
lecControlDistributeInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 7), LeConnectionInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecControlDistributeInterface.setStatus('current')
lecControlDistributeVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 8), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecControlDistributeVpi.setStatus('current')
lecControlDistributeVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 9), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecControlDistributeVci.setStatus('current')
lecMulticastSendInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 10), LeConnectionInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecMulticastSendInterface.setStatus('current')
lecMulticastSendVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 11), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecMulticastSendVpi.setStatus('current')
lecMulticastSendVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 12), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecMulticastSendVci.setStatus('current')
lecMulticastForwardInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 13), LeConnectionInterface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecMulticastForwardInterface.setStatus('current')
lecMulticastForwardVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 14), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecMulticastForwardVpi.setStatus('current')
lecMulticastForwardVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 15), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecMulticastForwardVci.setStatus('current')
lecAtmAddressTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 6), )
if mibBuilder.loadTexts: lecAtmAddressTable.setStatus('current')
lecAtmAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 6, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"), (0, "LAN-EMULATION-CLIENT-MIB", "lecAtmAddress"))
if mibBuilder.loadTexts: lecAtmAddressEntry.setStatus('current')
lecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 6, 1, 1), AtmLaneAddress())
if mibBuilder.loadTexts: lecAtmAddress.setStatus('current')
lecAtmAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lecAtmAddressStatus.setStatus('current')
lecMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 7), )
if mibBuilder.loadTexts: lecMacAddressTable.setStatus('current')
lecMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 7, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"), (0, "LAN-EMULATION-CLIENT-MIB", "lecMacAddress"))
if mibBuilder.loadTexts: lecMacAddressEntry.setStatus('current')
lecMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: lecMacAddress.setStatus('current')
lecMacAddressAtmBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 7, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecMacAddressAtmBinding.setStatus('current')
lecRouteDescrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8), )
if mibBuilder.loadTexts: lecRouteDescrTable.setStatus('current')
lecRouteDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"), (0, "LAN-EMULATION-CLIENT-MIB", "lecRouteDescrSegmentID"), (0, "LAN-EMULATION-CLIENT-MIB", "lecRouteDescrBridgeNumber"))
if mibBuilder.loadTexts: lecRouteDescrEntry.setStatus('current')
lecRouteDescrSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: lecRouteDescrSegmentID.setStatus('current')
lecRouteDescrBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: lecRouteDescrBridgeNumber.setStatus('current')
lecRouteDescrAtmBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8, 1, 3), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecRouteDescrAtmBinding.setStatus('current')
leArpTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9), )
if mibBuilder.loadTexts: leArpTable.setStatus('current')
leArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"), (0, "LAN-EMULATION-CLIENT-MIB", "leArpMacAddress"))
if mibBuilder.loadTexts: leArpEntry.setStatus('current')
leArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 1), MacAddress())
if mibBuilder.loadTexts: leArpMacAddress.setStatus('current')
leArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 2), AtmLaneAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leArpAtmAddress.setStatus('current')
leArpIsRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leArpIsRemoteAddress.setStatus('current')
leArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 4), LeArpTableEntryType().clone('staticVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leArpEntryType.setStatus('current')
leArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leArpRowStatus.setStatus('current')
leRDArpTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10), )
if mibBuilder.loadTexts: leRDArpTable.setStatus('current')
leRDArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"), (0, "LAN-EMULATION-CLIENT-MIB", "leRDArpSegmentID"), (0, "LAN-EMULATION-CLIENT-MIB", "leRDArpBridgeNumber"))
if mibBuilder.loadTexts: leRDArpEntry.setStatus('current')
leRDArpSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: leRDArpSegmentID.setStatus('current')
leRDArpBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: leRDArpBridgeNumber.setStatus('current')
leRDArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 3), AtmLaneAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leRDArpAtmAddress.setStatus('current')
leRDArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 4), LeArpTableEntryType().clone('staticVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leRDArpEntryType.setStatus('current')
leRDArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leRDArpRowStatus.setStatus('current')
leClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2))
leClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1))
leClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 2))
leClientMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 2, 1)).setObjects(("LAN-EMULATION-CLIENT-MIB", "leClientConfigGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientStatusGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientMappingGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientStatisticsGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientServerVccGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientAtmAddressesGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientMacAddressesGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientArpGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientRouteDescriptorsGroup"), ("LAN-EMULATION-CLIENT-MIB", "leClientRDArpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientMIBCompliance = leClientMIBCompliance.setStatus('current')
leClientConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 1)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecRowStatus"), ("LAN-EMULATION-CLIENT-MIB", "lecOwner"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigMode"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigLanType"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigMaxDataFrameSize"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigLanName"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigLesAtmAddress"), ("LAN-EMULATION-CLIENT-MIB", "lecControlTimeout"), ("LAN-EMULATION-CLIENT-MIB", "lecMaxUnknownFrameCount"), ("LAN-EMULATION-CLIENT-MIB", "lecMaxUnknownFrameTime"), ("LAN-EMULATION-CLIENT-MIB", "lecVccTimeoutPeriod"), ("LAN-EMULATION-CLIENT-MIB", "lecMaxRetryCount"), ("LAN-EMULATION-CLIENT-MIB", "lecAgingTime"), ("LAN-EMULATION-CLIENT-MIB", "lecForwardDelayTime"), ("LAN-EMULATION-CLIENT-MIB", "lecExpectedArpResponseTime"), ("LAN-EMULATION-CLIENT-MIB", "lecFlushTimeOut"), ("LAN-EMULATION-CLIENT-MIB", "lecPathSwitchingDelay"), ("LAN-EMULATION-CLIENT-MIB", "lecLocalSegmentID"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastSendType"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastSendAvgRate"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastSendPeakRate"), ("LAN-EMULATION-CLIENT-MIB", "lecConnectionCompleteTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientConfigGroup = leClientConfigGroup.setStatus('current')
leClientStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 2)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecIfIndex"), ("LAN-EMULATION-CLIENT-MIB", "lecPrimaryAtmAddress"), ("LAN-EMULATION-CLIENT-MIB", "lecID"), ("LAN-EMULATION-CLIENT-MIB", "lecInterfaceState"), ("LAN-EMULATION-CLIENT-MIB", "lecLastFailureRespCode"), ("LAN-EMULATION-CLIENT-MIB", "lecLastFailureState"), ("LAN-EMULATION-CLIENT-MIB", "lecProtocol"), ("LAN-EMULATION-CLIENT-MIB", "lecVersion"), ("LAN-EMULATION-CLIENT-MIB", "lecTopologyChange"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigServerAtmAddress"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigSource"), ("LAN-EMULATION-CLIENT-MIB", "lecActualLanType"), ("LAN-EMULATION-CLIENT-MIB", "lecActualMaxDataFrameSize"), ("LAN-EMULATION-CLIENT-MIB", "lecActualLanName"), ("LAN-EMULATION-CLIENT-MIB", "lecActualLesAtmAddress"), ("LAN-EMULATION-CLIENT-MIB", "lecProxyClient"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientStatusGroup = leClientStatusGroup.setStatus('current')
leClientMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 3)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecMappingIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientMappingGroup = leClientMappingGroup.setStatus('current')
leClientStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 4)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecArpRequestsOut"), ("LAN-EMULATION-CLIENT-MIB", "lecArpRequestsIn"), ("LAN-EMULATION-CLIENT-MIB", "lecArpRepliesOut"), ("LAN-EMULATION-CLIENT-MIB", "lecArpRepliesIn"), ("LAN-EMULATION-CLIENT-MIB", "lecControlFramesOut"), ("LAN-EMULATION-CLIENT-MIB", "lecControlFramesIn"), ("LAN-EMULATION-CLIENT-MIB", "lecSvcFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientStatisticsGroup = leClientStatisticsGroup.setStatus('current')
leClientServerVccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 5)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecConfigDirectInterface"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigDirectVpi"), ("LAN-EMULATION-CLIENT-MIB", "lecConfigDirectVci"), ("LAN-EMULATION-CLIENT-MIB", "lecControlDirectInterface"), ("LAN-EMULATION-CLIENT-MIB", "lecControlDirectVpi"), ("LAN-EMULATION-CLIENT-MIB", "lecControlDirectVci"), ("LAN-EMULATION-CLIENT-MIB", "lecControlDistributeInterface"), ("LAN-EMULATION-CLIENT-MIB", "lecControlDistributeVpi"), ("LAN-EMULATION-CLIENT-MIB", "lecControlDistributeVci"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastSendInterface"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastSendVpi"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastSendVci"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastForwardInterface"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastForwardVpi"), ("LAN-EMULATION-CLIENT-MIB", "lecMulticastForwardVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientServerVccGroup = leClientServerVccGroup.setStatus('current')
leClientAtmAddressesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 6)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecAtmAddressStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientAtmAddressesGroup = leClientAtmAddressesGroup.setStatus('current')
leClientMacAddressesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 7)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecMacAddressAtmBinding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientMacAddressesGroup = leClientMacAddressesGroup.setStatus('current')
leClientRouteDescriptorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 8)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecRouteDescrAtmBinding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientRouteDescriptorsGroup = leClientRouteDescriptorsGroup.setStatus('current')
leClientArpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 9)).setObjects(("LAN-EMULATION-CLIENT-MIB", "leArpAtmAddress"), ("LAN-EMULATION-CLIENT-MIB", "leArpIsRemoteAddress"), ("LAN-EMULATION-CLIENT-MIB", "leArpEntryType"), ("LAN-EMULATION-CLIENT-MIB", "leArpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientArpGroup = leClientArpGroup.setStatus('current')
leClientRDArpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 10)).setObjects(("LAN-EMULATION-CLIENT-MIB", "leRDArpAtmAddress"), ("LAN-EMULATION-CLIENT-MIB", "leRDArpEntryType"), ("LAN-EMULATION-CLIENT-MIB", "leRDArpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    leClientRDArpGroup = leClientRDArpGroup.setStatus('current')
mibBuilder.exportSymbols("LAN-EMULATION-CLIENT-MIB", lecMappingIndex=lecMappingIndex, leClientMappingGroup=leClientMappingGroup, leClientMIBCompliances=leClientMIBCompliances, lecControlTimeout=lecControlTimeout, lecMappingEntry=lecMappingEntry, lecArpRepliesOut=lecArpRepliesOut, lecActualLesAtmAddress=lecActualLesAtmAddress, lecControlFramesOut=lecControlFramesOut, lecAtmAddressEntry=lecAtmAddressEntry, lecArpRepliesIn=lecArpRepliesIn, leClientMIBCompliance=leClientMIBCompliance, lecExpectedArpResponseTime=lecExpectedArpResponseTime, leRDArpEntry=leRDArpEntry, lecMacAddressAtmBinding=lecMacAddressAtmBinding, VciInteger=VciInteger, leClientServerVccGroup=leClientServerVccGroup, leClientMIBConformance=leClientMIBConformance, LecState=LecState, lecMacAddress=lecMacAddress, leRDArpRowStatus=leRDArpRowStatus, lecConfigMode=lecConfigMode, lecMulticastSendPeakRate=lecMulticastSendPeakRate, leClientMIB=leClientMIB, lecForwardDelayTime=lecForwardDelayTime, lecInterfaceState=lecInterfaceState, lecRouteDescrBridgeNumber=lecRouteDescrBridgeNumber, lecActualLanName=lecActualLanName, lecConfigMaxDataFrameSize=lecConfigMaxDataFrameSize, LecDataFrameFormat=LecDataFrameFormat, lecMulticastSendVpi=lecMulticastSendVpi, lecID=lecID, leClientConfigGroup=leClientConfigGroup, lecControlFramesIn=lecControlFramesIn, lecConnectionCompleteTimer=lecConnectionCompleteTimer, lecMappingTable=lecMappingTable, lecControlDistributeInterface=lecControlDistributeInterface, lecMulticastSendVci=lecMulticastSendVci, lecRouteDescrEntry=lecRouteDescrEntry, leArpEntry=leArpEntry, leRDArpAtmAddress=leRDArpAtmAddress, lecLocalSegmentID=lecLocalSegmentID, lecIndex=lecIndex, leArpIsRemoteAddress=leArpIsRemoteAddress, lecRouteDescrSegmentID=lecRouteDescrSegmentID, LecDataFrameSize=LecDataFrameSize, lecConfigLanType=lecConfigLanType, leClientMIBObjects=leClientMIBObjects, lecMaxUnknownFrameCount=lecMaxUnknownFrameCount, lecConfigLesAtmAddress=lecConfigLesAtmAddress, lecConfigTable=lecConfigTable, lecStatisticsEntry=lecStatisticsEntry, lecArpRequestsOut=lecArpRequestsOut, lecProxyClient=lecProxyClient, lecRouteDescrAtmBinding=lecRouteDescrAtmBinding, leClientRouteDescriptorsGroup=leClientRouteDescriptorsGroup, lecServerVccEntry=lecServerVccEntry, lecStatusEntry=lecStatusEntry, LeArpTableEntryType=LeArpTableEntryType, lecConfigEntry=lecConfigEntry, lecActualLanType=lecActualLanType, lecControlDistributeVci=lecControlDistributeVci, lecMacAddressEntry=lecMacAddressEntry, leClientMIBGroups=leClientMIBGroups, lecMaxUnknownFrameTime=lecMaxUnknownFrameTime, lecMulticastForwardInterface=lecMulticastForwardInterface, lecMulticastForwardVpi=lecMulticastForwardVpi, lecControlDirectVci=lecControlDirectVci, leArpRowStatus=leArpRowStatus, lecAtmAddressTable=lecAtmAddressTable, lecArpRequestsIn=lecArpRequestsIn, lecControlDirectInterface=lecControlDirectInterface, leClientStatisticsGroup=leClientStatisticsGroup, lecStatusTable=lecStatusTable, lecConfigDirectVci=lecConfigDirectVci, lecPathSwitchingDelay=lecPathSwitchingDelay, leClientAtmAddressesGroup=leClientAtmAddressesGroup, lecLastFailureRespCode=lecLastFailureRespCode, leArpEntryType=leArpEntryType, lecMulticastSendInterface=lecMulticastSendInterface, leClientStatusGroup=leClientStatusGroup, lecPrimaryAtmAddress=lecPrimaryAtmAddress, VpiInteger=VpiInteger, atmfLanEmulation=atmfLanEmulation, lecFlushTimeOut=lecFlushTimeOut, lecMacAddressTable=lecMacAddressTable, lecMulticastForwardVci=lecMulticastForwardVci, leRDArpEntryType=leRDArpEntryType, lecActualMaxDataFrameSize=lecActualMaxDataFrameSize, leClientMacAddressesGroup=leClientMacAddressesGroup, leArpAtmAddress=leArpAtmAddress, leArpMacAddress=leArpMacAddress, leRDArpBridgeNumber=leRDArpBridgeNumber, lecIfIndex=lecIfIndex, lecMulticastSendType=lecMulticastSendType, lecTopologyChange=lecTopologyChange, lecAtmAddressStatus=lecAtmAddressStatus, lecMaxRetryCount=lecMaxRetryCount, lecConfigDirectInterface=lecConfigDirectInterface, lecMulticastSendAvgRate=lecMulticastSendAvgRate, lecAtmAddress=lecAtmAddress, LeConnectionInterface=LeConnectionInterface, PYSNMP_MODULE_ID=leClientMIB, lecVccTimeoutPeriod=lecVccTimeoutPeriod, lecStatisticsTable=lecStatisticsTable, lecOwner=lecOwner, leClientArpGroup=leClientArpGroup, lecServerVccTable=lecServerVccTable, lecVersion=lecVersion, lecRowStatus=lecRowStatus, leClientRDArpGroup=leClientRDArpGroup, leRDArpTable=leRDArpTable, lecProtocol=lecProtocol, lecConfigDirectVpi=lecConfigDirectVpi, leArpTable=leArpTable, lecLastFailureState=lecLastFailureState, lecControlDistributeVpi=lecControlDistributeVpi, lecConfigServerAtmAddress=lecConfigServerAtmAddress, lecRouteDescrTable=lecRouteDescrTable, leRDArpSegmentID=leRDArpSegmentID, lecSvcFailures=lecSvcFailures, lecAgingTime=lecAgingTime, lecControlDirectVpi=lecControlDirectVpi, AtmLaneAddress=AtmLaneAddress, OwnerString=OwnerString, lecConfigSource=lecConfigSource, lecConfigLanName=lecConfigLanName)
