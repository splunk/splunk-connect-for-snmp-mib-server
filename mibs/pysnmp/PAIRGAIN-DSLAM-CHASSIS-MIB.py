#
# PySNMP MIB module PAIRGAIN-DSLAM-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAIRGAIN-DSLAM-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:27:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
pgDSLAMChassis, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgDSLAMChassis")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Gauge32, Counter64, Integer32, Unsigned32, Bits, ModuleIdentity, ObjectIdentity, TimeTicks, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Gauge32", "Counter64", "Integer32", "Unsigned32", "Bits", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "iso", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class TimeSeconds(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class DisplayString(OctetString):
    pass

class PgDSLAMChassisType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("dslam-co", 2), ("dslam-as5", 3), ("dslam-as3", 4))

class PgDSLAMUnitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 40, 41, 42, 43, 44, 45, 46, 47, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 50, 51, 52, 53, 31, 32, 33, 34, 35, 36, 37, 38, 39))
    namedValues = NamedValues(("unknown", 1), ("management", 2), ("adsl-cap-frame-8", 3), ("adsl-dmt-frame-8", 4), ("adsl-cap-frame-12", 5), ("adsl-dmt-frame-12", 6), ("hdsl-frame-16", 7), ("hdsl-frame-24", 8), ("adsl-cap-cell-8", 9), ("adsl-dmt-cell-8", 10), ("adsl-cap-cell-12", 11), ("adsl-dmt-cell-12", 12), ("atm-oc3-channel-6", 13), ("t1-circuit-emul-12", 14), ("e1-circuit-emul-12", 15), ("ds3-circuit-emul-6", 16), ("e3-circuit-emul-6", 17), ("t1-higain-lu-12", 18), ("atm-oc3-channel", 40), ("t1-dsx1-channel", 41), ("e1-atm-imux-8-channel", 42), ("sdsl-frame-16", 43), ("sdsl-frame-24", 44), ("ds3-atm-channel", 45), ("idsl-frame-24", 46), ("sdsl-cell-24", 47), ("atm-oc3-line", 19), ("ds3-atm-line", 20), ("e3-atm-line", 21), ("ds3-fr-line", 22), ("e3-fr-line", 23), ("ethernet-10-100", 24), ("t1-atm-imux-6", 25), ("e1-atm-imux-6", 26), ("t1-fr-imux-6", 27), ("e1-fr-imux-6", 28), ("atm-oc12-line", 29), ("hissi-line", 30), ("t1-dsx1-line", 50), ("e1-atm-imux-8-line", 51), ("t1-dsx1-linemgmt", 52), ("pot-splitter", 53), ("adsl-cap-frame-test", 31), ("adsl-dmt-frame-test", 32), ("sdsl-frame-test", 33), ("adsl-cap-cell-test", 34), ("adsl-dmt-cell-test", 35), ("sdsl-cell-test", 36), ("circuit-emul-test", 37), ("fr-line-test", 38), ("cell-line-test", 39))

pgDSLAMChassisType = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 1), PgDSLAMChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisType.setStatus('mandatory')
pgDSLAMChassisPsStatus = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("oneFail", 2), ("bothFail", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisPsStatus.setStatus('mandatory')
pgDSLAMChassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("fail", 2), ("ok", 3), ("hightemp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisFanStatus.setStatus('mandatory')
pgDSLAMSlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4), )
if mibBuilder.loadTexts: pgDSLAMSlotConfigTable.setStatus('mandatory')
pgDSLAMSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1), ).setIndexNames((0, "PAIRGAIN-DSLAM-CHASSIS-MIB", "pgDSLAMSlotNumber"))
if mibBuilder.loadTexts: pgDSLAMSlotConfigEntry.setStatus('mandatory')
pgDSLAMSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotNumber.setStatus('mandatory')
pgDSLAMSlotUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 2), PgDSLAMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotUnitType.setStatus('mandatory')
pgDSLAMSlotUnitSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotUnitSerialNo.setStatus('mandatory')
pgDSLAMSlotUnitDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMSlotUnitDescr.setStatus('mandatory')
pgDSLAMSlotHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotHwVer.setStatus('mandatory')
pgDSLAMSlotFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotFwVer.setStatus('mandatory')
pgDSLAMSlotSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotSwVer.setStatus('mandatory')
pgDSLAMSlotBoardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMSlotBoardReset.setStatus('mandatory')
pgDSLAMSlotNmCntlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("nmControl", 2), ("testControl", 3), ("notNmControl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotNmCntlStatus.setStatus('mandatory')
pgDSLAMSlotIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotIfNumber.setStatus('mandatory')
pgDSLAMSlotHwID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotHwID.setStatus('mandatory')
pgDSLAMConfigChangeCnts = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMConfigChangeCnts.setStatus('mandatory')
pgDSLAMConfigLastChange = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMConfigLastChange.setStatus('mandatory')
pgDSLAMChassisAlarmStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7), )
if mibBuilder.loadTexts: pgDSLAMChassisAlarmStatTable.setStatus('mandatory')
dslamAlarmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1), ).setIndexNames((0, "PAIRGAIN-DSLAM-CHASSIS-MIB", "pgDSLAMAlarmCardID"))
if mibBuilder.loadTexts: dslamAlarmStatEntry.setStatus('mandatory')
pgDSLAMAlarmCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAlarmCardID.setStatus('mandatory')
pgDSLAMAlarmPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAlarmPortNum.setStatus('mandatory')
pgDSLAMAlarmStatSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("minor", 2), ("major", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAlarmStatSeverity.setStatus('mandatory')
pgDSLAMAlarmTrapOID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAlarmTrapOID.setStatus('mandatory')
pgDSLAMChassisLEDStat = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisLEDStat.setStatus('mandatory')
pgDSLAMCalendarTime = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMCalendarTime.setStatus('mandatory')
pgDSLAMSlotStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 10), )
if mibBuilder.loadTexts: pgDSLAMSlotStatTable.setStatus('mandatory')
pgDSLAMSlotStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 10, 1), ).setIndexNames((0, "PAIRGAIN-DSLAM-CHASSIS-MIB", "pgDSLAMSlotID"))
if mibBuilder.loadTexts: pgDSLAMSlotStatEntry.setStatus('mandatory')
pgDSLAMSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotID.setStatus('mandatory')
pgDSLAMSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("notPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotStatus.setStatus('mandatory')
pgDSLAMChassisTemperature = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisTemperature.setStatus('mandatory')
pgDSLAMFileDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 12), )
if mibBuilder.loadTexts: pgDSLAMFileDirectoryTable.setStatus('mandatory')
pgDSLAMFileDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 12, 1), ).setIndexNames((0, "PAIRGAIN-DSLAM-CHASSIS-MIB", "pgDSLAMFileDirectorySlotID"))
if mibBuilder.loadTexts: pgDSLAMFileDirectoryEntry.setStatus('mandatory')
pgDSLAMFileDirectorySlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMFileDirectorySlotID.setStatus('mandatory')
pgDSLAMFileDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMFileDirectory.setStatus('mandatory')
pgDSLAMFsSlotID = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFsSlotID.setStatus('mandatory')
pgDSLAMFsFileName = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFsFileName.setStatus('mandatory')
pgDSLAMFsAction = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFsAction.setStatus('mandatory')
pgDSLAMCalendarTimeOs = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMCalendarTimeOs.setStatus('mandatory')
pgDSLAMAllSlotLED = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 568))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAllSlotLED.setStatus('mandatory')
mibBuilder.exportSymbols("PAIRGAIN-DSLAM-CHASSIS-MIB", pgDSLAMAlarmCardID=pgDSLAMAlarmCardID, pgDSLAMAlarmStatSeverity=pgDSLAMAlarmStatSeverity, pgDSLAMSlotIfNumber=pgDSLAMSlotIfNumber, pgDSLAMFsFileName=pgDSLAMFsFileName, pgDSLAMSlotSwVer=pgDSLAMSlotSwVer, pgDSLAMFileDirectoryTable=pgDSLAMFileDirectoryTable, pgDSLAMAlarmTrapOID=pgDSLAMAlarmTrapOID, pgDSLAMSlotStatEntry=pgDSLAMSlotStatEntry, TimeSeconds=TimeSeconds, pgDSLAMSlotConfigEntry=pgDSLAMSlotConfigEntry, pgDSLAMSlotUnitType=pgDSLAMSlotUnitType, pgDSLAMAlarmPortNum=pgDSLAMAlarmPortNum, pgDSLAMCalendarTimeOs=pgDSLAMCalendarTimeOs, pgDSLAMChassisAlarmStatTable=pgDSLAMChassisAlarmStatTable, pgDSLAMFsAction=pgDSLAMFsAction, PgDSLAMUnitType=PgDSLAMUnitType, pgDSLAMSlotHwID=pgDSLAMSlotHwID, pgDSLAMFileDirectorySlotID=pgDSLAMFileDirectorySlotID, PgDSLAMChassisType=PgDSLAMChassisType, pgDSLAMChassisFanStatus=pgDSLAMChassisFanStatus, pgDSLAMSlotHwVer=pgDSLAMSlotHwVer, pgDSLAMConfigLastChange=pgDSLAMConfigLastChange, pgDSLAMChassisPsStatus=pgDSLAMChassisPsStatus, pgDSLAMSlotUnitSerialNo=pgDSLAMSlotUnitSerialNo, pgDSLAMSlotUnitDescr=pgDSLAMSlotUnitDescr, pgDSLAMSlotNumber=pgDSLAMSlotNumber, pgDSLAMSlotConfigTable=pgDSLAMSlotConfigTable, pgDSLAMSlotBoardReset=pgDSLAMSlotBoardReset, DisplayString=DisplayString, pgDSLAMChassisTemperature=pgDSLAMChassisTemperature, pgDSLAMAllSlotLED=pgDSLAMAllSlotLED, pgDSLAMFsSlotID=pgDSLAMFsSlotID, pgDSLAMConfigChangeCnts=pgDSLAMConfigChangeCnts, pgDSLAMFileDirectory=pgDSLAMFileDirectory, pgDSLAMSlotID=pgDSLAMSlotID, pgDSLAMSlotNmCntlStatus=pgDSLAMSlotNmCntlStatus, pgDSLAMChassisLEDStat=pgDSLAMChassisLEDStat, pgDSLAMChassisType=pgDSLAMChassisType, dslamAlarmStatEntry=dslamAlarmStatEntry, pgDSLAMSlotStatus=pgDSLAMSlotStatus, pgDSLAMSlotStatTable=pgDSLAMSlotStatTable, pgDSLAMSlotFwVer=pgDSLAMSlotFwVer, pgDSLAMFileDirectoryEntry=pgDSLAMFileDirectoryEntry, pgDSLAMCalendarTime=pgDSLAMCalendarTime)
