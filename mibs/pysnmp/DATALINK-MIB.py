#
# PySNMP MIB module DATALINK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DATALINK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, Integer32, NotificationType, enterprises, TimeTicks, Unsigned32, ModuleIdentity, ObjectIdentity, IpAddress, internet, Gauge32, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, private, mgmt, Counter32, ObjectName, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Integer32", "NotificationType", "enterprises", "TimeTicks", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "internet", "Gauge32", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "private", "mgmt", "Counter32", "ObjectName", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
asentria = MibIdentifier((1, 3, 6, 1, 4, 1, 3052))
datalink = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1))
productIds = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 1))
productConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 2))
unitIds = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 3))
serialPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 4))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 5))
snmpsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 6))
passwords = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 7))
ftpsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 8))
databases = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 10))
actions = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 11))
controls = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12))
alarmhistory = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 13))
realtimesocket = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 14))
iprestrictions = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 15))
ipsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 16))
pppsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 17))
ccode = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 18))
techsupport = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 99))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4))
factorysetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5))
commandPassword = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 7, 5))
entireDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1))
databaseStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1))
databaseFiles = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2))
filesetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1))
nodataAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3))
nodataAlarmHolidays = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3))
actionsBuzzer = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 11, 1))
actionsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 11, 5))
opSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1))
auxportMode = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6))
inlineHskMode = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 4))
modemSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2))
dataRelease = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 3))
otherControls = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4))
ftpPush = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3))
actionQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1))
actionHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2))
ipCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1))
ipNew = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2))
pppIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 17, 1))
datalinkThisProduct = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datalinkThisProduct.setStatus('mandatory')
productname = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productname.setStatus('mandatory')
systemversion = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemversion.setStatus('mandatory')
appversion = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appversion.setStatus('mandatory')
numberports = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberports.setStatus('mandatory')
netcard = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netcard.setStatus('mandatory')
modems = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modems.setStatus('mandatory')
networkenabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkenabled.setStatus('mandatory')
memorysize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorysize.setStatus('mandatory')
modemreport = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemreport.setStatus('mandatory')
modemportspeed = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemportspeed.setStatus('mandatory')
modemsetupstring = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemsetupstring.setStatus('mandatory')
modemcddelay = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemcddelay.setStatus('mandatory')
modemtype = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemtype.setStatus('mandatory')
serialnumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialnumber.setStatus('mandatory')
dateofmanufacture = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateofmanufacture.setStatus('mandatory')
databasemode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databasemode.setStatus('mandatory')
datalinkSiteId = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datalinkSiteId.setStatus('mandatory')
idByPortTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 3, 2), )
if mibBuilder.loadTexts: idByPortTable.setStatus('mandatory')
sitebyport = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 3, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "siteindex"))
if mibBuilder.loadTexts: sitebyport.setStatus('mandatory')
siteindex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteindex.setStatus('mandatory')
siteID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteID.setStatus('mandatory')
numberPorts = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberPorts.setStatus('mandatory')
portSetupTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2), )
if mibBuilder.loadTexts: portSetupTable.setStatus('mandatory')
portSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "portIndex"))
if mibBuilder.loadTexts: portSetupEntry.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaud.setStatus('mandatory')
portWord = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portWord.setStatus('mandatory')
portParity = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('mandatory')
portStopbits = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopbits.setStatus('mandatory')
portDataStore = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataStore.setStatus('mandatory')
portBinaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBinaryMode.setStatus('mandatory')
portWrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portWrapMode.setStatus('mandatory')
portHskMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHskMode.setStatus('mandatory')
portDateTimeStampMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDateTimeStampMode.setStatus('mandatory')
portPTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPTMode.setStatus('mandatory')
portPTTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPTTime.setStatus('mandatory')
portStoreFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStoreFile.setStatus('mandatory')
portPtStripOutputLfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPtStripOutputLfs.setStatus('mandatory')
portPtStripInputLfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPtStripInputLfs.setStatus('mandatory')
portlowDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portlowDTR.setStatus('mandatory')
currenttime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currenttime.setStatus('mandatory')
autoDstAdjust = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoDstAdjust.setStatus('mandatory')
snmpTrapsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsEnabled.setStatus('mandatory')
snmpManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2), )
if mibBuilder.loadTexts: snmpManagerTable.setStatus('mandatory')
snmpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "snmpMgrIndex"))
if mibBuilder.loadTexts: snmpTableEntry.setStatus('mandatory')
snmpMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpMgrIndex.setStatus('mandatory')
snmpManagerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerIp.setStatus('mandatory')
snmpManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerName.setStatus('mandatory')
snmpTrapsAutoRepeatTime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsAutoRepeatTime.setStatus('mandatory')
snmpSendTestTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSendTestTrap.setStatus('mandatory')
modemPasswords = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemPasswords.setStatus('mandatory')
tcpPasswords = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPasswords.setStatus('mandatory')
ftpPasswords = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPasswords.setStatus('mandatory')
promptPasswords = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promptPasswords.setStatus('mandatory')
commandNeedsPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandNeedsPassword.setStatus('mandatory')
commandPasswordTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandPasswordTimeout.setStatus('mandatory')
passwordTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6), )
if mibBuilder.loadTexts: passwordTable.setStatus('mandatory')
passwordTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6, 1), ).setIndexNames((0, "DATALINK-MIB", "passwordIndex"))
if mibBuilder.loadTexts: passwordTableEntry.setStatus('mandatory')
passwordIndex = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passwordIndex.setStatus('mandatory')
passwordCommand = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordCommand.setStatus('mandatory')
passwordAccess = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordAccess.setStatus('mandatory')
ftpAutoDelete = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpAutoDelete.setStatus('mandatory')
ftpDataMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpDataMode.setStatus('mandatory')
ftpPushEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushEnabled.setStatus('mandatory')
ftpPushTiming = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushTiming.setStatus('mandatory')
ftpPushTimer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushTimer.setStatus('mandatory')
ftpPushIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushIPAddress.setStatus('mandatory')
ftpPushUser = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushUser.setStatus('mandatory')
ftpPushPass = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPass.setStatus('mandatory')
ftpPushAcct = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushAcct.setStatus('mandatory')
ftpPushDir = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushDir.setStatus('mandatory')
ftppushTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 9), )
if mibBuilder.loadTexts: ftppushTable.setStatus('mandatory')
ftppushTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 9, 1), ).setIndexNames((0, "DATALINK-MIB", "ftppushIndex"))
if mibBuilder.loadTexts: ftppushTableEntry.setStatus('mandatory')
ftppushIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftppushIndex.setStatus('mandatory')
ftppushEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftppushEnable.setStatus('mandatory')
ftpPushAlarms = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushAlarms.setStatus('mandatory')
ftpPushCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPushCount.setStatus('mandatory')
ftpPushStatusMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushStatusMode.setStatus('mandatory')
ftpPushServerName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushServerName.setStatus('mandatory')
databasePfull = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databasePfull.setStatus('mandatory')
databaseSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseSize.setStatus('mandatory')
databaseRecordsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseRecordsAvailable.setStatus('mandatory')
databaseRecordsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseRecordsDeleted.setStatus('mandatory')
databaseAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2), )
if mibBuilder.loadTexts: databaseAlarmTable.setStatus('mandatory')
databaseAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "databaseAlarmIndex"))
if mibBuilder.loadTexts: databaseAlarmEntry.setStatus('mandatory')
databaseAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseAlarmIndex.setStatus('mandatory')
databaseAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmActive.setStatus('mandatory')
databaseAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmThreshold.setStatus('mandatory')
databaseAlarmBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmBeeperActions.setStatus('mandatory')
databaseAlarmSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmSerialActions.setStatus('mandatory')
databaseAlarmPagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmPagerActions.setStatus('mandatory')
databaseAlarmCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmCalloutActions.setStatus('mandatory')
databaseAlarmTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmTrapActions.setStatus('mandatory')
databaseAlarmFileStore = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmFileStore.setStatus('mandatory')
databaseAlarmFileMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmFileMaxSize.setStatus('mandatory')
charmaskEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charmaskEnabled.setStatus('mandatory')
charmask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charmask.setStatus('mandatory')
maxRecordChars = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxRecordChars.setStatus('mandatory')
binRecordBlocking = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: binRecordBlocking.setStatus('mandatory')
recordCollectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recordCollectionTimeout.setStatus('mandatory')
fileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2), )
if mibBuilder.loadTexts: fileTable.setStatus('mandatory')
fileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "fileTableIndex"))
if mibBuilder.loadTexts: fileTableEntry.setStatus('mandatory')
fileTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileTableIndex.setStatus('mandatory')
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileName.setStatus('mandatory')
fileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileType.setStatus('mandatory')
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSize.setStatus('mandatory')
fileRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileRecords.setStatus('mandatory')
fileRecordsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileRecordsAvailable.setStatus('mandatory')
fileRecordsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileRecordsDeleted.setStatus('mandatory')
filePercentNow = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filePercentNow.setStatus('mandatory')
fileAlarms = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3), )
if mibBuilder.loadTexts: fileAlarms.setStatus('mandatory')
fileAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1), ).setIndexNames((0, "DATALINK-MIB", "fileAlarmFileIndex"), (0, "DATALINK-MIB", "fileAlarmThreshold"))
if mibBuilder.loadTexts: fileAlarmEntry.setStatus('mandatory')
fileAlarmFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileAlarmFileIndex.setStatus('mandatory')
fileAlarmThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileAlarmThresholdIndex.setStatus('mandatory')
fileAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmActive.setStatus('mandatory')
fileAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmThreshold.setStatus('mandatory')
fileAlarmBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmBeeperActions.setStatus('mandatory')
fileAlarmSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmSerialActions.setStatus('mandatory')
fileAlarmPagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmPagerActions.setStatus('mandatory')
fileAlarmCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmCalloutActions.setStatus('mandatory')
fileAlarmTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmTrapActions.setStatus('mandatory')
dataAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1), )
if mibBuilder.loadTexts: dataAlarmTable.setStatus('mandatory')
dataAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1), ).setIndexNames((0, "DATALINK-MIB", "dataAlarmIndex"))
if mibBuilder.loadTexts: dataAlarmEntry.setStatus('mandatory')
dataAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmIndex.setStatus('mandatory')
dataAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmActive.setStatus('mandatory')
dataAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmName.setStatus('mandatory')
dataAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmCounter.setStatus('mandatory')
dataAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmThreshold.setStatus('mandatory')
dataAlarmClearMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmClearMode.setStatus('mandatory')
dataAlarmClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmClearTime.setStatus('mandatory')
dataAlarmAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataAlarmAcked.setStatus('mandatory')
dataAlarmBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmBeeperActions.setStatus('mandatory')
dataAlarmSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmSerialActions.setStatus('mandatory')
dataAlarmPagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmPagerActions.setStatus('mandatory')
dataAlarmCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmCalloutActions.setStatus('mandatory')
dataAlarmTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmTrapActions.setStatus('mandatory')
dataAlarmString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmString.setStatus('mandatory')
dataAlarmPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmPort.setStatus('mandatory')
dataAlarmAutoClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmAutoClear.setStatus('mandatory')
sensorAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2), )
if mibBuilder.loadTexts: sensorAlarmTable.setStatus('mandatory')
sensorAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "sensorAlarmIndex"))
if mibBuilder.loadTexts: sensorAlarmEntry.setStatus('mandatory')
sensorAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAlarmIndex.setStatus('mandatory')
sensorAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmActive.setStatus('mandatory')
sensorAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmName.setStatus('mandatory')
sensorAlarmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmMode.setStatus('mandatory')
sensorAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmCounter.setStatus('mandatory')
sensorAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmThreshold.setStatus('mandatory')
sensorAlarmAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmAcked.setStatus('mandatory')
sensorAlarmBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmBeeperActions.setStatus('mandatory')
sensorAlarmSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmSerialActions.setStatus('mandatory')
sensorAlarmPagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmPagerActions.setStatus('mandatory')
sensorAlarmCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmCalloutActions.setStatus('mandatory')
sensorAlarmTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmTrapActions.setStatus('mandatory')
sensorAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAlarmState.setStatus('mandatory')
nodataAlarmStatus = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1), )
if mibBuilder.loadTexts: nodataAlarmStatus.setStatus('mandatory')
nodataAlarmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1, 1), ).setIndexNames((0, "DATALINK-MIB", "nodataAlarmStatusIndex"))
if mibBuilder.loadTexts: nodataAlarmStatusEntry.setStatus('mandatory')
nodataAlarmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodataAlarmStatusIndex.setStatus('mandatory')
nodataAlarmStatusCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataAlarmStatusCounter.setStatus('mandatory')
nodataAlarmStatusAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataAlarmStatusAcked.setStatus('mandatory')
nodataTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2), )
if mibBuilder.loadTexts: nodataTable.setStatus('mandatory')
nodataTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "nodataTablePortIndex"), (0, "DATALINK-MIB", "nodataTableScheduleIndex"), (0, "DATALINK-MIB", "nodataTableLevelIndex"))
if mibBuilder.loadTexts: nodataTableEntry.setStatus('mandatory')
nodataTablePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: nodataTablePortIndex.setStatus('mandatory')
nodataTableScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: nodataTableScheduleIndex.setStatus('mandatory')
nodataTableLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: nodataTableLevelIndex.setStatus('mandatory')
nodataTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableActive.setStatus('mandatory')
nodataTableSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableSchedule.setStatus('mandatory')
nodataTableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableThreshold.setStatus('mandatory')
nodataTableBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableBeeperActions.setStatus('mandatory')
nodataTableSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableSerialActions.setStatus('mandatory')
nodataTablePagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTablePagerActions.setStatus('mandatory')
nodataTableCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableCalloutActions.setStatus('mandatory')
nodataTableTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableTrapActions.setStatus('mandatory')
nodataNumberHolidays = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodataNumberHolidays.setStatus('mandatory')
nodataHolidayTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 2), )
if mibBuilder.loadTexts: nodataHolidayTable.setStatus('mandatory')
nodataHolidayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "nodataHolidayIndex"))
if mibBuilder.loadTexts: nodataHolidayTableEntry.setStatus('mandatory')
nodataHolidayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodataHolidayIndex.setStatus('mandatory')
nodataHolidayItem = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodataHolidayItem.setStatus('mandatory')
nodataHolidayAdd = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataHolidayAdd.setStatus('mandatory')
nodataHolidayDelete = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataHolidayDelete.setStatus('mandatory')
nodataHolidayClear = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataHolidayClear.setStatus('mandatory')
scheduleAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4), )
if mibBuilder.loadTexts: scheduleAlarmTable.setStatus('mandatory')
scheduleAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1), ).setIndexNames((0, "DATALINK-MIB", "scheduleIndex"))
if mibBuilder.loadTexts: scheduleAlarmEntry.setStatus('mandatory')
scheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scheduleIndex.setStatus('mandatory')
scheduleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleActive.setStatus('mandatory')
scheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleTime.setStatus('mandatory')
scheduleAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleAcked.setStatus('mandatory')
scheduleBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleBeeperActions.setStatus('mandatory')
scheduleSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleSerialActions.setStatus('mandatory')
schedulePagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePagerActions.setStatus('mandatory')
scheduleCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleCalloutActions.setStatus('mandatory')
scheduleTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleTrapActions.setStatus('mandatory')
actionsBuzzerState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionsBuzzerState.setStatus('mandatory')
actionsSerialTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 11, 2), )
if mibBuilder.loadTexts: actionsSerialTable.setStatus('mandatory')
actionsSerialTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 11, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "serialTableIndex"))
if mibBuilder.loadTexts: actionsSerialTableEntry.setStatus('mandatory')
serialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialTableIndex.setStatus('mandatory')
serialTableMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialTableMessage.setStatus('mandatory')
actionsPagerTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3), )
if mibBuilder.loadTexts: actionsPagerTable.setStatus('mandatory')
actionsPagerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1), ).setIndexNames((0, "DATALINK-MIB", "pagerTableIndex"))
if mibBuilder.loadTexts: actionsPagerTableEntry.setStatus('mandatory')
pagerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagerTableIndex.setStatus('mandatory')
pagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerType.setStatus('mandatory')
pagerPhonenumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerPhonenumber.setStatus('mandatory')
pagerID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerID.setStatus('mandatory')
pagerDialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerDialDelay.setStatus('mandatory')
pagerHangupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerHangupDelay.setStatus('mandatory')
pagerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerMessage.setStatus('mandatory')
pagerSendId = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerSendId.setStatus('mandatory')
pagerSendReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerSendReason.setStatus('mandatory')
pagerMaxAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerMaxAttempts.setStatus('mandatory')
pagerAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerAttempts.setStatus('mandatory')
pagerAttemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerAttemptDelay.setStatus('mandatory')
pagerRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerRepeat.setStatus('mandatory')
pagerRepeatDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerRepeatDelay.setStatus('mandatory')
actionsCalloutTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4), )
if mibBuilder.loadTexts: actionsCalloutTable.setStatus('mandatory')
actionsCalloutTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1), ).setIndexNames((0, "DATALINK-MIB", "calloutTableIndex"))
if mibBuilder.loadTexts: actionsCalloutTableEntry.setStatus('mandatory')
calloutTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calloutTableIndex.setStatus('mandatory')
calloutPhonenumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutPhonenumber.setStatus('mandatory')
calloutMaxConnecttime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutMaxConnecttime.setStatus('mandatory')
calloutMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutMessage.setStatus('mandatory')
calloutSendId = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutSendId.setStatus('mandatory')
calloutSendReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutSendReason.setStatus('mandatory')
calloutCommandWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutCommandWait.setStatus('mandatory')
calloutMaxAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutMaxAttempts.setStatus('mandatory')
calloutAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutAttempts.setStatus('mandatory')
calloutAttemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutAttemptDelay.setStatus('mandatory')
calloutRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutRepeat.setStatus('mandatory')
calloutRepeatDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutRepeatDelay.setStatus('mandatory')
actionsTrapsEntSpecific = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 11, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionsTrapsEntSpecific.setStatus('mandatory')
actionsTrapsEntSpecCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 11, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionsTrapsEntSpecCount.setStatus('mandatory')
linefeeds = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linefeeds.setStatus('mandatory')
duplex = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duplex.setStatus('mandatory')
response = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: response.setStatus('mandatory')
datafilterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datafilterEnabled.setStatus('mandatory')
alarmfilterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmfilterEnabled.setStatus('mandatory')
operatingMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatingMode.setStatus('mandatory')
inlineMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineMode.setStatus('mandatory')
inlineSource = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineSource.setStatus('mandatory')
inlineHsk2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineHsk2.setStatus('mandatory')
inlineHsk4 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineHsk4.setStatus('mandatory')
inlineHsk6 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineHsk6.setStatus('mandatory')
sureEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sureEnabled.setStatus('mandatory')
commandTcpipTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandTcpipTimeout.setStatus('mandatory')
sysadminTcpipTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysadminTcpipTimeout.setStatus('mandatory')
bypassEndchar = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bypassEndchar.setStatus('mandatory')
routerAutoPing = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerAutoPing.setStatus('mandatory')
modemParity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemParity.setStatus('mandatory')
modemUserSetup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemUserSetup.setStatus('mandatory')
modemTapSetup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemTapSetup.setStatus('mandatory')
modemAnswerString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAnswerString.setStatus('mandatory')
modemExtSetup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemExtSetup.setStatus('mandatory')
modemExtSetupTime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemExtSetupTime.setStatus('mandatory')
modemInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemInactivityTimer.setStatus('mandatory')
modemAutoexecString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAutoexecString.setStatus('mandatory')
modemAutoexecEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAutoexecEnabled.setStatus('mandatory')
modemTimeBetweenOutbound = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemTimeBetweenOutbound.setStatus('mandatory')
releaseMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: releaseMode.setStatus('mandatory')
autodeleteEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autodeleteEnable.setStatus('mandatory')
releaseCompressed = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: releaseCompressed.setStatus('mandatory')
waitMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waitMode.setStatus('mandatory')
tagMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tagMode.setStatus('mandatory')
crcMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crcMode.setStatus('mandatory')
dleMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dleMode.setStatus('mandatory')
cbbRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbbRetransmits.setStatus('mandatory')
cbbTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbbTimeout.setStatus('mandatory')
activeDatabase = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDatabase.setStatus('mandatory')
actionCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionCount.setStatus('mandatory')
actionTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2), )
if mibBuilder.loadTexts: actionTable.setStatus('mandatory')
actionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "actionTableIndex"))
if mibBuilder.loadTexts: actionTableEntry.setStatus('mandatory')
actionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionTableIndex.setStatus('mandatory')
actionAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionAcked.setStatus('mandatory')
actionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionReason.setStatus('mandatory')
actionReasonID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionReasonID.setStatus('mandatory')
actionReasonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionReasonLevel.setStatus('mandatory')
actionType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionType.setStatus('mandatory')
actionTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionTypeID.setStatus('mandatory')
actionRepeatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionRepeatTime.setStatus('mandatory')
actionAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionAttempts.setStatus('mandatory')
actionNextAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionNextAttempt.setStatus('mandatory')
actionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionTimeStamp.setStatus('mandatory')
historyCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyCount.setStatus('mandatory')
historyTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2), )
if mibBuilder.loadTexts: historyTable.setStatus('mandatory')
historyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "historyTableIndex"))
if mibBuilder.loadTexts: historyTableEntry.setStatus('mandatory')
historyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTableIndex.setStatus('mandatory')
historyEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: historyEntryType.setStatus('mandatory')
historyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyReason.setStatus('mandatory')
historyReasonID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyReasonID.setStatus('mandatory')
historyReasonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyReasonLevel.setStatus('mandatory')
historyType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyType.setStatus('mandatory')
historyTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTypeID.setStatus('mandatory')
historyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTimeStamp.setStatus('mandatory')
historyClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: historyClearLog.setStatus('mandatory')
lastCalloutPageReason = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 13, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCalloutPageReason.setStatus('mandatory')
rtsShowAnswer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsShowAnswer.setStatus('deprecated')
rtsNeedPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsNeedPassword.setStatus('deprecated')
rtsWaitXon = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsWaitXon.setStatus('deprecated')
rtsIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsIdleTimeout.setStatus('deprecated')
rtsEmptyClose = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsEmptyClose.setStatus('deprecated')
rtsTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6), )
if mibBuilder.loadTexts: rtsTable.setStatus('mandatory')
rtsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1), ).setIndexNames((0, "DATALINK-MIB", "rtsTableIndex"))
if mibBuilder.loadTexts: rtsTableEntry.setStatus('mandatory')
rtsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsTableIndex.setStatus('mandatory')
rtsNoStore = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsNoStore.setStatus('mandatory')
rtsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsDenied.setStatus('mandatory')
rtsSocketState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsSocketState.setStatus('mandatory')
rtsPortShowAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsPortShowAnswer.setStatus('mandatory')
rtsPortNeedPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsPortNeedPassword.setStatus('mandatory')
rtsPortWaitXon = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsPortWaitXon.setStatus('mandatory')
rtsPortIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsPortIdleTimeout.setStatus('mandatory')
rtsPortEmptyClose = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsPortEmptyClose.setStatus('mandatory')
iprestrictTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 15, 1), )
if mibBuilder.loadTexts: iprestrictTable.setStatus('mandatory')
iprestrictTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 15, 1, 1), ).setIndexNames((0, "DATALINK-MIB", "iprestrictTableIndex"))
if mibBuilder.loadTexts: iprestrictTableEntry.setStatus('mandatory')
iprestrictTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iprestrictTableIndex.setStatus('mandatory')
iprestrictIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 15, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iprestrictIpAddress.setStatus('mandatory')
suspendIPRestrictions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suspendIPRestrictions.setStatus('mandatory')
killIPRestrictions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: killIPRestrictions.setStatus('mandatory')
addIPRestrictions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 15, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addIPRestrictions.setStatus('mandatory')
ipCurrentStatic = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurrentStatic.setStatus('mandatory')
ipCurrentAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurrentAddress.setStatus('mandatory')
ipCurrentSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurrentSubnetMask.setStatus('mandatory')
ipCurrentDefaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurrentDefaultRouter.setStatus('mandatory')
ipNewStatic = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewStatic.setStatus('mandatory')
ipNewAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewAddress.setStatus('mandatory')
ipNewSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewSubnetMask.setStatus('mandatory')
ipNewDefaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewDefaultRouter.setStatus('mandatory')
ipNewSetup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewSetup.setStatus('mandatory')
pppIDString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppIDString.setStatus('mandatory')
pppIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIPAddress.setStatus('mandatory')
ccodeLoaded = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeLoaded.setStatus('mandatory')
ccodeRunning = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeRunning.setStatus('mandatory')
ccodeStackMainWas = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeStackMainWas.setStatus('mandatory')
ccodeStackMainNow = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeStackMainNow.setStatus('mandatory')
ccodeStackT2Was = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeStackT2Was.setStatus('mandatory')
ccodeStackT2Was2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeStackT2Was2.setStatus('mandatory')
techsupportInt1 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt1.setStatus('mandatory')
techsupportInt2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt2.setStatus('mandatory')
techsupportInt3 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt3.setStatus('mandatory')
techsupportInt4 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt4.setStatus('mandatory')
techsupportInt5 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt5.setStatus('mandatory')
datalinkDbasePfullTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,501)).setObjects(("DATALINK-MIB", "databaseAlarmIndex"), ("DATALINK-MIB", "databasePfull"))
datalinkFilePfullTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,502)).setObjects(("DATALINK-MIB", "fileAlarmFileIndex"), ("DATALINK-MIB", "fileAlarmThresholdIndex"), ("DATALINK-MIB", "filePercentNow"))
datalinkDataAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,503)).setObjects(("DATALINK-MIB", "dataAlarmIndex"), ("DATALINK-MIB", "dataAlarmName"), ("DATALINK-MIB", "dataAlarmString"), ("DATALINK-MIB", "dataAlarmPort"))
datalinkSensorAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,504)).setObjects(("DATALINK-MIB", "sensorAlarmIndex"), ("DATALINK-MIB", "sensorAlarmName"), ("DATALINK-MIB", "sensorAlarmState"))
datalinkNoDataAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,505)).setObjects(("DATALINK-MIB", "nodataTablePortIndex"), ("DATALINK-MIB", "nodataTableScheduleIndex"), ("DATALINK-MIB", "nodataTableLevelIndex"), ("DATALINK-MIB", "nodataAlarmStatusCounter"), ("DATALINK-MIB", "nodataTableThreshold"))
datalinkSchedTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,506)).setObjects(("DATALINK-MIB", "scheduleIndex"))
datalinkImmediateTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,507))
datalinkPPPupTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,509)).setObjects(("DATALINK-MIB", "pppIDString"), ("DATALINK-MIB", "pppIPAddress"))
mibBuilder.exportSymbols("DATALINK-MIB", tcpPasswords=tcpPasswords, modemInactivityTimer=modemInactivityTimer, modems=modems, nodataTableThreshold=nodataTableThreshold, databaseAlarmTrapActions=databaseAlarmTrapActions, inlineMode=inlineMode, response=response, datalinkDataAlarmTrap=datalinkDataAlarmTrap, portParity=portParity, nodataTableEntry=nodataTableEntry, historyTable=historyTable, charmaskEnabled=charmaskEnabled, rtsTableEntry=rtsTableEntry, dataAlarmTable=dataAlarmTable, databaseStatus=databaseStatus, nodataTablePagerActions=nodataTablePagerActions, ipCurrentAddress=ipCurrentAddress, portWrapMode=portWrapMode, calloutRepeat=calloutRepeat, netcard=netcard, databaseAlarmIndex=databaseAlarmIndex, actionAcked=actionAcked, databaseAlarmTable=databaseAlarmTable, scheduleCalloutActions=scheduleCalloutActions, ftpDataMode=ftpDataMode, schedulePagerActions=schedulePagerActions, nodataTableSchedule=nodataTableSchedule, portSetupTable=portSetupTable, dataAlarmCalloutActions=dataAlarmCalloutActions, scheduleAcked=scheduleAcked, serialPorts=serialPorts, ftpPushAlarms=ftpPushAlarms, actionsBuzzerState=actionsBuzzerState, dataAlarmEntry=dataAlarmEntry, ccode=ccode, datalinkFilePfullTrap=datalinkFilePfullTrap, dataAlarmBeeperActions=dataAlarmBeeperActions, suspendIPRestrictions=suspendIPRestrictions, networkenabled=networkenabled, scheduleSerialActions=scheduleSerialActions, memorysize=memorysize, fileRecordsAvailable=fileRecordsAvailable, operatingMode=operatingMode, modemParity=modemParity, modemPasswords=modemPasswords, ftppushTableEntry=ftppushTableEntry, actionsPagerTable=actionsPagerTable, rtsShowAnswer=rtsShowAnswer, productIds=productIds, snmpSendTestTrap=snmpSendTestTrap, appversion=appversion, portSetupEntry=portSetupEntry, sensorAlarmAcked=sensorAlarmAcked, ccodeStackMainNow=ccodeStackMainNow, ftppushIndex=ftppushIndex, techsupportInt2=techsupportInt2, datalinkSiteId=datalinkSiteId, bypassEndchar=bypassEndchar, scheduleAlarmEntry=scheduleAlarmEntry, modemTapSetup=modemTapSetup, actionType=actionType, alarms=alarms, scheduleTime=scheduleTime, historyClearLog=historyClearLog, techsupportInt4=techsupportInt4, nodataTableSerialActions=nodataTableSerialActions, dataAlarmName=dataAlarmName, cbbTimeout=cbbTimeout, ftpPushTiming=ftpPushTiming, fileName=fileName, filesetup=filesetup, modemTimeBetweenOutbound=modemTimeBetweenOutbound, portlowDTR=portlowDTR, idByPortTable=idByPortTable, historyTableEntry=historyTableEntry, snmpMgrIndex=snmpMgrIndex, actionNextAttempt=actionNextAttempt, rtsTableIndex=rtsTableIndex, sensorAlarmPagerActions=sensorAlarmPagerActions, portStoreFile=portStoreFile, databaseRecordsAvailable=databaseRecordsAvailable, databaseAlarmFileStore=databaseAlarmFileStore, autoDstAdjust=autoDstAdjust, cbbRetransmits=cbbRetransmits, snmpTrapsAutoRepeatTime=snmpTrapsAutoRepeatTime, historyCount=historyCount, serialTableMessage=serialTableMessage, nodataTable=nodataTable, pagerSendReason=pagerSendReason, datalink=datalink, asentria=asentria, modemAutoexecString=modemAutoexecString, sensorAlarmState=sensorAlarmState, ftpPushIPAddress=ftpPushIPAddress, pagerRepeatDelay=pagerRepeatDelay, actionTable=actionTable, pagerType=pagerType, databaseAlarmActive=databaseAlarmActive, opSettings=opSettings, ccodeStackMainWas=ccodeStackMainWas, databases=databases, portHskMode=portHskMode, fileAlarmActive=fileAlarmActive, numberPorts=numberPorts, ccodeStackT2Was2=ccodeStackT2Was2, sensorAlarmSerialActions=sensorAlarmSerialActions, databaseAlarmBeeperActions=databaseAlarmBeeperActions, ipNewSubnetMask=ipNewSubnetMask, otherControls=otherControls, dataAlarmClearTime=dataAlarmClearTime, fileSize=fileSize, modemportspeed=modemportspeed, dataAlarmTrapActions=dataAlarmTrapActions, actionTableIndex=actionTableIndex, entireDatabase=entireDatabase, historyTimeStamp=historyTimeStamp, datalinkImmediateTrap=datalinkImmediateTrap, sensorAlarmCounter=sensorAlarmCounter, portBaud=portBaud, commandPassword=commandPassword, dataRelease=dataRelease, tagMode=tagMode, modemsetupstring=modemsetupstring, dataAlarmCounter=dataAlarmCounter, alarmfilterEnabled=alarmfilterEnabled, ftpAutoDelete=ftpAutoDelete, historyReason=historyReason, pagerRepeat=pagerRepeat, portDateTimeStampMode=portDateTimeStampMode, nodataHolidayItem=nodataHolidayItem, passwordTable=passwordTable, nodataHolidayDelete=nodataHolidayDelete, sensorAlarmMode=sensorAlarmMode, fileTableEntry=fileTableEntry, calloutMaxAttempts=calloutMaxAttempts, alarmhistory=alarmhistory, ftpPushTimer=ftpPushTimer, datalinkThisProduct=datalinkThisProduct, iprestrictTableIndex=iprestrictTableIndex, ftpPushEnabled=ftpPushEnabled, activeDatabase=activeDatabase, ftpPushAcct=ftpPushAcct, nodataHolidayIndex=nodataHolidayIndex, historyTypeID=historyTypeID, dataAlarmPort=dataAlarmPort, pagerSendId=pagerSendId, realtimesocket=realtimesocket, fileAlarmThresholdIndex=fileAlarmThresholdIndex, nodataTableLevelIndex=nodataTableLevelIndex, routerAutoPing=routerAutoPing, snmpManagerName=snmpManagerName, iprestrictions=iprestrictions, nodataTableCalloutActions=nodataTableCalloutActions, pagerDialDelay=pagerDialDelay, numberports=numberports, dataAlarmThreshold=dataAlarmThreshold, rtsNeedPassword=rtsNeedPassword, modemExtSetupTime=modemExtSetupTime, rtsEmptyClose=rtsEmptyClose, actionHistory=actionHistory, actionTimeStamp=actionTimeStamp, modemSettings=modemSettings, ipCurrent=ipCurrent, inlineSource=inlineSource, nodataAlarmStatusIndex=nodataAlarmStatusIndex, portPTMode=portPTMode, nodataAlarmStatusAcked=nodataAlarmStatusAcked, sensorAlarmEntry=sensorAlarmEntry, datalinkNoDataAlarmTrap=datalinkNoDataAlarmTrap, pagerTableIndex=pagerTableIndex, historyReasonLevel=historyReasonLevel, nodataHolidayTableEntry=nodataHolidayTableEntry, modemAnswerString=modemAnswerString, datafilterEnabled=datafilterEnabled, commandNeedsPassword=commandNeedsPassword, databasePfull=databasePfull, crcMode=crcMode, actionsPagerTableEntry=actionsPagerTableEntry, actionsTraps=actionsTraps, dataAlarmString=dataAlarmString, rtsTable=rtsTable, databaseAlarmFileMaxSize=databaseAlarmFileMaxSize, pagerMessage=pagerMessage, portDataStore=portDataStore, killIPRestrictions=killIPRestrictions, datalinkPPPupTrap=datalinkPPPupTrap, actionsSerialTable=actionsSerialTable, calloutSendId=calloutSendId, siteID=siteID, sensorAlarmTable=sensorAlarmTable, dataAlarmPagerActions=dataAlarmPagerActions, sensorAlarmCalloutActions=sensorAlarmCalloutActions, portPtStripOutputLfs=portPtStripOutputLfs, portIndex=portIndex, techsupportInt5=techsupportInt5, sensorAlarmActive=sensorAlarmActive, iprestrictTableEntry=iprestrictTableEntry, scheduleActive=scheduleActive, techsupportInt3=techsupportInt3, actionTableEntry=actionTableEntry, calloutMessage=calloutMessage, fileAlarmPagerActions=fileAlarmPagerActions, ipNewAddress=ipNewAddress, filePercentNow=filePercentNow, ftpsetup=ftpsetup, dataAlarmSerialActions=dataAlarmSerialActions, ftppushEnable=ftppushEnable, sureEnabled=sureEnabled, modemreport=modemreport, actionQueue=actionQueue, sitebyport=sitebyport, databaseAlarmPagerActions=databaseAlarmPagerActions, maxRecordChars=maxRecordChars, time=time, databaseAlarmEntry=databaseAlarmEntry, ccodeLoaded=ccodeLoaded, inlineHsk6=inlineHsk6, fileAlarmEntry=fileAlarmEntry, snmpManagerIp=snmpManagerIp, ftpPush=ftpPush, rtsSocketState=rtsSocketState, actionsTrapsEntSpecific=actionsTrapsEntSpecific, binRecordBlocking=binRecordBlocking, ccodeStackT2Was=ccodeStackT2Was, portWord=portWord, nodataAlarmStatusCounter=nodataAlarmStatusCounter, databaseAlarmThreshold=databaseAlarmThreshold, pagerHangupDelay=pagerHangupDelay, fileRecordsDeleted=fileRecordsDeleted, databaseAlarmSerialActions=databaseAlarmSerialActions, snmpTrapsEnabled=snmpTrapsEnabled, pppIPAddress=pppIPAddress, commandTcpipTimeout=commandTcpipTimeout, duplex=duplex, ccodeRunning=ccodeRunning, systemversion=systemversion, nodataHolidayTable=nodataHolidayTable, calloutAttempts=calloutAttempts, productConfig=productConfig, modemcddelay=modemcddelay, ftpPushUser=ftpPushUser, linefeeds=linefeeds, actionCount=actionCount, passwordAccess=passwordAccess, calloutPhonenumber=calloutPhonenumber, scheduleBeeperActions=scheduleBeeperActions, rtsPortShowAnswer=rtsPortShowAnswer, fileAlarmThreshold=fileAlarmThreshold, modemUserSetup=modemUserSetup, fileRecords=fileRecords, serialnumber=serialnumber, portPTTime=portPTTime, siteindex=siteindex, ipCurrentDefaultRouter=ipCurrentDefaultRouter)
mibBuilder.exportSymbols("DATALINK-MIB", actionsTrapsEntSpecCount=actionsTrapsEntSpecCount, calloutMaxConnecttime=calloutMaxConnecttime, fileTableIndex=fileTableIndex, techsupportInt1=techsupportInt1, calloutTableIndex=calloutTableIndex, rtsWaitXon=rtsWaitXon, portBinaryMode=portBinaryMode, passwordIndex=passwordIndex, fileAlarmFileIndex=fileAlarmFileIndex, databaseFiles=databaseFiles, ftpPushStatusMode=ftpPushStatusMode, portPtStripInputLfs=portPtStripInputLfs, ipCurrentSubnetMask=ipCurrentSubnetMask, ftpPushServerName=ftpPushServerName, pppIDString=pppIDString, ftppushTable=ftppushTable, historyTableIndex=historyTableIndex, pppsetup=pppsetup, passwordTableEntry=passwordTableEntry, actionTypeID=actionTypeID, passwords=passwords, snmpsetup=snmpsetup, iprestrictIpAddress=iprestrictIpAddress, scheduleAlarmTable=scheduleAlarmTable, ipNew=ipNew, sensorAlarmName=sensorAlarmName, serialTableIndex=serialTableIndex, charmask=charmask, nodataAlarmHolidays=nodataAlarmHolidays, databasemode=databasemode, snmpTableEntry=snmpTableEntry, productname=productname, controls=controls, unitIds=unitIds, modemExtSetup=modemExtSetup, datalinkDbasePfullTrap=datalinkDbasePfullTrap, rtsIdleTimeout=rtsIdleTimeout, datalinkSensorAlarmTrap=datalinkSensorAlarmTrap, nodataTableActive=nodataTableActive, actionReasonID=actionReasonID, databaseRecordsDeleted=databaseRecordsDeleted, calloutAttemptDelay=calloutAttemptDelay, currenttime=currenttime, sensorAlarmTrapActions=sensorAlarmTrapActions, dataAlarmAcked=dataAlarmAcked, actionsCalloutTable=actionsCalloutTable, calloutSendReason=calloutSendReason, factorysetup=factorysetup, iprestrictTable=iprestrictTable, pagerAttemptDelay=pagerAttemptDelay, scheduleIndex=scheduleIndex, fileAlarmBeeperActions=fileAlarmBeeperActions, rtsDenied=rtsDenied, ftpPushDir=ftpPushDir, addIPRestrictions=addIPRestrictions, fileAlarmCalloutActions=fileAlarmCalloutActions, hardware=hardware, nodataNumberHolidays=nodataNumberHolidays, rtsPortEmptyClose=rtsPortEmptyClose, passwordCommand=passwordCommand, pagerPhonenumber=pagerPhonenumber, ipNewDefaultRouter=ipNewDefaultRouter, ftpPushCount=ftpPushCount, ftpPasswords=ftpPasswords, fileTable=fileTable, historyEntryType=historyEntryType, nodataTableBeeperActions=nodataTableBeeperActions, inlineHskMode=inlineHskMode, dleMode=dleMode, actionReasonLevel=actionReasonLevel, ipNewStatic=ipNewStatic, nodataAlarmStatusEntry=nodataAlarmStatusEntry, ipsetup=ipsetup, sensorAlarmIndex=sensorAlarmIndex, historyType=historyType, nodataHolidayClear=nodataHolidayClear, calloutRepeatDelay=calloutRepeatDelay, auxportMode=auxportMode, datalinkSchedTrap=datalinkSchedTrap, fileAlarmTrapActions=fileAlarmTrapActions, nodataTablePortIndex=nodataTablePortIndex, dataAlarmIndex=dataAlarmIndex, scheduleTrapActions=scheduleTrapActions, pagerMaxAttempts=pagerMaxAttempts, releaseCompressed=releaseCompressed, rtsPortNeedPassword=rtsPortNeedPassword, modemAutoexecEnabled=modemAutoexecEnabled, inlineHsk4=inlineHsk4, portStopbits=portStopbits, ipCurrentStatic=ipCurrentStatic, actionsCalloutTableEntry=actionsCalloutTableEntry, modemtype=modemtype, fileAlarmSerialActions=fileAlarmSerialActions, calloutCommandWait=calloutCommandWait, inlineHsk2=inlineHsk2, dataAlarmAutoClear=dataAlarmAutoClear, waitMode=waitMode, nodataAlarms=nodataAlarms, commandPasswordTimeout=commandPasswordTimeout, actionReason=actionReason, lastCalloutPageReason=lastCalloutPageReason, databaseSize=databaseSize, actions=actions, promptPasswords=promptPasswords, dateofmanufacture=dateofmanufacture, dataAlarmClearMode=dataAlarmClearMode, actionRepeatTime=actionRepeatTime, pagerID=pagerID, actionAttempts=actionAttempts, ftpPushPass=ftpPushPass, nodataAlarmStatus=nodataAlarmStatus, snmpManagerTable=snmpManagerTable, actionsSerialTableEntry=actionsSerialTableEntry, fileAlarms=fileAlarms, nodataTableScheduleIndex=nodataTableScheduleIndex, techsupport=techsupport, pagerAttempts=pagerAttempts, nodataTableTrapActions=nodataTableTrapActions, rtsPortIdleTimeout=rtsPortIdleTimeout, pppIdentification=pppIdentification, sensorAlarmThreshold=sensorAlarmThreshold, rtsPortWaitXon=rtsPortWaitXon, nodataHolidayAdd=nodataHolidayAdd, actionsBuzzer=actionsBuzzer, ipNewSetup=ipNewSetup, sensorAlarmBeeperActions=sensorAlarmBeeperActions, dataAlarmActive=dataAlarmActive, sysadminTcpipTimeout=sysadminTcpipTimeout, historyReasonID=historyReasonID, fileType=fileType, recordCollectionTimeout=recordCollectionTimeout, databaseAlarmCalloutActions=databaseAlarmCalloutActions, releaseMode=releaseMode, autodeleteEnable=autodeleteEnable, rtsNoStore=rtsNoStore)
