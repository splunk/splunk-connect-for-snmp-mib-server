#
# PySNMP MIB module TERAWAVE-teraBERT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teraBERT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, IpAddress, iso, ModuleIdentity, Unsigned32, MibIdentifier, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, enterprises, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "IpAddress", "iso", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "enterprises", "TimeTicks", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraBERTGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 16))
teraBERTConfigureTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 16, 1), )
if mibBuilder.loadTexts: teraBERTConfigureTable.setStatus('mandatory')
teraBERTConfigureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1), ).setIndexNames((0, "TERAWAVE-teraBERT-MIB", "ifIndex"))
if mibBuilder.loadTexts: teraBERTConfigureTableEntry.setStatus('mandatory')
teraBERTCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("start", 1), ("stop", 2), ("clear", 3), ("insert-err", 4), ("timer", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraBERTCommand.setStatus('mandatory')
teraBERTTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraBERTTestTime.setStatus('mandatory')
teraBERTSynThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraBERTSynThreshold.setStatus('mandatory')
teraBERTSESThresholdMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraBERTSESThresholdMantissa.setStatus('mandatory')
teraBERTSESThresholdExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraBERTSESThresholdExponent.setStatus('mandatory')
teraBERTSynStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraBERTSynStatus.setStatus('mandatory')
teraBERTElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraBERTElapsedTime.setStatus('mandatory')
teraBERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("twoE11MinusOne", 1), ("twoE15MinusOne", 2), ("twoE20MinusOne", 3), ("twoE23MinusOne", 4), ("allOnes", 5), ("allZeroes", 6), ("alternatingOneZero", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraBERTPattern.setStatus('mandatory')
teraBERTCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 16, 2), )
if mibBuilder.loadTexts: teraBERTCurrentTable.setStatus('mandatory')
teraBERTCurrentTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 16, 2, 1), ).setIndexNames((0, "TERAWAVE-teraBERT-MIB", "ifIndex"))
if mibBuilder.loadTexts: teraBERTCurrentTableEntry.setStatus('mandatory')
teraBERTCurrentCountInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraBERTCurrentCountInSync.setStatus('mandatory')
teraBERTCurrentRateInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraBERTCurrentRateInSync.setStatus('mandatory')
teraBERTCurrentESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraBERTCurrentESCount.setStatus('mandatory')
teraBERTCurrentSESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraBERTCurrentSESCount.setStatus('mandatory')
teraBERTCurrentCSESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraBERTCurrentCSESCount.setStatus('mandatory')
teraBERTCurrentUASCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 16, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraBERTCurrentUASCount.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-teraBERT-MIB", teraBERTCurrentTable=teraBERTCurrentTable, teraBERTCurrentTableEntry=teraBERTCurrentTableEntry, teraBERTCurrentUASCount=teraBERTCurrentUASCount, teraBERTPattern=teraBERTPattern, teraBERTCurrentCSESCount=teraBERTCurrentCSESCount, teraBERTCommand=teraBERTCommand, teraBERTConfigureTable=teraBERTConfigureTable, teraBERTElapsedTime=teraBERTElapsedTime, teraBERTConfigureTableEntry=teraBERTConfigureTableEntry, teraBERTCurrentESCount=teraBERTCurrentESCount, teraBERTCurrentRateInSync=teraBERTCurrentRateInSync, teraBERTCurrentCountInSync=teraBERTCurrentCountInSync, teraBERTSESThresholdExponent=teraBERTSESThresholdExponent, teraBERTSynThreshold=teraBERTSynThreshold, teraBERTCurrentSESCount=teraBERTCurrentSESCount, teraBERTSESThresholdMantissa=teraBERTSESThresholdMantissa, teraBERTSynStatus=teraBERTSynStatus, terawave=terawave, teraBERTTestTime=teraBERTTestTime, teraBERTGroup=teraBERTGroup)
