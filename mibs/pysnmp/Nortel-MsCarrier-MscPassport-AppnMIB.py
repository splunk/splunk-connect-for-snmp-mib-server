#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-AppnMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-AppnMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
Unsigned32, Gauge32, Integer32, DisplayString, StorageType, RowStatus, RowPointer = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Unsigned32", "Gauge32", "Integer32", "DisplayString", "StorageType", "RowStatus", "RowPointer")
Hex, HexString, EnterpriseDateAndTime, Link, NonReplicated, DashedHexString, AsciiStringIndex, DigitString, PassportCounter64, AsciiString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "Hex", "HexString", "EnterpriseDateAndTime", "Link", "NonReplicated", "DashedHexString", "AsciiStringIndex", "DigitString", "PassportCounter64", "AsciiString")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Unsigned32, Bits, iso, NotificationType, Gauge32, Integer32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Bits", "iso", "NotificationType", "Gauge32", "Integer32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
appnMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29))
mscAppn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110))
mscAppnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 1), )
if mibBuilder.loadTexts: mscAppnRowStatusTable.setStatus('mandatory')
mscAppnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"))
if mibBuilder.loadTexts: mscAppnRowStatusEntry.setStatus('mandatory')
mscAppnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnRowStatus.setStatus('mandatory')
mscAppnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnComponentName.setStatus('mandatory')
mscAppnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnStorageType.setStatus('mandatory')
mscAppnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: mscAppnIndex.setStatus('mandatory')
mscAppnProcessParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 100), )
if mibBuilder.loadTexts: mscAppnProcessParmsTable.setStatus('mandatory')
mscAppnProcessParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"))
if mibBuilder.loadTexts: mscAppnProcessParmsEntry.setStatus('mandatory')
mscAppnLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 100, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnLogicalProcessor.setStatus('mandatory')
mscAppnMaximumSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnMaximumSvcs.setStatus('mandatory')
mscAppnMaximumLinkStations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 100, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnMaximumLinkStations.setStatus('mandatory')
mscAppnControlPointCreateParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101), )
if mibBuilder.loadTexts: mscAppnControlPointCreateParmsTable.setStatus('mandatory')
mscAppnControlPointCreateParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"))
if mibBuilder.loadTexts: mscAppnControlPointCreateParmsEntry.setStatus('mandatory')
mscAppnFqCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnFqCpName.setStatus('mandatory')
mscAppnBlockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 3), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnBlockNumber.setStatus('mandatory')
mscAppnIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 4), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnIdNumber.setStatus('mandatory')
mscAppnRouteAdditionResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnRouteAdditionResistance.setStatus('mandatory')
mscAppnFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnFeatures.setStatus('mandatory')
mscAppnMaximumLocates = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnMaximumLocates.setStatus('mandatory')
mscAppnMaximumDirectorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnMaximumDirectorySize.setStatus('mandatory')
mscAppnMdsTxAlertQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnMdsTxAlertQueueSize.setStatus('mandatory')
mscAppnTreeCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnTreeCacheSize.setStatus('mandatory')
mscAppnTreeCacheUseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnTreeCacheUseLimit.setStatus('mandatory')
mscAppnMaximumTopologyNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnMaximumTopologyNodes.setStatus('mandatory')
mscAppnMaximumTopologyTgs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnMaximumTopologyTgs.setStatus('mandatory')
mscAppnMaximumIsrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnMaximumIsrSessions.setStatus('mandatory')
mscAppnIsrUpperCongestionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnIsrUpperCongestionThreshold.setStatus('mandatory')
mscAppnIsrLowerCongestionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnIsrLowerCongestionThreshold.setStatus('mandatory')
mscAppnIsrMaxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnIsrMaxRuSize.setStatus('mandatory')
mscAppnIsrRxPacingWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnIsrRxPacingWindow.setStatus('mandatory')
mscAppnLocateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnLocateTimeout.setStatus('mandatory')
mscAppnHprSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("anrOnly", 1), ("rtp", 2))).clone('rtp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnHprSupport.setStatus('mandatory')
mscAppnDlurSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 101, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlurSupport.setStatus('mandatory')
mscAppnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 102), )
if mibBuilder.loadTexts: mscAppnStateTable.setStatus('mandatory')
mscAppnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 102, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"))
if mibBuilder.loadTexts: mscAppnStateEntry.setStatus('mandatory')
mscAppnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnAdminState.setStatus('mandatory')
mscAppnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 102, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnOperationalState.setStatus('mandatory')
mscAppnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnUsageState.setStatus('mandatory')
mscAppnOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103), )
if mibBuilder.loadTexts: mscAppnOperationalTable.setStatus('mandatory')
mscAppnOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"))
if mibBuilder.loadTexts: mscAppnOperationalEntry.setStatus('mandatory')
mscAppnUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnUpTime.setStatus('mandatory')
mscAppnHeapSpaceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnHeapSpaceLimit.setStatus('mandatory')
mscAppnHeapSpaceCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnHeapSpaceCurrent.setStatus('mandatory')
mscAppnMemWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnMemWarningThreshold.setStatus('mandatory')
mscAppnMemCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnMemCriticalThreshold.setStatus('mandatory')
mscAppnNnFunctionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnFunctionsSupported.setStatus('mandatory')
mscAppnGeneralFunctionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnGeneralFunctionsSupported.setStatus('mandatory')
mscAppnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnStatus.setStatus('mandatory')
mscAppnFlowReductionSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnFlowReductionSequenceNumber.setStatus('mandatory')
mscAppnResourceSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnResourceSequenceNumber.setStatus('mandatory')
mscAppnDefinedLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDefinedLsGoodXids.setStatus('mandatory')
mscAppnDefinedLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDefinedLsBadXids.setStatus('mandatory')
mscAppnDynamicLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDynamicLsGoodXids.setStatus('mandatory')
mscAppnDynamicLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDynamicLsBadXids.setStatus('mandatory')
mscAppnActiveSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnActiveSvcs.setStatus('mandatory')
mscAppnActiveLinkStations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 103, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnActiveLinkStations.setStatus('mandatory')
mscAppnDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2))
mscAppnDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 1), )
if mibBuilder.loadTexts: mscAppnDnaRowStatusTable.setStatus('mandatory')
mscAppnDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"))
if mibBuilder.loadTexts: mscAppnDnaRowStatusEntry.setStatus('mandatory')
mscAppnDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaRowStatus.setStatus('mandatory')
mscAppnDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaComponentName.setStatus('mandatory')
mscAppnDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaStorageType.setStatus('mandatory')
mscAppnDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDnaIndex.setStatus('mandatory')
mscAppnDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 10), )
if mibBuilder.loadTexts: mscAppnDnaAddressTable.setStatus('mandatory')
mscAppnDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"))
if mibBuilder.loadTexts: mscAppnDnaAddressEntry.setStatus('mandatory')
mscAppnDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaNumberingPlanIndicator.setStatus('mandatory')
mscAppnDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaDataNetworkAddress.setStatus('mandatory')
mscAppnDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12), )
if mibBuilder.loadTexts: mscAppnDnaOutgoingOptionsTable.setStatus('mandatory')
mscAppnDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"))
if mibBuilder.loadTexts: mscAppnDnaOutgoingOptionsEntry.setStatus('mandatory')
mscAppnDnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaOutDefaultPriority.setStatus('mandatory')
mscAppnDnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaOutDefaultPathSensitivity.setStatus('obsolete')
mscAppnDnaOutPathSensitivityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaOutPathSensitivityOverRide.setStatus('obsolete')
mscAppnDnaOutDefaultPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaOutDefaultPathReliability.setStatus('mandatory')
mscAppnDnaOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaOutAccess.setStatus('mandatory')
mscAppnDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaDefaultTransferPriority.setStatus('mandatory')
mscAppnDnaTransferPriorityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaTransferPriorityOverRide.setStatus('mandatory')
mscAppnDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 13), )
if mibBuilder.loadTexts: mscAppnDnaIncomingOptionsTable.setStatus('mandatory')
mscAppnDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"))
if mibBuilder.loadTexts: mscAppnDnaIncomingOptionsEntry.setStatus('mandatory')
mscAppnDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaIncAccess.setStatus('mandatory')
mscAppnDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14), )
if mibBuilder.loadTexts: mscAppnDnaCallOptionsTable.setStatus('mandatory')
mscAppnDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"))
if mibBuilder.loadTexts: mscAppnDnaCallOptionsEntry.setStatus('mandatory')
mscAppnDnaDefaultRecvFrmNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaDefaultRecvFrmNetworkThruputClass.setStatus('mandatory')
mscAppnDnaDefaultSendToNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaDefaultSendToNetworkThruputClass.setStatus('mandatory')
mscAppnDnaDefaultRecvFrmNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaDefaultRecvFrmNetworkWindowSize.setStatus('mandatory')
mscAppnDnaDefaultSendToNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaDefaultSendToNetworkWindowSize.setStatus('mandatory')
mscAppnDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaAccountClass.setStatus('mandatory')
mscAppnDnaAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaAccountCollection.setStatus('mandatory')
mscAppnDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 14, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaServiceExchange.setStatus('mandatory')
mscAppnDnaHgM = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2))
mscAppnDnaHgMRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 1), )
if mibBuilder.loadTexts: mscAppnDnaHgMRowStatusTable.setStatus('mandatory')
mscAppnDnaHgMRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaHgMIndex"))
if mibBuilder.loadTexts: mscAppnDnaHgMRowStatusEntry.setStatus('mandatory')
mscAppnDnaHgMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaHgMRowStatus.setStatus('mandatory')
mscAppnDnaHgMComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaHgMComponentName.setStatus('mandatory')
mscAppnDnaHgMStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaHgMStorageType.setStatus('mandatory')
mscAppnDnaHgMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDnaHgMIndex.setStatus('mandatory')
mscAppnDnaHgMIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 10), )
if mibBuilder.loadTexts: mscAppnDnaHgMIfTable.setStatus('mandatory')
mscAppnDnaHgMIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaHgMIndex"))
if mibBuilder.loadTexts: mscAppnDnaHgMIfEntry.setStatus('mandatory')
mscAppnDnaHgMAvailabilityUpdateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaHgMAvailabilityUpdateThreshold.setStatus('mandatory')
mscAppnDnaHgMOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 11), )
if mibBuilder.loadTexts: mscAppnDnaHgMOpTable.setStatus('mandatory')
mscAppnDnaHgMOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaHgMIndex"))
if mibBuilder.loadTexts: mscAppnDnaHgMOpEntry.setStatus('mandatory')
mscAppnDnaHgMMaxAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaHgMMaxAvailableChannels.setStatus('mandatory')
mscAppnDnaHgMAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaHgMAvailableChannels.setStatus('mandatory')
mscAppnDnaHgMAvailabilityDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4096, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaHgMAvailabilityDelta.setStatus('mandatory')
mscAppnDnaHgMHgAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2))
mscAppnDnaHgMHgAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrRowStatusTable.setStatus('mandatory')
mscAppnDnaHgMHgAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaHgMIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrRowStatusEntry.setStatus('mandatory')
mscAppnDnaHgMHgAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrRowStatus.setStatus('mandatory')
mscAppnDnaHgMHgAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrComponentName.setStatus('mandatory')
mscAppnDnaHgMHgAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrStorageType.setStatus('mandatory')
mscAppnDnaHgMHgAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrIndex.setStatus('mandatory')
mscAppnDnaHgMHgAddrAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 10), )
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrAddrTable.setStatus('mandatory')
mscAppnDnaHgMHgAddrAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaHgMIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrAddrEntry.setStatus('mandatory')
mscAppnDnaHgMHgAddrNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrNumberingPlanIndicator.setStatus('mandatory')
mscAppnDnaHgMHgAddrDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaHgMHgAddrDataNetworkAddress.setStatus('mandatory')
mscAppnDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3))
mscAppnDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 1), )
if mibBuilder.loadTexts: mscAppnDnaCugRowStatusTable.setStatus('mandatory')
mscAppnDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaCugIndex"))
if mibBuilder.loadTexts: mscAppnDnaCugRowStatusEntry.setStatus('mandatory')
mscAppnDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaCugRowStatus.setStatus('mandatory')
mscAppnDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaCugComponentName.setStatus('mandatory')
mscAppnDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDnaCugStorageType.setStatus('mandatory')
mscAppnDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: mscAppnDnaCugIndex.setStatus('mandatory')
mscAppnDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10), )
if mibBuilder.loadTexts: mscAppnDnaCugCugOptionsTable.setStatus('mandatory')
mscAppnDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDnaCugIndex"))
if mibBuilder.loadTexts: mscAppnDnaCugCugOptionsEntry.setStatus('mandatory')
mscAppnDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaCugType.setStatus('mandatory')
mscAppnDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaCugDnic.setStatus('mandatory')
mscAppnDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaCugInterlockCode.setStatus('mandatory')
mscAppnDnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaCugPreferential.setStatus('mandatory')
mscAppnDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaCugOutCalls.setStatus('mandatory')
mscAppnDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaCugIncCalls.setStatus('mandatory')
mscAppnDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 2, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDnaCugPrivileged.setStatus('mandatory')
mscAppnDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3))
mscAppnDlciRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 1), )
if mibBuilder.loadTexts: mscAppnDlciRowStatusTable.setStatus('mandatory')
mscAppnDlciRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"))
if mibBuilder.loadTexts: mscAppnDlciRowStatusEntry.setStatus('mandatory')
mscAppnDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciRowStatus.setStatus('mandatory')
mscAppnDlciComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciComponentName.setStatus('mandatory')
mscAppnDlciStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciStorageType.setStatus('mandatory')
mscAppnDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4095)))
if mibBuilder.loadTexts: mscAppnDlciIndex.setStatus('mandatory')
mscAppnDlciStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 10), )
if mibBuilder.loadTexts: mscAppnDlciStateTable.setStatus('mandatory')
mscAppnDlciStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"))
if mibBuilder.loadTexts: mscAppnDlciStateEntry.setStatus('mandatory')
mscAppnDlciAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciAdminState.setStatus('mandatory')
mscAppnDlciOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciOperationalState.setStatus('mandatory')
mscAppnDlciUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciUsageState.setStatus('mandatory')
mscAppnDlciSpOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 12), )
if mibBuilder.loadTexts: mscAppnDlciSpOpTable.setStatus('mandatory')
mscAppnDlciSpOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"))
if mibBuilder.loadTexts: mscAppnDlciSpOpEntry.setStatus('mandatory')
mscAppnDlciRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciRateEnforcement.setStatus('mandatory')
mscAppnDlciCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciCommittedInformationRate.setStatus('mandatory')
mscAppnDlciCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciCommittedBurstSize.setStatus('mandatory')
mscAppnDlciExcessInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciExcessInformationRate.setStatus('mandatory')
mscAppnDlciExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 12, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciExcessBurstSize.setStatus('mandatory')
mscAppnDlciMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 12, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciMeasurementInterval.setStatus('mandatory')
mscAppnDlciDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2))
mscAppnDlciDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 1), )
if mibBuilder.loadTexts: mscAppnDlciDcRowStatusTable.setStatus('mandatory')
mscAppnDlciDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciDcIndex"))
if mibBuilder.loadTexts: mscAppnDlciDcRowStatusEntry.setStatus('mandatory')
mscAppnDlciDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciDcRowStatus.setStatus('mandatory')
mscAppnDlciDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciDcComponentName.setStatus('mandatory')
mscAppnDlciDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciDcStorageType.setStatus('mandatory')
mscAppnDlciDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDlciDcIndex.setStatus('mandatory')
mscAppnDlciDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 10), )
if mibBuilder.loadTexts: mscAppnDlciDcOptionsTable.setStatus('mandatory')
mscAppnDlciDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciDcIndex"))
if mibBuilder.loadTexts: mscAppnDlciDcOptionsEntry.setStatus('mandatory')
mscAppnDlciDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciDcRemoteNpi.setStatus('mandatory')
mscAppnDlciDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciDcRemoteDna.setStatus('mandatory')
mscAppnDlciDcRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciDcRemoteDlci.setStatus('mandatory')
mscAppnDlciDcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("permanentMaster", 1), ("permanentSlave", 2), ("permanentBackupSlave", 3), ("permanentSlaveWithBackup", 4))).clone('permanentMaster')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciDcType.setStatus('mandatory')
mscAppnDlciDcTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9, 255))).clone(namedValues=NamedValues(("normal", 0), ("high", 9), ("useDnaDefTP", 255))).clone('useDnaDefTP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciDcTransferPriority.setStatus('mandatory')
mscAppnDlciDcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("useDnaDefPriority", 3))).clone('useDnaDefPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciDcDiscardPriority.setStatus('mandatory')
mscAppnDlciDcNfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 283), )
if mibBuilder.loadTexts: mscAppnDlciDcNfaTable.setStatus('obsolete')
mscAppnDlciDcNfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 283, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciDcIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciDcNfaIndex"))
if mibBuilder.loadTexts: mscAppnDlciDcNfaEntry.setStatus('obsolete')
mscAppnDlciDcNfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 283, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(48, 48), )))
if mibBuilder.loadTexts: mscAppnDlciDcNfaIndex.setStatus('obsolete')
mscAppnDlciDcNfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 283, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciDcNfaValue.setStatus('obsolete')
mscAppnDlciDcNfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 2, 283, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscAppnDlciDcNfaRowStatus.setStatus('obsolete')
mscAppnDlciVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3))
mscAppnDlciVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 1), )
if mibBuilder.loadTexts: mscAppnDlciVcRowStatusTable.setStatus('mandatory')
mscAppnDlciVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciVcIndex"))
if mibBuilder.loadTexts: mscAppnDlciVcRowStatusEntry.setStatus('mandatory')
mscAppnDlciVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcRowStatus.setStatus('mandatory')
mscAppnDlciVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcComponentName.setStatus('mandatory')
mscAppnDlciVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcStorageType.setStatus('mandatory')
mscAppnDlciVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDlciVcIndex.setStatus('mandatory')
mscAppnDlciVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10), )
if mibBuilder.loadTexts: mscAppnDlciVcCadTable.setStatus('mandatory')
mscAppnDlciVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciVcIndex"))
if mibBuilder.loadTexts: mscAppnDlciVcCadEntry.setStatus('mandatory')
mscAppnDlciVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcType.setStatus('mandatory')
mscAppnDlciVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcState.setStatus('mandatory')
mscAppnDlciVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPreviousState.setStatus('mandatory')
mscAppnDlciVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcDiagnosticCode.setStatus('mandatory')
mscAppnDlciVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPreviousDiagnosticCode.setStatus('mandatory')
mscAppnDlciVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCalledNpi.setStatus('mandatory')
mscAppnDlciVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCalledDna.setStatus('mandatory')
mscAppnDlciVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCalledLcn.setStatus('mandatory')
mscAppnDlciVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCallingNpi.setStatus('mandatory')
mscAppnDlciVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCallingDna.setStatus('mandatory')
mscAppnDlciVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCallingLcn.setStatus('mandatory')
mscAppnDlciVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcAccountingEnabled.setStatus('mandatory')
mscAppnDlciVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcFastSelectCall.setStatus('mandatory')
mscAppnDlciVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPathReliability.setStatus('mandatory')
mscAppnDlciVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcAccountingEnd.setStatus('mandatory')
mscAppnDlciVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPriority.setStatus('mandatory')
mscAppnDlciVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcSegmentSize.setStatus('mandatory')
mscAppnDlciVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcMaxSubnetPktSize.setStatus('mandatory')
mscAppnDlciVcRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcRcosToNetwork.setStatus('mandatory')
mscAppnDlciVcRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcRcosFromNetwork.setStatus('mandatory')
mscAppnDlciVcEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcEmissionPriorityToNetwork.setStatus('mandatory')
mscAppnDlciVcEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcEmissionPriorityFromNetwork.setStatus('mandatory')
mscAppnDlciVcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcDataPath.setStatus('mandatory')
mscAppnDlciVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 11), )
if mibBuilder.loadTexts: mscAppnDlciVcIntdTable.setStatus('mandatory')
mscAppnDlciVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciVcIndex"))
if mibBuilder.loadTexts: mscAppnDlciVcIntdEntry.setStatus('mandatory')
mscAppnDlciVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCallReferenceNumber.setStatus('mandatory')
mscAppnDlciVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcElapsedTimeTillNow.setStatus('mandatory')
mscAppnDlciVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcSegmentsRx.setStatus('mandatory')
mscAppnDlciVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcSegmentsSent.setStatus('mandatory')
mscAppnDlciVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcStartTime.setStatus('mandatory')
mscAppnDlciVcFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12), )
if mibBuilder.loadTexts: mscAppnDlciVcFrdTable.setStatus('mandatory')
mscAppnDlciVcFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciVcIndex"))
if mibBuilder.loadTexts: mscAppnDlciVcFrdEntry.setStatus('mandatory')
mscAppnDlciVcFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcFrmCongestedToSubnet.setStatus('mandatory')
mscAppnDlciVcCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCannotForwardToSubnet.setStatus('mandatory')
mscAppnDlciVcNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcNotDataXferToSubnet.setStatus('mandatory')
mscAppnDlciVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscAppnDlciVcCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcCombErrorsFromSubnet.setStatus('mandatory')
mscAppnDlciVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcDuplicatesFromSubnet.setStatus('mandatory')
mscAppnDlciVcNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcNotDataXferFromSubnet.setStatus('mandatory')
mscAppnDlciVcFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcFrmLossTimeouts.setStatus('mandatory')
mscAppnDlciVcOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcOoSeqByteCntExceeded.setStatus('mandatory')
mscAppnDlciVcPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPeakOoSeqPktCount.setStatus('mandatory')
mscAppnDlciVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPeakOoSeqFrmForwarded.setStatus('mandatory')
mscAppnDlciVcSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcSendSequenceNumber.setStatus('mandatory')
mscAppnDlciVcPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPktRetryTimeouts.setStatus('mandatory')
mscAppnDlciVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPeakRetryQueueSize.setStatus('mandatory')
mscAppnDlciVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcSubnetRecoveries.setStatus('mandatory')
mscAppnDlciVcOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcOoSeqPktCntExceeded.setStatus('mandatory')
mscAppnDlciVcPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcPeakOoSeqByteCount.setStatus('mandatory')
mscAppnDlciVcDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 417), )
if mibBuilder.loadTexts: mscAppnDlciVcDmepTable.setStatus('mandatory')
mscAppnDlciVcDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 417, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciVcIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciVcDmepValue"))
if mibBuilder.loadTexts: mscAppnDlciVcDmepEntry.setStatus('mandatory')
mscAppnDlciVcDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 3, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciVcDmepValue.setStatus('mandatory')
mscAppnDlciBnnLsDef = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4))
mscAppnDlciBnnLsDefRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 1), )
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefRowStatusTable.setStatus('mandatory')
mscAppnDlciBnnLsDefRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciBnnLsDefIndex"))
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefRowStatusEntry.setStatus('mandatory')
mscAppnDlciBnnLsDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefRowStatus.setStatus('mandatory')
mscAppnDlciBnnLsDefComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefComponentName.setStatus('mandatory')
mscAppnDlciBnnLsDefStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefStorageType.setStatus('mandatory')
mscAppnDlciBnnLsDefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ValueRangeConstraint(24, 24), ValueRangeConstraint(28, 28), ValueRangeConstraint(32, 32), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), ValueRangeConstraint(72, 72), ValueRangeConstraint(76, 76), ValueRangeConstraint(80, 80), ValueRangeConstraint(84, 84), ValueRangeConstraint(88, 88), ValueRangeConstraint(92, 92), ValueRangeConstraint(96, 96), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(144, 144), ValueRangeConstraint(148, 148), ValueRangeConstraint(152, 152), ValueRangeConstraint(156, 156), ValueRangeConstraint(160, 160), ValueRangeConstraint(164, 164), ValueRangeConstraint(168, 168), ValueRangeConstraint(172, 172), ValueRangeConstraint(176, 176), ValueRangeConstraint(180, 180), ValueRangeConstraint(184, 184), ValueRangeConstraint(188, 188), ValueRangeConstraint(192, 192), ValueRangeConstraint(196, 196), ValueRangeConstraint(200, 200), ValueRangeConstraint(204, 204), ValueRangeConstraint(208, 208), ValueRangeConstraint(212, 212), ValueRangeConstraint(216, 216), ValueRangeConstraint(220, 220), ValueRangeConstraint(224, 224), ValueRangeConstraint(228, 228), ValueRangeConstraint(232, 232), ValueRangeConstraint(236, 236), ValueRangeConstraint(240, 240), ValueRangeConstraint(244, 244), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), )))
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefIndex.setStatus('mandatory')
mscAppnDlciBnnLsDefProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2), )
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefProvTable.setStatus('mandatory')
mscAppnDlciBnnLsDefProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciBnnLsDefIndex"))
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefProvEntry.setStatus('mandatory')
mscAppnDlciBnnLsDefDspuService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("dlur", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefDspuService.setStatus('mandatory')
mscAppnDlciBnnLsDefAdjacentCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefAdjacentCpName.setStatus('mandatory')
mscAppnDlciBnnLsDefAdjacentCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("appnNode", 0), ("networkNode", 2), ("endNode", 3), ("backLevelLenNode", 5), ("hostXID3", 6), ("hostXID0", 7), ("dlurXID", 8), ("dlurNoXID", 9))).clone('appnNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefAdjacentCpType.setStatus('mandatory')
mscAppnDlciBnnLsDefTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefTgNum.setStatus('mandatory')
mscAppnDlciBnnLsDefDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefDlusName.setStatus('mandatory')
mscAppnDlciBnnLsDefBackupDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 7), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefBackupDlusName.setStatus('mandatory')
mscAppnDlciBnnLsDefHprSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("sameAsNode", 1))).clone('sameAsNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefHprSupported.setStatus('mandatory')
mscAppnDlciBnnLsDefAdjacentNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 9), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefAdjacentNodeID.setStatus('mandatory')
mscAppnDlciBnnLsDefCpCpSessionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefCpCpSessionSupport.setStatus('mandatory')
mscAppnDlciBnnLsDefMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(99, 32768)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefMaxTxBtuSize.setStatus('mandatory')
mscAppnDlciBnnLsDefLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("negotiable", 0), ("primary", 1), ("secondary", 2))).clone('negotiable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBnnLsDefLsRole.setStatus('mandatory')
mscAppnDlciSp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5))
mscAppnDlciSpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 1), )
if mibBuilder.loadTexts: mscAppnDlciSpRowStatusTable.setStatus('mandatory')
mscAppnDlciSpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciSpIndex"))
if mibBuilder.loadTexts: mscAppnDlciSpRowStatusEntry.setStatus('mandatory')
mscAppnDlciSpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciSpRowStatus.setStatus('mandatory')
mscAppnDlciSpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciSpComponentName.setStatus('mandatory')
mscAppnDlciSpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciSpStorageType.setStatus('mandatory')
mscAppnDlciSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDlciSpIndex.setStatus('mandatory')
mscAppnDlciSpParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 11), )
if mibBuilder.loadTexts: mscAppnDlciSpParmsTable.setStatus('mandatory')
mscAppnDlciSpParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciSpIndex"))
if mibBuilder.loadTexts: mscAppnDlciSpParmsEntry.setStatus('mandatory')
mscAppnDlciSpRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciSpRateEnforcement.setStatus('mandatory')
mscAppnDlciSpCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciSpCommittedInformationRate.setStatus('mandatory')
mscAppnDlciSpCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciSpCommittedBurstSize.setStatus('mandatory')
mscAppnDlciSpExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciSpExcessBurstSize.setStatus('mandatory')
mscAppnDlciSpMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciSpMeasurementInterval.setStatus('mandatory')
mscAppnDlciBanLsDef = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6))
mscAppnDlciBanLsDefRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 1), )
if mibBuilder.loadTexts: mscAppnDlciBanLsDefRowStatusTable.setStatus('mandatory')
mscAppnDlciBanLsDefRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciBanLsDefMacIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciBanLsDefSapIndex"))
if mibBuilder.loadTexts: mscAppnDlciBanLsDefRowStatusEntry.setStatus('mandatory')
mscAppnDlciBanLsDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefRowStatus.setStatus('mandatory')
mscAppnDlciBanLsDefComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefComponentName.setStatus('mandatory')
mscAppnDlciBanLsDefStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefStorageType.setStatus('mandatory')
mscAppnDlciBanLsDefMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 1, 1, 10), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: mscAppnDlciBanLsDefMacIndex.setStatus('mandatory')
mscAppnDlciBanLsDefSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ValueRangeConstraint(24, 24), ValueRangeConstraint(28, 28), ValueRangeConstraint(32, 32), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), ValueRangeConstraint(72, 72), ValueRangeConstraint(76, 76), ValueRangeConstraint(80, 80), ValueRangeConstraint(84, 84), ValueRangeConstraint(88, 88), ValueRangeConstraint(92, 92), ValueRangeConstraint(96, 96), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(144, 144), ValueRangeConstraint(148, 148), ValueRangeConstraint(152, 152), ValueRangeConstraint(156, 156), ValueRangeConstraint(160, 160), ValueRangeConstraint(164, 164), ValueRangeConstraint(168, 168), ValueRangeConstraint(172, 172), ValueRangeConstraint(176, 176), ValueRangeConstraint(180, 180), ValueRangeConstraint(184, 184), ValueRangeConstraint(188, 188), ValueRangeConstraint(192, 192), ValueRangeConstraint(196, 196), ValueRangeConstraint(200, 200), ValueRangeConstraint(204, 204), ValueRangeConstraint(208, 208), ValueRangeConstraint(212, 212), ValueRangeConstraint(216, 216), ValueRangeConstraint(220, 220), ValueRangeConstraint(224, 224), ValueRangeConstraint(228, 228), ValueRangeConstraint(232, 232), ValueRangeConstraint(236, 236), ValueRangeConstraint(240, 240), ValueRangeConstraint(244, 244), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), )))
if mibBuilder.loadTexts: mscAppnDlciBanLsDefSapIndex.setStatus('mandatory')
mscAppnDlciBanLsDefProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2), )
if mibBuilder.loadTexts: mscAppnDlciBanLsDefProvTable.setStatus('mandatory')
mscAppnDlciBanLsDefProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciBanLsDefMacIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciBanLsDefSapIndex"))
if mibBuilder.loadTexts: mscAppnDlciBanLsDefProvEntry.setStatus('mandatory')
mscAppnDlciBanLsDefDspuService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("dlur", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefDspuService.setStatus('mandatory')
mscAppnDlciBanLsDefAdjacentCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefAdjacentCpName.setStatus('mandatory')
mscAppnDlciBanLsDefAdjacentCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("appnNode", 0), ("networkNode", 2), ("endNode", 3), ("backLevelLenNode", 5), ("hostXID3", 6), ("hostXID0", 7), ("dlurXID", 8), ("dlurNoXID", 9))).clone('appnNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefAdjacentCpType.setStatus('mandatory')
mscAppnDlciBanLsDefTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefTgNum.setStatus('mandatory')
mscAppnDlciBanLsDefDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefDlusName.setStatus('mandatory')
mscAppnDlciBanLsDefBackupDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 7), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefBackupDlusName.setStatus('mandatory')
mscAppnDlciBanLsDefHprSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("sameAsNode", 1))).clone('sameAsNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefHprSupported.setStatus('mandatory')
mscAppnDlciBanLsDefAdjacentNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 9), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefAdjacentNodeID.setStatus('mandatory')
mscAppnDlciBanLsDefCpCpSessionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefCpCpSessionSupport.setStatus('mandatory')
mscAppnDlciBanLsDefMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(99, 32768)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefMaxTxBtuSize.setStatus('mandatory')
mscAppnDlciBanLsDefLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("negotiable", 0), ("primary", 1), ("secondary", 2))).clone('negotiable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLsDefLsRole.setStatus('mandatory')
mscAppnDlciBan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7))
mscAppnDlciBanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 1), )
if mibBuilder.loadTexts: mscAppnDlciBanRowStatusTable.setStatus('mandatory')
mscAppnDlciBanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciBanIndex"))
if mibBuilder.loadTexts: mscAppnDlciBanRowStatusEntry.setStatus('mandatory')
mscAppnDlciBanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanRowStatus.setStatus('mandatory')
mscAppnDlciBanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciBanComponentName.setStatus('mandatory')
mscAppnDlciBanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlciBanStorageType.setStatus('mandatory')
mscAppnDlciBanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDlciBanIndex.setStatus('mandatory')
mscAppnDlciBanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 2), )
if mibBuilder.loadTexts: mscAppnDlciBanProvTable.setStatus('mandatory')
mscAppnDlciBanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 2, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlciBanIndex"))
if mibBuilder.loadTexts: mscAppnDlciBanProvEntry.setStatus('mandatory')
mscAppnDlciBanLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 2, 1, 1), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="4fff00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLocalMac.setStatus('mandatory')
mscAppnDlciBanLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 3, 7, 2, 1, 2), Hex().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ValueRangeConstraint(24, 24), ValueRangeConstraint(28, 28), ValueRangeConstraint(32, 32), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), ValueRangeConstraint(72, 72), ValueRangeConstraint(76, 76), ValueRangeConstraint(80, 80), ValueRangeConstraint(84, 84), ValueRangeConstraint(88, 88), ValueRangeConstraint(92, 92), ValueRangeConstraint(96, 96), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(144, 144), ValueRangeConstraint(148, 148), ValueRangeConstraint(152, 152), ValueRangeConstraint(156, 156), ValueRangeConstraint(160, 160), ValueRangeConstraint(164, 164), ValueRangeConstraint(168, 168), ValueRangeConstraint(172, 172), ValueRangeConstraint(176, 176), ValueRangeConstraint(180, 180), ValueRangeConstraint(184, 184), ValueRangeConstraint(188, 188), ValueRangeConstraint(192, 192), ValueRangeConstraint(196, 196), ValueRangeConstraint(200, 200), ValueRangeConstraint(204, 204), ValueRangeConstraint(208, 208), ValueRangeConstraint(212, 212), ValueRangeConstraint(216, 216), ValueRangeConstraint(220, 220), ValueRangeConstraint(224, 224), ValueRangeConstraint(228, 228), ValueRangeConstraint(232, 232), ValueRangeConstraint(236, 236), ValueRangeConstraint(240, 240), ValueRangeConstraint(244, 244), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), )).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDlciBanLocalSap.setStatus('mandatory')
mscAppnLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4))
mscAppnLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 1), )
if mibBuilder.loadTexts: mscAppnLcnRowStatusTable.setStatus('mandatory')
mscAppnLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnIndex"))
if mibBuilder.loadTexts: mscAppnLcnRowStatusEntry.setStatus('mandatory')
mscAppnLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnLcnRowStatus.setStatus('mandatory')
mscAppnLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnComponentName.setStatus('mandatory')
mscAppnLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnStorageType.setStatus('mandatory')
mscAppnLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: mscAppnLcnIndex.setStatus('mandatory')
mscAppnLcnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 10), )
if mibBuilder.loadTexts: mscAppnLcnStateTable.setStatus('mandatory')
mscAppnLcnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnIndex"))
if mibBuilder.loadTexts: mscAppnLcnStateEntry.setStatus('mandatory')
mscAppnLcnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnAdminState.setStatus('mandatory')
mscAppnLcnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnOperationalState.setStatus('mandatory')
mscAppnLcnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnUsageState.setStatus('mandatory')
mscAppnLcnDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2))
mscAppnLcnDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 1), )
if mibBuilder.loadTexts: mscAppnLcnDcRowStatusTable.setStatus('mandatory')
mscAppnLcnDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnDcIndex"))
if mibBuilder.loadTexts: mscAppnLcnDcRowStatusEntry.setStatus('mandatory')
mscAppnLcnDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnDcRowStatus.setStatus('mandatory')
mscAppnLcnDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnDcComponentName.setStatus('mandatory')
mscAppnLcnDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnDcStorageType.setStatus('mandatory')
mscAppnLcnDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnLcnDcIndex.setStatus('mandatory')
mscAppnLcnDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 10), )
if mibBuilder.loadTexts: mscAppnLcnDcOptionsTable.setStatus('mandatory')
mscAppnLcnDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnDcIndex"))
if mibBuilder.loadTexts: mscAppnLcnDcOptionsEntry.setStatus('mandatory')
mscAppnLcnDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnLcnDcRemoteNpi.setStatus('mandatory')
mscAppnLcnDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnLcnDcRemoteDna.setStatus('mandatory')
mscAppnLcnDcTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9, 255))).clone(namedValues=NamedValues(("normal", 0), ("high", 9), ("useDnaDefTP", 255))).clone('useDnaDefTP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnLcnDcTransferPriority.setStatus('mandatory')
mscAppnLcnDcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("useDnaDefPriority", 3))).clone('useDnaDefPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnLcnDcDiscardPriority.setStatus('mandatory')
mscAppnLcnVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3))
mscAppnLcnVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 1), )
if mibBuilder.loadTexts: mscAppnLcnVcRowStatusTable.setStatus('mandatory')
mscAppnLcnVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnVcIndex"))
if mibBuilder.loadTexts: mscAppnLcnVcRowStatusEntry.setStatus('mandatory')
mscAppnLcnVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcRowStatus.setStatus('mandatory')
mscAppnLcnVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcComponentName.setStatus('mandatory')
mscAppnLcnVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcStorageType.setStatus('mandatory')
mscAppnLcnVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnLcnVcIndex.setStatus('mandatory')
mscAppnLcnVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10), )
if mibBuilder.loadTexts: mscAppnLcnVcCadTable.setStatus('mandatory')
mscAppnLcnVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnVcIndex"))
if mibBuilder.loadTexts: mscAppnLcnVcCadEntry.setStatus('mandatory')
mscAppnLcnVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcType.setStatus('mandatory')
mscAppnLcnVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcState.setStatus('mandatory')
mscAppnLcnVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcPreviousState.setStatus('mandatory')
mscAppnLcnVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcDiagnosticCode.setStatus('mandatory')
mscAppnLcnVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcPreviousDiagnosticCode.setStatus('mandatory')
mscAppnLcnVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcCalledNpi.setStatus('mandatory')
mscAppnLcnVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcCalledDna.setStatus('mandatory')
mscAppnLcnVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcCalledLcn.setStatus('mandatory')
mscAppnLcnVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcCallingNpi.setStatus('mandatory')
mscAppnLcnVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcCallingDna.setStatus('mandatory')
mscAppnLcnVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcCallingLcn.setStatus('mandatory')
mscAppnLcnVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcAccountingEnabled.setStatus('mandatory')
mscAppnLcnVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcFastSelectCall.setStatus('mandatory')
mscAppnLcnVcLocalRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcLocalRxPktSize.setStatus('mandatory')
mscAppnLcnVcLocalTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcLocalTxPktSize.setStatus('mandatory')
mscAppnLcnVcLocalTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcLocalTxWindowSize.setStatus('mandatory')
mscAppnLcnVcLocalRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcLocalRxWindowSize.setStatus('mandatory')
mscAppnLcnVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcPathReliability.setStatus('mandatory')
mscAppnLcnVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcAccountingEnd.setStatus('mandatory')
mscAppnLcnVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcPriority.setStatus('mandatory')
mscAppnLcnVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcSegmentSize.setStatus('mandatory')
mscAppnLcnVcSubnetTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcSubnetTxPktSize.setStatus('mandatory')
mscAppnLcnVcSubnetTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcSubnetTxWindowSize.setStatus('mandatory')
mscAppnLcnVcSubnetRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcSubnetRxPktSize.setStatus('mandatory')
mscAppnLcnVcSubnetRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcSubnetRxWindowSize.setStatus('mandatory')
mscAppnLcnVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcMaxSubnetPktSize.setStatus('mandatory')
mscAppnLcnVcTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcTransferPriorityToNetwork.setStatus('mandatory')
mscAppnLcnVcTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcTransferPriorityFromNetwork.setStatus('mandatory')
mscAppnLcnVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 11), )
if mibBuilder.loadTexts: mscAppnLcnVcIntdTable.setStatus('mandatory')
mscAppnLcnVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnVcIndex"))
if mibBuilder.loadTexts: mscAppnLcnVcIntdEntry.setStatus('mandatory')
mscAppnLcnVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcCallReferenceNumber.setStatus('mandatory')
mscAppnLcnVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcElapsedTimeTillNow.setStatus('mandatory')
mscAppnLcnVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcSegmentsRx.setStatus('mandatory')
mscAppnLcnVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcSegmentsSent.setStatus('mandatory')
mscAppnLcnVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcStartTime.setStatus('mandatory')
mscAppnLcnVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12), )
if mibBuilder.loadTexts: mscAppnLcnVcStatsTable.setStatus('mandatory')
mscAppnLcnVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLcnVcIndex"))
if mibBuilder.loadTexts: mscAppnLcnVcStatsEntry.setStatus('mandatory')
mscAppnLcnVcAckStackingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcAckStackingTimeouts.setStatus('mandatory')
mscAppnLcnVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscAppnLcnVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcDuplicatesFromSubnet.setStatus('mandatory')
mscAppnLcnVcFrmRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcFrmRetryTimeouts.setStatus('mandatory')
mscAppnLcnVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcPeakRetryQueueSize.setStatus('mandatory')
mscAppnLcnVcPeakOoSeqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcPeakOoSeqQueueSize.setStatus('mandatory')
mscAppnLcnVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcPeakOoSeqFrmForwarded.setStatus('mandatory')
mscAppnLcnVcPeakStackedAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcPeakStackedAcksRx.setStatus('mandatory')
mscAppnLcnVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcSubnetRecoveries.setStatus('mandatory')
mscAppnLcnVcWindowClosuresToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcWindowClosuresToSubnet.setStatus('mandatory')
mscAppnLcnVcWindowClosuresFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcWindowClosuresFromSubnet.setStatus('mandatory')
mscAppnLcnVcWrTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 4, 3, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLcnVcWrTriggers.setStatus('mandatory')
mscAppnPort = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5))
mscAppnPortRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 1), )
if mibBuilder.loadTexts: mscAppnPortRowStatusTable.setStatus('mandatory')
mscAppnPortRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnPortIndex"))
if mibBuilder.loadTexts: mscAppnPortRowStatusEntry.setStatus('mandatory')
mscAppnPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortRowStatus.setStatus('mandatory')
mscAppnPortComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortComponentName.setStatus('mandatory')
mscAppnPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortStorageType.setStatus('mandatory')
mscAppnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: mscAppnPortIndex.setStatus('mandatory')
mscAppnPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10), )
if mibBuilder.loadTexts: mscAppnPortConfigTable.setStatus('mandatory')
mscAppnPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnPortIndex"))
if mibBuilder.loadTexts: mscAppnPortConfigEntry.setStatus('mandatory')
mscAppnPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonSwitched", 1), ("switched", 2), ("sharedAccessFacilities", 3))).clone('sharedAccessFacilities')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortType.setStatus('mandatory')
mscAppnPortMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2048)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortMaxRxBtuSize.setStatus('mandatory')
mscAppnPortMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2048)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortMaxTxBtuSize.setStatus('mandatory')
mscAppnPortTotLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortTotLinkActLim.setStatus('mandatory')
mscAppnPortInbLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(97)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortInbLinkActLim.setStatus('mandatory')
mscAppnPortOutLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortOutLinkActLim.setStatus('mandatory')
mscAppnPortLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("negotiable", 3))).clone('negotiable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortLsRole.setStatus('mandatory')
mscAppnPortActXidExchLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortActXidExchLim.setStatus('mandatory')
mscAppnPortNonactXidExchLim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortNonactXidExchLim.setStatus('mandatory')
mscAppnPortLsXmitRxCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("twa", 0), ("tws", 1))).clone('tws')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortLsXmitRxCap.setStatus('mandatory')
mscAppnPortMaxIfrmRxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortMaxIfrmRxWindow.setStatus('mandatory')
mscAppnPortTargetPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortTargetPacingCount.setStatus('mandatory')
mscAppnPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11), )
if mibBuilder.loadTexts: mscAppnPortOperTable.setStatus('mandatory')
mscAppnPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnPortIndex"))
if mibBuilder.loadTexts: mscAppnPortOperEntry.setStatus('mandatory')
mscAppnPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendingActive", 2), ("active", 3), ("pendingInactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortState.setStatus('mandatory')
mscAppnPortDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 30, 31))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("tokenRing", 6), ("frameRelay", 30), ("x25", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortDlcType.setStatus('mandatory')
mscAppnPortSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortSimRim.setStatus('mandatory')
mscAppnPortDefinedLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortDefinedLsGoodXids.setStatus('mandatory')
mscAppnPortDefinedLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortDefinedLsBadXids.setStatus('mandatory')
mscAppnPortDynLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortDynLsGoodXids.setStatus('mandatory')
mscAppnPortDynLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortDynLsBadXids.setStatus('mandatory')
mscAppnPortTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12), )
if mibBuilder.loadTexts: mscAppnPortTgCharTable.setStatus('mandatory')
mscAppnPortTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnPortIndex"))
if mibBuilder.loadTexts: mscAppnPortTgCharEntry.setStatus('mandatory')
mscAppnPortEffectiveCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("n600Gbps", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortEffectiveCap.setStatus('mandatory')
mscAppnPortConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortConnectCost.setStatus('mandatory')
mscAppnPortByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortByteCost.setStatus('mandatory')
mscAppnPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("unKnown", 0), ("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortSecurity.setStatus('mandatory')
mscAppnPortPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153))).clone('terrestrial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortPropagationDelay.setStatus('mandatory')
mscAppnPortUserDefinedParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortUserDefinedParm1.setStatus('mandatory')
mscAppnPortUserDefinedParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortUserDefinedParm2.setStatus('mandatory')
mscAppnPortUserDefinedParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 5, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnPortUserDefinedParm3.setStatus('mandatory')
mscAppnLs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6))
mscAppnLsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 1), )
if mibBuilder.loadTexts: mscAppnLsRowStatusTable.setStatus('mandatory')
mscAppnLsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLsIndex"))
if mibBuilder.loadTexts: mscAppnLsRowStatusEntry.setStatus('mandatory')
mscAppnLsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsRowStatus.setStatus('mandatory')
mscAppnLsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsComponentName.setStatus('mandatory')
mscAppnLsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsStorageType.setStatus('mandatory')
mscAppnLsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: mscAppnLsIndex.setStatus('mandatory')
mscAppnLsLsVcReferenceTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 10), )
if mibBuilder.loadTexts: mscAppnLsLsVcReferenceTable.setStatus('mandatory')
mscAppnLsLsVcReferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLsIndex"))
if mibBuilder.loadTexts: mscAppnLsLsVcReferenceEntry.setStatus('mandatory')
mscAppnLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsName.setStatus('mandatory')
mscAppnLsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 10, 1, 2), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsSap.setStatus('mandatory')
mscAppnLsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 11), )
if mibBuilder.loadTexts: mscAppnLsConfigTable.setStatus('mandatory')
mscAppnLsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLsIndex"))
if mibBuilder.loadTexts: mscAppnLsConfigEntry.setStatus('mandatory')
mscAppnLsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsPortName.setStatus('mandatory')
mscAppnLsFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsFeatures.setStatus('mandatory')
mscAppnLsMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsMaxTxBtuSize.setStatus('mandatory')
mscAppnLsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12), )
if mibBuilder.loadTexts: mscAppnLsOperTable.setStatus('mandatory')
mscAppnLsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLsIndex"))
if mibBuilder.loadTexts: mscAppnLsOperEntry.setStatus('mandatory')
mscAppnLsDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 30, 31))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("tokenRing", 6), ("llc2", 30), ("x25", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsDlcType.setStatus('mandatory')
mscAppnLsLinkStationState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendingActive", 2), ("active", 3), ("pendingInactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsLinkStationState.setStatus('mandatory')
mscAppnLsLinkStationSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("inactive", 1), ("sentReqOpnstn", 2), ("pendXidExch", 3), ("sentActAs", 4), ("sentSentMode", 5), ("active", 6), ("sentDeactAsOrd", 7), ("sentDiscOrd", 8), ("sentDestroyTg", 9), ("sentCreateTg", 10), ("sentConnReq", 11), ("pendRcvConnInd", 12), ("pendSendConnRsp", 13), ("sentConnRsp", 14), ("pendDeact", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsLinkStationSubState.setStatus('mandatory')
mscAppnLsActSessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsActSessCount.setStatus('mandatory')
mscAppnLsActualCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsActualCpName.setStatus('mandatory')
mscAppnLsActualCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("toBeDetermined", 0), ("networkNode", 1), ("endNode", 2), ("lowEntryNode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsActualCpType.setStatus('mandatory')
mscAppnLsDlcName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 7), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsDlcName.setStatus('mandatory')
mscAppnLsDynamicOrDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsDynamicOrDefined.setStatus('mandatory')
mscAppnLsMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsMigration.setStatus('mandatory')
mscAppnLsTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsTgNum.setStatus('mandatory')
mscAppnLsHprSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("anr", 1), ("rtp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsHprSupport.setStatus('mandatory')
mscAppnLsAnrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 12, 1, 12), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsAnrLabel.setStatus('mandatory')
mscAppnLsTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13), )
if mibBuilder.loadTexts: mscAppnLsTgCharTable.setStatus('mandatory')
mscAppnLsTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLsIndex"))
if mibBuilder.loadTexts: mscAppnLsTgCharEntry.setStatus('mandatory')
mscAppnLsEffectiveCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("n600Gbps", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsEffectiveCap.setStatus('mandatory')
mscAppnLsConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsConnectCost.setStatus('mandatory')
mscAppnLsByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsByteCost.setStatus('mandatory')
mscAppnLsSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("unKnown", 0), ("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsSecurity.setStatus('mandatory')
mscAppnLsPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153))).clone('terrestrial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsPropagationDelay.setStatus('mandatory')
mscAppnLsUserDefinedParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsUserDefinedParm1.setStatus('mandatory')
mscAppnLsUserDefinedParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsUserDefinedParm2.setStatus('mandatory')
mscAppnLsUserDefinedParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsUserDefinedParm3.setStatus('mandatory')
mscAppnLsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14), )
if mibBuilder.loadTexts: mscAppnLsStatsTable.setStatus('mandatory')
mscAppnLsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLsIndex"))
if mibBuilder.loadTexts: mscAppnLsStatsEntry.setStatus('mandatory')
mscAppnLsInXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsInXidBytes.setStatus('mandatory')
mscAppnLsInMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsInMsgBytes.setStatus('mandatory')
mscAppnLsInXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsInXidFrames.setStatus('mandatory')
mscAppnLsInMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsInMsgFrames.setStatus('mandatory')
mscAppnLsOutXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsOutXidBytes.setStatus('mandatory')
mscAppnLsOutMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsOutMsgBytes.setStatus('mandatory')
mscAppnLsOutXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsOutXidFrames.setStatus('mandatory')
mscAppnLsOutMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsOutMsgFrames.setStatus('mandatory')
mscAppnLsInInvalidSnaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsInInvalidSnaFrames.setStatus('mandatory')
mscAppnLsInSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsInSessionControlFrames.setStatus('mandatory')
mscAppnLsOutSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsOutSessionControlFrames.setStatus('mandatory')
mscAppnLsEchoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsEchoResponse.setStatus('mandatory')
mscAppnLsCurrentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsCurrentDelay.setStatus('mandatory')
mscAppnLsMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsMaxDelay.setStatus('mandatory')
mscAppnLsMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsMinDelay.setStatus('mandatory')
mscAppnLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 17), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsGoodXids.setStatus('mandatory')
mscAppnLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 6, 14, 1, 18), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLsBadXids.setStatus('mandatory')
mscAppnDirEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7))
mscAppnDirEntRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 1), )
if mibBuilder.loadTexts: mscAppnDirEntRowStatusTable.setStatus('mandatory')
mscAppnDirEntRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDirEntIndex"))
if mibBuilder.loadTexts: mscAppnDirEntRowStatusEntry.setStatus('mandatory')
mscAppnDirEntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDirEntRowStatus.setStatus('mandatory')
mscAppnDirEntComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDirEntComponentName.setStatus('mandatory')
mscAppnDirEntStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDirEntStorageType.setStatus('mandatory')
mscAppnDirEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: mscAppnDirEntIndex.setStatus('mandatory')
mscAppnDirEntOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 10), )
if mibBuilder.loadTexts: mscAppnDirEntOperTable.setStatus('mandatory')
mscAppnDirEntOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDirEntIndex"))
if mibBuilder.loadTexts: mscAppnDirEntOperEntry.setStatus('mandatory')
mscAppnDirEntServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDirEntServerName.setStatus('mandatory')
mscAppnDirEntLuOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDirEntLuOwnerName.setStatus('mandatory')
mscAppnDirEntLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("domain", 1), ("xdomain", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDirEntLocation.setStatus('mandatory')
mscAppnDirEntEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("cache", 0), ("register", 2), ("home", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDirEntEntryType.setStatus('mandatory')
mscAppnDirEntWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("explicit", 2), ("partialWildcard", 3), ("fullWildcard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDirEntWildCard.setStatus('mandatory')
mscAppnAdjNn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8))
mscAppnAdjNnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 1), )
if mibBuilder.loadTexts: mscAppnAdjNnRowStatusTable.setStatus('mandatory')
mscAppnAdjNnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnAdjNnIndex"))
if mibBuilder.loadTexts: mscAppnAdjNnRowStatusEntry.setStatus('mandatory')
mscAppnAdjNnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnAdjNnRowStatus.setStatus('mandatory')
mscAppnAdjNnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnAdjNnComponentName.setStatus('mandatory')
mscAppnAdjNnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnAdjNnStorageType.setStatus('mandatory')
mscAppnAdjNnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: mscAppnAdjNnIndex.setStatus('mandatory')
mscAppnAdjNnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 10), )
if mibBuilder.loadTexts: mscAppnAdjNnOperTable.setStatus('mandatory')
mscAppnAdjNnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnAdjNnIndex"))
if mibBuilder.loadTexts: mscAppnAdjNnOperEntry.setStatus('mandatory')
mscAppnAdjNnCpCpSessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("conLoserActive", 2), ("conWinnerActive", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnAdjNnCpCpSessStatus.setStatus('mandatory')
mscAppnAdjNnOutOfSeqTdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 10, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnAdjNnOutOfSeqTdus.setStatus('mandatory')
mscAppnAdjNnLastFrsnSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnAdjNnLastFrsnSent.setStatus('mandatory')
mscAppnAdjNnLastFrsnReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 8, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnAdjNnLastFrsnReceived.setStatus('mandatory')
mscAppnNn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9))
mscAppnNnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 1), )
if mibBuilder.loadTexts: mscAppnNnRowStatusTable.setStatus('mandatory')
mscAppnNnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnIndex"))
if mibBuilder.loadTexts: mscAppnNnRowStatusEntry.setStatus('mandatory')
mscAppnNnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnRowStatus.setStatus('mandatory')
mscAppnNnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnComponentName.setStatus('mandatory')
mscAppnNnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnStorageType.setStatus('mandatory')
mscAppnNnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: mscAppnNnIndex.setStatus('mandatory')
mscAppnNnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 10), )
if mibBuilder.loadTexts: mscAppnNnOperTable.setStatus('mandatory')
mscAppnNnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnIndex"))
if mibBuilder.loadTexts: mscAppnNnOperEntry.setStatus('mandatory')
mscAppnNnDaysLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnDaysLeft.setStatus('mandatory')
mscAppnNnNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("toBeDetermined", 0), ("networkNode", 1), ("virtualRoutingNode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnNodeType.setStatus('mandatory')
mscAppnNnResourceSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnResourceSequenceNumber.setStatus('mandatory')
mscAppnNnRouteAdditionResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnRouteAdditionResistance.setStatus('mandatory')
mscAppnNnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnStatus.setStatus('mandatory')
mscAppnNnFunctionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 9, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnFunctionSupported.setStatus('mandatory')
mscAppnLocTg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10))
mscAppnLocTgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 1), )
if mibBuilder.loadTexts: mscAppnLocTgRowStatusTable.setStatus('mandatory')
mscAppnLocTgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLocTgDestFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLocTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: mscAppnLocTgRowStatusEntry.setStatus('mandatory')
mscAppnLocTgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgRowStatus.setStatus('mandatory')
mscAppnLocTgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgComponentName.setStatus('mandatory')
mscAppnLocTgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgStorageType.setStatus('mandatory')
mscAppnLocTgDestFqcpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 17)))
if mibBuilder.loadTexts: mscAppnLocTgDestFqcpNameIndex.setStatus('mandatory')
mscAppnLocTgTransmissionGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: mscAppnLocTgTransmissionGroupIndex.setStatus('mandatory')
mscAppnLocTgOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 10), )
if mibBuilder.loadTexts: mscAppnLocTgOperTable.setStatus('mandatory')
mscAppnLocTgOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLocTgDestFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLocTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: mscAppnLocTgOperEntry.setStatus('mandatory')
mscAppnLocTgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgStatus.setStatus('mandatory')
mscAppnLocTgResourceSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgResourceSequenceNumber.setStatus('mandatory')
mscAppnLocTgLinkAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 11), )
if mibBuilder.loadTexts: mscAppnLocTgLinkAddressTable.setStatus('mandatory')
mscAppnLocTgLinkAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLocTgDestFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLocTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: mscAppnLocTgLinkAddressEntry.setStatus('mandatory')
mscAppnLocTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 11, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgDlcData.setStatus('mandatory')
mscAppnLocTgTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12), )
if mibBuilder.loadTexts: mscAppnLocTgTgCharTable.setStatus('mandatory')
mscAppnLocTgTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLocTgDestFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnLocTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: mscAppnLocTgTgCharEntry.setStatus('mandatory')
mscAppnLocTgEffectiveCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("n600Gbps", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgEffectiveCap.setStatus('mandatory')
mscAppnLocTgConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgConnectCost.setStatus('mandatory')
mscAppnLocTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgByteCost.setStatus('mandatory')
mscAppnLocTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("unKnown", 0), ("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgSecurity.setStatus('mandatory')
mscAppnLocTgPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153))).clone('terrestrial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgPropagationDelay.setStatus('mandatory')
mscAppnLocTgUserDefinedParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgUserDefinedParm1.setStatus('mandatory')
mscAppnLocTgUserDefinedParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgUserDefinedParm2.setStatus('mandatory')
mscAppnLocTgUserDefinedParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 10, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnLocTgUserDefinedParm3.setStatus('mandatory')
mscAppnIsrSess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11))
mscAppnIsrSessRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 1), )
if mibBuilder.loadTexts: mscAppnIsrSessRowStatusTable.setStatus('mandatory')
mscAppnIsrSessRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessProcedureCorrelationIdIndex"))
if mibBuilder.loadTexts: mscAppnIsrSessRowStatusEntry.setStatus('mandatory')
mscAppnIsrSessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessRowStatus.setStatus('mandatory')
mscAppnIsrSessComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessComponentName.setStatus('mandatory')
mscAppnIsrSessStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessStorageType.setStatus('mandatory')
mscAppnIsrSessFqcpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 17)))
if mibBuilder.loadTexts: mscAppnIsrSessFqcpNameIndex.setStatus('mandatory')
mscAppnIsrSessProcedureCorrelationIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 1, 1, 11), HexString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: mscAppnIsrSessProcedureCorrelationIdIndex.setStatus('mandatory')
mscAppnIsrSessOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 10), )
if mibBuilder.loadTexts: mscAppnIsrSessOperTable.setStatus('mandatory')
mscAppnIsrSessOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessProcedureCorrelationIdIndex"))
if mibBuilder.loadTexts: mscAppnIsrSessOperEntry.setStatus('mandatory')
mscAppnIsrSessTransmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessTransmissionPriority.setStatus('mandatory')
mscAppnIsrSessCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessCosName.setStatus('mandatory')
mscAppnIsrSessLimitedResource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessLimitedResource.setStatus('mandatory')
mscAppnIsrSessPriStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100))
mscAppnIsrSessPriStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 1), )
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsRowStatusTable.setStatus('mandatory')
mscAppnIsrSessPriStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessProcedureCorrelationIdIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessPriStatsIndex"))
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsRowStatusEntry.setStatus('mandatory')
mscAppnIsrSessPriStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsRowStatus.setStatus('mandatory')
mscAppnIsrSessPriStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsComponentName.setStatus('mandatory')
mscAppnIsrSessPriStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsStorageType.setStatus('mandatory')
mscAppnIsrSessPriStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsIndex.setStatus('mandatory')
mscAppnIsrSessPriStatsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10), )
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsStatsTable.setStatus('mandatory')
mscAppnIsrSessPriStatsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessProcedureCorrelationIdIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessPriStatsIndex"))
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsStatsEntry.setStatus('mandatory')
mscAppnIsrSessPriStatsRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsRxRuSize.setStatus('mandatory')
mscAppnIsrSessPriStatsMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsMaxTxBtuSize.setStatus('mandatory')
mscAppnIsrSessPriStatsMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsMaxRxBtuSize.setStatus('mandatory')
mscAppnIsrSessPriStatsMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsMaxTxPacWin.setStatus('mandatory')
mscAppnIsrSessPriStatsCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsCurTxPacWin.setStatus('mandatory')
mscAppnIsrSessPriStatsMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsMaxRxPacWin.setStatus('mandatory')
mscAppnIsrSessPriStatsCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsCurRxPacWin.setStatus('mandatory')
mscAppnIsrSessPriStatsTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsTxDataframes.setStatus('mandatory')
mscAppnIsrSessPriStatsTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsTxFmdFrames.setStatus('mandatory')
mscAppnIsrSessPriStatsTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsTxDataBytes.setStatus('mandatory')
mscAppnIsrSessPriStatsRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsRxDataFrames.setStatus('mandatory')
mscAppnIsrSessPriStatsRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsRxFmdFrames.setStatus('mandatory')
mscAppnIsrSessPriStatsRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsRxDataBytes.setStatus('mandatory')
mscAppnIsrSessPriStatsSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsSidh.setStatus('mandatory')
mscAppnIsrSessPriStatsSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsSidl.setStatus('mandatory')
mscAppnIsrSessPriStatsOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsOdai.setStatus('mandatory')
mscAppnIsrSessPriStatsLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 100, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessPriStatsLsName.setStatus('mandatory')
mscAppnIsrSessSecStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101))
mscAppnIsrSessSecStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 1), )
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsRowStatusTable.setStatus('mandatory')
mscAppnIsrSessSecStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessProcedureCorrelationIdIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessSecStatsIndex"))
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsRowStatusEntry.setStatus('mandatory')
mscAppnIsrSessSecStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsRowStatus.setStatus('mandatory')
mscAppnIsrSessSecStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsComponentName.setStatus('mandatory')
mscAppnIsrSessSecStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsStorageType.setStatus('mandatory')
mscAppnIsrSessSecStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsIndex.setStatus('mandatory')
mscAppnIsrSessSecStatsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10), )
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsStatsTable.setStatus('mandatory')
mscAppnIsrSessSecStatsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessProcedureCorrelationIdIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIsrSessSecStatsIndex"))
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsStatsEntry.setStatus('mandatory')
mscAppnIsrSessSecStatsRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsRxRuSize.setStatus('mandatory')
mscAppnIsrSessSecStatsMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsMaxTxBtuSize.setStatus('mandatory')
mscAppnIsrSessSecStatsMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsMaxRxBtuSize.setStatus('mandatory')
mscAppnIsrSessSecStatsMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsMaxTxPacWin.setStatus('mandatory')
mscAppnIsrSessSecStatsCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsCurTxPacWin.setStatus('mandatory')
mscAppnIsrSessSecStatsMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsMaxRxPacWin.setStatus('mandatory')
mscAppnIsrSessSecStatsCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsCurRxPacWin.setStatus('mandatory')
mscAppnIsrSessSecStatsTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsTxDataframes.setStatus('mandatory')
mscAppnIsrSessSecStatsTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsTxFmdFrames.setStatus('mandatory')
mscAppnIsrSessSecStatsTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsTxDataBytes.setStatus('mandatory')
mscAppnIsrSessSecStatsRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsRxDataFrames.setStatus('mandatory')
mscAppnIsrSessSecStatsRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsRxFmdFrames.setStatus('mandatory')
mscAppnIsrSessSecStatsRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsRxDataBytes.setStatus('mandatory')
mscAppnIsrSessSecStatsSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsSidh.setStatus('mandatory')
mscAppnIsrSessSecStatsSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsSidl.setStatus('mandatory')
mscAppnIsrSessSecStatsOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsOdai.setStatus('mandatory')
mscAppnIsrSessSecStatsLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 11, 101, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnIsrSessSecStatsLsName.setStatus('mandatory')
mscAppnNnTg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12))
mscAppnNnTgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 1), )
if mibBuilder.loadTexts: mscAppnNnTgRowStatusTable.setStatus('mandatory')
mscAppnNnTgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgOwnerFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgDestFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: mscAppnNnTgRowStatusEntry.setStatus('mandatory')
mscAppnNnTgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgRowStatus.setStatus('mandatory')
mscAppnNnTgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgComponentName.setStatus('mandatory')
mscAppnNnTgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgStorageType.setStatus('mandatory')
mscAppnNnTgOwnerFqcpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 17)))
if mibBuilder.loadTexts: mscAppnNnTgOwnerFqcpNameIndex.setStatus('mandatory')
mscAppnNnTgDestFqcpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 17)))
if mibBuilder.loadTexts: mscAppnNnTgDestFqcpNameIndex.setStatus('mandatory')
mscAppnNnTgTransmissionGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: mscAppnNnTgTransmissionGroupIndex.setStatus('mandatory')
mscAppnNnTgOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 10), )
if mibBuilder.loadTexts: mscAppnNnTgOperTable.setStatus('mandatory')
mscAppnNnTgOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgOwnerFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgDestFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: mscAppnNnTgOperEntry.setStatus('mandatory')
mscAppnNnTgFlowReductionSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgFlowReductionSequenceNumber.setStatus('mandatory')
mscAppnNnTgDaysLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgDaysLeft.setStatus('mandatory')
mscAppnNnTgResourceSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgResourceSequenceNumber.setStatus('mandatory')
mscAppnNnTgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgStatus.setStatus('mandatory')
mscAppnNnTgLinkAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 11), )
if mibBuilder.loadTexts: mscAppnNnTgLinkAddressTable.setStatus('mandatory')
mscAppnNnTgLinkAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgOwnerFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgDestFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: mscAppnNnTgLinkAddressEntry.setStatus('mandatory')
mscAppnNnTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 11, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgDlcData.setStatus('mandatory')
mscAppnNnTgTgCharTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12), )
if mibBuilder.loadTexts: mscAppnNnTgTgCharTable.setStatus('mandatory')
mscAppnNnTgTgCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgOwnerFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgDestFqcpNameIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnNnTgTransmissionGroupIndex"))
if mibBuilder.loadTexts: mscAppnNnTgTgCharEntry.setStatus('mandatory')
mscAppnNnTgEffectiveCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("n600Gbps", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgEffectiveCap.setStatus('mandatory')
mscAppnNnTgConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgConnectCost.setStatus('mandatory')
mscAppnNnTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgByteCost.setStatus('mandatory')
mscAppnNnTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("unKnown", 0), ("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgSecurity.setStatus('mandatory')
mscAppnNnTgPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153))).clone('terrestrial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgPropagationDelay.setStatus('mandatory')
mscAppnNnTgUserDefinedParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgUserDefinedParm1.setStatus('mandatory')
mscAppnNnTgUserDefinedParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgUserDefinedParm2.setStatus('mandatory')
mscAppnNnTgUserDefinedParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 12, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnNnTgUserDefinedParm3.setStatus('mandatory')
mscAppnRtp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13))
mscAppnRtpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 1), )
if mibBuilder.loadTexts: mscAppnRtpRowStatusTable.setStatus('mandatory')
mscAppnRtpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnRtpIndex"))
if mibBuilder.loadTexts: mscAppnRtpRowStatusEntry.setStatus('mandatory')
mscAppnRtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpRowStatus.setStatus('mandatory')
mscAppnRtpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpComponentName.setStatus('mandatory')
mscAppnRtpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpStorageType.setStatus('mandatory')
mscAppnRtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: mscAppnRtpIndex.setStatus('mandatory')
mscAppnRtpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10), )
if mibBuilder.loadTexts: mscAppnRtpOperTable.setStatus('mandatory')
mscAppnRtpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnRtpIndex"))
if mibBuilder.loadTexts: mscAppnRtpOperEntry.setStatus('mandatory')
mscAppnRtpLocalLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpLocalLsName.setStatus('mandatory')
mscAppnRtpRemoteCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpRemoteCpName.setStatus('mandatory')
mscAppnRtpCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpCosName.setStatus('mandatory')
mscAppnRtpActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpActiveSessions.setStatus('mandatory')
mscAppnRtpLocalTcid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1, 5), HexString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpLocalTcid.setStatus('mandatory')
mscAppnRtpRemoteTcid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1, 6), HexString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpRemoteTcid.setStatus('mandatory')
mscAppnRtpIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpIdleTimer.setStatus('mandatory')
mscAppnRtpMaxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpMaxBtuSize.setStatus('mandatory')
mscAppnRtpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11), )
if mibBuilder.loadTexts: mscAppnRtpStatsTable.setStatus('mandatory')
mscAppnRtpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnRtpIndex"))
if mibBuilder.loadTexts: mscAppnRtpStatsEntry.setStatus('mandatory')
mscAppnRtpTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpTxBytes.setStatus('mandatory')
mscAppnRtpRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpRxBytes.setStatus('mandatory')
mscAppnRtpBytesResent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpBytesResent.setStatus('mandatory')
mscAppnRtpBytesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpBytesDiscarded.setStatus('mandatory')
mscAppnRtpPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpPktTx.setStatus('mandatory')
mscAppnRtpPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpPktRx.setStatus('mandatory')
mscAppnRtpPktResent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpPktResent.setStatus('mandatory')
mscAppnRtpPktDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpPktDiscard.setStatus('mandatory')
mscAppnRtpLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpLostFrames.setStatus('mandatory')
mscAppnRtpCurTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpCurTxRate.setStatus('mandatory')
mscAppnRtpMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpMaxTxRate.setStatus('mandatory')
mscAppnRtpMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpMinTxRate.setStatus('mandatory')
mscAppnRtpCurRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpCurRxRate.setStatus('mandatory')
mscAppnRtpMaxRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpMaxRxRate.setStatus('mandatory')
mscAppnRtpMinRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpMinRxRate.setStatus('mandatory')
mscAppnRtpBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpBurstSize.setStatus('mandatory')
mscAppnRtpUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpUptime.setStatus('mandatory')
mscAppnRtpSmoothRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpSmoothRoundTripTime.setStatus('mandatory')
mscAppnRtpLastRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpLastRoundTripTime.setStatus('mandatory')
mscAppnRtpShortReqTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpShortReqTimer.setStatus('mandatory')
mscAppnRtpShortReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 21), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpShortReqTimeouts.setStatus('mandatory')
mscAppnRtpIdleTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 22), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpIdleTimeouts.setStatus('mandatory')
mscAppnRtpRxInvalidSnaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 23), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpRxInvalidSnaFrames.setStatus('mandatory')
mscAppnRtpInSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 24), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpInSessionControlFrames.setStatus('mandatory')
mscAppnRtpOutSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 13, 11, 1, 25), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnRtpOutSessionControlFrames.setStatus('mandatory')
mscAppnDlu = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14))
mscAppnDluRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 1), )
if mibBuilder.loadTexts: mscAppnDluRowStatusTable.setStatus('mandatory')
mscAppnDluRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluIndex"))
if mibBuilder.loadTexts: mscAppnDluRowStatusEntry.setStatus('mandatory')
mscAppnDluRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluRowStatus.setStatus('mandatory')
mscAppnDluComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluComponentName.setStatus('mandatory')
mscAppnDluStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluStorageType.setStatus('mandatory')
mscAppnDluIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: mscAppnDluIndex.setStatus('mandatory')
mscAppnDluOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 10), )
if mibBuilder.loadTexts: mscAppnDluOperTable.setStatus('mandatory')
mscAppnDluOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluIndex"))
if mibBuilder.loadTexts: mscAppnDluOperEntry.setStatus('mandatory')
mscAppnDluSscpSessActive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpSessActive.setStatus('mandatory')
mscAppnDluPluSessActive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluPluSessActive.setStatus('mandatory')
mscAppnDluDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDlusName.setStatus('mandatory')
mscAppnDluPluName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 10, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluPluName.setStatus('mandatory')
mscAppnDluNauAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluNauAddress.setStatus('mandatory')
mscAppnDluSscp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100))
mscAppnDluSscpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 1), )
if mibBuilder.loadTexts: mscAppnDluSscpRowStatusTable.setStatus('mandatory')
mscAppnDluSscpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluSscpIndex"))
if mibBuilder.loadTexts: mscAppnDluSscpRowStatusEntry.setStatus('mandatory')
mscAppnDluSscpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpRowStatus.setStatus('mandatory')
mscAppnDluSscpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpComponentName.setStatus('mandatory')
mscAppnDluSscpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpStorageType.setStatus('mandatory')
mscAppnDluSscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDluSscpIndex.setStatus('mandatory')
mscAppnDluSscpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10), )
if mibBuilder.loadTexts: mscAppnDluSscpStatsTable.setStatus('mandatory')
mscAppnDluSscpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluSscpIndex"))
if mibBuilder.loadTexts: mscAppnDluSscpStatsEntry.setStatus('mandatory')
mscAppnDluSscpRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpRxRuSize.setStatus('mandatory')
mscAppnDluSscpMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpMaxTxBtuSize.setStatus('mandatory')
mscAppnDluSscpMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpMaxRxBtuSize.setStatus('mandatory')
mscAppnDluSscpMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpMaxTxPacWin.setStatus('mandatory')
mscAppnDluSscpCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpCurTxPacWin.setStatus('mandatory')
mscAppnDluSscpMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpMaxRxPacWin.setStatus('mandatory')
mscAppnDluSscpCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpCurRxPacWin.setStatus('mandatory')
mscAppnDluSscpTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpTxDataframes.setStatus('mandatory')
mscAppnDluSscpTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpTxFmdFrames.setStatus('mandatory')
mscAppnDluSscpTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpTxDataBytes.setStatus('mandatory')
mscAppnDluSscpRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpRxDataFrames.setStatus('mandatory')
mscAppnDluSscpRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpRxFmdFrames.setStatus('mandatory')
mscAppnDluSscpRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpRxDataBytes.setStatus('mandatory')
mscAppnDluSscpSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpSidh.setStatus('mandatory')
mscAppnDluSscpSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpSidl.setStatus('mandatory')
mscAppnDluSscpOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpOdai.setStatus('mandatory')
mscAppnDluSscpLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 100, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluSscpLsName.setStatus('mandatory')
mscAppnDluUsStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101))
mscAppnDluUsStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 1), )
if mibBuilder.loadTexts: mscAppnDluUsStatRowStatusTable.setStatus('mandatory')
mscAppnDluUsStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluUsStatIndex"))
if mibBuilder.loadTexts: mscAppnDluUsStatRowStatusEntry.setStatus('mandatory')
mscAppnDluUsStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatRowStatus.setStatus('mandatory')
mscAppnDluUsStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatComponentName.setStatus('mandatory')
mscAppnDluUsStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatStorageType.setStatus('mandatory')
mscAppnDluUsStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDluUsStatIndex.setStatus('mandatory')
mscAppnDluUsStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10), )
if mibBuilder.loadTexts: mscAppnDluUsStatStatsTable.setStatus('mandatory')
mscAppnDluUsStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluUsStatIndex"))
if mibBuilder.loadTexts: mscAppnDluUsStatStatsEntry.setStatus('mandatory')
mscAppnDluUsStatRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatRxRuSize.setStatus('mandatory')
mscAppnDluUsStatMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatMaxTxBtuSize.setStatus('mandatory')
mscAppnDluUsStatMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatMaxRxBtuSize.setStatus('mandatory')
mscAppnDluUsStatMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatMaxTxPacWin.setStatus('mandatory')
mscAppnDluUsStatCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatCurTxPacWin.setStatus('mandatory')
mscAppnDluUsStatMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatMaxRxPacWin.setStatus('mandatory')
mscAppnDluUsStatCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatCurRxPacWin.setStatus('mandatory')
mscAppnDluUsStatTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatTxDataframes.setStatus('mandatory')
mscAppnDluUsStatTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatTxFmdFrames.setStatus('mandatory')
mscAppnDluUsStatTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatTxDataBytes.setStatus('mandatory')
mscAppnDluUsStatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatRxDataFrames.setStatus('mandatory')
mscAppnDluUsStatRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatRxFmdFrames.setStatus('mandatory')
mscAppnDluUsStatRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatRxDataBytes.setStatus('mandatory')
mscAppnDluUsStatSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatSidh.setStatus('mandatory')
mscAppnDluUsStatSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatSidl.setStatus('mandatory')
mscAppnDluUsStatOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatOdai.setStatus('mandatory')
mscAppnDluUsStatLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 101, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluUsStatLsName.setStatus('mandatory')
mscAppnDluDsStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102))
mscAppnDluDsStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 1), )
if mibBuilder.loadTexts: mscAppnDluDsStatRowStatusTable.setStatus('mandatory')
mscAppnDluDsStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluDsStatIndex"))
if mibBuilder.loadTexts: mscAppnDluDsStatRowStatusEntry.setStatus('mandatory')
mscAppnDluDsStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatRowStatus.setStatus('mandatory')
mscAppnDluDsStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatComponentName.setStatus('mandatory')
mscAppnDluDsStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatStorageType.setStatus('mandatory')
mscAppnDluDsStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDluDsStatIndex.setStatus('mandatory')
mscAppnDluDsStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10), )
if mibBuilder.loadTexts: mscAppnDluDsStatStatsTable.setStatus('mandatory')
mscAppnDluDsStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDluDsStatIndex"))
if mibBuilder.loadTexts: mscAppnDluDsStatStatsEntry.setStatus('mandatory')
mscAppnDluDsStatRxRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatRxRuSize.setStatus('mandatory')
mscAppnDluDsStatMaxTxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatMaxTxBtuSize.setStatus('mandatory')
mscAppnDluDsStatMaxRxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatMaxRxBtuSize.setStatus('mandatory')
mscAppnDluDsStatMaxTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatMaxTxPacWin.setStatus('mandatory')
mscAppnDluDsStatCurTxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatCurTxPacWin.setStatus('mandatory')
mscAppnDluDsStatMaxRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatMaxRxPacWin.setStatus('mandatory')
mscAppnDluDsStatCurRxPacWin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatCurRxPacWin.setStatus('mandatory')
mscAppnDluDsStatTxDataframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatTxDataframes.setStatus('mandatory')
mscAppnDluDsStatTxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatTxFmdFrames.setStatus('mandatory')
mscAppnDluDsStatTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatTxDataBytes.setStatus('mandatory')
mscAppnDluDsStatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatRxDataFrames.setStatus('mandatory')
mscAppnDluDsStatRxFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatRxFmdFrames.setStatus('mandatory')
mscAppnDluDsStatRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatRxDataBytes.setStatus('mandatory')
mscAppnDluDsStatSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 14), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatSidh.setStatus('mandatory')
mscAppnDluDsStatSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 15), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatSidl.setStatus('mandatory')
mscAppnDluDsStatOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatOdai.setStatus('mandatory')
mscAppnDluDsStatLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 14, 102, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDluDsStatLsName.setStatus('mandatory')
mscAppnDlus = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15))
mscAppnDlusRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 1), )
if mibBuilder.loadTexts: mscAppnDlusRowStatusTable.setStatus('mandatory')
mscAppnDlusRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlusIndex"))
if mibBuilder.loadTexts: mscAppnDlusRowStatusEntry.setStatus('mandatory')
mscAppnDlusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusRowStatus.setStatus('mandatory')
mscAppnDlusComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusComponentName.setStatus('mandatory')
mscAppnDlusStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusStorageType.setStatus('mandatory')
mscAppnDlusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: mscAppnDlusIndex.setStatus('mandatory')
mscAppnDlusOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 10), )
if mibBuilder.loadTexts: mscAppnDlusOperTable.setStatus('mandatory')
mscAppnDlusOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlusIndex"))
if mibBuilder.loadTexts: mscAppnDlusOperEntry.setStatus('mandatory')
mscAppnDlusPrimaryDlus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusPrimaryDlus.setStatus('mandatory')
mscAppnDlusPipeState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("inactive", 0), ("pendingActive", 1), ("active", 2), ("pendingInactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusPipeState.setStatus('mandatory')
mscAppnDlusActivePUs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusActivePUs.setStatus('mandatory')
mscAppnDlusDlusStatTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11), )
if mibBuilder.loadTexts: mscAppnDlusDlusStatTable.setStatus('mandatory')
mscAppnDlusDlusStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDlusIndex"))
if mibBuilder.loadTexts: mscAppnDlusDlusStatEntry.setStatus('mandatory')
mscAppnDlusReqActPuTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusReqActPuTx.setStatus('mandatory')
mscAppnDlusReqActPuRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusReqActPuRspRx.setStatus('mandatory')
mscAppnDlusActPuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusActPuRx.setStatus('mandatory')
mscAppnDlusActPuRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusActPuRspTx.setStatus('mandatory')
mscAppnDlusReqDactPuTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusReqDactPuTx.setStatus('mandatory')
mscAppnDlusReqDactPuRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusReqDactPuRspRx.setStatus('mandatory')
mscAppnDlusDactPuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusDactPuRx.setStatus('mandatory')
mscAppnDlusDactPuRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusDactPuRspTx.setStatus('mandatory')
mscAppnDlusActLuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusActLuRx.setStatus('mandatory')
mscAppnDlusActLuRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusActLuRspTx.setStatus('mandatory')
mscAppnDlusDactLuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusDactLuRx.setStatus('mandatory')
mscAppnDlusDactLuRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusDactLuRspTx.setStatus('mandatory')
mscAppnDlusSscpPuMuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusSscpPuMuRx.setStatus('mandatory')
mscAppnDlusSscpPuMuTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusSscpPuMuTx.setStatus('mandatory')
mscAppnDlusSscpLuMuRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusSscpLuMuRx.setStatus('mandatory')
mscAppnDlusSscpLuMuTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 15, 11, 1, 16), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDlusSscpLuMuTx.setStatus('mandatory')
mscAppnDLUR = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16))
mscAppnDLURRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 1), )
if mibBuilder.loadTexts: mscAppnDLURRowStatusTable.setStatus('mandatory')
mscAppnDLURRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDLURIndex"))
if mibBuilder.loadTexts: mscAppnDLURRowStatusEntry.setStatus('mandatory')
mscAppnDLURRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDLURRowStatus.setStatus('mandatory')
mscAppnDLURComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDLURComponentName.setStatus('mandatory')
mscAppnDLURStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnDLURStorageType.setStatus('mandatory')
mscAppnDLURIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnDLURIndex.setStatus('mandatory')
mscAppnDLURDlurParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 2), )
if mibBuilder.loadTexts: mscAppnDLURDlurParmsTable.setStatus('mandatory')
mscAppnDLURDlurParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 2, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnDLURIndex"))
if mibBuilder.loadTexts: mscAppnDLURDlurParmsEntry.setStatus('mandatory')
mscAppnDLURPrimaryDefDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 2, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDLURPrimaryDefDlusName.setStatus('mandatory')
mscAppnDLURSecondaryDefDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 2, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDLURSecondaryDefDlusName.setStatus('mandatory')
mscAppnDLURDlusRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDLURDlusRetryTimeout.setStatus('mandatory')
mscAppnDLURDlusRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 16, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnDLURDlusRetryLimit.setStatus('mandatory')
mscAppnCos = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17))
mscAppnCosRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 1), )
if mibBuilder.loadTexts: mscAppnCosRowStatusTable.setStatus('mandatory')
mscAppnCosRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosIndex"))
if mibBuilder.loadTexts: mscAppnCosRowStatusEntry.setStatus('mandatory')
mscAppnCosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosRowStatus.setStatus('mandatory')
mscAppnCosComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnCosComponentName.setStatus('mandatory')
mscAppnCosStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnCosStorageType.setStatus('mandatory')
mscAppnCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: mscAppnCosIndex.setStatus('mandatory')
mscAppnCosProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 104), )
if mibBuilder.loadTexts: mscAppnCosProvTable.setStatus('mandatory')
mscAppnCosProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 104, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosIndex"))
if mibBuilder.loadTexts: mscAppnCosProvEntry.setStatus('mandatory')
mscAppnCosTransmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTransmissionPriority.setStatus('mandatory')
mscAppnCosTg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10))
mscAppnCosTgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 1), )
if mibBuilder.loadTexts: mscAppnCosTgRowStatusTable.setStatus('mandatory')
mscAppnCosTgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosTgIndex"))
if mibBuilder.loadTexts: mscAppnCosTgRowStatusEntry.setStatus('mandatory')
mscAppnCosTgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgRowStatus.setStatus('mandatory')
mscAppnCosTgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnCosTgComponentName.setStatus('mandatory')
mscAppnCosTgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnCosTgStorageType.setStatus('mandatory')
mscAppnCosTgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: mscAppnCosTgIndex.setStatus('mandatory')
mscAppnCosTgProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10), )
if mibBuilder.loadTexts: mscAppnCosTgProvTable.setStatus('mandatory')
mscAppnCosTgProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosTgIndex"))
if mibBuilder.loadTexts: mscAppnCosTgProvEntry.setStatus('mandatory')
mscAppnCosTgMinEffectiveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("max", 255))).clone('min')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinEffectiveCapacity.setStatus('mandatory')
mscAppnCosTgMaxEffectiveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255))).clone(namedValues=NamedValues(("min", 0), ("n170bps", 1), ("n190bps", 2), ("n210bps", 3), ("n230bps", 4), ("n240bps", 5), ("n260bps", 6), ("n280bps", 7), ("n300bps", 8), ("n340bps", 9), ("n380bps", 10), ("n410bps", 11), ("n450bps", 12), ("n490bps", 13), ("n530bps", 14), ("n560bps", 15), ("n600bps", 16), ("n680bps", 17), ("n750bps", 18), ("n830bps", 19), ("n900bps", 20), ("n980bps", 21), ("n1050bps", 22), ("n1130bps", 23), ("n1200bps", 24), ("n1350bps", 25), ("n1500bps", 26), ("n1700bps", 27), ("n1800bps", 28), ("n2000bps", 29), ("n2100bps", 30), ("n2300bps", 31), ("n2400bps", 32), ("n2700bps", 33), ("n3000bps", 34), ("n3300bps", 35), ("n3600bps", 36), ("n3900bps", 37), ("n4200bps", 38), ("n4500bps", 39), ("n4800bps", 40), ("n5400bps", 41), ("n6000bps", 42), ("n6600bps", 43), ("n7200bps", 44), ("n7800bps", 45), ("n8400bps", 46), ("n9000bps", 47), ("n9600bps", 48), ("n10800bps", 49), ("n12000bps", 50), ("n13200bps", 51), ("n14400bps", 52), ("n15600bps", 53), ("n17kbps", 54), ("n18kbps", 55), ("n19kbps", 56), ("n22kbps", 57), ("n24kbps", 58), ("n26kbps", 59), ("n29kbps", 60), ("n31kbps", 61), ("n34kbps", 62), ("n36kbps", 63), ("n38kbps", 64), ("n43kbps", 65), ("n48kbps", 66), ("n53kbps", 67), ("n58kbps", 68), ("n62kbps", 69), ("n67kbps", 70), ("n72kbps", 71), ("n77kbps", 72), ("n86kbps", 73), ("n96kbps", 74), ("n106kbps", 75), ("n115kbps", 76), ("n125kbps", 77), ("n134kbps", 78), ("n144kbps", 79), ("n154kbps", 80), ("n170kbps", 81), ("n190kbps", 82), ("n210kbps", 83), ("n230kbps", 84), ("n250kbps", 85), ("n270kbps", 86), ("n290kbps", 87), ("n310kbps", 88), ("n350kbps", 89), ("n380kbps", 90), ("n420kbps", 91), ("n460kbps", 92), ("n500kbps", 93), ("n540kbps", 94), ("n580kbps", 95), ("n610kbps", 96), ("n690kbps", 97), ("n770kbps", 98), ("n840kbps", 99), ("n920kbps", 100), ("n1000kbps", 101), ("n1080kbps", 102), ("n1150kbps", 103), ("n1230kbps", 104), ("n1380kbps", 105), ("n1540kbps", 106), ("n1700kbps", 107), ("n1800kbps", 108), ("n2000kbps", 109), ("n2200kbps", 110), ("n2300kbps", 111), ("n2500kbps", 112), ("n2800kbps", 113), ("n3100kbps", 114), ("n3400kbps", 115), ("n3700kbps", 116), ("n4000kbps", 117), ("n4300kbps", 118), ("n4600kbps", 119), ("n4900kbps", 120), ("n5500kbps", 121), ("n6100kbps", 122), ("n6800kbps", 123), ("n7400kbps", 124), ("n8000kbps", 125), ("n8600kbps", 126), ("n9200kbps", 127), ("n9800kbps", 128), ("n11100kbps", 129), ("n12300kbps", 130), ("n13500kbps", 131), ("n14700kbps", 132), ("n16Mbps", 133), ("n17Mbps", 134), ("n18Mbps", 135), ("n20Mbps", 136), ("n22Mbps", 137), ("n25Mbps", 138), ("n27Mbps", 139), ("n29Mbps", 140), ("n32Mbps", 141), ("n34Mbps", 142), ("n37Mbps", 143), ("n39Mbps", 144), ("n44Mbps", 145), ("n49Mbps", 146), ("n54Mbps", 147), ("n59Mbps", 148), ("n64Mbps", 149), ("n69Mbps", 150), ("n74Mbps", 151), ("n79Mbps", 152), ("n88Mbps", 153), ("n98Mbps", 154), ("n108Mbps", 155), ("n118Mbps", 156), ("n128Mbps", 157), ("n138Mbps", 158), ("n147Mbps", 159), ("n157Mbps", 160), ("n180Mbps", 161), ("n200Mbps", 162), ("n220Mbps", 163), ("n240Mbps", 164), ("n260Mbps", 165), ("n280Mbps", 166), ("n290Mbps", 167), ("n310Mbps", 168), ("n350Mbps", 169), ("n390Mbps", 170), ("n430Mbps", 171), ("n470Mbps", 172), ("n510Mbps", 173), ("n550Mbps", 174), ("n590Mbps", 175), ("n630Mbps", 176), ("n710Mbps", 177), ("n790Mbps", 178), ("n870Mbps", 179), ("n940Mbps", 180), ("n1020Mbps", 181), ("n1100Mbps", 182), ("n1180Mbps", 183), ("n1260Mbps", 184), ("n1420Mbps", 185), ("n1570Mbps", 186), ("n1700Mbps", 187), ("n1900Mbps", 188), ("n2000Mbps", 189), ("n2200Mbps", 190), ("n2400Mbps", 191), ("n2500Mbps", 192), ("n2800Mbps", 193), ("n3100Mbps", 194), ("n3500Mbps", 195), ("n3800Mbps", 196), ("n4100Mbps", 197), ("n4400Mbps", 198), ("n4700Mbps", 199), ("n5000Mbps", 200), ("n5700Mbps", 201), ("n6300Mbps", 202), ("n6900Mbps", 203), ("n7500Mbps", 204), ("n8200Mbps", 205), ("n8800Mbps", 206), ("n9400Mbps", 207), ("n10100Mbps", 208), ("n11300Mbps", 209), ("n12600Mbps", 210), ("n13800Mbps", 211), ("n15100Mbps", 212), ("n16Gbps", 213), ("n18Gbps", 214), ("n19Gbps", 215), ("n20Gbps", 216), ("n23Gbps", 217), ("n25Gbps", 218), ("n28Gbps", 219), ("n30Gbps", 220), ("n33Gbps", 221), ("n35Gbps", 222), ("n38Gbps", 223), ("n40Gbps", 224), ("n45Gbps", 225), ("n50Gbps", 226), ("n55Gbps", 227), ("n60Gbps", 228), ("n65Gbps", 229), ("n70Gbps", 230), ("n75Gbps", 231), ("n81Gbps", 232), ("n91Gbps", 233), ("n101Gbps", 234), ("n111Gbps", 235), ("n121Gbps", 236), ("n131Gbps", 237), ("n141Gbps", 238), ("n151Gbps", 239), ("n160Gbps", 240), ("n180Gbps", 241), ("n200Gbps", 242), ("n220Gbps", 243), ("n240Gbps", 244), ("n260Gbps", 245), ("n280Gbps", 246), ("n300Gbps", 247), ("n320Gbps", 248), ("n360Gbps", 249), ("n400Gbps", 250), ("n440Gbps", 251), ("n480Gbps", 252), ("n520Gbps", 253), ("n560Gbps", 254)) + NamedValues(("max", 255))).clone('max')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxEffectiveCapacity.setStatus('mandatory')
mscAppnCosTgMinConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinConnectCost.setStatus('mandatory')
mscAppnCosTgMaxConnectCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxConnectCost.setStatus('mandatory')
mscAppnCosTgMinByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinByteCost.setStatus('mandatory')
mscAppnCosTgMaxByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxByteCost.setStatus('mandatory')
mscAppnCosTgMinSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('nonSecure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinSecurity.setStatus('mandatory')
mscAppnCosTgMaxSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonSecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192))).clone('guardedRadiation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxSecurity.setStatus('mandatory')
mscAppnCosTgMinPropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153, 255))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153), ("maximum", 255))).clone('minimum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinPropDelay.setStatus('mandatory')
mscAppnCosTgMaxPropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 76, 113, 145, 153, 255))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 76), ("terrestrial", 113), ("packetSwitched", 145), ("long", 153), ("maximum", 255))).clone('maximum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxPropDelay.setStatus('mandatory')
mscAppnCosTgMinModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinModemClass.setStatus('mandatory')
mscAppnCosTgMaxModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxModemClass.setStatus('mandatory')
mscAppnCosTgMinUserDefParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinUserDefParm1.setStatus('mandatory')
mscAppnCosTgMaxUserDefParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxUserDefParm1.setStatus('mandatory')
mscAppnCosTgMinUserDefParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinUserDefParm2.setStatus('mandatory')
mscAppnCosTgMaxUserDefParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxUserDefParm2.setStatus('mandatory')
mscAppnCosTgMinUserDefParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMinUserDefParm3.setStatus('mandatory')
mscAppnCosTgMaxUserDefParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 10, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosTgMaxUserDefParm3.setStatus('mandatory')
mscAppnCosNode = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11))
mscAppnCosNodeRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 1), )
if mibBuilder.loadTexts: mscAppnCosNodeRowStatusTable.setStatus('mandatory')
mscAppnCosNodeRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosNodeIndex"))
if mibBuilder.loadTexts: mscAppnCosNodeRowStatusEntry.setStatus('mandatory')
mscAppnCosNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosNodeRowStatus.setStatus('mandatory')
mscAppnCosNodeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnCosNodeComponentName.setStatus('mandatory')
mscAppnCosNodeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnCosNodeStorageType.setStatus('mandatory')
mscAppnCosNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: mscAppnCosNodeIndex.setStatus('mandatory')
mscAppnCosNodeProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 10), )
if mibBuilder.loadTexts: mscAppnCosNodeProvTable.setStatus('mandatory')
mscAppnCosNodeProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnCosNodeIndex"))
if mibBuilder.loadTexts: mscAppnCosNodeProvEntry.setStatus('mandatory')
mscAppnCosNodeMinRouteAddResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosNodeMinRouteAddResistance.setStatus('mandatory')
mscAppnCosNodeMaxRouteAddResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosNodeMaxRouteAddResistance.setStatus('mandatory')
mscAppnCosNodeMinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uncongested", 0), ("congested", 1))).clone('uncongested')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosNodeMinStatus.setStatus('mandatory')
mscAppnCosNodeMaxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 17, 11, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uncongested", 0), ("congested", 1))).clone('uncongested')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnCosNodeMaxStatus.setStatus('mandatory')
mscAppnFrSvc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18))
mscAppnFrSvcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 1), )
if mibBuilder.loadTexts: mscAppnFrSvcRowStatusTable.setStatus('mandatory')
mscAppnFrSvcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnFrSvcIndex"))
if mibBuilder.loadTexts: mscAppnFrSvcRowStatusEntry.setStatus('mandatory')
mscAppnFrSvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnFrSvcRowStatus.setStatus('mandatory')
mscAppnFrSvcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnFrSvcComponentName.setStatus('mandatory')
mscAppnFrSvcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnFrSvcStorageType.setStatus('mandatory')
mscAppnFrSvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAppnFrSvcIndex.setStatus('mandatory')
mscAppnFrSvcBanTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 10), )
if mibBuilder.loadTexts: mscAppnFrSvcBanTable.setStatus('mandatory')
mscAppnFrSvcBanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnFrSvcIndex"))
if mibBuilder.loadTexts: mscAppnFrSvcBanEntry.setStatus('mandatory')
mscAppnFrSvcBanLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 10, 1, 1), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="4fff00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnFrSvcBanLocalMac.setStatus('mandatory')
mscAppnFrSvcBanLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 10, 1, 2), Hex().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ValueRangeConstraint(24, 24), ValueRangeConstraint(28, 28), ValueRangeConstraint(32, 32), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), ValueRangeConstraint(72, 72), ValueRangeConstraint(76, 76), ValueRangeConstraint(80, 80), ValueRangeConstraint(84, 84), ValueRangeConstraint(88, 88), ValueRangeConstraint(92, 92), ValueRangeConstraint(96, 96), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(144, 144), ValueRangeConstraint(148, 148), ValueRangeConstraint(152, 152), ValueRangeConstraint(156, 156), ValueRangeConstraint(160, 160), ValueRangeConstraint(164, 164), ValueRangeConstraint(168, 168), ValueRangeConstraint(172, 172), ValueRangeConstraint(176, 176), ValueRangeConstraint(180, 180), ValueRangeConstraint(184, 184), ValueRangeConstraint(188, 188), ValueRangeConstraint(192, 192), ValueRangeConstraint(196, 196), ValueRangeConstraint(200, 200), ValueRangeConstraint(204, 204), ValueRangeConstraint(208, 208), ValueRangeConstraint(212, 212), ValueRangeConstraint(216, 216), ValueRangeConstraint(220, 220), ValueRangeConstraint(224, 224), ValueRangeConstraint(228, 228), ValueRangeConstraint(232, 232), ValueRangeConstraint(236, 236), ValueRangeConstraint(240, 240), ValueRangeConstraint(244, 244), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), )).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnFrSvcBanLocalSap.setStatus('mandatory')
mscAppnFrSvcProvisionedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 11), )
if mibBuilder.loadTexts: mscAppnFrSvcProvisionedTable.setStatus('mandatory')
mscAppnFrSvcProvisionedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnFrSvcIndex"))
if mibBuilder.loadTexts: mscAppnFrSvcProvisionedEntry.setStatus('mandatory')
mscAppnFrSvcMaximumFrameRelaySvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3072)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnFrSvcMaximumFrameRelaySvcs.setStatus('mandatory')
mscAppnFrSvcRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnFrSvcRateEnforcement.setStatus('mandatory')
mscAppnFrSvcMaximumCir = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 52000000)).clone(2048000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAppnFrSvcMaximumCir.setStatus('mandatory')
mscAppnFrSvcOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 12), )
if mibBuilder.loadTexts: mscAppnFrSvcOperationalTable.setStatus('mandatory')
mscAppnFrSvcOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnIndex"), (0, "Nortel-MsCarrier-MscPassport-AppnMIB", "mscAppnFrSvcIndex"))
if mibBuilder.loadTexts: mscAppnFrSvcOperationalEntry.setStatus('mandatory')
mscAppnFrSvcCurrentNumberOfSvcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 110, 18, 12, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAppnFrSvcCurrentNumberOfSvcCalls.setStatus('mandatory')
appnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 1))
appnGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 1, 1))
appnGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 1, 1, 3))
appnGroupCA02DevelopmentLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 1, 1, 3, 1))
appnGroupCA0214 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 1, 1, 3, 1, 14))
appnGroupCA0214A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 1, 1, 3, 1, 14, 1))
appnCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 3))
appnCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 3, 1))
appnCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 3, 1, 3))
appnCapabilitiesCA02DevelopmentLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 3, 1, 3, 1))
appnCapabilitiesCA0214 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 3, 1, 3, 1, 14))
appnCapabilitiesCA0214A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 29, 3, 1, 3, 1, 14, 1))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AppnMIB", mscAppnLsLinkStationSubState=mscAppnLsLinkStationSubState, appnCapabilitiesCA=appnCapabilitiesCA, mscAppnAdjNnOperEntry=mscAppnAdjNnOperEntry, mscAppnDlciOperationalState=mscAppnDlciOperationalState, mscAppnDlciDcComponentName=mscAppnDlciDcComponentName, mscAppnDluUsStatRowStatusEntry=mscAppnDluUsStatRowStatusEntry, mscAppnDLURDlurParmsTable=mscAppnDLURDlurParmsTable, mscAppnDlciAdminState=mscAppnDlciAdminState, mscAppnDirEntRowStatusTable=mscAppnDirEntRowStatusTable, mscAppnRtpShortReqTimeouts=mscAppnRtpShortReqTimeouts, appnGroupCA02=appnGroupCA02, mscAppnPortUserDefinedParm3=mscAppnPortUserDefinedParm3, mscAppnIsrSessPriStatsRowStatusEntry=mscAppnIsrSessPriStatsRowStatusEntry, mscAppnCosTgMinUserDefParm1=mscAppnCosTgMinUserDefParm1, mscAppnNnTgTransmissionGroupIndex=mscAppnNnTgTransmissionGroupIndex, mscAppnNnTgTgCharEntry=mscAppnNnTgTgCharEntry, mscAppnDlciVcSendSequenceNumber=mscAppnDlciVcSendSequenceNumber, mscAppnFrSvcBanTable=mscAppnFrSvcBanTable, mscAppnLsOutMsgFrames=mscAppnLsOutMsgFrames, mscAppnDnaCallOptionsEntry=mscAppnDnaCallOptionsEntry, mscAppnNnTgUserDefinedParm2=mscAppnNnTgUserDefinedParm2, mscAppnDluDsStatComponentName=mscAppnDluDsStatComponentName, mscAppnFrSvc=mscAppnFrSvc, mscAppnDlciDcType=mscAppnDlciDcType, mscAppnDlciVcCalledNpi=mscAppnDlciVcCalledNpi, mscAppnLcnVcWindowClosuresToSubnet=mscAppnLcnVcWindowClosuresToSubnet, mscAppnDluDsStatStatsEntry=mscAppnDluDsStatStatsEntry, mscAppnDlciSpRowStatus=mscAppnDlciSpRowStatus, mscAppnLsMaxDelay=mscAppnLsMaxDelay, mscAppnLcnVcPeakOoSeqFrmForwarded=mscAppnLcnVcPeakOoSeqFrmForwarded, mscAppnAdjNnStorageType=mscAppnAdjNnStorageType, mscAppnDlciVcRowStatusEntry=mscAppnDlciVcRowStatusEntry, mscAppnDlciVcPeakRetryQueueSize=mscAppnDlciVcPeakRetryQueueSize, mscAppnIsrSess=mscAppnIsrSess, mscAppnFrSvcBanEntry=mscAppnFrSvcBanEntry, mscAppnLcnVcType=mscAppnLcnVcType, mscAppnMaximumLocates=mscAppnMaximumLocates, mscAppnDluSscpMaxRxPacWin=mscAppnDluSscpMaxRxPacWin, mscAppnDlusActPuRx=mscAppnDlusActPuRx, mscAppnCosNodeRowStatusEntry=mscAppnCosNodeRowStatusEntry, mscAppnFrSvcOperationalTable=mscAppnFrSvcOperationalTable, mscAppnDlusReqActPuTx=mscAppnDlusReqActPuTx, mscAppnDLURPrimaryDefDlusName=mscAppnDLURPrimaryDefDlusName, mscAppnLsInXidFrames=mscAppnLsInXidFrames, mscAppnDlciBnnLsDefMaxTxBtuSize=mscAppnDlciBnnLsDefMaxTxBtuSize, mscAppnDlciBanLsDefAdjacentCpName=mscAppnDlciBanLsDefAdjacentCpName, mscAppnIsrSessSecStatsRxDataFrames=mscAppnIsrSessSecStatsRxDataFrames, mscAppnCosTgMaxUserDefParm1=mscAppnCosTgMaxUserDefParm1, mscAppnCosNodeMaxRouteAddResistance=mscAppnCosNodeMaxRouteAddResistance, mscAppnDluUsStatTxFmdFrames=mscAppnDluUsStatTxFmdFrames, mscAppnDnaCugRowStatusEntry=mscAppnDnaCugRowStatusEntry, mscAppnDluUsStatComponentName=mscAppnDluUsStatComponentName, mscAppnRowStatusTable=mscAppnRowStatusTable, mscAppnDnaNumberingPlanIndicator=mscAppnDnaNumberingPlanIndicator, mscAppnStatus=mscAppnStatus, mscAppnRtpRowStatusEntry=mscAppnRtpRowStatusEntry, mscAppn=mscAppn, mscAppnDlciVcSubnetRecoveries=mscAppnDlciVcSubnetRecoveries, mscAppnLcnVcStatsEntry=mscAppnLcnVcStatsEntry, mscAppnLsMaxTxBtuSize=mscAppnLsMaxTxBtuSize, mscAppnLsMinDelay=mscAppnLsMinDelay, mscAppnDluUsStatRowStatusTable=mscAppnDluUsStatRowStatusTable, mscAppnDluSscpRowStatusTable=mscAppnDluSscpRowStatusTable, mscAppnDlciBanLsDefBackupDlusName=mscAppnDlciBanLsDefBackupDlusName, mscAppnNnComponentName=mscAppnNnComponentName, mscAppnDlciBnnLsDefTgNum=mscAppnDlciBnnLsDefTgNum, mscAppnCosTgMaxSecurity=mscAppnCosTgMaxSecurity, mscAppnIsrSessStorageType=mscAppnIsrSessStorageType, mscAppnDluSscpTxFmdFrames=mscAppnDluSscpTxFmdFrames, mscAppnDlusDactPuRx=mscAppnDlusDactPuRx, mscAppnDlusDlusStatEntry=mscAppnDlusDlusStatEntry, mscAppnRtpMaxBtuSize=mscAppnRtpMaxBtuSize, mscAppnDnaHgMOpEntry=mscAppnDnaHgMOpEntry, mscAppnDluDsStatLsName=mscAppnDluDsStatLsName, mscAppnDluIndex=mscAppnDluIndex, mscAppnDlciVcCallReferenceNumber=mscAppnDlciVcCallReferenceNumber, mscAppnIsrSessPriStatsStatsTable=mscAppnIsrSessPriStatsStatsTable, mscAppnAdjNn=mscAppnAdjNn, mscAppnDlciBan=mscAppnDlciBan, mscAppnDlciBanProvEntry=mscAppnDlciBanProvEntry, mscAppnDnaCugRowStatus=mscAppnDnaCugRowStatus, mscAppnDlciExcessInformationRate=mscAppnDlciExcessInformationRate, mscAppnNnTgTgCharTable=mscAppnNnTgTgCharTable, mscAppnDlciVcPeakOoSeqFrmForwarded=mscAppnDlciVcPeakOoSeqFrmForwarded, mscAppnDnaIncomingOptionsTable=mscAppnDnaIncomingOptionsTable, mscAppnIdNumber=mscAppnIdNumber, mscAppnLcnVcSubnetRxWindowSize=mscAppnLcnVcSubnetRxWindowSize, mscAppnLcnVcCadEntry=mscAppnLcnVcCadEntry, appnCapabilitiesCA02DevelopmentLoad=appnCapabilitiesCA02DevelopmentLoad, mscAppnDnaDefaultSendToNetworkWindowSize=mscAppnDnaDefaultSendToNetworkWindowSize, mscAppnPortSimRim=mscAppnPortSimRim, mscAppnRtpActiveSessions=mscAppnRtpActiveSessions, mscAppnDlciRowStatusEntry=mscAppnDlciRowStatusEntry, mscAppnDlciStorageType=mscAppnDlciStorageType, mscAppnCosNode=mscAppnCosNode, mscAppnLcnVcRowStatus=mscAppnLcnVcRowStatus, mscAppnDlciVcPreviousDiagnosticCode=mscAppnDlciVcPreviousDiagnosticCode, mscAppnDnaCugIncCalls=mscAppnDnaCugIncCalls, mscAppnDlciBnnLsDefIndex=mscAppnDlciBnnLsDefIndex, mscAppnNnTgByteCost=mscAppnNnTgByteCost, mscAppnHeapSpaceLimit=mscAppnHeapSpaceLimit, mscAppnDlciMeasurementInterval=mscAppnDlciMeasurementInterval, mscAppnIsrSessPriStatsTxDataBytes=mscAppnIsrSessPriStatsTxDataBytes, mscAppnRtpBurstSize=mscAppnRtpBurstSize, mscAppnDnaIndex=mscAppnDnaIndex, mscAppnDluRowStatusTable=mscAppnDluRowStatusTable, mscAppnLcnVcTransferPriorityToNetwork=mscAppnLcnVcTransferPriorityToNetwork, mscAppnDluSscpRxDataBytes=mscAppnDluSscpRxDataBytes, mscAppnGeneralFunctionsSupported=mscAppnGeneralFunctionsSupported, mscAppnDlusOperTable=mscAppnDlusOperTable, mscAppnDirEntEntryType=mscAppnDirEntEntryType, mscAppnRtpUptime=mscAppnRtpUptime, mscAppnRtpLastRoundTripTime=mscAppnRtpLastRoundTripTime, mscAppnDlciVcDuplicatesFromSubnet=mscAppnDlciVcDuplicatesFromSubnet, mscAppnLocTgLinkAddressTable=mscAppnLocTgLinkAddressTable, mscAppnDluUsStatStatsEntry=mscAppnDluUsStatStatsEntry, mscAppnLcnVcStartTime=mscAppnLcnVcStartTime, mscAppnNnTgRowStatus=mscAppnNnTgRowStatus, mscAppnIsrSessPriStatsSidh=mscAppnIsrSessPriStatsSidh, mscAppnIsrSessSecStatsMaxTxBtuSize=mscAppnIsrSessSecStatsMaxTxBtuSize, mscAppnDlusDactLuRspTx=mscAppnDlusDactLuRspTx, mscAppnFrSvcBanLocalSap=mscAppnFrSvcBanLocalSap, mscAppnDlciBnnLsDefRowStatusEntry=mscAppnDlciBnnLsDefRowStatusEntry, mscAppnDlciBanLsDefAdjacentCpType=mscAppnDlciBanLsDefAdjacentCpType, mscAppnDirEntLocation=mscAppnDirEntLocation, mscAppnDluUsStatStatsTable=mscAppnDluUsStatStatsTable, mscAppnDluSscpRxRuSize=mscAppnDluSscpRxRuSize, mscAppnDluUsStat=mscAppnDluUsStat, mscAppnDnaOutgoingOptionsTable=mscAppnDnaOutgoingOptionsTable, mscAppnDlciVcIndex=mscAppnDlciVcIndex, mscAppnDlciSpCommittedBurstSize=mscAppnDlciSpCommittedBurstSize, mscAppnDLUR=mscAppnDLUR, mscAppnDLURSecondaryDefDlusName=mscAppnDLURSecondaryDefDlusName, mscAppnLcnVcSubnetRecoveries=mscAppnLcnVcSubnetRecoveries, mscAppnPortDynLsGoodXids=mscAppnPortDynLsGoodXids, mscAppnDlciVcDmepEntry=mscAppnDlciVcDmepEntry, mscAppnLcnVcRowStatusTable=mscAppnLcnVcRowStatusTable, mscAppnIsrRxPacingWindow=mscAppnIsrRxPacingWindow, mscAppnIsrSessPriStatsOdai=mscAppnIsrSessPriStatsOdai, mscAppnCosTgComponentName=mscAppnCosTgComponentName, mscAppnDlciBnnLsDefLsRole=mscAppnDlciBnnLsDefLsRole, mscAppnLcnDcComponentName=mscAppnLcnDcComponentName, mscAppnLcnVcIndex=mscAppnLcnVcIndex, mscAppnLcnVcPreviousState=mscAppnLcnVcPreviousState, mscAppnLocTgTgCharTable=mscAppnLocTgTgCharTable, mscAppnRtpPktRx=mscAppnRtpPktRx, mscAppnLcnDcRowStatus=mscAppnLcnDcRowStatus, mscAppnLcnDc=mscAppnLcnDc, mscAppnPortDefinedLsGoodXids=mscAppnPortDefinedLsGoodXids, mscAppnNnStatus=mscAppnNnStatus, mscAppnDlciVcSegmentSize=mscAppnDlciVcSegmentSize, mscAppnDlciBanProvTable=mscAppnDlciBanProvTable, mscAppnLcnVcDuplicatesFromSubnet=mscAppnLcnVcDuplicatesFromSubnet, mscAppnRtpIdleTimer=mscAppnRtpIdleTimer, mscAppnDluUsStatIndex=mscAppnDluUsStatIndex, mscAppnDlciBanLsDef=mscAppnDlciBanLsDef, mscAppnLsSap=mscAppnLsSap, mscAppnPortMaxTxBtuSize=mscAppnPortMaxTxBtuSize, mscAppnNn=mscAppnNn, mscAppnDluUsStatStorageType=mscAppnDluUsStatStorageType, mscAppnDlciVcCallingDna=mscAppnDlciVcCallingDna, mscAppnLocTgRowStatusTable=mscAppnLocTgRowStatusTable, mscAppnRtpInSessionControlFrames=mscAppnRtpInSessionControlFrames, appnCapabilitiesCA0214=appnCapabilitiesCA0214, mscAppnLcnVcLocalRxPktSize=mscAppnLcnVcLocalRxPktSize, mscAppnMaximumLinkStations=mscAppnMaximumLinkStations, mscAppnLsEffectiveCap=mscAppnLsEffectiveCap, mscAppnLsBadXids=mscAppnLsBadXids, mscAppnDlusComponentName=mscAppnDlusComponentName, mscAppnIsrSessProcedureCorrelationIdIndex=mscAppnIsrSessProcedureCorrelationIdIndex, mscAppnLocTgRowStatusEntry=mscAppnLocTgRowStatusEntry, mscAppnDluDsStatStatsTable=mscAppnDluDsStatStatsTable, mscAppnLcnDcRowStatusEntry=mscAppnLcnDcRowStatusEntry, mscAppnCosTransmissionPriority=mscAppnCosTransmissionPriority, mscAppnDnaAccountClass=mscAppnDnaAccountClass, mscAppnDluDsStatRowStatus=mscAppnDluDsStatRowStatus, mscAppnDlciVcEmissionPriorityFromNetwork=mscAppnDlciVcEmissionPriorityFromNetwork, mscAppnDluDsStatMaxTxBtuSize=mscAppnDluDsStatMaxTxBtuSize, mscAppnDluUsStatMaxTxPacWin=mscAppnDluUsStatMaxTxPacWin, mscAppnStateTable=mscAppnStateTable, mscAppnDlciBanLsDefAdjacentNodeID=mscAppnDlciBanLsDefAdjacentNodeID, mscAppnLocTgPropagationDelay=mscAppnLocTgPropagationDelay, mscAppnDlciVcNotDataXferToSubnet=mscAppnDlciVcNotDataXferToSubnet, mscAppnDnaHgMHgAddrNumberingPlanIndicator=mscAppnDnaHgMHgAddrNumberingPlanIndicator, mscAppnDlciCommittedBurstSize=mscAppnDlciCommittedBurstSize, mscAppnLsConfigTable=mscAppnLsConfigTable, mscAppnLocTgUserDefinedParm3=mscAppnLocTgUserDefinedParm3, mscAppnDnaRowStatusEntry=mscAppnDnaRowStatusEntry, mscAppnDlciVcFrmCongestedToSubnet=mscAppnDlciVcFrmCongestedToSubnet, mscAppnDnaOutDefaultPathReliability=mscAppnDnaOutDefaultPathReliability, mscAppnNnRouteAdditionResistance=mscAppnNnRouteAdditionResistance, mscAppnIsrSessPriStatsIndex=mscAppnIsrSessPriStatsIndex, mscAppnDluDsStatTxDataBytes=mscAppnDluDsStatTxDataBytes, mscAppnDnaAccountCollection=mscAppnDnaAccountCollection, mscAppnIsrSessPriStatsStatsEntry=mscAppnIsrSessPriStatsStatsEntry, mscAppnIsrSessSecStatsSidh=mscAppnIsrSessSecStatsSidh, mscAppnNnTgFlowReductionSequenceNumber=mscAppnNnTgFlowReductionSequenceNumber, mscAppnHprSupport=mscAppnHprSupport, mscAppnDnaDefaultSendToNetworkThruputClass=mscAppnDnaDefaultSendToNetworkThruputClass, mscAppnIsrSessSecStatsIndex=mscAppnIsrSessSecStatsIndex, mscAppnCosIndex=mscAppnCosIndex, mscAppnPortPropagationDelay=mscAppnPortPropagationDelay, mscAppnPortComponentName=mscAppnPortComponentName, mscAppnDlciVc=mscAppnDlciVc, mscAppnLcnDcOptionsTable=mscAppnLcnDcOptionsTable, mscAppnIsrSessPriStats=mscAppnIsrSessPriStats, mscAppnDnaOutDefaultPriority=mscAppnDnaOutDefaultPriority, mscAppnDlciBanLsDefCpCpSessionSupport=mscAppnDlciBanLsDefCpCpSessionSupport, mscAppnDnaCug=mscAppnDnaCug, mscAppnDluUsStatRxDataBytes=mscAppnDluUsStatRxDataBytes, mscAppnDlciVcOoSeqPktCntExceeded=mscAppnDlciVcOoSeqPktCntExceeded, mscAppnStateEntry=mscAppnStateEntry, appnCapabilitiesCA02=appnCapabilitiesCA02, mscAppnDlciRateEnforcement=mscAppnDlciRateEnforcement, mscAppnPortConfigTable=mscAppnPortConfigTable, mscAppnPortUserDefinedParm1=mscAppnPortUserDefinedParm1, mscAppnPortDlcType=mscAppnPortDlcType, mscAppnLsRowStatusEntry=mscAppnLsRowStatusEntry, mscAppnLocTgSecurity=mscAppnLocTgSecurity, mscAppnCosTgMinConnectCost=mscAppnCosTgMinConnectCost, mscAppnIsrSessSecStatsRxFmdFrames=mscAppnIsrSessSecStatsRxFmdFrames, mscAppnIsrUpperCongestionThreshold=mscAppnIsrUpperCongestionThreshold, mscAppnDnaHgMHgAddrAddrTable=mscAppnDnaHgMHgAddrAddrTable, mscAppnIsrSessPriStatsMaxRxBtuSize=mscAppnIsrSessPriStatsMaxRxBtuSize, mscAppnDluSscpSidl=mscAppnDluSscpSidl, mscAppnIsrSessSecStatsRowStatusEntry=mscAppnIsrSessSecStatsRowStatusEntry, mscAppnDnaCugCugOptionsEntry=mscAppnDnaCugCugOptionsEntry, mscAppnLcnVcSubnetTxWindowSize=mscAppnLcnVcSubnetTxWindowSize, mscAppnLocTgComponentName=mscAppnLocTgComponentName, mscAppnCosNodeProvTable=mscAppnCosNodeProvTable, mscAppnDnaHgMHgAddr=mscAppnDnaHgMHgAddr, mscAppnMaximumIsrSessions=mscAppnMaximumIsrSessions, mscAppnDnaDefaultRecvFrmNetworkWindowSize=mscAppnDnaDefaultRecvFrmNetworkWindowSize, mscAppnDnaHgMAvailableChannels=mscAppnDnaHgMAvailableChannels, mscAppnIsrSessSecStatsTxDataframes=mscAppnIsrSessSecStatsTxDataframes, mscAppnIsrSessSecStats=mscAppnIsrSessSecStats, mscAppnAdjNnComponentName=mscAppnAdjNnComponentName, mscAppnActiveSvcs=mscAppnActiveSvcs, mscAppnLocTgDestFqcpNameIndex=mscAppnLocTgDestFqcpNameIndex, mscAppnFrSvcProvisionedEntry=mscAppnFrSvcProvisionedEntry, mscAppnDlciSpStorageType=mscAppnDlciSpStorageType, mscAppnNnRowStatus=mscAppnNnRowStatus, mscAppnDlciBanLsDefTgNum=mscAppnDlciBanLsDefTgNum, mscAppnDlusSscpLuMuTx=mscAppnDlusSscpLuMuTx, mscAppnLcnDcStorageType=mscAppnLcnDcStorageType, mscAppnDluUsStatSidh=mscAppnDluUsStatSidh, mscAppnDirEntRowStatus=mscAppnDirEntRowStatus, mscAppnLcnIndex=mscAppnLcnIndex, mscAppnRtpBytesResent=mscAppnRtpBytesResent, mscAppnLcnRowStatusTable=mscAppnLcnRowStatusTable, mscAppnPortOperTable=mscAppnPortOperTable, mscAppnDluDsStatMaxRxPacWin=mscAppnDluDsStatMaxRxPacWin, mscAppnDlurSupport=mscAppnDlurSupport, mscAppnBlockNumber=mscAppnBlockNumber)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AppnMIB", mscAppnLcnDcRemoteNpi=mscAppnLcnDcRemoteNpi, mscAppnLcnVcFrmRetryTimeouts=mscAppnLcnVcFrmRetryTimeouts, mscAppnDna=mscAppnDna, mscAppnDlciBanRowStatus=mscAppnDlciBanRowStatus, mscAppnLcnVcCallingDna=mscAppnLcnVcCallingDna, mscAppnDlciSpComponentName=mscAppnDlciSpComponentName, mscAppnIsrSessSecStatsRxDataBytes=mscAppnIsrSessSecStatsRxDataBytes, mscAppnDlciVcCallingNpi=mscAppnDlciVcCallingNpi, mscAppnCosNodeMinStatus=mscAppnCosNodeMinStatus, mscAppnIsrSessSecStatsComponentName=mscAppnIsrSessSecStatsComponentName, mscAppnRouteAdditionResistance=mscAppnRouteAdditionResistance, mscAppnPortTgCharEntry=mscAppnPortTgCharEntry, mscAppnDlciBanLsDefRowStatusTable=mscAppnDlciBanLsDefRowStatusTable, mscAppnIsrSessTransmissionPriority=mscAppnIsrSessTransmissionPriority, mscAppnFrSvcRateEnforcement=mscAppnFrSvcRateEnforcement, mscAppnIsrSessSecStatsStatsTable=mscAppnIsrSessSecStatsStatsTable, mscAppnMemCriticalThreshold=mscAppnMemCriticalThreshold, mscAppnDluRowStatus=mscAppnDluRowStatus, mscAppnDlciBanStorageType=mscAppnDlciBanStorageType, mscAppnLsConfigEntry=mscAppnLsConfigEntry, mscAppnNnTgResourceSequenceNumber=mscAppnNnTgResourceSequenceNumber, appnCapabilities=appnCapabilities, mscAppnDlusPrimaryDlus=mscAppnDlusPrimaryDlus, mscAppnRtpStorageType=mscAppnRtpStorageType, mscAppnDnaOutgoingOptionsEntry=mscAppnDnaOutgoingOptionsEntry, mscAppnNnTgRowStatusEntry=mscAppnNnTgRowStatusEntry, mscAppnIsrSessSecStatsRowStatus=mscAppnIsrSessSecStatsRowStatus, mscAppnIsrSessSecStatsStorageType=mscAppnIsrSessSecStatsStorageType, mscAppnDluSscpLsName=mscAppnDluSscpLsName, mscAppnDnaRowStatusTable=mscAppnDnaRowStatusTable, mscAppnDlciDcOptionsTable=mscAppnDlciDcOptionsTable, mscAppnDnaCugType=mscAppnDnaCugType, mscAppnNnTgOperTable=mscAppnNnTgOperTable, mscAppnDluOperTable=mscAppnDluOperTable, mscAppnCosNodeMaxStatus=mscAppnCosNodeMaxStatus, mscAppnDlciVcIntdEntry=mscAppnDlciVcIntdEntry, mscAppnDlciDcRemoteDna=mscAppnDlciDcRemoteDna, mscAppnDluDsStatSidh=mscAppnDluDsStatSidh, mscAppnDluUsStatOdai=mscAppnDluUsStatOdai, mscAppnRtpCurRxRate=mscAppnRtpCurRxRate, mscAppnDlciDcOptionsEntry=mscAppnDlciDcOptionsEntry, mscAppnDnaHgMAvailabilityUpdateThreshold=mscAppnDnaHgMAvailabilityUpdateThreshold, mscAppnDlciBanLsDefRowStatus=mscAppnDlciBanLsDefRowStatus, mscAppnLcnVcTransferPriorityFromNetwork=mscAppnLcnVcTransferPriorityFromNetwork, mscAppnDlciBanLsDefMacIndex=mscAppnDlciBanLsDefMacIndex, mscAppnCosTgMinPropDelay=mscAppnCosTgMinPropDelay, mscAppnLsLinkStationState=mscAppnLsLinkStationState, mscAppnIsrSessPriStatsSidl=mscAppnIsrSessPriStatsSidl, mscAppnCosTgMinUserDefParm2=mscAppnCosTgMinUserDefParm2, mscAppnLsInMsgFrames=mscAppnLsInMsgFrames, mscAppnDnaHgMIndex=mscAppnDnaHgMIndex, mscAppnIsrSessOperEntry=mscAppnIsrSessOperEntry, mscAppnNnTgEffectiveCap=mscAppnNnTgEffectiveCap, mscAppnIsrSessFqcpNameIndex=mscAppnIsrSessFqcpNameIndex, mscAppnLcnVcPreviousDiagnosticCode=mscAppnLcnVcPreviousDiagnosticCode, mscAppnDluDsStatMaxRxBtuSize=mscAppnDluDsStatMaxRxBtuSize, mscAppnLcnAdminState=mscAppnLcnAdminState, mscAppnFrSvcProvisionedTable=mscAppnFrSvcProvisionedTable, mscAppnLcnVcSegmentsSent=mscAppnLcnVcSegmentsSent, mscAppnDlciBnnLsDefHprSupported=mscAppnDlciBnnLsDefHprSupported, mscAppnMemWarningThreshold=mscAppnMemWarningThreshold, mscAppnDnaCugCugOptionsTable=mscAppnDnaCugCugOptionsTable, mscAppnRtpOperEntry=mscAppnRtpOperEntry, mscAppnDlciDcRemoteNpi=mscAppnDlciDcRemoteNpi, mscAppnDlciVcStorageType=mscAppnDlciVcStorageType, mscAppnCosNodeComponentName=mscAppnCosNodeComponentName, mscAppnLcnVcPeakStackedAcksRx=mscAppnLcnVcPeakStackedAcksRx, mscAppnLcnVcState=mscAppnLcnVcState, mscAppnLs=mscAppnLs, mscAppnLsInXidBytes=mscAppnLsInXidBytes, mscAppnDnaIncomingOptionsEntry=mscAppnDnaIncomingOptionsEntry, mscAppnLcnVcPeakOoSeqQueueSize=mscAppnLcnVcPeakOoSeqQueueSize, mscAppnDLURComponentName=mscAppnDLURComponentName, mscAppnDlciVcPriority=mscAppnDlciVcPriority, mscAppnDlciVcDmepValue=mscAppnDlciVcDmepValue, mscAppnLsName=mscAppnLsName, mscAppnIsrSessRowStatus=mscAppnIsrSessRowStatus, mscAppnDlciBnnLsDefComponentName=mscAppnDlciBnnLsDefComponentName, mscAppnFqCpName=mscAppnFqCpName, mscAppnRtp=mscAppnRtp, mscAppnDnaCugDnic=mscAppnDnaCugDnic, mscAppnDnaCugStorageType=mscAppnDnaCugStorageType, mscAppnCosTgMaxUserDefParm2=mscAppnCosTgMaxUserDefParm2, mscAppnRowStatusEntry=mscAppnRowStatusEntry, mscAppnCosNodeProvEntry=mscAppnCosNodeProvEntry, mscAppnFrSvcRowStatusEntry=mscAppnFrSvcRowStatusEntry, mscAppnFrSvcRowStatus=mscAppnFrSvcRowStatus, mscAppnDlusOperEntry=mscAppnDlusOperEntry, mscAppnDluComponentName=mscAppnDluComponentName, mscAppnLsAnrLabel=mscAppnLsAnrLabel, mscAppnNnOperTable=mscAppnNnOperTable, mscAppnDlciDcRowStatus=mscAppnDlciDcRowStatus, mscAppnDlciDcNfaIndex=mscAppnDlciDcNfaIndex, mscAppnLcnVcDiagnosticCode=mscAppnLcnVcDiagnosticCode, mscAppnDynamicLsBadXids=mscAppnDynamicLsBadXids, mscAppnPortLsRole=mscAppnPortLsRole, mscAppnFrSvcRowStatusTable=mscAppnFrSvcRowStatusTable, mscAppnDluDsStatRxFmdFrames=mscAppnDluDsStatRxFmdFrames, mscAppnLocTgRowStatus=mscAppnLocTgRowStatus, mscAppnLcnVcWrTriggers=mscAppnLcnVcWrTriggers, mscAppnDirEnt=mscAppnDirEnt, mscAppnIsrSessPriStatsTxFmdFrames=mscAppnIsrSessPriStatsTxFmdFrames, mscAppnPortConfigEntry=mscAppnPortConfigEntry, mscAppnDlusReqDactPuTx=mscAppnDlusReqDactPuTx, mscAppnLsTgCharEntry=mscAppnLsTgCharEntry, mscAppnPortIndex=mscAppnPortIndex, mscAppnRtpStatsEntry=mscAppnRtpStatsEntry, mscAppnPortTotLinkActLim=mscAppnPortTotLinkActLim, mscAppnRtpLocalLsName=mscAppnRtpLocalLsName, mscAppnLsInInvalidSnaFrames=mscAppnLsInInvalidSnaFrames, mscAppnDlusReqDactPuRspRx=mscAppnDlusReqDactPuRspRx, mscAppnLcnVcStorageType=mscAppnLcnVcStorageType, appnGroupCA0214A=appnGroupCA0214A, mscAppnCosTgMinSecurity=mscAppnCosTgMinSecurity, mscAppnDnaIncAccess=mscAppnDnaIncAccess, mscAppnLsSecurity=mscAppnLsSecurity, mscAppnRtpRxBytes=mscAppnRtpRxBytes, mscAppnDlci=mscAppnDlci, mscAppnDlciDcDiscardPriority=mscAppnDlciDcDiscardPriority, mscAppnDlciVcAccountingEnabled=mscAppnDlciVcAccountingEnabled, mscAppnDlciVcDataPath=mscAppnDlciVcDataPath, mscAppnDirEntStorageType=mscAppnDirEntStorageType, mscAppnCosComponentName=mscAppnCosComponentName, mscAppnDlciSpMeasurementInterval=mscAppnDlciSpMeasurementInterval, mscAppnDluDsStatStorageType=mscAppnDluDsStatStorageType, mscAppnPortNonactXidExchLim=mscAppnPortNonactXidExchLim, mscAppnNnFunctionSupported=mscAppnNnFunctionSupported, mscAppnDlciSpIndex=mscAppnDlciSpIndex, mscAppnDlciBanComponentName=mscAppnDlciBanComponentName, mscAppnLsOperEntry=mscAppnLsOperEntry, mscAppnLocTgStorageType=mscAppnLocTgStorageType, mscAppnCosTgMinByteCost=mscAppnCosTgMinByteCost, mscAppnIsrSessSecStatsMaxRxBtuSize=mscAppnIsrSessSecStatsMaxRxBtuSize, mscAppnMaximumSvcs=mscAppnMaximumSvcs, mscAppnIndex=mscAppnIndex, mscAppnIsrSessPriStatsRxDataFrames=mscAppnIsrSessPriStatsRxDataFrames, mscAppnRtpRemoteTcid=mscAppnRtpRemoteTcid, mscAppnLcnVcAccountingEnd=mscAppnLcnVcAccountingEnd, mscAppnDlciVcPktRetryTimeouts=mscAppnDlciVcPktRetryTimeouts, mscAppnLcnVcIntdTable=mscAppnLcnVcIntdTable, mscAppnLcnVcPeakRetryQueueSize=mscAppnLcnVcPeakRetryQueueSize, mscAppnDluSscpTxDataBytes=mscAppnDluSscpTxDataBytes, mscAppnDluUsStatRxDataFrames=mscAppnDluUsStatRxDataFrames, mscAppnDnaStorageType=mscAppnDnaStorageType, mscAppnDnaAddressEntry=mscAppnDnaAddressEntry, mscAppnDluDlusName=mscAppnDluDlusName, mscAppnPortOperEntry=mscAppnPortOperEntry, mscAppnDlciComponentName=mscAppnDlciComponentName, mscAppnLcnRowStatus=mscAppnLcnRowStatus, mscAppnDnaOutPathSensitivityOverRide=mscAppnDnaOutPathSensitivityOverRide, mscAppnDnaHgMMaxAvailableChannels=mscAppnDnaHgMMaxAvailableChannels, mscAppnDlciVcCadTable=mscAppnDlciVcCadTable, mscAppnDlciBnnLsDefCpCpSessionSupport=mscAppnDlciBnnLsDefCpCpSessionSupport, mscAppnDlciVcType=mscAppnDlciVcType, mscAppnRtpRxInvalidSnaFrames=mscAppnRtpRxInvalidSnaFrames, mscAppnIsrSessOperTable=mscAppnIsrSessOperTable, mscAppnDLURStorageType=mscAppnDLURStorageType, mscAppnDnaHgMRowStatus=mscAppnDnaHgMRowStatus, mscAppnCosProvTable=mscAppnCosProvTable, mscAppnAdjNnOperTable=mscAppnAdjNnOperTable, mscAppnCosProvEntry=mscAppnCosProvEntry, mscAppnActiveLinkStations=mscAppnActiveLinkStations, mscAppnIsrSessPriStatsTxDataframes=mscAppnIsrSessPriStatsTxDataframes, mscAppnLcnVcAccountingEnabled=mscAppnLcnVcAccountingEnabled, mscAppnLsConnectCost=mscAppnLsConnectCost, mscAppnRtpStatsTable=mscAppnRtpStatsTable, mscAppnPortUserDefinedParm2=mscAppnPortUserDefinedParm2, mscAppnNnNodeType=mscAppnNnNodeType, mscAppnNnTgDaysLeft=mscAppnNnTgDaysLeft, mscAppnProcessParmsEntry=mscAppnProcessParmsEntry, mscAppnDlciDcRemoteDlci=mscAppnDlciDcRemoteDlci, mscAppnRtpCurTxRate=mscAppnRtpCurTxRate, mscAppnUpTime=mscAppnUpTime, mscAppnRtpPktTx=mscAppnRtpPktTx, mscAppnPortRowStatusEntry=mscAppnPortRowStatusEntry, mscAppnOperationalState=mscAppnOperationalState, mscAppnLcnVcPriority=mscAppnLcnVcPriority, mscAppnNnTgComponentName=mscAppnNnTgComponentName, mscAppnDluSscpMaxRxBtuSize=mscAppnDluSscpMaxRxBtuSize, mscAppnCosTgIndex=mscAppnCosTgIndex, mscAppnDlciDcNfaEntry=mscAppnDlciDcNfaEntry, mscAppnDluUsStatRxRuSize=mscAppnDluUsStatRxRuSize, mscAppnLcnVcLocalTxWindowSize=mscAppnLcnVcLocalTxWindowSize, mscAppnIsrSessSecStatsStatsEntry=mscAppnIsrSessSecStatsStatsEntry, mscAppnIsrSessPriStatsMaxRxPacWin=mscAppnIsrSessPriStatsMaxRxPacWin, mscAppnIsrSessPriStatsRxRuSize=mscAppnIsrSessPriStatsRxRuSize, mscAppnLsInMsgBytes=mscAppnLsInMsgBytes, mscAppnControlPointCreateParmsTable=mscAppnControlPointCreateParmsTable, mscAppnPortMaxRxBtuSize=mscAppnPortMaxRxBtuSize, appnGroupCA=appnGroupCA, mscAppnDlciVcComponentName=mscAppnDlciVcComponentName, mscAppnDlciVcSegmentsRx=mscAppnDlciVcSegmentsRx, mscAppnCosTgMinModemClass=mscAppnCosTgMinModemClass, mscAppnNnTgUserDefinedParm1=mscAppnNnTgUserDefinedParm1, mscAppnDlusDactLuRx=mscAppnDlusDactLuRx, mscAppnLsDlcType=mscAppnLsDlcType, mscAppnLcnVcCalledDna=mscAppnLcnVcCalledDna, mscAppnIsrSessSecStatsRowStatusTable=mscAppnIsrSessSecStatsRowStatusTable, mscAppnNnTgPropagationDelay=mscAppnNnTgPropagationDelay, mscAppnIsrSessSecStatsTxDataBytes=mscAppnIsrSessSecStatsTxDataBytes, mscAppnRtpRowStatusTable=mscAppnRtpRowStatusTable, mscAppnDlciDcNfaTable=mscAppnDlciDcNfaTable, mscAppnLcnDcDiscardPriority=mscAppnLcnDcDiscardPriority, mscAppnIsrSessPriStatsRowStatusTable=mscAppnIsrSessPriStatsRowStatusTable, mscAppnRowStatus=mscAppnRowStatus, mscAppnDlciVcStartTime=mscAppnDlciVcStartTime, mscAppnNnDaysLeft=mscAppnNnDaysLeft, mscAppnLcnDcOptionsEntry=mscAppnLcnDcOptionsEntry, mscAppnDlciUsageState=mscAppnDlciUsageState, mscAppnIsrSessSecStatsTxFmdFrames=mscAppnIsrSessSecStatsTxFmdFrames, mscAppnRtpComponentName=mscAppnRtpComponentName, appnCapabilitiesCA0214A=appnCapabilitiesCA0214A, mscAppnDlciVcEmissionPriorityToNetwork=mscAppnDlciVcEmissionPriorityToNetwork, mscAppnDirEntWildCard=mscAppnDirEntWildCard, mscAppnNnRowStatusEntry=mscAppnNnRowStatusEntry, mscAppnTreeCacheUseLimit=mscAppnTreeCacheUseLimit, appnGroup=appnGroup, mscAppnDlciSpExcessBurstSize=mscAppnDlciSpExcessBurstSize, mscAppnDluDsStatRowStatusEntry=mscAppnDluDsStatRowStatusEntry, mscAppnDnaDefaultRecvFrmNetworkThruputClass=mscAppnDnaDefaultRecvFrmNetworkThruputClass, mscAppnDirEntOperEntry=mscAppnDirEntOperEntry, mscAppnLocTgUserDefinedParm2=mscAppnLocTgUserDefinedParm2, mscAppnRtpLostFrames=mscAppnRtpLostFrames, mscAppnDlciDcRowStatusTable=mscAppnDlciDcRowStatusTable, mscAppnIsrSessPriStatsMaxTxBtuSize=mscAppnIsrSessPriStatsMaxTxBtuSize, mscAppnDlciVcNotDataXferFromSubnet=mscAppnDlciVcNotDataXferFromSubnet, mscAppnLsUserDefinedParm2=mscAppnLsUserDefinedParm2, mscAppnDlciRowStatusTable=mscAppnDlciRowStatusTable, mscAppnIsrSessComponentName=mscAppnIsrSessComponentName, mscAppnHeapSpaceCurrent=mscAppnHeapSpaceCurrent, mscAppnNnOperEntry=mscAppnNnOperEntry, mscAppnCosTgMinEffectiveCapacity=mscAppnCosTgMinEffectiveCapacity, mscAppnDlciBnnLsDefDspuService=mscAppnDlciBnnLsDefDspuService, mscAppnDlciBnnLsDefRowStatus=mscAppnDlciBnnLsDefRowStatus, mscAppnLsTgNum=mscAppnLsTgNum, mscAppnDlciVcRowStatusTable=mscAppnDlciVcRowStatusTable, mscAppnDnaHgMIfEntry=mscAppnDnaHgMIfEntry, mscAppnDluDsStatRxDataBytes=mscAppnDluDsStatRxDataBytes, mscAppnNnTgLinkAddressTable=mscAppnNnTgLinkAddressTable, mscAppnLcnVcSegmentsRx=mscAppnLcnVcSegmentsRx, mscAppnDlciVcOutOfRangeFrmFromSubnet=mscAppnDlciVcOutOfRangeFrmFromSubnet, mscAppnCosTgMinUserDefParm3=mscAppnCosTgMinUserDefParm3, mscAppnDnaCugIndex=mscAppnDnaCugIndex, mscAppnDnaOutAccess=mscAppnDnaOutAccess, mscAppnDlciBanLsDefProvEntry=mscAppnDlciBanLsDefProvEntry, mscAppnDlciBanLocalSap=mscAppnDlciBanLocalSap, mscAppnDlciDcNfaRowStatus=mscAppnDlciDcNfaRowStatus, mscAppnLsInSessionControlFrames=mscAppnLsInSessionControlFrames, mscAppnLsStatsTable=mscAppnLsStatsTable, mscAppnDlciCommittedInformationRate=mscAppnDlciCommittedInformationRate, mscAppnDlciVcCalledLcn=mscAppnDlciVcCalledLcn, mscAppnLsHprSupport=mscAppnLsHprSupport, mscAppnLocTgResourceSequenceNumber=mscAppnLocTgResourceSequenceNumber, mscAppnLocTgOperEntry=mscAppnLocTgOperEntry)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AppnMIB", mscAppnLsTgCharTable=mscAppnLsTgCharTable, mscAppnIsrSessCosName=mscAppnIsrSessCosName, mscAppnRtpRemoteCpName=mscAppnRtpRemoteCpName, mscAppnLsLsVcReferenceEntry=mscAppnLsLsVcReferenceEntry, mscAppnCosRowStatusEntry=mscAppnCosRowStatusEntry, mscAppnLocTgOperTable=mscAppnLocTgOperTable, mscAppnDlciBanLsDefProvTable=mscAppnDlciBanLsDefProvTable, mscAppnRtpOutSessionControlFrames=mscAppnRtpOutSessionControlFrames, mscAppnIsrSessPriStatsComponentName=mscAppnIsrSessPriStatsComponentName, mscAppnNnResourceSequenceNumber=mscAppnNnResourceSequenceNumber, mscAppnNnStorageType=mscAppnNnStorageType, mscAppnLocTgTgCharEntry=mscAppnLocTgTgCharEntry, mscAppnLsRowStatus=mscAppnLsRowStatus, mscAppnLsActualCpName=mscAppnLsActualCpName, mscAppnDlciVcCannotForwardToSubnet=mscAppnDlciVcCannotForwardToSubnet, mscAppnDlciSpRowStatusTable=mscAppnDlciSpRowStatusTable, mscAppnDLURDlurParmsEntry=mscAppnDLURDlurParmsEntry, mscAppnIsrSessSecStatsRxRuSize=mscAppnIsrSessSecStatsRxRuSize, mscAppnDluSscpTxDataframes=mscAppnDluSscpTxDataframes, mscAppnLcnVcCallingLcn=mscAppnLcnVcCallingLcn, mscAppnLsStorageType=mscAppnLsStorageType, mscAppnLcnVcRowStatusEntry=mscAppnLcnVcRowStatusEntry, mscAppnDlciVcDiagnosticCode=mscAppnDlciVcDiagnosticCode, mscAppnCosRowStatusTable=mscAppnCosRowStatusTable, mscAppnDlciBanRowStatusEntry=mscAppnDlciBanRowStatusEntry, mscAppnTreeCacheSize=mscAppnTreeCacheSize, mscAppnDlciBnnLsDefAdjacentCpType=mscAppnDlciBnnLsDefAdjacentCpType, mscAppnLcnStorageType=mscAppnLcnStorageType, mscAppnPortRowStatusTable=mscAppnPortRowStatusTable, mscAppnLcnRowStatusEntry=mscAppnLcnRowStatusEntry, mscAppnAdjNnLastFrsnSent=mscAppnAdjNnLastFrsnSent, mscAppnLcnVcFastSelectCall=mscAppnLcnVcFastSelectCall, mscAppnRtpBytesDiscarded=mscAppnRtpBytesDiscarded, mscAppnNnTg=mscAppnNnTg, mscAppnIsrSessPriStatsRowStatus=mscAppnIsrSessPriStatsRowStatus, mscAppnMaximumTopologyTgs=mscAppnMaximumTopologyTgs, mscAppnDluPluName=mscAppnDluPluName, mscAppnNnTgSecurity=mscAppnNnTgSecurity, mscAppnDluSscpMaxTxPacWin=mscAppnDluSscpMaxTxPacWin, mscAppnDlciVcOoSeqByteCntExceeded=mscAppnDlciVcOoSeqByteCntExceeded, mscAppnMaximumDirectorySize=mscAppnMaximumDirectorySize, mscAppnPortInbLinkActLim=mscAppnPortInbLinkActLim, mscAppnDlusIndex=mscAppnDlusIndex, mscAppnDlciBanLsDefDspuService=mscAppnDlciBanLsDefDspuService, mscAppnDlciVcElapsedTimeTillNow=mscAppnDlciVcElapsedTimeTillNow, mscAppnDluUsStatRxFmdFrames=mscAppnDluUsStatRxFmdFrames, mscAppnDnaCugOutCalls=mscAppnDnaCugOutCalls, mscAppnDlciBanLsDefMaxTxBtuSize=mscAppnDlciBanLsDefMaxTxBtuSize, mscAppnNnTgUserDefinedParm3=mscAppnNnTgUserDefinedParm3, mscAppnDluPluSessActive=mscAppnDluPluSessActive, mscAppnIsrMaxRuSize=mscAppnIsrMaxRuSize, mscAppnIsrSessSecStatsSidl=mscAppnIsrSessSecStatsSidl, mscAppnDluDsStatRxRuSize=mscAppnDluDsStatRxRuSize, mscAppnLcnDcIndex=mscAppnLcnDcIndex, mscAppnDLURDlusRetryTimeout=mscAppnDLURDlusRetryTimeout, mscAppnLocTgUserDefinedParm1=mscAppnLocTgUserDefinedParm1, mscAppnLcnVcCallingNpi=mscAppnLcnVcCallingNpi, mscAppnDlciBnnLsDefDlusName=mscAppnDlciBnnLsDefDlusName, mscAppnRtpCosName=mscAppnRtpCosName, mscAppnRtpPktDiscard=mscAppnRtpPktDiscard, mscAppnNnFunctionsSupported=mscAppnNnFunctionsSupported, mscAppnDlciStateTable=mscAppnDlciStateTable, mscAppnDlciBnnLsDefStorageType=mscAppnDlciBnnLsDefStorageType, mscAppnLcnVcMaxSubnetPktSize=mscAppnLcnVcMaxSubnetPktSize, mscAppnLocTgTransmissionGroupIndex=mscAppnLocTgTransmissionGroupIndex, mscAppnDynamicLsGoodXids=mscAppnDynamicLsGoodXids, mscAppnDluDsStatOdai=mscAppnDluDsStatOdai, mscAppnCosNodeStorageType=mscAppnCosNodeStorageType, mscAppnIsrSessPriStatsRxFmdFrames=mscAppnIsrSessPriStatsRxFmdFrames, mscAppnDnaCallOptionsTable=mscAppnDnaCallOptionsTable, mscAppnDlciBanLsDefComponentName=mscAppnDlciBanLsDefComponentName, mscAppnLcnVcSegmentSize=mscAppnLcnVcSegmentSize, mscAppnDlciRowStatus=mscAppnDlciRowStatus, mscAppnLcnVcWindowClosuresFromSubnet=mscAppnLcnVcWindowClosuresFromSubnet, mscAppnAdjNnIndex=mscAppnAdjNnIndex, mscAppnDlciBanLsDefHprSupported=mscAppnDlciBanLsDefHprSupported, mscAppnLcnVcComponentName=mscAppnLcnVcComponentName, mscAppnLsUserDefinedParm3=mscAppnLsUserDefinedParm3, mscAppnDirEntLuOwnerName=mscAppnDirEntLuOwnerName, mscAppnLsOperTable=mscAppnLsOperTable, mscAppnLocTgByteCost=mscAppnLocTgByteCost, mscAppnRtpMaxRxRate=mscAppnRtpMaxRxRate, mscAppnFrSvcOperationalEntry=mscAppnFrSvcOperationalEntry, mscAppnIsrSessSecStatsMaxRxPacWin=mscAppnIsrSessSecStatsMaxRxPacWin, mscAppnDluSscp=mscAppnDluSscp, mscAppnLcnVcSubnetTxPktSize=mscAppnLcnVcSubnetTxPktSize, mscAppnLsCurrentDelay=mscAppnLsCurrentDelay, mscAppnDlciExcessBurstSize=mscAppnDlciExcessBurstSize, mscAppnLcn=mscAppnLcn, mscAppnPortDefinedLsBadXids=mscAppnPortDefinedLsBadXids, mscAppnPortDynLsBadXids=mscAppnPortDynLsBadXids, mscAppnDlusActPuRspTx=mscAppnDlusActPuRspTx, mscAppnDnaComponentName=mscAppnDnaComponentName, mscAppnOperationalTable=mscAppnOperationalTable, mscAppnDnaHgMHgAddrStorageType=mscAppnDnaHgMHgAddrStorageType, mscAppnDluUsStatRowStatus=mscAppnDluUsStatRowStatus, mscAppnDlciVcRcosToNetwork=mscAppnDlciVcRcosToNetwork, mscAppnNnRowStatusTable=mscAppnNnRowStatusTable, mscAppnDlusActLuRspTx=mscAppnDlusActLuRspTx, mscAppnDluSscpStatsTable=mscAppnDluSscpStatsTable, mscAppnPortState=mscAppnPortState, mscAppnPortStorageType=mscAppnPortStorageType, mscAppnDluUsStatMaxRxBtuSize=mscAppnDluUsStatMaxRxBtuSize, mscAppnOperationalEntry=mscAppnOperationalEntry, mscAppnDnaCugPreferential=mscAppnDnaCugPreferential, mscAppnRtpIdleTimeouts=mscAppnRtpIdleTimeouts, mscAppnDnaCugRowStatusTable=mscAppnDnaCugRowStatusTable, mscAppnLsComponentName=mscAppnLsComponentName, mscAppnDlciSpRowStatusEntry=mscAppnDlciSpRowStatusEntry, mscAppnDluSscpRowStatusEntry=mscAppnDluSscpRowStatusEntry, mscAppnLcnVcLocalRxWindowSize=mscAppnLcnVcLocalRxWindowSize, mscAppnCosStorageType=mscAppnCosStorageType, mscAppnFlowReductionSequenceNumber=mscAppnFlowReductionSequenceNumber, mscAppnDlciSpRateEnforcement=mscAppnDlciSpRateEnforcement, mscAppnCosTgMaxConnectCost=mscAppnCosTgMaxConnectCost, mscAppnDluSscpIndex=mscAppnDluSscpIndex, mscAppnCosTgMaxEffectiveCapacity=mscAppnCosTgMaxEffectiveCapacity, mscAppnPortSecurity=mscAppnPortSecurity, mscAppnDnaAddressTable=mscAppnDnaAddressTable, mscAppnDluDsStatRxDataFrames=mscAppnDluDsStatRxDataFrames, mscAppnDirEntOperTable=mscAppnDirEntOperTable, mscAppnRtpRowStatus=mscAppnRtpRowStatus, mscAppnDlciVcFrdEntry=mscAppnDlciVcFrdEntry, mscAppnDnaDataNetworkAddress=mscAppnDnaDataNetworkAddress, mscAppnNnTgStorageType=mscAppnNnTgStorageType, mscAppnRtpLocalTcid=mscAppnRtpLocalTcid, mscAppnDlciBnnLsDefRowStatusTable=mscAppnDlciBnnLsDefRowStatusTable, mscAppnDluSscpStatsEntry=mscAppnDluSscpStatsEntry, mscAppnIsrSessLimitedResource=mscAppnIsrSessLimitedResource, mscAppnCos=mscAppnCos, mscAppnDnaHgMStorageType=mscAppnDnaHgMStorageType, mscAppnIsrSessRowStatusEntry=mscAppnIsrSessRowStatusEntry, mscAppnLcnUsageState=mscAppnLcnUsageState, mscAppnDnaHgM=mscAppnDnaHgM, mscAppnNnTgOperEntry=mscAppnNnTgOperEntry, mscAppnDluNauAddress=mscAppnDluNauAddress, mscAppnDlciDcRowStatusEntry=mscAppnDlciDcRowStatusEntry, mscAppnDluDsStatCurRxPacWin=mscAppnDluDsStatCurRxPacWin, mscAppnPortLsXmitRxCap=mscAppnPortLsXmitRxCap, mscAppnLsPropagationDelay=mscAppnLsPropagationDelay, mscAppnCosTgMaxByteCost=mscAppnCosTgMaxByteCost, mscAppnDlciBanLsDefLsRole=mscAppnDlciBanLsDefLsRole, mscAppnDlciBanLsDefStorageType=mscAppnDlciBanLsDefStorageType, mscAppnMaximumTopologyNodes=mscAppnMaximumTopologyNodes, mscAppnDlciSp=mscAppnDlciSp, mscAppnLcnVcElapsedTimeTillNow=mscAppnLcnVcElapsedTimeTillNow, mscAppnPortEffectiveCap=mscAppnPortEffectiveCap, mscAppnProcessParmsTable=mscAppnProcessParmsTable, mscAppnDnaHgMHgAddrDataNetworkAddress=mscAppnDnaHgMHgAddrDataNetworkAddress, mscAppnDlciDc=mscAppnDlciDc, mscAppnDluUsStatLsName=mscAppnDluUsStatLsName, mscAppnLcnDcRemoteDna=mscAppnLcnDcRemoteDna, mscAppnIsrSessSecStatsMaxTxPacWin=mscAppnIsrSessSecStatsMaxTxPacWin, mscAppnDluUsStatMaxTxBtuSize=mscAppnDluUsStatMaxTxBtuSize, mscAppnDlciVcSegmentsSent=mscAppnDlciVcSegmentsSent, mscAppnLsDynamicOrDefined=mscAppnLsDynamicOrDefined, mscAppnLsStatsEntry=mscAppnLsStatsEntry, mscAppnFrSvcIndex=mscAppnFrSvcIndex, mscAppnDlciBnnLsDefProvTable=mscAppnDlciBnnLsDefProvTable, mscAppnFrSvcMaximumFrameRelaySvcs=mscAppnFrSvcMaximumFrameRelaySvcs, mscAppnDluSscpComponentName=mscAppnDluSscpComponentName, mscAppnDlciSpOpTable=mscAppnDlciSpOpTable, mscAppnDlusSscpPuMuRx=mscAppnDlusSscpPuMuRx, mscAppnCosTgStorageType=mscAppnCosTgStorageType, mscAppnLcnVcCalledLcn=mscAppnLcnVcCalledLcn, mscAppnDluDsStatTxDataframes=mscAppnDluDsStatTxDataframes, mscAppnCosTgMaxUserDefParm3=mscAppnCosTgMaxUserDefParm3, mscAppnLcnVc=mscAppnLcnVc, mscAppnLcnVcSubnetRxPktSize=mscAppnLcnVcSubnetRxPktSize, mscAppnLcnVcOutOfRangeFrmFromSubnet=mscAppnLcnVcOutOfRangeFrmFromSubnet, mscAppnNnIndex=mscAppnNnIndex, mscAppnFrSvcComponentName=mscAppnFrSvcComponentName, mscAppnDlciDcStorageType=mscAppnDlciDcStorageType, mscAppnAdjNnRowStatus=mscAppnAdjNnRowStatus, mscAppnDlciBanLocalMac=mscAppnDlciBanLocalMac, mscAppnDlciSpOpEntry=mscAppnDlciSpOpEntry, mscAppnLsOutXidFrames=mscAppnLsOutXidFrames, mscAppnIsrSessPriStatsStorageType=mscAppnIsrSessPriStatsStorageType, mscAppnDlciVcPreviousState=mscAppnDlciVcPreviousState, mscAppnDlciVcFastSelectCall=mscAppnDlciVcFastSelectCall, mscAppnDluSscpCurRxPacWin=mscAppnDluSscpCurRxPacWin, mscAppnNnTgOwnerFqcpNameIndex=mscAppnNnTgOwnerFqcpNameIndex, mscAppnDlciSpParmsTable=mscAppnDlciSpParmsTable, mscAppnNnTgDlcData=mscAppnNnTgDlcData, mscAppnDluSscpMaxTxBtuSize=mscAppnDluSscpMaxTxBtuSize, mscAppnLocTgConnectCost=mscAppnLocTgConnectCost, mscAppnLsOutSessionControlFrames=mscAppnLsOutSessionControlFrames, mscAppnCosTgProvTable=mscAppnCosTgProvTable, mscAppnLocTgLinkAddressEntry=mscAppnLocTgLinkAddressEntry, mscAppnFrSvcMaximumCir=mscAppnFrSvcMaximumCir, mscAppnPortTgCharTable=mscAppnPortTgCharTable, mscAppnDluDsStatTxFmdFrames=mscAppnDluDsStatTxFmdFrames, mscAppnDluSscpRxDataFrames=mscAppnDluSscpRxDataFrames, mscAppnCosTgRowStatus=mscAppnCosTgRowStatus, mscAppnDlusReqActPuRspRx=mscAppnDlusReqActPuRspRx, mscAppnDnaCugComponentName=mscAppnDnaCugComponentName, mscAppnDnaHgMHgAddrAddrEntry=mscAppnDnaHgMHgAddrAddrEntry, mscAppnRtpMaxTxRate=mscAppnRtpMaxTxRate, mscAppnLocateTimeout=mscAppnLocateTimeout, mscAppnComponentName=mscAppnComponentName, mscAppnDlusRowStatusTable=mscAppnDlusRowStatusTable, mscAppnDLURRowStatusTable=mscAppnDLURRowStatusTable, mscAppnAdminState=mscAppnAdminState, mscAppnDlciVcDmepTable=mscAppnDlciVcDmepTable, mscAppnIsrLowerCongestionThreshold=mscAppnIsrLowerCongestionThreshold, mscAppnLogicalProcessor=mscAppnLogicalProcessor, mscAppnDlciVcPeakOoSeqByteCount=mscAppnDlciVcPeakOoSeqByteCount, mscAppnDlciBanLsDefRowStatusEntry=mscAppnDlciBanLsDefRowStatusEntry, mscAppnRtpSmoothRoundTripTime=mscAppnRtpSmoothRoundTripTime, mscAppnPortConnectCost=mscAppnPortConnectCost, mscAppnRtpIndex=mscAppnRtpIndex, mscAppnAdjNnOutOfSeqTdus=mscAppnAdjNnOutOfSeqTdus, mscAppnNnTgLinkAddressEntry=mscAppnNnTgLinkAddressEntry, mscAppnLcnVcCallReferenceNumber=mscAppnLcnVcCallReferenceNumber, mscAppnLsActualCpType=mscAppnLsActualCpType, mscAppnDluUsStatCurTxPacWin=mscAppnDluUsStatCurTxPacWin, mscAppnDlciBanLsDefDlusName=mscAppnDlciBanLsDefDlusName, mscAppnDlus=mscAppnDlus, mscAppnLsEchoResponse=mscAppnLsEchoResponse, mscAppnNnTgRowStatusTable=mscAppnNnTgRowStatusTable, mscAppnDnaHgMHgAddrIndex=mscAppnDnaHgMHgAddrIndex, mscAppnDlciVcMaxSubnetPktSize=mscAppnDlciVcMaxSubnetPktSize, mscAppnLcnOperationalState=mscAppnLcnOperationalState, mscAppnDlciIndex=mscAppnDlciIndex, mscAppnDlciVcCallingLcn=mscAppnDlciVcCallingLcn, mscAppnCosTg=mscAppnCosTg, appnGroupCA02DevelopmentLoad=appnGroupCA02DevelopmentLoad, mscAppnDlusDlusStatTable=mscAppnDlusDlusStatTable, mscAppnDlciDcIndex=mscAppnDlciDcIndex, mscAppnRtpTxBytes=mscAppnRtpTxBytes, mscAppnRtpOperTable=mscAppnRtpOperTable, mscAppnCosTgProvEntry=mscAppnCosTgProvEntry, mscAppnDluDsStat=mscAppnDluDsStat, mscAppnCosTgMaxPropDelay=mscAppnCosTgMaxPropDelay, mscAppnIsrSessPriStatsMaxTxPacWin=mscAppnIsrSessPriStatsMaxTxPacWin, mscAppnDluUsStatSidl=mscAppnDluUsStatSidl, mscAppnDnaHgMHgAddrRowStatus=mscAppnDnaHgMHgAddrRowStatus, mscAppnDluUsStatMaxRxPacWin=mscAppnDluUsStatMaxRxPacWin, mscAppnDnaTransferPriorityOverRide=mscAppnDnaTransferPriorityOverRide, mscAppnPortByteCost=mscAppnPortByteCost, mscAppnNnTgConnectCost=mscAppnNnTgConnectCost, mscAppnDluUsStatTxDataBytes=mscAppnDluUsStatTxDataBytes, appnGroupCA0214=appnGroupCA0214, mscAppnDLURDlusRetryLimit=mscAppnDLURDlusRetryLimit, mscAppnDlciVcPathReliability=mscAppnDlciVcPathReliability, mscAppnDnaHgMHgAddrComponentName=mscAppnDnaHgMHgAddrComponentName, mscAppnLcnStateTable=mscAppnLcnStateTable, mscAppnLcnVcAckStackingTimeouts=mscAppnLcnVcAckStackingTimeouts, mscAppnResourceSequenceNumber=mscAppnResourceSequenceNumber, mscAppnLsUserDefinedParm1=mscAppnLsUserDefinedParm1, mscAppnIsrSessPriStatsCurRxPacWin=mscAppnIsrSessPriStatsCurRxPacWin, mscAppnCosRowStatus=mscAppnCosRowStatus, mscAppnDlusRowStatus=mscAppnDlusRowStatus, mscAppnIsrSessSecStatsCurRxPacWin=mscAppnIsrSessSecStatsCurRxPacWin)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AppnMIB", mscAppnDlciVcRowStatus=mscAppnDlciVcRowStatus, mscAppnDnaHgMIfTable=mscAppnDnaHgMIfTable, mscAppnLcnComponentName=mscAppnLcnComponentName, mscAppnCosTgMaxModemClass=mscAppnCosTgMaxModemClass, mscAppnCosNodeMinRouteAddResistance=mscAppnCosNodeMinRouteAddResistance, mscAppnDlciStateEntry=mscAppnDlciStateEntry, mscAppnDlciBanRowStatusTable=mscAppnDlciBanRowStatusTable, mscAppnDluSscpRxFmdFrames=mscAppnDluSscpRxFmdFrames, mscAppnDnaHgMAvailabilityDelta=mscAppnDnaHgMAvailabilityDelta, mscAppnRtpPktResent=mscAppnRtpPktResent, mscAppnLsActSessCount=mscAppnLsActSessCount, mscAppnDluDsStatIndex=mscAppnDluDsStatIndex, mscAppnPortOutLinkActLim=mscAppnPortOutLinkActLim, mscAppnLsOutMsgBytes=mscAppnLsOutMsgBytes, mscAppnDluSscpOdai=mscAppnDluSscpOdai, mscAppnAdjNnRowStatusEntry=mscAppnAdjNnRowStatusEntry, mscAppnDluDsStatSidl=mscAppnDluDsStatSidl, mscAppnLocTgDlcData=mscAppnLocTgDlcData, mscAppnDnaCugPrivileged=mscAppnDnaCugPrivileged, mscAppnDlciVcPeakOoSeqPktCount=mscAppnDlciVcPeakOoSeqPktCount, mscAppnDluSscpRowStatus=mscAppnDluSscpRowStatus, mscAppnDluSscpSidh=mscAppnDluSscpSidh, mscAppnDlusSscpPuMuTx=mscAppnDlusSscpPuMuTx, mscAppnAdjNnLastFrsnReceived=mscAppnAdjNnLastFrsnReceived, mscAppnDnaHgMOpTable=mscAppnDnaHgMOpTable, mscAppnDluStorageType=mscAppnDluStorageType, mscAppnFrSvcCurrentNumberOfSvcCalls=mscAppnFrSvcCurrentNumberOfSvcCalls, mscAppnDirEntServerName=mscAppnDirEntServerName, mscAppnRtpShortReqTimer=mscAppnRtpShortReqTimer, mscAppnDlciVcIntdTable=mscAppnDlciVcIntdTable, mscAppnDluSscpSessActive=mscAppnDluSscpSessActive, mscAppnIsrSessPriStatsLsName=mscAppnIsrSessPriStatsLsName, mscAppnLsFeatures=mscAppnLsFeatures, mscAppnLsByteCost=mscAppnLsByteCost, mscAppnDefinedLsGoodXids=mscAppnDefinedLsGoodXids, mscAppnDlciVcState=mscAppnDlciVcState, mscAppnControlPointCreateParmsEntry=mscAppnControlPointCreateParmsEntry, mscAppnDlciDcTransferPriority=mscAppnDlciDcTransferPriority, mscAppnDlciVcFrmLossTimeouts=mscAppnDlciVcFrmLossTimeouts, mscAppnLcnVcIntdEntry=mscAppnLcnVcIntdEntry, mscAppnDluRowStatusEntry=mscAppnDluRowStatusEntry, mscAppnDluUsStatTxDataframes=mscAppnDluUsStatTxDataframes, mscAppnLcnDcRowStatusTable=mscAppnLcnDcRowStatusTable, mscAppnPortTargetPacingCount=mscAppnPortTargetPacingCount, mscAppnDnaHgMHgAddrRowStatusEntry=mscAppnDnaHgMHgAddrRowStatusEntry, mscAppnLsLsVcReferenceTable=mscAppnLsLsVcReferenceTable, mscAppnDirEntComponentName=mscAppnDirEntComponentName, mscAppnDlusDactPuRspTx=mscAppnDlusDactPuRspTx, mscAppnLocTgStatus=mscAppnLocTgStatus, mscAppnDnaRowStatus=mscAppnDnaRowStatus, mscAppnDirEntRowStatusEntry=mscAppnDirEntRowStatusEntry, mscAppnNnTgDestFqcpNameIndex=mscAppnNnTgDestFqcpNameIndex, mscAppnDluOperEntry=mscAppnDluOperEntry, mscAppnDlusSscpLuMuRx=mscAppnDlusSscpLuMuRx, mscAppnDnaHgMRowStatusEntry=mscAppnDnaHgMRowStatusEntry, mscAppnDlciBanLsDefSapIndex=mscAppnDlciBanLsDefSapIndex, mscAppnUsageState=mscAppnUsageState, mscAppnLcnVcPathReliability=mscAppnLcnVcPathReliability, mscAppnDluDsStatCurTxPacWin=mscAppnDluDsStatCurTxPacWin, appnMIB=appnMIB, mscAppnDlciSpCommittedInformationRate=mscAppnDlciSpCommittedInformationRate, mscAppnDlciBnnLsDefBackupDlusName=mscAppnDlciBnnLsDefBackupDlusName, mscAppnDlciVcFrdTable=mscAppnDlciVcFrdTable, mscAppnFrSvcStorageType=mscAppnFrSvcStorageType, mscAppnCosNodeIndex=mscAppnCosNodeIndex, mscAppnDlciBnnLsDefAdjacentNodeID=mscAppnDlciBnnLsDefAdjacentNodeID, mscAppnDlciVcCadEntry=mscAppnDlciVcCadEntry, mscAppnDnaHgMRowStatusTable=mscAppnDnaHgMRowStatusTable, mscAppnDlusStorageType=mscAppnDlusStorageType, mscAppnDlciBanIndex=mscAppnDlciBanIndex, mscAppnMdsTxAlertQueueSize=mscAppnMdsTxAlertQueueSize, mscAppnNnTgStatus=mscAppnNnTgStatus, mscAppnIsrSessSecStatsCurTxPacWin=mscAppnIsrSessSecStatsCurTxPacWin, mscAppnFrSvcBanLocalMac=mscAppnFrSvcBanLocalMac, mscAppnDirEntIndex=mscAppnDirEntIndex, mscAppnLsMigration=mscAppnLsMigration, mscAppnDnaOutDefaultPathSensitivity=mscAppnDnaOutDefaultPathSensitivity, mscAppnDluUsStatCurRxPacWin=mscAppnDluUsStatCurRxPacWin, mscAppnDluSscpCurTxPacWin=mscAppnDluSscpCurTxPacWin, mscAppnCosNodeRowStatusTable=mscAppnCosNodeRowStatusTable, mscAppnDluSscpStorageType=mscAppnDluSscpStorageType, mscAppnLcnStateEntry=mscAppnLcnStateEntry, mscAppnLcnVcCalledNpi=mscAppnLcnVcCalledNpi, mscAppnDefinedLsBadXids=mscAppnDefinedLsBadXids, mscAppnDlciBnnLsDefAdjacentCpName=mscAppnDlciBnnLsDefAdjacentCpName, mscAppnLsOutXidBytes=mscAppnLsOutXidBytes, mscAppnAdjNnCpCpSessStatus=mscAppnAdjNnCpCpSessStatus, mscAppnIsrSessRowStatusTable=mscAppnIsrSessRowStatusTable, mscAppnLcnVcStatsTable=mscAppnLcnVcStatsTable, mscAppnIsrSessPriStatsRxDataBytes=mscAppnIsrSessPriStatsRxDataBytes, mscAppnLsIndex=mscAppnLsIndex, mscAppnDlu=mscAppnDlu, mscAppnPort=mscAppnPort, mscAppnDnaHgMComponentName=mscAppnDnaHgMComponentName, mscAppnDlciBnnLsDefProvEntry=mscAppnDlciBnnLsDefProvEntry, mscAppnPortRowStatus=mscAppnPortRowStatus, mscAppnDlusActLuRx=mscAppnDlusActLuRx, mscAppnDlciSpParmsEntry=mscAppnDlciSpParmsEntry, mscAppnDnaCugInterlockCode=mscAppnDnaCugInterlockCode, mscAppnDlciVcRcosFromNetwork=mscAppnDlciVcRcosFromNetwork, mscAppnLsGoodXids=mscAppnLsGoodXids, mscAppnLocTgEffectiveCap=mscAppnLocTgEffectiveCap, mscAppnDlusPipeState=mscAppnDlusPipeState, mscAppnCosTgRowStatusEntry=mscAppnCosTgRowStatusEntry, mscAppnDnaDefaultTransferPriority=mscAppnDnaDefaultTransferPriority, mscAppnAdjNnRowStatusTable=mscAppnAdjNnRowStatusTable, mscAppnIsrSessPriStatsCurTxPacWin=mscAppnIsrSessPriStatsCurTxPacWin, mscAppnCosNodeRowStatus=mscAppnCosNodeRowStatus, mscAppnDlciVcCombErrorsFromSubnet=mscAppnDlciVcCombErrorsFromSubnet, mscAppnDnaHgMHgAddrRowStatusTable=mscAppnDnaHgMHgAddrRowStatusTable, mscAppnDLURRowStatus=mscAppnDLURRowStatus, mscAppnDLURIndex=mscAppnDLURIndex, mscAppnFeatures=mscAppnFeatures, mscAppnPortActXidExchLim=mscAppnPortActXidExchLim, mscAppnLocTg=mscAppnLocTg, mscAppnDluDsStatRowStatusTable=mscAppnDluDsStatRowStatusTable, mscAppnLcnVcCadTable=mscAppnLcnVcCadTable, mscAppnDlciDcNfaValue=mscAppnDlciDcNfaValue, mscAppnPortType=mscAppnPortType, mscAppnLsRowStatusTable=mscAppnLsRowStatusTable, mscAppnDlciVcCalledDna=mscAppnDlciVcCalledDna, mscAppnLsDlcName=mscAppnLsDlcName, mscAppnLsPortName=mscAppnLsPortName, mscAppnStorageType=mscAppnStorageType, mscAppnDlciBnnLsDef=mscAppnDlciBnnLsDef, mscAppnDnaServiceExchange=mscAppnDnaServiceExchange, mscAppnPortMaxIfrmRxWindow=mscAppnPortMaxIfrmRxWindow, mscAppnRtpMinRxRate=mscAppnRtpMinRxRate, mscAppnDluDsStatMaxTxPacWin=mscAppnDluDsStatMaxTxPacWin, mscAppnDlusRowStatusEntry=mscAppnDlusRowStatusEntry, mscAppnDlusActivePUs=mscAppnDlusActivePUs, mscAppnDLURRowStatusEntry=mscAppnDLURRowStatusEntry, mscAppnCosTgRowStatusTable=mscAppnCosTgRowStatusTable, mscAppnLcnVcLocalTxPktSize=mscAppnLcnVcLocalTxPktSize, mscAppnLcnDcTransferPriority=mscAppnLcnDcTransferPriority, mscAppnDlciVcAccountingEnd=mscAppnDlciVcAccountingEnd, mscAppnRtpMinTxRate=mscAppnRtpMinTxRate, mscAppnIsrSessSecStatsOdai=mscAppnIsrSessSecStatsOdai, mscAppnIsrSessSecStatsLsName=mscAppnIsrSessSecStatsLsName)
