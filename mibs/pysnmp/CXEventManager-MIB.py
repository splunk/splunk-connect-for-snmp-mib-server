#
# PySNMP MIB module CXEventManager-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXEventManager-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
cxEventManager, = mibBuilder.importSymbols("CXProduct-SMI", "cxEventManager")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Unsigned32, TimeTicks, iso, Bits, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, ObjectIdentity, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Unsigned32", "TimeTicks", "iso", "Bits", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "ObjectIdentity", "Gauge32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxEvmLoggingCPU = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmLoggingCPU.setStatus('mandatory')
cxEvmTriggerFunction = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmTriggerFunction.setStatus('mandatory')
cxEvmTrigDestSelector = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmTrigDestSelector.setStatus('mandatory')
cxEvmTrigDestSapId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmTrigDestSapId.setStatus('mandatory')
cxEvmTrigArgument1 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmTrigArgument1.setStatus('mandatory')
cxEvmTrigArgument2 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmTrigArgument2.setStatus('mandatory')
cxEvmTrigDestCPU = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmTrigDestCPU.setStatus('mandatory')
cxEvmLogFileTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8), )
if mibBuilder.loadTexts: cxEvmLogFileTable.setStatus('mandatory')
cxEvmLogFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8, 1), ).setIndexNames((0, "CXEventManager-MIB", "cxEvmLogFileId"))
if mibBuilder.loadTexts: cxEvmLogFileEntry.setStatus('mandatory')
cxEvmLogFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxEvmLogFileId.setStatus('mandatory')
cxEvmLogFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmLogFileRowStatus.setStatus('mandatory')
cxEvmLogFileMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmLogFileMaxSize.setStatus('mandatory')
cxEvmLogFileCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmLogFileCurSize.setStatus('mandatory')
cxEvmLogFileCPUFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmLogFileCPUFilter.setStatus('mandatory')
cxEvmLogFileEvLogFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmLogFileEvLogFilter.setStatus('mandatory')
cxEvmLogFileEvTrapFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 17, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxEvmLogFileEvTrapFilter.setStatus('mandatory')
mibBuilder.exportSymbols("CXEventManager-MIB", cxEvmTrigArgument2=cxEvmTrigArgument2, cxEvmTrigDestSelector=cxEvmTrigDestSelector, cxEvmLogFileTable=cxEvmLogFileTable, cxEvmLogFileRowStatus=cxEvmLogFileRowStatus, cxEvmLogFileEvTrapFilter=cxEvmLogFileEvTrapFilter, cxEvmTrigDestCPU=cxEvmTrigDestCPU, cxEvmTrigDestSapId=cxEvmTrigDestSapId, cxEvmLogFileEntry=cxEvmLogFileEntry, cxEvmTrigArgument1=cxEvmTrigArgument1, cxEvmLogFileId=cxEvmLogFileId, cxEvmLogFileEvLogFilter=cxEvmLogFileEvLogFilter, cxEvmTriggerFunction=cxEvmTriggerFunction, cxEvmLoggingCPU=cxEvmLoggingCPU, cxEvmLogFileMaxSize=cxEvmLogFileMaxSize, cxEvmLogFileCurSize=cxEvmLogFileCurSize, cxEvmLogFileCPUFilter=cxEvmLogFileCPUFilter)
