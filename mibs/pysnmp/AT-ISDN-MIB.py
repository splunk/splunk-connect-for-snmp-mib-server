#
# PySNMP MIB module AT-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-ISDN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:14:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
modules, DisplayStringUnsized = mibBuilder.importSymbols("AT-SMI-MIB", "modules", "DisplayStringUnsized")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, IpAddress, Gauge32, Integer32, MibIdentifier, ModuleIdentity, iso, Unsigned32, TimeTicks, Bits, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "IpAddress", "Gauge32", "Integer32", "MibIdentifier", "ModuleIdentity", "iso", "Unsigned32", "TimeTicks", "Bits", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
cc = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37))
cc.setRevisions(('2006-06-28 12:22',))
if mibBuilder.loadTexts: cc.setLastUpdated('200606281222Z')
if mibBuilder.loadTexts: cc.setOrganization('Allied Telesis, Inc')
ccDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1), )
if mibBuilder.loadTexts: ccDetailsTable.setStatus('current')
ccDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1), ).setIndexNames((0, "AT-ISDN-MIB", "ccDetailsIndex"))
if mibBuilder.loadTexts: ccDetailsEntry.setStatus('current')
ccDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsIndex.setStatus('current')
ccDetailsName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 2), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsName.setStatus('current')
ccDetailsRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 3), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRemoteName.setStatus('current')
ccDetailsCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 4), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCalledNumber.setStatus('current')
ccDetailsCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 5), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallingNumber.setStatus('current')
ccDetailsAlternateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 6), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsAlternateNumber.setStatus('current')
ccDetailsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsEnabled.setStatus('current')
ccDetailsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inOnly", 1), ("outOnly", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsDirection.setStatus('current')
ccDetailsPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPrecedence.setStatus('current')
ccDetailsHoldupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsHoldupTime.setStatus('current')
ccDetailsPreferredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPreferredIfIndex.setStatus('current')
ccDetailsRequiredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRequiredIfIndex.setStatus('current')
ccDetailsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPriority.setStatus('current')
ccDetailsRetryT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryT1.setStatus('current')
ccDetailsRetryN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryN1.setStatus('current')
ccDetailsRetryT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1200)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryT2.setStatus('current')
ccDetailsRetryN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryN2.setStatus('current')
ccDetailsKeepup = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsKeepup.setStatus('current')
ccDetailsOutSetupCli = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("calling", 2), ("interface", 3), ("nonumber", 4))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupCli.setStatus('current')
ccDetailsOutSetupUser = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupUser.setStatus('current')
ccDetailsOutSetupCalledSub = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupCalledSub.setStatus('current')
ccDetailsOutSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 22), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSubaddress.setStatus('current')
ccDetailsCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallback.setStatus('current')
ccDetailsCallbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(41)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallbackDelay.setStatus('current')
ccDetailsInSetupCalledSubSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCalledSubSearch.setStatus('current')
ccDetailsInSetupUserSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupUserSearch.setStatus('current')
ccDetailsInSetupCliSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("list", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliSearch.setStatus('current')
ccDetailsInSetupCliSearchList = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliSearchList.setStatus('current')
ccDetailsInAnyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInAnyFlag.setStatus('current')
ccDetailsInSetupCalledSubCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCalledSubCheck.setStatus('current')
ccDetailsInSetupUserCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupUserCheck.setStatus('current')
ccDetailsInSetupCliCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("present", 2), ("required", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliCheck.setStatus('current')
ccDetailsInSetupCliCheckList = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliCheckList.setStatus('current')
ccDetailsUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attach", 1), ("ppp", 2))).clone('attach')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsUserType.setStatus('current')
ccDetailsLoginType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("userdb", 2), ("radius", 3), ("papTacacs", 4), ("chap", 5), ("papRadius", 6), ("tacacs", 7), ("all", 8))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsLoginType.setStatus('current')
ccDetailsUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("cli", 2), ("calledsub", 3), ("useruser", 4), ("callname", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsUsername.setStatus('current')
ccDetailsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("cli", 2), ("calledsub", 3), ("useruser", 4), ("callname", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPassword.setStatus('current')
ccDetailsBumpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsBumpDelay.setStatus('current')
ccDetailsDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-64k", 1), ("rate-56k", 2))).clone('rate-64k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsDataRate.setStatus('current')
ccDetailsPppTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPppTemplate.setStatus('current')
ccDetailsUserModule = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsUserModule.setStatus('current')
ccDetailsNumberAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsNumberAttachments.setStatus('current')
ccCliListTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2), )
if mibBuilder.loadTexts: ccCliListTable.setStatus('current')
ccCliListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2, 1), ).setIndexNames((0, "AT-ISDN-MIB", "ccCliListListIndex"), (0, "AT-ISDN-MIB", "ccCliListEntryIndex"))
if mibBuilder.loadTexts: ccCliListEntry.setStatus('current')
ccCliListListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCliListListIndex.setStatus('current')
ccCliListEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCliListEntryIndex.setStatus('current')
ccCliListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2, 1, 3), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCliListNumber.setStatus('current')
ccActiveCallTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3), )
if mibBuilder.loadTexts: ccActiveCallTable.setStatus('current')
ccActiveCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1), ).setIndexNames((0, "AT-ISDN-MIB", "ccActiveCallIndex"))
if mibBuilder.loadTexts: ccActiveCallEntry.setStatus('current')
ccActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallIndex.setStatus('current')
ccActiveCallDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDetailsIndex.setStatus('current')
ccActiveCallIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallIfIndex.setStatus('current')
ccActiveCallDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-64k", 1), ("rate-56k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDataRate.setStatus('current')
ccActiveCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("null", 1), ("off", 2), ("try", 3), ("on", 4), ("wait", 5), ("await1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallState.setStatus('current')
ccActiveCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDirection.setStatus('current')
ccActiveCallUserModule = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallUserModule.setStatus('current')
ccActiveCallUserInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallUserInstance.setStatus('current')
ccActiveCallBchannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallBchannelIndex.setStatus('current')
ccCallLogTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4), )
if mibBuilder.loadTexts: ccCallLogTable.setStatus('current')
ccCallLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1), ).setIndexNames((0, "AT-ISDN-MIB", "ccCallLogIndex"))
if mibBuilder.loadTexts: ccCallLogEntry.setStatus('current')
ccCallLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogIndex.setStatus('current')
ccCallLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogName.setStatus('current')
ccCallLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initial", 1), ("active", 2), ("disconnected", 3), ("cleared", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogState.setStatus('current')
ccCallLogTimeStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogTimeStarted.setStatus('current')
ccCallLogDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogDirection.setStatus('current')
ccCallLogDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogDuration.setStatus('current')
ccCallLogRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogRemoteNumber.setStatus('current')
ccAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5), )
if mibBuilder.loadTexts: ccAttachmentTable.setStatus('current')
ccAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1), ).setIndexNames((0, "AT-ISDN-MIB", "ccAttachmentDetailsIndex"), (0, "AT-ISDN-MIB", "ccAttachmentEntryIndex"))
if mibBuilder.loadTexts: ccAttachmentEntry.setStatus('current')
ccAttachmentDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentDetailsIndex.setStatus('current')
ccAttachmentEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentEntryIndex.setStatus('current')
ccAttachmentActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentActiveCallIndex.setStatus('current')
ccAttachmentUserInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentUserInstance.setStatus('current')
ccBchannelTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6), )
if mibBuilder.loadTexts: ccBchannelTable.setStatus('current')
ccBchannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1), ).setIndexNames((0, "AT-ISDN-MIB", "ccBchannelIfIndex"), (0, "AT-ISDN-MIB", "ccBchannelChannelIndex"))
if mibBuilder.loadTexts: ccBchannelEntry.setStatus('current')
ccBchannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelIfIndex.setStatus('current')
ccBchannelChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelChannelIndex.setStatus('current')
ccBchannelAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelAllocated.setStatus('current')
ccBchannelCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("data", 2), ("voice", 3), ("x25", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelCallType.setStatus('current')
ccBchannelActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelActiveCallIndex.setStatus('current')
ccBchannelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelPriority.setStatus('current')
ccBchannelDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("unallocated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelDirection.setStatus('current')
mibBuilder.exportSymbols("AT-ISDN-MIB", ccActiveCallDirection=ccActiveCallDirection, ccBchannelIfIndex=ccBchannelIfIndex, ccDetailsInAnyFlag=ccDetailsInAnyFlag, ccDetailsCalledNumber=ccDetailsCalledNumber, ccCliListTable=ccCliListTable, ccDetailsPriority=ccDetailsPriority, ccActiveCallDataRate=ccActiveCallDataRate, ccDetailsPreferredIfIndex=ccDetailsPreferredIfIndex, ccActiveCallUserInstance=ccActiveCallUserInstance, ccDetailsEnabled=ccDetailsEnabled, ccCallLogIndex=ccCallLogIndex, ccDetailsEntry=ccDetailsEntry, ccDetailsRequiredIfIndex=ccDetailsRequiredIfIndex, ccCallLogDirection=ccCallLogDirection, ccCliListEntryIndex=ccCliListEntryIndex, ccDetailsTable=ccDetailsTable, ccDetailsOutSetupCli=ccDetailsOutSetupCli, ccCallLogTable=ccCallLogTable, ccDetailsPassword=ccDetailsPassword, ccCallLogDuration=ccCallLogDuration, ccBchannelChannelIndex=ccBchannelChannelIndex, ccActiveCallUserModule=ccActiveCallUserModule, ccAttachmentTable=ccAttachmentTable, ccBchannelPriority=ccBchannelPriority, ccAttachmentEntry=ccAttachmentEntry, ccAttachmentEntryIndex=ccAttachmentEntryIndex, ccBchannelCallType=ccBchannelCallType, ccDetailsCallback=ccDetailsCallback, ccAttachmentActiveCallIndex=ccAttachmentActiveCallIndex, ccDetailsInSetupCliCheck=ccDetailsInSetupCliCheck, ccCallLogName=ccCallLogName, ccCliListEntry=ccCliListEntry, ccDetailsCallingNumber=ccDetailsCallingNumber, ccAttachmentDetailsIndex=ccAttachmentDetailsIndex, ccDetailsName=ccDetailsName, ccActiveCallEntry=ccActiveCallEntry, ccDetailsOutSubaddress=ccDetailsOutSubaddress, ccCliListNumber=ccCliListNumber, ccDetailsRetryN1=ccDetailsRetryN1, ccCallLogRemoteNumber=ccCallLogRemoteNumber, ccBchannelActiveCallIndex=ccBchannelActiveCallIndex, ccDetailsOutSetupCalledSub=ccDetailsOutSetupCalledSub, ccActiveCallState=ccActiveCallState, ccDetailsUserType=ccDetailsUserType, ccDetailsRetryN2=ccDetailsRetryN2, ccDetailsKeepup=ccDetailsKeepup, ccDetailsDataRate=ccDetailsDataRate, ccDetailsAlternateNumber=ccDetailsAlternateNumber, ccDetailsRetryT2=ccDetailsRetryT2, ccDetailsRetryT1=ccDetailsRetryT1, ccDetailsInSetupUserCheck=ccDetailsInSetupUserCheck, ccActiveCallBchannelIndex=ccActiveCallBchannelIndex, ccActiveCallIfIndex=ccActiveCallIfIndex, ccDetailsInSetupCliSearchList=ccDetailsInSetupCliSearchList, ccDetailsRemoteName=ccDetailsRemoteName, ccCallLogState=ccCallLogState, ccDetailsOutSetupUser=ccDetailsOutSetupUser, ccBchannelEntry=ccBchannelEntry, ccDetailsLoginType=ccDetailsLoginType, ccDetailsPrecedence=ccDetailsPrecedence, ccActiveCallDetailsIndex=ccActiveCallDetailsIndex, ccDetailsCallbackDelay=ccDetailsCallbackDelay, ccActiveCallIndex=ccActiveCallIndex, ccBchannelTable=ccBchannelTable, ccDetailsInSetupCliCheckList=ccDetailsInSetupCliCheckList, ccDetailsInSetupCalledSubSearch=ccDetailsInSetupCalledSubSearch, ccDetailsInSetupCliSearch=ccDetailsInSetupCliSearch, ccBchannelDirection=ccBchannelDirection, ccBchannelAllocated=ccBchannelAllocated, ccAttachmentUserInstance=ccAttachmentUserInstance, ccDetailsUsername=ccDetailsUsername, ccDetailsHoldupTime=ccDetailsHoldupTime, ccDetailsBumpDelay=ccDetailsBumpDelay, ccCallLogEntry=ccCallLogEntry, ccDetailsNumberAttachments=ccDetailsNumberAttachments, ccDetailsInSetupCalledSubCheck=ccDetailsInSetupCalledSubCheck, ccCliListListIndex=ccCliListListIndex, ccDetailsUserModule=ccDetailsUserModule, ccActiveCallTable=ccActiveCallTable, ccCallLogTimeStarted=ccCallLogTimeStarted, PYSNMP_MODULE_ID=cc, ccDetailsIndex=ccDetailsIndex, ccDetailsDirection=ccDetailsDirection, ccDetailsInSetupUserSearch=ccDetailsInSetupUserSearch, ccDetailsPppTemplate=ccDetailsPppTemplate, cc=cc)
