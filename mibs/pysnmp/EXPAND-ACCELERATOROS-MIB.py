#
# PySNMP MIB module EXPAND-ACCELERATOROS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXPAND-ACCELERATOROS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
acceleratorOs, = mibBuilder.importSymbols("EXPAND-NETWORKS-SMI", "acceleratorOs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, TimeTicks, Bits, Integer32, Unsigned32, MibIdentifier, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "TimeTicks", "Bits", "Integer32", "Unsigned32", "MibIdentifier", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "NotificationType", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
accProductId = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accProductId.setStatus('mandatory')
accSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 2))
accSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSysUpTime.setStatus('mandatory')
accSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSoftwareVersion.setStatus('mandatory')
accSysHostName = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSysHostName.setStatus('mandatory')
accSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSysLocation.setStatus('mandatory')
accSysContact = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSysContact.setStatus('mandatory')
accSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSerialNumber.setStatus('mandatory')
accPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3))
accHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1))
accCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1))
accCpuTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accCpuTotalEntries.setStatus('mandatory')
accCpuTable = MibTable((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2), )
if mibBuilder.loadTexts: accCpuTable.setStatus('mandatory')
accCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2, 1), ).setIndexNames((0, "EXPAND-ACCELERATOROS-MIB", "accCpuIndex"))
if mibBuilder.loadTexts: accCpuEntry.setStatus('mandatory')
accCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accCpuIndex.setStatus('mandatory')
accCpuDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accCpuDesc.setStatus('mandatory')
accCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accCpuUtilization.setStatus('mandatory')
accSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3, 2))
accBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3, 2, 1))
accSystemWide = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSystemWide.setStatus('mandatory')
accInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 4))
accInterfaceTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceTotalEntries.setStatus('mandatory')
accInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2), )
if mibBuilder.loadTexts: accInterfaceTable.setStatus('mandatory')
accInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1), ).setIndexNames((0, "EXPAND-ACCELERATOROS-MIB", "accInterfaceIndex"))
if mibBuilder.loadTexts: accInterfaceEntry.setStatus('mandatory')
accInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceIndex.setStatus('mandatory')
accInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceDescription.setStatus('mandatory')
accInterfaceEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("ppp", 2), ("hdlc-cisco", 3), ("frame-relay-ietf", 4), ("frame-relay-cisco", 5), ("lapb-8", 6), ("lapb-128", 7), ("ethernet", 8), ("expand-special", 9), ("raw-hdlc", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceEncapsulation.setStatus('mandatory')
accInterfaceFrameRelayDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceFrameRelayDlci.setStatus('mandatory')
accInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("rs-232", 2), ("rs-422", 3), ("rs-449", 4), ("rs-530", 5), ("v-35", 6), ("x-21", 7), ("e1", 8), ("t1", 9), ("cable", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceType.setStatus('mandatory')
accInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceOperStatus.setStatus('mandatory')
accInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceAdminStatus.setStatus('mandatory')
accInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceMtu.setStatus('mandatory')
accInterfaceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceSpeed.setStatus('mandatory')
accInterfaceOutQlength = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceOutQlength.setStatus('mandatory')
accInterfaceBufferUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceBufferUtil.setStatus('mandatory')
accInterfaceAccelerationAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceAccelerationAdminStatus.setStatus('mandatory')
accInterfaceQueuingStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fifo", 1), ("wfq", 2), ("priority", 3), ("custom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceQueuingStrategy.setStatus('mandatory')
accInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceIpAddress.setStatus('mandatory')
accInterfaceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceIpMask.setStatus('mandatory')
accInterfaceChunkSizeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceChunkSizeMethod.setStatus('mandatory')
accInterfaceChunkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceChunkSize.setStatus('mandatory')
accInterfaceDrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("semi", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceDrcMode.setStatus('mandatory')
accInterfaceKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceKeepAliveInterval.setStatus('mandatory')
accInterfaceKeepAliveIterations = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceKeepAliveIterations.setStatus('mandatory')
accInterfaceProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceProbe.setStatus('mandatory')
accInterfaceInboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-connected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceInboundStatus.setStatus('mandatory')
accInterfaceInboundCore = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceInboundCore.setStatus('mandatory')
accInterfaceOutboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-connected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceOutboundStatus.setStatus('mandatory')
accInterfaceOutboundCore = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceOutboundCore.setStatus('mandatory')
accInterfaceTransmitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplex-receive", 2), ("simplex-transmit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceTransmitDirection.setStatus('mandatory')
accInterfacePerformancePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformancePeriod.setStatus('mandatory')
accInterfacePerformanceInAccelerationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationUp.setStatus('mandatory')
accInterfacePerformanceInAccelerationClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationClear.setStatus('mandatory')
accInterfacePerformanceInAccelerationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationPeriod.setStatus('mandatory')
accInterfacePerformanceOutAccelerationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationUp.setStatus('mandatory')
accInterfacePerformanceOutAccelerationClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationClear.setStatus('mandatory')
accInterfacePerformanceOutAccelerationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationPeriod.setStatus('mandatory')
accInterfacePerformanceDrcResetsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsUp.setStatus('mandatory')
accInterfacePerformanceDrcResetsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsClear.setStatus('mandatory')
accInterfacePerformanceDrcResetsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsPeriod.setStatus('mandatory')
accInterfacePerformanceLostPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsUp.setStatus('mandatory')
accInterfacePerformanceLostPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsClear.setStatus('mandatory')
accInterfacePerformanceLostPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsPeriod.setStatus('mandatory')
accInterfacePerformanceRetransmitPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsUp.setStatus('mandatory')
accInterfacePerformanceRetransmitPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsClear.setStatus('mandatory')
accInterfacePerformanceRetransmitPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsPeriod.setStatus('mandatory')
accInterfacePerformanceRecoveredPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsUp.setStatus('mandatory')
accInterfacePerformanceRecoveredPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 45), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsClear.setStatus('mandatory')
accInterfacePerformanceRecoveredPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 46), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsPeriod.setStatus('mandatory')
accInterfaceThroughputPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputPeriod.setStatus('mandatory')
accInterfaceThroughputCrcErrUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrUp.setStatus('mandatory')
accInterfaceThroughputCrcErrClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrClear.setStatus('mandatory')
accInterfaceThroughputCrcErrPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrPeriod.setStatus('mandatory')
accInterfaceThroughputDropByteUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropByteUp.setStatus('mandatory')
accInterfaceThroughputDropByteClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropByteClear.setStatus('mandatory')
accInterfaceThroughputDropBytePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropBytePeriod.setStatus('mandatory')
accInterfaceThroughputDropPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsUp.setStatus('mandatory')
accInterfaceThroughputDropPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsClear.setStatus('mandatory')
accInterfaceThroughputDropPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsPeriod.setStatus('mandatory')
accInterfaceThroughputInBytesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInBytesUp.setStatus('mandatory')
accInterfaceThroughputInBytesClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInBytesClear.setStatus('mandatory')
accInterfaceThroughputInBytesPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInBytesPeriod.setStatus('mandatory')
accInterfaceThroughputInPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsUp.setStatus('mandatory')
accInterfaceThroughputInPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsClear.setStatus('mandatory')
accInterfaceThroughputInPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsPeriod.setStatus('mandatory')
accInterfaceThroughputOutBytesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesUp.setStatus('mandatory')
accInterfaceThroughputOutBytesClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesClear.setStatus('mandatory')
accInterfaceThroughputOutBytesPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesPeriod.setStatus('mandatory')
accInterfaceThroughputOutPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsUp.setStatus('mandatory')
accInterfaceThroughputOutPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsClear.setStatus('mandatory')
accInterfaceThroughputOutPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsPeriod.setStatus('mandatory')
accInterfaceThroughputRawInBytesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesUp.setStatus('mandatory')
accInterfaceThroughputRawInBytesClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesClear.setStatus('mandatory')
accInterfaceThroughputRawInBytesPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesPeriod.setStatus('mandatory')
accInterfaceThroughputRawOutBytesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesUp.setStatus('mandatory')
accInterfaceThroughputRawOutBytesClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesClear.setStatus('mandatory')
accInterfaceThroughputRawOutBytesPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesPeriod.setStatus('mandatory')
mibBuilder.exportSymbols("EXPAND-ACCELERATOROS-MIB", accInterfaceOutQlength=accInterfaceOutQlength, accCpuIndex=accCpuIndex, accSystemWide=accSystemWide, accInterfacePerformanceInAccelerationUp=accInterfacePerformanceInAccelerationUp, accSystem=accSystem, accInterfacePerformanceInAccelerationPeriod=accInterfacePerformanceInAccelerationPeriod, accInterfaceOperStatus=accInterfaceOperStatus, accInterfaceChunkSize=accInterfaceChunkSize, accInterfaceDrcMode=accInterfaceDrcMode, accInterfacePerformancePeriod=accInterfacePerformancePeriod, accInterfaceThroughputRawOutBytesPeriod=accInterfaceThroughputRawOutBytesPeriod, accCpuTotalEntries=accCpuTotalEntries, accInterfacePerformanceOutAccelerationClear=accInterfacePerformanceOutAccelerationClear, accCpuDesc=accCpuDesc, accInterfaceDescription=accInterfaceDescription, accInterfacePerformanceOutAccelerationPeriod=accInterfacePerformanceOutAccelerationPeriod, accInterfaceThroughputPeriod=accInterfaceThroughputPeriod, accSoftware=accSoftware, accInterfacePerformanceLostPacketsPeriod=accInterfacePerformanceLostPacketsPeriod, accInterfaceThroughputDropPacketsUp=accInterfaceThroughputDropPacketsUp, accSerialNumber=accSerialNumber, accInterfacePerformanceRecoveredPacketsPeriod=accInterfacePerformanceRecoveredPacketsPeriod, accInterfaceThroughputDropBytePeriod=accInterfaceThroughputDropBytePeriod, accInterfaceThroughputRawInBytesPeriod=accInterfaceThroughputRawInBytesPeriod, accCpuUtilization=accCpuUtilization, accInterfaceThroughputRawInBytesClear=accInterfaceThroughputRawInBytesClear, accInterfaceThroughputInPacketsClear=accInterfaceThroughputInPacketsClear, accInterfaceInboundCore=accInterfaceInboundCore, accSoftwareVersion=accSoftwareVersion, accInterfaceAdminStatus=accInterfaceAdminStatus, accSysLocation=accSysLocation, accInterfaces=accInterfaces, accInterfaceThroughputDropByteClear=accInterfaceThroughputDropByteClear, accHardware=accHardware, accInterfacePerformanceRecoveredPacketsClear=accInterfacePerformanceRecoveredPacketsClear, accInterfaceFrameRelayDlci=accInterfaceFrameRelayDlci, accInterfacePerformanceLostPacketsUp=accInterfacePerformanceLostPacketsUp, accInterfaceQueuingStrategy=accInterfaceQueuingStrategy, accBuffer=accBuffer, accInterfaceKeepAliveIterations=accInterfaceKeepAliveIterations, accInterfaceThroughputInPacketsPeriod=accInterfaceThroughputInPacketsPeriod, accInterfaceThroughputInPacketsUp=accInterfaceThroughputInPacketsUp, accInterfaceThroughputCrcErrPeriod=accInterfaceThroughputCrcErrPeriod, accInterfaceIndex=accInterfaceIndex, accInterfaceIpMask=accInterfaceIpMask, accInterfaceThroughputCrcErrClear=accInterfaceThroughputCrcErrClear, accInterfacePerformanceRetransmitPacketsUp=accInterfacePerformanceRetransmitPacketsUp, accProductId=accProductId, accInterfaceThroughputOutBytesPeriod=accInterfaceThroughputOutBytesPeriod, accInterfaceEntry=accInterfaceEntry, accInterfacePerformanceLostPacketsClear=accInterfacePerformanceLostPacketsClear, accInterfaceBufferUtil=accInterfaceBufferUtil, accInterfaceOutboundStatus=accInterfaceOutboundStatus, accSysHostName=accSysHostName, accInterfaceThroughputInBytesClear=accInterfaceThroughputInBytesClear, accSysContact=accSysContact, accInterfacePerformanceInAccelerationClear=accInterfacePerformanceInAccelerationClear, accInterfaceChunkSizeMethod=accInterfaceChunkSizeMethod, accInterfaceThroughputDropPacketsPeriod=accInterfaceThroughputDropPacketsPeriod, accPerformance=accPerformance, accInterfacePerformanceRecoveredPacketsUp=accInterfacePerformanceRecoveredPacketsUp, accInterfaceThroughputDropPacketsClear=accInterfaceThroughputDropPacketsClear, accInterfaceSpeed=accInterfaceSpeed, accInterfacePerformanceRetransmitPacketsClear=accInterfacePerformanceRetransmitPacketsClear, accCpu=accCpu, accInterfaceThroughputOutBytesClear=accInterfaceThroughputOutBytesClear, accInterfaceThroughputOutPacketsUp=accInterfaceThroughputOutPacketsUp, accInterfaceThroughputRawInBytesUp=accInterfaceThroughputRawInBytesUp, accInterfaceThroughputOutPacketsPeriod=accInterfaceThroughputOutPacketsPeriod, accInterfaceThroughputRawOutBytesClear=accInterfaceThroughputRawOutBytesClear, accInterfaceThroughputInBytesUp=accInterfaceThroughputInBytesUp, accCpuEntry=accCpuEntry, accInterfaceInboundStatus=accInterfaceInboundStatus, accSysUpTime=accSysUpTime, accInterfaceMtu=accInterfaceMtu, accInterfaceTransmitDirection=accInterfaceTransmitDirection, accInterfacePerformanceDrcResetsPeriod=accInterfacePerformanceDrcResetsPeriod, accInterfaceTotalEntries=accInterfaceTotalEntries, accInterfacePerformanceDrcResetsClear=accInterfacePerformanceDrcResetsClear, accInterfaceProbe=accInterfaceProbe, accCpuTable=accCpuTable, accInterfaceIpAddress=accInterfaceIpAddress, accInterfaceOutboundCore=accInterfaceOutboundCore, accInterfacePerformanceDrcResetsUp=accInterfacePerformanceDrcResetsUp, accInterfaceThroughputOutBytesUp=accInterfaceThroughputOutBytesUp, accInterfaceAccelerationAdminStatus=accInterfaceAccelerationAdminStatus, accInterfaceTable=accInterfaceTable, accInterfaceType=accInterfaceType, accInterfaceEncapsulation=accInterfaceEncapsulation, accInterfaceThroughputRawOutBytesUp=accInterfaceThroughputRawOutBytesUp, accInterfaceThroughputInBytesPeriod=accInterfaceThroughputInBytesPeriod, accInterfacePerformanceOutAccelerationUp=accInterfacePerformanceOutAccelerationUp, accInterfaceThroughputDropByteUp=accInterfaceThroughputDropByteUp, accInterfaceKeepAliveInterval=accInterfaceKeepAliveInterval, accInterfacePerformanceRetransmitPacketsPeriod=accInterfacePerformanceRetransmitPacketsPeriod, accInterfaceThroughputOutPacketsClear=accInterfaceThroughputOutPacketsClear, accInterfaceThroughputCrcErrUp=accInterfaceThroughputCrcErrUp)
