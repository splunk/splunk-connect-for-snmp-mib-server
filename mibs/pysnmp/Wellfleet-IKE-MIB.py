#
# PySNMP MIB module Wellfleet-IKE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IKE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, MibIdentifier, Counter32, TimeTicks, IpAddress, Gauge32, ObjectIdentity, Unsigned32, Counter64, Opaque, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "MibIdentifier", "Counter32", "TimeTicks", "IpAddress", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter64", "Opaque", "Integer32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIKEGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIKEGroup")
wfIkeDescriptorTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1), )
if mibBuilder.loadTexts: wfIkeDescriptorTable.setStatus('mandatory')
wfIkeDescriptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1), ).setIndexNames((0, "Wellfleet-IKE-MIB", "wfIkeDescriptorLocalIpAddr"), (0, "Wellfleet-IKE-MIB", "wfIkeDescriptorPeerIpAddr"), (0, "Wellfleet-IKE-MIB", "wfIkeDescriptorIndex"))
if mibBuilder.loadTexts: wfIkeDescriptorEntry.setStatus('mandatory')
wfIkeDescriptorCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorCreate.setStatus('mandatory')
wfIkeDescriptorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeDescriptorStatus.setStatus('mandatory')
wfIkeDescriptorLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeDescriptorLocalIpAddr.setStatus('mandatory')
wfIkeDescriptorPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeDescriptorPeerIpAddr.setStatus('mandatory')
wfIkeDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeDescriptorIndex.setStatus('mandatory')
wfIkeDescriptorExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorExchange.setStatus('mandatory')
wfIkeDescriptorProposals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 7), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorProposals.setStatus('mandatory')
wfIkeDescriptorName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorName.setStatus('mandatory')
wfIkeDescriptorPreSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorPreSharedSecret.setStatus('mandatory')
wfIkeDescriptorExpiryMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 10), Integer32().clone(480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorExpiryMinutes.setStatus('mandatory')
wfIkeDescriptorExpiryKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 11), Integer32().clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorExpiryKBytes.setStatus('mandatory')
wfIkeDescriptorExpiryPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minutes", 1), ("kbytes", 2))).clone('minutes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorExpiryPref.setStatus('mandatory')
wfIkeDescriptorIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("range", 1), ("subnet", 2), ("host", 3))).clone('range')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorIdType.setStatus('mandatory')
wfIkeTransformTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2), )
if mibBuilder.loadTexts: wfIkeTransformTable.setStatus('mandatory')
wfIkeTransformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1), ).setIndexNames((0, "Wellfleet-IKE-MIB", "wfIkeTransformNumber"))
if mibBuilder.loadTexts: wfIkeTransformEntry.setStatus('mandatory')
wfIkeTransformCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeTransformCreate.setStatus('mandatory')
wfIkeTransformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeTransformStatus.setStatus('mandatory')
wfIkeTransformNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeTransformNumber.setStatus('mandatory')
wfIkeTransformCipherAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5))).clone(namedValues=NamedValues(("des", 1), ("desede", 5))).clone('desede')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeTransformCipherAlg.setStatus('mandatory')
wfIkeTransformDesKeyStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fortybit", 1), ("fiftysixbit", 2))).clone('fiftysixbit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeTransformDesKeyStrength.setStatus('mandatory')
wfIkeTransformIntegrityAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha1", 2))).clone('sha1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeTransformIntegrityAlg.setStatus('mandatory')
wfIkeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3), )
if mibBuilder.loadTexts: wfIkeSlotTable.setStatus('mandatory')
wfIkeSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3, 1), ).setIndexNames((0, "Wellfleet-IKE-MIB", "wfIkeSlotNum"))
if mibBuilder.loadTexts: wfIkeSlotEntry.setStatus('mandatory')
wfIkeSlotCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeSlotCreate.setStatus('mandatory')
wfIkeSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSlotNum.setStatus('mandatory')
wfIkeSlotLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeSlotLogLevel.setStatus('mandatory')
wfIkeSaTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4), )
if mibBuilder.loadTexts: wfIkeSaTable.setStatus('mandatory')
wfIkeSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1), ).setIndexNames((0, "Wellfleet-IKE-MIB", "wfIkeSaSrc"), (0, "Wellfleet-IKE-MIB", "wfIkeSaDest"), (0, "Wellfleet-IKE-MIB", "wfIkeSaIndex"))
if mibBuilder.loadTexts: wfIkeSaEntry.setStatus('mandatory')
wfIkeSaCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaCreate.setStatus('mandatory')
wfIkeSaSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaSrc.setStatus('mandatory')
wfIkeSaDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaDest.setStatus('mandatory')
wfIkeSaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaIndex.setStatus('mandatory')
wfIkeSaCipherAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("des", 2), ("des3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaCipherAlg.setStatus('mandatory')
wfIkeSaIntegrityAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("md5", 2), ("sha1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaIntegrityAlg.setStatus('mandatory')
wfIkeSaExpiryUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minutes", 1), ("kilobytes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaExpiryUnits.setStatus('mandatory')
wfIkeSaExpiryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaExpiryValue.setStatus('mandatory')
wfIkeSaBadDecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaBadDecrypt.setStatus('mandatory')
wfIkeSaBadPad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaBadPad.setStatus('mandatory')
wfIkeSaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaTxPkts.setStatus('mandatory')
wfIkeSaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaRxPkts.setStatus('mandatory')
wfIkeSaTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaTxOctets.setStatus('mandatory')
wfIkeSaRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaRxOctets.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-IKE-MIB", wfIkeSaDest=wfIkeSaDest, wfIkeDescriptorPreSharedSecret=wfIkeDescriptorPreSharedSecret, wfIkeTransformTable=wfIkeTransformTable, wfIkeSlotTable=wfIkeSlotTable, wfIkeTransformEntry=wfIkeTransformEntry, wfIkeSaCreate=wfIkeSaCreate, wfIkeDescriptorProposals=wfIkeDescriptorProposals, wfIkeDescriptorExpiryMinutes=wfIkeDescriptorExpiryMinutes, wfIkeSlotEntry=wfIkeSlotEntry, wfIkeSaSrc=wfIkeSaSrc, wfIkeSaBadDecrypt=wfIkeSaBadDecrypt, wfIkeDescriptorTable=wfIkeDescriptorTable, wfIkeSlotCreate=wfIkeSlotCreate, wfIkeDescriptorExpiryPref=wfIkeDescriptorExpiryPref, wfIkeTransformCipherAlg=wfIkeTransformCipherAlg, wfIkeSaExpiryValue=wfIkeSaExpiryValue, wfIkeDescriptorIdType=wfIkeDescriptorIdType, wfIkeDescriptorEntry=wfIkeDescriptorEntry, wfIkeTransformIntegrityAlg=wfIkeTransformIntegrityAlg, wfIkeSaBadPad=wfIkeSaBadPad, wfIkeSaCipherAlg=wfIkeSaCipherAlg, wfIkeDescriptorCreate=wfIkeDescriptorCreate, wfIkeDescriptorExpiryKBytes=wfIkeDescriptorExpiryKBytes, wfIkeSaEntry=wfIkeSaEntry, wfIkeSaRxOctets=wfIkeSaRxOctets, wfIkeSlotNum=wfIkeSlotNum, wfIkeDescriptorPeerIpAddr=wfIkeDescriptorPeerIpAddr, wfIkeSaTxOctets=wfIkeSaTxOctets, wfIkeTransformCreate=wfIkeTransformCreate, wfIkeSaTable=wfIkeSaTable, wfIkeSaTxPkts=wfIkeSaTxPkts, wfIkeSaRxPkts=wfIkeSaRxPkts, wfIkeDescriptorStatus=wfIkeDescriptorStatus, wfIkeTransformStatus=wfIkeTransformStatus, wfIkeSaExpiryUnits=wfIkeSaExpiryUnits, wfIkeTransformDesKeyStrength=wfIkeTransformDesKeyStrength, wfIkeSlotLogLevel=wfIkeSlotLogLevel, wfIkeSaIntegrityAlg=wfIkeSaIntegrityAlg, wfIkeSaIndex=wfIkeSaIndex, wfIkeDescriptorExchange=wfIkeDescriptorExchange, wfIkeDescriptorIndex=wfIkeDescriptorIndex, wfIkeDescriptorLocalIpAddr=wfIkeDescriptorLocalIpAddr, wfIkeTransformNumber=wfIkeTransformNumber, wfIkeDescriptorName=wfIkeDescriptorName)
