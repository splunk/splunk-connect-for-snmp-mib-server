#
# PySNMP MIB module RS-232-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RS-232-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:01:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Integer32, transmission, Unsigned32, TimeTicks, Counter64, Gauge32, ObjectIdentity, ModuleIdentity, MibIdentifier, Bits, NotificationType, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "transmission", "Unsigned32", "TimeTicks", "Counter64", "Gauge32", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Bits", "NotificationType", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rs232 = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 33))
if mibBuilder.loadTexts: rs232.setLastUpdated('9405261700Z')
if mibBuilder.loadTexts: rs232.setOrganization('IETF Character MIB Working Group')
rs232Number = MibScalar((1, 3, 6, 1, 2, 1, 10, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232Number.setStatus('current')
rs232PortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 2), )
if mibBuilder.loadTexts: rs232PortTable.setStatus('current')
rs232PortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 2, 1), ).setIndexNames((0, "RS-232-MIB", "rs232PortIndex"))
if mibBuilder.loadTexts: rs232PortEntry.setStatus('current')
rs232PortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortIndex.setStatus('current')
rs232PortType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5), ("x21", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortType.setStatus('current')
rs232PortInSigNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortInSigNumber.setStatus('current')
rs232PortOutSigNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortOutSigNumber.setStatus('current')
rs232PortInSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortInSpeed.setStatus('current')
rs232PortOutSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortOutSpeed.setStatus('current')
rs232PortInFlowType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ctsRts", 2), ("dsrDtr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortInFlowType.setStatus('current')
rs232PortOutFlowType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ctsRts", 2), ("dsrDtr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortOutFlowType.setStatus('current')
rs232AsyncPortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 3), )
if mibBuilder.loadTexts: rs232AsyncPortTable.setStatus('current')
rs232AsyncPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 3, 1), ).setIndexNames((0, "RS-232-MIB", "rs232AsyncPortIndex"))
if mibBuilder.loadTexts: rs232AsyncPortEntry.setStatus('current')
rs232AsyncPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortIndex.setStatus('current')
rs232AsyncPortBits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortBits.setStatus('current')
rs232AsyncPortStopBits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndHalf", 3), ("dynamic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortStopBits.setStatus('current')
rs232AsyncPortParity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortParity.setStatus('current')
rs232AsyncPortAutobaud = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortAutobaud.setStatus('current')
rs232AsyncPortParityErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortParityErrs.setStatus('current')
rs232AsyncPortFramingErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortFramingErrs.setStatus('current')
rs232AsyncPortOverrunErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortOverrunErrs.setStatus('current')
rs232SyncPortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 4), )
if mibBuilder.loadTexts: rs232SyncPortTable.setStatus('current')
rs232SyncPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 4, 1), ).setIndexNames((0, "RS-232-MIB", "rs232SyncPortIndex"))
if mibBuilder.loadTexts: rs232SyncPortEntry.setStatus('current')
rs232SyncPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortIndex.setStatus('current')
rs232SyncPortClockSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("split", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortClockSource.setStatus('current')
rs232SyncPortFrameCheckErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortFrameCheckErrs.setStatus('current')
rs232SyncPortTransmitUnderrunErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortTransmitUnderrunErrs.setStatus('current')
rs232SyncPortReceiveOverrunErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortReceiveOverrunErrs.setStatus('current')
rs232SyncPortInterruptedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortInterruptedFrames.setStatus('current')
rs232SyncPortAbortedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortAbortedFrames.setStatus('current')
rs232SyncPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortRole.setStatus('current')
rs232SyncPortEncoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi", 2))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortEncoding.setStatus('current')
rs232SyncPortRTSControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("controlled", 1), ("constant", 2))).clone('constant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortRTSControl.setStatus('current')
rs232SyncPortRTSCTSDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortRTSCTSDelay.setStatus('current')
rs232SyncPortMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fdx", 1), ("hdx", 2), ("simplex-receive", 3), ("simplex-send", 4))).clone('fdx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortMode.setStatus('current')
rs232SyncPortIdlePattern = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mark", 1), ("space", 2))).clone('space')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortIdlePattern.setStatus('current')
rs232SyncPortMinFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 14), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortMinFlags.setStatus('current')
rs232InSigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 5), )
if mibBuilder.loadTexts: rs232InSigTable.setStatus('current')
rs232InSigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 5, 1), ).setIndexNames((0, "RS-232-MIB", "rs232InSigPortIndex"), (0, "RS-232-MIB", "rs232InSigName"))
if mibBuilder.loadTexts: rs232InSigEntry.setStatus('current')
rs232InSigPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigPortIndex.setStatus('current')
rs232InSigName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6), ("sq", 7), ("srs", 8), ("srts", 9), ("scts", 10), ("sdcd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigName.setStatus('current')
rs232InSigState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigState.setStatus('current')
rs232InSigChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigChanges.setStatus('current')
rs232OutSigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 6), )
if mibBuilder.loadTexts: rs232OutSigTable.setStatus('current')
rs232OutSigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 6, 1), ).setIndexNames((0, "RS-232-MIB", "rs232OutSigPortIndex"), (0, "RS-232-MIB", "rs232OutSigName"))
if mibBuilder.loadTexts: rs232OutSigEntry.setStatus('current')
rs232OutSigPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigPortIndex.setStatus('current')
rs232OutSigName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6), ("sq", 7), ("srs", 8), ("srts", 9), ("scts", 10), ("sdcd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigName.setStatus('current')
rs232OutSigState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigState.setStatus('current')
rs232OutSigChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigChanges.setStatus('current')
rs232Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 33, 7))
rs232Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 33, 7, 1))
rs232Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 33, 7, 2))
rs232Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 33, 7, 2, 1)).setObjects(("RS-232-MIB", "rs232Group"), ("RS-232-MIB", "rs232AsyncGroup"), ("RS-232-MIB", "rs232SyncGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rs232Compliance = rs232Compliance.setStatus('current')
rs232Group = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 33, 7, 1, 1)).setObjects(("RS-232-MIB", "rs232Number"), ("RS-232-MIB", "rs232PortIndex"), ("RS-232-MIB", "rs232PortType"), ("RS-232-MIB", "rs232PortInSigNumber"), ("RS-232-MIB", "rs232PortOutSigNumber"), ("RS-232-MIB", "rs232PortInSpeed"), ("RS-232-MIB", "rs232PortOutSpeed"), ("RS-232-MIB", "rs232PortInFlowType"), ("RS-232-MIB", "rs232PortOutFlowType"), ("RS-232-MIB", "rs232InSigPortIndex"), ("RS-232-MIB", "rs232InSigName"), ("RS-232-MIB", "rs232InSigState"), ("RS-232-MIB", "rs232InSigChanges"), ("RS-232-MIB", "rs232OutSigPortIndex"), ("RS-232-MIB", "rs232OutSigName"), ("RS-232-MIB", "rs232OutSigState"), ("RS-232-MIB", "rs232OutSigChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rs232Group = rs232Group.setStatus('current')
rs232AsyncGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 33, 7, 1, 2)).setObjects(("RS-232-MIB", "rs232AsyncPortIndex"), ("RS-232-MIB", "rs232AsyncPortBits"), ("RS-232-MIB", "rs232AsyncPortStopBits"), ("RS-232-MIB", "rs232AsyncPortParity"), ("RS-232-MIB", "rs232AsyncPortAutobaud"), ("RS-232-MIB", "rs232AsyncPortParityErrs"), ("RS-232-MIB", "rs232AsyncPortFramingErrs"), ("RS-232-MIB", "rs232AsyncPortOverrunErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rs232AsyncGroup = rs232AsyncGroup.setStatus('current')
rs232SyncGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 33, 7, 1, 3)).setObjects(("RS-232-MIB", "rs232SyncPortIndex"), ("RS-232-MIB", "rs232SyncPortClockSource"), ("RS-232-MIB", "rs232SyncPortFrameCheckErrs"), ("RS-232-MIB", "rs232SyncPortTransmitUnderrunErrs"), ("RS-232-MIB", "rs232SyncPortReceiveOverrunErrs"), ("RS-232-MIB", "rs232SyncPortInterruptedFrames"), ("RS-232-MIB", "rs232SyncPortAbortedFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rs232SyncGroup = rs232SyncGroup.setStatus('current')
rs232SyncSDLCGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 33, 7, 1, 4)).setObjects(("RS-232-MIB", "rs232SyncPortRole"), ("RS-232-MIB", "rs232SyncPortEncoding"), ("RS-232-MIB", "rs232SyncPortRTSControl"), ("RS-232-MIB", "rs232SyncPortRTSCTSDelay"), ("RS-232-MIB", "rs232SyncPortMode"), ("RS-232-MIB", "rs232SyncPortIdlePattern"), ("RS-232-MIB", "rs232SyncPortMinFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rs232SyncSDLCGroup = rs232SyncSDLCGroup.setStatus('current')
mibBuilder.exportSymbols("RS-232-MIB", rs232SyncPortInterruptedFrames=rs232SyncPortInterruptedFrames, rs232AsyncPortParityErrs=rs232AsyncPortParityErrs, rs232OutSigEntry=rs232OutSigEntry, rs232SyncPortIdlePattern=rs232SyncPortIdlePattern, rs232PortType=rs232PortType, rs232SyncPortMinFlags=rs232SyncPortMinFlags, rs232AsyncPortStopBits=rs232AsyncPortStopBits, rs232=rs232, rs232SyncPortClockSource=rs232SyncPortClockSource, rs232PortInSpeed=rs232PortInSpeed, rs232InSigChanges=rs232InSigChanges, rs232InSigState=rs232InSigState, rs232AsyncPortFramingErrs=rs232AsyncPortFramingErrs, rs232Number=rs232Number, rs232Conformance=rs232Conformance, rs232SyncGroup=rs232SyncGroup, rs232PortOutSigNumber=rs232PortOutSigNumber, rs232PortOutSpeed=rs232PortOutSpeed, rs232OutSigName=rs232OutSigName, rs232SyncPortRTSControl=rs232SyncPortRTSControl, rs232PortTable=rs232PortTable, rs232AsyncPortParity=rs232AsyncPortParity, rs232PortEntry=rs232PortEntry, rs232SyncSDLCGroup=rs232SyncSDLCGroup, PYSNMP_MODULE_ID=rs232, rs232SyncPortTransmitUnderrunErrs=rs232SyncPortTransmitUnderrunErrs, rs232Groups=rs232Groups, rs232AsyncGroup=rs232AsyncGroup, rs232PortIndex=rs232PortIndex, rs232SyncPortRTSCTSDelay=rs232SyncPortRTSCTSDelay, rs232InSigEntry=rs232InSigEntry, rs232SyncPortTable=rs232SyncPortTable, rs232AsyncPortAutobaud=rs232AsyncPortAutobaud, rs232InSigName=rs232InSigName, rs232SyncPortEntry=rs232SyncPortEntry, rs232AsyncPortOverrunErrs=rs232AsyncPortOverrunErrs, rs232SyncPortFrameCheckErrs=rs232SyncPortFrameCheckErrs, rs232SyncPortEncoding=rs232SyncPortEncoding, rs232InSigPortIndex=rs232InSigPortIndex, rs232AsyncPortEntry=rs232AsyncPortEntry, rs232AsyncPortTable=rs232AsyncPortTable, rs232OutSigPortIndex=rs232OutSigPortIndex, rs232InSigTable=rs232InSigTable, rs232OutSigChanges=rs232OutSigChanges, rs232AsyncPortBits=rs232AsyncPortBits, rs232SyncPortReceiveOverrunErrs=rs232SyncPortReceiveOverrunErrs, rs232OutSigState=rs232OutSigState, rs232AsyncPortIndex=rs232AsyncPortIndex, rs232PortOutFlowType=rs232PortOutFlowType, rs232SyncPortIndex=rs232SyncPortIndex, rs232SyncPortMode=rs232SyncPortMode, rs232SyncPortAbortedFrames=rs232SyncPortAbortedFrames, rs232PortInFlowType=rs232PortInFlowType, rs232SyncPortRole=rs232SyncPortRole, rs232Group=rs232Group, rs232Compliances=rs232Compliances, rs232Compliance=rs232Compliance, rs232PortInSigNumber=rs232PortInSigNumber, rs232OutSigTable=rs232OutSigTable)
