#
# PySNMP MIB module CIOMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIOMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:32:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Integer32, Unsigned32, enterprises, Counter32, NotificationType, Counter64, Gauge32, ObjectIdentity, MibIdentifier, Bits, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Integer32", "Unsigned32", "enterprises", "Counter32", "NotificationType", "Counter64", "Gauge32", "ObjectIdentity", "MibIdentifier", "Bits", "iso", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
storagemanagement = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2))
cio2 = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12))
mibRevision = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 1))
storageDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 2))
storageController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 3))
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 4))
busPort = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 5))
aggregatePhysicalExtent = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 6))
aggregateProtectedSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 7))
volumeSet = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 8))
redundancyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 9))
worldWideIds = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 10))
associations = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 11))
busPortAssociations = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 12))
componentSpareAssociations = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 13))
overallObjectStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 14))
operationalStates = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 15))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 16))
trapLogCount = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 17))
trapLog = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 18))
revMajor = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revMajor.setStatus('mandatory')
revMinor = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revMinor.setStatus('mandatory')
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
devEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1), ).setIndexNames((0, "CIOMIB", "devIndex"))
if mibBuilder.loadTexts: devEntry.setStatus('mandatory')
devIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIndex.setStatus('mandatory')
devType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("rigidDiskDrive", 3), ("flexibleDisketteDrive", 4), ("opticalWriteOnceReadManyDrive", 6), ("magnetoOpticalDrive", 7), ("compactDiskDrive", 8), ("flashDisk", 9), ("cartridgeRigidDiskDrive", 10), ("opticalFloppyDrive", 11), ("tapeDrive", 12), ("solidState", 13), ("mediaChanger", 14), ("digitalVersatileDiskDrive", 15), ("digitalVersatileDiskRAMDrive", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devType.setStatus('mandatory')
devTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devTypeDescr.setStatus('mandatory')
devSubIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSubIdentifier.setStatus('mandatory')
devMediaBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devMediaBlockSize.setStatus('mandatory')
devFormattedMediaCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFormattedMediaCapacity.setStatus('mandatory')
devRemovableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devRemovableDevice.setStatus('mandatory')
devLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devLoaded.setStatus('mandatory')
devRemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devRemovableMedia.setStatus('mandatory')
devMediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devMediaLoaded.setStatus('mandatory')
devCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devCompression.setStatus('mandatory')
devEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devEncryption.setStatus('mandatory')
ctlrTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 3, 1), )
if mibBuilder.loadTexts: ctlrTable.setStatus('mandatory')
ctlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 3, 1, 1), ).setIndexNames((0, "CIOMIB", "ctlrIndex"))
if mibBuilder.loadTexts: ctlrEntry.setStatus('mandatory')
ctlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlrIndex.setStatus('mandatory')
ctlrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlrDescription.setStatus('mandatory')
ctlrProtectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("unprotected", 3), ("protected", 4), ("protectedThroughSCSI3SCC", 5), ("protectedThroughSCSI3SCC2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlrProtectionManagement.setStatus('mandatory')
ctlrBusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlrBusMaster.setStatus('mandatory')
ctlrSecondsSinceLastPowerUp = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlrSecondsSinceLastPowerUp.setStatus('mandatory')
enclTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 4, 1), )
if mibBuilder.loadTexts: enclTable.setStatus('mandatory')
enclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 4, 1, 1), ).setIndexNames((0, "CIOMIB", "enclIndex"))
if mibBuilder.loadTexts: enclEntry.setStatus('mandatory')
enclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclIndex.setStatus('mandatory')
enclType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("decfault", 3), ("safte", 4), ("ses", 5), ("aemi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclType.setStatus('mandatory')
enclDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclDescription.setStatus('mandatory')
busPortTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1), )
if mibBuilder.loadTexts: busPortTable.setStatus('mandatory')
busPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1), ).setIndexNames((0, "CIOMIB", "portIndex"))
if mibBuilder.loadTexts: busPortEntry.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("eisa", 3), ("isa", 4), ("pci", 5), ("ata-atapi", 6), ("flexibleDiskette", 7), ("interface1496", 8), ("scsiParallel", 9), ("scsiFibreChannel", 10), ("scsiSerialBusProtocol", 11), ("scsiSerialBusProtocol2", 12), ("scsiSerialStorageArchitecture", 13), ("vesa", 14), ("pcmcia", 15), ("universalSerialBus", 16), ("parallelPort", 17), ("escon", 18), ("diagnostic", 19), ("i2c", 20), ("power", 21), ("hippi", 22), ("multibus", 23), ("vme", 24), ("ipi", 25), ("ieee488", 26), ("rs232", 27), ("ieee802-3-10Base5", 28), ("ieee802-3-10Base2", 29), ("ieee802-3-1Base5", 30), ("ieee802-3-10Broad36", 31), ("ieee802-3-100BaseVG", 32), ("ieee802-5-Tokenring", 33), ("fddi", 34), ("mca", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portProtocol.setStatus('mandatory')
portProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portProtocolDescription.setStatus('mandatory')
portSignalCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("singleEnded", 3), ("differential", 4), ("lowVoltageDifferential", 5), ("optical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSignalCharacteristics.setStatus('mandatory')
portAddressDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAddressDescriptor.setStatus('mandatory')
portIsochronous = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIsochronous.setStatus('mandatory')
portMaximumWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaximumWidth.setStatus('mandatory')
portMaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaximumTransferRate.setStatus('mandatory')
portMaximumAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaximumAttachments.setStatus('mandatory')
portConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("scsi-A-HighDensityShielded-50pin", 4), ("scsi-A-HighDensityUnshielded-50pin", 5), ("scsi-A-LowDensityShielded-50pin", 6), ("scsi-A-LowDensityUnshielded-50pin", 7), ("scsi-P-HighDensityShielded-68pin", 8), ("scsi-P-HighDensityUnshielded-68pin", 9), ("scsi-SCA-I-80pin", 10), ("scsi-SCA-II-80pin", 11), ("scsi-FibreChannel-DB9-Copper", 12), ("scsi-FibreChannel-Fibre", 13), ("scsi-FibreChannel-SCA-II-40pin", 14), ("scsi-FibreChannel-SCA-II-20pin", 15), ("scsi-FibreChannel-BNC", 16), ("ata-3-5inch-40pin", 17), ("ata-2-5inch-44pin", 18), ("serial-9pin", 19), ("serial-25pin", 20), ("rs232-25pin", 21), ("rs422", 22), ("ieee488", 23), ("aui", 24), ("upt-Category3", 25), ("upt-Category4", 26), ("upt-Category5", 27), ("bnc", 28), ("stp-RJ11", 29), ("stp-RJ45", 30), ("stp-DB9", 31), ("fiberMIC", 32), ("appleAUI", 33), ("pciSlot", 34), ("isaSlot", 35), ("eisaSlot", 36), ("vesaSlot", 37), ("pcmciaSlot", 38), ("pc-CardSlot", 39), ("floppyDiskette5-25inch", 40), ("floppyDiskette3-5inch", 41), ("hssdc-6pin", 42), ("gbicSocket", 43), ("thirteenNinetyFour-6pin", 44), ("scsi-VHDCIshielded-68pin", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConnectorType.setStatus('mandatory')
portConnectorTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConnectorTypeDescription.setStatus('mandatory')
portConnectorGender = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("female", 3), ("male", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConnectorGender.setStatus('mandatory')
aggregatePExtentTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 6, 1), )
if mibBuilder.loadTexts: aggregatePExtentTable.setStatus('mandatory')
aggregatePExtentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 6, 1, 1), ).setIndexNames((0, "CIOMIB", "aggPExtentIndex"))
if mibBuilder.loadTexts: aggregatePExtentEntry.setStatus('mandatory')
aggPExtentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggPExtentIndex.setStatus('mandatory')
aggPExtentBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggPExtentBlocks.setStatus('mandatory')
aggPExtentCheckDataBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggPExtentCheckDataBlocks.setStatus('mandatory')
aggregatePsExtentTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 7, 1), )
if mibBuilder.loadTexts: aggregatePsExtentTable.setStatus('mandatory')
aggregatePsExtentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 7, 1, 1), ).setIndexNames((0, "CIOMIB", "aggPsExtentIndex"))
if mibBuilder.loadTexts: aggregatePsExtentEntry.setStatus('mandatory')
aggPsExtentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggPsExtentIndex.setStatus('mandatory')
aggPsExtentBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggPsExtentBlocks.setStatus('mandatory')
volumeSetTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 8, 1), )
if mibBuilder.loadTexts: volumeSetTable.setStatus('mandatory')
volumeSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 8, 1, 1), ).setIndexNames((0, "CIOMIB", "volIndex"))
if mibBuilder.loadTexts: volumeSetEntry.setStatus('mandatory')
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volIndex.setStatus('mandatory')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volName.setStatus('mandatory')
volCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCapacity.setStatus('mandatory')
volPSExtentStripeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volPSExtentStripeLength.setStatus('mandatory')
volPSExtentInterleaveDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volPSExtentInterleaveDepth.setStatus('mandatory')
redundancyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 9, 1), )
if mibBuilder.loadTexts: redundancyGroupTable.setStatus('mandatory')
redundancyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 9, 1, 1), ).setIndexNames((0, "CIOMIB", "redundancyIndex"))
if mibBuilder.loadTexts: redundancyGroupEntry.setStatus('mandatory')
redundancyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyIndex.setStatus('mandatory')
redundancyType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("copy", 3), ("xor", 4), ("p-q", 5), ("s", 6), ("p-s", 7), ("none", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyType.setStatus('mandatory')
worldWideIdTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 10, 1), )
if mibBuilder.loadTexts: worldWideIdTable.setStatus('mandatory')
worldWideIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 10, 1, 1), ).setIndexNames((0, "CIOMIB", "worldWideIdIndex"))
if mibBuilder.loadTexts: worldWideIdEntry.setStatus('mandatory')
worldWideIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: worldWideIdIndex.setStatus('mandatory')
worldWideIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("vendorProductSerial", 4), ("ieeeExtendedUniqueIdentifier64bit", 5), ("fc-PH64bitNameIdentifier", 6), ("binary", 7), ("unicode", 8), ("lanMACAddress", 9), ("wanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: worldWideIdType.setStatus('mandatory')
worldWideId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: worldWideId.setStatus('mandatory')
associationTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 11, 1), )
if mibBuilder.loadTexts: associationTable.setStatus('mandatory')
associationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 11, 1, 1), ).setIndexNames((0, "CIOMIB", "associationIndex"))
if mibBuilder.loadTexts: associationEntry.setStatus('mandatory')
associationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: associationIndex.setStatus('mandatory')
associationType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: associationType.setStatus('mandatory')
associationObject1 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 11, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: associationObject1.setStatus('mandatory')
associationObject2 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 11, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: associationObject2.setStatus('mandatory')
busPortAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 12, 1), )
if mibBuilder.loadTexts: busPortAssociationTable.setStatus('mandatory')
busPortAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 12, 1, 1), ).setIndexNames((0, "CIOMIB", "busPortAssociationIndex"))
if mibBuilder.loadTexts: busPortAssociationEntry.setStatus('mandatory')
busPortAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busPortAssociationIndex.setStatus('mandatory')
busPortAssociationNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busPortAssociationNegotiatedSpeed.setStatus('mandatory')
busPortAssociationNegotiatedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busPortAssociationNegotiatedWidth.setStatus('mandatory')
componentSpareAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 13, 1), )
if mibBuilder.loadTexts: componentSpareAssociationTable.setStatus('mandatory')
componentSpareAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 13, 1, 1), ).setIndexNames((0, "CIOMIB", "componentSpareAssociationIndex"))
if mibBuilder.loadTexts: componentSpareAssociationEntry.setStatus('mandatory')
componentSpareAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSpareAssociationIndex.setStatus('mandatory')
componentSpareFunctioningState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("inactiveStandby", 3), ("activeStandby", 4), ("activeStandbyLoadBalances", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSpareFunctioningState.setStatus('mandatory')
overallStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("okay", 1), ("warning", 2), ("failure", 3), ("unknown", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallStatus.setStatus('mandatory')
operationalStateTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1), )
if mibBuilder.loadTexts: operationalStateTable.setStatus('mandatory')
operationalStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1), ).setIndexNames((0, "CIOMIB", "operationalStateIndex"))
if mibBuilder.loadTexts: operationalStateEntry.setStatus('mandatory')
operationalStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalStateIndex.setStatus('mandatory')
operationalDeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalDeviceGroupIndex.setStatus('mandatory')
operationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalStatus.setStatus('mandatory')
operationalUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("idle", 3), ("active", 4), ("busy", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalUsageState.setStatus('mandatory')
operationalAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("running", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalAvailabilityStatus.setStatus('mandatory')
operationalAdministrativeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("locked", 3), ("unlocked", 4), ("notApplicable", 5), ("shuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalAdministrativeStatus.setStatus('mandatory')
operationalFatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalFatalErrorCount.setStatus('mandatory')
operationalMajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalMajorErrorCount.setStatus('mandatory')
operationalWarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalWarningErrorCount.setStatus('mandatory')
operationalCurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalCurrentErrorStatus.setStatus('mandatory')
operationalPredictedFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("notSupported", 3), ("noFailurePredicted", 4), ("deviceFailurePredicted", 5), ("mediaFailurePredicted", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalPredictedFailureStatus.setStatus('mandatory')
statisticsTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1), )
if mibBuilder.loadTexts: statisticsTable.setStatus('mandatory')
statisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1), ).setIndexNames((0, "CIOMIB", "statisticsIndex"))
if mibBuilder.loadTexts: statisticsEntry.setStatus('mandatory')
statisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsIndex.setStatus('mandatory')
statisticsBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsBlocksRead.setStatus('mandatory')
statisticsBlocksWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsBlocksWritten.setStatus('mandatory')
statisticsReadCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadCommands.setStatus('mandatory')
statisticsWriteCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteCommands.setStatus('mandatory')
statisticsReadBucket0 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket0.setStatus('mandatory')
statisticsReadBucket1 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket1.setStatus('mandatory')
statisticsReadBucket2 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket2.setStatus('mandatory')
statisticsReadBucket3 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket3.setStatus('mandatory')
statisticsReadBucket4 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket4.setStatus('mandatory')
statisticsReadBucket5 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket5.setStatus('mandatory')
statisticsReadBucket6 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket6.setStatus('mandatory')
statisticsReadBucket7 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket7.setStatus('mandatory')
statisticsReadBucket8 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket8.setStatus('mandatory')
statisticsReadBucket9 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket9.setStatus('mandatory')
statisticsReadBucket10 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket10.setStatus('mandatory')
statisticsReadBucket11 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket11.setStatus('mandatory')
statisticsReadBucket12 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsReadBucket12.setStatus('mandatory')
statisticsWriteBucket0 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket0.setStatus('mandatory')
statisticsWriteBucket1 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket1.setStatus('mandatory')
statisticsWriteBucket2 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket2.setStatus('mandatory')
statisticsWriteBucket3 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket3.setStatus('mandatory')
statisticsWriteBucket4 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket4.setStatus('mandatory')
statisticsWriteBucket5 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket5.setStatus('mandatory')
statisticsWriteBucket6 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket6.setStatus('mandatory')
statisticsWriteBucket7 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket7.setStatus('mandatory')
statisticsWriteBucket8 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket8.setStatus('mandatory')
statisticsWriteBucket9 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket9.setStatus('mandatory')
statisticsWriteBucket10 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket10.setStatus('mandatory')
statisticsWriteBucket11 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket11.setStatus('mandatory')
statisticsWriteBucket12 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 16, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statisticsWriteBucket12.setStatus('mandatory')
cycTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000))
trapLogNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogNumEntries.setStatus('mandatory')
trapLogTable = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 12, 18, 1), )
if mibBuilder.loadTexts: trapLogTable.setStatus('mandatory')
trapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 12, 18, 1, 1), ).setIndexNames((0, "CIOMIB", "trapLogIndex"))
if mibBuilder.loadTexts: trapLogEntry.setStatus('mandatory')
trapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogIndex.setStatus('mandatory')
trapLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogString.setStatus('mandatory')
trapLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 12, 18, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogTimeStamp.setStatus('mandatory')
cycSeverity = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9001), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("informational", 2), ("warning", 3), ("critical", 4))))
if mibBuilder.loadTexts: cycSeverity.setStatus('mandatory')
cycObject = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9002), ObjectIdentifier())
if mibBuilder.loadTexts: cycObject.setStatus('mandatory')
cycPhysicalObjectState = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9003), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("newlyDiscovered", 1), ("failed", 2), ("recovered", 3), ("changed", 4), ("selfMonitoringWarning", 5), ("selfMonitoringEnabled", 6), ("cacheParametersChanged", 7), ("cacheOn", 8), ("cacheOff", 9), ("deleted", 10), ("batteryReconditionScheduled", 11), ("scheduledBatteryReconditionDeleted", 12), ("batteryChangedGoodToLow", 13), ("batteryChangedLowToGood", 14), ("batteryChangedLowToReconditioning", 15), ("batteryChangedGoodToReconditioning", 16), ("batteryChangedReconditioningToLow", 17), ("batteryChangedReconditioningToGood", 18), ("batteryReconditionCompleted", 19), ("batteryReconditionStarted", 20), ("initializeStarted", 21), ("initializeCompleted", 22), ("initializeFailed", 23), ("initializeAbortedByUser", 24), ("verifyStarted", 25), ("verifyCompleted", 26), ("verifyFailed", 27), ("verifyAbortedByUser", 28), ("batteryOkay", 29), ("batteryDead", 30), ("batteryFailedCharge", 31), ("batteryOvercharged", 32), ("batteryCurrentTooHigh", 33), ("batteryTemperatureTooHigh", 34), ("batteryVoltageTooLow", 35), ("batteryMissing", 36), ("batteryShortCircuit", 37))))
if mibBuilder.loadTexts: cycPhysicalObjectState.setStatus('mandatory')
cycVolumeSetState = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9004), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("unsafeShutdown", 1), ("badBlockRepaired", 2), ("offline", 3), ("offlineMemberFailed", 4), ("online", 5), ("criticalState", 6), ("protectionDisabled", 7), ("protectionEnabled", 8), ("selfMonitoringWarning", 9), ("selfMonitoringEnabled", 10), ("memberMissing", 11), ("dedicatedSpareDeleted", 12), ("dedicatedSpareAdded", 13), ("poolSpareDeleted", 14), ("poolSpareAdded", 15), ("dedicatedSpareUsed", 16), ("poolSpareUsed", 17), ("lastSpareUsed", 18), ("lastSpareDeleted", 19), ("cacheParametersChanged", 20), ("cacheOn", 21), ("cacheOff", 22), ("cacheFlushFailed", 23), ("cacheAllocationFailed", 24), ("arrayAdded", 25), ("arrayDeleted", 26), ("scsiAddressesChangedForMembers", 27), ("nameChanged", 28))))
if mibBuilder.loadTexts: cycVolumeSetState.setStatus('mandatory')
cycVolumeSetActivity = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9005), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("reconstruct", 1), ("initialize", 2), ("verify", 3), ("spareTest", 4), ("scheduledReconstruct", 5), ("scheduledInitialize", 6), ("scheduledVerify", 7), ("scheduledSpareTest", 8), ("mirrorBreak", 9), ("mirrorCreate", 10), ("migration", 11), ("expansion", 12))))
if mibBuilder.loadTexts: cycVolumeSetActivity.setStatus('mandatory')
cycVolumeSetActivityState = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9006), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("started", 1), ("startedAutofix", 2), ("completed", 3), ("completedWithMiscompares", 4), ("abortedDueToIOError", 5), ("abortedDueToIOErrorWithMiscompares", 6), ("abortedByOperator", 7), ("abortedByOperatorWithMiscompares", 8), ("failed", 9), ("deleted", 10), ("priorityChanged", 11), ("scheduled", 12), ("modified", 13), ("failedToStart", 14), ("abortedNoMemory", 15), ("restarted", 16), ("suspended", 17), ("resumed", 18), ("stopped", 19), ("running", 20), ("aborted", 21))))
if mibBuilder.loadTexts: cycVolumeSetActivityState.setStatus('mandatory')
cycSpareState = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9007), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("notFunctional", 2))))
if mibBuilder.loadTexts: cycSpareState.setStatus('mandatory')
cycEnclosureComponent = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9008), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cabinet", 1), ("fan", 2), ("powerSupply", 3), ("door", 4), ("speaker", 5), ("temperatureSensor", 6), ("deviceInSlot", 7))))
if mibBuilder.loadTexts: cycEnclosureComponent.setStatus('mandatory')
cycEnclosureComponentNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9009), Integer32())
if mibBuilder.loadTexts: cycEnclosureComponentNumber.setStatus('mandatory')
cycEnclosureComponentState = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 12, 9000, 9010), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("found", 1), ("notResponding", 2), ("operational", 3), ("malfunctioning", 4), ("removed", 5), ("inserted", 6), ("unknownState", 7), ("operationalAndOn", 8), ("operationalAndOff", 9), ("malfunctioningButOn", 10), ("malfunctioningAndOff", 11), ("notPresent", 12), ("present", 13), ("locked", 14), ("unlocked", 15), ("outOfNormalRange", 16), ("inNormalRange", 17), ("runningAtHalfCapacity", 18), ("runningAtMaximumCapacity", 19), ("decreaseToHalfCapacityFailed", 20), ("increaseToMaximumCapacityFailed", 21))))
if mibBuilder.loadTexts: cycEnclosureComponentState.setStatus('mandatory')
cycStorageControllerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 12) + (0,101)).setObjects(("CIOMIB", "cycSeverity"), ("CIOMIB", "cycObject"), ("CIOMIB", "cycPhysicalObjectState"))
cycBusPortStateChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 12) + (0,102)).setObjects(("CIOMIB", "cycSeverity"), ("CIOMIB", "cycObject"), ("CIOMIB", "cycPhysicalObjectState"))
cycStorageDeviceStateChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 12) + (0,103)).setObjects(("CIOMIB", "cycSeverity"), ("CIOMIB", "cycObject"), ("CIOMIB", "cycPhysicalObjectState"))
cycVolumeSetStateChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 12) + (0,104)).setObjects(("CIOMIB", "cycSeverity"), ("CIOMIB", "cycObject"), ("CIOMIB", "cycVolumeSetState"))
cycVolumeSetActivityChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 12) + (0,105)).setObjects(("CIOMIB", "cycSeverity"), ("CIOMIB", "cycObject"), ("CIOMIB", "cycVolumeSetActivity"), ("CIOMIB", "cycVolumeSetActivityState"))
cycSpareStateChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 12) + (0,106)).setObjects(("CIOMIB", "cycSeverity"), ("CIOMIB", "cycObject"), ("CIOMIB", "cycSpareState"))
cycEnclosureStateChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 12) + (0,107)).setObjects(("CIOMIB", "cycSeverity"), ("CIOMIB", "cycObject"), ("CIOMIB", "cycEnclosureComponent"), ("CIOMIB", "cycEnclosureComponentNumber"), ("CIOMIB", "cycEnclosureComponentState"))
mibBuilder.exportSymbols("CIOMIB", portConnectorTypeDescription=portConnectorTypeDescription, statisticsIndex=statisticsIndex, associationObject2=associationObject2, enclType=enclType, operationalFatalErrorCount=operationalFatalErrorCount, trapLog=trapLog, portConnectorType=portConnectorType, cycSeverity=cycSeverity, devRemovableMedia=devRemovableMedia, associationEntry=associationEntry, portMaximumWidth=portMaximumWidth, cycVolumeSetActivityChange=cycVolumeSetActivityChange, operationalStates=operationalStates, associationTable=associationTable, trapLogTable=trapLogTable, busPortTable=busPortTable, componentSpareFunctioningState=componentSpareFunctioningState, operationalStateTable=operationalStateTable, statisticsReadBucket2=statisticsReadBucket2, devEncryption=devEncryption, ctlrDescription=ctlrDescription, adaptec=adaptec, revMinor=revMinor, volCapacity=volCapacity, operationalPredictedFailureStatus=operationalPredictedFailureStatus, statisticsWriteBucket1=statisticsWriteBucket1, cycPhysicalObjectState=cycPhysicalObjectState, worldWideIdType=worldWideIdType, aggPExtentIndex=aggPExtentIndex, cycVolumeSetState=cycVolumeSetState, busPortAssociationEntry=busPortAssociationEntry, operationalUsageState=operationalUsageState, redundancyGroupTable=redundancyGroupTable, trapLogNumEntries=trapLogNumEntries, statisticsReadBucket1=statisticsReadBucket1, statisticsWriteBucket11=statisticsWriteBucket11, operationalMajorErrorCount=operationalMajorErrorCount, storagemanagement=storagemanagement, statisticsWriteBucket4=statisticsWriteBucket4, portSignalCharacteristics=portSignalCharacteristics, volumeSetTable=volumeSetTable, operationalDeviceGroupIndex=operationalDeviceGroupIndex, portIndex=portIndex, statisticsReadBucket6=statisticsReadBucket6, statisticsReadBucket11=statisticsReadBucket11, componentSpareAssociationTable=componentSpareAssociationTable, statisticsWriteBucket0=statisticsWriteBucket0, storageDevice=storageDevice, statisticsReadBucket4=statisticsReadBucket4, busPort=busPort, worldWideIds=worldWideIds, statisticsWriteBucket12=statisticsWriteBucket12, portConnectorGender=portConnectorGender, busPortEntry=busPortEntry, aggregatePhysicalExtent=aggregatePhysicalExtent, aggPsExtentIndex=aggPsExtentIndex, cycVolumeSetActivityState=cycVolumeSetActivityState, statisticsReadBucket8=statisticsReadBucket8, busPortAssociationNegotiatedSpeed=busPortAssociationNegotiatedSpeed, cycStorageDeviceStateChange=cycStorageDeviceStateChange, statisticsWriteBucket8=statisticsWriteBucket8, cycVolumeSetStateChange=cycVolumeSetStateChange, cycVolumeSetActivity=cycVolumeSetActivity, worldWideIdIndex=worldWideIdIndex, worldWideIdTable=worldWideIdTable, devMediaLoaded=devMediaLoaded, cycEnclosureComponent=cycEnclosureComponent, volPSExtentInterleaveDepth=volPSExtentInterleaveDepth, statisticsWriteBucket7=statisticsWriteBucket7, cycEnclosureStateChange=cycEnclosureStateChange, statisticsEntry=statisticsEntry, enclIndex=enclIndex, trapLogString=trapLogString, associations=associations, aggregatePExtentTable=aggregatePExtentTable, redundancyType=redundancyType, operationalStatus=operationalStatus, statisticsWriteCommands=statisticsWriteCommands, statisticsReadBucket5=statisticsReadBucket5, aggPExtentCheckDataBlocks=aggPExtentCheckDataBlocks, aggregatePExtentEntry=aggregatePExtentEntry, portIsochronous=portIsochronous, statistics=statistics, operationalStateEntry=operationalStateEntry, overallObjectStatus=overallObjectStatus, componentSpareAssociationEntry=componentSpareAssociationEntry, statisticsReadCommands=statisticsReadCommands, statisticsWriteBucket2=statisticsWriteBucket2, devSubIdentifier=devSubIdentifier, ctlrSecondsSinceLastPowerUp=ctlrSecondsSinceLastPowerUp, aggPExtentBlocks=aggPExtentBlocks, volPSExtentStripeLength=volPSExtentStripeLength, worldWideIdEntry=worldWideIdEntry, busPortAssociations=busPortAssociations, busPortAssociationIndex=busPortAssociationIndex, operationalCurrentErrorStatus=operationalCurrentErrorStatus, statisticsReadBucket7=statisticsReadBucket7, statisticsReadBucket10=statisticsReadBucket10, aggregateProtectedSpace=aggregateProtectedSpace, ctlrIndex=ctlrIndex, statisticsWriteBucket9=statisticsWriteBucket9, portAddressDescriptor=portAddressDescriptor, overallStatus=overallStatus, cycStorageControllerStateChange=cycStorageControllerStateChange, ctlrProtectionManagement=ctlrProtectionManagement, cycEnclosureComponentState=cycEnclosureComponentState, devRemovableDevice=devRemovableDevice, associationIndex=associationIndex, devType=devType, enclosure=enclosure, volumeSet=volumeSet, enclTable=enclTable, devIndex=devIndex, revMajor=revMajor, enclDescription=enclDescription, volName=volName, cio2=cio2, ctlrBusMaster=ctlrBusMaster, trapLogTimeStamp=trapLogTimeStamp, componentSpareAssociations=componentSpareAssociations, statisticsWriteBucket10=statisticsWriteBucket10, devEntry=devEntry, aggregatePsExtentTable=aggregatePsExtentTable, statisticsReadBucket3=statisticsReadBucket3, portMaximumAttachments=portMaximumAttachments, busPortAssociationTable=busPortAssociationTable, aggPsExtentBlocks=aggPsExtentBlocks, redundancyGroup=redundancyGroup, statisticsWriteBucket5=statisticsWriteBucket5, trapLogIndex=trapLogIndex, statisticsTable=statisticsTable, statisticsBlocksRead=statisticsBlocksRead, cycEnclosureComponentNumber=cycEnclosureComponentNumber, redundancyIndex=redundancyIndex, devTypeDescr=devTypeDescr, cycSpareState=cycSpareState, associationType=associationType, statisticsWriteBucket3=statisticsWriteBucket3, statisticsReadBucket12=statisticsReadBucket12, trapLogEntry=trapLogEntry, cycTraps=cycTraps, devFormattedMediaCapacity=devFormattedMediaCapacity, volumeSetEntry=volumeSetEntry, ctlrEntry=ctlrEntry, devCompression=devCompression, statisticsReadBucket0=statisticsReadBucket0, mibRevision=mibRevision, storageController=storageController, enclEntry=enclEntry, busPortAssociationNegotiatedWidth=busPortAssociationNegotiatedWidth, deviceTable=deviceTable, operationalStateIndex=operationalStateIndex, cycSpareStateChange=cycSpareStateChange, statisticsReadBucket9=statisticsReadBucket9, statisticsBlocksWritten=statisticsBlocksWritten, cycObject=cycObject, componentSpareAssociationIndex=componentSpareAssociationIndex, operationalAvailabilityStatus=operationalAvailabilityStatus, statisticsWriteBucket6=statisticsWriteBucket6, portProtocol=portProtocol, redundancyGroupEntry=redundancyGroupEntry, worldWideId=worldWideId, trapLogCount=trapLogCount, operationalWarningErrorCount=operationalWarningErrorCount, ctlrTable=ctlrTable, devLoaded=devLoaded, portProtocolDescription=portProtocolDescription, aggregatePsExtentEntry=aggregatePsExtentEntry, associationObject1=associationObject1, operationalAdministrativeStatus=operationalAdministrativeStatus, volIndex=volIndex, cycBusPortStateChange=cycBusPortStateChange, portMaximumTransferRate=portMaximumTransferRate, devMediaBlockSize=devMediaBlockSize)
