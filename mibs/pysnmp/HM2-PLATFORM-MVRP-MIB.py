#
# PySNMP MIB module HM2-PLATFORM-MVRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-MVRP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
hm2AgentDot1qMrpMxrp, = mibBuilder.importSymbols("HM2-PLATFORM-MRP-MIB", "hm2AgentDot1qMrpMxrp")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Unsigned32, iso, Counter64, Gauge32, IpAddress, TimeTicks, ObjectIdentity, Counter32, MibIdentifier, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Unsigned32", "iso", "Counter64", "Gauge32", "IpAddress", "TimeTicks", "ObjectIdentity", "Counter32", "MibIdentifier", "Bits", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hm2PlatformMVRP = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2))
hm2PlatformMVRP.setRevisions(('2013-04-10 00:00',))
if mibBuilder.loadTexts: hm2PlatformMVRP.setLastUpdated('201304100000Z')
if mibBuilder.loadTexts: hm2PlatformMVRP.setOrganization('Hirschmann Automation and Control GmbH')
hm2AgentDot1qMvrp = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1))
hm2AgentDot1qMrpMvrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2))
hm2AgentDot1qPortMvrpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpTable.setStatus('current')
hm2AgentDot1qPortMvrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-MVRP-MIB", "hm2AgentDot1qMvrpPort"))
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpEntry.setStatus('current')
hm2AgentDot1qMvrpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMvrpPort.setStatus('current')
hm2AgentDot1qPortMvrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 1, 1, 10), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpMode.setStatus('current')
hm2AgentDot1qBridgeMvrpMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMvrpMode.setStatus('current')
hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp.setStatus('current')
hm2AgentDot1qMrpMvrpPktTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktTx.setStatus('current')
hm2AgentDot1qMrpMvrpPktRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRx.setStatus('current')
hm2AgentDot1qMrpMvrpPktRxBadHeader = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRxBadHeader.setStatus('current')
hm2AgentDot1qMrpMvrpPktRxBadFormat = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRxBadFormat.setStatus('current')
hm2AgentDot1qMrpMvrpPktTxFailure = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktTxFailure.setStatus('current')
hm2AgentDot1qMrpMvrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6), )
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpStatsTable.setStatus('current')
hm2AgentDot1qMrpMvrpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-MVRP-MIB", "hm2AgentDot1qMrpMvrpIntf"))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpStatsEntry.setStatus('current')
hm2AgentDot1qMrpMvrpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpIntf.setStatus('current')
hm2AgentDot1qMrpMvrpPortPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktTx.setStatus('current')
hm2AgentDot1qMrpMvrpPortPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRx.setStatus('current')
hm2AgentDot1qMrpMvrpPortPktRxBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRxBadHeader.setStatus('current')
hm2AgentDot1qMrpMvrpPortPktRxBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRxBadFormat.setStatus('current')
hm2AgentDot1qMrpMvrpPortPktTxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktTxFailure.setStatus('current')
hm2AgentDot1qMrpMvrpPortPktRegFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRegFailure.setStatus('current')
hm2AgentDot1qMrpMvrpPktMessageFailure = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktMessageFailure.setStatus('current')
mibBuilder.exportSymbols("HM2-PLATFORM-MVRP-MIB", hm2AgentDot1qPortMvrpEntry=hm2AgentDot1qPortMvrpEntry, hm2AgentDot1qMrpMvrpPktTx=hm2AgentDot1qMrpMvrpPktTx, hm2AgentDot1qMrpMvrpStatsTable=hm2AgentDot1qMrpMvrpStatsTable, hm2AgentDot1qPortMvrpTable=hm2AgentDot1qPortMvrpTable, hm2AgentDot1qMrpMvrpPortPktRxBadFormat=hm2AgentDot1qMrpMvrpPortPktRxBadFormat, hm2AgentDot1qMrpMvrpStats=hm2AgentDot1qMrpMvrpStats, hm2AgentDot1qMrpMvrpPktMessageFailure=hm2AgentDot1qMrpMvrpPktMessageFailure, hm2AgentDot1qMrpMvrpPktRxBadFormat=hm2AgentDot1qMrpMvrpPktRxBadFormat, hm2AgentDot1qMrpMvrpPortPktRxBadHeader=hm2AgentDot1qMrpMvrpPortPktRxBadHeader, hm2AgentDot1qMrpMvrpPktRx=hm2AgentDot1qMrpMvrpPktRx, hm2AgentDot1qMrpMvrpIntf=hm2AgentDot1qMrpMvrpIntf, hm2AgentDot1qMrpMvrpPktRxBadHeader=hm2AgentDot1qMrpMvrpPktRxBadHeader, hm2PlatformMVRP=hm2PlatformMVRP, hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp=hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp, hm2AgentDot1qMrpMvrpPortPktTxFailure=hm2AgentDot1qMrpMvrpPortPktTxFailure, hm2AgentDot1qMvrpPort=hm2AgentDot1qMvrpPort, PYSNMP_MODULE_ID=hm2PlatformMVRP, hm2AgentDot1qMrpMvrpPktTxFailure=hm2AgentDot1qMrpMvrpPktTxFailure, hm2AgentDot1qBridgeMvrpMode=hm2AgentDot1qBridgeMvrpMode, hm2AgentDot1qMvrp=hm2AgentDot1qMvrp, hm2AgentDot1qMrpMvrpStatsEntry=hm2AgentDot1qMrpMvrpStatsEntry, hm2AgentDot1qMrpMvrpPortPktTx=hm2AgentDot1qMrpMvrpPortPktTx, hm2AgentDot1qMrpMvrpPortPktRx=hm2AgentDot1qMrpMvrpPortPktRx, hm2AgentDot1qMrpMvrpPortPktRegFailure=hm2AgentDot1qMrpMvrpPortPktRegFailure, hm2AgentDot1qPortMvrpMode=hm2AgentDot1qPortMvrpMode)
